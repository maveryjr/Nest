(()=>{console.log("Nest content script loaded");var e=null,t=null;function n(){console.log("Nest: Text selection event fired"),setTimeout(function(){var t=window.getSelection(),n=null==t?void 0:t.toString().trim();if(console.log("Nest: Selected text:",n,"Length:",null==n?void 0:n.length),n&&n.length>10){console.log("Nest: Text selection meets minimum length requirement");var r=null==t?void 0:t.getRangeAt(0);if(r){console.log("Nest: Range found, creating highlight button");var l=function(e){var t=e.commonAncestorContainer.textContent||"",n=e.startOffset,o=e.endOffset,i=Math.max(0,n-100),s=Math.min(t.length,o+100);return t.substring(i,s)}(r);e={text:n,context:l,position:o(r)},function(e){console.log("Nest: Creating highlight button"),s();var t=e.getBoundingClientRect();if(console.log("Nest: Button position:",t),0===t.width&&0===t.height){console.log("Nest: Range rect is empty, trying alternative positioning");var n=window.getSelection();if(n&&n.rangeCount>0){var o=e.startContainer,r=null;if(o.nodeType===Node.TEXT_NODE&&o.parentElement?r=o.parentElement.getBoundingClientRect():o.nodeType===Node.ELEMENT_NODE&&(r=o.getBoundingClientRect()),console.log("Nest: Alternative positioning:",r),r&&r.width>0&&r.height>0)return void i(r)}return console.log("Nest: All positioning methods failed, using viewport center fallback"),void i({bottom:window.innerHeight/2,left:window.innerWidth/2,top:window.innerHeight/2,right:window.innerWidth/2,width:0,height:0})}i(t)}(r)}}else console.log("Nest: Text selection too short or empty, hiding button"),s(),e=null},100)}function o(e){return{startOffset:e.startOffset,endOffset:e.endOffset}}function i(n){(t=document.createElement("div")).id="nest-highlight-button",t.innerHTML='\n    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n      <path d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>\n    </svg>\n    Save highlight\n  ';var o=window.scrollY||document.documentElement.scrollTop,i=window.scrollX||document.documentElement.scrollLeft,l=window.innerHeight,a=window.innerWidth,c=n.bottom||n.top||0,d=n.left||n.right||0;c<0&&(c=o+100),d<0&&(d=50);var g=c+10,p=Math.max(10,Math.min(a-200,d));if(console.log("Nest: Position calculation:",{rect:n,scrollTop:o,scrollLeft:i,rawTop:c,rawLeft:d,buttonTop:g,buttonLeft:p,viewportHeight:l,viewportWidth:a}),t.style.cssText="\n    position: absolute;\n    top: ".concat(g,"px;\n    left: ").concat(p,"px;\n    background: #10b981 !important;\n    color: white !important;\n    padding: 8px 12px;\n    border-radius: 6px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    z-index: 999999 !important;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n    font-size: 13px;\n    font-weight: 500;\n    cursor: pointer;\n    display: flex !important;\n    align-items: center;\n    gap: 6px;\n    animation: fadeIn 0.2s ease-out;\n    border: 1px solid #059669 !important;\n    text-decoration: none;\n    pointer-events: auto !important;\n    user-select: none;\n    min-width: 140px;\n    opacity: 1 !important;\n    visibility: visible !important;\n  "),!document.getElementById("nest-highlight-styles")){var u=document.createElement("style");u.id="nest-highlight-styles",u.textContent="\n      @keyframes fadeIn {\n        from { opacity: 0; transform: translateY(-10px); }\n        to { opacity: 1; transform: translateY(0); }\n      }\n      #nest-highlight-button:hover {\n        background: #059669 !important;\n        transform: translateY(-1px);\n      }\n    ",document.head.appendChild(u)}t.addEventListener("click",function(t){t.preventDefault(),t.stopPropagation(),console.log("Nest: Highlight button clicked!"),console.log("Nest: saveHighlight called",e),e?(s(),console.log("Nest: Sending saveHighlight message to background script"),chrome.runtime.sendMessage({action:"saveHighlight",selectedText:e.text,context:e.context,position:e.position},function(e){console.log("Nest: Received response from background script:",e),e&&e.success?r():console.error("Failed to save highlight:",null==e?void 0:e.error)}),e=null):console.log("Nest: No selection data available")}),t.addEventListener("mousedown",function(e){e.preventDefault(),console.log("Nest: Button mousedown")}),document.body.appendChild(t),console.log("Nest: Highlight button added to page at position:",g,p),t.offsetHeight;var h=t.getBoundingClientRect(),m=h.top>=0&&h.top<=l&&h.left>=0&&h.left<=a;console.log("Nest: Button visibility check:",{buttonRect:h,isVisible:m}),m||(console.log("Nest: Button is not visible, repositioning to viewport center"),t.style.top="".concat(o+l/2,"px"),t.style.left="".concat(a/2-70,"px")),setTimeout(function(){t&&s()},8e3)}function s(){t&&t.parentNode&&(t.parentNode.removeChild(t),t=null)}function r(){var e=document.createElement("div");e.style.cssText="\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #8b5cf6;\n    color: white;\n    padding: 12px 24px;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    z-index: 10000;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n    font-size: 14px;\n    font-weight: 500;\n    animation: slideIn 0.3s ease-out;\n  ",e.innerHTML="✨ Highlight saved to Nest",l(e)}function l(e){var t=document.createElement("style");t.textContent="\n    @keyframes slideIn {\n      from {\n        transform: translateX(100%);\n        opacity: 0;\n      }\n      to {\n        transform: translateX(0);\n        opacity: 1;\n      }\n    }\n  ",document.head.appendChild(t),document.body.appendChild(e),setTimeout(function(){e.parentNode&&(e.style.animation="slideIn 0.3s ease-out reverse",setTimeout(function(){e.parentNode&&e.parentNode.removeChild(e)},300))},3e3)}chrome.runtime.onMessage.addListener(function(e,t,n){if(console.log("Content Script: Message received:",e),"getPageContent"===e.action){var o=function(){var e=document.querySelectorAll("script, style, nav, header, footer, .ad, .advertisement"),t=document.cloneNode(!0);e.forEach(function(e){var n=t.querySelector(e.tagName.toLowerCase());n&&n.remove()});var n=t.querySelector("main")||t.querySelector("article")||t.querySelector(".content")||t.querySelector("#content")||t.querySelector(".post")||t.querySelector(".entry")||t.body;n||(n=t.body);var o=n.textContent||n.innerText||"";return(o=o.replace(/\s+/g," ").replace(/\n\s*\n/g,"\n").trim()).length>3e3&&(o=o.substring(0,3e3)+"..."),o}();console.log("Content Script: Sending page content, length:",o.length),n({content:o})}else"showSaveConfirmation"===e.action?((i=document.createElement("div")).style.cssText="\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #10b981;\n    color: white;\n    padding: 12px 24px;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    z-index: 10000;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n    font-size: 14px;\n    font-weight: 500;\n    animation: slideIn 0.3s ease-out;\n  ",i.textContent="✓ Saved to Nest",l(i)):"showHighlightConfirmation"===e.action&&r();var i;return!0}),document.addEventListener("mouseup",n),document.addEventListener("keyup",n),console.log("Nest: Text selection event listeners added"),document.addEventListener("click",function(e){t&&!t.contains(e.target)&&s()})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,