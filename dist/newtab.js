/*! For license information please see newtab.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={20:(e,t,n)=>{var r=n(540),a=Symbol.for("react.element"),i=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,n){var r,l={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)i.call(t,r)&&!s.hasOwnProperty(r)&&(l[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===l[r]&&(l[r]=t[r]);return{$$typeof:a,type:e,key:u,ref:c,props:l,_owner:o.current}}t.jsx=l,t.jsxs=l},45:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(825));t.default=class{constructor(e,{headers:t={},schema:n,fetch:r}){this.url=e,this.headers=t,this.schema=n,this.fetch=r}select(e,{head:t=!1,count:n}={}){const r=t?"HEAD":"GET";let i=!1;const o=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!i?"":('"'===e&&(i=!i),e)).join("");return this.url.searchParams.set("select",o),n&&(this.headers.Prefer=`count=${n}`),new a.default({method:r,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(e,{count:t,defaultToNull:n=!0}={}){const r=[];if(this.headers.Prefer&&r.push(this.headers.Prefer),t&&r.push(`count=${t}`),n||r.push("missing=default"),this.headers.Prefer=r.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new a.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}upsert(e,{onConflict:t,ignoreDuplicates:n=!1,count:r,defaultToNull:i=!0}={}){const o=[`resolution=${n?"ignore":"merge"}-duplicates`];if(void 0!==t&&this.url.searchParams.set("on_conflict",t),this.headers.Prefer&&o.push(this.headers.Prefer),r&&o.push(`count=${r}`),i||o.push("missing=default"),this.headers.Prefer=o.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new a.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}update(e,{count:t}={}){const n=[];return this.headers.Prefer&&n.push(this.headers.Prefer),t&&n.push(`count=${t}`),this.headers.Prefer=n.join(","),new a.default({method:"PATCH",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}delete({count:e}={}){const t=[];return e&&t.push(`count=${e}`),this.headers.Prefer&&t.unshift(this.headers.Prefer),this.headers.Prefer=t.join(","),new a.default({method:"DELETE",url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=i[u]||0,d="".concat(u," ").concat(c);i[u]=c+1;var h=n(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(f);else{var p=a(f,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:p,references:1})}o.push(d)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=n(i[o]);t[s].references--}for(var l=r(e,a),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},206:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},261:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(660));class i extends a.default{select(e){let t=!1;const n=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!t?"":('"'===e&&(t=!t),e)).join("");return this.url.searchParams.set("select",n),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(e,{ascending:t=!0,nullsFirst:n,foreignTable:r,referencedTable:a=r}={}){const i=a?`${a}.order`:"order",o=this.url.searchParams.get(i);return this.url.searchParams.set(i,`${o?`${o},`:""}${e}.${t?"asc":"desc"}${void 0===n?"":n?".nullsfirst":".nullslast"}`),this}limit(e,{foreignTable:t,referencedTable:n=t}={}){const r=void 0===n?"limit":`${n}.limit`;return this.url.searchParams.set(r,`${e}`),this}range(e,t,{foreignTable:n,referencedTable:r=n}={}){const a=void 0===r?"offset":`${r}.offset`,i=void 0===r?"limit":`${r}.limit`;return this.url.searchParams.set(a,`${e}`),this.url.searchParams.set(i,""+(t-e+1)),this}abortSignal(e){return this.signal=e,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return"GET"===this.method?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:e=!1,verbose:t=!1,settings:n=!1,buffers:r=!1,wal:a=!1,format:i="text"}={}){var o;const s=[e?"analyze":null,t?"verbose":null,n?"settings":null,r?"buffers":null,a?"wal":null].filter(Boolean).join("|"),l=null!==(o=this.headers.Accept)&&void 0!==o?o:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${i}; for="${l}"; options=${s};`,this}rollback(){var e;return(null!==(e=this.headers.Prefer)&&void 0!==e?e:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}}t.default=i},279:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PostgrestError=t.PostgrestBuilder=t.PostgrestTransformBuilder=t.PostgrestFilterBuilder=t.PostgrestQueryBuilder=t.PostgrestClient=void 0;const a=r(n(342));t.PostgrestClient=a.default;const i=r(n(45));t.PostgrestQueryBuilder=i.default;const o=r(n(825));t.PostgrestFilterBuilder=o.default;const s=r(n(261));t.PostgrestTransformBuilder=s.default;const l=r(n(660));t.PostgrestBuilder=l.default;const u=r(n(818));t.PostgrestError=u.default,t.default={PostgrestClient:a.default,PostgrestQueryBuilder:i.default,PostgrestFilterBuilder:o.default,PostgrestTransformBuilder:s.default,PostgrestBuilder:l.default,PostgrestError:u.default}},287:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=b.prototype;var A=y.prototype=new v;A.constructor=y,g(A,b.prototype),A.isPureReactComponent=!0;var w=Array.isArray,k=Object.prototype.hasOwnProperty,E={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var a,i={},o=null,s=null;if(null!=t)for(a in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)k.call(t,a)&&!C.hasOwnProperty(a)&&(i[a]=t[a]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===i[a]&&(i[a]=l[a]);return{$$typeof:n,type:e,key:o,ref:s,props:i,_owner:E.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var S=/\/+/g;function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(e){return t[e]})}(""+e.key):t.toString(36)}function T(e,t,a,i,o){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return o=o(l=e),e=""===i?"."+B(l,0):i,w(o)?(a="",null!=e&&(a=e.replace(S,"$&/")+"/"),T(o,t,a,"",function(e){return e})):null!=o&&(x(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,a+(!o.key||l&&l.key===o.key?"":(""+o.key).replace(S,"$&/")+"/")+e)),t.push(o)),1;if(l=0,i=""===i?".":i+":",w(e))for(var u=0;u<e.length;u++){var c=i+B(s=e[u],u);l+=T(s,t,a,c,o)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=T(s=s.value,t,a,c=i+B(s,u++),o);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function j(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",function(e){return t.call(n,e,a++)}),r}function P(e){if(-1===e._status){var t=e._result;(t=t()).then(function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)},function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)}),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O={current:null},I={transition:null},N={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:I,ReactCurrentOwner:E};function R(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:j,forEach:function(e,t,n){j(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return j(e,function(){t++}),t},toArray:function(e){return j(e,function(e){return e})||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=b,t.Fragment=a,t.Profiler=o,t.PureComponent=y,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.act=R,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=g({},e.props),i=e.key,o=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,s=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)k.call(t,u)&&!C.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];a.children=l}return{$$typeof:n,type:e.type,key:i,ref:o,props:a,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},t.unstable_act=R,t.useCallback=function(e,t){return O.current.useCallback(e,t)},t.useContext=function(e){return O.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return O.current.useDeferredValue(e)},t.useEffect=function(e,t){return O.current.useEffect(e,t)},t.useId=function(){return O.current.useId()},t.useImperativeHandle=function(e,t,n){return O.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return O.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return O.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return O.current.useMemo(e,t)},t.useReducer=function(e,t,n){return O.current.useReducer(e,t,n)},t.useRef=function(e){return O.current.useRef(e)},t.useState=function(e){return O.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return O.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return O.current.useTransition()},t.version="18.3.1"},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n}).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},338:(e,t,n)=>{var r=n(961);t.createRoot=r.createRoot,r.hydrateRoot},342:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(45)),i=r(n(825)),o=n(530);class s{constructor(e,{headers:t={},schema:n,fetch:r}={}){this.url=e,this.headers=Object.assign(Object.assign({},o.DEFAULT_HEADERS),t),this.schemaName=n,this.fetch=r}from(e){const t=new URL(`${this.url}/${e}`);return new a.default(t,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(e){return new s(this.url,{headers:this.headers,schema:e,fetch:this.fetch})}rpc(e,t={},{head:n=!1,get:r=!1,count:a}={}){let o;const s=new URL(`${this.url}/rpc/${e}`);let l;n||r?(o=n?"HEAD":"GET",Object.entries(t).filter(([e,t])=>void 0!==t).map(([e,t])=>[e,Array.isArray(t)?`{${t.join(",")}}`:`${t}`]).forEach(([e,t])=>{s.searchParams.append(e,t)})):(o="POST",l=t);const u=Object.assign({},this.headers);return a&&(u.Prefer=`count=${a}`),new i.default({method:o,url:s,headers:u,schema:this.schemaName,body:l,fetch:this.fetch,allowEmpty:!1})}}t.default=s},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},463:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<i(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,o=a>>>1;r<o;){var s=2*(r+1)-1,l=e[s],u=s+1,c=e[u];if(0>i(l,n))u<a&&0>i(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[s]=n,r=s);else{if(!(u<a&&0>i(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var u=[],c=[],d=1,h=null,f=3,p=!1,g=!1,m=!1,b="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function w(e){if(m=!1,A(e),!g)if(null!==r(u))g=!0,I(k);else{var t=r(c);null!==t&&N(w,t.startTime-e)}}function k(e,n){g=!1,m&&(m=!1,v(x),x=-1),p=!0;var i=f;try{for(A(n),h=r(u);null!==h&&(!(h.expirationTime>n)||e&&!T());){var o=h.callback;if("function"==typeof o){h.callback=null,f=h.priorityLevel;var s=o(h.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?h.callback=s:h===r(u)&&a(u),A(n)}else a(u);h=r(u)}if(null!==h)var l=!0;else{var d=r(c);null!==d&&N(w,d.startTime-n),l=!1}return l}finally{h=null,f=i,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,C=!1,_=null,x=-1,S=5,B=-1;function T(){return!(t.unstable_now()-B<S)}function j(){if(null!==_){var e=t.unstable_now();B=e;var n=!0;try{n=_(!0,e)}finally{n?E():(C=!1,_=null)}}else C=!1}if("function"==typeof y)E=function(){y(j)};else if("undefined"!=typeof MessageChannel){var P=new MessageChannel,O=P.port2;P.port1.onmessage=j,E=function(){O.postMessage(null)}}else E=function(){b(j,0)};function I(e){_=e,C||(C=!0,E())}function N(e,n){x=b(function(){e(t.unstable_now())},n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||p||(g=!0,I(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):S=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,a,i){var o=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?o+i:o,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>o?(e.sortIndex=i,n(c,e),null===r(u)&&e===r(c)&&(m?(v(x),x=-1):m=!0,N(w,i-o))):(e.sortIndex=s,n(u,e),g||p||(g=!0,I(k))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},519:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="0.0.0-automated"},530:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_HEADERS=void 0;const r=n(519);t.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${r.version}`}},540:(e,t,n)=>{e.exports=n(287)},551:(e,t,n)=>{var r=n(540),a=n(982);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,s={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(s[e]=t,e=0;e<t.length;e++)o.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function g(e,t,n,r,a,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=o}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){m[e]=new g(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){m[e]=new g(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){m[e]=new g(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){m[e]=new g(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){m[e]=new g(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)});var b=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function y(e,t,n,r){var a=m.hasOwnProperty(t)?m[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(p,e)||!d.call(f,e)&&(h.test(e)?p[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(b,v);m[t]=new g(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(b,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(b,v);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)}),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)});var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),k=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),S=Symbol.for("react.context"),B=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),j=Symbol.for("react.suspense_list"),P=Symbol.for("react.memo"),O=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var L,z=Object.assign;function D(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var $=!1;function U(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),i=r.stack.split("\n"),o=a.length-1,s=i.length-1;1<=o&&0<=s&&a[o]!==i[s];)s--;for(;1<=o&&0<=s;o--,s--)if(a[o]!==i[s]){if(1!==o||1!==s)do{if(o--,0>--s||a[o]!==i[s]){var l="\n"+a[o].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=o&&0<=s);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function M(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function F(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case k:return"Portal";case _:return"Profiler";case C:return"StrictMode";case T:return"Suspense";case j:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case S:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case B:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case P:return null!==(t=e.displayName||null)?t:F(e.type)||"Memo";case O:t=e._payload,e=e._init;try{return F(e(t))}catch(e){}}return null}function q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return F(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function V(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return z({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function J(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Q(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function X(e,t){Q(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return z({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ie(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function oe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return ce(e,t)})}:ce);function he(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(fe).forEach(function(e){pe.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]})});var be=z({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(be[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ae=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Ee=null,Ce=null;function _e(e){if(e=ya(e)){if("function"!=typeof ke)throw Error(i(280));var t=e.stateNode;t&&(t=wa(t),ke(e.stateNode,e.type,t))}}function xe(e){Ee?Ce?Ce.push(e):Ce=[e]:Ee=e}function Se(){if(Ee){var e=Ee,t=Ce;if(Ce=Ee=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Be(e,t){return e(t)}function Te(){}var je=!1;function Pe(e,t,n){if(je)return e(t,n);je=!0;try{return Be(e,t,n)}finally{je=!1,(null!==Ee||null!==Ce)&&(Te(),Se())}}function Oe(e,t){var n=e.stateNode;if(null===n)return null;var r=wa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ie=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ce){Ie=!1}function Re(e,t,n,r,a,i,o,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Le=!1,ze=null,De=!1,$e=null,Ue={onError:function(e){Le=!0,ze=e}};function Me(e,t,n,r,a,i,o,s,l){Le=!1,ze=null,Re.apply(Ue,arguments)}function Fe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Fe(e)!==e)throw Error(i(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Fe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return We(a),e;if(o===r)return We(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var s=!1,l=a.child;l;){if(l===n){s=!0,n=a,r=o;break}if(l===r){s=!0,r=a,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=a;break}if(l===r){s=!0,r=o,n=a;break}l=l.sibling}if(!s)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var Ve=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,Je=a.unstable_requestPaint,Qe=a.unstable_now,Xe=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,it=null,ot=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ht(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,i=e.pingedLanes,o=268435455&n;if(0!==o){var s=o&~a;0!==s?r=dt(s):0!==(i&=o)&&(r=dt(i))}else 0!==(o=n&~a)?r=dt(o):0!==i&&(r=dt(i));if(0===r)return 0;if(0!==t&&t!==r&&0===(t&a)&&((a=r&-r)>=(i=t&-t)||16===a&&4194240&i))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-ot(t)),r|=e[n],t&=~a;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=ut;return!(4194240&(ut<<=1))&&(ut=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function bt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ot(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ot(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var yt=0;function At(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var wt,kt,Et,Ct,_t,xt=!1,St=[],Bt=null,Tt=null,jt=null,Pt=new Map,Ot=new Map,It=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rt(e,t){switch(e){case"focusin":case"focusout":Bt=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":jt=null;break;case"pointerover":case"pointerout":Pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ot.delete(t.pointerId)}}function Lt(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[a]},null!==t&&null!==(t=ya(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function zt(e){var t=va(e.target);if(null!==t){var n=Fe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=qe(n)))return e.blockedOn=t,void _t(e.priority,function(){Et(n)})}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Dt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ya(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ae=r,n.target.dispatchEvent(r),Ae=null,t.shift()}return!0}function $t(e,t,n){Dt(e)&&n.delete(t)}function Ut(){xt=!1,null!==Bt&&Dt(Bt)&&(Bt=null),null!==Tt&&Dt(Tt)&&(Tt=null),null!==jt&&Dt(jt)&&(jt=null),Pt.forEach($t),Ot.forEach($t)}function Mt(e,t){e.blockedOn===t&&(e.blockedOn=null,xt||(xt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Ut)))}function Ft(e){function t(t){return Mt(t,e)}if(0<St.length){Mt(St[0],e);for(var n=1;n<St.length;n++){var r=St[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Bt&&Mt(Bt,e),null!==Tt&&Mt(Tt,e),null!==jt&&Mt(jt,e),Pt.forEach(t),Ot.forEach(t),n=0;n<It.length;n++)(r=It[n]).blockedOn===e&&(r.blockedOn=null);for(;0<It.length&&null===(n=It[0]).blockedOn;)zt(n),null===n.blockedOn&&It.shift()}var qt=A.ReactCurrentBatchConfig,Wt=!0;function Ht(e,t,n,r){var a=yt,i=qt.transition;qt.transition=null;try{yt=1,Vt(e,t,n,r)}finally{yt=a,qt.transition=i}}function Yt(e,t,n,r){var a=yt,i=qt.transition;qt.transition=null;try{yt=4,Vt(e,t,n,r)}finally{yt=a,qt.transition=i}}function Vt(e,t,n,r){if(Wt){var a=Gt(e,t,n,r);if(null===a)Wr(e,t,r,Kt,n),Rt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Bt=Lt(Bt,e,t,n,r,a),!0;case"dragenter":return Tt=Lt(Tt,e,t,n,r,a),!0;case"mouseover":return jt=Lt(jt,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return Pt.set(i,Lt(Pt.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,Ot.set(i,Lt(Ot.get(i)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Rt(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==a;){var i=ya(a);if(null!==i&&wt(i),null===(i=Gt(e,t,n,r))&&Wr(e,t,r,Kt,n),i===a)break;a=i}null!==a&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Kt=null;function Gt(e,t,n,r){if(Kt=null,null!==(e=va(e=we(r))))if(null===(t=Fe(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=qe(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Jt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Qt=null,Xt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Xt,r=n.length,a="value"in Qt?Qt.value:Qt.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[i-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,i){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return z(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,sn,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),dn=z({},un,{view:0,detail:0}),hn=an(dn),fn=z({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(on=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=on=0,ln=e),on)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),pn=an(fn),gn=an(z({},fn,{dataTransfer:0})),mn=an(z({},dn,{relatedTarget:0})),bn=an(z({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=z({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=an(vn),An=an(z({},un,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function _n(){return Cn}var xn=z({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Sn=an(xn),Bn=an(z({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(z({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),jn=an(z({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=z({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),On=an(Pn),In=[9,13,27,32],Nn=c&&"CompositionEvent"in window,Rn=null;c&&"documentMode"in document&&(Rn=document.documentMode);var Ln=c&&"TextEvent"in window&&!Rn,zn=c&&(!Nn||Rn&&8<Rn&&11>=Rn),Dn=String.fromCharCode(32),$n=!1;function Un(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Mn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Fn=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Hn(e,t,n,r){xe(r),0<(t=Yr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Vn=null;function Kn(e){Dr(e,0)}function Gn(e){if(V(Aa(e)))return e}function Jn(e,t){if("change"===e)return t}var Qn=!1;if(c){var Xn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Xn=Zn}else Xn=!1;Qn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),Vn=Yn=null)}function nr(e){if("value"===e.propertyName&&Gn(Vn)){var t=[];Hn(t,Vn,e,we(e)),Pe(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Vn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Vn)}function ir(e,t){if("click"===e)return Gn(t)}function or(e,t){if("input"===e||"change"===e)return Gn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!sr(e[a],t[a]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pr(e){var t=hr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,i=Math.min(r.start,a);r=void 0===r.end?i:Math.min(r.end,a),!e.extend&&i>r&&(a=r,r=i,i=a),a=cr(n,i);var o=cr(n,r);a&&o&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,br=null,vr=null,yr=!1;function Ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==mr||mr!==K(r)||(r="selectionStart"in(r=mr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Yr(br,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Er={},Cr={};function _r(e){if(Er[e])return Er[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return Er[e]=n[t];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var xr=_r("animationend"),Sr=_r("animationiteration"),Br=_r("animationstart"),Tr=_r("transitionend"),jr=new Map,Pr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Or(e,t){jr.set(e,t),l(t,[e])}for(var Ir=0;Ir<Pr.length;Ir++){var Nr=Pr[Ir];Or(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Or(xr,"onAnimationEnd"),Or(Sr,"onAnimationIteration"),Or(Br,"onAnimationStart"),Or("dblclick","onDoubleClick"),Or("focusin","onFocus"),Or("focusout","onBlur"),Or(Tr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function zr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,s,l,u){if(Me.apply(this,arguments),Le){if(!Le)throw Error(i(198));var c=ze;Le=!1,ze=null,De||(De=!0,$e=c)}}(r,t,void 0,e),e.currentTarget=null}function Dr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var o=r.length-1;0<=o;o--){var s=r[o],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==i&&a.isPropagationStopped())break e;zr(a,s,u),i=l}else for(o=0;o<r.length;o++){if(l=(s=r[o]).instance,u=s.currentTarget,s=s.listener,l!==i&&a.isPropagationStopped())break e;zr(a,s,u),i=l}}}if(De)throw e=$e,De=!1,$e=null,e}function $r(e,t){var n=t[ga];void 0===n&&(n=t[ga]=new Set);var r=e+"__bubble";n.has(r)||(qr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),qr(n,e,r,t)}var Mr="_reactListening"+Math.random().toString(36).slice(2);function Fr(e){if(!e[Mr]){e[Mr]=!0,o.forEach(function(t){"selectionchange"!==t&&(Lr.has(t)||Ur(t,!1,e),Ur(t,!0,e))});var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Mr]||(t[Mr]=!0,Ur("selectionchange",!1,t))}}function qr(e,t,n,r){switch(Jt(t)){case 1:var a=Ht;break;case 4:a=Yt;break;default:a=Vt}n=a.bind(null,t,n,e),a=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,a){var i=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var s=r.stateNode.containerInfo;if(s===a||8===s.nodeType&&s.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var l=o.tag;if((3===l||4===l)&&((l=o.stateNode.containerInfo)===a||8===l.nodeType&&l.parentNode===a))return;o=o.return}for(;null!==s;){if(null===(o=va(s)))return;if(5===(l=o.tag)||6===l){r=i=o;continue e}s=s.parentNode}}r=r.return}Pe(function(){var r=i,a=we(n),o=[];e:{var s=jr.get(e);if(void 0!==s){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Sn;break;case"focusin":u="focus",l=mn;break;case"focusout":u="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Tn;break;case xr:case Sr:case Br:l=bn;break;case Tr:l=jn;break;case"scroll":l=hn;break;case"wheel":l=On;break;case"copy":case"cut":case"paste":l=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Bn}var c=!!(4&t),d=!c&&"scroll"===e,h=c?null!==s?s+"Capture":null:s;c=[];for(var f,p=r;null!==p;){var g=(f=p).stateNode;if(5===f.tag&&null!==g&&(f=g,null!==h&&null!=(g=Oe(p,h))&&c.push(Hr(p,g,f))),d)break;p=p.return}0<c.length&&(s=new l(s,u,null,n,a),o.push({event:s,listeners:c}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===Ae||!(u=n.relatedTarget||n.fromElement)||!va(u)&&!u[pa])&&(l||s)&&(s=a.window===a?a:(s=a.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?va(u):null)&&(u!==(d=Fe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=pn,g="onMouseLeave",h="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=Bn,g="onPointerLeave",h="onPointerEnter",p="pointer"),d=null==l?s:Aa(l),f=null==u?s:Aa(u),(s=new c(g,p+"leave",l,n,a)).target=d,s.relatedTarget=f,g=null,va(a)===r&&((c=new c(h,p+"enter",u,n,a)).target=f,c.relatedTarget=d,g=c),d=g,l&&u)e:{for(h=u,p=0,f=c=l;f;f=Vr(f))p++;for(f=0,g=h;g;g=Vr(g))f++;for(;0<p-f;)c=Vr(c),p--;for(;0<f-p;)h=Vr(h),f--;for(;p--;){if(c===h||null!==h&&c===h.alternate)break e;c=Vr(c),h=Vr(h)}c=null}else c=null;null!==l&&Kr(o,s,l,c,!1),null!==u&&null!==d&&Kr(o,d,u,c,!0)}if("select"===(l=(s=r?Aa(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Jn;else if(Wn(s))if(Qn)m=or;else{m=ar;var b=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=ir);switch(m&&(m=m(e,r))?Hn(o,m,n,a):(b&&b(e,s,r),"focusout"===e&&(b=s._wrapperState)&&b.controlled&&"number"===s.type&&ee(s,"number",s.value)),b=r?Aa(r):window,e){case"focusin":(Wn(b)||"true"===b.contentEditable)&&(mr=b,br=r,vr=null);break;case"focusout":vr=br=mr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,Ar(o,n,a);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":Ar(o,n,a)}var v;if(Nn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Fn?Un(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(zn&&"ko"!==n.locale&&(Fn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Fn&&(v=en()):(Xt="value"in(Qt=a)?Qt.value:Qt.textContent,Fn=!0)),0<(b=Yr(r,y)).length&&(y=new An(y,e,null,n,a),o.push({event:y,listeners:b}),(v||null!==(v=Mn(n)))&&(y.data=v))),(v=Ln?function(e,t){switch(e){case"compositionend":return Mn(t);case"keypress":return 32!==t.which?null:($n=!0,Dn);case"textInput":return(e=t.data)===Dn&&$n?null:e;default:return null}}(e,n):function(e,t){if(Fn)return"compositionend"===e||!Nn&&Un(e,t)?(e=en(),Zt=Xt=Qt=null,Fn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(a=new An("onBeforeInput","beforeinput",null,n,a),o.push({event:a,listeners:r}),a.data=v)}Dr(o,t)})}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,i=a.stateNode;5===a.tag&&null!==i&&(a=i,null!=(i=Oe(e,n))&&r.unshift(Hr(e,i,a)),null!=(i=Oe(e,t))&&r.push(Hr(e,i,a))),e=e.return}return r}function Vr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var i=t._reactName,o=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,a?null!=(l=Oe(n,i))&&o.unshift(Hr(n,l,s)):a||null!=(l=Oe(n,i))&&o.push(Hr(n,l,s))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Gr=/\r\n?/g,Jr=/\u0000|\uFFFD/g;function Qr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Jr,"")}function Xr(e,t,n){if(t=Qr(t),Qr(e)!==t&&n)throw Error(i(425))}function Zr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,ia="function"==typeof Promise?Promise:void 0,oa="function"==typeof queueMicrotask?queueMicrotask:void 0!==ia?function(e){return ia.resolve(null).then(e).catch(sa)}:ra;function sa(e){setTimeout(function(){throw e})}function la(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ft(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ft(t)}function ua(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),ha="__reactFiber$"+da,fa="__reactProps$"+da,pa="__reactContainer$"+da,ga="__reactEvents$"+da,ma="__reactListeners$"+da,ba="__reactHandles$"+da;function va(e){var t=e[ha];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pa]||n[ha]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[ha])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ya(e){return!(e=e[ha]||e[pa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Aa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function wa(e){return e[fa]||null}var ka=[],Ea=-1;function Ca(e){return{current:e}}function _a(e){0>Ea||(e.current=ka[Ea],ka[Ea]=null,Ea--)}function xa(e,t){Ea++,ka[Ea]=e.current,e.current=t}var Sa={},Ba=Ca(Sa),Ta=Ca(!1),ja=Sa;function Pa(e,t){var n=e.type.contextTypes;if(!n)return Sa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Oa(e){return null!=e.childContextTypes}function Ia(){_a(Ta),_a(Ba)}function Na(e,t,n){if(Ba.current!==Sa)throw Error(i(168));xa(Ba,t),xa(Ta,n)}function Ra(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(i(108,q(e)||"Unknown",a));return z({},n,r)}function La(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Sa,ja=Ba.current,xa(Ba,e),xa(Ta,Ta.current),!0}function za(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Ra(e,t,ja),r.__reactInternalMemoizedMergedChildContext=e,_a(Ta),_a(Ba),xa(Ba,e)):_a(Ta),xa(Ta,n)}var Da=null,$a=!1,Ua=!1;function Ma(e){null===Da?Da=[e]:Da.push(e)}function Fa(){if(!Ua&&null!==Da){Ua=!0;var e=0,t=yt;try{var n=Da;for(yt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Da=null,$a=!1}catch(t){throw null!==Da&&(Da=Da.slice(e+1)),Ve(Ze,Fa),t}finally{yt=t,Ua=!1}}return null}var qa=[],Wa=0,Ha=null,Ya=0,Va=[],Ka=0,Ga=null,Ja=1,Qa="";function Xa(e,t){qa[Wa++]=Ya,qa[Wa++]=Ha,Ha=e,Ya=t}function Za(e,t,n){Va[Ka++]=Ja,Va[Ka++]=Qa,Va[Ka++]=Ga,Ga=e;var r=Ja;e=Qa;var a=32-ot(r)-1;r&=~(1<<a),n+=1;var i=32-ot(t)+a;if(30<i){var o=a-a%5;i=(r&(1<<o)-1).toString(32),r>>=o,a-=o,Ja=1<<32-ot(t)+a|n<<a|r,Qa=i+e}else Ja=1<<i|n<<a|r,Qa=e}function ei(e){null!==e.return&&(Xa(e,1),Za(e,1,0))}function ti(e){for(;e===Ha;)Ha=qa[--Wa],qa[Wa]=null,Ya=qa[--Wa],qa[Wa]=null;for(;e===Ga;)Ga=Va[--Ka],Va[Ka]=null,Qa=Va[--Ka],Va[Ka]=null,Ja=Va[--Ka],Va[Ka]=null}var ni=null,ri=null,ai=!1,ii=null;function oi(e,t){var n=Pu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function si(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ni=e,ri=ua(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ni=e,ri=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ga?{id:Ja,overflow:Qa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Pu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ni=e,ri=null,!0);default:return!1}}function li(e){return!(!(1&e.mode)||128&e.flags)}function ui(e){if(ai){var t=ri;if(t){var n=t;if(!si(e,t)){if(li(e))throw Error(i(418));t=ua(n.nextSibling);var r=ni;t&&si(e,t)?oi(r,n):(e.flags=-4097&e.flags|2,ai=!1,ni=e)}}else{if(li(e))throw Error(i(418));e.flags=-4097&e.flags|2,ai=!1,ni=e}}}function ci(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ni=e}function di(e){if(e!==ni)return!1;if(!ai)return ci(e),ai=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ri)){if(li(e))throw hi(),Error(i(418));for(;t;)oi(e,t),t=ua(t.nextSibling)}if(ci(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ri=ua(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ri=null}}else ri=ni?ua(e.stateNode.nextSibling):null;return!0}function hi(){for(var e=ri;e;)e=ua(e.nextSibling)}function fi(){ri=ni=null,ai=!1}function pi(e){null===ii?ii=[e]:ii.push(e)}var gi=A.ReactCurrentBatchConfig;function mi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=r,o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=a.refs;null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function bi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function vi(e){return(0,e._init)(e._payload)}function yi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Iu(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=zu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var i=n.type;return i===E?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===O&&vi(i)===t.type)?((r=a(t,n.props)).ref=mi(e,t,n),r.return=e,r):((r=Nu(n.type,n.key,n.props,null,e.mode,r)).ref=mi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Du(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Ru(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=zu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Nu(t.type,t.key,t.props,null,e.mode,n)).ref=mi(e,null,t),n.return=e,n;case k:return(t=Du(t,e.mode,n)).return=e,t;case O:return h(e,(0,t._init)(t._payload),n)}if(te(t)||R(t))return(t=Ru(t,e.mode,n,null)).return=e,t;bi(e,t)}return null}function f(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===a?u(e,t,n,r):null;case k:return n.key===a?c(e,t,n,r):null;case O:return f(e,t,(a=n._init)(n._payload),r)}if(te(n)||R(n))return null!==a?null:d(e,t,n,r,null);bi(e,n)}return null}function p(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case O:return p(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||R(r))return d(t,e=e.get(n)||null,r,a,null);bi(t,r)}return null}function g(a,i,s,l){for(var u=null,c=null,d=i,g=i=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var b=f(a,d,s[g],l);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(a,d),i=o(b,i,g),null===c?u=b:c.sibling=b,c=b,d=m}if(g===s.length)return n(a,d),ai&&Xa(a,g),u;if(null===d){for(;g<s.length;g++)null!==(d=h(a,s[g],l))&&(i=o(d,i,g),null===c?u=d:c.sibling=d,c=d);return ai&&Xa(a,g),u}for(d=r(a,d);g<s.length;g++)null!==(m=p(d,a,g,s[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),i=o(m,i,g),null===c?u=m:c.sibling=m,c=m);return e&&d.forEach(function(e){return t(a,e)}),ai&&Xa(a,g),u}function m(a,s,l,u){var c=R(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var d=c=null,g=s,m=s=0,b=null,v=l.next();null!==g&&!v.done;m++,v=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var y=f(a,g,v.value,u);if(null===y){null===g&&(g=b);break}e&&g&&null===y.alternate&&t(a,g),s=o(y,s,m),null===d?c=y:d.sibling=y,d=y,g=b}if(v.done)return n(a,g),ai&&Xa(a,m),c;if(null===g){for(;!v.done;m++,v=l.next())null!==(v=h(a,v.value,u))&&(s=o(v,s,m),null===d?c=v:d.sibling=v,d=v);return ai&&Xa(a,m),c}for(g=r(a,g);!v.done;m++,v=l.next())null!==(v=p(g,a,m,v.value,u))&&(e&&null!==v.alternate&&g.delete(null===v.key?m:v.key),s=o(v,s,m),null===d?c=v:d.sibling=v,d=v);return e&&g.forEach(function(e){return t(a,e)}),ai&&Xa(a,m),c}return function e(r,i,o,l){if("object"==typeof o&&null!==o&&o.type===E&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case w:e:{for(var u=o.key,c=i;null!==c;){if(c.key===u){if((u=o.type)===E){if(7===c.tag){n(r,c.sibling),(i=a(c,o.props.children)).return=r,r=i;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===O&&vi(u)===c.type){n(r,c.sibling),(i=a(c,o.props)).ref=mi(r,c,o),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}o.type===E?((i=Ru(o.props.children,r.mode,l,o.key)).return=r,r=i):((l=Nu(o.type,o.key,o.props,null,r.mode,l)).ref=mi(r,i,o),l.return=r,r=l)}return s(r);case k:e:{for(c=o.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===o.containerInfo&&i.stateNode.implementation===o.implementation){n(r,i.sibling),(i=a(i,o.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=Du(o,r.mode,l)).return=r,r=i}return s(r);case O:return e(r,i,(c=o._init)(o._payload),l)}if(te(o))return g(r,i,o,l);if(R(o))return m(r,i,o,l);bi(r,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==i&&6===i.tag?(n(r,i.sibling),(i=a(i,o)).return=r,r=i):(n(r,i),(i=zu(o,r.mode,l)).return=r,r=i),s(r)):n(r,i)}}var Ai=yi(!0),wi=yi(!1),ki=Ca(null),Ei=null,Ci=null,_i=null;function xi(){_i=Ci=Ei=null}function Si(e){var t=ki.current;_a(ki),e._currentValue=t}function Bi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ti(e,t){Ei=e,_i=Ci=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(ys=!0),e.firstContext=null)}function ji(e){var t=e._currentValue;if(_i!==e)if(e={context:e,memoizedValue:t,next:null},null===Ci){if(null===Ei)throw Error(i(308));Ci=e,Ei.dependencies={lanes:0,firstContext:e}}else Ci=Ci.next=e;return t}var Pi=null;function Oi(e){null===Pi?Pi=[e]:Pi.push(e)}function Ii(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Oi(t)):(n.next=a.next,a.next=n),t.interleaved=n,Ni(e,r)}function Ni(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ri=!1;function Li(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function zi(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Di(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function $i(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Bl){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Ni(e,n)}return null===(a=r.interleaved)?(t.next=t,Oi(r)):(t.next=a.next,a.next=t),r.interleaved=t,Ni(e,n)}function Ui(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function Mi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?a=i=o:i=i.next=o,n=n.next}while(null!==n);null===i?a=i=t:i=i.next=t}else a=i=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Fi(e,t,n,r){var a=e.updateQueue;Ri=!1;var i=a.firstBaseUpdate,o=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var l=s,u=l.next;l.next=null,null===o?i=u:o.next=u,o=l;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l)}if(null!==i){var d=a.baseState;for(o=0,c=u=l=null,s=i;;){var h=s.lane,f=s.eventTime;if((r&h)===h){null!==c&&(c=c.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,g=s;switch(h=t,f=n,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(f,d,h);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(h="function"==typeof(p=g.payload)?p.call(f,d,h):p))break e;d=z({},d,h);break e;case 2:Ri=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(h=a.effects)?a.effects=[s]:h.push(s))}else f={eventTime:f,lane:h,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=f,l=d):c=c.next=f,o|=h;if(null===(s=s.next)){if(null===(s=a.shared.pending))break;s=(h=s).next,h.next=null,a.lastBaseUpdate=h,a.shared.pending=null}}if(null===c&&(l=d),a.baseState=l,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{o|=a.lane,a=a.next}while(a!==t)}else null===i&&(a.shared.lanes=0);Ll|=o,e.lanes=o,e.memoizedState=d}}function qi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(i(191,a));a.call(r)}}}var Wi={},Hi=Ca(Wi),Yi=Ca(Wi),Vi=Ca(Wi);function Ki(e){if(e===Wi)throw Error(i(174));return e}function Gi(e,t){switch(xa(Vi,t),xa(Yi,e),xa(Hi,Wi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}_a(Hi),xa(Hi,t)}function Ji(){_a(Hi),_a(Yi),_a(Vi)}function Qi(e){Ki(Vi.current);var t=Ki(Hi.current),n=le(t,e.type);t!==n&&(xa(Yi,e),xa(Hi,n))}function Xi(e){Yi.current===e&&(_a(Hi),_a(Yi))}var Zi=Ca(0);function eo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var to=[];function no(){for(var e=0;e<to.length;e++)to[e]._workInProgressVersionPrimary=null;to.length=0}var ro=A.ReactCurrentDispatcher,ao=A.ReactCurrentBatchConfig,io=0,oo=null,so=null,lo=null,uo=!1,co=!1,ho=0,fo=0;function po(){throw Error(i(321))}function go(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function mo(e,t,n,r,a,o){if(io=o,oo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ro.current=null===e||null===e.memoizedState?Zo:es,e=n(r,a),co){o=0;do{if(co=!1,ho=0,25<=o)throw Error(i(301));o+=1,lo=so=null,t.updateQueue=null,ro.current=ts,e=n(r,a)}while(co)}if(ro.current=Xo,t=null!==so&&null!==so.next,io=0,lo=so=oo=null,uo=!1,t)throw Error(i(300));return e}function bo(){var e=0!==ho;return ho=0,e}function vo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===lo?oo.memoizedState=lo=e:lo=lo.next=e,lo}function yo(){if(null===so){var e=oo.alternate;e=null!==e?e.memoizedState:null}else e=so.next;var t=null===lo?oo.memoizedState:lo.next;if(null!==t)lo=t,so=e;else{if(null===e)throw Error(i(310));e={memoizedState:(so=e).memoizedState,baseState:so.baseState,baseQueue:so.baseQueue,queue:so.queue,next:null},null===lo?oo.memoizedState=lo=e:lo=lo.next=e}return lo}function Ao(e,t){return"function"==typeof t?t(e):t}function wo(e){var t=yo(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=so,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var s=a.next;a.next=o.next,o.next=s}r.baseQueue=a=o,n.pending=null}if(null!==a){o=a.next,r=r.baseState;var l=s=null,u=null,c=o;do{var d=c.lane;if((io&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var h={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=h,s=r):u=u.next=h,oo.lanes|=d,Ll|=d}c=c.next}while(null!==c&&c!==o);null===u?s=r:u.next=l,sr(r,t.memoizedState)||(ys=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{o=a.lane,oo.lanes|=o,Ll|=o,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function ko(e){var t=yo(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var s=a=a.next;do{o=e(o,s.action),s=s.next}while(s!==a);sr(o,t.memoizedState)||(ys=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Eo(){}function Co(e,t){var n=oo,r=yo(),a=t(),o=!sr(r.memoizedState,a);if(o&&(r.memoizedState=a,ys=!0),r=r.queue,Lo(So.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||null!==lo&&1&lo.memoizedState.tag){if(n.flags|=2048,Po(9,xo.bind(null,n,r,a,t),void 0,null),null===Tl)throw Error(i(349));30&io||_o(n,t,a)}return a}function _o(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=oo.updateQueue)?(t={lastEffect:null,stores:null},oo.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function xo(e,t,n,r){t.value=n,t.getSnapshot=r,Bo(t)&&To(e)}function So(e,t,n){return n(function(){Bo(t)&&To(e)})}function Bo(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function To(e){var t=Ni(e,1);null!==t&&nu(t,e,1,-1)}function jo(e){var t=vo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ao,lastRenderedState:e},t.queue=e,e=e.dispatch=Ko.bind(null,oo,e),[t.memoizedState,e]}function Po(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=oo.updateQueue)?(t={lastEffect:null,stores:null},oo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Oo(){return yo().memoizedState}function Io(e,t,n,r){var a=vo();oo.flags|=e,a.memoizedState=Po(1|t,n,void 0,void 0===r?null:r)}function No(e,t,n,r){var a=yo();r=void 0===r?null:r;var i=void 0;if(null!==so){var o=so.memoizedState;if(i=o.destroy,null!==r&&go(r,o.deps))return void(a.memoizedState=Po(t,n,i,r))}oo.flags|=e,a.memoizedState=Po(1|t,n,i,r)}function Ro(e,t){return Io(8390656,8,e,t)}function Lo(e,t){return No(2048,8,e,t)}function zo(e,t){return No(4,2,e,t)}function Do(e,t){return No(4,4,e,t)}function $o(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Uo(e,t,n){return n=null!=n?n.concat([e]):null,No(4,4,$o.bind(null,t,e),n)}function Mo(){}function Fo(e,t){var n=yo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&go(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function qo(e,t){var n=yo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&go(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Wo(e,t,n){return 21&io?(sr(n,t)||(n=gt(),oo.lanes|=n,Ll|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,ys=!0),e.memoizedState=n)}function Ho(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var r=ao.transition;ao.transition={};try{e(!1),t()}finally{yt=n,ao.transition=r}}function Yo(){return yo().memoizedState}function Vo(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Go(e)?Jo(t,n):null!==(n=Ii(e,t,n,r))&&(nu(n,e,r,eu()),Qo(n,t,r))}function Ko(e,t,n){var r=tu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Go(e))Jo(t,a);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var o=t.lastRenderedState,s=i(o,n);if(a.hasEagerState=!0,a.eagerState=s,sr(s,o)){var l=t.interleaved;return null===l?(a.next=a,Oi(t)):(a.next=l.next,l.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Ii(e,t,a,r))&&(nu(n,e,r,a=eu()),Qo(n,t,r))}}function Go(e){var t=e.alternate;return e===oo||null!==t&&t===oo}function Jo(e,t){co=uo=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Qo(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var Xo={readContext:ji,useCallback:po,useContext:po,useEffect:po,useImperativeHandle:po,useInsertionEffect:po,useLayoutEffect:po,useMemo:po,useReducer:po,useRef:po,useState:po,useDebugValue:po,useDeferredValue:po,useTransition:po,useMutableSource:po,useSyncExternalStore:po,useId:po,unstable_isNewReconciler:!1},Zo={readContext:ji,useCallback:function(e,t){return vo().memoizedState=[e,void 0===t?null:t],e},useContext:ji,useEffect:Ro,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Io(4194308,4,$o.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Io(4194308,4,e,t)},useInsertionEffect:function(e,t){return Io(4,2,e,t)},useMemo:function(e,t){var n=vo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=vo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Vo.bind(null,oo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vo().memoizedState=e},useState:jo,useDebugValue:Mo,useDeferredValue:function(e){return vo().memoizedState=e},useTransition:function(){var e=jo(!1),t=e[0];return e=Ho.bind(null,e[1]),vo().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=oo,a=vo();if(ai){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===Tl)throw Error(i(349));30&io||_o(r,t,n)}a.memoizedState=n;var o={value:n,getSnapshot:t};return a.queue=o,Ro(So.bind(null,r,o,e),[e]),r.flags|=2048,Po(9,xo.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=vo(),t=Tl.identifierPrefix;if(ai){var n=Qa;t=":"+t+"R"+(n=(Ja&~(1<<32-ot(Ja)-1)).toString(32)+n),0<(n=ho++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=fo++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},es={readContext:ji,useCallback:Fo,useContext:ji,useEffect:Lo,useImperativeHandle:Uo,useInsertionEffect:zo,useLayoutEffect:Do,useMemo:qo,useReducer:wo,useRef:Oo,useState:function(){return wo(Ao)},useDebugValue:Mo,useDeferredValue:function(e){return Wo(yo(),so.memoizedState,e)},useTransition:function(){return[wo(Ao)[0],yo().memoizedState]},useMutableSource:Eo,useSyncExternalStore:Co,useId:Yo,unstable_isNewReconciler:!1},ts={readContext:ji,useCallback:Fo,useContext:ji,useEffect:Lo,useImperativeHandle:Uo,useInsertionEffect:zo,useLayoutEffect:Do,useMemo:qo,useReducer:ko,useRef:Oo,useState:function(){return ko(Ao)},useDebugValue:Mo,useDeferredValue:function(e){var t=yo();return null===so?t.memoizedState=e:Wo(t,so.memoizedState,e)},useTransition:function(){return[ko(Ao)[0],yo().memoizedState]},useMutableSource:Eo,useSyncExternalStore:Co,useId:Yo,unstable_isNewReconciler:!1};function ns(e,t){if(e&&e.defaultProps){for(var n in t=z({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rs(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:z({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var as={isMounted:function(e){return!!(e=e._reactInternals)&&Fe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),a=tu(e),i=Di(r,a);i.payload=t,null!=n&&(i.callback=n),null!==(t=$i(e,i,a))&&(nu(t,e,a,r),Ui(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),a=tu(e),i=Di(r,a);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=$i(e,i,a))&&(nu(t,e,a,r),Ui(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),a=Di(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=$i(e,a,r))&&(nu(t,e,r,n),Ui(t,e,r))}};function is(e,t,n,r,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,o):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(a,i))}function os(e,t,n){var r=!1,a=Sa,i=t.contextType;return"object"==typeof i&&null!==i?i=ji(i):(a=Oa(t)?ja:Ba.current,i=(r=null!=(r=t.contextTypes))?Pa(e,a):Sa),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=as,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function ss(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&as.enqueueReplaceState(t,t.state,null)}function ls(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},Li(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=ji(i):(i=Oa(t)?ja:Ba.current,a.context=Pa(e,i)),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(rs(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&as.enqueueReplaceState(a,a.state,null),Fi(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function us(e,t){try{var n="",r=t;do{n+=M(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function cs(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function ds(e,t){try{console.error(t.value)}catch(e){setTimeout(function(){throw e})}}var hs="function"==typeof WeakMap?WeakMap:Map;function fs(e,t,n){(n=Di(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,Hl=r),ds(0,t)},n}function ps(e,t,n){(n=Di(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){ds(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){ds(0,t),"function"!=typeof r&&(null===Yl?Yl=new Set([this]):Yl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gs(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new hs;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=_u.bind(null,e,t,n),t.then(e,e))}function ms(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function bs(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Di(-1,1)).tag=2,$i(n,t,1))),n.lanes|=1),e)}var vs=A.ReactCurrentOwner,ys=!1;function As(e,t,n,r){t.child=null===e?wi(t,null,n,r):Ai(t,e.child,n,r)}function ws(e,t,n,r,a){n=n.render;var i=t.ref;return Ti(t,a),r=mo(e,t,n,r,i,a),n=bo(),null===e||ys?(ai&&n&&ei(t),t.flags|=1,As(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Ws(e,t,a))}function ks(e,t,n,r,a){if(null===e){var i=n.type;return"function"!=typeof i||Ou(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Nu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Es(e,t,i,r,a))}if(i=e.child,0===(e.lanes&a)){var o=i.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)return Ws(e,t,a)}return t.flags|=1,(e=Iu(i,r)).ref=t.ref,e.return=t,t.child=e}function Es(e,t,n,r,a){if(null!==e){var i=e.memoizedProps;if(lr(i,r)&&e.ref===t.ref){if(ys=!1,t.pendingProps=r=i,0===(e.lanes&a))return t.lanes=e.lanes,Ws(e,t,a);131072&e.flags&&(ys=!0)}}return xs(e,t,n,r,a)}function Cs(e,t,n){var r=t.pendingProps,a=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xa(Il,Ol),Ol|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,xa(Il,Ol),Ol|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xa(Il,Ol),Ol|=n;else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,xa(Il,Ol),Ol|=r;return As(e,t,a,n),t.child}function _s(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function xs(e,t,n,r,a){var i=Oa(n)?ja:Ba.current;return i=Pa(t,i),Ti(t,a),n=mo(e,t,n,r,i,a),r=bo(),null===e||ys?(ai&&r&&ei(t),t.flags|=1,As(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Ws(e,t,a))}function Ss(e,t,n,r,a){if(Oa(n)){var i=!0;La(t)}else i=!1;if(Ti(t,a),null===t.stateNode)qs(e,t),os(t,n,r),ls(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var l=o.context,u=n.contextType;u="object"==typeof u&&null!==u?ji(u):Pa(t,u=Oa(n)?ja:Ba.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||l!==u)&&ss(t,o,r,u),Ri=!1;var h=t.memoizedState;o.state=h,Fi(t,r,o,a),l=t.memoizedState,s!==r||h!==l||Ta.current||Ri?("function"==typeof c&&(rs(t,n,c,r),l=t.memoizedState),(s=Ri||is(t,n,s,r,h,l,u))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),o.props=r,o.state=l,o.context=u,r=s):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,zi(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:ns(t.type,s),o.props=u,d=t.pendingProps,h=o.context,l="object"==typeof(l=n.contextType)&&null!==l?ji(l):Pa(t,l=Oa(n)?ja:Ba.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==d||h!==l)&&ss(t,o,r,l),Ri=!1,h=t.memoizedState,o.state=h,Fi(t,r,o,a);var p=t.memoizedState;s!==d||h!==p||Ta.current||Ri?("function"==typeof f&&(rs(t,n,f,r),p=t.memoizedState),(u=Ri||is(t,n,u,r,h,p,l)||!1)?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=l,r=u):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),r=!1)}return Bs(e,t,n,r,i,a)}function Bs(e,t,n,r,a,i){_s(e,t);var o=!!(128&t.flags);if(!r&&!o)return a&&za(t,n,!1),Ws(e,t,i);r=t.stateNode,vs.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=Ai(t,e.child,null,i),t.child=Ai(t,null,s,i)):As(e,t,s,i),t.memoizedState=r.state,a&&za(t,n,!0),t.child}function Ts(e){var t=e.stateNode;t.pendingContext?Na(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Na(0,t.context,!1),Gi(e,t.containerInfo)}function js(e,t,n,r,a){return fi(),pi(a),t.flags|=256,As(e,t,n,r),t.child}var Ps,Os,Is,Ns,Rs={dehydrated:null,treeContext:null,retryLane:0};function Ls(e){return{baseLanes:e,cachePool:null,transitions:null}}function zs(e,t,n){var r,a=t.pendingProps,o=Zi.current,s=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&o)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),xa(Zi,1&o),null===e)return ui(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=a.children,e=a.fallback,s?(a=t.mode,s=t.child,l={mode:"hidden",children:l},1&a||null===s?s=Lu(l,a,0,null):(s.childLanes=0,s.pendingProps=l),e=Ru(e,a,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=Ls(n),t.memoizedState=Rs,e):Ds(t,l));if(null!==(o=e.memoizedState)&&null!==(r=o.dehydrated))return function(e,t,n,r,a,o,s){if(n)return 256&t.flags?(t.flags&=-257,$s(e,t,s,r=cs(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=r.fallback,a=t.mode,r=Lu({mode:"visible",children:r.children},a,0,null),(o=Ru(o,a,s,null)).flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,1&t.mode&&Ai(t,e.child,null,s),t.child.memoizedState=Ls(s),t.memoizedState=Rs,o);if(!(1&t.mode))return $s(e,t,s,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var l=r.dgst;return r=l,$s(e,t,s,r=cs(o=Error(i(419)),r,void 0))}if(l=0!==(s&e.childLanes),ys||l){if(null!==(r=Tl)){switch(s&-s){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!==(a&(r.suspendedLanes|s))?0:a)&&a!==o.retryLane&&(o.retryLane=a,Ni(e,a),nu(r,e,a,-1))}return gu(),$s(e,t,s,r=cs(Error(i(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Su.bind(null,e),a._reactRetry=t,null):(e=o.treeContext,ri=ua(a.nextSibling),ni=t,ai=!0,ii=null,null!==e&&(Va[Ka++]=Ja,Va[Ka++]=Qa,Va[Ka++]=Ga,Ja=e.id,Qa=e.overflow,Ga=t),(t=Ds(t,r.children)).flags|=4096,t)}(e,t,l,a,r,o,n);if(s){s=a.fallback,l=t.mode,r=(o=e.child).sibling;var u={mode:"hidden",children:a.children};return 1&l||t.child===o?(a=Iu(o,u)).subtreeFlags=14680064&o.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=u,t.deletions=null),null!==r?s=Iu(r,s):(s=Ru(s,l,n,null)).flags|=2,s.return=t,a.return=t,a.sibling=s,t.child=a,a=s,s=t.child,l=null===(l=e.child.memoizedState)?Ls(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Rs,a}return e=(s=e.child).sibling,a=Iu(s,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Ds(e,t){return(t=Lu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function $s(e,t,n,r){return null!==r&&pi(r),Ai(t,e.child,null,n),(e=Ds(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Us(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Bi(e.return,t,n)}function Ms(e,t,n,r,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a)}function Fs(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(As(e,t,r.children,n),2&(r=Zi.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Us(e,n,t);else if(19===e.tag)Us(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(Zi,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===eo(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ms(t,!1,a,n,i);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===eo(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ms(t,!0,n,null,i);break;case"together":Ms(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function qs(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ws(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ll|=t.lanes,0===(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Iu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Iu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hs(e,t){if(!ai)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ys(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Vs(e,t,n){var r=t.pendingProps;switch(ti(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ys(t),null;case 1:case 17:return Oa(t.type)&&Ia(),Ys(t),null;case 3:return r=t.stateNode,Ji(),_a(Ta),_a(Ba),no(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(di(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ii&&(ou(ii),ii=null))),Os(e,t),Ys(t),null;case 5:Xi(t);var a=Ki(Vi.current);if(n=t.type,null!==e&&null!=t.stateNode)Is(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Ys(t),null}if(e=Ki(Hi.current),di(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[ha]=t,r[fa]=o,e=!!(1&t.mode),n){case"dialog":$r("cancel",r),$r("close",r);break;case"iframe":case"object":case"embed":$r("load",r);break;case"video":case"audio":for(a=0;a<Rr.length;a++)$r(Rr[a],r);break;case"source":$r("error",r);break;case"img":case"image":case"link":$r("error",r),$r("load",r);break;case"details":$r("toggle",r);break;case"input":J(r,o),$r("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},$r("invalid",r);break;case"textarea":ae(r,o),$r("invalid",r)}for(var l in ve(n,o),a=null,o)if(o.hasOwnProperty(l)){var u=o[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==o.suppressHydrationWarning&&Xr(r.textContent,u,e),a=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==o.suppressHydrationWarning&&Xr(r.textContent,u,e),a=["children",""+u]):s.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&$r("scroll",r)}switch(n){case"input":Y(r),Z(r,o,!0);break;case"textarea":Y(r),oe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Zr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[ha]=t,e[fa]=r,Ps(e,t,!1,!1),t.stateNode=e;e:{switch(l=ye(n,r),n){case"dialog":$r("cancel",e),$r("close",e),a=r;break;case"iframe":case"object":case"embed":$r("load",e),a=r;break;case"video":case"audio":for(a=0;a<Rr.length;a++)$r(Rr[a],e);a=r;break;case"source":$r("error",e),a=r;break;case"img":case"image":case"link":$r("error",e),$r("load",e),a=r;break;case"details":$r("toggle",e),a=r;break;case"input":J(e,r),a=G(e,r),$r("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=z({},r,{value:void 0}),$r("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),$r("invalid",e)}for(o in ve(n,a),u=a)if(u.hasOwnProperty(o)){var c=u[o];"style"===o?me(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===o?"string"==typeof c?("textarea"!==n||""!==c)&&he(e,c):"number"==typeof c&&he(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(s.hasOwnProperty(o)?null!=c&&"onScroll"===o&&$r("scroll",e):null!=c&&y(e,o,c,l))}switch(n){case"input":Y(e),Z(e,r,!1);break;case"textarea":Y(e),oe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?ne(e,!!r.multiple,o,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Ys(t),null;case 6:if(e&&null!=t.stateNode)Ns(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=Ki(Vi.current),Ki(Hi.current),di(t)){if(r=t.stateNode,n=t.memoizedProps,r[ha]=t,(o=r.nodeValue!==n)&&null!==(e=ni))switch(e.tag){case 3:Xr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,!!(1&e.mode))}o&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[ha]=t,t.stateNode=r}return Ys(t),null;case 13:if(_a(Zi),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ai&&null!==ri&&1&t.mode&&!(128&t.flags))hi(),fi(),t.flags|=98560,o=!1;else if(o=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(i(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(i(317));o[ha]=t}else fi(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ys(t),o=!1}else null!==ii&&(ou(ii),ii=null),o=!0;if(!o)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&Zi.current?0===Nl&&(Nl=3):gu())),null!==t.updateQueue&&(t.flags|=4),Ys(t),null);case 4:return Ji(),Os(e,t),null===e&&Fr(t.stateNode.containerInfo),Ys(t),null;case 10:return Si(t.type._context),Ys(t),null;case 19:if(_a(Zi),null===(o=t.memoizedState))return Ys(t),null;if(r=!!(128&t.flags),null===(l=o.rendering))if(r)Hs(o,!1);else{if(0!==Nl||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=eo(e))){for(t.flags|=128,Hs(o,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=14680066,null===(l=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=l.childLanes,o.lanes=l.lanes,o.child=l.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=l.memoizedProps,o.memoizedState=l.memoizedState,o.updateQueue=l.updateQueue,o.type=l.type,e=l.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xa(Zi,1&Zi.current|2),t.child}e=e.sibling}null!==o.tail&&Qe()>Fl&&(t.flags|=128,r=!0,Hs(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=eo(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hs(o,!0),null===o.tail&&"hidden"===o.tailMode&&!l.alternate&&!ai)return Ys(t),null}else 2*Qe()-o.renderingStartTime>Fl&&1073741824!==n&&(t.flags|=128,r=!0,Hs(o,!1),t.lanes=4194304);o.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=o.last)?n.sibling=l:t.child=l,o.last=l)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=Qe(),t.sibling=null,n=Zi.current,xa(Zi,r?1&n|2:1&n),t):(Ys(t),null);case 22:case 23:return du(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Ol)&&(Ys(t),6&t.subtreeFlags&&(t.flags|=8192)):Ys(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Ks(e,t){switch(ti(t),t.tag){case 1:return Oa(t.type)&&Ia(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Ji(),_a(Ta),_a(Ba),no(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Xi(t),null;case 13:if(_a(Zi),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));fi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return _a(Zi),null;case 4:return Ji(),null;case 10:return Si(t.type._context),null;case 22:case 23:return du(),null;default:return null}}Ps=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Os=function(){},Is=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Ki(Hi.current);var i,o=null;switch(n){case"input":a=G(e,a),r=G(e,r),o=[];break;case"select":a=z({},a,{value:void 0}),r=z({},r,{value:void 0}),o=[];break;case"textarea":a=re(e,a),r=re(e,r),o=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ve(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var l=a[c];for(i in l)l.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(i in l)!l.hasOwnProperty(i)||u&&u.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in u)u.hasOwnProperty(i)&&l[i]!==u[i]&&(n||(n={}),n[i]=u[i])}else n||(o||(o=[]),o.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(o=o||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(o=o||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&$r("scroll",e),o||l===u||(o=[])):(o=o||[]).push(c,u))}n&&(o=o||[]).push("style",n);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},Ns=function(e,t,n,r){n!==r&&(t.flags|=4)};var Gs=!1,Js=!1,Qs="function"==typeof WeakSet?WeakSet:Set,Xs=null;function Zs(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cu(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Cu(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var i=a.destroy;a.destroy=void 0,void 0!==i&&el(t,n,i)}a=a.next}while(a!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function il(e){var t=e.alternate;null!==t&&(e.alternate=null,il(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[ha],delete t[fa],delete t[ga],delete t[ma],delete t[ba]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ol(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ol(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var cl=null,dl=!1;function hl(e,t,n){for(n=n.child;null!==n;)fl(e,t,n),n=n.sibling}function fl(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Js||Zs(n,t);case 6:var r=cl,a=dl;cl=null,hl(e,t,n),dl=a,null!==(cl=r)&&(dl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(dl?(e=cl,n=n.stateNode,8===e.nodeType?la(e.parentNode,n):1===e.nodeType&&la(e,n),Ft(e)):la(cl,n.stateNode));break;case 4:r=cl,a=dl,cl=n.stateNode.containerInfo,dl=!0,hl(e,t,n),cl=r,dl=a;break;case 0:case 11:case 14:case 15:if(!Js&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var i=a,o=i.destroy;i=i.tag,void 0!==o&&(2&i||4&i)&&el(n,t,o),a=a.next}while(a!==r)}hl(e,t,n);break;case 1:if(!Js&&(Zs(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cu(n,t,e)}hl(e,t,n);break;case 21:hl(e,t,n);break;case 22:1&n.mode?(Js=(r=Js)||null!==n.memoizedState,hl(e,t,n),Js=r):hl(e,t,n);break;default:hl(e,t,n)}}function pl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Qs),t.forEach(function(t){var r=Bu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}}function gl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var o=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,dl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===cl)throw Error(i(160));fl(o,s,a),cl=null,dl=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){Cu(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ml(t,e),t=t.sibling}function ml(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(t,e),bl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){Cu(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Cu(e,e.return,t)}}break;case 1:gl(t,e),bl(e),512&r&&null!==n&&Zs(n,n.return);break;case 5:if(gl(t,e),bl(e),512&r&&null!==n&&Zs(n,n.return),32&e.flags){var a=e.stateNode;try{he(a,"")}catch(t){Cu(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var o=e.memoizedProps,s=null!==n?n.memoizedProps:o,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===o.type&&null!=o.name&&Q(a,o),ye(l,s);var c=ye(l,o);for(s=0;s<u.length;s+=2){var d=u[s],h=u[s+1];"style"===d?me(a,h):"dangerouslySetInnerHTML"===d?de(a,h):"children"===d?he(a,h):y(a,d,h,c)}switch(l){case"input":X(a,o);break;case"textarea":ie(a,o);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!o.multiple;var p=o.value;null!=p?ne(a,!!o.multiple,p,!1):f!==!!o.multiple&&(null!=o.defaultValue?ne(a,!!o.multiple,o.defaultValue,!0):ne(a,!!o.multiple,o.multiple?[]:"",!1))}a[fa]=o}catch(t){Cu(e,e.return,t)}}break;case 6:if(gl(t,e),bl(e),4&r){if(null===e.stateNode)throw Error(i(162));a=e.stateNode,o=e.memoizedProps;try{a.nodeValue=o}catch(t){Cu(e,e.return,t)}}break;case 3:if(gl(t,e),bl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ft(t.containerInfo)}catch(t){Cu(e,e.return,t)}break;case 4:default:gl(t,e),bl(e);break;case 13:gl(t,e),bl(e),8192&(a=e.child).flags&&(o=null!==a.memoizedState,a.stateNode.isHidden=o,!o||null!==a.alternate&&null!==a.alternate.memoizedState||(Ml=Qe())),4&r&&pl(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Js=(c=Js)||d,gl(t,e),Js=c):gl(t,e),bl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&1&e.mode)for(Xs=e,d=e.child;null!==d;){for(h=Xs=d;null!==Xs;){switch(p=(f=Xs).child,f.tag){case 0:case 11:case 14:case 15:nl(4,f,f.return);break;case 1:Zs(f,f.return);var g=f.stateNode;if("function"==typeof g.componentWillUnmount){r=f,n=f.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){Cu(r,n,e)}}break;case 5:Zs(f,f.return);break;case 22:if(null!==f.memoizedState){wl(h);continue}}null!==p?(p.return=f,Xs=p):wl(h)}d=d.sibling}e:for(d=null,h=e;;){if(5===h.tag){if(null===d){d=h;try{a=h.stateNode,c?"function"==typeof(o=a.style).setProperty?o.setProperty("display","none","important"):o.display="none":(l=h.stateNode,s=null!=(u=h.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=ge("display",s))}catch(t){Cu(e,e.return,t)}}}else if(6===h.tag){if(null===d)try{h.stateNode.nodeValue=c?"":h.memoizedProps}catch(t){Cu(e,e.return,t)}}else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===e)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===e)break e;for(;null===h.sibling;){if(null===h.return||h.return===e)break e;d===h&&(d=null),h=h.return}d===h&&(d=null),h.sibling.return=h.return,h=h.sibling}}break;case 19:gl(t,e),bl(e),4&r&&pl(e);case 21:}}function bl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ol(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(he(a,""),r.flags&=-33),ul(e,sl(e),a);break;case 3:case 4:var o=r.stateNode.containerInfo;ll(e,sl(e),o);break;default:throw Error(i(161))}}catch(t){Cu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vl(e,t,n){Xs=e,yl(e,t,n)}function yl(e,t,n){for(var r=!!(1&e.mode);null!==Xs;){var a=Xs,i=a.child;if(22===a.tag&&r){var o=null!==a.memoizedState||Gs;if(!o){var s=a.alternate,l=null!==s&&null!==s.memoizedState||Js;s=Gs;var u=Js;if(Gs=o,(Js=l)&&!u)for(Xs=a;null!==Xs;)l=(o=Xs).child,22===o.tag&&null!==o.memoizedState?kl(a):null!==l?(l.return=o,Xs=l):kl(a);for(;null!==i;)Xs=i,yl(i,t,n),i=i.sibling;Xs=a,Gs=s,Js=u}Al(e)}else 8772&a.subtreeFlags&&null!==i?(i.return=a,Xs=i):Al(e)}}function Al(e){for(;null!==Xs;){var t=Xs;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Js||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Js)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:ns(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;null!==o&&qi(t,o,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}qi(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var h=d.dehydrated;null!==h&&Ft(h)}}}break;default:throw Error(i(163))}Js||512&t.flags&&al(t)}catch(e){Cu(t,t.return,e)}}if(t===e){Xs=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xs=n;break}Xs=t.return}}function wl(e){for(;null!==Xs;){var t=Xs;if(t===e){Xs=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xs=n;break}Xs=t.return}}function kl(e){for(;null!==Xs;){var t=Xs;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){Cu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Cu(t,a,e)}}var i=t.return;try{al(t)}catch(e){Cu(t,i,e)}break;case 5:var o=t.return;try{al(t)}catch(e){Cu(t,o,e)}}}catch(e){Cu(t,t.return,e)}if(t===e){Xs=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Xs=s;break}Xs=t.return}}var El,Cl=Math.ceil,_l=A.ReactCurrentDispatcher,xl=A.ReactCurrentOwner,Sl=A.ReactCurrentBatchConfig,Bl=0,Tl=null,jl=null,Pl=0,Ol=0,Il=Ca(0),Nl=0,Rl=null,Ll=0,zl=0,Dl=0,$l=null,Ul=null,Ml=0,Fl=1/0,ql=null,Wl=!1,Hl=null,Yl=null,Vl=!1,Kl=null,Gl=0,Jl=0,Ql=null,Xl=-1,Zl=0;function eu(){return 6&Bl?Qe():-1!==Xl?Xl:Xl=Qe()}function tu(e){return 1&e.mode?2&Bl&&0!==Pl?Pl&-Pl:null!==gi.transition?(0===Zl&&(Zl=gt()),Zl):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Jt(e.type):1}function nu(e,t,n,r){if(50<Jl)throw Jl=0,Ql=null,Error(i(185));bt(e,n,r),2&Bl&&e===Tl||(e===Tl&&(!(2&Bl)&&(zl|=n),4===Nl&&su(e,Pl)),ru(e,r),1===n&&0===Bl&&!(1&t.mode)&&(Fl=Qe()+500,$a&&Fa()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,i=e.pendingLanes;0<i;){var o=31-ot(i),s=1<<o,l=a[o];-1===l?0!==(s&n)&&0===(s&r)||(a[o]=ft(s,t)):l<=t&&(e.expiredLanes|=s),i&=~s}}(e,t);var r=ht(e,e===Tl?Pl:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){$a=!0,Ma(e)}(lu.bind(null,e)):Ma(lu.bind(null,e)),oa(function(){!(6&Bl)&&Fa()}),n=null;else{switch(At(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Tu(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Xl=-1,Zl=0,6&Bl)throw Error(i(327));var n=e.callbackNode;if(ku()&&e.callbackNode!==n)return null;var r=ht(e,e===Tl?Pl:0);if(0===r)return null;if(30&r||0!==(r&e.expiredLanes)||t)t=mu(e,r);else{t=r;var a=Bl;Bl|=2;var o=pu();for(Tl===e&&Pl===t||(ql=null,Fl=Qe()+500,hu(e,t));;)try{vu();break}catch(t){fu(e,t)}xi(),_l.current=o,Bl=a,null!==jl?t=0:(Tl=null,Pl=0,t=Nl)}if(0!==t){if(2===t&&0!==(a=pt(e))&&(r=a,t=iu(e,a)),1===t)throw n=Rl,hu(e,0),su(e,r),ru(e,Qe()),n;if(6===t)su(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],i=a.getSnapshot;a=a.value;try{if(!sr(i(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=mu(e,r),2===t&&(o=pt(e),0!==o&&(r=o,t=iu(e,o))),1!==t)))throw n=Rl,hu(e,0),su(e,r),ru(e,Qe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:wu(e,Ul,ql);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Ml+500-Qe())){if(0!==ht(e,0))break;if(((a=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(wu.bind(null,e,Ul,ql),t);break}wu(e,Ul,ql);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var s=31-ot(r);o=1<<s,(s=t[s])>a&&(a=s),r&=~o}if(r=a,10<(r=(120>(r=Qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cl(r/1960))-r)){e.timeoutHandle=ra(wu.bind(null,e,Ul,ql),r);break}wu(e,Ul,ql);break;default:throw Error(i(329))}}}return ru(e,Qe()),e.callbackNode===n?au.bind(null,e):null}function iu(e,t){var n=$l;return e.current.memoizedState.isDehydrated&&(hu(e,t).flags|=256),2!==(e=mu(e,t))&&(t=Ul,Ul=n,null!==t&&ou(t)),e}function ou(e){null===Ul?Ul=e:Ul.push.apply(Ul,e)}function su(e,t){for(t&=~Dl,t&=~zl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ot(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(6&Bl)throw Error(i(327));ku();var t=ht(e,0);if(!(1&t))return ru(e,Qe()),null;var n=mu(e,t);if(0!==e.tag&&2===n){var r=pt(e);0!==r&&(t=r,n=iu(e,r))}if(1===n)throw n=Rl,hu(e,0),su(e,t),ru(e,Qe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wu(e,Ul,ql),ru(e,Qe()),null}function uu(e,t){var n=Bl;Bl|=1;try{return e(t)}finally{0===(Bl=n)&&(Fl=Qe()+500,$a&&Fa())}}function cu(e){null!==Kl&&0===Kl.tag&&!(6&Bl)&&ku();var t=Bl;Bl|=1;var n=Sl.transition,r=yt;try{if(Sl.transition=null,yt=1,e)return e()}finally{yt=r,Sl.transition=n,!(6&(Bl=t))&&Fa()}}function du(){Ol=Il.current,_a(Il)}function hu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==jl)for(n=jl.return;null!==n;){var r=n;switch(ti(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ia();break;case 3:Ji(),_a(Ta),_a(Ba),no();break;case 5:Xi(r);break;case 4:Ji();break;case 13:case 19:_a(Zi);break;case 10:Si(r.type._context);break;case 22:case 23:du()}n=n.return}if(Tl=e,jl=e=Iu(e.current,null),Pl=Ol=t,Nl=0,Rl=null,Dl=zl=Ll=0,Ul=$l=null,null!==Pi){for(t=0;t<Pi.length;t++)if(null!==(r=(n=Pi[t]).interleaved)){n.interleaved=null;var a=r.next,i=n.pending;if(null!==i){var o=i.next;i.next=a,r.next=o}n.pending=r}Pi=null}return e}function fu(e,t){for(;;){var n=jl;try{if(xi(),ro.current=Xo,uo){for(var r=oo.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}uo=!1}if(io=0,lo=so=oo=null,co=!1,ho=0,xl.current=null,null===n||null===n.return){Nl=1,Rl=t,jl=null;break}e:{var o=e,s=n.return,l=n,u=t;if(t=Pl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=l,h=d.tag;if(!(1&d.mode||0!==h&&11!==h&&15!==h)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=ms(s);if(null!==p){p.flags&=-257,bs(p,s,l,0,t),1&p.mode&&gs(o,c,t),u=c;var g=(t=p).updateQueue;if(null===g){var m=new Set;m.add(u),t.updateQueue=m}else g.add(u);break e}if(!(1&t)){gs(o,c,t),gu();break e}u=Error(i(426))}else if(ai&&1&l.mode){var b=ms(s);if(null!==b){!(65536&b.flags)&&(b.flags|=256),bs(b,s,l,0,t),pi(us(u,l));break e}}o=u=us(u,l),4!==Nl&&(Nl=2),null===$l?$l=[o]:$l.push(o),o=s;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t,Mi(o,fs(0,u,t));break e;case 1:l=u;var v=o.type,y=o.stateNode;if(!(128&o.flags||"function"!=typeof v.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Yl&&Yl.has(y)))){o.flags|=65536,t&=-t,o.lanes|=t,Mi(o,ps(o,l,t));break e}}o=o.return}while(null!==o)}Au(n)}catch(e){t=e,jl===n&&null!==n&&(jl=n=n.return);continue}break}}function pu(){var e=_l.current;return _l.current=Xo,null===e?Xo:e}function gu(){0!==Nl&&3!==Nl&&2!==Nl||(Nl=4),null===Tl||!(268435455&Ll)&&!(268435455&zl)||su(Tl,Pl)}function mu(e,t){var n=Bl;Bl|=2;var r=pu();for(Tl===e&&Pl===t||(ql=null,hu(e,t));;)try{bu();break}catch(t){fu(e,t)}if(xi(),Bl=n,_l.current=r,null!==jl)throw Error(i(261));return Tl=null,Pl=0,Nl}function bu(){for(;null!==jl;)yu(jl)}function vu(){for(;null!==jl&&!Ge();)yu(jl)}function yu(e){var t=El(e.alternate,e,Ol);e.memoizedProps=e.pendingProps,null===t?Au(e):jl=t,xl.current=null}function Au(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Ks(n,t)))return n.flags&=32767,void(jl=n);if(null===e)return Nl=6,void(jl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Vs(n,t,Ol)))return void(jl=n);if(null!==(t=t.sibling))return void(jl=t);jl=t=e}while(null!==t);0===Nl&&(Nl=5)}function wu(e,t,n){var r=yt,a=Sl.transition;try{Sl.transition=null,yt=1,function(e,t,n,r){do{ku()}while(null!==Kl);if(6&Bl)throw Error(i(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-ot(n),i=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~i}}(e,o),e===Tl&&(jl=Tl=null,Pl=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Vl||(Vl=!0,Tu(tt,function(){return ku(),null})),o=!!(15990&n.flags),15990&n.subtreeFlags||o){o=Sl.transition,Sl.transition=null;var s=yt;yt=1;var l=Bl;Bl|=4,xl.current=null,function(e,t){if(ea=Wt,fr(e=hr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var s=0,l=-1,u=-1,c=0,d=0,h=e,f=null;t:for(;;){for(var p;h!==n||0!==a&&3!==h.nodeType||(l=s+a),h!==o||0!==r&&3!==h.nodeType||(u=s+r),3===h.nodeType&&(s+=h.nodeValue.length),null!==(p=h.firstChild);)f=h,h=p;for(;;){if(h===e)break t;if(f===n&&++c===a&&(l=s),f===o&&++d===r&&(u=s),null!==(p=h.nextSibling))break;f=(h=f).parentNode}h=p}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Wt=!1,Xs=t;null!==Xs;)if(e=(t=Xs).child,1028&t.subtreeFlags&&null!==e)e.return=t,Xs=e;else for(;null!==Xs;){t=Xs;try{var g=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,b=g.memoizedState,v=t.stateNode,y=v.getSnapshotBeforeUpdate(t.elementType===t.type?m:ns(t.type,m),b);v.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(i(163))}}catch(e){Cu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xs=e;break}Xs=t.return}g=tl,tl=!1}(e,n),ml(n,e),pr(ta),Wt=!!ea,ta=ea=null,e.current=n,vl(n,e,a),Je(),Bl=l,yt=s,Sl.transition=o}else e.current=n;if(Vl&&(Vl=!1,Kl=e,Gl=a),0===(o=e.pendingLanes)&&(Yl=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),ru(e,Qe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Wl)throw Wl=!1,e=Hl,Hl=null,e;!!(1&Gl)&&0!==e.tag&&ku(),1&(o=e.pendingLanes)?e===Ql?Jl++:(Jl=0,Ql=e):Jl=0,Fa()}(e,t,n,r)}finally{Sl.transition=a,yt=r}return null}function ku(){if(null!==Kl){var e=At(Gl),t=Sl.transition,n=yt;try{if(Sl.transition=null,yt=16>e?16:e,null===Kl)var r=!1;else{if(e=Kl,Kl=null,Gl=0,6&Bl)throw Error(i(331));var a=Bl;for(Bl|=4,Xs=e.current;null!==Xs;){var o=Xs,s=o.child;if(16&Xs.flags){var l=o.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Xs=c;null!==Xs;){var d=Xs;switch(d.tag){case 0:case 11:case 15:nl(8,d,o)}var h=d.child;if(null!==h)h.return=d,Xs=h;else for(;null!==Xs;){var f=(d=Xs).sibling,p=d.return;if(il(d),d===c){Xs=null;break}if(null!==f){f.return=p,Xs=f;break}Xs=p}}}var g=o.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var b=m.sibling;m.sibling=null,m=b}while(null!==m)}}Xs=o}}if(2064&o.subtreeFlags&&null!==s)s.return=o,Xs=s;else e:for(;null!==Xs;){if(2048&(o=Xs).flags)switch(o.tag){case 0:case 11:case 15:nl(9,o,o.return)}var v=o.sibling;if(null!==v){v.return=o.return,Xs=v;break e}Xs=o.return}}var y=e.current;for(Xs=y;null!==Xs;){var A=(s=Xs).child;if(2064&s.subtreeFlags&&null!==A)A.return=s,Xs=A;else e:for(s=y;null!==Xs;){if(2048&(l=Xs).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Cu(l,l.return,e)}if(l===s){Xs=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Xs=w;break e}Xs=l.return}}if(Bl=a,Fa(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{yt=n,Sl.transition=t}}return!1}function Eu(e,t,n){e=$i(e,t=fs(0,t=us(n,t),1),1),t=eu(),null!==e&&(bt(e,1,t),ru(e,t))}function Cu(e,t,n){if(3===e.tag)Eu(e,e,n);else for(;null!==t;){if(3===t.tag){Eu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yl||!Yl.has(r))){t=$i(t,e=ps(t,e=us(n,e),1),1),e=eu(),null!==t&&(bt(t,1,e),ru(t,e));break}}t=t.return}}function _u(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Tl===e&&(Pl&n)===n&&(4===Nl||3===Nl&&(130023424&Pl)===Pl&&500>Qe()-Ml?hu(e,0):Dl|=n),ru(e,t)}function xu(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=eu();null!==(e=Ni(e,t))&&(bt(e,t,n),ru(e,n))}function Su(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),xu(e,n)}function Bu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),xu(e,n)}function Tu(e,t){return Ve(e,t)}function ju(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Pu(e,t,n,r){return new ju(e,t,n,r)}function Ou(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Iu(e,t){var n=e.alternate;return null===n?((n=Pu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Nu(e,t,n,r,a,o){var s=2;if(r=e,"function"==typeof e)Ou(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case E:return Ru(n.children,a,o,t);case C:s=8,a|=8;break;case _:return(e=Pu(12,n,t,2|a)).elementType=_,e.lanes=o,e;case T:return(e=Pu(13,n,t,a)).elementType=T,e.lanes=o,e;case j:return(e=Pu(19,n,t,a)).elementType=j,e.lanes=o,e;case I:return Lu(n,a,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:s=10;break e;case S:s=9;break e;case B:s=11;break e;case P:s=14;break e;case O:s=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Pu(s,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Ru(e,t,n,r){return(e=Pu(7,e,r,t)).lanes=n,e}function Lu(e,t,n,r){return(e=Pu(22,e,r,t)).elementType=I,e.lanes=n,e.stateNode={isHidden:!1},e}function zu(e,t,n){return(e=Pu(6,e,null,t)).lanes=n,e}function Du(e,t,n){return(t=Pu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $u(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Uu(e,t,n,r,a,i,o,s,l){return e=new $u(e,t,n,s,l),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Pu(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Li(i),e}function Mu(e){if(!e)return Sa;e:{if(Fe(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Oa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(Oa(n))return Ra(e,n,t)}return t}function Fu(e,t,n,r,a,i,o,s,l){return(e=Uu(n,r,!0,e,0,i,0,s,l)).context=Mu(null),n=e.current,(i=Di(r=eu(),a=tu(n))).callback=null!=t?t:null,$i(n,i,a),e.current.lanes=a,bt(e,a,r),ru(e,r),e}function qu(e,t,n,r){var a=t.current,i=eu(),o=tu(a);return n=Mu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Di(i,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=$i(a,t,o))&&(nu(e,a,o,i),Ui(e,a,o)),o}function Wu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yu(e,t){Hu(e,t),(e=e.alternate)&&Hu(e,t)}El=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ta.current)ys=!0;else{if(0===(e.lanes&n)&&!(128&t.flags))return ys=!1,function(e,t,n){switch(t.tag){case 3:Ts(t),fi();break;case 5:Qi(t);break;case 1:Oa(t.type)&&La(t);break;case 4:Gi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;xa(ki,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(Zi,1&Zi.current),t.flags|=128,null):0!==(n&t.child.childLanes)?zs(e,t,n):(xa(Zi,1&Zi.current),null!==(e=Ws(e,t,n))?e.sibling:null);xa(Zi,1&Zi.current);break;case 19:if(r=0!==(n&t.childLanes),128&e.flags){if(r)return Fs(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(Zi,Zi.current),r)break;return null;case 22:case 23:return t.lanes=0,Cs(e,t,n)}return Ws(e,t,n)}(e,t,n);ys=!!(131072&e.flags)}else ys=!1,ai&&1048576&t.flags&&Za(t,Ya,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;qs(e,t),e=t.pendingProps;var a=Pa(t,Ba.current);Ti(t,n),a=mo(null,t,r,e,a,n);var o=bo();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Oa(r)?(o=!0,La(t)):o=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Li(t),a.updater=as,t.stateNode=a,a._reactInternals=t,ls(t,r,e,n),t=Bs(null,t,r,!0,o,n)):(t.tag=0,ai&&o&&ei(t),As(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(qs(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ou(e)?1:0;if(null!=e){if((e=e.$$typeof)===B)return 11;if(e===P)return 14}return 2}(r),e=ns(r,e),a){case 0:t=xs(null,t,r,e,n);break e;case 1:t=Ss(null,t,r,e,n);break e;case 11:t=ws(null,t,r,e,n);break e;case 14:t=ks(null,t,r,ns(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,xs(e,t,r,a=t.elementType===r?a:ns(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ss(e,t,r,a=t.elementType===r?a:ns(r,a),n);case 3:e:{if(Ts(t),null===e)throw Error(i(387));r=t.pendingProps,a=(o=t.memoizedState).element,zi(e,t),Fi(t,r,null,n);var s=t.memoizedState;if(r=s.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=js(e,t,r,n,a=us(Error(i(423)),t));break e}if(r!==a){t=js(e,t,r,n,a=us(Error(i(424)),t));break e}for(ri=ua(t.stateNode.containerInfo.firstChild),ni=t,ai=!0,ii=null,n=wi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(fi(),r===a){t=Ws(e,t,n);break e}As(e,t,r,n)}t=t.child}return t;case 5:return Qi(t),null===e&&ui(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,s=a.children,na(r,a)?s=null:null!==o&&na(r,o)&&(t.flags|=32),_s(e,t),As(e,t,s,n),t.child;case 6:return null===e&&ui(t),null;case 13:return zs(e,t,n);case 4:return Gi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ai(t,null,r,n):As(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,ws(e,t,r,a=t.elementType===r?a:ns(r,a),n);case 7:return As(e,t,t.pendingProps,n),t.child;case 8:case 12:return As(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,o=t.memoizedProps,s=a.value,xa(ki,r._currentValue),r._currentValue=s,null!==o)if(sr(o.value,s)){if(o.children===a.children&&!Ta.current){t=Ws(e,t,n);break e}}else for(null!==(o=t.child)&&(o.return=t);null!==o;){var l=o.dependencies;if(null!==l){s=o.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===o.tag){(u=Di(-1,n&-n)).tag=2;var c=o.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}o.lanes|=n,null!==(u=o.alternate)&&(u.lanes|=n),Bi(o.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===o.tag)s=o.type===t.type?null:o.child;else if(18===o.tag){if(null===(s=o.return))throw Error(i(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),Bi(s,n,t),s=o.sibling}else s=o.child;if(null!==s)s.return=o;else for(s=o;null!==s;){if(s===t){s=null;break}if(null!==(o=s.sibling)){o.return=s.return,s=o;break}s=s.return}o=s}As(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Ti(t,n),r=r(a=ji(a)),t.flags|=1,As(e,t,r,n),t.child;case 14:return a=ns(r=t.type,t.pendingProps),ks(e,t,r,a=ns(r.type,a),n);case 15:return Es(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:ns(r,a),qs(e,t),t.tag=1,Oa(r)?(e=!0,La(t)):e=!1,Ti(t,n),os(t,r,a),ls(t,r,a,n),Bs(null,t,r,!0,e,n);case 19:return Fs(e,t,n);case 22:return Cs(e,t,n)}throw Error(i(156,t.tag))};var Vu="function"==typeof reportError?reportError:function(e){console.error(e)};function Ku(e){this._internalRoot=e}function Gu(e){this._internalRoot=e}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Qu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xu(){}function Zu(e,t,n,r,a){var i=n._reactRootContainer;if(i){var o=i;if("function"==typeof a){var s=a;a=function(){var e=Wu(o);s.call(e)}}qu(t,o,e,a)}else o=function(e,t,n,r,a){if(a){if("function"==typeof r){var i=r;r=function(){var e=Wu(o);i.call(e)}}var o=Fu(t,r,e,0,null,!1,0,"",Xu);return e._reactRootContainer=o,e[pa]=o.current,Fr(8===e.nodeType?e.parentNode:e),cu(),o}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var s=r;r=function(){var e=Wu(l);s.call(e)}}var l=Uu(e,0,!1,null,0,!1,0,"",Xu);return e._reactRootContainer=l,e[pa]=l.current,Fr(8===e.nodeType?e.parentNode:e),cu(function(){qu(t,l,n,r)}),l}(n,t,e,a,r);return Wu(o)}Gu.prototype.render=Ku.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));qu(e,t,null,null)},Gu.prototype.unmount=Ku.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu(function(){qu(null,e,null,null)}),t[pa]=null}},Gu.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<It.length&&0!==t&&t<It[n].priority;n++);It.splice(n,0,e),0===n&&zt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(vt(t,1|n),ru(t,Qe()),!(6&Bl)&&(Fl=Qe()+500,Fa()))}break;case 13:cu(function(){var t=Ni(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}}),Yu(e,1)}},kt=function(e){if(13===e.tag){var t=Ni(e,134217728);null!==t&&nu(t,e,134217728,eu()),Yu(e,134217728)}},Et=function(e){if(13===e.tag){var t=tu(e),n=Ni(e,t);null!==n&&nu(n,e,t,eu()),Yu(e,t)}},Ct=function(){return yt},_t=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},ke=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=wa(r);if(!a)throw Error(i(90));V(r),X(r,a)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Be=uu,Te=cu;var ec={usingClientEntryPoint:!1,Events:[ya,Aa,wa,xe,Se,uu]},tc={findFiberByHostInstance:va,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),it=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ju(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ju(e))throw Error(i(299));var n=!1,r="",a=Vu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Uu(e,1,!1,null,0,n,0,r,a),e[pa]=t.current,Fr(8===e.nodeType?e.parentNode:e),new Ku(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Qu(t))throw Error(i(200));return Zu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ju(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,a=!1,o="",s=Vu;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Fu(t,null,e,1,null!=n?n:null,a,0,o,s),e[pa]=t.current,Fr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Gu(t)},t.render=function(e,t,n){if(!Qu(t))throw Error(i(200));return Zu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Qu(e))throw Error(i(40));return!!e._reactRootContainer&&(cu(function(){Zu(null,null,e,!1,function(){e._reactRootContainer=null,e[pa]=null})}),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Qu(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Zu(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},601:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),a=n.n(r),i=n(314),o=n.n(i)()(a());o.push([e.id,"/* Reset and base styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  min-height: 100vh;\n  color: #1f2937;\n  overflow-x: hidden;\n}\n\n/* Container */\n.newtab-container {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  position: relative;\n}\n\n.newtab-container::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: \n    radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),\n    radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\n    radial-gradient(circle at 40% 80%, rgba(120, 119, 198, 0.2) 0%, transparent 50%);\n  pointer-events: none;\n}\n\n/* Header */\n.newtab-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2rem 3rem 1rem;\n  position: relative;\n  z-index: 10;\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 2rem;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.logo-icon {\n  color: white;\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));\n}\n\n.logo-text {\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: white;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.greeting h1 {\n  font-size: 2.5rem;\n  font-weight: 700;\n  color: white;\n  text-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  margin-bottom: 0.5rem;\n}\n\n.streak-badge {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  padding: 0.5rem 1rem;\n  border-radius: 25px;\n  color: white;\n  font-size: 0.875rem;\n  font-weight: 600;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.header-actions {\n  display: flex;\n  gap: 0.75rem;\n}\n\n.header-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 12px;\n  color: white;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.header-button:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-1px);\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);\n}\n\n/* Loading state */\n.newtab-loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  gap: 1rem;\n  color: white;\n  font-size: 1.125rem;\n  position: relative;\n  z-index: 10;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid rgba(255, 255, 255, 0.3);\n  border-top: 3px solid white;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Main content */\n.newtab-main {\n  flex: 1;\n  padding: 0 3rem 3rem;\n  position: relative;\n  z-index: 10;\n}\n\n/* Search section */\n.search-section {\n  margin-bottom: 3rem;\n}\n\n.search-form {\n  display: flex;\n  gap: 1rem;\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.search-input-container {\n  position: relative;\n  flex: 1;\n}\n\n.search-icon {\n  position: absolute;\n  left: 1rem;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #6b7280;\n  pointer-events: none;\n}\n\n.search-input {\n  width: 100%;\n  padding: 1rem 1rem 1rem 3rem;\n  border: none;\n  border-radius: 16px;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  font-size: 1rem;\n  color: #1f2937;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n}\n\n.search-input:focus {\n  outline: none;\n  background: white;\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n  transform: translateY(-2px);\n}\n\n.search-input::placeholder {\n  color: #9ca3af;\n}\n\n.search-button {\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 16px;\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  color: white;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.search-button:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-2px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n}\n\n/* Stats section */\n.stats-section {\n  margin-bottom: 3rem;\n}\n\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1.5rem;\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.stat-card {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1.5rem;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n  border: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n.stat-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);\n}\n\n.stat-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px;\n  border-radius: 12px;\n  background: var(--stat-color);\n  color: white;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.stat-content {\n  flex: 1;\n}\n\n.stat-value {\n  font-size: 1.875rem;\n  font-weight: 700;\n  color: #1f2937;\n  line-height: 1;\n}\n\n.stat-label {\n  font-size: 0.875rem;\n  color: #6b7280;\n  font-weight: 500;\n  margin-top: 0.25rem;\n}\n\n/* Actions section */\n.actions-section {\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n  margin-bottom: 3rem;\n}\n\n.action-button {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 1rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.action-button.primary {\n  background: #3b82f6;\n  color: white;\n}\n\n.action-button.primary:hover {\n  background: #2563eb;\n  transform: translateY(-2px);\n  box-shadow: 0 12px 40px rgba(59, 130, 246, 0.3);\n}\n\n.action-button.secondary {\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  color: white;\n}\n\n.action-button.secondary:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-2px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n}\n\n/* Content grid */\n.content-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n  overflow-x: auto;\n  padding-bottom: 1rem;\n}\n\n.content-grid::-webkit-scrollbar {\n  height: 8px;\n}\n\n.content-grid::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.content-grid::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 4px;\n}\n\n.content-grid::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.5);\n}\n\n.content-section {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border-radius: 24px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.5);\n  transition: all 0.2s ease;\n  min-width: 0;\n  overflow: hidden;\n}\n\n.content-section:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n}\n\n.section-header h2 {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: #1f2937;\n}\n\n.see-all-button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  background: #f3f4f6;\n  border: none;\n  border-radius: 12px;\n  color: #6b7280;\n  font-size: 0.875rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.see-all-button:hover {\n  background: #e5e7eb;\n  color: #374151;\n}\n\n/* Links grid */\n.links-grid {\n  display: grid;\n  gap: 1rem;\n}\n\n.link-card {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid #f3f4f6;\n}\n\n.link-card:hover {\n  background: #f9fafb;\n  transform: translateX(4px);\n  border-color: #e5e7eb;\n}\n\n.link-favicon {\n  width: 40px;\n  height: 40px;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #f3f4f6;\n  flex-shrink: 0;\n}\n\n.link-favicon img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.favicon-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  font-weight: 600;\n  font-size: 1rem;\n}\n\n.link-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-title {\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: #1f2937;\n  line-height: 1.3;\n  margin-bottom: 0.25rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.link-domain {\n  font-size: 0.75rem;\n  color: #6b7280;\n  margin-bottom: 0.25rem;\n}\n\n.link-time {\n  font-size: 0.75rem;\n  color: #9ca3af;\n}\n\n/* Collections grid */\n.collections-grid {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  max-height: 400px;\n  overflow-y: auto;\n  padding-bottom: 0.5rem;\n}\n\n.collections-grid::-webkit-scrollbar {\n  width: 6px;\n}\n\n.collections-grid::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.collections-grid::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.2);\n  border-radius: 3px;\n}\n\n.collections-grid::-webkit-scrollbar-thumb:hover {\n  background: rgba(0, 0, 0, 0.3);\n}\n\n.collection-card {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid #f3f4f6;\n}\n\n.collection-card:hover {\n  background: #f9fafb;\n  transform: translateX(4px);\n  border-color: #e5e7eb;\n}\n\n.collection-icon {\n  font-size: 1.5rem;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  flex-shrink: 0;\n}\n\n.collection-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.collection-name {\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: #1f2937;\n  line-height: 1.3;\n  margin-bottom: 0.25rem;\n}\n\n.collection-description {\n  font-size: 0.75rem;\n  color: #6b7280;\n  line-height: 1.4;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* Empty states */\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 3rem 1rem;\n  text-align: center;\n  color: #6b7280;\n}\n\n.empty-state svg {\n  margin-bottom: 1rem;\n  opacity: 0.5;\n}\n\n.empty-state p {\n  font-size: 1rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n}\n\n.empty-state span {\n  font-size: 0.875rem;\n  opacity: 0.8;\n}\n\n/* Disabled state */\n.newtab-disabled {\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.disabled-content {\n  text-align: center;\n  color: white;\n  max-width: 400px;\n  padding: 2rem;\n}\n\n.disabled-icon {\n  margin-bottom: 2rem;\n  opacity: 0.7;\n}\n\n.disabled-content h2 {\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 1rem;\n}\n\n.disabled-content p {\n  margin-bottom: 2rem;\n  opacity: 0.9;\n}\n\n.enable-button {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 1rem 2rem;\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 16px;\n  color: white;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  margin: 0 auto;\n}\n\n.enable-button:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-2px);\n}\n\n/* Restricted Context Banner */\n.restricted-context-banner {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem 2rem;\n  background: linear-gradient(135deg, #fef3cd 0%, #fde68a 100%);\n  border-bottom: 1px solid #f59e0b;\n  color: #92400e;\n  font-size: 0.9rem;\n}\n\n.restricted-context-banner .banner-content {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n}\n\n.restricted-context-banner .banner-content strong {\n  font-weight: 600;\n  color: #78350f;\n}\n\n.restricted-context-banner .banner-content span {\n  color: #92400e;\n  line-height: 1.4;\n}\n\n/* Header button disabled state */\n.header-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.header-button:disabled:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: none;\n}\n\n/* Newtab container */\n\n/* Responsive design */\n@media (max-width: 1280px) {\n  .content-grid {\n    grid-template-columns: 1fr;\n    gap: 1.5rem;\n    overflow-x: visible;\n  }\n}\n\n@media (max-width: 1024px) {\n  .newtab-header {\n    padding: 1.5rem 2rem 1rem;\n  }\n  \n  .newtab-main {\n    padding: 0 2rem 2rem;\n  }\n}\n\n@media (max-width: 768px) {\n  .header-left {\n    flex-direction: column;\n    gap: 1rem;\n    align-items: flex-start;\n  }\n  \n  .greeting h1 {\n    font-size: 2rem;\n  }\n  \n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .actions-section {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .action-button {\n    width: 100%;\n    max-width: 300px;\n    justify-content: center;\n  }\n  \n  .search-form {\n    flex-direction: column;\n  }\n}\n\n@media (max-width: 480px) {\n  .newtab-header {\n    padding: 1rem;\n  }\n  \n  .newtab-main {\n    padding: 0 1rem 1rem;\n  }\n  \n  .stats-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .content-section {\n    padding: 1.5rem;\n  }\n} ","",{version:3,sources:["webpack://./src/newtab/newtab.css"],names:[],mappings:"AAAA,0BAA0B;AAC1B;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,iHAAiH;EACjH,6DAA6D;EAC7D,iBAAiB;EACjB,cAAc;EACd,kBAAkB;AACpB;;AAEA,cAAc;AACd;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,6DAA6D;EAC7D,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,QAAQ;EACR,SAAS;EACT;;;oFAGkF;EAClF,oBAAoB;AACtB;;AAEA,WAAW;AACX;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,iDAAiD;AACnD;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,YAAY;EACZ,yCAAyC;AAC3C;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,YAAY;EACZ,yCAAyC;EACzC,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,oCAAoC;EACpC,2BAA2B;EAC3B,mCAAmC;EACnC,0CAA0C;EAC1C,oBAAoB;EACpB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;EACnB,gBAAgB;EAChB,yCAAyC;AAC3C;;AAEA;EACE,aAAa;EACb,YAAY;AACd;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;EACX,YAAY;EACZ,oCAAoC;EACpC,2BAA2B;EAC3B,mCAAmC;EACnC,0CAA0C;EAC1C,mBAAmB;EACnB,YAAY;EACZ,eAAe;EACf,yBAAyB;EACzB,yCAAyC;AAC3C;;AAEA;EACE,oCAAoC;EACpC,2BAA2B;EAC3B,0CAA0C;AAC5C;;AAEA,kBAAkB;AAClB;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,OAAO;EACP,SAAS;EACT,YAAY;EACZ,mBAAmB;EACnB,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,0CAA0C;EAC1C,2BAA2B;EAC3B,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;EACE,KAAK,uBAAuB,EAAE;EAC9B,OAAO,yBAAyB,EAAE;AACpC;;AAEA,iBAAiB;AACjB;EACE,OAAO;EACP,oBAAoB;EACpB,kBAAkB;EAClB,WAAW;AACb;;AAEA,mBAAmB;AACnB;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,OAAO;AACT;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,QAAQ;EACR,2BAA2B;EAC3B,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE,WAAW;EACX,4BAA4B;EAC5B,YAAY;EACZ,mBAAmB;EACnB,qCAAqC;EACrC,2BAA2B;EAC3B,mCAAmC;EACnC,eAAe;EACf,cAAc;EACd,yCAAyC;EACzC,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,2CAA2C;EAC3C,2BAA2B;AAC7B;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,mBAAmB;EACnB,oCAAoC;EACpC,2BAA2B;EAC3B,mCAAmC;EACnC,0CAA0C;EAC1C,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,yBAAyB;EACzB,yCAAyC;AAC3C;;AAEA;EACE,oCAAoC;EACpC,2BAA2B;EAC3B,2CAA2C;AAC7C;;AAEA,kBAAkB;AAClB;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,2DAA2D;EAC3D,WAAW;EACX,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,eAAe;EACf,qCAAqC;EACrC,2BAA2B;EAC3B,mCAAmC;EACnC,mBAAmB;EACnB,yCAAyC;EACzC,yBAAyB;EACzB,0CAA0C;AAC5C;;AAEA;EACE,2BAA2B;EAC3B,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,6BAA6B;EAC7B,YAAY;EACZ,0CAA0C;AAC5C;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,cAAc;EACd,cAAc;AAChB;;AAEA;EACE,mBAAmB;EACnB,cAAc;EACd,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA,oBAAoB;AACpB;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,kBAAkB;EAClB,YAAY;EACZ,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,yBAAyB;EACzB,eAAe;EACf,yCAAyC;AAC3C;;AAEA;EACE,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,2BAA2B;EAC3B,+CAA+C;AACjD;;AAEA;EACE,oCAAoC;EACpC,2BAA2B;EAC3B,mCAAmC;EACnC,0CAA0C;EAC1C,YAAY;AACd;;AAEA;EACE,oCAAoC;EACpC,2BAA2B;EAC3B,2CAA2C;AAC7C;;AAEA,iBAAiB;AACjB;EACE,aAAa;EACb,8BAA8B;EAC9B,SAAS;EACT,iBAAiB;EACjB,cAAc;EACd,gBAAgB;EAChB,oBAAoB;AACtB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;AACpB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,qCAAqC;EACrC,2BAA2B;EAC3B,mCAAmC;EACnC,mBAAmB;EACnB,aAAa;EACb,yCAAyC;EACzC,0CAA0C;EAC1C,yBAAyB;EACzB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,2BAA2B;EAC3B,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,oBAAoB;EACpB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;EACnB,cAAc;EACd,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,yBAAyB;AAC3B;;AAEA;EACE,mBAAmB;EACnB,cAAc;AAChB;;AAEA,eAAe;AACf;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,yBAAyB;EACzB,yBAAyB;AAC3B;;AAEA;EACE,mBAAmB;EACnB,0BAA0B;EAC1B,qBAAqB;AACvB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,qDAAqD;EACrD,YAAY;EACZ,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,OAAO;EACP,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,cAAc;EACd,gBAAgB;EAChB,sBAAsB;EACtB,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,cAAc;AAChB;;AAEA,qBAAqB;AACrB;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,iBAAiB;EACjB,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,8BAA8B;EAC9B,kBAAkB;AACpB;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,yBAAyB;EACzB,yBAAyB;AAC3B;;AAEA;EACE,mBAAmB;EACnB,0BAA0B;EAC1B,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;EAClB,qDAAqD;EACrD,cAAc;AAChB;;AAEA;EACE,OAAO;EACP,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,cAAc;EACd,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,gBAAgB;EAChB,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA,iBAAiB;AACjB;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;EAClB,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;EACnB,YAAY;AACd;;AAEA,mBAAmB;AACnB;EACE,iBAAiB;EACjB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,6DAA6D;AAC/D;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,kBAAkB;EAClB,oCAAoC;EACpC,2BAA2B;EAC3B,mCAAmC;EACnC,0CAA0C;EAC1C,mBAAmB;EACnB,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,oCAAoC;EACpC,2BAA2B;AAC7B;;AAEA,8BAA8B;AAC9B;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,kBAAkB;EAClB,6DAA6D;EAC7D,gCAAgC;EAChC,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA,iCAAiC;AACjC;EACE,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,oCAAoC;EACpC,eAAe;AACjB;;AAEA,qBAAqB;;AAErB,sBAAsB;AACtB;EACE;IACE,0BAA0B;IAC1B,WAAW;IACX,mBAAmB;EACrB;AACF;;AAEA;EACE;IACE,yBAAyB;EAC3B;;EAEA;IACE,oBAAoB;EACtB;AACF;;AAEA;EACE;IACE,sBAAsB;IACtB,SAAS;IACT,uBAAuB;EACzB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,qCAAqC;EACvC;;EAEA;IACE,sBAAsB;IACtB,mBAAmB;EACrB;;EAEA;IACE,WAAW;IACX,gBAAgB;IAChB,uBAAuB;EACzB;;EAEA;IACE,sBAAsB;EACxB;AACF;;AAEA;EACE;IACE,aAAa;EACf;;EAEA;IACE,oBAAoB;EACtB;;EAEA;IACE,0BAA0B;EAC5B;;EAEA;IACE,eAAe;EACjB;AACF",sourcesContent:["/* Reset and base styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  min-height: 100vh;\n  color: #1f2937;\n  overflow-x: hidden;\n}\n\n/* Container */\n.newtab-container {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  position: relative;\n}\n\n.newtab-container::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: \n    radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),\n    radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\n    radial-gradient(circle at 40% 80%, rgba(120, 119, 198, 0.2) 0%, transparent 50%);\n  pointer-events: none;\n}\n\n/* Header */\n.newtab-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 2rem 3rem 1rem;\n  position: relative;\n  z-index: 10;\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 2rem;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.logo-icon {\n  color: white;\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));\n}\n\n.logo-text {\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: white;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.greeting h1 {\n  font-size: 2.5rem;\n  font-weight: 700;\n  color: white;\n  text-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  margin-bottom: 0.5rem;\n}\n\n.streak-badge {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  padding: 0.5rem 1rem;\n  border-radius: 25px;\n  color: white;\n  font-size: 0.875rem;\n  font-weight: 600;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.header-actions {\n  display: flex;\n  gap: 0.75rem;\n}\n\n.header-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 12px;\n  color: white;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.header-button:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-1px);\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);\n}\n\n/* Loading state */\n.newtab-loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  gap: 1rem;\n  color: white;\n  font-size: 1.125rem;\n  position: relative;\n  z-index: 10;\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid rgba(255, 255, 255, 0.3);\n  border-top: 3px solid white;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Main content */\n.newtab-main {\n  flex: 1;\n  padding: 0 3rem 3rem;\n  position: relative;\n  z-index: 10;\n}\n\n/* Search section */\n.search-section {\n  margin-bottom: 3rem;\n}\n\n.search-form {\n  display: flex;\n  gap: 1rem;\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.search-input-container {\n  position: relative;\n  flex: 1;\n}\n\n.search-icon {\n  position: absolute;\n  left: 1rem;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #6b7280;\n  pointer-events: none;\n}\n\n.search-input {\n  width: 100%;\n  padding: 1rem 1rem 1rem 3rem;\n  border: none;\n  border-radius: 16px;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  font-size: 1rem;\n  color: #1f2937;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n}\n\n.search-input:focus {\n  outline: none;\n  background: white;\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n  transform: translateY(-2px);\n}\n\n.search-input::placeholder {\n  color: #9ca3af;\n}\n\n.search-button {\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 16px;\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  color: white;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.search-button:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-2px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n}\n\n/* Stats section */\n.stats-section {\n  margin-bottom: 3rem;\n}\n\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1.5rem;\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.stat-card {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1.5rem;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n  border: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n.stat-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);\n}\n\n.stat-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px;\n  border-radius: 12px;\n  background: var(--stat-color);\n  color: white;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.stat-content {\n  flex: 1;\n}\n\n.stat-value {\n  font-size: 1.875rem;\n  font-weight: 700;\n  color: #1f2937;\n  line-height: 1;\n}\n\n.stat-label {\n  font-size: 0.875rem;\n  color: #6b7280;\n  font-weight: 500;\n  margin-top: 0.25rem;\n}\n\n/* Actions section */\n.actions-section {\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n  margin-bottom: 3rem;\n}\n\n.action-button {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 1rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.action-button.primary {\n  background: #3b82f6;\n  color: white;\n}\n\n.action-button.primary:hover {\n  background: #2563eb;\n  transform: translateY(-2px);\n  box-shadow: 0 12px 40px rgba(59, 130, 246, 0.3);\n}\n\n.action-button.secondary {\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  color: white;\n}\n\n.action-button.secondary:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-2px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);\n}\n\n/* Content grid */\n.content-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n  overflow-x: auto;\n  padding-bottom: 1rem;\n}\n\n.content-grid::-webkit-scrollbar {\n  height: 8px;\n}\n\n.content-grid::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.content-grid::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 4px;\n}\n\n.content-grid::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.5);\n}\n\n.content-section {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border-radius: 24px;\n  padding: 2rem;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.5);\n  transition: all 0.2s ease;\n  min-width: 0;\n  overflow: hidden;\n}\n\n.content-section:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.15);\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n}\n\n.section-header h2 {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  font-size: 1.25rem;\n  font-weight: 700;\n  color: #1f2937;\n}\n\n.see-all-button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  background: #f3f4f6;\n  border: none;\n  border-radius: 12px;\n  color: #6b7280;\n  font-size: 0.875rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.see-all-button:hover {\n  background: #e5e7eb;\n  color: #374151;\n}\n\n/* Links grid */\n.links-grid {\n  display: grid;\n  gap: 1rem;\n}\n\n.link-card {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid #f3f4f6;\n}\n\n.link-card:hover {\n  background: #f9fafb;\n  transform: translateX(4px);\n  border-color: #e5e7eb;\n}\n\n.link-favicon {\n  width: 40px;\n  height: 40px;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #f3f4f6;\n  flex-shrink: 0;\n}\n\n.link-favicon img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.favicon-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: white;\n  font-weight: 600;\n  font-size: 1rem;\n}\n\n.link-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-title {\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: #1f2937;\n  line-height: 1.3;\n  margin-bottom: 0.25rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.link-domain {\n  font-size: 0.75rem;\n  color: #6b7280;\n  margin-bottom: 0.25rem;\n}\n\n.link-time {\n  font-size: 0.75rem;\n  color: #9ca3af;\n}\n\n/* Collections grid */\n.collections-grid {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  max-height: 400px;\n  overflow-y: auto;\n  padding-bottom: 0.5rem;\n}\n\n.collections-grid::-webkit-scrollbar {\n  width: 6px;\n}\n\n.collections-grid::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.collections-grid::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.2);\n  border-radius: 3px;\n}\n\n.collections-grid::-webkit-scrollbar-thumb:hover {\n  background: rgba(0, 0, 0, 0.3);\n}\n\n.collection-card {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid #f3f4f6;\n}\n\n.collection-card:hover {\n  background: #f9fafb;\n  transform: translateX(4px);\n  border-color: #e5e7eb;\n}\n\n.collection-icon {\n  font-size: 1.5rem;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  flex-shrink: 0;\n}\n\n.collection-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.collection-name {\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: #1f2937;\n  line-height: 1.3;\n  margin-bottom: 0.25rem;\n}\n\n.collection-description {\n  font-size: 0.75rem;\n  color: #6b7280;\n  line-height: 1.4;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* Empty states */\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 3rem 1rem;\n  text-align: center;\n  color: #6b7280;\n}\n\n.empty-state svg {\n  margin-bottom: 1rem;\n  opacity: 0.5;\n}\n\n.empty-state p {\n  font-size: 1rem;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n}\n\n.empty-state span {\n  font-size: 0.875rem;\n  opacity: 0.8;\n}\n\n/* Disabled state */\n.newtab-disabled {\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.disabled-content {\n  text-align: center;\n  color: white;\n  max-width: 400px;\n  padding: 2rem;\n}\n\n.disabled-icon {\n  margin-bottom: 2rem;\n  opacity: 0.7;\n}\n\n.disabled-content h2 {\n  font-size: 1.5rem;\n  font-weight: 700;\n  margin-bottom: 1rem;\n}\n\n.disabled-content p {\n  margin-bottom: 2rem;\n  opacity: 0.9;\n}\n\n.enable-button {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  padding: 1rem 2rem;\n  background: rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 16px;\n  color: white;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  margin: 0 auto;\n}\n\n.enable-button:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-2px);\n}\n\n/* Restricted Context Banner */\n.restricted-context-banner {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem 2rem;\n  background: linear-gradient(135deg, #fef3cd 0%, #fde68a 100%);\n  border-bottom: 1px solid #f59e0b;\n  color: #92400e;\n  font-size: 0.9rem;\n}\n\n.restricted-context-banner .banner-content {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n}\n\n.restricted-context-banner .banner-content strong {\n  font-weight: 600;\n  color: #78350f;\n}\n\n.restricted-context-banner .banner-content span {\n  color: #92400e;\n  line-height: 1.4;\n}\n\n/* Header button disabled state */\n.header-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.header-button:disabled:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: none;\n}\n\n/* Newtab container */\n\n/* Responsive design */\n@media (max-width: 1280px) {\n  .content-grid {\n    grid-template-columns: 1fr;\n    gap: 1.5rem;\n    overflow-x: visible;\n  }\n}\n\n@media (max-width: 1024px) {\n  .newtab-header {\n    padding: 1.5rem 2rem 1rem;\n  }\n  \n  .newtab-main {\n    padding: 0 2rem 2rem;\n  }\n}\n\n@media (max-width: 768px) {\n  .header-left {\n    flex-direction: column;\n    gap: 1rem;\n    align-items: flex-start;\n  }\n  \n  .greeting h1 {\n    font-size: 2rem;\n  }\n  \n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .actions-section {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .action-button {\n    width: 100%;\n    max-width: 300px;\n    justify-content: center;\n  }\n  \n  .search-form {\n    flex-direction: column;\n  }\n}\n\n@media (max-width: 480px) {\n  .newtab-header {\n    padding: 1rem;\n  }\n  \n  .newtab-main {\n    padding: 0 1rem 1rem;\n  }\n  \n  .stats-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .content-section {\n    padding: 1.5rem;\n  }\n} "],sourceRoot:""}]);const s=o},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},660:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(907)),i=r(n(818));t.default=class{constructor(e){this.shouldThrowOnError=!1,this.method=e.method,this.url=e.url,this.headers=e.headers,this.schema=e.schema,this.body=e.body,this.shouldThrowOnError=e.shouldThrowOnError,this.signal=e.signal,this.isMaybeSingle=e.isMaybeSingle,e.fetch?this.fetch=e.fetch:"undefined"==typeof fetch?this.fetch=a.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(e,t){return this.headers=Object.assign({},this.headers),this.headers[e]=t,this}then(e,t){void 0===this.schema||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),"GET"!==this.method&&"HEAD"!==this.method&&(this.headers["Content-Type"]="application/json");let n=(0,this.fetch)(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async e=>{var t,n,r;let a=null,o=null,s=null,l=e.status,u=e.statusText;if(e.ok){if("HEAD"!==this.method){const t=await e.text();""===t||(o="text/csv"===this.headers.Accept||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?t:JSON.parse(t))}const r=null===(t=this.headers.Prefer)||void 0===t?void 0:t.match(/count=(exact|planned|estimated)/),i=null===(n=e.headers.get("content-range"))||void 0===n?void 0:n.split("/");r&&i&&i.length>1&&(s=parseInt(i[1])),this.isMaybeSingle&&"GET"===this.method&&Array.isArray(o)&&(o.length>1?(a={code:"PGRST116",details:`Results contain ${o.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},o=null,s=null,l=406,u="Not Acceptable"):o=1===o.length?o[0]:null)}else{const t=await e.text();try{a=JSON.parse(t),Array.isArray(a)&&404===e.status&&(o=[],a=null,l=200,u="OK")}catch(n){404===e.status&&""===t?(l=204,u="No Content"):a={message:t}}if(a&&this.isMaybeSingle&&(null===(r=null==a?void 0:a.details)||void 0===r?void 0:r.includes("0 rows"))&&(a=null,l=200,u="OK"),a&&this.shouldThrowOnError)throw new i.default(a)}return{error:a,data:o,count:s,status:l,statusText:u}});return this.shouldThrowOnError||(n=n.catch(e=>{var t,n,r;return{error:{message:`${null!==(t=null==e?void 0:e.name)&&void 0!==t?t:"FetchError"}: ${null==e?void 0:e.message}`,details:`${null!==(n=null==e?void 0:e.stack)&&void 0!==n?n:""}`,hint:"",code:`${null!==(r=null==e?void 0:e.code)&&void 0!==r?r:""}`},data:null,count:null,status:0,statusText:""}})),n.then(e,t)}returns(){return this}overrideTypes(){return this}}},818:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends Error{constructor(e){super(e.message),this.name="PostgrestError",this.details=e.details,this.hint=e.hint,this.code=e.code}}t.default=n},825:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(261));class i extends a.default{eq(e,t){return this.url.searchParams.append(e,`eq.${t}`),this}neq(e,t){return this.url.searchParams.append(e,`neq.${t}`),this}gt(e,t){return this.url.searchParams.append(e,`gt.${t}`),this}gte(e,t){return this.url.searchParams.append(e,`gte.${t}`),this}lt(e,t){return this.url.searchParams.append(e,`lt.${t}`),this}lte(e,t){return this.url.searchParams.append(e,`lte.${t}`),this}like(e,t){return this.url.searchParams.append(e,`like.${t}`),this}likeAllOf(e,t){return this.url.searchParams.append(e,`like(all).{${t.join(",")}}`),this}likeAnyOf(e,t){return this.url.searchParams.append(e,`like(any).{${t.join(",")}}`),this}ilike(e,t){return this.url.searchParams.append(e,`ilike.${t}`),this}ilikeAllOf(e,t){return this.url.searchParams.append(e,`ilike(all).{${t.join(",")}}`),this}ilikeAnyOf(e,t){return this.url.searchParams.append(e,`ilike(any).{${t.join(",")}}`),this}is(e,t){return this.url.searchParams.append(e,`is.${t}`),this}in(e,t){const n=Array.from(new Set(t)).map(e=>"string"==typeof e&&new RegExp("[,()]").test(e)?`"${e}"`:`${e}`).join(",");return this.url.searchParams.append(e,`in.(${n})`),this}contains(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cs.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cs.{${t.join(",")}}`):this.url.searchParams.append(e,`cs.${JSON.stringify(t)}`),this}containedBy(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cd.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cd.{${t.join(",")}}`):this.url.searchParams.append(e,`cd.${JSON.stringify(t)}`),this}rangeGt(e,t){return this.url.searchParams.append(e,`sr.${t}`),this}rangeGte(e,t){return this.url.searchParams.append(e,`nxl.${t}`),this}rangeLt(e,t){return this.url.searchParams.append(e,`sl.${t}`),this}rangeLte(e,t){return this.url.searchParams.append(e,`nxr.${t}`),this}rangeAdjacent(e,t){return this.url.searchParams.append(e,`adj.${t}`),this}overlaps(e,t){return"string"==typeof t?this.url.searchParams.append(e,`ov.${t}`):this.url.searchParams.append(e,`ov.{${t.join(",")}}`),this}textSearch(e,t,{config:n,type:r}={}){let a="";"plain"===r?a="pl":"phrase"===r?a="ph":"websearch"===r&&(a="w");const i=void 0===n?"":`(${n})`;return this.url.searchParams.append(e,`${a}fts${i}.${t}`),this}match(e){return Object.entries(e).forEach(([e,t])=>{this.url.searchParams.append(e,`eq.${t}`)}),this}not(e,t,n){return this.url.searchParams.append(e,`not.${t}.${n}`),this}or(e,{foreignTable:t,referencedTable:n=t}={}){const r=n?`${n}.or`:"or";return this.url.searchParams.append(r,`(${e})`),this}filter(e,t,n){return this.url.searchParams.append(e,`${t}.${n}`),this}}t.default=i},848:(e,t,n)=>{e.exports=n(20)},907:(e,t,n)=>{n.r(t),n.d(t,{Headers:()=>o,Request:()=>s,Response:()=>l,default:()=>i,fetch:()=>a});var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("unable to locate global object")}();const a=r.fetch,i=r.fetch.bind(r),o=r.Headers,s=r.Request,l=r.Response},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},982:(e,t,n)=>{e.exports=n(463)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e].call(i.exports,i,i.exports,a),i.exports}a.m=n,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce((t,n)=>(a.f[n](e,t),t),[])),a.u=e=>e+".js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="nest-chrome-extension:",a.l=(n,r,i,o)=>{if(e[n])e[n].push(r);else{var s,l;if(void 0!==i)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var d=u[c];if(d.getAttribute("src")==n||d.getAttribute("data-webpack")==t+i){s=d;break}}s||(l=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.setAttribute("data-webpack",t+i),s.src=n),e[n]=[r];var h=(t,r)=>{s.onerror=s.onload=null,clearTimeout(f);var a=e[n];if(delete e[n],s.parentNode&&s.parentNode.removeChild(s),a&&a.forEach(e=>e(r)),t)return t(r)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=h.bind(null,s.onerror),s.onload=h.bind(null,s.onload),l&&document.head.appendChild(s)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e={648:0};a.f.j=(t,n)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise((n,a)=>r=e[t]=[n,a]);n.push(r[2]=i);var o=a.p+a.u(t),s=new Error;a.l(o,n=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;s.message="Loading chunk "+t+" failed.\n("+i+": "+o+")",s.name="ChunkLoadError",s.type=i,s.request=o,r[1](s)}},"chunk-"+t,t)}};var t=(t,n)=>{var r,i,[o,s,l]=n,u=0;if(o.some(t=>0!==e[t])){for(r in s)a.o(s,r)&&(a.m[r]=s[r]);l&&l(a)}for(t&&t(n);u<o.length;u++)i=o[u],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0},n=self.webpackChunknest_chrome_extension=self.webpackChunknest_chrome_extension||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),a.nc=void 0;var i=a(540),o=a(338),s={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const l=(e,t)=>{const n=(0,i.forwardRef)(({color:n="currentColor",size:r=24,strokeWidth:a=2,absoluteStrokeWidth:o,className:l="",children:u,...c},d)=>{return(0,i.createElement)("svg",{ref:d,...s,width:r,height:r,stroke:n,strokeWidth:o?24*Number(a)/Number(r):a,className:["lucide",`lucide-${h=e,h.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase().trim()}`,l].join(" "),...c},[...t.map(([e,t])=>(0,i.createElement)(e,t)),...Array.isArray(u)?u:[u]]);var h});return n.displayName=`${e}`,n},u=l("Bookmark",[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z",key:"1fy3hk"}]]),c=l("Folder",[["path",{d:"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",key:"1kt360"}]]),d=l("Calendar",[["rect",{width:"18",height:"18",x:"3",y:"4",rx:"2",ry:"2",key:"eu3xkr"}],["line",{x1:"16",x2:"16",y1:"2",y2:"6",key:"m3sa8f"}],["line",{x1:"8",x2:"8",y1:"2",y2:"6",key:"18kwsl"}],["line",{x1:"3",x2:"21",y1:"10",y2:"10",key:"xt86sb"}]]),h=l("Flame",[["path",{d:"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z",key:"96xj49"}]]),f=l("Eye",[["path",{d:"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z",key:"rwhkz3"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]),p=l("AlertTriangle",[["path",{d:"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z",key:"c3ski4"}],["path",{d:"M12 9v4",key:"juzpu7"}],["path",{d:"M12 17h.01",key:"p32p05"}]]),g=l("EyeOff",[["path",{d:"M9.88 9.88a3 3 0 1 0 4.24 4.24",key:"1jxqfv"}],["path",{d:"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68",key:"9wicm4"}],["path",{d:"M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61",key:"1jreej"}],["line",{x1:"2",x2:"22",y1:"2",y2:"22",key:"a6p6uj"}]]),m=l("Settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]),b=l("Search",[["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}],["path",{d:"m21 21-4.3-4.3",key:"1qie3q"}]]),v=l("Plus",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]]),y=l("BookOpen",[["path",{d:"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z",key:"vv98re"}],["path",{d:"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z",key:"1cyq3y"}]]),A=l("Clock",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["polyline",{points:"12 6 12 12 16 14",key:"68esgv"}]]),w=l("ExternalLink",[["path",{d:"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",key:"a6xqqp"}],["polyline",{points:"15 3 21 3 21 9",key:"mznyad"}],["line",{x1:"10",x2:"21",y1:"14",y2:"3",key:"18c3s4"}]]),k=l("Target",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["circle",{cx:"12",cy:"12",r:"6",key:"1vlfrh"}],["circle",{cx:"12",cy:"12",r:"2",key:"1c9p78"}]]),E=l("Sparkles",[["path",{d:"m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z",key:"17u4zn"}],["path",{d:"M5 3v4",key:"bklmnn"}],["path",{d:"M19 17v4",key:"iiml17"}],["path",{d:"M3 5h4",key:"nem4j1"}],["path",{d:"M17 19h4",key:"lbex7p"}]]);class C extends Error{constructor(e,t="FunctionsError",n){super(e),this.name=t,this.context=n}}class _ extends C{constructor(e){super("Failed to send a request to the Edge Function","FunctionsFetchError",e)}}class x extends C{constructor(e){super("Relay Error invoking the Edge Function","FunctionsRelayError",e)}}class S extends C{constructor(e){super("Edge Function returned a non-2xx status code","FunctionsHttpError",e)}}var B;!function(e){e.Any="any",e.ApNortheast1="ap-northeast-1",e.ApNortheast2="ap-northeast-2",e.ApSouth1="ap-south-1",e.ApSoutheast1="ap-southeast-1",e.ApSoutheast2="ap-southeast-2",e.CaCentral1="ca-central-1",e.EuCentral1="eu-central-1",e.EuWest1="eu-west-1",e.EuWest2="eu-west-2",e.EuWest3="eu-west-3",e.SaEast1="sa-east-1",e.UsEast1="us-east-1",e.UsWest1="us-west-1",e.UsWest2="us-west-2"}(B||(B={}));class T{constructor(e,{headers:t={},customFetch:n,region:r=B.Any}={}){this.url=e,this.headers=t,this.region=r,this.fetch=(e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(a.bind(a,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)})(n)}setAuth(e){this.headers.Authorization=`Bearer ${e}`}invoke(e,t={}){var n,r,a,i,o;return r=this,a=void 0,o=function*(){try{const{headers:r,method:a,body:i}=t;let o={},{region:s}=t;s||(s=this.region);const l=new URL(`${this.url}/${e}`);let u;s&&"any"!==s&&(o["x-region"]=s,l.searchParams.set("forceFunctionRegion",s)),i&&(r&&!Object.prototype.hasOwnProperty.call(r,"Content-Type")||!r)&&("undefined"!=typeof Blob&&i instanceof Blob||i instanceof ArrayBuffer?(o["Content-Type"]="application/octet-stream",u=i):"string"==typeof i?(o["Content-Type"]="text/plain",u=i):"undefined"!=typeof FormData&&i instanceof FormData?u=i:(o["Content-Type"]="application/json",u=JSON.stringify(i)));const c=yield this.fetch(l.toString(),{method:a||"POST",headers:Object.assign(Object.assign(Object.assign({},o),this.headers),r),body:u}).catch(e=>{throw new _(e)}),d=c.headers.get("x-relay-error");if(d&&"true"===d)throw new x(c);if(!c.ok)throw new S(c);let h,f=(null!==(n=c.headers.get("Content-Type"))&&void 0!==n?n:"text/plain").split(";")[0].trim();return h="application/json"===f?yield c.json():"application/octet-stream"===f?yield c.blob():"text/event-stream"===f?c:"multipart/form-data"===f?yield c.formData():yield c.text(),{data:h,error:null,response:c}}catch(e){return{data:null,error:e,response:e instanceof S||e instanceof x?e.context:void 0}}},new((i=void 0)||(i=Promise))(function(e,t){function n(e){try{l(o.next(e))}catch(e){t(e)}}function s(e){try{l(o.throw(e))}catch(e){t(e)}}function l(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i(function(e){e(r)})).then(n,s)}l((o=o.apply(r,a||[])).next())})}}var j=a(279);const{PostgrestClient:P,PostgrestQueryBuilder:O,PostgrestFilterBuilder:I,PostgrestTransformBuilder:N,PostgrestBuilder:R,PostgrestError:L}=j,z=function(){if("undefined"!=typeof WebSocket)return WebSocket;if(void 0!==global.WebSocket)return global.WebSocket;if(void 0!==window.WebSocket)return window.WebSocket;if(void 0!==self.WebSocket)return self.WebSocket;throw new Error("`WebSocket` is not supported in this environment")}();var D,$,U,M,F,q,W;!function(e){e[e.connecting=0]="connecting",e[e.open=1]="open",e[e.closing=2]="closing",e[e.closed=3]="closed"}(D||(D={})),(W=$||($={})).closed="closed",W.errored="errored",W.joined="joined",W.joining="joining",W.leaving="leaving",function(e){e.close="phx_close",e.error="phx_error",e.join="phx_join",e.reply="phx_reply",e.leave="phx_leave",e.access_token="access_token"}(U||(U={})),function(e){e.websocket="websocket"}(M||(M={})),function(e){e.Connecting="connecting",e.Open="open",e.Closing="closing",e.Closed="closed"}(F||(F={}));class H{constructor(){this.HEADER_LENGTH=1}decode(e,t){return e.constructor===ArrayBuffer?t(this._binaryDecode(e)):t("string"==typeof e?JSON.parse(e):{})}_binaryDecode(e){const t=new DataView(e),n=new TextDecoder;return this._decodeBroadcast(e,t,n)}_decodeBroadcast(e,t,n){const r=t.getUint8(1),a=t.getUint8(2);let i=this.HEADER_LENGTH+2;const o=n.decode(e.slice(i,i+r));i+=r;const s=n.decode(e.slice(i,i+a));return i+=a,{ref:null,topic:o,event:s,payload:JSON.parse(n.decode(e.slice(i,e.byteLength)))}}}class Y{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=void 0,this.tries=0,this.callback=e,this.timerCalc=t}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}!function(e){e.abstime="abstime",e.bool="bool",e.date="date",e.daterange="daterange",e.float4="float4",e.float8="float8",e.int2="int2",e.int4="int4",e.int4range="int4range",e.int8="int8",e.int8range="int8range",e.json="json",e.jsonb="jsonb",e.money="money",e.numeric="numeric",e.oid="oid",e.reltime="reltime",e.text="text",e.time="time",e.timestamp="timestamp",e.timestamptz="timestamptz",e.timetz="timetz",e.tsrange="tsrange",e.tstzrange="tstzrange"}(q||(q={}));const V=(e,t,n={})=>{var r;const a=null!==(r=n.skipTypes)&&void 0!==r?r:[];return Object.keys(t).reduce((n,r)=>(n[r]=K(r,e,t,a),n),{})},K=(e,t,n,r)=>{const a=t.find(t=>t.name===e),i=null==a?void 0:a.type,o=n[e];return i&&!r.includes(i)?G(i,o):J(o)},G=(e,t)=>{if("_"===e.charAt(0)){const n=e.slice(1,e.length);return ee(t,n)}switch(e){case q.bool:return Q(t);case q.float4:case q.float8:case q.int2:case q.int4:case q.int8:case q.numeric:case q.oid:return X(t);case q.json:case q.jsonb:return Z(t);case q.timestamp:return te(t);case q.abstime:case q.date:case q.daterange:case q.int4range:case q.int8range:case q.money:case q.reltime:case q.text:case q.time:case q.timestamptz:case q.timetz:case q.tsrange:case q.tstzrange:default:return J(t)}},J=e=>e,Q=e=>{switch(e){case"t":return!0;case"f":return!1;default:return e}},X=e=>{if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return t}return e},Z=e=>{if("string"==typeof e)try{return JSON.parse(e)}catch(t){return console.log(`JSON parse error: ${t}`),e}return e},ee=(e,t)=>{if("string"!=typeof e)return e;const n=e.length-1,r=e[n];if("{"===e[0]&&"}"===r){let r;const a=e.slice(1,n);try{r=JSON.parse("["+a+"]")}catch(e){r=a?a.split(","):[]}return r.map(e=>G(t,e))}return e},te=e=>"string"==typeof e?e.replace(" ","T"):e,ne=e=>{let t=e;return t=t.replace(/^ws/i,"http"),t=t.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),t.replace(/\/+$/,"")};class re{constructor(e,t,n={},r=1e4){this.channel=e,this.event=t,this.payload=n,this.timeout=r,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(e){this.timeout=e,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(e){this.payload=Object.assign(Object.assign({},this.payload),e)}receive(e,t){var n;return this._hasReceived(e)&&t(null===(n=this.receivedResp)||void 0===n?void 0:n.response),this.recHooks.push({status:e,callback:t}),this}startTimeout(){this.timeoutTimer||(this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref),this.channel._on(this.refEvent,{},e=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=e,this._matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout))}trigger(e,t){this.refEvent&&this.channel._trigger(this.refEvent,{status:e,response:t})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:e,response:t}){this.recHooks.filter(t=>t.status===e).forEach(e=>e.callback(t))}_hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}}var ae,ie,oe,se;!function(e){e.SYNC="sync",e.JOIN="join",e.LEAVE="leave"}(ae||(ae={}));class le{constructor(e,t){this.channel=e,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const n=(null==t?void 0:t.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(n.state,{},e=>{const{onJoin:t,onLeave:n,onSync:r}=this.caller;this.joinRef=this.channel._joinRef(),this.state=le.syncState(this.state,e,t,n),this.pendingDiffs.forEach(e=>{this.state=le.syncDiff(this.state,e,t,n)}),this.pendingDiffs=[],r()}),this.channel._on(n.diff,{},e=>{const{onJoin:t,onLeave:n,onSync:r}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(e):(this.state=le.syncDiff(this.state,e,t,n),r())}),this.onJoin((e,t,n)=>{this.channel._trigger("presence",{event:"join",key:e,currentPresences:t,newPresences:n})}),this.onLeave((e,t,n)=>{this.channel._trigger("presence",{event:"leave",key:e,currentPresences:t,leftPresences:n})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(e,t,n,r){const a=this.cloneDeep(e),i=this.transformState(t),o={},s={};return this.map(a,(e,t)=>{i[e]||(s[e]=t)}),this.map(i,(e,t)=>{const n=a[e];if(n){const r=t.map(e=>e.presence_ref),a=n.map(e=>e.presence_ref),i=t.filter(e=>a.indexOf(e.presence_ref)<0),l=n.filter(e=>r.indexOf(e.presence_ref)<0);i.length>0&&(o[e]=i),l.length>0&&(s[e]=l)}else o[e]=t}),this.syncDiff(a,{joins:o,leaves:s},n,r)}static syncDiff(e,t,n,r){const{joins:a,leaves:i}={joins:this.transformState(t.joins),leaves:this.transformState(t.leaves)};return n||(n=()=>{}),r||(r=()=>{}),this.map(a,(t,r)=>{var a;const i=null!==(a=e[t])&&void 0!==a?a:[];if(e[t]=this.cloneDeep(r),i.length>0){const n=e[t].map(e=>e.presence_ref),r=i.filter(e=>n.indexOf(e.presence_ref)<0);e[t].unshift(...r)}n(t,i,r)}),this.map(i,(t,n)=>{let a=e[t];if(!a)return;const i=n.map(e=>e.presence_ref);a=a.filter(e=>i.indexOf(e.presence_ref)<0),e[t]=a,r(t,a,n),0===a.length&&delete e[t]}),e}static map(e,t){return Object.getOwnPropertyNames(e).map(n=>t(n,e[n]))}static transformState(e){return e=this.cloneDeep(e),Object.getOwnPropertyNames(e).reduce((t,n)=>{const r=e[n];return t[n]="metas"in r?r.metas.map(e=>(e.presence_ref=e.phx_ref,delete e.phx_ref,delete e.phx_ref_prev,e)):r,t},{})}static cloneDeep(e){return JSON.parse(JSON.stringify(e))}onJoin(e){this.caller.onJoin=e}onLeave(e){this.caller.onLeave=e}onSync(e){this.caller.onSync=e}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}!function(e){e.ALL="*",e.INSERT="INSERT",e.UPDATE="UPDATE",e.DELETE="DELETE"}(ie||(ie={})),function(e){e.BROADCAST="broadcast",e.PRESENCE="presence",e.POSTGRES_CHANGES="postgres_changes",e.SYSTEM="system"}(oe||(oe={})),function(e){e.SUBSCRIBED="SUBSCRIBED",e.TIMED_OUT="TIMED_OUT",e.CLOSED="CLOSED",e.CHANNEL_ERROR="CHANNEL_ERROR"}(se||(se={}));class ue{constructor(e,t={config:{}},n){this.topic=e,this.params=t,this.socket=n,this.bindings={},this.state=$.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=e.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},t.config),this.timeout=this.socket.timeout,this.joinPush=new re(this,U.join,this.params,this.timeout),this.rejoinTimer=new Y(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=$.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(e=>e.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=$.closed,this.socket._remove(this)}),this._onError(e=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,e),this.state=$.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=$.errored,this.rejoinTimer.scheduleTimeout())}),this._on(U.reply,{},(e,t)=>{this._trigger(this._replyEventName(t),e)}),this.presence=new le(this),this.broadcastEndpointURL=ne(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(e,t=this.timeout){var n,r;if(this.socket.isConnected()||this.socket.connect(),this.state==$.closed){const{config:{broadcast:a,presence:i,private:o}}=this.params;this._onError(t=>null==e?void 0:e(se.CHANNEL_ERROR,t)),this._onClose(()=>null==e?void 0:e(se.CLOSED));const s={},l={broadcast:a,presence:i,postgres_changes:null!==(r=null===(n=this.bindings.postgres_changes)||void 0===n?void 0:n.map(e=>e.filter))&&void 0!==r?r:[],private:o};this.socket.accessTokenValue&&(s.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:l},s)),this.joinedOnce=!0,this._rejoin(t),this.joinPush.receive("ok",async({postgres_changes:t})=>{var n;if(this.socket.setAuth(),void 0!==t){const r=this.bindings.postgres_changes,a=null!==(n=null==r?void 0:r.length)&&void 0!==n?n:0,i=[];for(let n=0;n<a;n++){const a=r[n],{filter:{event:o,schema:s,table:l,filter:u}}=a,c=t&&t[n];if(!c||c.event!==o||c.schema!==s||c.table!==l||c.filter!==u)return this.unsubscribe(),this.state=$.errored,void(null==e||e(se.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes")));i.push(Object.assign(Object.assign({},a),{id:c.id}))}return this.bindings.postgres_changes=i,void(e&&e(se.SUBSCRIBED))}null==e||e(se.SUBSCRIBED)}).receive("error",t=>{this.state=$.errored,null==e||e(se.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(t).join(", ")||"error")))}).receive("timeout",()=>{null==e||e(se.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(e,t={}){return await this.send({type:"presence",event:"track",payload:e},t.timeout||this.timeout)}async untrack(e={}){return await this.send({type:"presence",event:"untrack"},e)}on(e,t,n){return this._on(e,t,n)}async send(e,t={}){var n,r;if(this._canPush()||"broadcast"!==e.type)return new Promise(n=>{var r,a,i;const o=this._push(e.type,e,t.timeout||this.timeout);"broadcast"!==e.type||(null===(i=null===(a=null===(r=this.params)||void 0===r?void 0:r.config)||void 0===a?void 0:a.broadcast)||void 0===i?void 0:i.ack)||n("ok"),o.receive("ok",()=>n("ok")),o.receive("error",()=>n("error")),o.receive("timeout",()=>n("timed out"))});{const{event:a,payload:i}=e,o={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:a,payload:i,private:this.private}]})};try{const e=await this._fetchWithTimeout(this.broadcastEndpointURL,o,null!==(n=t.timeout)&&void 0!==n?n:this.timeout);return await(null===(r=e.body)||void 0===r?void 0:r.cancel()),e.ok?"ok":"error"}catch(e){return"AbortError"===e.name?"timed out":"error"}}}updateJoinPayload(e){this.joinPush.updatePayload(e)}unsubscribe(e=this.timeout){this.state=$.leaving;const t=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(U.close,"leave",this._joinRef())};this.joinPush.destroy();let n=null;return new Promise(r=>{n=new re(this,U.leave,{},e),n.receive("ok",()=>{t(),r("ok")}).receive("timeout",()=>{t(),r("timed out")}).receive("error",()=>{r("error")}),n.send(),this._canPush()||n.trigger("ok",{})}).finally(()=>{null==n||n.destroy()})}teardown(){this.pushBuffer.forEach(e=>e.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}async _fetchWithTimeout(e,t,n){const r=new AbortController,a=setTimeout(()=>r.abort(),n),i=await this.socket.fetch(e,Object.assign(Object.assign({},t),{signal:r.signal}));return clearTimeout(a),i}_push(e,t,n=this.timeout){if(!this.joinedOnce)throw`tried to push '${e}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let r=new re(this,e,t,n);return this._canPush()?r.send():(r.startTimeout(),this.pushBuffer.push(r)),r}_onMessage(e,t,n){return t}_isMember(e){return this.topic===e}_joinRef(){return this.joinPush.ref}_trigger(e,t,n){var r,a;const i=e.toLocaleLowerCase(),{close:o,error:s,leave:l,join:u}=U;if(n&&[o,s,l,u].indexOf(i)>=0&&n!==this._joinRef())return;let c=this._onMessage(i,t,n);if(t&&!c)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(i)?null===(r=this.bindings.postgres_changes)||void 0===r||r.filter(e=>{var t,n,r;return"*"===(null===(t=e.filter)||void 0===t?void 0:t.event)||(null===(r=null===(n=e.filter)||void 0===n?void 0:n.event)||void 0===r?void 0:r.toLocaleLowerCase())===i}).map(e=>e.callback(c,n)):null===(a=this.bindings[i])||void 0===a||a.filter(e=>{var n,r,a,o,s,l;if(["broadcast","presence","postgres_changes"].includes(i)){if("id"in e){const i=e.id,o=null===(n=e.filter)||void 0===n?void 0:n.event;return i&&(null===(r=t.ids)||void 0===r?void 0:r.includes(i))&&("*"===o||(null==o?void 0:o.toLocaleLowerCase())===(null===(a=t.data)||void 0===a?void 0:a.type.toLocaleLowerCase()))}{const n=null===(s=null===(o=null==e?void 0:e.filter)||void 0===o?void 0:o.event)||void 0===s?void 0:s.toLocaleLowerCase();return"*"===n||n===(null===(l=null==t?void 0:t.event)||void 0===l?void 0:l.toLocaleLowerCase())}}return e.type.toLocaleLowerCase()===i}).map(e=>{if("object"==typeof c&&"ids"in c){const e=c.data,{schema:t,table:n,commit_timestamp:r,type:a,errors:i}=e,o={schema:t,table:n,commit_timestamp:r,eventType:a,new:{},old:{},errors:i};c=Object.assign(Object.assign({},o),this._getPayloadRecords(e))}e.callback(c,n)})}_isClosed(){return this.state===$.closed}_isJoined(){return this.state===$.joined}_isJoining(){return this.state===$.joining}_isLeaving(){return this.state===$.leaving}_replyEventName(e){return`chan_reply_${e}`}_on(e,t,n){const r=e.toLocaleLowerCase(),a={type:r,filter:t,callback:n};return this.bindings[r]?this.bindings[r].push(a):this.bindings[r]=[a],this}_off(e,t){const n=e.toLocaleLowerCase();return this.bindings[n]=this.bindings[n].filter(e=>{var r;return!((null===(r=e.type)||void 0===r?void 0:r.toLocaleLowerCase())===n&&ue.isEqual(e.filter,t))}),this}static isEqual(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(e[n]!==t[n])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(e){this._on(U.close,{},e)}_onError(e){this._on(U.error,{},t=>e(t))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(e=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=$.joining,this.joinPush.resend(e))}_getPayloadRecords(e){const t={new:{},old:{}};return"INSERT"!==e.type&&"UPDATE"!==e.type||(t.new=V(e.columns,e.record)),"UPDATE"!==e.type&&"DELETE"!==e.type||(t.old=V(e.columns,e.old_record)),t}}const ce=()=>{};class de{constructor(e,t){var n;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers={},this.params={},this.timeout=1e4,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=ce,this.ref=0,this.logger=ce,this.conn=null,this.sendBuffer=[],this.serializer=new H,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(a.bind(a,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},this.endPoint=`${e}/${M.websocket}`,this.httpEndpoint=ne(e),(null==t?void 0:t.transport)?this.transport=t.transport:this.transport=null,(null==t?void 0:t.params)&&(this.params=t.params),(null==t?void 0:t.timeout)&&(this.timeout=t.timeout),(null==t?void 0:t.logger)&&(this.logger=t.logger),((null==t?void 0:t.logLevel)||(null==t?void 0:t.log_level))&&(this.logLevel=t.logLevel||t.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),(null==t?void 0:t.heartbeatIntervalMs)&&(this.heartbeatIntervalMs=t.heartbeatIntervalMs);const r=null===(n=null==t?void 0:t.params)||void 0===n?void 0:n.apikey;if(r&&(this.accessTokenValue=r,this.apiKey=r),this.reconnectAfterMs=(null==t?void 0:t.reconnectAfterMs)?t.reconnectAfterMs:e=>[1e3,2e3,5e3,1e4][e-1]||1e4,this.encode=(null==t?void 0:t.encode)?t.encode:(e,t)=>t(JSON.stringify(e)),this.decode=(null==t?void 0:t.decode)?t.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new Y(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(null==t?void 0:t.fetch),null==t?void 0:t.worker){if("undefined"!=typeof window&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(null==t?void 0:t.worker)||!1,this.workerUrl=null==t?void 0:t.workerUrl}this.accessToken=(null==t?void 0:t.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=z),!this.transport)throw new Error("No transport provided");this.conn=new this.transport(this.endpointURL()),this.setupConnection()}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:"1.0.0"}))}disconnect(e,t){this.conn&&(this.conn.onclose=function(){},e?this.conn.close(e,null!=t?t:""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(e=>e.teardown()))}getChannels(){return this.channels}async removeChannel(e){const t=await e.unsubscribe();return 0===this.channels.length&&this.disconnect(),t}async removeAllChannels(){const e=await Promise.all(this.channels.map(e=>e.unsubscribe()));return this.channels=[],this.disconnect(),e}log(e,t,n){this.logger(e,t,n)}connectionState(){switch(this.conn&&this.conn.readyState){case D.connecting:return F.Connecting;case D.open:return F.Open;case D.closing:return F.Closing;default:return F.Closed}}isConnected(){return this.connectionState()===F.Open}channel(e,t={config:{}}){const n=`realtime:${e}`,r=this.getChannels().find(e=>e.topic===n);if(r)return r;{const n=new ue(`realtime:${e}`,t,this);return this.channels.push(n),n}}push(e){const{topic:t,event:n,payload:r,ref:a}=e,i=()=>{this.encode(e,e=>{var t;null===(t=this.conn)||void 0===t||t.send(e)})};this.log("push",`${t} ${n} (${a})`,r),this.isConnected()?i():this.sendBuffer.push(i)}async setAuth(e=null){let t=e||this.accessToken&&await this.accessToken()||this.accessTokenValue;this.accessTokenValue!=t&&(this.accessTokenValue=t,this.channels.forEach(e=>{const n={access_token:t,version:"realtime-js/2.11.15"};t&&e.updateJoinPayload(n),e.joinedOnce&&e._isJoined()&&e._push(U.access_token,{access_token:t})}))}async sendHeartbeat(){var e;if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),void(null===(e=this.conn)||void 0===e||e.close(1e3,"hearbeat timeout"));this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),await this.setAuth()}else this.heartbeatCallback("disconnected")}onHeartbeat(e){this.heartbeatCallback=e}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}_makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}_leaveOpenTopic(e){let t=this.channels.find(t=>t.topic===e&&(t._isJoined()||t._isJoining()));t&&(this.log("transport",`leaving duplicate topic "${e}"`),t.unsubscribe())}_remove(e){this.channels=this.channels.filter(t=>t.topic!==e.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=e=>this._onConnError(e),this.conn.onmessage=e=>this._onConnMessage(e),this.conn.onclose=e=>this._onConnClose(e))}_onConnMessage(e){this.decode(e.data,e=>{let{topic:t,event:n,payload:r,ref:a}=e;"phoenix"===t&&"phx_reply"===n&&this.heartbeatCallback("ok"==e.payload.status?"ok":"error"),a&&a===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${r.status||""} ${t} ${n} ${a&&"("+a+")"||""}`,r),Array.from(this.channels).filter(e=>e._isMember(t)).forEach(e=>e._trigger(n,r,a)),this.stateChangeCallbacks.message.forEach(t=>t(e))})}_onConnOpen(){this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker?this.workerRef||this._startWorkerHeartbeat():this._startHeartbeat(),this.stateChangeCallbacks.open.forEach(e=>e())}_startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)}_startWorkerHeartbeat(){this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const e=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(e),this.workerRef.onerror=e=>{this.log("worker","worker error",e.message),this.workerRef.terminate()},this.workerRef.onmessage=e=>{"keepAlive"===e.data.event&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}_onConnClose(e){this.log("transport","close",e),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(t=>t(e))}_onConnError(e){this.log("transport",`${e}`),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(t=>t(e))}_triggerChanError(){this.channels.forEach(e=>e._trigger(U.error))}_appendParams(e,t){if(0===Object.keys(t).length)return e;const n=e.match(/\?/)?"&":"?";return`${e}${n}${new URLSearchParams(t)}`}_workerObjectUrl(e){let t;if(e)t=e;else{const e=new Blob(['\n  addEventListener("message", (e) => {\n    if (e.data.event === "start") {\n      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);\n    }\n  });'],{type:"application/javascript"});t=URL.createObjectURL(e)}return t}}class he extends Error{constructor(e){super(e),this.__isStorageError=!0,this.name="StorageError"}}function fe(e){return"object"==typeof e&&null!==e&&"__isStorageError"in e}class pe extends he{constructor(e,t){super(e),this.name="StorageApiError",this.status=t}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class ge extends he{constructor(e,t){super(e),this.name="StorageUnknownError",this.originalError=t}}const me=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(a.bind(a,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},be=e=>{if(Array.isArray(e))return e.map(e=>be(e));if("function"==typeof e||e!==Object(e))return e;const t={};return Object.entries(e).forEach(([e,n])=>{const r=e.replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace(/[-_]/g,""));t[r]=be(n)}),t};var ve=function(e,t,n,r){return new(n||(n=Promise))(function(a,i){function o(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,s)}l((r=r.apply(e,t||[])).next())})};const ye=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),Ae=(e,t,n)=>ve(void 0,void 0,void 0,function*(){const r=yield(i=void 0,o=void 0,s=void 0,l=function*(){return"undefined"==typeof Response?(yield Promise.resolve().then(a.bind(a,907))).Response:Response},new(s||(s=Promise))(function(e,t){function n(e){try{a(l.next(e))}catch(e){t(e)}}function r(e){try{a(l.throw(e))}catch(e){t(e)}}function a(t){var a;t.done?e(t.value):(a=t.value,a instanceof s?a:new s(function(e){e(a)})).then(n,r)}a((l=l.apply(i,o||[])).next())}));var i,o,s,l;e instanceof r&&!(null==n?void 0:n.noResolveJson)?e.json().then(n=>{t(new pe(ye(n),e.status||500))}).catch(e=>{t(new ge(ye(e),e))}):t(new ge(ye(e),e))});function we(e,t,n,r,a,i){return ve(this,void 0,void 0,function*(){return new Promise((o,s)=>{e(n,((e,t,n,r)=>{const a={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?a:(a.headers=Object.assign({"Content-Type":"application/json"},null==t?void 0:t.headers),r&&(a.body=JSON.stringify(r)),Object.assign(Object.assign({},a),n))})(t,r,a,i)).then(e=>{if(!e.ok)throw e;return(null==r?void 0:r.noResolveJson)?e:e.json()}).then(e=>o(e)).catch(e=>Ae(e,s,r))})})}function ke(e,t,n,r){return ve(this,void 0,void 0,function*(){return we(e,"GET",t,n,r)})}function Ee(e,t,n,r,a){return ve(this,void 0,void 0,function*(){return we(e,"POST",t,r,a,n)})}function Ce(e,t,n,r,a){return ve(this,void 0,void 0,function*(){return we(e,"DELETE",t,r,a,n)})}var _e=function(e,t,n,r){return new(n||(n=Promise))(function(a,i){function o(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,s)}l((r=r.apply(e,t||[])).next())})};const xe={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},Se={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class Be{constructor(e,t={},n,r){this.url=e,this.headers=t,this.bucketId=n,this.fetch=me(r)}uploadOrUpdate(e,t,n,r){return _e(this,void 0,void 0,function*(){try{let a;const i=Object.assign(Object.assign({},Se),r);let o=Object.assign(Object.assign({},this.headers),"POST"===e&&{"x-upsert":String(i.upsert)});const s=i.metadata;"undefined"!=typeof Blob&&n instanceof Blob?(a=new FormData,a.append("cacheControl",i.cacheControl),s&&a.append("metadata",this.encodeMetadata(s)),a.append("",n)):"undefined"!=typeof FormData&&n instanceof FormData?(a=n,a.append("cacheControl",i.cacheControl),s&&a.append("metadata",this.encodeMetadata(s))):(a=n,o["cache-control"]=`max-age=${i.cacheControl}`,o["content-type"]=i.contentType,s&&(o["x-metadata"]=this.toBase64(this.encodeMetadata(s)))),(null==r?void 0:r.headers)&&(o=Object.assign(Object.assign({},o),r.headers));const l=this._removeEmptyFolders(t),u=this._getFinalPath(l),c=yield this.fetch(`${this.url}/object/${u}`,Object.assign({method:e,body:a,headers:o},(null==i?void 0:i.duplex)?{duplex:i.duplex}:{})),d=yield c.json();return c.ok?{data:{path:l,id:d.Id,fullPath:d.Key},error:null}:{data:null,error:d}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}upload(e,t,n){return _e(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",e,t,n)})}uploadToSignedUrl(e,t,n,r){return _e(this,void 0,void 0,function*(){const a=this._removeEmptyFolders(e),i=this._getFinalPath(a),o=new URL(this.url+`/object/upload/sign/${i}`);o.searchParams.set("token",t);try{let e;const t=Object.assign({upsert:Se.upsert},r),i=Object.assign(Object.assign({},this.headers),{"x-upsert":String(t.upsert)});"undefined"!=typeof Blob&&n instanceof Blob?(e=new FormData,e.append("cacheControl",t.cacheControl),e.append("",n)):"undefined"!=typeof FormData&&n instanceof FormData?(e=n,e.append("cacheControl",t.cacheControl)):(e=n,i["cache-control"]=`max-age=${t.cacheControl}`,i["content-type"]=t.contentType);const s=yield this.fetch(o.toString(),{method:"PUT",body:e,headers:i}),l=yield s.json();return s.ok?{data:{path:a,fullPath:l.Key},error:null}:{data:null,error:l}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}createSignedUploadUrl(e,t){return _e(this,void 0,void 0,function*(){try{let n=this._getFinalPath(e);const r=Object.assign({},this.headers);(null==t?void 0:t.upsert)&&(r["x-upsert"]="true");const a=yield Ee(this.fetch,`${this.url}/object/upload/sign/${n}`,{},{headers:r}),i=new URL(this.url+a.url),o=i.searchParams.get("token");if(!o)throw new he("No token returned by API");return{data:{signedUrl:i.toString(),path:e,token:o},error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}update(e,t,n){return _e(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",e,t,n)})}move(e,t,n){return _e(this,void 0,void 0,function*(){try{return{data:yield Ee(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==n?void 0:n.destinationBucket},{headers:this.headers}),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}copy(e,t,n){return _e(this,void 0,void 0,function*(){try{return{data:{path:(yield Ee(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==n?void 0:n.destinationBucket},{headers:this.headers})).Key},error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}createSignedUrl(e,t,n){return _e(this,void 0,void 0,function*(){try{let r=this._getFinalPath(e),a=yield Ee(this.fetch,`${this.url}/object/sign/${r}`,Object.assign({expiresIn:t},(null==n?void 0:n.transform)?{transform:n.transform}:{}),{headers:this.headers});const i=(null==n?void 0:n.download)?`&download=${!0===n.download?"":n.download}`:"";return a={signedUrl:encodeURI(`${this.url}${a.signedURL}${i}`)},{data:a,error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}createSignedUrls(e,t,n){return _e(this,void 0,void 0,function*(){try{const r=yield Ee(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:t,paths:e},{headers:this.headers}),a=(null==n?void 0:n.download)?`&download=${!0===n.download?"":n.download}`:"";return{data:r.map(e=>Object.assign(Object.assign({},e),{signedUrl:e.signedURL?encodeURI(`${this.url}${e.signedURL}${a}`):null})),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}download(e,t){return _e(this,void 0,void 0,function*(){const n=void 0!==(null==t?void 0:t.transform)?"render/image/authenticated":"object",r=this.transformOptsToQueryString((null==t?void 0:t.transform)||{}),a=r?`?${r}`:"";try{const t=this._getFinalPath(e),r=yield ke(this.fetch,`${this.url}/${n}/${t}${a}`,{headers:this.headers,noResolveJson:!0});return{data:yield r.blob(),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}info(e){return _e(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{const e=yield ke(this.fetch,`${this.url}/object/info/${t}`,{headers:this.headers});return{data:be(e),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}exists(e){return _e(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{return yield function(e,t,n){return ve(this,void 0,void 0,function*(){return we(e,"HEAD",t,Object.assign(Object.assign({},n),{noResolveJson:!0}),undefined)})}(this.fetch,`${this.url}/object/${t}`,{headers:this.headers}),{data:!0,error:null}}catch(e){if(fe(e)&&e instanceof ge){const t=e.originalError;if([400,404].includes(null==t?void 0:t.status))return{data:!1,error:e}}throw e}})}getPublicUrl(e,t){const n=this._getFinalPath(e),r=[],a=(null==t?void 0:t.download)?`download=${!0===t.download?"":t.download}`:"";""!==a&&r.push(a);const i=void 0!==(null==t?void 0:t.transform)?"render/image":"object",o=this.transformOptsToQueryString((null==t?void 0:t.transform)||{});""!==o&&r.push(o);let s=r.join("&");return""!==s&&(s=`?${s}`),{data:{publicUrl:encodeURI(`${this.url}/${i}/public/${n}${s}`)}}}remove(e){return _e(this,void 0,void 0,function*(){try{return{data:yield Ce(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:e},{headers:this.headers}),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}list(e,t,n){return _e(this,void 0,void 0,function*(){try{const r=Object.assign(Object.assign(Object.assign({},xe),t),{prefix:e||""});return{data:yield Ee(this.fetch,`${this.url}/object/list/${this.bucketId}`,r,{headers:this.headers},n),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}encodeMetadata(e){return JSON.stringify(e)}toBase64(e){return"undefined"!=typeof Buffer?Buffer.from(e).toString("base64"):btoa(e)}_getFinalPath(e){return`${this.bucketId}/${e}`}_removeEmptyFolders(e){return e.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(e){const t=[];return e.width&&t.push(`width=${e.width}`),e.height&&t.push(`height=${e.height}`),e.resize&&t.push(`resize=${e.resize}`),e.format&&t.push(`format=${e.format}`),e.quality&&t.push(`quality=${e.quality}`),t.join("&")}}const Te={"X-Client-Info":"storage-js/2.7.1"};var je=function(e,t,n,r){return new(n||(n=Promise))(function(a,i){function o(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,s)}l((r=r.apply(e,t||[])).next())})};class Pe{constructor(e,t={},n){this.url=e,this.headers=Object.assign(Object.assign({},Te),t),this.fetch=me(n)}listBuckets(){return je(this,void 0,void 0,function*(){try{return{data:yield ke(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}getBucket(e){return je(this,void 0,void 0,function*(){try{return{data:yield ke(this.fetch,`${this.url}/bucket/${e}`,{headers:this.headers}),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}createBucket(e,t={public:!1}){return je(this,void 0,void 0,function*(){try{return{data:yield Ee(this.fetch,`${this.url}/bucket`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers}),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}updateBucket(e,t){return je(this,void 0,void 0,function*(){try{const n=yield function(e,t,n,r){return ve(this,void 0,void 0,function*(){return we(e,"PUT",t,r,undefined,n)})}(this.fetch,`${this.url}/bucket/${e}`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers});return{data:n,error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}emptyBucket(e){return je(this,void 0,void 0,function*(){try{return{data:yield Ee(this.fetch,`${this.url}/bucket/${e}/empty`,{},{headers:this.headers}),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}deleteBucket(e){return je(this,void 0,void 0,function*(){try{return{data:yield Ce(this.fetch,`${this.url}/bucket/${e}`,{},{headers:this.headers}),error:null}}catch(e){if(fe(e))return{data:null,error:e};throw e}})}}class Oe extends Pe{constructor(e,t={},n){super(e,t,n)}from(e){return new Be(this.url,this.headers,e,this.fetch)}}let Ie="";Ie="undefined"!=typeof Deno?"deno":"undefined"!=typeof document?"web":"undefined"!=typeof navigator&&"ReactNative"===navigator.product?"react-native":"node";const Ne={headers:{"X-Client-Info":`supabase-js-${Ie}/2.50.3`}},Re={schema:"public"},Le={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},ze={};var De=a(907);const $e=e=>{let t;return t=e||("undefined"==typeof fetch?De.default:fetch),(...e)=>t(...e)},Ue=(e,t,n)=>{const r=$e(n),a="undefined"==typeof Headers?De.Headers:Headers;return(n,i)=>{return o=void 0,s=void 0,u=function*(){var o;const s=null!==(o=yield t())&&void 0!==o?o:e;let l=new a(null==i?void 0:i.headers);return l.has("apikey")||l.set("apikey",e),l.has("Authorization")||l.set("Authorization",`Bearer ${s}`),r(n,Object.assign(Object.assign({},i),{headers:l}))},new((l=void 0)||(l=Promise))(function(e,t){function n(e){try{a(u.next(e))}catch(e){t(e)}}function r(e){try{a(u.throw(e))}catch(e){t(e)}}function a(t){var a;t.done?e(t.value):(a=t.value,a instanceof l?a:new l(function(e){e(a)})).then(n,r)}a((u=u.apply(o,s||[])).next())});var o,s,l,u}};const Me="2.70.0",Fe=3e4,qe={"X-Client-Info":`gotrue-js/${Me}`},We="X-Supabase-Api-Version",He=Date.parse("2024-01-01T00:00:00.0Z"),Ye="2024-01-01",Ve=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;class Ke extends Error{constructor(e,t,n){super(e),this.__isAuthError=!0,this.name="AuthError",this.status=t,this.code=n}}function Ge(e){return"object"==typeof e&&null!==e&&"__isAuthError"in e}class Je extends Ke{constructor(e,t,n){super(e,t,n),this.name="AuthApiError",this.status=t,this.code=n}}class Qe extends Ke{constructor(e,t){super(e),this.name="AuthUnknownError",this.originalError=t}}class Xe extends Ke{constructor(e,t,n,r){super(e,n,r),this.name=t,this.status=n}}class Ze extends Xe{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}class et extends Xe{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class tt extends Xe{constructor(e){super(e,"AuthInvalidCredentialsError",400,void 0)}}class nt extends Xe{constructor(e,t=null){super(e,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class rt extends Xe{constructor(e,t=null){super(e,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class at extends Xe{constructor(e,t){super(e,"AuthRetryableFetchError",t,void 0)}}function it(e){return Ge(e)&&"AuthRetryableFetchError"===e.name}class ot extends Xe{constructor(e,t,n){super(e,"AuthWeakPasswordError",t,"weak_password"),this.reasons=n}}class st extends Xe{constructor(e){super(e,"AuthInvalidJwtError",400,"invalid_jwt")}}const lt="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),ut=" \t\n\r=".split(""),ct=(()=>{const e=new Array(128);for(let t=0;t<e.length;t+=1)e[t]=-1;for(let t=0;t<ut.length;t+=1)e[ut[t].charCodeAt(0)]=-2;for(let t=0;t<lt.length;t+=1)e[lt[t].charCodeAt(0)]=t;return e})();function dt(e,t,n){if(null!==e)for(t.queue=t.queue<<8|e,t.queuedBits+=8;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;n(lt[e]),t.queuedBits-=6}else if(t.queuedBits>0)for(t.queue=t.queue<<6-t.queuedBits,t.queuedBits=6;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;n(lt[e]),t.queuedBits-=6}}function ht(e,t,n){const r=ct[e];if(!(r>-1)){if(-2===r)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(e)}"`)}for(t.queue=t.queue<<6|r,t.queuedBits+=6;t.queuedBits>=8;)n(t.queue>>t.queuedBits-8&255),t.queuedBits-=8}function ft(e){const t=[],n=e=>{t.push(String.fromCodePoint(e))},r={utf8seq:0,codepoint:0},a={queue:0,queuedBits:0},i=e=>{!function(e,t,n){if(0===t.utf8seq){if(e<=127)return void n(e);for(let n=1;n<6;n+=1)if(!(e>>7-n&1)){t.utf8seq=n;break}if(2===t.utf8seq)t.codepoint=31&e;else if(3===t.utf8seq)t.codepoint=15&e;else{if(4!==t.utf8seq)throw new Error("Invalid UTF-8 sequence");t.codepoint=7&e}t.utf8seq-=1}else if(t.utf8seq>0){if(e<=127)throw new Error("Invalid UTF-8 sequence");t.codepoint=t.codepoint<<6|63&e,t.utf8seq-=1,0===t.utf8seq&&n(t.codepoint)}}(e,r,n)};for(let t=0;t<e.length;t+=1)ht(e.charCodeAt(t),a,i);return t.join("")}function pt(e,t){if(!(e<=127)){if(e<=2047)return t(192|e>>6),void t(128|63&e);if(e<=65535)return t(224|e>>12),t(128|e>>6&63),void t(128|63&e);if(e<=1114111)return t(240|e>>18),t(128|e>>12&63),t(128|e>>6&63),void t(128|63&e);throw new Error(`Unrecognized Unicode codepoint: ${e.toString(16)}`)}t(e)}function gt(e){const t=[],n={queue:0,queuedBits:0},r=e=>{t.push(e)};for(let t=0;t<e.length;t+=1)ht(e.charCodeAt(t),n,r);return new Uint8Array(t)}function mt(e){const t=[],n={queue:0,queuedBits:0},r=e=>{t.push(e)};return e.forEach(e=>dt(e,n,r)),dt(null,n,r),t.join("")}const bt=()=>"undefined"!=typeof window&&"undefined"!=typeof document,vt={tested:!1,writable:!1},yt=()=>{if(!bt())return!1;try{if("object"!=typeof globalThis.localStorage)return!1}catch(e){return!1}if(vt.tested)return vt.writable;const e=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(e,e),globalThis.localStorage.removeItem(e),vt.tested=!0,vt.writable=!0}catch(e){vt.tested=!0,vt.writable=!1}return vt.writable},At=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(a.bind(a,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},wt=async(e,t,n)=>{await e.setItem(t,JSON.stringify(n))},kt=async(e,t)=>{const n=await e.getItem(t);if(!n)return null;try{return JSON.parse(n)}catch(e){return n}},Et=async(e,t)=>{await e.removeItem(t)};class Ct{constructor(){this.promise=new Ct.promiseConstructor((e,t)=>{this.resolve=e,this.reject=t})}}function _t(e){const t=e.split(".");if(3!==t.length)throw new st("Invalid JWT structure");for(let e=0;e<t.length;e++)if(!Ve.test(t[e]))throw new st("JWT not in base64url format");return{header:JSON.parse(ft(t[0])),payload:JSON.parse(ft(t[1])),signature:gt(t[2]),raw:{header:t[0],payload:t[1]}}}function xt(e){return("0"+e.toString(16)).substr(-2)}async function St(e,t,n=!1){const r=function(){const e=new Uint32Array(56);if("undefined"==typeof crypto){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",t=e.length;let n="";for(let r=0;r<56;r++)n+=e.charAt(Math.floor(Math.random()*t));return n}return crypto.getRandomValues(e),Array.from(e,xt).join("")}();let a=r;n&&(a+="/PASSWORD_RECOVERY"),await wt(e,`${t}-code-verifier`,a);const i=await async function(e){if("undefined"==typeof crypto||void 0===crypto.subtle||"undefined"==typeof TextEncoder)return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),e;const t=await async function(e){const t=(new TextEncoder).encode(e),n=await crypto.subtle.digest("SHA-256",t),r=new Uint8Array(n);return Array.from(r).map(e=>String.fromCharCode(e)).join("")}(e);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}(r);return[i,r===i?"plain":"s256"]}Ct.promiseConstructor=Promise;const Bt=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i,Tt=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function jt(e){if(!Tt.test(e))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}const Pt=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),Ot=[502,503,504];async function It(e){var t,n;if(!("object"==typeof(n=e)&&null!==n&&"status"in n&&"ok"in n&&"json"in n&&"function"==typeof n.json))throw new at(Pt(e),0);if(Ot.includes(e.status))throw new at(Pt(e),e.status);let r,a;try{r=await e.json()}catch(e){throw new Qe(Pt(e),e)}const i=function(e){const t=e.headers.get(We);if(!t)return null;if(!t.match(Bt))return null;try{return new Date(`${t}T00:00:00.0Z`)}catch(e){return null}}(e);if(i&&i.getTime()>=He&&"object"==typeof r&&r&&"string"==typeof r.code?a=r.code:"object"==typeof r&&r&&"string"==typeof r.error_code&&(a=r.error_code),a){if("weak_password"===a)throw new ot(Pt(r),e.status,(null===(t=r.weak_password)||void 0===t?void 0:t.reasons)||[]);if("session_not_found"===a)throw new Ze}else if("object"==typeof r&&r&&"object"==typeof r.weak_password&&r.weak_password&&Array.isArray(r.weak_password.reasons)&&r.weak_password.reasons.length&&r.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0))throw new ot(Pt(r),e.status,r.weak_password.reasons);throw new Je(Pt(r),e.status||500,a)}async function Nt(e,t,n,r){var a;const i=Object.assign({},null==r?void 0:r.headers);i[We]||(i[We]=Ye),(null==r?void 0:r.jwt)&&(i.Authorization=`Bearer ${r.jwt}`);const o=null!==(a=null==r?void 0:r.query)&&void 0!==a?a:{};(null==r?void 0:r.redirectTo)&&(o.redirect_to=r.redirectTo);const s=Object.keys(o).length?"?"+new URLSearchParams(o).toString():"",l=await async function(e,t,n,r,a,i){const o=((e,t,n,r)=>{const a={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?a:(a.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},null==t?void 0:t.headers),a.body=JSON.stringify(r),Object.assign(Object.assign({},a),n))})(t,r,{},i);let s;try{s=await e(n,Object.assign({},o))}catch(e){throw console.error(e),new at(Pt(e),0)}if(s.ok||await It(s),null==r?void 0:r.noResolveJson)return s;try{return await s.json()}catch(e){await It(e)}}(e,t,n+s,{headers:i,noResolveJson:null==r?void 0:r.noResolveJson},0,null==r?void 0:r.body);return(null==r?void 0:r.xform)?null==r?void 0:r.xform(l):{data:Object.assign({},l),error:null}}function Rt(e){var t;let n=null;var r;return function(e){return e.access_token&&e.refresh_token&&e.expires_in}(e)&&(n=Object.assign({},e),e.expires_at||(n.expires_at=(r=e.expires_in,Math.round(Date.now()/1e3)+r))),{data:{session:n,user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function Lt(e){const t=Rt(e);return!t.error&&e.weak_password&&"object"==typeof e.weak_password&&Array.isArray(e.weak_password.reasons)&&e.weak_password.reasons.length&&e.weak_password.message&&"string"==typeof e.weak_password.message&&e.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0)&&(t.data.weak_password=e.weak_password),t}function zt(e){var t;return{data:{user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function Dt(e){return{data:e,error:null}}function $t(e){const{action_link:t,email_otp:n,hashed_token:r,redirect_to:a,verification_type:i}=e,o=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(e,["action_link","email_otp","hashed_token","redirect_to","verification_type"]);return{data:{properties:{action_link:t,email_otp:n,hashed_token:r,redirect_to:a,verification_type:i},user:Object.assign({},o)},error:null}}function Ut(e){return e}const Mt=["global","local","others"];class Ft{constructor({url:e="",headers:t={},fetch:n}){this.url=e,this.headers=t,this.fetch=At(n),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(e,t=Mt[0]){if(Mt.indexOf(t)<0)throw new Error(`@supabase/auth-js: Parameter scope must be one of ${Mt.join(", ")}`);try{return await Nt(this.fetch,"POST",`${this.url}/logout?scope=${t}`,{headers:this.headers,jwt:e,noResolveJson:!0}),{data:null,error:null}}catch(e){if(Ge(e))return{data:null,error:e};throw e}}async inviteUserByEmail(e,t={}){try{return await Nt(this.fetch,"POST",`${this.url}/invite`,{body:{email:e,data:t.data},headers:this.headers,redirectTo:t.redirectTo,xform:zt})}catch(e){if(Ge(e))return{data:{user:null},error:e};throw e}}async generateLink(e){try{const{options:t}=e,n=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(e,["options"]),r=Object.assign(Object.assign({},n),t);return"newEmail"in n&&(r.new_email=null==n?void 0:n.newEmail,delete r.newEmail),await Nt(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:r,headers:this.headers,xform:$t,redirectTo:null==t?void 0:t.redirectTo})}catch(e){if(Ge(e))return{data:{properties:null,user:null},error:e};throw e}}async createUser(e){try{return await Nt(this.fetch,"POST",`${this.url}/admin/users`,{body:e,headers:this.headers,xform:zt})}catch(e){if(Ge(e))return{data:{user:null},error:e};throw e}}async listUsers(e){var t,n,r,a,i,o,s;try{const l={nextPage:null,lastPage:0,total:0},u=await Nt(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:null!==(n=null===(t=null==e?void 0:e.page)||void 0===t?void 0:t.toString())&&void 0!==n?n:"",per_page:null!==(a=null===(r=null==e?void 0:e.perPage)||void 0===r?void 0:r.toString())&&void 0!==a?a:""},xform:Ut});if(u.error)throw u.error;const c=await u.json(),d=null!==(i=u.headers.get("x-total-count"))&&void 0!==i?i:0,h=null!==(s=null===(o=u.headers.get("link"))||void 0===o?void 0:o.split(","))&&void 0!==s?s:[];return h.length>0&&(h.forEach(e=>{const t=parseInt(e.split(";")[0].split("=")[1].substring(0,1)),n=JSON.parse(e.split(";")[1].split("=")[1]);l[`${n}Page`]=t}),l.total=parseInt(d)),{data:Object.assign(Object.assign({},c),l),error:null}}catch(e){if(Ge(e))return{data:{users:[]},error:e};throw e}}async getUserById(e){jt(e);try{return await Nt(this.fetch,"GET",`${this.url}/admin/users/${e}`,{headers:this.headers,xform:zt})}catch(e){if(Ge(e))return{data:{user:null},error:e};throw e}}async updateUserById(e,t){jt(e);try{return await Nt(this.fetch,"PUT",`${this.url}/admin/users/${e}`,{body:t,headers:this.headers,xform:zt})}catch(e){if(Ge(e))return{data:{user:null},error:e};throw e}}async deleteUser(e,t=!1){jt(e);try{return await Nt(this.fetch,"DELETE",`${this.url}/admin/users/${e}`,{headers:this.headers,body:{should_soft_delete:t},xform:zt})}catch(e){if(Ge(e))return{data:{user:null},error:e};throw e}}async _listFactors(e){jt(e.userId);try{const{data:t,error:n}=await Nt(this.fetch,"GET",`${this.url}/admin/users/${e.userId}/factors`,{headers:this.headers,xform:e=>({data:{factors:e},error:null})});return{data:t,error:n}}catch(e){if(Ge(e))return{data:null,error:e};throw e}}async _deleteFactor(e){jt(e.userId),jt(e.id);try{return{data:await Nt(this.fetch,"DELETE",`${this.url}/admin/users/${e.userId}/factors/${e.id}`,{headers:this.headers}),error:null}}catch(e){if(Ge(e))return{data:null,error:e};throw e}}}const qt={getItem:e=>yt()?globalThis.localStorage.getItem(e):null,setItem:(e,t)=>{yt()&&globalThis.localStorage.setItem(e,t)},removeItem:e=>{yt()&&globalThis.localStorage.removeItem(e)}};function Wt(e={}){return{getItem:t=>e[t]||null,setItem:(t,n)=>{e[t]=n},removeItem:t=>{delete e[t]}}}const Ht=!!(globalThis&&yt()&&globalThis.localStorage&&"true"===globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug"));class Yt extends Error{constructor(e){super(e),this.isAcquireTimeout=!0}}class Vt extends Yt{}async function Kt(e,t,n){Ht&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",e,t);const r=new globalThis.AbortController;return t>0&&setTimeout(()=>{r.abort(),Ht&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",e)},t),await Promise.resolve().then(()=>globalThis.navigator.locks.request(e,0===t?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:r.signal},async r=>{if(!r){if(0===t)throw Ht&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",e),new Vt(`Acquiring an exclusive Navigator LockManager lock "${e}" immediately failed`);if(Ht)try{const e=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(e,null,"  "))}catch(e){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",e)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await n()}Ht&&console.log("@supabase/gotrue-js: navigatorLock: acquired",e,r.name);try{return await n()}finally{Ht&&console.log("@supabase/gotrue-js: navigatorLock: released",e,r.name)}}))}!function(){if("object"!=typeof globalThis)try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch(e){"undefined"!=typeof self&&(self.globalThis=self)}}();const Gt={url:"http://localhost:9999",storageKey:"supabase.auth.token",autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:qe,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function Jt(e,t,n){return await n()}class Qt{constructor(e){var t,n;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=Qt.nextInstanceID,Qt.nextInstanceID+=1,this.instanceID>0&&bt()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const r=Object.assign(Object.assign({},Gt),e);if(this.logDebugMessages=!!r.debug,"function"==typeof r.debug&&(this.logger=r.debug),this.persistSession=r.persistSession,this.storageKey=r.storageKey,this.autoRefreshToken=r.autoRefreshToken,this.admin=new Ft({url:r.url,headers:r.headers,fetch:r.fetch}),this.url=r.url,this.headers=r.headers,this.fetch=At(r.fetch),this.lock=r.lock||Jt,this.detectSessionInUrl=r.detectSessionInUrl,this.flowType=r.flowType,this.hasCustomAuthorizationHeader=r.hasCustomAuthorizationHeader,r.lock?this.lock=r.lock:bt()&&(null===(t=null===globalThis||void 0===globalThis?void 0:globalThis.navigator)||void 0===t?void 0:t.locks)?this.lock=Kt:this.lock=Jt,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?r.storage?this.storage=r.storage:yt()?this.storage=qt:(this.memoryStorage={},this.storage=Wt(this.memoryStorage)):(this.memoryStorage={},this.storage=Wt(this.memoryStorage)),bt()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(e){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",e)}null===(n=this.broadcastChannel)||void 0===n||n.addEventListener("message",async e=>{this._debug("received broadcast notification from other tab or client",e),await this._notifyAllSubscribers(e.data.event,e.data.session,!1)})}this.initialize()}_debug(...e){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${Me}) ${(new Date).toISOString()}`,...e),this}async initialize(){return this.initializePromise||(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))()),await this.initializePromise}async _initialize(){var e;try{const t=function(e){const t={},n=new URL(e);if(n.hash&&"#"===n.hash[0])try{new URLSearchParams(n.hash.substring(1)).forEach((e,n)=>{t[n]=e})}catch(e){}return n.searchParams.forEach((e,n)=>{t[n]=e}),t}(window.location.href);let n="none";if(this._isImplicitGrantCallback(t)?n="implicit":await this._isPKCECallback(t)&&(n="pkce"),bt()&&this.detectSessionInUrl&&"none"!==n){const{data:r,error:a}=await this._getSessionFromURL(t,n);if(a){if(this._debug("#_initialize()","error detecting session from URL",a),function(e){return Ge(e)&&"AuthImplicitGrantRedirectError"===e.name}(a)){const t=null===(e=a.details)||void 0===e?void 0:e.code;if("identity_already_exists"===t||"identity_not_found"===t||"single_identity_not_deletable"===t)return{error:a}}return await this._removeSession(),{error:a}}const{session:i,redirectType:o}=r;return this._debug("#_initialize()","detected session in URL",i,"redirect type",o),await this._saveSession(i),setTimeout(async()=>{"recovery"===o?await this._notifyAllSubscribers("PASSWORD_RECOVERY",i):await this._notifyAllSubscribers("SIGNED_IN",i)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(e){return Ge(e)?{error:e}:{error:new Qe("Unexpected error during initialization",e)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(e){var t,n,r;try{const a=await Nt(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:null!==(n=null===(t=null==e?void 0:e.options)||void 0===t?void 0:t.data)&&void 0!==n?n:{},gotrue_meta_security:{captcha_token:null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken}},xform:Rt}),{data:i,error:o}=a;if(o||!i)return{data:{user:null,session:null},error:o};const s=i.session,l=i.user;return i.session&&(await this._saveSession(i.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async signUp(e){var t,n,r;try{let a;if("email"in e){const{email:n,password:r,options:i}=e;let o=null,s=null;"pkce"===this.flowType&&([o,s]=await St(this.storage,this.storageKey)),a=await Nt(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:null==i?void 0:i.emailRedirectTo,body:{email:n,password:r,data:null!==(t=null==i?void 0:i.data)&&void 0!==t?t:{},gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken},code_challenge:o,code_challenge_method:s},xform:Rt})}else{if(!("phone"in e))throw new tt("You must provide either an email or phone number and a password");{const{phone:t,password:i,options:o}=e;a=await Nt(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:t,password:i,data:null!==(n=null==o?void 0:o.data)&&void 0!==n?n:{},channel:null!==(r=null==o?void 0:o.channel)&&void 0!==r?r:"sms",gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:Rt})}}const{data:i,error:o}=a;if(o||!i)return{data:{user:null,session:null},error:o};const s=i.session,l=i.user;return i.session&&(await this._saveSession(i.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithPassword(e){try{let t;if("email"in e){const{email:n,password:r,options:a}=e;t=await Nt(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:n,password:r,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}},xform:Lt})}else{if(!("phone"in e))throw new tt("You must provide either an email or phone number and a password");{const{phone:n,password:r,options:a}=e;t=await Nt(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:n,password:r,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}},xform:Lt})}}const{data:n,error:r}=t;return r?{data:{user:null,session:null},error:r}:n&&n.session&&n.user?(n.session&&(await this._saveSession(n.session),await this._notifyAllSubscribers("SIGNED_IN",n.session)),{data:Object.assign({user:n.user,session:n.session},n.weak_password?{weakPassword:n.weak_password}:null),error:r}):{data:{user:null,session:null},error:new et}}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOAuth(e){var t,n,r,a;return await this._handleProviderSignIn(e.provider,{redirectTo:null===(t=e.options)||void 0===t?void 0:t.redirectTo,scopes:null===(n=e.options)||void 0===n?void 0:n.scopes,queryParams:null===(r=e.options)||void 0===r?void 0:r.queryParams,skipBrowserRedirect:null===(a=e.options)||void 0===a?void 0:a.skipBrowserRedirect})}async exchangeCodeForSession(e){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(e))}async signInWithWeb3(e){const{chain:t}=e;if("solana"===t)return await this.signInWithSolana(e);throw new Error(`@supabase/auth-js: Unsupported chain "${t}"`)}async signInWithSolana(e){var t,n,r,a,i,o,s,l,u,c,d,h;let f,p;if("message"in e)f=e.message,p=e.signature;else{const{chain:d,wallet:h,statement:g,options:m}=e;let b;if(bt())if("object"==typeof h)b=h;else{const e=window;if(!("solana"in e)||"object"!=typeof e.solana||!("signIn"in e.solana&&"function"==typeof e.solana.signIn||"signMessage"in e.solana&&"function"==typeof e.solana.signMessage))throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");b=e.solana}else{if("object"!=typeof h||!(null==m?void 0:m.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");b=h}const v=new URL(null!==(t=null==m?void 0:m.url)&&void 0!==t?t:window.location.href);if("signIn"in b&&b.signIn){const e=await b.signIn(Object.assign(Object.assign(Object.assign({issuedAt:(new Date).toISOString()},null==m?void 0:m.signInWithSolana),{version:"1",domain:v.host,uri:v.href}),g?{statement:g}:null));let t;if(Array.isArray(e)&&e[0]&&"object"==typeof e[0])t=e[0];else{if(!(e&&"object"==typeof e&&"signedMessage"in e&&"signature"in e))throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");t=e}if(!("signedMessage"in t&&"signature"in t&&("string"==typeof t.signedMessage||t.signedMessage instanceof Uint8Array)&&t.signature instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");f="string"==typeof t.signedMessage?t.signedMessage:(new TextDecoder).decode(t.signedMessage),p=t.signature}else{if(!("signMessage"in b&&"function"==typeof b.signMessage&&"publicKey"in b&&"object"==typeof b&&b.publicKey&&"toBase58"in b.publicKey&&"function"==typeof b.publicKey.toBase58))throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");f=[`${v.host} wants you to sign in with your Solana account:`,b.publicKey.toBase58(),...g?["",g,""]:[""],"Version: 1",`URI: ${v.href}`,`Issued At: ${null!==(r=null===(n=null==m?void 0:m.signInWithSolana)||void 0===n?void 0:n.issuedAt)&&void 0!==r?r:(new Date).toISOString()}`,...(null===(a=null==m?void 0:m.signInWithSolana)||void 0===a?void 0:a.notBefore)?[`Not Before: ${m.signInWithSolana.notBefore}`]:[],...(null===(i=null==m?void 0:m.signInWithSolana)||void 0===i?void 0:i.expirationTime)?[`Expiration Time: ${m.signInWithSolana.expirationTime}`]:[],...(null===(o=null==m?void 0:m.signInWithSolana)||void 0===o?void 0:o.chainId)?[`Chain ID: ${m.signInWithSolana.chainId}`]:[],...(null===(s=null==m?void 0:m.signInWithSolana)||void 0===s?void 0:s.nonce)?[`Nonce: ${m.signInWithSolana.nonce}`]:[],...(null===(l=null==m?void 0:m.signInWithSolana)||void 0===l?void 0:l.requestId)?[`Request ID: ${m.signInWithSolana.requestId}`]:[],...(null===(c=null===(u=null==m?void 0:m.signInWithSolana)||void 0===u?void 0:u.resources)||void 0===c?void 0:c.length)?["Resources",...m.signInWithSolana.resources.map(e=>`- ${e}`)]:[]].join("\n");const e=await b.signMessage((new TextEncoder).encode(f),"utf8");if(!(e&&e instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");p=e}}try{const{data:t,error:n}=await Nt(this.fetch,"POST",`${this.url}/token?grant_type=web3`,{headers:this.headers,body:Object.assign({chain:"solana",message:f,signature:mt(p)},(null===(d=e.options)||void 0===d?void 0:d.captchaToken)?{gotrue_meta_security:{captcha_token:null===(h=e.options)||void 0===h?void 0:h.captchaToken}}:null),xform:Rt});if(n)throw n;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign({},t),error:n}):{data:{user:null,session:null},error:new et}}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async _exchangeCodeForSession(e){const t=await kt(this.storage,`${this.storageKey}-code-verifier`),[n,r]=(null!=t?t:"").split("/");try{const{data:t,error:a}=await Nt(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:e,code_verifier:n},xform:Rt});if(await Et(this.storage,`${this.storageKey}-code-verifier`),a)throw a;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign(Object.assign({},t),{redirectType:null!=r?r:null}),error:a}):{data:{user:null,session:null,redirectType:null},error:new et}}catch(e){if(Ge(e))return{data:{user:null,session:null,redirectType:null},error:e};throw e}}async signInWithIdToken(e){try{const{options:t,provider:n,token:r,access_token:a,nonce:i}=e,o=await Nt(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:n,id_token:r,access_token:a,nonce:i,gotrue_meta_security:{captcha_token:null==t?void 0:t.captchaToken}},xform:Rt}),{data:s,error:l}=o;return l?{data:{user:null,session:null},error:l}:s&&s.session&&s.user?(s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",s.session)),{data:s,error:l}):{data:{user:null,session:null},error:new et}}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOtp(e){var t,n,r,a,i;try{if("email"in e){const{email:r,options:a}=e;let i=null,o=null;"pkce"===this.flowType&&([i,o]=await St(this.storage,this.storageKey));const{error:s}=await Nt(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:r,data:null!==(t=null==a?void 0:a.data)&&void 0!==t?t:{},create_user:null===(n=null==a?void 0:a.shouldCreateUser)||void 0===n||n,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken},code_challenge:i,code_challenge_method:o},redirectTo:null==a?void 0:a.emailRedirectTo});return{data:{user:null,session:null},error:s}}if("phone"in e){const{phone:t,options:n}=e,{data:o,error:s}=await Nt(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:t,data:null!==(r=null==n?void 0:n.data)&&void 0!==r?r:{},create_user:null===(a=null==n?void 0:n.shouldCreateUser)||void 0===a||a,gotrue_meta_security:{captcha_token:null==n?void 0:n.captchaToken},channel:null!==(i=null==n?void 0:n.channel)&&void 0!==i?i:"sms"}});return{data:{user:null,session:null,messageId:null==o?void 0:o.message_id},error:s}}throw new tt("You must provide either an email or phone number.")}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async verifyOtp(e){var t,n;try{let r,a;"options"in e&&(r=null===(t=e.options)||void 0===t?void 0:t.redirectTo,a=null===(n=e.options)||void 0===n?void 0:n.captchaToken);const{data:i,error:o}=await Nt(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},e),{gotrue_meta_security:{captcha_token:a}}),redirectTo:r,xform:Rt});if(o)throw o;if(!i)throw new Error("An error occurred on token verification.");const s=i.session,l=i.user;return(null==s?void 0:s.access_token)&&(await this._saveSession(s),await this._notifyAllSubscribers("recovery"==e.type?"PASSWORD_RECOVERY":"SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithSSO(e){var t,n,r;try{let a=null,i=null;return"pkce"===this.flowType&&([a,i]=await St(this.storage,this.storageKey)),await Nt(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in e?{provider_id:e.providerId}:null),"domain"in e?{domain:e.domain}:null),{redirect_to:null!==(n=null===(t=e.options)||void 0===t?void 0:t.redirectTo)&&void 0!==n?n:void 0}),(null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken)?{gotrue_meta_security:{captcha_token:e.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:a,code_challenge_method:i}),headers:this.headers,xform:Dt})}catch(e){if(Ge(e))return{data:null,error:e};throw e}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async e=>{const{data:{session:t},error:n}=e;if(n)throw n;if(!t)throw new Ze;const{error:r}=await Nt(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:t.access_token});return{data:{user:null,session:null},error:r}})}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async resend(e){try{const t=`${this.url}/resend`;if("email"in e){const{email:n,type:r,options:a}=e,{error:i}=await Nt(this.fetch,"POST",t,{headers:this.headers,body:{email:n,type:r,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}},redirectTo:null==a?void 0:a.emailRedirectTo});return{data:{user:null,session:null},error:i}}if("phone"in e){const{phone:n,type:r,options:a}=e,{data:i,error:o}=await Nt(this.fetch,"POST",t,{headers:this.headers,body:{phone:n,type:r,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}}});return{data:{user:null,session:null,messageId:null==i?void 0:i.message_id},error:o}}throw new tt("You must provide either an email or phone number and a type")}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async e=>e))}async _acquireLock(e,t){this._debug("#_acquireLock","begin",e);try{if(this.lockAcquired){const e=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),n=(async()=>(await e,await t()))();return this.pendingInLock.push((async()=>{try{await n}catch(e){}})()),n}return await this.lock(`lock:${this.storageKey}`,e,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const e=t();for(this.pendingInLock.push((async()=>{try{await e}catch(e){}})()),await e;this.pendingInLock.length;){const e=[...this.pendingInLock];await Promise.all(e),this.pendingInLock.splice(0,e.length)}return await e}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(e){this._debug("#_useSession","begin");try{const t=await this.__loadSession();return await e(t)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",(new Error).stack);try{let e=null;const t=await kt(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",t),null!==t&&(this._isValidSession(t)?e=t:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!e)return{data:{session:null},error:null};const n=!!e.expires_at&&1e3*e.expires_at-Date.now()<9e4;if(this._debug("#__loadSession()",`session has${n?"":" not"} expired`,"expires_at",e.expires_at),!n){if(this.storage.isServer){let t=this.suppressGetSessionWarning;e=new Proxy(e,{get:(e,n,r)=>(t||"user"!==n||(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),t=!0,this.suppressGetSessionWarning=!0),Reflect.get(e,n,r))})}return{data:{session:e},error:null}}const{session:r,error:a}=await this._callRefreshToken(e.refresh_token);return a?{data:{session:null},error:a}:{data:{session:r},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(e){return e?await this._getUser(e):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(e){try{return e?await Nt(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:e,xform:zt}):await this._useSession(async e=>{var t,n,r;const{data:a,error:i}=e;if(i)throw i;return(null===(t=a.session)||void 0===t?void 0:t.access_token)||this.hasCustomAuthorizationHeader?await Nt(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:null!==(r=null===(n=a.session)||void 0===n?void 0:n.access_token)&&void 0!==r?r:void 0,xform:zt}):{data:{user:null},error:new Ze}})}catch(e){if(Ge(e))return function(e){return Ge(e)&&"AuthSessionMissingError"===e.name}(e)&&(await this._removeSession(),await Et(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:e};throw e}}async updateUser(e,t={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(e,t))}async _updateUser(e,t={}){try{return await this._useSession(async n=>{const{data:r,error:a}=n;if(a)throw a;if(!r.session)throw new Ze;const i=r.session;let o=null,s=null;"pkce"===this.flowType&&null!=e.email&&([o,s]=await St(this.storage,this.storageKey));const{data:l,error:u}=await Nt(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:null==t?void 0:t.emailRedirectTo,body:Object.assign(Object.assign({},e),{code_challenge:o,code_challenge_method:s}),jwt:i.access_token,xform:zt});if(u)throw u;return i.user=l.user,await this._saveSession(i),await this._notifyAllSubscribers("USER_UPDATED",i),{data:{user:i.user},error:null}})}catch(e){if(Ge(e))return{data:{user:null},error:e};throw e}}async setSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(e))}async _setSession(e){try{if(!e.access_token||!e.refresh_token)throw new Ze;const t=Date.now()/1e3;let n=t,r=!0,a=null;const{payload:i}=_t(e.access_token);if(i.exp&&(n=i.exp,r=n<=t),r){const{session:t,error:n}=await this._callRefreshToken(e.refresh_token);if(n)return{data:{user:null,session:null},error:n};if(!t)return{data:{user:null,session:null},error:null};a=t}else{const{data:r,error:i}=await this._getUser(e.access_token);if(i)throw i;a={access_token:e.access_token,refresh_token:e.refresh_token,user:r.user,token_type:"bearer",expires_in:n-t,expires_at:n},await this._saveSession(a),await this._notifyAllSubscribers("SIGNED_IN",a)}return{data:{user:a.user,session:a},error:null}}catch(e){if(Ge(e))return{data:{session:null,user:null},error:e};throw e}}async refreshSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(e))}async _refreshSession(e){try{return await this._useSession(async t=>{var n;if(!e){const{data:r,error:a}=t;if(a)throw a;e=null!==(n=r.session)&&void 0!==n?n:void 0}if(!(null==e?void 0:e.refresh_token))throw new Ze;const{session:r,error:a}=await this._callRefreshToken(e.refresh_token);return a?{data:{user:null,session:null},error:a}:r?{data:{user:r.user,session:r},error:null}:{data:{user:null,session:null},error:null}})}catch(e){if(Ge(e))return{data:{user:null,session:null},error:e};throw e}}async _getSessionFromURL(e,t){try{if(!bt())throw new nt("No browser detected.");if(e.error||e.error_description||e.error_code)throw new nt(e.error_description||"Error in URL with unspecified error_description",{error:e.error||"unspecified_error",code:e.error_code||"unspecified_code"});switch(t){case"implicit":if("pkce"===this.flowType)throw new rt("Not a valid PKCE flow url.");break;case"pkce":if("implicit"===this.flowType)throw new nt("Not a valid implicit grant flow url.")}if("pkce"===t){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!e.code)throw new rt("No code detected.");const{data:t,error:n}=await this._exchangeCodeForSession(e.code);if(n)throw n;const r=new URL(window.location.href);return r.searchParams.delete("code"),window.history.replaceState(window.history.state,"",r.toString()),{data:{session:t.session,redirectType:null},error:null}}const{provider_token:n,provider_refresh_token:r,access_token:a,refresh_token:i,expires_in:o,expires_at:s,token_type:l}=e;if(!(a&&o&&i&&l))throw new nt("No session defined in URL");const u=Math.round(Date.now()/1e3),c=parseInt(o);let d=u+c;s&&(d=parseInt(s));const h=d-u;1e3*h<=Fe&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${h}s, should have been closer to ${c}s`);const f=d-c;u-f>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",f,d,u):u-f<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",f,d,u);const{data:p,error:g}=await this._getUser(a);if(g)throw g;const m={provider_token:n,provider_refresh_token:r,access_token:a,expires_in:c,expires_at:d,refresh_token:i,token_type:l,user:p.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:m,redirectType:e.type},error:null}}catch(e){if(Ge(e))return{data:{session:null,redirectType:null},error:e};throw e}}_isImplicitGrantCallback(e){return Boolean(e.access_token||e.error_description)}async _isPKCECallback(e){const t=await kt(this.storage,`${this.storageKey}-code-verifier`);return!(!e.code||!t)}async signOut(e={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(e))}async _signOut({scope:e}={scope:"global"}){return await this._useSession(async t=>{var n;const{data:r,error:a}=t;if(a)return{error:a};const i=null===(n=r.session)||void 0===n?void 0:n.access_token;if(i){const{error:t}=await this.admin.signOut(i,e);if(t&&(!function(e){return Ge(e)&&"AuthApiError"===e.name}(t)||404!==t.status&&401!==t.status&&403!==t.status))return{error:t}}return"others"!==e&&(await this._removeSession(),await Et(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(e){const t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}),n={id:t,callback:e,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",t),this.stateChangeEmitters.delete(t)}};return this._debug("#onAuthStateChange()","registered callback with id",t),this.stateChangeEmitters.set(t,n),(async()=>{await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(t)})})(),{data:{subscription:n}}}async _emitInitialSession(e){return await this._useSession(async t=>{var n,r;try{const{data:{session:r},error:a}=t;if(a)throw a;await(null===(n=this.stateChangeEmitters.get(e))||void 0===n?void 0:n.callback("INITIAL_SESSION",r)),this._debug("INITIAL_SESSION","callback id",e,"session",r)}catch(t){await(null===(r=this.stateChangeEmitters.get(e))||void 0===r?void 0:r.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",e,"error",t),console.error(t)}})}async resetPasswordForEmail(e,t={}){let n=null,r=null;"pkce"===this.flowType&&([n,r]=await St(this.storage,this.storageKey,!0));try{return await Nt(this.fetch,"POST",`${this.url}/recover`,{body:{email:e,code_challenge:n,code_challenge_method:r,gotrue_meta_security:{captcha_token:t.captchaToken}},headers:this.headers,redirectTo:t.redirectTo})}catch(e){if(Ge(e))return{data:null,error:e};throw e}}async getUserIdentities(){var e;try{const{data:t,error:n}=await this.getUser();if(n)throw n;return{data:{identities:null!==(e=t.user.identities)&&void 0!==e?e:[]},error:null}}catch(e){if(Ge(e))return{data:null,error:e};throw e}}async linkIdentity(e){var t;try{const{data:n,error:r}=await this._useSession(async t=>{var n,r,a,i,o;const{data:s,error:l}=t;if(l)throw l;const u=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,e.provider,{redirectTo:null===(n=e.options)||void 0===n?void 0:n.redirectTo,scopes:null===(r=e.options)||void 0===r?void 0:r.scopes,queryParams:null===(a=e.options)||void 0===a?void 0:a.queryParams,skipBrowserRedirect:!0});return await Nt(this.fetch,"GET",u,{headers:this.headers,jwt:null!==(o=null===(i=s.session)||void 0===i?void 0:i.access_token)&&void 0!==o?o:void 0})});if(r)throw r;return bt()&&!(null===(t=e.options)||void 0===t?void 0:t.skipBrowserRedirect)&&window.location.assign(null==n?void 0:n.url),{data:{provider:e.provider,url:null==n?void 0:n.url},error:null}}catch(t){if(Ge(t))return{data:{provider:e.provider,url:null},error:t};throw t}}async unlinkIdentity(e){try{return await this._useSession(async t=>{var n,r;const{data:a,error:i}=t;if(i)throw i;return await Nt(this.fetch,"DELETE",`${this.url}/user/identities/${e.identity_id}`,{headers:this.headers,jwt:null!==(r=null===(n=a.session)||void 0===n?void 0:n.access_token)&&void 0!==r?r:void 0})})}catch(e){if(Ge(e))return{data:null,error:e};throw e}}async _refreshAccessToken(e){const t=`#_refreshAccessToken(${e.substring(0,5)}...)`;this._debug(t,"begin");try{const a=Date.now();return await(n=async n=>(n>0&&await async function(e){return await new Promise(t=>{setTimeout(()=>t(null),e)})}(200*Math.pow(2,n-1)),this._debug(t,"refreshing attempt",n),await Nt(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:e},headers:this.headers,xform:Rt})),r=(e,t)=>{const n=200*Math.pow(2,e);return t&&it(t)&&Date.now()+n-a<Fe},new Promise((e,t)=>{(async()=>{for(let a=0;a<1/0;a++)try{const t=await n(a);if(!r(a,null))return void e(t)}catch(e){if(!r(a,e))return void t(e)}})()}))}catch(e){if(this._debug(t,"error",e),Ge(e))return{data:{session:null,user:null},error:e};throw e}finally{this._debug(t,"end")}var n,r}_isValidSession(e){return"object"==typeof e&&null!==e&&"access_token"in e&&"refresh_token"in e&&"expires_at"in e}async _handleProviderSignIn(e,t){const n=await this._getUrlForProvider(`${this.url}/authorize`,e,{redirectTo:t.redirectTo,scopes:t.scopes,queryParams:t.queryParams});return this._debug("#_handleProviderSignIn()","provider",e,"options",t,"url",n),bt()&&!t.skipBrowserRedirect&&window.location.assign(n),{data:{provider:e,url:n},error:null}}async _recoverAndRefresh(){var e;const t="#_recoverAndRefresh()";this._debug(t,"begin");try{const n=await kt(this.storage,this.storageKey);if(this._debug(t,"session from storage",n),!this._isValidSession(n))return this._debug(t,"session is not valid"),void(null!==n&&await this._removeSession());const r=1e3*(null!==(e=n.expires_at)&&void 0!==e?e:1/0)-Date.now()<9e4;if(this._debug(t,`session has${r?"":" not"} expired with margin of 90000s`),r){if(this.autoRefreshToken&&n.refresh_token){const{error:e}=await this._callRefreshToken(n.refresh_token);e&&(console.error(e),it(e)||(this._debug(t,"refresh failed with a non-retryable error, removing the session",e),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",n)}catch(e){return this._debug(t,"error",e),void console.error(e)}finally{this._debug(t,"end")}}async _callRefreshToken(e){var t,n;if(!e)throw new Ze;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const r=`#_callRefreshToken(${e.substring(0,5)}...)`;this._debug(r,"begin");try{this.refreshingDeferred=new Ct;const{data:t,error:n}=await this._refreshAccessToken(e);if(n)throw n;if(!t.session)throw new Ze;await this._saveSession(t.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",t.session);const r={session:t.session,error:null};return this.refreshingDeferred.resolve(r),r}catch(e){if(this._debug(r,"error",e),Ge(e)){const n={session:null,error:e};return it(e)||await this._removeSession(),null===(t=this.refreshingDeferred)||void 0===t||t.resolve(n),n}throw null===(n=this.refreshingDeferred)||void 0===n||n.reject(e),e}finally{this.refreshingDeferred=null,this._debug(r,"end")}}async _notifyAllSubscribers(e,t,n=!0){const r=`#_notifyAllSubscribers(${e})`;this._debug(r,"begin",t,`broadcast = ${n}`);try{this.broadcastChannel&&n&&this.broadcastChannel.postMessage({event:e,session:t});const r=[],a=Array.from(this.stateChangeEmitters.values()).map(async n=>{try{await n.callback(e,t)}catch(e){r.push(e)}});if(await Promise.all(a),r.length>0){for(let e=0;e<r.length;e+=1)console.error(r[e]);throw r[0]}}finally{this._debug(r,"end")}}async _saveSession(e){this._debug("#_saveSession()",e),this.suppressGetSessionWarning=!0,await wt(this.storage,this.storageKey,e)}async _removeSession(){this._debug("#_removeSession()"),await Et(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const e=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{e&&bt()&&(null===window||void 0===window?void 0:window.removeEventListener)&&window.removeEventListener("visibilitychange",e)}catch(e){console.error("removing visibilitychange callback failed",e)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const e=setInterval(()=>this._autoRefreshTokenTick(),Fe);this.autoRefreshTicker=e,e&&"object"==typeof e&&"function"==typeof e.unref?e.unref():"undefined"!=typeof Deno&&"function"==typeof Deno.unrefTimer&&Deno.unrefTimer(e),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const e=this.autoRefreshTicker;this.autoRefreshTicker=null,e&&clearInterval(e)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const e=Date.now();try{return await this._useSession(async t=>{const{data:{session:n}}=t;if(!n||!n.refresh_token||!n.expires_at)return void this._debug("#_autoRefreshTokenTick()","no session");const r=Math.floor((1e3*n.expires_at-e)/Fe);this._debug("#_autoRefreshTokenTick()",`access token expires in ${r} ticks, a tick lasts 30000ms, refresh threshold is 3 ticks`),r<=3&&await this._callRefreshToken(n.refresh_token)})}catch(e){console.error("Auto refresh tick failed with error. This is likely a transient error.",e)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(e){if(!(e.isAcquireTimeout||e instanceof Yt))throw e;this._debug("auto refresh token tick lock not available")}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!bt()||!(null===window||void 0===window?void 0:window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),null===window||void 0===window||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(e){console.error("_handleVisibilityChange",e)}}async _onVisibilityChanged(e){const t=`#_onVisibilityChanged(${e})`;this._debug(t,"visibilityState",document.visibilityState),"visible"===document.visibilityState?(this.autoRefreshToken&&this._startAutoRefresh(),e||(await this.initializePromise,await this._acquireLock(-1,async()=>{"visible"===document.visibilityState?await this._recoverAndRefresh():this._debug(t,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting")}))):"hidden"===document.visibilityState&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(e,t,n){const r=[`provider=${encodeURIComponent(t)}`];if((null==n?void 0:n.redirectTo)&&r.push(`redirect_to=${encodeURIComponent(n.redirectTo)}`),(null==n?void 0:n.scopes)&&r.push(`scopes=${encodeURIComponent(n.scopes)}`),"pkce"===this.flowType){const[e,t]=await St(this.storage,this.storageKey),n=new URLSearchParams({code_challenge:`${encodeURIComponent(e)}`,code_challenge_method:`${encodeURIComponent(t)}`});r.push(n.toString())}if(null==n?void 0:n.queryParams){const e=new URLSearchParams(n.queryParams);r.push(e.toString())}return(null==n?void 0:n.skipBrowserRedirect)&&r.push(`skip_http_redirect=${n.skipBrowserRedirect}`),`${e}?${r.join("&")}`}async _unenroll(e){try{return await this._useSession(async t=>{var n;const{data:r,error:a}=t;return a?{data:null,error:a}:await Nt(this.fetch,"DELETE",`${this.url}/factors/${e.factorId}`,{headers:this.headers,jwt:null===(n=null==r?void 0:r.session)||void 0===n?void 0:n.access_token})})}catch(e){if(Ge(e))return{data:null,error:e};throw e}}async _enroll(e){try{return await this._useSession(async t=>{var n,r;const{data:a,error:i}=t;if(i)return{data:null,error:i};const o=Object.assign({friendly_name:e.friendlyName,factor_type:e.factorType},"phone"===e.factorType?{phone:e.phone}:{issuer:e.issuer}),{data:s,error:l}=await Nt(this.fetch,"POST",`${this.url}/factors`,{body:o,headers:this.headers,jwt:null===(n=null==a?void 0:a.session)||void 0===n?void 0:n.access_token});return l?{data:null,error:l}:("totp"===e.factorType&&(null===(r=null==s?void 0:s.totp)||void 0===r?void 0:r.qr_code)&&(s.totp.qr_code=`data:image/svg+xml;utf-8,${s.totp.qr_code}`),{data:s,error:null})})}catch(e){if(Ge(e))return{data:null,error:e};throw e}}async _verify(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var n;const{data:r,error:a}=t;if(a)return{data:null,error:a};const{data:i,error:o}=await Nt(this.fetch,"POST",`${this.url}/factors/${e.factorId}/verify`,{body:{code:e.code,challenge_id:e.challengeId},headers:this.headers,jwt:null===(n=null==r?void 0:r.session)||void 0===n?void 0:n.access_token});return o?{data:null,error:o}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+i.expires_in},i)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",i),{data:i,error:o})})}catch(e){if(Ge(e))return{data:null,error:e};throw e}})}async _challenge(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var n;const{data:r,error:a}=t;return a?{data:null,error:a}:await Nt(this.fetch,"POST",`${this.url}/factors/${e.factorId}/challenge`,{body:{channel:e.channel},headers:this.headers,jwt:null===(n=null==r?void 0:r.session)||void 0===n?void 0:n.access_token})})}catch(e){if(Ge(e))return{data:null,error:e};throw e}})}async _challengeAndVerify(e){const{data:t,error:n}=await this._challenge({factorId:e.factorId});return n?{data:null,error:n}:await this._verify({factorId:e.factorId,challengeId:t.id,code:e.code})}async _listFactors(){const{data:{user:e},error:t}=await this.getUser();if(t)return{data:null,error:t};const n=(null==e?void 0:e.factors)||[],r=n.filter(e=>"totp"===e.factor_type&&"verified"===e.status),a=n.filter(e=>"phone"===e.factor_type&&"verified"===e.status);return{data:{all:n,totp:r,phone:a},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async e=>{var t,n;const{data:{session:r},error:a}=e;if(a)return{data:null,error:a};if(!r)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:i}=_t(r.access_token);let o=null;i.aal&&(o=i.aal);let s=o;return(null!==(n=null===(t=r.user.factors)||void 0===t?void 0:t.filter(e=>"verified"===e.status))&&void 0!==n?n:[]).length>0&&(s="aal2"),{data:{currentLevel:o,nextLevel:s,currentAuthenticationMethods:i.amr||[]},error:null}}))}async fetchJwk(e,t={keys:[]}){let n=t.keys.find(t=>t.kid===e);if(n)return n;if(n=this.jwks.keys.find(t=>t.kid===e),n&&this.jwks_cached_at+6e5>Date.now())return n;const{data:r,error:a}=await Nt(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(a)throw a;if(!r.keys||0===r.keys.length)throw new st("JWKS is empty");if(this.jwks=r,this.jwks_cached_at=Date.now(),n=r.keys.find(t=>t.kid===e),!n)throw new st("No matching signing key found in JWKS");return n}async getClaims(e,t={keys:[]}){try{let n=e;if(!n){const{data:e,error:t}=await this.getSession();if(t||!e.session)return{data:null,error:t};n=e.session.access_token}const{header:r,payload:a,signature:i,raw:{header:o,payload:s}}=_t(n);if(function(e){if(!e)throw new Error("Missing exp claim");if(e<=Math.floor(Date.now()/1e3))throw new Error("JWT has expired")}(a.exp),!r.kid||"HS256"===r.alg||!("crypto"in globalThis)||!("subtle"in globalThis.crypto)){const{error:e}=await this.getUser(n);if(e)throw e;return{data:{claims:a,header:r,signature:i},error:null}}const l=function(e){switch(e){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}(r.alg),u=await this.fetchJwk(r.kid,t),c=await crypto.subtle.importKey("jwk",u,l,!0,["verify"]);if(!await crypto.subtle.verify(l,c,i,function(e){const t=[];return function(e,t){for(let n=0;n<e.length;n+=1){let r=e.charCodeAt(n);if(r>55295&&r<=56319){const t=1024*(r-55296)&65535;r=65536+(e.charCodeAt(n+1)-56320&65535|t),n+=1}pt(r,t)}}(e,e=>t.push(e)),new Uint8Array(t)}(`${o}.${s}`)))throw new st("Invalid JWT signature");return{data:{claims:a,header:r,signature:i},error:null}}catch(e){if(Ge(e))return{data:null,error:e};throw e}}}Qt.nextInstanceID=0;const Xt=Qt;class Zt extends Xt{constructor(e){super(e)}}class en{constructor(e,t,n){var r,a,i;if(this.supabaseUrl=e,this.supabaseKey=t,!e)throw new Error("supabaseUrl is required.");if(!t)throw new Error("supabaseKey is required.");const o=(s=e).endsWith("/")?s:s+"/";var s;const l=new URL(o);this.realtimeUrl=new URL("realtime/v1",l),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",l),this.storageUrl=new URL("storage/v1",l),this.functionsUrl=new URL("functions/v1",l);const u=`sb-${l.hostname.split(".")[0]}-auth-token`,c=function(e,t){var n,r;const{db:a,auth:i,realtime:o,global:s}=e,{db:l,auth:u,realtime:c,global:d}=t,h={db:Object.assign(Object.assign({},l),a),auth:Object.assign(Object.assign({},u),i),realtime:Object.assign(Object.assign({},c),o),global:Object.assign(Object.assign(Object.assign({},d),s),{headers:Object.assign(Object.assign({},null!==(n=null==d?void 0:d.headers)&&void 0!==n?n:{}),null!==(r=null==s?void 0:s.headers)&&void 0!==r?r:{})}),accessToken:()=>{return e=this,t=void 0,r=function*(){return""},new((n=void 0)||(n=Promise))(function(a,i){function o(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,s)}l((r=r.apply(e,t||[])).next())});var e,t,n,r}};return e.accessToken?h.accessToken=e.accessToken:delete h.accessToken,h}(null!=n?n:{},{db:Re,realtime:ze,auth:Object.assign(Object.assign({},Le),{storageKey:u}),global:Ne});this.storageKey=null!==(r=c.auth.storageKey)&&void 0!==r?r:"",this.headers=null!==(a=c.global.headers)&&void 0!==a?a:{},c.accessToken?(this.accessToken=c.accessToken,this.auth=new Proxy({},{get:(e,t)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(t)} is not possible`)}})):this.auth=this._initSupabaseAuthClient(null!==(i=c.auth)&&void 0!==i?i:{},this.headers,c.global.fetch),this.fetch=Ue(t,this._getAccessToken.bind(this),c.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},c.realtime)),this.rest=new P(new URL("rest/v1",l).href,{headers:this.headers,schema:c.db.schema,fetch:this.fetch}),c.accessToken||this._listenForAuthEvents()}get functions(){return new T(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}get storage(){return new Oe(this.storageUrl.href,this.headers,this.fetch)}from(e){return this.rest.from(e)}schema(e){return this.rest.schema(e)}rpc(e,t={},n={}){return this.rest.rpc(e,t,n)}channel(e,t={config:{}}){return this.realtime.channel(e,t)}getChannels(){return this.realtime.getChannels()}removeChannel(e){return this.realtime.removeChannel(e)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var e,t,n,r,a,i;return n=this,r=void 0,i=function*(){if(this.accessToken)return yield this.accessToken();const{data:n}=yield this.auth.getSession();return null!==(t=null===(e=n.session)||void 0===e?void 0:e.access_token)&&void 0!==t?t:null},new((a=void 0)||(a=Promise))(function(e,t){function o(e){try{l(i.next(e))}catch(e){t(e)}}function s(e){try{l(i.throw(e))}catch(e){t(e)}}function l(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a(function(e){e(n)})).then(o,s)}l((i=i.apply(n,r||[])).next())})}_initSupabaseAuthClient({autoRefreshToken:e,persistSession:t,detectSessionInUrl:n,storage:r,storageKey:a,flowType:i,lock:o,debug:s},l,u){const c={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new Zt({url:this.authUrl.href,headers:Object.assign(Object.assign({},c),l),storageKey:a,autoRefreshToken:e,persistSession:t,detectSessionInUrl:n,storage:r,flowType:i,lock:o,debug:s,fetch:u,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(e){return new de(this.realtimeUrl.href,Object.assign(Object.assign({},e),{params:Object.assign({apikey:this.supabaseKey},null==e?void 0:e.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((e,t)=>{this._handleTokenChanged(e,"CLIENT",null==t?void 0:t.access_token)})}_handleTokenChanged(e,t,n){"TOKEN_REFRESHED"!==e&&"SIGNED_IN"!==e||this.changedAccessToken===n?"SIGNED_OUT"===e&&(this.realtime.setAuth(),"STORAGE"==t&&this.auth.signOut(),this.changedAccessToken=void 0):this.changedAccessToken=n}}function tn(e){return tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},tn(e)}function nn(e,t,n){return(t=function(e){var t=function(e){if("object"!=tn(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=tn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==tn(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function rn(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function i(n,r,a,i){var l=r&&r.prototype instanceof s?r:s,u=Object.create(l.prototype);return an(u,"_invoke",function(n,r,a){var i,s,l,u=0,c=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return i=t,s=0,l=e,h.n=n,o}};function f(n,r){for(s=n,l=r,t=0;!d&&u&&!a&&t<c.length;t++){var a,i=c[t],f=h.p,p=i[2];n>3?(a=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=f&&((a=n<2&&f<i[1])?(s=0,h.v=r,h.n=i[1]):f<p&&(a=n<3||i[0]>r||r>p)&&(i[4]=n,i[5]=r,h.n=p,s=0))}if(a||n>1)return o;throw d=!0,r}return function(a,c,p){if(u>1)throw TypeError("Generator is already running");for(d&&1===c&&f(c,p),s=c,l=p;(t=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(u=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(d=h.n<0)?l:n.call(r,h))!==o)break}catch(t){i=e,s=1,l=t}finally{u=1}}return{value:t,done:d}}}(n,a,i),!0),u}var o={};function s(){}function l(){}function u(){}t=Object.getPrototypeOf;var c=[][r]?t(t([][r]())):(an(t={},r,function(){return this}),t),d=u.prototype=s.prototype=Object.create(c);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,an(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=u,an(d,"constructor",u),an(u,"constructor",l),l.displayName="GeneratorFunction",an(u,a,"GeneratorFunction"),an(d),an(d,a,"Generator"),an(d,r,function(){return this}),an(d,"toString",function(){return"[object Generator]"}),(rn=function(){return{w:i,m:h}})()}function an(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}an=function(e,t,n,r){if(t)a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var i=function(t,n){an(e,t,function(e){return this._invoke(t,n,e)})};i("next",0),i("throw",1),i("return",2)}},an(e,t,n,r)}function on(e,t,n,r,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function sn(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var i=e.apply(t,n);function o(e){on(i,r,a,o,s,"next",e)}function s(e){on(i,r,a,o,s,"throw",e)}o(void 0)})}}var ln=((e,t,n)=>new en("https://tpjnyiyvpyzzbzhajbjh.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRwam55aXl2cHl6emJ6aGFqYmpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NDA1NTQsImV4cCI6MjA2NzIxNjU1NH0.cflFdHytlTUA_H_AP7E3Kry9-S-xw45pIRoJQtfk4AE",n))(0,0,{auth:{storage:{getItem:function(e){return sn(rn().m(function t(){var n;return rn().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.get(e);case 1:return n=t.v,t.a(2,n[e]||null)}},t)}))()},setItem:function(e,t){return sn(rn().m(function n(){return rn().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,chrome.storage.local.set(nn({},e,t));case 1:return n.a(2)}},n)}))()},removeItem:function(e){return sn(rn().m(function t(){return rn().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.remove(e);case 1:return t.a(2)}},t)}))()}},autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0}});function un(e){return un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},un(e)}function cn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function dn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?cn(Object(n),!0).forEach(function(t){hn(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):cn(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function hn(e,t,n){return(t=wn(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fn(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function i(n,r,a,i){var l=r&&r.prototype instanceof s?r:s,u=Object.create(l.prototype);return pn(u,"_invoke",function(n,r,a){var i,s,l,u=0,c=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return i=t,s=0,l=e,h.n=n,o}};function f(n,r){for(s=n,l=r,t=0;!d&&u&&!a&&t<c.length;t++){var a,i=c[t],f=h.p,p=i[2];n>3?(a=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=f&&((a=n<2&&f<i[1])?(s=0,h.v=r,h.n=i[1]):f<p&&(a=n<3||i[0]>r||r>p)&&(i[4]=n,i[5]=r,h.n=p,s=0))}if(a||n>1)return o;throw d=!0,r}return function(a,c,p){if(u>1)throw TypeError("Generator is already running");for(d&&1===c&&f(c,p),s=c,l=p;(t=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(u=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(d=h.n<0)?l:n.call(r,h))!==o)break}catch(t){i=e,s=1,l=t}finally{u=1}}return{value:t,done:d}}}(n,a,i),!0),u}var o={};function s(){}function l(){}function u(){}t=Object.getPrototypeOf;var c=[][r]?t(t([][r]())):(pn(t={},r,function(){return this}),t),d=u.prototype=s.prototype=Object.create(c);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,pn(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=u,pn(d,"constructor",u),pn(u,"constructor",l),l.displayName="GeneratorFunction",pn(u,a,"GeneratorFunction"),pn(d),pn(d,a,"Generator"),pn(d,r,function(){return this}),pn(d,"toString",function(){return"[object Generator]"}),(fn=function(){return{w:i,m:h}})()}function pn(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}pn=function(e,t,n,r){if(t)a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var i=function(t,n){pn(e,t,function(e){return this._invoke(t,n,e)})};i("next",0),i("throw",1),i("return",2)}},pn(e,t,n,r)}function gn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,i,o,s=[],l=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,a=e}finally{try{if(!l&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw a}}return s}}(e,t)||mn(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mn(e,t){if(e){if("string"==typeof e)return bn(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bn(e,t):void 0}}function bn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function vn(e,t,n,r,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function yn(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var i=e.apply(t,n);function o(e){vn(i,r,a,o,s,"next",e)}function s(e){vn(i,r,a,o,s,"throw",e)}o(void 0)})}}function An(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,wn(r.key),r)}}function wn(e){var t=function(e){if("object"!=un(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=un(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==un(t)?t:t+""}var kn=new(function(){return e=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)},t=[{key:"getData",value:(D=yn(fn().m(function e(){var t,n,r,a,i,o,s,l,u,c,d,h,f,p,g=this;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(t=e.v,n=t.data,!t.error&&n.session){e.n=2;break}return e.a(2,this.getDefaultData());case 2:return r=n.session.user,console.log("Fetching data for user:",r.id),e.n=3,Promise.all([ln.from("links").select("*").eq("user_id",r.id),ln.from("collections").select("*").eq("user_id",r.id)]);case 3:return a=e.v,i=gn(a,2),o=i[0],s=i[1],o.error&&console.error("Error fetching links:",o.error),s.error&&console.error("Error fetching collections:",s.error),l=(o.data||[]).map(function(e){return console.log("Storage: getData highlights for link",e.id,e.highlights),{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:g.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}),u=(s.data||[]).map(function(e){return{id:e.id,name:e.name,description:e.description,color:e.color,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}}),d=l,h=u,e.n=4,this.getSmartCollections();case 4:return f=e.v,p=this.getDefaultCategories(),c={links:d,collections:h,smartCollections:f,categories:p,settings:{defaultCategory:"general",autoSummarize:!0,enableSmartCollections:!0}},console.log("Data fetched from Supabase:",c),e.a(2,c)}},e,this)})),function(){return D.apply(this,arguments)})},{key:"addLink",value:(z=yn(fn().m(function e(t){var n,r,a,i,o,s,l,u;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(r=e.v,a=r.data,i=null===(n=a.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,{success:!1,error:"User not logged in."});case 2:return o={user_id:i.id,collection_id:t.collectionId||null,url:t.url,title:t.title,favicon:t.favicon,domain:t.domain,user_note:t.userNote,ai_summary:t.aiSummary,category:t.category,is_in_inbox:t.isInInbox||!1,highlights:t.highlights?JSON.stringify(t.highlights):null},console.log("Storage: addLink dbLink.highlights:",o.highlights),e.n=3,ln.from("links").insert(o).select("id").single();case 3:if(s=e.v,l=s.data,!(u=s.error)){e.n=4;break}return console.error("Supabase addLink error:",u),e.a(2,{success:!1,error:u.message||"Database error occurred."});case 4:return e.a(2,{success:!0,linkId:l.id})}},e)})),function(e){return z.apply(this,arguments)})},{key:"updateLink",value:(L=yn(fn().m(function e(t,n){var r,a,i;return fn().w(function(e){for(;;)switch(e.n){case 0:return r=dn(dn({},n),{},{updated_at:new Date}),void 0!==n.highlights&&(r.highlights=n.highlights?JSON.stringify(n.highlights):null),delete r.collectionId,delete r.userNote,delete r.aiSummary,delete r.isInInbox,delete r.createdAt,delete r.updatedAt,void 0!==n.collectionId&&(r.collection_id=n.collectionId),void 0!==n.userNote&&(r.user_note=n.userNote),void 0!==n.aiSummary&&(r.ai_summary=n.aiSummary),void 0!==n.isInInbox&&(r.is_in_inbox=n.isInInbox),console.log("Storage: updateLink dbUpdates.highlights:",r.highlights),e.n=1,ln.from("links").update(r).eq("id",t);case 1:if(a=e.v,!(i=a.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return L.apply(this,arguments)})},{key:"deleteLink",value:(R=yn(fn().m(function e(t){var n,r;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.from("links").delete().eq("id",t);case 1:if(n=e.v,!(r=n.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return R.apply(this,arguments)})},{key:"addCollection",value:(N=yn(fn().m(function e(t){var n,r,a,i,o,s,l;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(r=e.v,a=r.data,i=null===(n=a.session)||void 0===n?void 0:n.user){e.n=2;break}throw new Error("User not logged in.");case 2:return o={user_id:i.id,name:t.name,description:t.description,color:t.color},e.n=3,ln.from("collections").insert(o);case 3:if(s=e.v,!(l=s.error)){e.n=4;break}throw l;case 4:return e.a(2)}},e)})),function(e){return N.apply(this,arguments)})},{key:"updateCollection",value:(I=yn(fn().m(function e(t,n){var r,a;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.from("collections").update(dn(dn({},n),{},{updatedAt:new Date})).eq("id",t);case 1:if(r=e.v,!(a=r.error)){e.n=2;break}throw a;case 2:return e.a(2)}},e)})),function(e,t){return I.apply(this,arguments)})},{key:"deleteCollection",value:(O=yn(fn().m(function e(t){var n,r;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.from("collections").delete().eq("id",t);case 1:if(n=e.v,!(r=n.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return O.apply(this,arguments)})},{key:"searchLinks",value:(P=yn(fn().m(function e(t){var n,r,a,i,o,s,l,u,c=this;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(r=e.v,a=r.data,i=null===(n=a.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:if(t.trim()){e.n=3;break}return e.a(2,[]);case 3:return e.p=3,e.n=4,ln.rpc("search_user_links",{search_query:t.trim(),user_uuid:i.id,result_limit:50});case 4:if(o=e.v,s=o.data,!(l=o.error)){e.n=5;break}return console.error("Search error:",l),e.a(2,[]);case 5:return e.a(2,(s||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:c.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain,searchRank:e.rank,searchHeadline:e.headline}}));case 6:return e.p=6,u=e.v,console.error("Search failed:",u),e.a(2,[])}},e,null,[[3,6]])})),function(e){return P.apply(this,arguments)})},{key:"getUserTags",value:(j=yn(fn().m(function e(){var t,n,r,a,i,o,s,l;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(n=e.v,r=n.data,a=null===(t=r.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,ln.rpc("get_user_tags_with_counts",{user_uuid:a.id});case 3:if(i=e.v,o=i.data,!(s=i.error)){e.n=4;break}return console.error("Error fetching user tags:",s),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,name:e.name,usageCount:e.usage_count||0}}));case 5:return e.p=5,l=e.v,console.error("Failed to get user tags:",l),e.a(2,[])}},e,null,[[2,5]])})),function(){return j.apply(this,arguments)})},{key:"getLinkTags",value:(T=yn(fn().m(function e(t){var n,r,a,i;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,ln.rpc("get_link_tags",{link_uuid:t});case 1:if(n=e.v,r=n.data,!(a=n.error)){e.n=2;break}return console.error("Error fetching link tags:",a),e.a(2,[]);case 2:return e.a(2,r||[]);case 3:return e.p=3,i=e.v,console.error("Failed to get link tags:",i),e.a(2,[])}},e,null,[[0,3]])})),function(e){return T.apply(this,arguments)})},{key:"addTagsToLink",value:(B=yn(fn().m(function e(t,n){var r,a,i,o,s,l,u;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(a=e.v,i=a.data,o=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,error:"User not logged in."});case 2:return e.p=2,e.n=3,ln.rpc("add_tags_to_link",{link_uuid:t,tag_names:n,user_uuid:o.id});case 3:if(s=e.v,!(l=s.error)){e.n=4;break}return console.error("Error adding tags to link:",l),e.a(2,{success:!1,error:l.message||"Failed to add tags."});case 4:return e.a(2,{success:!0});case 5:return e.p=5,u=e.v,console.error("Failed to add tags to link:",u),e.a(2,{success:!1,error:u.message})}},e,null,[[2,5]])})),function(e,t){return B.apply(this,arguments)})},{key:"getLinksByTag",value:(S=yn(fn().m(function e(t){var n,r,a,i,o,s,l,u,c=this;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(r=e.v,a=r.data,i=null===(n=a.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,ln.rpc("get_links_by_tag",{user_uuid:i.id,tag_name:t});case 3:if(o=e.v,s=o.data,!(l=o.error)){e.n=4;break}return console.error("Error fetching links by tag:",l),e.a(2,[]);case 4:return e.a(2,(s||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:c.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}));case 5:return e.p=5,u=e.v,console.error("Failed to get links by tag:",u),e.a(2,[])}},e,null,[[2,5]])})),function(e){return S.apply(this,arguments)})},{key:"cleanupUnusedTags",value:(x=yn(fn().m(function e(){var t,n,r,a,i,o,s,l;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(n=e.v,r=n.data,a=null===(t=r.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,0);case 2:return e.p=2,e.n=3,ln.rpc("cleanup_unused_tags",{user_uuid:a.id});case 3:if(i=e.v,o=i.data,!(s=i.error)){e.n=4;break}return console.error("Error cleaning up unused tags:",s),e.a(2,0);case 4:return e.a(2,o||0);case 5:return e.p=5,l=e.v,console.error("Failed to cleanup unused tags:",l),e.a(2,0)}},e,null,[[2,5]])})),function(){return x.apply(this,arguments)})},{key:"moveToInbox",value:(_=yn(fn().m(function e(t){var n,r;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.from("links").update({is_in_inbox:!0,collection_id:null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(n=e.v,!(r=n.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return _.apply(this,arguments)})},{key:"moveFromInbox",value:(C=yn(fn().m(function e(t,n){var r,a;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.from("links").update({is_in_inbox:!1,collection_id:n||null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(r=e.v,!(a=r.error)){e.n=2;break}throw a;case 2:return e.a(2)}},e)})),function(e,t){return C.apply(this,arguments)})},{key:"getInboxLinks",value:(E=yn(fn().m(function e(){var t,n,r,a,i,o,s,l=this;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(n=e.v,r=n.data,a=null===(t=r.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,ln.from("links").select("*").eq("user_id",a.id).eq("is_in_inbox",!0).order("created_at",{ascending:!1});case 3:if(i=e.v,o=i.data,!(s=i.error)){e.n=4;break}return console.error("Error fetching inbox links:",s),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:l.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}))}},e)})),function(){return E.apply(this,arguments)})},{key:"bulkMoveFromInbox",value:(k=yn(fn().m(function e(t,n){var r,a;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.from("links").update({is_in_inbox:!1,collection_id:n||null,updated_at:(new Date).toISOString()}).in("id",t);case 1:if(r=e.v,!(a=r.error)){e.n=2;break}throw a;case 2:return e.a(2)}},e)})),function(e,t){return k.apply(this,arguments)})},{key:"toggleCollectionSharing",value:(w=yn(fn().m(function e(t,n){var r,a,i,o,s,l,u,c,d;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(a=e.v,i=a.data,o=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,message:"User not logged in."});case 2:return e.p=2,e.n=3,ln.rpc("toggle_collection_sharing",{collection_uuid:t,user_uuid:o.id,make_public:n});case 3:if(s=e.v,l=s.data,!(u=s.error)){e.n=4;break}return console.error("Error toggling collection sharing:",u),e.a(2,{success:!1,message:u.message||"Failed to update sharing settings."});case 4:return c=null==l?void 0:l[0],e.a(2,{success:(null==c?void 0:c.success)||!1,shareToken:null==c?void 0:c.share_token,message:(null==c?void 0:c.message)||"Sharing settings updated."});case 5:return e.p=5,d=e.v,console.error("Failed to toggle collection sharing:",d),e.a(2,{success:!1,message:d.message})}},e,null,[[2,5]])})),function(e,t){return w.apply(this,arguments)})},{key:"getCollectionSharingInfo",value:(A=yn(fn().m(function e(t){var n,r,a,i,o,s,l,u;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(r=e.v,a=r.data,i=null===(n=a.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,null);case 2:return e.p=2,e.n=3,ln.from("collections").select("is_public, share_token, view_count").eq("id",t).eq("user_id",i.id).single();case 3:if(o=e.v,s=o.data,!(l=o.error)){e.n=4;break}return console.error("Error fetching collection sharing info:",l),e.a(2,null);case 4:return e.a(2,{isPublic:s.is_public||!1,shareToken:s.share_token,viewCount:s.view_count||0});case 5:return e.p=5,u=e.v,console.error("Failed to get collection sharing info:",u),e.a(2,null)}},e,null,[[2,5]])})),function(e){return A.apply(this,arguments)})},{key:"getSmartCollections",value:(y=yn(fn().m(function e(){var t;return fn().w(function(e){for(;;)if(0===e.n)return t=this.getDefaultSmartCollections(),e.a(2,t)},e,this)})),function(){return y.apply(this,arguments)})},{key:"generateAISmartCollections",value:(v=yn(fn().m(function e(t){var n,r,i;return fn().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,!(t.length>5)){e.n=3;break}return e.n=1,a.e(508).then(a.bind(a,508));case 1:return n=e.v,r=n.aiService,e.n=2,r.generateSmartCollectionSuggestions(t);case 2:return e.a(2,e.v);case 3:e.n=5;break;case 4:e.p=4,i=e.v,console.error("Failed to generate AI smart collection suggestions:",i);case 5:return e.a(2,[])}},e,null,[[0,4]])})),function(e){return v.apply(this,arguments)})},{key:"createSmartCollection",value:(b=yn(fn().m(function e(t){return fn().w(function(e){for(;;)switch(e.n){case 0:console.log("Creating smart collection:",t);case 1:return e.a(2)}},e)})),function(e){return b.apply(this,arguments)})},{key:"updateSmartCollection",value:(m=yn(fn().m(function e(t,n){return fn().w(function(e){for(;;)switch(e.n){case 0:console.log("Updating smart collection:",t,n);case 1:return e.a(2)}},e)})),function(e,t){return m.apply(this,arguments)})},{key:"deleteSmartCollection",value:(g=yn(fn().m(function e(t){return fn().w(function(e){for(;;)switch(e.n){case 0:console.log("Deleting smart collection:",t);case 1:return e.a(2)}},e)})),function(e){return g.apply(this,arguments)})},{key:"getSmartCollectionLinks",value:(p=yn(fn().m(function e(t){var n,r,a;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,this.getSmartCollections();case 1:if(n=e.v,r=n.find(function(e){return e.id===t})){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,this.getData();case 3:return a=e.v.links,e.a(2,this.filterLinksForSmartCollection(a,r))}},e,this)})),function(e){return p.apply(this,arguments)})},{key:"filterLinksForSmartCollection",value:function(e,t){var n,r,a,i,o=this,s=function(e){return function(e){if(Array.isArray(e))return bn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||mn(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e);if(null!==(n=t.filters)&&void 0!==n&&n.dateRange){var l=t.filters.dateRange,u=l.start,c=l.end;s=s.filter(function(e){var t=e.createdAt;return!(u&&t<u||c&&t>c)})}switch(null!==(r=t.filters)&&void 0!==r&&null!==(r=r.categories)&&void 0!==r&&r.length&&(s=s.filter(function(e){return t.filters.categories.includes(e.category)})),null!==(a=t.filters)&&void 0!==a&&null!==(a=a.domains)&&void 0!==a&&a.length&&(s=s.filter(function(e){return t.filters.domains.some(function(t){return e.domain.includes(t)})})),null!==(i=t.filters)&&void 0!==i&&null!==(i=i.contentType)&&void 0!==i&&i.length&&(s=s.filter(function(e){var n=o.detectContentTypeFromDomain(e.domain);return t.filters.contentType.includes(n)})),t.id){case"recent-reads":return s.filter(function(e){return e.createdAt>=new Date(Date.now()-6048e5)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()}).slice(0,20);case"ai-related":return s.filter(function(e){return o.isAIRelated(e)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"unread":return s.filter(function(e){return!e.userNote||""===e.userNote.trim()}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"tutorials":return s.filter(function(e){return o.isTutorial(e)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"github-repos":return s.filter(function(e){return e.domain.includes("github.com")}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});default:return s}}},{key:"detectContentTypeFromDomain",value:function(e){return e.includes("youtube.com")||e.includes("vimeo.com")?"video":e.includes("github.com")?"tool":e.includes("docs.")||e.includes("documentation")?"documentation":e.includes("medium.com")||e.includes("blog")?"blog":e.includes("news")||e.includes("cnn.com")?"news":"article"}},{key:"isAIRelated",value:function(e){var t="".concat(e.title," ").concat(e.userNote," ").concat(e.aiSummary||"").toLowerCase();return["artificial intelligence","machine learning","deep learning","neural network","ai","ml","gpt","chatgpt","openai","tensorflow","pytorch","llm","natural language processing","nlp","computer vision","reinforcement learning"].some(function(e){return t.includes(e)})}},{key:"isTutorial",value:function(e){var t="".concat(e.title," ").concat(e.userNote).toLowerCase();return["tutorial","how to","guide","step by step","learn","course","introduction to","getting started","beginner","walkthrough"].some(function(e){return t.includes(e)})}},{key:"getDefaultSmartCollections",value:function(){var e=new Date;return[{id:"recent-reads",name:"📚 Recent Reads",description:"Links saved in the last 7 days",query:"created_at >= now() - interval '7 days'",isSystem:!0,autoUpdate:!0,icon:"📚",color:"#3b82f6",filters:{dateRange:{start:new Date(Date.now()-6048e5)}},createdAt:e,updatedAt:e},{id:"ai-related",name:"🤖 AI & Machine Learning",description:"Content related to artificial intelligence and machine learning",query:"title ILIKE '%ai%' OR title ILIKE '%machine learning%' OR title ILIKE '%neural%'",isSystem:!0,autoUpdate:!0,icon:"🤖",color:"#8b5cf6",createdAt:e,updatedAt:e},{id:"unread",name:"📖 To Read",description:"Links without notes (likely unread)",query:"user_note IS NULL OR user_note = ''",isSystem:!0,autoUpdate:!0,icon:"📖",color:"#f59e0b",createdAt:e,updatedAt:e},{id:"tutorials",name:"🎓 Tutorials & Guides",description:"Educational content and tutorials",query:"title ILIKE '%tutorial%' OR title ILIKE '%guide%' OR title ILIKE '%how to%'",isSystem:!0,autoUpdate:!0,icon:"🎓",color:"#10b981",createdAt:e,updatedAt:e},{id:"github-repos",name:"⭐ GitHub Repositories",description:"GitHub repositories and projects",query:"domain LIKE '%github.com%'",isSystem:!0,autoUpdate:!0,icon:"⭐",color:"#6b7280",filters:{domains:["github.com"]},createdAt:e,updatedAt:e}]}},{key:"getDefaultCategories",value:function(){return[{id:"general",name:"General",color:"#6b7280",isDefault:!0},{id:"work",name:"Work",color:"#3b82f6"},{id:"personal",name:"Personal",color:"#10b981"},{id:"learning",name:"Learning",color:"#f59e0b"}]}},{key:"getDefaultData",value:function(){return{links:[],collections:[],smartCollections:[],categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0,enableSmartCollections:!0}}}},{key:"getLinkByUrl",value:(f=yn(fn().m(function e(t){var n,r,a,i,o,s,l;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,ln.auth.getSession();case 1:if(r=e.v,a=r.data,i=null===(n=a.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,null);case 2:return e.n=3,ln.from("links").select("*").eq("user_id",i.id).eq("url",t).single();case 3:if(o=e.v,s=o.data,!(l=o.error)){e.n=5;break}if("PGRST116"!==l.code){e.n=4;break}return e.a(2,null);case 4:throw l;case 5:return e.a(2,{id:s.id,url:s.url,title:s.title,favicon:s.favicon,userNote:s.user_note||"",aiSummary:s.ai_summary,category:s.category,collectionId:s.collection_id,isInInbox:s.is_in_inbox||!1,highlights:this.parseHighlights(s.highlights),createdAt:new Date(s.created_at),updatedAt:new Date(s.updated_at),domain:s.domain})}},e,this)})),function(e){return f.apply(this,arguments)})},{key:"parseHighlights",value:function(e){if(!e)return console.log("Storage: No highlights data found"),[];if("string"==typeof e)try{var t=JSON.parse(e),n=Array.isArray(t)?t:[];return console.log("Storage: Parsed highlights from JSON:",n.length,"highlights",n),n}catch(e){return console.warn("Failed to parse highlights JSON:",e),[]}return Array.isArray(e)?(console.log("Storage: Found highlights array:",e.length,"highlights",e),e):(console.log("Storage: Highlights data in unexpected format:",un(e),e),[])}},{key:"logActivity",value:(h=yn(fn().m(function e(t,n,r,a){var i,o,s,l;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivities();case 1:return i=e.v,o={id:Date.now().toString(),type:t,linkId:n,collectionId:r,metadata:a,createdAt:new Date},i.push(o),s=i.slice(-1e3),e.n=2,chrome.storage.local.set({nest_activities:s});case 2:return e.n=3,this.updateStreaks(t);case 3:console.log("Activity logged:",o),e.n=5;break;case 4:e.p=4,l=e.v,console.error("Failed to log activity:",l);case 5:return e.a(2)}},e,this,[[0,4]])})),function(e,t,n,r){return h.apply(this,arguments)})},{key:"getActivities",value:(d=yn(fn().m(function e(){var t,n,r,a,i=arguments;return fn().w(function(e){for(;;)switch(e.n){case 0:return t=i.length>0&&void 0!==i[0]?i[0]:100,e.p=1,e.n=2,chrome.storage.local.get("nest_activities");case 2:return n=e.v,r=n.nest_activities||[],e.a(2,r.slice(-t).reverse());case 3:return e.p=3,a=e.v,console.error("Failed to get activities:",a),e.a(2,[])}},e,null,[[1,3]])})),function(){return d.apply(this,arguments)})},{key:"getActivityStats",value:(c=yn(fn().m(function e(){var t,n,r,a,i,o;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivities(1e3);case 1:return r=e.v,e.n=2,this.getStreaks();case 2:return a=e.v,i={totalSaves:r.filter(function(e){return"save"===e.type}).length,totalReads:r.filter(function(e){return"read"===e.type}).length,totalHighlights:r.filter(function(e){return"highlight"===e.type}).length,totalOrganizations:r.filter(function(e){return"organize"===e.type}).length,totalSearches:r.filter(function(e){return"search"===e.type}).length,activeDays:this.getUniqueDays(r).length,currentStreak:(null===(t=a.find(function(e){return"daily_save"===e.type}))||void 0===t?void 0:t.currentCount)||0,bestStreak:(null===(n=a.find(function(e){return"daily_save"===e.type}))||void 0===n?void 0:n.bestCount)||0,thisWeekActivity:this.getThisWeekActivity(r),lastActiveDate:r.length>0?new Date(r[0].createdAt):void 0},e.a(2,i);case 3:return e.p=3,o=e.v,console.error("Failed to get activity stats:",o),e.a(2,{totalSaves:0,totalReads:0,totalHighlights:0,totalOrganizations:0,totalSearches:0,activeDays:0,currentStreak:0,bestStreak:0,thisWeekActivity:0})}},e,this,[[0,3]])})),function(){return c.apply(this,arguments)})},{key:"getStreaks",value:(u=yn(fn().m(function e(){var t,n;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_streaks");case 1:return t=e.v,e.a(2,t.nest_streaks||[]);case 2:return e.p=2,n=e.v,console.error("Failed to get streaks:",n),e.a(2,[])}},e,null,[[0,2]])})),function(){return u.apply(this,arguments)})},{key:"updateStreaks",value:(l=yn(fn().m(function e(t){var n,r,a,i,o,s,l,u,c;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getStreaks();case 1:return n=e.v,r=(new Date).toDateString(),"save"===t&&((a=n.find(function(e){return"daily_save"===e.type}))||(a={id:"daily_save",type:"daily_save",currentCount:0,bestCount:0,lastActivityAt:new Date,createdAt:new Date},n.push(a)),i=new Date(a.lastActivityAt).toDateString(),o=new Date(Date.now()-864e5).toDateString(),i===r||(i===o?(a.currentCount++,a.lastActivityAt=new Date):(a.currentCount=1,a.lastActivityAt=new Date)),a.currentCount>a.bestCount&&(a.bestCount=a.currentCount)),"organize"===t&&((s=n.find(function(e){return"weekly_organize"===e.type}))||(s={id:"weekly_organize",type:"weekly_organize",currentCount:0,bestCount:0,lastActivityAt:new Date,createdAt:new Date},n.push(s)),l=this.getWeekNumber(new Date),u=this.getWeekNumber(new Date(s.lastActivityAt)),l===u||(l===u+1?(s.currentCount++,s.lastActivityAt=new Date):(s.currentCount=1,s.lastActivityAt=new Date)),s.currentCount>s.bestCount&&(s.bestCount=s.currentCount)),e.n=2,chrome.storage.local.set({nest_streaks:n});case 2:e.n=4;break;case 3:e.p=3,c=e.v,console.error("Failed to update streaks:",c);case 4:return e.a(2)}},e,this,[[0,3]])})),function(e){return l.apply(this,arguments)})},{key:"getUniqueDays",value:function(e){var t=new Set;return e.forEach(function(e){var n=new Date(e.createdAt).toDateString();t.add(n)}),Array.from(t)}},{key:"getThisWeekActivity",value:function(e){var t=new Date(Date.now()-6048e5);return e.filter(function(e){return new Date(e.createdAt)>=t}).length}},{key:"getWeekNumber",value:function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)}},{key:"shouldShowNudge",value:(s=yn(fn().m(function e(){var t,n,r,a,i,o;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivityStats();case 1:return t=e.v,e.n=2,this.getActivities(50);case 2:if(n=e.v,r=(new Date).toDateString(),0!==n.filter(function(e){return new Date(e.createdAt).toDateString()===r&&"save"===e.type}).length){e.n=5;break}if(!(t.currentStreak>0)){e.n=3;break}return e.a(2,{show:!0,type:"streak_reminder",message:"You have a ".concat(t.currentStreak,"-day saving streak! Don't break it - save something today.")});case 3:if(!t.lastActiveDate){e.n=4;break}if(!((a=Math.floor((Date.now()-t.lastActiveDate.getTime())/864e5))>=3)){e.n=4;break}return e.a(2,{show:!0,type:"inactive_reminder",message:"Welcome back! You haven't saved anything in ".concat(a," days. Found something interesting?")});case 4:if(!((i=(new Date).getHours())>=10&&i<=20)){e.n=5;break}return e.a(2,{show:!0,type:"daily_reminder",message:"Discover something new today? Save it to Nest!"});case 5:return e.a(2,{show:!1});case 6:return e.p=6,o=e.v,console.error("Failed to check nudge status:",o),e.a(2,{show:!1})}},e,this,[[0,6]])})),function(){return s.apply(this,arguments)})}],n=[{key:"getPublicCollection",value:(o=yn(fn().m(function e(t){var n,r,a,i,o;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,ln.rpc("get_public_collection",{token:t});case 1:if(n=e.v,r=n.data,!(a=n.error)){e.n=2;break}return console.error("Error fetching public collection:",a),e.a(2,null);case 2:if(i=null==r?void 0:r[0]){e.n=3;break}return e.a(2,null);case 3:return e.a(2,{id:i.id,name:i.name,description:i.description,viewCount:i.view_count||0,createdAt:new Date(i.created_at),ownerEmail:i.owner_email});case 4:return e.p=4,o=e.v,console.error("Failed to get public collection:",o),e.a(2,null)}},e,null,[[0,4]])})),function(e){return o.apply(this,arguments)})},{key:"getPublicCollectionLinks",value:(i=yn(fn().m(function e(t){var n,r,a,i;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,ln.rpc("get_public_collection_links",{token:t});case 1:if(n=e.v,r=n.data,!(a=n.error)){e.n=2;break}return console.error("Error fetching public collection links:",a),e.a(2,[]);case 2:return e.a(2,(r||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,domain:e.domain,userNote:e.user_note,aiSummary:e.ai_summary,category:e.category,createdAt:new Date(e.created_at),tags:e.tag_names||[]}}));case 3:return e.p=3,i=e.v,console.error("Failed to get public collection links:",i),e.a(2,[])}},e,null,[[0,3]])})),function(e){return i.apply(this,arguments)})},{key:"incrementViewCount",value:(r=yn(fn().m(function e(t){var n,r,a;return fn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,ln.rpc("increment_collection_views",{token:t});case 1:n=e.v,(r=n.error)&&console.error("Error incrementing view count:",r),e.n=3;break;case 2:e.p=2,a=e.v,console.error("Failed to increment view count:",a);case 3:return e.a(2)}},e,null,[[0,2]])})),function(e){return r.apply(this,arguments)})}],t&&An(e.prototype,t),n&&An(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,n,r,i,o,s,l,u,c,d,h,f,p,g,m,b,v,y,A,w,k,E,C,_,x,S,B,T,j,P,O,I,N,R,L,z,D}()),En=a(72),Cn=a.n(En),_n=a(206),xn=a.n(_n),Sn=a(659),Bn=a.n(Sn),Tn=a(56),jn=a.n(Tn),Pn=a(159),On=a.n(Pn),In=a(113),Nn=a.n(In),Rn=a(601),Ln={};Ln.styleTagTransform=Nn(),Ln.setAttributes=jn(),Ln.insert=Bn().bind(null,"head"),Ln.domAPI=xn(),Ln.insertStyleElement=On(),Cn()(Rn.A,Ln),Rn.A&&Rn.A.locals&&Rn.A.locals;var zn=a(848);function Dn(e){return Dn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dn(e)}function $n(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Dn(e)+" is not iterable")}function Un(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function i(n,r,a,i){var l=r&&r.prototype instanceof s?r:s,u=Object.create(l.prototype);return Mn(u,"_invoke",function(n,r,a){var i,s,l,u=0,c=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return i=t,s=0,l=e,h.n=n,o}};function f(n,r){for(s=n,l=r,t=0;!d&&u&&!a&&t<c.length;t++){var a,i=c[t],f=h.p,p=i[2];n>3?(a=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=f&&((a=n<2&&f<i[1])?(s=0,h.v=r,h.n=i[1]):f<p&&(a=n<3||i[0]>r||r>p)&&(i[4]=n,i[5]=r,h.n=p,s=0))}if(a||n>1)return o;throw d=!0,r}return function(a,c,p){if(u>1)throw TypeError("Generator is already running");for(d&&1===c&&f(c,p),s=c,l=p;(t=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(u=2,i){if(s||(a="next"),t=i[a]){if(!(t=t.call(i,l)))throw TypeError("iterator result is not an object");if(!t.done)return t;l=t.value,s<2&&(s=0)}else 1===s&&(t=i.return)&&t.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);i=e}else if((t=(d=h.n<0)?l:n.call(r,h))!==o)break}catch(t){i=e,s=1,l=t}finally{u=1}}return{value:t,done:d}}}(n,a,i),!0),u}var o={};function s(){}function l(){}function u(){}t=Object.getPrototypeOf;var c=[][r]?t(t([][r]())):(Mn(t={},r,function(){return this}),t),d=u.prototype=s.prototype=Object.create(c);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Mn(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=u,Mn(d,"constructor",u),Mn(u,"constructor",l),l.displayName="GeneratorFunction",Mn(u,a,"GeneratorFunction"),Mn(d),Mn(d,a,"Generator"),Mn(d,r,function(){return this}),Mn(d,"toString",function(){return"[object Generator]"}),(Un=function(){return{w:i,m:h}})()}function Mn(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Mn=function(e,t,n,r){if(t)a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var i=function(t,n){Mn(e,t,function(e){return this._invoke(t,n,e)})};i("next",0),i("throw",1),i("return",2)}},Mn(e,t,n,r)}function Fn(e,t,n,r,a,i,o){try{var s=e[i](o),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function qn(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var i=e.apply(t,n);function o(e){Fn(i,r,a,o,s,"next",e)}function s(e){Fn(i,r,a,o,s,"throw",e)}o(void 0)})}}function Wn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,i,o,s=[],l=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){u=!0,a=e}finally{try{if(!l&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw a}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Hn(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hn(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Yn=function(){var e=Wn((0,i.useState)(!0),2),t=e[0],n=e[1],r=Wn((0,i.useState)([]),2),a=r[0],o=r[1],s=Wn((0,i.useState)([]),2),l=s[0],C=s[1],_=Wn((0,i.useState)([]),2),x=_[0],S=_[1],B=Wn((0,i.useState)(0),2),T=B[0],j=B[1],P=Wn((0,i.useState)(!0),2),O=P[0],I=P[1],N=Wn((0,i.useState)(""),2),R=N[0],L=N[1],z=Wn((0,i.useState)(""),2),D=z[0],$=z[1],U=Wn((0,i.useState)(!1),2),M=U[0],F=U[1];(0,i.useEffect)(function(){var e=function(){var e=qn(Un().m(function e(){return Un().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,q();case 1:W(),H(),$(V()),Y();case 2:return e.a(2)}},e)}));return function(){return e.apply(this,arguments)}}();e()},[]);var q=function(){var e=qn(Un().m(function e(){var t,n,r,a,i;return Un().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,null!==(t=chrome)&&void 0!==t&&t.windows&&null!==(n=chrome)&&void 0!==n&&n.sidePanel&&null!==(r=chrome)&&void 0!==r&&r.storage){e.n=1;break}return F(!0),e.a(2);case 1:return e.n=2,chrome.windows.getCurrent();case 2:if((a=e.v)&&void 0!==a.id&&!(a.id<0)){e.n=3;break}return F(!0),e.a(2);case 3:F(!1),e.n=5;break;case 4:e.p=4,i=e.v,console.error("Extension context check failed:",i),F(!0);case 5:return e.a(2)}},e,null,[[0,4]])}));return function(){return e.apply(this,arguments)}}(),W=function(){var e=qn(Un().m(function e(){var t,r,a;return Un().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,!M){e.n=1;break}return n(!0),e.a(2);case 1:return e.n=2,chrome.storage.local.get("nest_newtab_enabled");case 2:t=e.v,r=!1!==t.nest_newtab_enabled,n(r),e.n=4;break;case 3:e.p=3,a=e.v,console.error("Failed to check if enabled:",a),n(!0);case 4:return e.a(2)}},e,null,[[0,3]])}));return function(){return e.apply(this,arguments)}}(),H=function(){var e=qn(Un().m(function e(){var t,n,r,a,i,s,l,f,p;return Un().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,!M){e.n=1;break}return o([]),C([]),S([{label:"Links Saved",value:0,icon:(0,zn.jsx)(u,{size:20}),color:"#3b82f6"},{label:"Collections",value:0,icon:(0,zn.jsx)(c,{size:20}),color:"#8b5cf6"},{label:"This Week",value:0,icon:(0,zn.jsx)(d,{size:20}),color:"#10b981"},{label:"Streak",value:0,icon:(0,zn.jsx)(h,{size:20}),color:"#f59e0b"}]),j(0),I(!1),e.a(2);case 1:return e.n=2,kn.getData();case 2:t=e.v,n=t.links.sort(function(e,t){return new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()}).slice(0,6),o(n),C(t.smartCollections||[]),(r=new Date).setDate(r.getDate()-7),a=t.links.filter(function(e){return new Date(e.createdAt)>=r}).length,(i=new Date).setHours(0,0,0,0),s=0,l=new Date(i),f=Un().m(function e(){var n,r;return Un().w(function(e){for(;;)switch(e.n){case 0:if(n=new Date(l),(r=new Date(l)).setHours(23,59,59,999),!t.links.some(function(e){var t=new Date(e.createdAt);return t>=n&&t<=r})){e.n=1;break}s++,l.setDate(l.getDate()-1),e.n=2;break;case 1:return e.a(2,1);case 2:return e.a(2)}},e)});case 3:return e.d($n(f()),4);case 4:if(!e.v){e.n=5;break}return e.a(3,6);case 5:e.n=3;break;case 6:j(s),S([{label:"Links Saved",value:t.links.length,icon:(0,zn.jsx)(u,{size:20}),color:"#3b82f6"},{label:"Collections",value:t.collections.length,icon:(0,zn.jsx)(c,{size:20}),color:"#8b5cf6"},{label:"This Week",value:a,icon:(0,zn.jsx)(d,{size:20}),color:"#10b981"},{label:"Streak",value:s,icon:(0,zn.jsx)(h,{size:20}),color:"#f59e0b"}]),e.n=8;break;case 7:e.p=7,p=e.v,console.error("Failed to load data:",p);case 8:return e.p=8,I(!1),e.f(8);case 9:return e.a(2)}},e,null,[[0,7,8,9]])}));return function(){return e.apply(this,arguments)}}(),Y=function(){var e=qn(Un().m(function e(){var t;return Un().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,!M){e.n=1;break}return e.a(2);case 1:return e.n=2,chrome.storage.local.get("nest_settings");case 2:(e.v.nest_settings||{}).darkMode?document.body.classList.add("dark-mode"):document.body.classList.remove("dark-mode"),e.n=4;break;case 3:e.p=3,t=e.v,console.error("Failed to load dark mode setting:",t);case 4:return e.a(2)}},e,null,[[0,3]])}));return function(){return e.apply(this,arguments)}}(),V=function(){var e=(new Date).getHours();return e<12?"Good morning":e<17?"Good afternoon":"Good evening"},K=function(){var e=qn(Un().m(function e(t){var n,r,a;return Un().w(function(e){for(;;)switch(e.n){case 0:if(t.preventDefault(),!R.trim()){e.n=12;break}if(!M){e.n=1;break}return alert("Search functionality is not available when the new tab override is disabled in browser settings. Please re-enable Nest as your new tab page or use the extension popup/sidebar instead."),e.a(2);case 1:return e.p=1,e.n=2,chrome.windows.getCurrent();case 2:if(!((n=e.v)&&n.id&&n.id>0)){e.n=5;break}return e.n=3,chrome.sidePanel.open({windowId:n.id});case 3:return e.n=4,chrome.storage.local.set({nest_search_query:R.trim()});case 4:e.n=6;break;case 5:throw console.error("Could not get valid current window for search"),new Error("Invalid window ID");case 6:e.n=12;break;case 7:return e.p=7,r=e.v,console.error("Failed to open sidepanel for search:",r),e.p=8,e.n=9,chrome.runtime.sendMessage({action:"openSidePanel"});case 9:return e.n=10,chrome.storage.local.set({nest_search_query:R.trim()});case 10:e.n=12;break;case 11:e.p=11,a=e.v,console.error("Fallback sidepanel open also failed:",a),alert("Unable to open search. Please try clicking the extension icon in the browser toolbar.");case 12:return e.a(2)}},e,null,[[8,11],[1,7]])}));return function(t){return e.apply(this,arguments)}}(),G=function(){var e=qn(Un().m(function e(){var t;return Un().w(function(e){for(;;)switch(e.n){case 0:if(!M){e.n=1;break}return alert("Save functionality is not available when the new tab override is disabled in browser settings. Please click the extension icon in the browser toolbar to save pages."),e.a(2);case 1:return e.p=1,e.n=2,chrome.runtime.sendMessage({action:"saveCurrentPage"});case 2:e.n=4;break;case 3:e.p=3,t=e.v,console.error("Failed to save current page:",t),alert("Unable to save page. Please try clicking the extension icon in the browser toolbar.");case 4:return e.a(2)}},e,null,[[1,3]])}));return function(){return e.apply(this,arguments)}}(),J=function(){var e=qn(Un().m(function e(){var t,n,r;return Un().w(function(e){for(;;)switch(e.n){case 0:if(!M){e.n=1;break}return alert("Sidepanel functionality is not available when the new tab override is disabled in browser settings. Please re-enable Nest as your new tab page or click the extension icon in the browser toolbar."),e.a(2);case 1:return e.p=1,e.n=2,chrome.windows.getCurrent();case 2:if(!((t=e.v)&&t.id&&t.id>0)){e.n=4;break}return e.n=3,chrome.sidePanel.open({windowId:t.id});case 3:e.n=5;break;case 4:throw console.error("Could not get valid current window for sidepanel"),new Error("Invalid window ID");case 5:e.n=10;break;case 6:return e.p=6,n=e.v,console.error("Failed to open sidepanel:",n),e.p=7,e.n=8,chrome.runtime.sendMessage({action:"openSidePanel"});case 8:e.n=10;break;case 9:e.p=9,r=e.v,console.error("Fallback sidepanel open also failed:",r),alert("Unable to open sidepanel. Please try clicking the extension icon in the browser toolbar.");case 10:return e.a(2)}},e,null,[[7,9],[1,6]])}));return function(){return e.apply(this,arguments)}}(),Q=function(){var e=qn(Un().m(function e(t){return Un().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,kn.logActivity("read",t.id,t.collectionId,{source:"newtab"});case 1:window.open(t.url,"_blank");case 2:return e.a(2)}},e)}));return function(t){return e.apply(this,arguments)}}(),X=function(){var e=qn(Un().m(function e(){var r,a;return Un().w(function(e){for(;;)switch(e.n){case 0:if(!M){e.n=1;break}return alert("Settings cannot be changed when the extension is in restricted mode. Please re-enable Nest as your new tab page in browser settings."),e.a(2);case 1:return n(r=!t),e.p=2,e.n=3,chrome.storage.local.set({nest_newtab_enabled:r});case 3:e.n=5;break;case 4:e.p=4,a=e.v,console.error("Failed to toggle new tab setting:",a),n(!r);case 5:return e.a(2)}},e,null,[[2,4]])}));return function(){return e.apply(this,arguments)}}();return t?(0,zn.jsxs)("div",{className:"newtab-container",children:[M&&(0,zn.jsxs)("div",{className:"restricted-context-banner",children:[(0,zn.jsx)(p,{size:20}),(0,zn.jsxs)("div",{className:"banner-content",children:[(0,zn.jsx)("strong",{children:"Limited Functionality"}),(0,zn.jsx)("span",{children:"Some features are disabled because Nest new tab override was disabled in browser settings. Click the extension icon in the toolbar for full functionality."})]})]}),(0,zn.jsxs)("header",{className:"newtab-header",children:[(0,zn.jsxs)("div",{className:"header-left",children:[(0,zn.jsxs)("div",{className:"logo",children:[(0,zn.jsx)(u,{className:"logo-icon",size:24}),(0,zn.jsx)("span",{className:"logo-text",children:"Nest"})]}),(0,zn.jsxs)("div",{className:"greeting",children:[(0,zn.jsxs)("h1",{children:[D,"!"]}),T>0&&(0,zn.jsxs)("div",{className:"streak-badge",children:[(0,zn.jsx)(h,{size:16}),(0,zn.jsxs)("span",{children:[T," day streak"]})]})]})]}),(0,zn.jsxs)("div",{className:"header-actions",children:[(0,zn.jsx)("button",{onClick:X,className:"header-button",title:M?"Settings unavailable in restricted mode":"Disable Nest New Tab",disabled:M,children:(0,zn.jsx)(g,{size:18})}),(0,zn.jsx)("button",{onClick:J,className:"header-button",title:M?"Limited functionality - use toolbar icon instead":"Open Nest Sidepanel",children:(0,zn.jsx)(m,{size:18})})]})]}),O?(0,zn.jsxs)("div",{className:"newtab-loading",children:[(0,zn.jsx)("div",{className:"loading-spinner"}),(0,zn.jsx)("span",{children:"Loading your knowledge hub..."})]}):(0,zn.jsxs)("main",{className:"newtab-main",children:[(0,zn.jsx)("section",{className:"search-section",children:(0,zn.jsxs)("form",{onSubmit:K,className:"search-form",children:[(0,zn.jsxs)("div",{className:"search-input-container",children:[(0,zn.jsx)(b,{className:"search-icon",size:20}),(0,zn.jsx)("input",{type:"text",value:R,onChange:function(e){return L(e.target.value)},placeholder:"Search your saved links...",className:"search-input",autoFocus:!0})]}),(0,zn.jsx)("button",{type:"submit",className:"search-button",children:"Search"})]})}),(0,zn.jsx)("section",{className:"stats-section",children:(0,zn.jsx)("div",{className:"stats-grid",children:x.map(function(e,t){return(0,zn.jsxs)("div",{className:"stat-card",style:{"--stat-color":e.color},children:[(0,zn.jsx)("div",{className:"stat-icon",children:e.icon}),(0,zn.jsxs)("div",{className:"stat-content",children:[(0,zn.jsx)("div",{className:"stat-value",children:e.value}),(0,zn.jsx)("div",{className:"stat-label",children:e.label})]})]},t)})})}),(0,zn.jsxs)("section",{className:"actions-section",children:[(0,zn.jsxs)("button",{onClick:G,className:"action-button primary",children:[(0,zn.jsx)(v,{size:20}),"Save This Page"]}),(0,zn.jsxs)("button",{onClick:J,className:"action-button secondary",children:[(0,zn.jsx)(y,{size:20}),"Open Nest"]})]}),(0,zn.jsxs)("div",{className:"content-grid",children:[(0,zn.jsxs)("section",{className:"content-section recent-links",children:[(0,zn.jsxs)("div",{className:"section-header",children:[(0,zn.jsxs)("h2",{children:[(0,zn.jsx)(A,{size:20}),"Recent Saves"]}),(0,zn.jsxs)("button",{onClick:J,className:"see-all-button",children:["See all",(0,zn.jsx)(w,{size:14})]})]}),(0,zn.jsx)("div",{className:"links-grid",children:0===a.length?(0,zn.jsxs)("div",{className:"empty-state",children:[(0,zn.jsx)(k,{size:32}),(0,zn.jsx)("p",{children:"No saved links yet"}),(0,zn.jsx)("span",{children:"Start building your knowledge collection!"})]}):a.map(function(e){return(0,zn.jsxs)("div",{className:"link-card",onClick:function(){return Q(e)},children:[(0,zn.jsx)("div",{className:"link-favicon",children:e.favicon?(0,zn.jsx)("img",{src:e.favicon,alt:""}):(0,zn.jsx)("div",{className:"favicon-placeholder",children:e.domain.charAt(0).toUpperCase()})}),(0,zn.jsxs)("div",{className:"link-content",children:[(0,zn.jsx)("h3",{className:"link-title",children:e.title}),(0,zn.jsx)("p",{className:"link-domain",children:e.domain}),(0,zn.jsx)("span",{className:"link-time",children:(t=e.createdAt,n=(new Date).getTime()-t.getTime(),r=Math.floor(n/36e5),a=Math.floor(n/864e5),r<1?"Just now":r<24?"".concat(r,"h ago"):a<7?"".concat(a,"d ago"):t.toLocaleDateString())})]})]},e.id);var t,n,r,a})})]}),(0,zn.jsxs)("section",{className:"content-section smart-collections",children:[(0,zn.jsxs)("div",{className:"section-header",children:[(0,zn.jsxs)("h2",{children:[(0,zn.jsx)(E,{size:20}),"Smart Collections"]}),(0,zn.jsxs)("button",{onClick:J,className:"see-all-button",children:["See all",(0,zn.jsx)(w,{size:14})]})]}),(0,zn.jsx)("div",{className:"collections-grid",children:0===l.length?(0,zn.jsxs)("div",{className:"empty-state",children:[(0,zn.jsx)(E,{size:32}),(0,zn.jsx)("p",{children:"Smart collections will appear here"}),(0,zn.jsx)("span",{children:"Save more links to unlock AI-powered collections!"})]}):l.slice(0,6).map(function(e){return(0,zn.jsxs)("div",{className:"collection-card",onClick:J,children:[(0,zn.jsx)("div",{className:"collection-icon",children:e.icon}),(0,zn.jsxs)("div",{className:"collection-content",children:[(0,zn.jsx)("h3",{className:"collection-name",children:e.name}),(0,zn.jsx)("p",{className:"collection-description",children:e.description})]})]},e.id)})})]})]})]})]}):(0,zn.jsx)("div",{className:"newtab-disabled",children:(0,zn.jsxs)("div",{className:"disabled-content",children:[(0,zn.jsx)(u,{className:"disabled-icon",size:48}),(0,zn.jsx)("h2",{children:"Nest New Tab is Disabled"}),(0,zn.jsx)("p",{children:"Click below to re-enable the Nest home interface"}),(0,zn.jsxs)("button",{onClick:X,className:"enable-button",children:[(0,zn.jsx)(f,{size:16}),"Enable Nest New Tab"]})]})})};var Vn=document.getElementById("newtab-root");Vn&&(0,o.createRoot)(Vn).render((0,zn.jsx)(Yn,{}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,