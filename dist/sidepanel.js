/*! For license information please see sidepanel.js.LICENSE.txt */
(()=>{"use strict";var e={20:(e,n,t)=>{var r=t(540),o=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var r,i={},c=null,u=null;for(r in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(u=n.ref),n)a.call(n,r)&&!l.hasOwnProperty(r)&&(i[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===i[r]&&(i[r]=n[r]);return{$$typeof:o,type:e,key:c,ref:u,props:i,_owner:s.current}}n.Fragment=i,n.jsx=c,n.jsxs=c},45:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(825));n.default=class{constructor(e,{headers:n={},schema:t,fetch:r}){this.url=e,this.headers=n,this.schema=t,this.fetch=r}select(e,{head:n=!1,count:t}={}){const r=n?"HEAD":"GET";let i=!1;const a=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!i?"":('"'===e&&(i=!i),e)).join("");return this.url.searchParams.set("select",a),t&&(this.headers.Prefer=`count=${t}`),new o.default({method:r,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(e,{count:n,defaultToNull:t=!0}={}){const r=[];if(this.headers.Prefer&&r.push(this.headers.Prefer),n&&r.push(`count=${n}`),t||r.push("missing=default"),this.headers.Prefer=r.join(","),Array.isArray(e)){const n=e.reduce((e,n)=>e.concat(Object.keys(n)),[]);if(n.length>0){const e=[...new Set(n)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new o.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}upsert(e,{onConflict:n,ignoreDuplicates:t=!1,count:r,defaultToNull:i=!0}={}){const a=[`resolution=${t?"ignore":"merge"}-duplicates`];if(void 0!==n&&this.url.searchParams.set("on_conflict",n),this.headers.Prefer&&a.push(this.headers.Prefer),r&&a.push(`count=${r}`),i||a.push("missing=default"),this.headers.Prefer=a.join(","),Array.isArray(e)){const n=e.reduce((e,n)=>e.concat(Object.keys(n)),[]);if(n.length>0){const e=[...new Set(n)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new o.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}update(e,{count:n}={}){const t=[];return this.headers.Prefer&&t.push(this.headers.Prefer),n&&t.push(`count=${n}`),this.headers.Prefer=t.join(","),new o.default({method:"PATCH",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}delete({count:e}={}){const n=[];return e&&n.push(`count=${e}`),this.headers.Prefer&&n.unshift(this.headers.Prefer),this.headers.Prefer=n.join(","),new o.default({method:"DELETE",url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=i[c]||0,d="".concat(c," ").concat(u);i[c]=u+1;var f=t(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)n[f].references++,n[f].updater(h);else{var p=o(h,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var l=r(e,o),c=0;c<i.length;c++){var u=t(i[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}i=l}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},159:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},182:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([e.id,"/* Reset and base styles */\n* {\n  box-sizing: border-box;\n}\n\n.sidepanel {\n  width: 100%;\n  height: 100vh;\n  background: #ffffff;\n  display: flex;\n  flex-direction: column;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n  overflow: hidden;\n}\n\n/* Header */\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e5e7eb;\n  background: #ffffff;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n}\n\n.header-title {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.header-title h1 {\n  margin: 0;\n  font-size: 20px;\n  font-weight: 600;\n  color: #111827;\n}\n\n.header-icon {\n  color: #3b82f6;\n  width: 20px;\n  height: 20px;\n}\n\n.save-button {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s;\n}\n\n.save-button:hover {\n  background: #2563eb;\n}\n\n/* Enhanced Search Styles */\n.search-container {\n  position: relative;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.search-icon {\n  position: absolute;\n  left: 32px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #6b7280;\n  pointer-events: none;\n}\n\n.search-input {\n  width: 100%;\n  padding: 10px 12px 10px 36px;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  font-size: 14px;\n  background: #f9fafb;\n  transition: border-color 0.2s, background-color 0.2s;\n  padding-right: 60px; /* Space for clear button and spinner */\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  background: white;\n}\n\n.search-clear {\n  position: absolute;\n  right: 40px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.search-clear:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.search-spinner {\n  position: absolute;\n  right: 24px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #3b82f6;\n  font-size: 16px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: translateY(-50%) rotate(0deg); }\n  to { transform: translateY(-50%) rotate(360deg); }\n}\n\n/* Search Results Styles */\n.search-results {\n  padding: 16px 0;\n}\n\n.search-results-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 20px 16px;\n  border-bottom: 1px solid #e5e7eb;\n  margin-bottom: 16px;\n}\n\n.search-results-header h3 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0;\n}\n\n.clear-search-btn {\n  padding: 6px 12px;\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  color: #374151;\n  font-size: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.clear-search-btn:hover {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.no-results {\n  text-align: center;\n  padding: 40px 20px;\n  color: #6b7280;\n}\n\n/* Search Result Card Styles */\n.search-result-card {\n  position: relative;\n  margin-bottom: 16px;\n}\n\n.search-rank-indicator {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  background: #3b82f6;\n  color: white;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n  font-weight: 500;\n  z-index: 10;\n}\n\n.search-result-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.search-result-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.search-result-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.search-result-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.search-result-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  cursor: pointer;\n  line-height: 1.4;\n  word-wrap: break-word;\n  transition: color 0.2s;\n}\n\n.search-result-title:hover {\n  color: #3b82f6;\n}\n\n.search-result-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #6b7280;\n  flex-wrap: wrap;\n}\n\n.search-result-domain {\n  font-weight: 500;\n}\n\n.search-result-date::before {\n  content: '•';\n  margin-right: 8px;\n}\n\n.search-result-rank {\n  background: #eff6ff;\n  color: #1d4ed8;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 11px;\n  font-weight: 500;\n}\n\n.search-result-rank::before {\n  content: '•';\n  margin-right: 8px;\n  color: #6b7280;\n}\n\n.search-result-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n/* Search headline with highlighting */\n.search-headline {\n  background: #fffbeb;\n  border: 1px solid #fed7aa;\n  border-radius: 6px;\n  padding: 8px 12px;\n  margin-bottom: 8px;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #92400e;\n}\n\n.search-headline mark {\n  background: #fbbf24;\n  color: #92400e;\n  padding: 1px 2px;\n  border-radius: 2px;\n}\n\n.search-result-category {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n/* Content */\n.content {\n  flex: 1;\n  overflow-y: auto;\n  padding: 0 20px 20px;\n}\n\n/* Sections */\n.section {\n  margin-bottom: 24px;\n}\n\n.section-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 0;\n  background: none;\n  border: none;\n  font-size: 16px;\n  font-weight: 600;\n  color: #374151;\n  cursor: pointer;\n  text-align: left;\n  transition: color 0.2s;\n}\n\n.section-header:hover {\n  color: #111827;\n}\n\n.section-header .count {\n  margin-left: auto;\n  background: #f3f4f6;\n  color: #6b7280;\n  font-size: 12px;\n  font-weight: 500;\n  padding: 2px 8px;\n  border-radius: 12px;\n}\n\n.add-collection-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.add-collection-button:hover {\n  color: #3b82f6;\n  background: #f3f4f6;\n}\n\n.section-content {\n  margin-top: 8px;\n}\n\n/* Link Cards */\n.link-card {\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 12px;\n  transition: border-color 0.2s, box-shadow 0.2s;\n}\n\n.link-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.link-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.link-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.favicon-placeholder {\n  width: 16px;\n  height: 16px;\n  border-radius: 2px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 10px;\n  font-weight: 600;\n}\n\n.link-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  cursor: pointer;\n  line-height: 1.4;\n  word-wrap: break-word;\n  transition: color 0.2s;\n}\n\n.link-title:hover {\n  color: #3b82f6;\n}\n\n.link-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #6b7280;\n}\n\n.link-domain {\n  font-weight: 500;\n}\n\n.link-date::before {\n  content: '•';\n  margin-right: 8px;\n}\n\n.link-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.action-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.action-button:hover {\n  background-color: #f3f4f6;\n}\n\n/* Dropdown */\n.dropdown {\n  position: relative;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  z-index: 50;\n  min-width: 160px;\n  padding: 4px;\n}\n\n.dropdown-menu button {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 8px 12px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #374151;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n}\n\n.dropdown-menu button:hover {\n  background: #f3f4f6;\n}\n\n.dropdown-menu button.delete-action {\n  color: #dc2626;\n}\n\n.dropdown-menu button.delete-action:hover {\n  background: #fef2f2;\n}\n\n/* Collections menu */\n.collections-menu {\n  background: #f9fafb;\n  border: 1px solid #e5e7eb;\n  border-radius: 6px;\n  padding: 8px;\n  margin-top: 8px;\n}\n\n.collections-header {\n  font-size: 12px;\n  font-weight: 600;\n  color: #6b7280;\n  margin-bottom: 4px;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.collection-option {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 6px 8px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 13px;\n  color: #374151;\n  transition: background-color 0.2s;\n}\n\n.collection-option:hover {\n  background: white;\n}\n\n/* Link content */\n.link-note, .link-summary {\n  margin-bottom: 8px;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #4b5563;\n}\n\n.link-note strong, .link-summary strong {\n  color: #374151;\n  font-weight: 600;\n}\n\n.link-category {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.category-badge {\n  background: #f3f4f6;\n  color: white;\n  font-size: 11px;\n  font-weight: 600;\n  padding: 3px 8px;\n  border-radius: 12px;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n/* Collection Cards */\n.collection-card {\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  margin-bottom: 12px;\n  background: white;\n}\n\n.collection-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 16px;\n  background: none;\n  border: none;\n  text-align: left;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.collection-header:hover {\n  background: #f9fafb;\n}\n\n.collection-icon {\n  color: #6b7280;\n  flex-shrink: 0;\n}\n\n.collection-info {\n  flex: 1;\n  text-align: left;\n  min-width: 0;\n}\n\n.collection-name-row {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 2px;\n}\n\n.collection-name {\n  font-weight: 500;\n  color: #374151;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.public-indicator {\n  display: flex;\n  align-items: center;\n  padding: 2px 6px;\n  background: #dcfce7;\n  color: #16a34a;\n  border-radius: 10px;\n  font-size: 10px;\n  flex-shrink: 0;\n}\n\n.collection-description {\n  font-size: 12px;\n  color: #6b7280;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.collection-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.collection-count {\n  background: #f3f4f6;\n  color: #6b7280;\n  padding: 2px 8px;\n  border-radius: 10px;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.share-collection-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  border: none;\n  background: transparent;\n  color: #6b7280;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  flex-shrink: 0;\n}\n\n.share-collection-button:hover {\n  background: #f3f4f6;\n  color: #374151;\n}\n\n.collection-content {\n  padding: 0 16px 16px;\n  border-top: 1px solid #f3f4f6;\n}\n\n.collection-content .link-card {\n  border: none;\n  background: #f9fafb;\n  margin-bottom: 8px;\n}\n\n.empty-collection {\n  padding: 20px;\n  text-align: center;\n  color: #6b7280;\n  font-size: 14px;\n}\n\n/* Empty states */\n.empty-state {\n  text-align: center;\n  padding: 32px 16px;\n  color: #6b7280;\n}\n\n.empty-state p {\n  margin: 0 0 16px 0;\n  font-size: 14px;\n}\n\n.empty-action {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 8px 16px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.empty-action:hover {\n  background: #2563eb;\n}\n\n/* Footer */\n.footer {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-top: 1px solid #e5e7eb;\n  background: #f9fafb;\n}\n\n.footer-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.footer-button:hover {\n  color: #374151;\n  background: white;\n}\n\n.footer-text {\n  font-size: 12px;\n  color: #6b7280;\n}\n\n/* Modals */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n  padding: 20px;\n}\n\n.modal-content {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 500px;\n  max-height: 80vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px 24px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.modal-header h2 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #111827;\n}\n\n.close-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.close-button:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.modal-body {\n  padding: 24px;\n  overflow-y: auto;\n}\n\n/* Link preview in modal */\n.link-preview {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  background: #f9fafb;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.link-preview-favicon {\n  flex-shrink: 0;\n}\n\n.link-preview-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-preview-title {\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  margin-bottom: 2px;\n  word-wrap: break-word;\n}\n\n.link-preview-url {\n  font-size: 12px;\n  color: #6b7280;\n}\n\n/* Form elements */\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  font-size: 14px;\n  font-weight: 500;\n  color: #374151;\n  margin-bottom: 6px;\n}\n\n.form-group input,\n.form-group textarea {\n  width: 100%;\n  padding: 10px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 14px;\n  transition: border-color 0.2s;\n  font-family: inherit;\n}\n\n.form-group input:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 80px;\n}\n\n.modal-actions {\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 24px;\n}\n\n.button-primary {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.button-primary:hover:not(:disabled) {\n  background: #2563eb;\n}\n\n.button-primary:disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n\n.button-secondary {\n  background: white;\n  color: #374151;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n}\n\n.button-secondary:hover {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n/* Loading state */\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n}\n\n.loading-spinner {\n  font-size: 14px;\n}\n\n/* Responsive adjustments */\n@media (max-width: 480px) {\n  .modal-content {\n    margin: 0;\n    border-radius: 0;\n    height: 100vh;\n    max-height: none;\n  }\n  \n  .modal-overlay {\n    padding: 0;\n  }\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.logout-button {\n  background: #f3f4f6;\n  color: #374151;\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s, color 0.2s;\n}\n\n.logout-button:hover {\n  background: #e5e7eb;\n}\n\n/* Auth Form Styles */\n.auth-container {\n  padding: 20px;\n}\n\n.auth-form {\n  margin-top: 40px;\n  text-align: center;\n}\n\n.auth-form h2 {\n  font-size: 24px;\n  font-weight: 600;\n  margin-bottom: 8px;\n}\n\n.auth-form p {\n  font-size: 14px;\n  color: #6b7280;\n  margin-bottom: 24px;\n}\n\n.auth-input {\n  width: 100%;\n  padding: 12px;\n  font-size: 14px;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  margin-bottom: 16px;\n}\n\n.auth-button {\n  width: 100%;\n  padding: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  color: white;\n  background: #3b82f6;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.auth-button:hover {\n  background: #2563eb;\n}\n\n.auth-button:disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n\n.auth-message {\n  margin-top: 16px;\n  font-size: 14px;\n  color: #374151;\n}\n\n/* Tag Input Styles */\n.tag-input-container {\n  position: relative;\n  width: 100%;\n}\n\n.tag-input-wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 6px;\n  padding: 8px 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background-color: white;\n  min-height: 42px;\n  cursor: text;\n  transition: border-color 0.2s ease;\n}\n\n.tag-input-wrapper:focus-within {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.tag-chip {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;\n  border-radius: 16px;\n  color: white;\n  font-size: 12px;\n  font-weight: 500;\n  white-space: nowrap;\n  max-width: 150px;\n}\n\n.tag-name {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tag-remove {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 16px;\n  height: 16px;\n  border: none;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 50%;\n  color: white;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  flex-shrink: 0;\n}\n\n.tag-remove:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.tag-input {\n  flex: 1;\n  border: none;\n  outline: none;\n  font-size: 14px;\n  min-width: 80px;\n  background: transparent;\n}\n\n.tag-input::placeholder {\n  color: #94a3b8;\n}\n\n.tag-input:disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n.tag-input-icon {\n  display: flex;\n  align-items: center;\n  color: #94a3b8;\n  flex-shrink: 0;\n}\n\n.tag-suggestions {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  right: 0;\n  z-index: 1000;\n  margin-top: 4px;\n  background: white;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.tag-suggestion {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  padding: 8px 12px;\n  border: none;\n  background: white;\n  text-align: left;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  font-size: 14px;\n}\n\n.tag-suggestion:hover,\n.tag-suggestion.focused {\n  background-color: #f8fafc;\n}\n\n.tag-suggestion-color {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-suggestion-name {\n  flex: 1;\n  color: #1e293b;\n}\n\n.tag-suggestion-count {\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n/* Tag Filter Styles */\n.tag-filters {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #f8fafc;\n  border-radius: 8px;\n}\n\n.tag-filter {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 12px;\n  border: 1px solid transparent;\n  border-radius: 20px;\n  background: white;\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n\n.tag-filter:hover {\n  border-color: #e2e8f0;\n  transform: translateY(-1px);\n}\n\n.tag-filter.active {\n  background: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n}\n\n.tag-filter-color {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-filter-count {\n  background: rgba(100, 116, 139, 0.1);\n  color: #64748b;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n  margin-left: 4px;\n}\n\n.tag-filter.active .tag-filter-count {\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n}\n\n.tag-filter-skeleton {\n  color: #94a3b8;\n  font-size: 12px;\n  padding: 6px 12px;\n  background: #f1f5f9;\n  border-radius: 20px;\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.tag-filter-more {\n  color: #64748b;\n  font-size: 12px;\n  padding: 6px 12px;\n  background: #f1f5f9;\n  border-radius: 20px;\n  font-weight: 500;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .5;\n  }\n}\n\n/* Tag Cloud Styles */\n.tag-cloud {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  padding: 16px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: #fafafa;\n}\n\n.tag-cloud-item {\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 12px;\n  border-radius: 16px;\n  background: white;\n  border: 1px solid #e2e8f0;\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n\n.tag-cloud-item:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n  transform: translateY(-1px);\n}\n\n.tag-cloud-count {\n  background: #f1f5f9;\n  color: #64748b;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n}\n\n/* Tag Management Modal Styles */\n.tag-management {\n  padding: 16px;\n}\n\n.tag-management-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n}\n\n.tag-management-title {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.tag-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.tag-list-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n}\n\n.tag-list-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n}\n\n.tag-list-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-list-name {\n  font-weight: 500;\n  color: #1e293b;\n}\n\n.tag-list-count {\n  color: #64748b;\n  font-size: 12px;\n}\n\n.tag-list-actions {\n  display: flex;\n  gap: 8px;\n}\n\n.tag-action-btn {\n  padding: 4px 8px;\n  border: 1px solid #e2e8f0;\n  border-radius: 4px;\n  background: white;\n  color: #64748b;\n  font-size: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.tag-action-btn:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.tag-action-btn.danger:hover {\n  border-color: #ef4444;\n  color: #ef4444;\n}\n\n/* Responsive Design */\n@media (max-width: 480px) {\n  .tag-input-wrapper {\n    padding: 6px 8px;\n    min-height: 38px;\n  }\n  \n  .tag-chip {\n    font-size: 11px;\n    padding: 3px 6px;\n  }\n  \n  .tag-filters {\n    padding: 8px;\n    gap: 6px;\n  }\n  \n  .tag-filter {\n    padding: 4px 8px;\n    font-size: 11px;\n  }\n}\n\n/* Tag Editor Styles */\n.tag-editor {\n  margin-top: 12px;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: #fafafa;\n}\n\n.tag-editor-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  color: #374151;\n}\n\n.tag-editor-close {\n  background: none;\n  border: none;\n  font-size: 18px;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 0;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n  transition: background-color 0.2s ease;\n}\n\n.tag-editor-close:hover {\n  background-color: #e5e7eb;\n}\n\n.tag-editor-loading {\n  color: #6b7280;\n  font-size: 14px;\n  padding: 8px 0;\n  text-align: center;\n}\n\n/* Link Tags Display */\n.link-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n.link-tag {\n  display: inline-block;\n  padding: 3px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 500;\n  color: white;\n  cursor: pointer;\n  transition: transform 0.2s ease, opacity 0.2s ease;\n  max-width: 100px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.link-tag:hover {\n  transform: translateY(-1px);\n  opacity: 0.9;\n}\n\n/* Tag Results Styles */\n.tag-results {\n  margin-bottom: 24px;\n}\n\n.tag-results-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #f0fdf4;\n  border: 1px solid #bbf7d0;\n  border-radius: 8px;\n}\n\n.tag-results-header h3 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #166534;\n  margin: 0;\n}\n\n/* Share Modal Styles */\n.share-modal {\n  width: 500px;\n  max-width: 90vw;\n}\n\n.share-collection-info {\n  margin-bottom: 24px;\n  padding: 16px;\n  background: #f8fafc;\n  border-radius: 8px;\n  border: 1px solid #e2e8f0;\n}\n\n.collection-name {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0 0 8px 0;\n}\n\n.collection-description {\n  color: #64748b;\n  margin: 0 0 12px 0;\n  line-height: 1.5;\n}\n\n.collection-meta {\n  font-size: 12px;\n  color: #94a3b8;\n}\n\n.share-toggle-section {\n  margin-bottom: 24px;\n  padding: 20px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n}\n\n.share-toggle-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 16px;\n}\n\n.share-status {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n}\n\n.status-icon {\n  flex-shrink: 0;\n}\n\n.status-icon.public {\n  color: #10b981;\n}\n\n.status-icon.private {\n  color: #6b7280;\n}\n\n.status-title {\n  font-weight: 600;\n  color: #1e293b;\n  margin-bottom: 2px;\n}\n\n.status-subtitle {\n  font-size: 13px;\n  color: #64748b;\n}\n\n.toggle-button {\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  border: none;\n  transition: all 0.2s ease;\n  min-width: 120px;\n}\n\n.toggle-button.private {\n  background: #3b82f6;\n  color: white;\n}\n\n.toggle-button.private:hover:not(:disabled) {\n  background: #2563eb;\n}\n\n.toggle-button.public {\n  background: #ef4444;\n  color: white;\n}\n\n.toggle-button.public:hover:not(:disabled) {\n  background: #dc2626;\n}\n\n.toggle-button:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.share-link-section {\n  margin-bottom: 24px;\n  padding: 20px;\n  border: 1px solid #d1fae5;\n  border-radius: 8px;\n  background: #f0fdf4;\n}\n\n.share-link-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 12px;\n  font-weight: 600;\n  color: #166534;\n}\n\n.share-link-container {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.share-link-input {\n  flex: 1;\n  padding: 10px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  font-size: 13px;\n  color: #374151;\n  font-family: monospace;\n}\n\n.share-link-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.share-link-actions {\n  display: flex;\n  gap: 4px;\n}\n\n.copy-button,\n.open-button {\n  padding: 10px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #6b7280;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.copy-button:hover,\n.open-button:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.copy-button.copied {\n  background: #10b981;\n  color: white;\n  border-color: #10b981;\n}\n\n.share-analytics {\n  display: flex;\n  gap: 16px;\n}\n\n.analytics-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  padding: 6px 12px;\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 16px;\n  font-size: 13px;\n  color: #64748b;\n}\n\n.share-message {\n  padding: 12px;\n  border-radius: 6px;\n  margin-bottom: 16px;\n  font-size: 14px;\n}\n\n.share-message.success {\n  background: #f0fdf4;\n  color: #166534;\n  border: 1px solid #bbf7d0;\n}\n\n.share-message.error {\n  background: #fef2f2;\n  color: #dc2626;\n  border: 1px solid #fecaca;\n}\n\n.share-info-box {\n  padding: 16px;\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  margin-bottom: 16px;\n}\n\n.share-info-box h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.share-info-box ul {\n  margin: 0;\n  padding-left: 16px;\n  list-style-type: disc;\n}\n\n.share-info-box li {\n  margin-bottom: 6px;\n  font-size: 13px;\n  color: #64748b;\n  line-height: 1.4;\n}\n\n.share-info-box li:last-child {\n  margin-bottom: 0;\n}\n\n/* Settings Modal Styles */\n.settings-modal {\n  width: 700px;\n  max-width: 95vw;\n  max-height: 90vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.settings-content {\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n}\n\n.settings-tabs {\n  display: flex;\n  flex-direction: column;\n  background: #f8fafc;\n  border-right: 1px solid #e2e8f0;\n  min-width: 160px;\n  padding: 16px 0;\n}\n\n.settings-tab {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  border: none;\n  background: transparent;\n  color: #64748b;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: left;\n  border-radius: 0;\n}\n\n.settings-tab:hover {\n  background: #e2e8f0;\n  color: #1e293b;\n}\n\n.settings-tab.active {\n  background: #3b82f6;\n  color: white;\n}\n\n.settings-panel {\n  flex: 1;\n  overflow-y: auto;\n  padding: 24px;\n}\n\n.settings-section h3 {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0 0 20px 0;\n}\n\n.setting-group {\n  margin-bottom: 32px;\n}\n\n.setting-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n  margin-bottom: 12px;\n  gap: 16px;\n}\n\n.setting-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n  min-width: 0;\n}\n\n.setting-label {\n  font-weight: 500;\n  color: #1e293b;\n  margin-bottom: 2px;\n}\n\n.setting-description {\n  font-size: 13px;\n  color: #64748b;\n  line-height: 1.4;\n}\n\n/* Toggle Switch Styles */\n.toggle-switch {\n  position: relative;\n  display: inline-block;\n  width: 44px;\n  height: 24px;\n  cursor: pointer;\n}\n\n.toggle-switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.toggle-slider {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #cbd5e1;\n  border-radius: 24px;\n  transition: 0.3s;\n}\n\n.toggle-slider:before {\n  position: absolute;\n  content: \"\";\n  height: 18px;\n  width: 18px;\n  left: 3px;\n  bottom: 3px;\n  background-color: white;\n  border-radius: 50%;\n  transition: 0.3s;\n}\n\n.toggle-switch input:checked + .toggle-slider {\n  background-color: #3b82f6;\n}\n\n.toggle-switch input:checked + .toggle-slider:before {\n  transform: translateX(20px);\n}\n\n.toggle-switch input:disabled + .toggle-slider {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n/* Settings Controls */\n.settings-select {\n  padding: 8px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  min-width: 120px;\n}\n\n.settings-select:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.settings-select:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.settings-button {\n  padding: 8px 16px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.settings-button:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.settings-button.danger {\n  background: #ef4444;\n  color: white;\n  border-color: #ef4444;\n}\n\n.settings-button.danger:hover {\n  background: #dc2626;\n  border-color: #dc2626;\n}\n\n/* Stats Grid */\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 16px;\n  margin: 24px 0;\n}\n\n.stat-card {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 16px;\n  text-align: center;\n}\n\n.stat-number {\n  font-size: 24px;\n  font-weight: 700;\n  color: #3b82f6;\n  margin-bottom: 4px;\n}\n\n.stat-label {\n  font-size: 12px;\n  color: #64748b;\n  font-weight: 500;\n}\n\n/* Data Usage */\n.data-usage {\n  margin-top: 24px;\n  padding: 16px;\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n}\n\n.data-usage h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.usage-items {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n}\n\n.usage-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 13px;\n  color: #64748b;\n}\n\n/* Sharing Stats */\n.sharing-stats {\n  margin-top: 24px;\n  padding: 16px;\n  background: #f0fdf4;\n  border: 1px solid #bbf7d0;\n  border-radius: 8px;\n}\n\n.sharing-stats h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #166534;\n}\n\n.stats-row {\n  display: flex;\n  gap: 24px;\n}\n\n.stat-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 13px;\n  color: #166534;\n}\n\n/* About Section */\n.about-info {\n  margin-bottom: 32px;\n}\n\n.app-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 16px;\n}\n\n.app-logo {\n  width: 48px;\n  height: 48px;\n  background: #3b82f6;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.app-name {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.app-version {\n  font-size: 12px;\n  color: #64748b;\n}\n\n.app-description {\n  color: #64748b;\n  line-height: 1.6;\n  margin: 0;\n}\n\n.support-links {\n  margin-bottom: 32px;\n}\n\n.support-links h4 {\n  margin: 0 0 16px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.link-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 12px;\n}\n\n.support-link {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  color: #64748b;\n  text-decoration: none;\n  transition: all 0.2s ease;\n  font-size: 14px;\n}\n\n.support-link:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.credits {\n  text-align: center;\n  color: #94a3b8;\n  font-size: 12px;\n  line-height: 1.6;\n}\n\n.credits p {\n  margin: 0 0 4px 0;\n}\n\n/* Settings Actions */\n.setting-actions {\n  margin-top: 24px;\n  padding-top: 24px;\n  border-top: 1px solid #e2e8f0;\n}\n\n/* Settings Message */\n.settings-message {\n  position: absolute;\n  bottom: 80px;\n  left: 24px;\n  right: 24px;\n  padding: 12px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  z-index: 1000;\n  animation: slideUp 0.3s ease-out;\n}\n\n.settings-message.success {\n  background: #f0fdf4;\n  color: #166534;\n  border: 1px solid #bbf7d0;\n}\n\n.settings-message.error {\n  background: #fef2f2;\n  color: #dc2626;\n  border: 1px solid #fecaca;\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .settings-modal {\n    width: 100%;\n    max-width: 100vw;\n    max-height: 100vh;\n    border-radius: 0;\n  }\n\n  .settings-content {\n    flex-direction: column;\n  }\n\n  .settings-tabs {\n    flex-direction: row;\n    min-width: auto;\n    border-right: none;\n    border-bottom: 1px solid #e2e8f0;\n    overflow-x: auto;\n    padding: 8px 0;\n  }\n\n  .settings-tab {\n    white-space: nowrap;\n    padding: 8px 12px;\n    min-width: 100px;\n  }\n\n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .stats-row {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .link-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n ","",{version:3,sources:["webpack://./src/sidepanel/sidepanel.css"],names:[],mappings:"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",sourcesContent:["/* Reset and base styles */\n* {\n  box-sizing: border-box;\n}\n\n.sidepanel {\n  width: 100%;\n  height: 100vh;\n  background: #ffffff;\n  display: flex;\n  flex-direction: column;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n  overflow: hidden;\n}\n\n/* Header */\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e5e7eb;\n  background: #ffffff;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n}\n\n.header-title {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.header-title h1 {\n  margin: 0;\n  font-size: 20px;\n  font-weight: 600;\n  color: #111827;\n}\n\n.header-icon {\n  color: #3b82f6;\n  width: 20px;\n  height: 20px;\n}\n\n.save-button {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s;\n}\n\n.save-button:hover {\n  background: #2563eb;\n}\n\n/* Enhanced Search Styles */\n.search-container {\n  position: relative;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.search-icon {\n  position: absolute;\n  left: 32px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #6b7280;\n  pointer-events: none;\n}\n\n.search-input {\n  width: 100%;\n  padding: 10px 12px 10px 36px;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  font-size: 14px;\n  background: #f9fafb;\n  transition: border-color 0.2s, background-color 0.2s;\n  padding-right: 60px; /* Space for clear button and spinner */\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  background: white;\n}\n\n.search-clear {\n  position: absolute;\n  right: 40px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.search-clear:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.search-spinner {\n  position: absolute;\n  right: 24px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #3b82f6;\n  font-size: 16px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: translateY(-50%) rotate(0deg); }\n  to { transform: translateY(-50%) rotate(360deg); }\n}\n\n/* Search Results Styles */\n.search-results {\n  padding: 16px 0;\n}\n\n.search-results-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 20px 16px;\n  border-bottom: 1px solid #e5e7eb;\n  margin-bottom: 16px;\n}\n\n.search-results-header h3 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0;\n}\n\n.clear-search-btn {\n  padding: 6px 12px;\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  color: #374151;\n  font-size: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.clear-search-btn:hover {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.no-results {\n  text-align: center;\n  padding: 40px 20px;\n  color: #6b7280;\n}\n\n/* Search Result Card Styles */\n.search-result-card {\n  position: relative;\n  margin-bottom: 16px;\n}\n\n.search-rank-indicator {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  background: #3b82f6;\n  color: white;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n  font-weight: 500;\n  z-index: 10;\n}\n\n.search-result-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.search-result-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.search-result-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.search-result-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.search-result-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  cursor: pointer;\n  line-height: 1.4;\n  word-wrap: break-word;\n  transition: color 0.2s;\n}\n\n.search-result-title:hover {\n  color: #3b82f6;\n}\n\n.search-result-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #6b7280;\n  flex-wrap: wrap;\n}\n\n.search-result-domain {\n  font-weight: 500;\n}\n\n.search-result-date::before {\n  content: '•';\n  margin-right: 8px;\n}\n\n.search-result-rank {\n  background: #eff6ff;\n  color: #1d4ed8;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 11px;\n  font-weight: 500;\n}\n\n.search-result-rank::before {\n  content: '•';\n  margin-right: 8px;\n  color: #6b7280;\n}\n\n.search-result-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n/* Search headline with highlighting */\n.search-headline {\n  background: #fffbeb;\n  border: 1px solid #fed7aa;\n  border-radius: 6px;\n  padding: 8px 12px;\n  margin-bottom: 8px;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #92400e;\n}\n\n.search-headline mark {\n  background: #fbbf24;\n  color: #92400e;\n  padding: 1px 2px;\n  border-radius: 2px;\n}\n\n.search-result-category {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n/* Content */\n.content {\n  flex: 1;\n  overflow-y: auto;\n  padding: 0 20px 20px;\n}\n\n/* Sections */\n.section {\n  margin-bottom: 24px;\n}\n\n.section-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 0;\n  background: none;\n  border: none;\n  font-size: 16px;\n  font-weight: 600;\n  color: #374151;\n  cursor: pointer;\n  text-align: left;\n  transition: color 0.2s;\n}\n\n.section-header:hover {\n  color: #111827;\n}\n\n.section-header .count {\n  margin-left: auto;\n  background: #f3f4f6;\n  color: #6b7280;\n  font-size: 12px;\n  font-weight: 500;\n  padding: 2px 8px;\n  border-radius: 12px;\n}\n\n.add-collection-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.add-collection-button:hover {\n  color: #3b82f6;\n  background: #f3f4f6;\n}\n\n.section-content {\n  margin-top: 8px;\n}\n\n/* Link Cards */\n.link-card {\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 12px;\n  transition: border-color 0.2s, box-shadow 0.2s;\n}\n\n.link-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.link-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.link-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.favicon-placeholder {\n  width: 16px;\n  height: 16px;\n  border-radius: 2px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 10px;\n  font-weight: 600;\n}\n\n.link-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  cursor: pointer;\n  line-height: 1.4;\n  word-wrap: break-word;\n  transition: color 0.2s;\n}\n\n.link-title:hover {\n  color: #3b82f6;\n}\n\n.link-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #6b7280;\n}\n\n.link-domain {\n  font-weight: 500;\n}\n\n.link-date::before {\n  content: '•';\n  margin-right: 8px;\n}\n\n.link-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.action-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.action-button:hover {\n  background-color: #f3f4f6;\n}\n\n/* Dropdown */\n.dropdown {\n  position: relative;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  z-index: 50;\n  min-width: 160px;\n  padding: 4px;\n}\n\n.dropdown-menu button {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 8px 12px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #374151;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n}\n\n.dropdown-menu button:hover {\n  background: #f3f4f6;\n}\n\n.dropdown-menu button.delete-action {\n  color: #dc2626;\n}\n\n.dropdown-menu button.delete-action:hover {\n  background: #fef2f2;\n}\n\n/* Collections menu */\n.collections-menu {\n  background: #f9fafb;\n  border: 1px solid #e5e7eb;\n  border-radius: 6px;\n  padding: 8px;\n  margin-top: 8px;\n}\n\n.collections-header {\n  font-size: 12px;\n  font-weight: 600;\n  color: #6b7280;\n  margin-bottom: 4px;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.collection-option {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 6px 8px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 13px;\n  color: #374151;\n  transition: background-color 0.2s;\n}\n\n.collection-option:hover {\n  background: white;\n}\n\n/* Link content */\n.link-note, .link-summary {\n  margin-bottom: 8px;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #4b5563;\n}\n\n.link-note strong, .link-summary strong {\n  color: #374151;\n  font-weight: 600;\n}\n\n.link-category {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.category-badge {\n  background: #f3f4f6;\n  color: white;\n  font-size: 11px;\n  font-weight: 600;\n  padding: 3px 8px;\n  border-radius: 12px;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n/* Collection Cards */\n.collection-card {\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  margin-bottom: 12px;\n  background: white;\n}\n\n.collection-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 16px;\n  background: none;\n  border: none;\n  text-align: left;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.collection-header:hover {\n  background: #f9fafb;\n}\n\n.collection-icon {\n  color: #6b7280;\n  flex-shrink: 0;\n}\n\n.collection-info {\n  flex: 1;\n  text-align: left;\n  min-width: 0;\n}\n\n.collection-name-row {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 2px;\n}\n\n.collection-name {\n  font-weight: 500;\n  color: #374151;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.public-indicator {\n  display: flex;\n  align-items: center;\n  padding: 2px 6px;\n  background: #dcfce7;\n  color: #16a34a;\n  border-radius: 10px;\n  font-size: 10px;\n  flex-shrink: 0;\n}\n\n.collection-description {\n  font-size: 12px;\n  color: #6b7280;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.collection-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.collection-count {\n  background: #f3f4f6;\n  color: #6b7280;\n  padding: 2px 8px;\n  border-radius: 10px;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.share-collection-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  border: none;\n  background: transparent;\n  color: #6b7280;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  flex-shrink: 0;\n}\n\n.share-collection-button:hover {\n  background: #f3f4f6;\n  color: #374151;\n}\n\n.collection-content {\n  padding: 0 16px 16px;\n  border-top: 1px solid #f3f4f6;\n}\n\n.collection-content .link-card {\n  border: none;\n  background: #f9fafb;\n  margin-bottom: 8px;\n}\n\n.empty-collection {\n  padding: 20px;\n  text-align: center;\n  color: #6b7280;\n  font-size: 14px;\n}\n\n/* Empty states */\n.empty-state {\n  text-align: center;\n  padding: 32px 16px;\n  color: #6b7280;\n}\n\n.empty-state p {\n  margin: 0 0 16px 0;\n  font-size: 14px;\n}\n\n.empty-action {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 8px 16px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.empty-action:hover {\n  background: #2563eb;\n}\n\n/* Footer */\n.footer {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-top: 1px solid #e5e7eb;\n  background: #f9fafb;\n}\n\n.footer-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.footer-button:hover {\n  color: #374151;\n  background: white;\n}\n\n.footer-text {\n  font-size: 12px;\n  color: #6b7280;\n}\n\n/* Modals */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n  padding: 20px;\n}\n\n.modal-content {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 500px;\n  max-height: 80vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px 24px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.modal-header h2 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #111827;\n}\n\n.close-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.close-button:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.modal-body {\n  padding: 24px;\n  overflow-y: auto;\n}\n\n/* Link preview in modal */\n.link-preview {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  background: #f9fafb;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.link-preview-favicon {\n  flex-shrink: 0;\n}\n\n.link-preview-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-preview-title {\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  margin-bottom: 2px;\n  word-wrap: break-word;\n}\n\n.link-preview-url {\n  font-size: 12px;\n  color: #6b7280;\n}\n\n/* Form elements */\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  font-size: 14px;\n  font-weight: 500;\n  color: #374151;\n  margin-bottom: 6px;\n}\n\n.form-group input,\n.form-group textarea {\n  width: 100%;\n  padding: 10px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 14px;\n  transition: border-color 0.2s;\n  font-family: inherit;\n}\n\n.form-group input:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 80px;\n}\n\n.modal-actions {\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 24px;\n}\n\n.button-primary {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.button-primary:hover:not(:disabled) {\n  background: #2563eb;\n}\n\n.button-primary:disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n\n.button-secondary {\n  background: white;\n  color: #374151;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n}\n\n.button-secondary:hover {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n/* Loading state */\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n}\n\n.loading-spinner {\n  font-size: 14px;\n}\n\n/* Responsive adjustments */\n@media (max-width: 480px) {\n  .modal-content {\n    margin: 0;\n    border-radius: 0;\n    height: 100vh;\n    max-height: none;\n  }\n  \n  .modal-overlay {\n    padding: 0;\n  }\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.logout-button {\n  background: #f3f4f6;\n  color: #374151;\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s, color 0.2s;\n}\n\n.logout-button:hover {\n  background: #e5e7eb;\n}\n\n/* Auth Form Styles */\n.auth-container {\n  padding: 20px;\n}\n\n.auth-form {\n  margin-top: 40px;\n  text-align: center;\n}\n\n.auth-form h2 {\n  font-size: 24px;\n  font-weight: 600;\n  margin-bottom: 8px;\n}\n\n.auth-form p {\n  font-size: 14px;\n  color: #6b7280;\n  margin-bottom: 24px;\n}\n\n.auth-input {\n  width: 100%;\n  padding: 12px;\n  font-size: 14px;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  margin-bottom: 16px;\n}\n\n.auth-button {\n  width: 100%;\n  padding: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  color: white;\n  background: #3b82f6;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.auth-button:hover {\n  background: #2563eb;\n}\n\n.auth-button:disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n\n.auth-message {\n  margin-top: 16px;\n  font-size: 14px;\n  color: #374151;\n}\n\n/* Tag Input Styles */\n.tag-input-container {\n  position: relative;\n  width: 100%;\n}\n\n.tag-input-wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 6px;\n  padding: 8px 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background-color: white;\n  min-height: 42px;\n  cursor: text;\n  transition: border-color 0.2s ease;\n}\n\n.tag-input-wrapper:focus-within {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.tag-chip {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;\n  border-radius: 16px;\n  color: white;\n  font-size: 12px;\n  font-weight: 500;\n  white-space: nowrap;\n  max-width: 150px;\n}\n\n.tag-name {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tag-remove {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 16px;\n  height: 16px;\n  border: none;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 50%;\n  color: white;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  flex-shrink: 0;\n}\n\n.tag-remove:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.tag-input {\n  flex: 1;\n  border: none;\n  outline: none;\n  font-size: 14px;\n  min-width: 80px;\n  background: transparent;\n}\n\n.tag-input::placeholder {\n  color: #94a3b8;\n}\n\n.tag-input:disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n.tag-input-icon {\n  display: flex;\n  align-items: center;\n  color: #94a3b8;\n  flex-shrink: 0;\n}\n\n.tag-suggestions {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  right: 0;\n  z-index: 1000;\n  margin-top: 4px;\n  background: white;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.tag-suggestion {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  padding: 8px 12px;\n  border: none;\n  background: white;\n  text-align: left;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  font-size: 14px;\n}\n\n.tag-suggestion:hover,\n.tag-suggestion.focused {\n  background-color: #f8fafc;\n}\n\n.tag-suggestion-color {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-suggestion-name {\n  flex: 1;\n  color: #1e293b;\n}\n\n.tag-suggestion-count {\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n/* Tag Filter Styles */\n.tag-filters {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #f8fafc;\n  border-radius: 8px;\n}\n\n.tag-filter {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 12px;\n  border: 1px solid transparent;\n  border-radius: 20px;\n  background: white;\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n\n.tag-filter:hover {\n  border-color: #e2e8f0;\n  transform: translateY(-1px);\n}\n\n.tag-filter.active {\n  background: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n}\n\n.tag-filter-color {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-filter-count {\n  background: rgba(100, 116, 139, 0.1);\n  color: #64748b;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n  margin-left: 4px;\n}\n\n.tag-filter.active .tag-filter-count {\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n}\n\n.tag-filter-skeleton {\n  color: #94a3b8;\n  font-size: 12px;\n  padding: 6px 12px;\n  background: #f1f5f9;\n  border-radius: 20px;\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.tag-filter-more {\n  color: #64748b;\n  font-size: 12px;\n  padding: 6px 12px;\n  background: #f1f5f9;\n  border-radius: 20px;\n  font-weight: 500;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .5;\n  }\n}\n\n/* Tag Cloud Styles */\n.tag-cloud {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  padding: 16px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: #fafafa;\n}\n\n.tag-cloud-item {\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 12px;\n  border-radius: 16px;\n  background: white;\n  border: 1px solid #e2e8f0;\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n\n.tag-cloud-item:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n  transform: translateY(-1px);\n}\n\n.tag-cloud-count {\n  background: #f1f5f9;\n  color: #64748b;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n}\n\n/* Tag Management Modal Styles */\n.tag-management {\n  padding: 16px;\n}\n\n.tag-management-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n}\n\n.tag-management-title {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.tag-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.tag-list-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n}\n\n.tag-list-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n}\n\n.tag-list-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-list-name {\n  font-weight: 500;\n  color: #1e293b;\n}\n\n.tag-list-count {\n  color: #64748b;\n  font-size: 12px;\n}\n\n.tag-list-actions {\n  display: flex;\n  gap: 8px;\n}\n\n.tag-action-btn {\n  padding: 4px 8px;\n  border: 1px solid #e2e8f0;\n  border-radius: 4px;\n  background: white;\n  color: #64748b;\n  font-size: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.tag-action-btn:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.tag-action-btn.danger:hover {\n  border-color: #ef4444;\n  color: #ef4444;\n}\n\n/* Responsive Design */\n@media (max-width: 480px) {\n  .tag-input-wrapper {\n    padding: 6px 8px;\n    min-height: 38px;\n  }\n  \n  .tag-chip {\n    font-size: 11px;\n    padding: 3px 6px;\n  }\n  \n  .tag-filters {\n    padding: 8px;\n    gap: 6px;\n  }\n  \n  .tag-filter {\n    padding: 4px 8px;\n    font-size: 11px;\n  }\n}\n\n/* Tag Editor Styles */\n.tag-editor {\n  margin-top: 12px;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: #fafafa;\n}\n\n.tag-editor-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  color: #374151;\n}\n\n.tag-editor-close {\n  background: none;\n  border: none;\n  font-size: 18px;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 0;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n  transition: background-color 0.2s ease;\n}\n\n.tag-editor-close:hover {\n  background-color: #e5e7eb;\n}\n\n.tag-editor-loading {\n  color: #6b7280;\n  font-size: 14px;\n  padding: 8px 0;\n  text-align: center;\n}\n\n/* Link Tags Display */\n.link-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n.link-tag {\n  display: inline-block;\n  padding: 3px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 500;\n  color: white;\n  cursor: pointer;\n  transition: transform 0.2s ease, opacity 0.2s ease;\n  max-width: 100px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.link-tag:hover {\n  transform: translateY(-1px);\n  opacity: 0.9;\n}\n\n/* Tag Results Styles */\n.tag-results {\n  margin-bottom: 24px;\n}\n\n.tag-results-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #f0fdf4;\n  border: 1px solid #bbf7d0;\n  border-radius: 8px;\n}\n\n.tag-results-header h3 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #166534;\n  margin: 0;\n}\n\n/* Share Modal Styles */\n.share-modal {\n  width: 500px;\n  max-width: 90vw;\n}\n\n.share-collection-info {\n  margin-bottom: 24px;\n  padding: 16px;\n  background: #f8fafc;\n  border-radius: 8px;\n  border: 1px solid #e2e8f0;\n}\n\n.collection-name {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0 0 8px 0;\n}\n\n.collection-description {\n  color: #64748b;\n  margin: 0 0 12px 0;\n  line-height: 1.5;\n}\n\n.collection-meta {\n  font-size: 12px;\n  color: #94a3b8;\n}\n\n.share-toggle-section {\n  margin-bottom: 24px;\n  padding: 20px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n}\n\n.share-toggle-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 16px;\n}\n\n.share-status {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n}\n\n.status-icon {\n  flex-shrink: 0;\n}\n\n.status-icon.public {\n  color: #10b981;\n}\n\n.status-icon.private {\n  color: #6b7280;\n}\n\n.status-title {\n  font-weight: 600;\n  color: #1e293b;\n  margin-bottom: 2px;\n}\n\n.status-subtitle {\n  font-size: 13px;\n  color: #64748b;\n}\n\n.toggle-button {\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  border: none;\n  transition: all 0.2s ease;\n  min-width: 120px;\n}\n\n.toggle-button.private {\n  background: #3b82f6;\n  color: white;\n}\n\n.toggle-button.private:hover:not(:disabled) {\n  background: #2563eb;\n}\n\n.toggle-button.public {\n  background: #ef4444;\n  color: white;\n}\n\n.toggle-button.public:hover:not(:disabled) {\n  background: #dc2626;\n}\n\n.toggle-button:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.share-link-section {\n  margin-bottom: 24px;\n  padding: 20px;\n  border: 1px solid #d1fae5;\n  border-radius: 8px;\n  background: #f0fdf4;\n}\n\n.share-link-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 12px;\n  font-weight: 600;\n  color: #166534;\n}\n\n.share-link-container {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.share-link-input {\n  flex: 1;\n  padding: 10px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  font-size: 13px;\n  color: #374151;\n  font-family: monospace;\n}\n\n.share-link-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.share-link-actions {\n  display: flex;\n  gap: 4px;\n}\n\n.copy-button,\n.open-button {\n  padding: 10px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #6b7280;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.copy-button:hover,\n.open-button:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.copy-button.copied {\n  background: #10b981;\n  color: white;\n  border-color: #10b981;\n}\n\n.share-analytics {\n  display: flex;\n  gap: 16px;\n}\n\n.analytics-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  padding: 6px 12px;\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 16px;\n  font-size: 13px;\n  color: #64748b;\n}\n\n.share-message {\n  padding: 12px;\n  border-radius: 6px;\n  margin-bottom: 16px;\n  font-size: 14px;\n}\n\n.share-message.success {\n  background: #f0fdf4;\n  color: #166534;\n  border: 1px solid #bbf7d0;\n}\n\n.share-message.error {\n  background: #fef2f2;\n  color: #dc2626;\n  border: 1px solid #fecaca;\n}\n\n.share-info-box {\n  padding: 16px;\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  margin-bottom: 16px;\n}\n\n.share-info-box h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.share-info-box ul {\n  margin: 0;\n  padding-left: 16px;\n  list-style-type: disc;\n}\n\n.share-info-box li {\n  margin-bottom: 6px;\n  font-size: 13px;\n  color: #64748b;\n  line-height: 1.4;\n}\n\n.share-info-box li:last-child {\n  margin-bottom: 0;\n}\n\n/* Settings Modal Styles */\n.settings-modal {\n  width: 700px;\n  max-width: 95vw;\n  max-height: 90vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.settings-content {\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n}\n\n.settings-tabs {\n  display: flex;\n  flex-direction: column;\n  background: #f8fafc;\n  border-right: 1px solid #e2e8f0;\n  min-width: 160px;\n  padding: 16px 0;\n}\n\n.settings-tab {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  border: none;\n  background: transparent;\n  color: #64748b;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: left;\n  border-radius: 0;\n}\n\n.settings-tab:hover {\n  background: #e2e8f0;\n  color: #1e293b;\n}\n\n.settings-tab.active {\n  background: #3b82f6;\n  color: white;\n}\n\n.settings-panel {\n  flex: 1;\n  overflow-y: auto;\n  padding: 24px;\n}\n\n.settings-section h3 {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0 0 20px 0;\n}\n\n.setting-group {\n  margin-bottom: 32px;\n}\n\n.setting-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n  margin-bottom: 12px;\n  gap: 16px;\n}\n\n.setting-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n  min-width: 0;\n}\n\n.setting-label {\n  font-weight: 500;\n  color: #1e293b;\n  margin-bottom: 2px;\n}\n\n.setting-description {\n  font-size: 13px;\n  color: #64748b;\n  line-height: 1.4;\n}\n\n/* Toggle Switch Styles */\n.toggle-switch {\n  position: relative;\n  display: inline-block;\n  width: 44px;\n  height: 24px;\n  cursor: pointer;\n}\n\n.toggle-switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.toggle-slider {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #cbd5e1;\n  border-radius: 24px;\n  transition: 0.3s;\n}\n\n.toggle-slider:before {\n  position: absolute;\n  content: \"\";\n  height: 18px;\n  width: 18px;\n  left: 3px;\n  bottom: 3px;\n  background-color: white;\n  border-radius: 50%;\n  transition: 0.3s;\n}\n\n.toggle-switch input:checked + .toggle-slider {\n  background-color: #3b82f6;\n}\n\n.toggle-switch input:checked + .toggle-slider:before {\n  transform: translateX(20px);\n}\n\n.toggle-switch input:disabled + .toggle-slider {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n/* Settings Controls */\n.settings-select {\n  padding: 8px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  min-width: 120px;\n}\n\n.settings-select:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.settings-select:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.settings-button {\n  padding: 8px 16px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.settings-button:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.settings-button.danger {\n  background: #ef4444;\n  color: white;\n  border-color: #ef4444;\n}\n\n.settings-button.danger:hover {\n  background: #dc2626;\n  border-color: #dc2626;\n}\n\n/* Stats Grid */\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 16px;\n  margin: 24px 0;\n}\n\n.stat-card {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 16px;\n  text-align: center;\n}\n\n.stat-number {\n  font-size: 24px;\n  font-weight: 700;\n  color: #3b82f6;\n  margin-bottom: 4px;\n}\n\n.stat-label {\n  font-size: 12px;\n  color: #64748b;\n  font-weight: 500;\n}\n\n/* Data Usage */\n.data-usage {\n  margin-top: 24px;\n  padding: 16px;\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n}\n\n.data-usage h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.usage-items {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n}\n\n.usage-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 13px;\n  color: #64748b;\n}\n\n/* Sharing Stats */\n.sharing-stats {\n  margin-top: 24px;\n  padding: 16px;\n  background: #f0fdf4;\n  border: 1px solid #bbf7d0;\n  border-radius: 8px;\n}\n\n.sharing-stats h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #166534;\n}\n\n.stats-row {\n  display: flex;\n  gap: 24px;\n}\n\n.stat-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 13px;\n  color: #166534;\n}\n\n/* About Section */\n.about-info {\n  margin-bottom: 32px;\n}\n\n.app-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 16px;\n}\n\n.app-logo {\n  width: 48px;\n  height: 48px;\n  background: #3b82f6;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.app-name {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.app-version {\n  font-size: 12px;\n  color: #64748b;\n}\n\n.app-description {\n  color: #64748b;\n  line-height: 1.6;\n  margin: 0;\n}\n\n.support-links {\n  margin-bottom: 32px;\n}\n\n.support-links h4 {\n  margin: 0 0 16px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.link-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 12px;\n}\n\n.support-link {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  color: #64748b;\n  text-decoration: none;\n  transition: all 0.2s ease;\n  font-size: 14px;\n}\n\n.support-link:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.credits {\n  text-align: center;\n  color: #94a3b8;\n  font-size: 12px;\n  line-height: 1.6;\n}\n\n.credits p {\n  margin: 0 0 4px 0;\n}\n\n/* Settings Actions */\n.setting-actions {\n  margin-top: 24px;\n  padding-top: 24px;\n  border-top: 1px solid #e2e8f0;\n}\n\n/* Settings Message */\n.settings-message {\n  position: absolute;\n  bottom: 80px;\n  left: 24px;\n  right: 24px;\n  padding: 12px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  z-index: 1000;\n  animation: slideUp 0.3s ease-out;\n}\n\n.settings-message.success {\n  background: #f0fdf4;\n  color: #166534;\n  border: 1px solid #bbf7d0;\n}\n\n.settings-message.error {\n  background: #fef2f2;\n  color: #dc2626;\n  border: 1px solid #fecaca;\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .settings-modal {\n    width: 100%;\n    max-width: 100vw;\n    max-height: 100vh;\n    border-radius: 0;\n  }\n\n  .settings-content {\n    flex-direction: column;\n  }\n\n  .settings-tabs {\n    flex-direction: row;\n    min-width: auto;\n    border-right: none;\n    border-bottom: 1px solid #e2e8f0;\n    overflow-x: auto;\n    padding: 8px 0;\n  }\n\n  .settings-tab {\n    white-space: nowrap;\n    padding: 8px 12px;\n    min-width: 100px;\n  }\n\n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .stats-row {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .link-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n "],sourceRoot:""}]);const s=a},206:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},261:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(660));class i extends o.default{select(e){let n=!1;const t=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!n?"":('"'===e&&(n=!n),e)).join("");return this.url.searchParams.set("select",t),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(e,{ascending:n=!0,nullsFirst:t,foreignTable:r,referencedTable:o=r}={}){const i=o?`${o}.order`:"order",a=this.url.searchParams.get(i);return this.url.searchParams.set(i,`${a?`${a},`:""}${e}.${n?"asc":"desc"}${void 0===t?"":t?".nullsfirst":".nullslast"}`),this}limit(e,{foreignTable:n,referencedTable:t=n}={}){const r=void 0===t?"limit":`${t}.limit`;return this.url.searchParams.set(r,`${e}`),this}range(e,n,{foreignTable:t,referencedTable:r=t}={}){const o=void 0===r?"offset":`${r}.offset`,i=void 0===r?"limit":`${r}.limit`;return this.url.searchParams.set(o,`${e}`),this.url.searchParams.set(i,""+(n-e+1)),this}abortSignal(e){return this.signal=e,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return"GET"===this.method?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:e=!1,verbose:n=!1,settings:t=!1,buffers:r=!1,wal:o=!1,format:i="text"}={}){var a;const s=[e?"analyze":null,n?"verbose":null,t?"settings":null,r?"buffers":null,o?"wal":null].filter(Boolean).join("|"),l=null!==(a=this.headers.Accept)&&void 0!==a?a:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${i}; for="${l}"; options=${s};`,this}rollback(){var e;return(null!==(e=this.headers.Prefer)&&void 0!==e?e:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}}n.default=i},279:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.PostgrestError=n.PostgrestBuilder=n.PostgrestTransformBuilder=n.PostgrestFilterBuilder=n.PostgrestQueryBuilder=n.PostgrestClient=void 0;const o=r(t(342));n.PostgrestClient=o.default;const i=r(t(45));n.PostgrestQueryBuilder=i.default;const a=r(t(825));n.PostgrestFilterBuilder=a.default;const s=r(t(261));n.PostgrestTransformBuilder=s.default;const l=r(t(660));n.PostgrestBuilder=l.default;const c=r(t(818));n.PostgrestError=c.default,n.default={PostgrestClient:o.default,PostgrestQueryBuilder:i.default,PostgrestFilterBuilder:a.default,PostgrestTransformBuilder:s.default,PostgrestBuilder:l.default,PostgrestError:c.default}},287:(e,n)=>{var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),h=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},A=Object.assign,g={};function m(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||p}function b(){}function y(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=m.prototype;var v=y.prototype=new b;v.constructor=y,A(v,m.prototype),v.isPureReactComponent=!0;var E=Array.isArray,x=Object.prototype.hasOwnProperty,C={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,n,r){var o,i={},a=null,s=null;if(null!=n)for(o in void 0!==n.ref&&(s=n.ref),void 0!==n.key&&(a=""+n.key),n)x.call(n,o)&&!w.hasOwnProperty(o)&&(i[o]=n[o]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];i.children=c}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===i[o]&&(i[o]=l[o]);return{$$typeof:t,type:e,key:a,ref:s,props:i,_owner:C.current}}function B(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var S=/\/+/g;function _(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(e){return n[e]})}(""+e.key):n.toString(36)}function j(e,n,o,i,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case t:case r:l=!0}}if(l)return a=a(l=e),e=""===i?"."+_(l,0):i,E(a)?(o="",null!=e&&(o=e.replace(S,"$&/")+"/"),j(a,n,o,"",function(e){return e})):null!=a&&(B(a)&&(a=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(S,"$&/")+"/")+e)),n.push(a)),1;if(l=0,i=""===i?".":i+":",E(e))for(var c=0;c<e.length;c++){var u=i+_(s=e[c],c);l+=j(s,n,o,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=j(s=s.value,n,o,u=i+_(s,c++),a);else if("object"===s)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return l}function T(e,n,t){if(null==e)return e;var r=[],o=0;return j(e,r,"","",function(e){return n.call(t,e,o++)}),r}function N(e){if(-1===e._status){var n=e._result;(n=n()).then(function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)},function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)}),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var P={current:null},O={transition:null},z={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:O,ReactCurrentOwner:C};function I(){throw Error("act(...) is not supported in production builds of React.")}n.Children={map:T,forEach:function(e,n,t){T(e,function(){n.apply(this,arguments)},t)},count:function(e){var n=0;return T(e,function(){n++}),n},toArray:function(e){return T(e,function(e){return e})||[]},only:function(e){if(!B(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=m,n.Fragment=o,n.Profiler=a,n.PureComponent=y,n.StrictMode=i,n.Suspense=u,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,n.act=I,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=A({},e.props),i=e.key,a=e.ref,s=e._owner;if(null!=n){if(void 0!==n.ref&&(a=n.ref,s=C.current),void 0!==n.key&&(i=""+n.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in n)x.call(n,c)&&!w.hasOwnProperty(c)&&(o[c]=void 0===n[c]&&void 0!==l?l[c]:n[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];o.children=l}return{$$typeof:t,type:e.type,key:i,ref:a,props:o,_owner:s}},n.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},n.createElement=k,n.createFactory=function(e){var n=k.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:c,render:e}},n.isValidElement=B,n.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:N}},n.memo=function(e,n){return{$$typeof:d,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=O.transition;O.transition={};try{e()}finally{O.transition=n}},n.unstable_act=I,n.useCallback=function(e,n){return P.current.useCallback(e,n)},n.useContext=function(e){return P.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return P.current.useDeferredValue(e)},n.useEffect=function(e,n){return P.current.useEffect(e,n)},n.useId=function(){return P.current.useId()},n.useImperativeHandle=function(e,n,t){return P.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return P.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return P.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return P.current.useMemo(e,n)},n.useReducer=function(e,n,t){return P.current.useReducer(e,n,t)},n.useRef=function(e){return P.current.useRef(e)},n.useState=function(e){return P.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return P.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return P.current.useTransition()},n.version="18.3.1"},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t}).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},338:(e,n,t)=>{var r=t(961);n.H=r.createRoot,r.hydrateRoot},342:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(45)),i=r(t(825)),a=t(530);class s{constructor(e,{headers:n={},schema:t,fetch:r}={}){this.url=e,this.headers=Object.assign(Object.assign({},a.DEFAULT_HEADERS),n),this.schemaName=t,this.fetch=r}from(e){const n=new URL(`${this.url}/${e}`);return new o.default(n,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(e){return new s(this.url,{headers:this.headers,schema:e,fetch:this.fetch})}rpc(e,n={},{head:t=!1,get:r=!1,count:o}={}){let a;const s=new URL(`${this.url}/rpc/${e}`);let l;t||r?(a=t?"HEAD":"GET",Object.entries(n).filter(([e,n])=>void 0!==n).map(([e,n])=>[e,Array.isArray(n)?`{${n.join(",")}}`:`${n}`]).forEach(([e,n])=>{s.searchParams.append(e,n)})):(a="POST",l=n);const c=Object.assign({},this.headers);return o&&(c.Prefer=`count=${o}`),new i.default({method:a,url:s,headers:c,schema:this.schemaName,body:l,fetch:this.fetch,allowEmpty:!1})}}n.default=s},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},463:(e,n)=>{function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,o=e[r];if(!(0<i(o,n)))break e;e[r]=n,e[t]=o,t=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var s=2*(r+1)-1,l=e[s],c=s+1,u=e[c];if(0>i(l,t))c<o&&0>i(u,l)?(e[r]=u,e[c]=t,r=c):(e[r]=l,e[s]=t,r=s);else{if(!(c<o&&0>i(u,t)))break e;e[r]=u,e[c]=t,r=c}}}return n}function i(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;n.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();n.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,f=null,h=3,p=!1,A=!1,g=!1,m="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function v(e){for(var n=r(u);null!==n;){if(null===n.callback)o(u);else{if(!(n.startTime<=e))break;o(u),n.sortIndex=n.expirationTime,t(c,n)}n=r(u)}}function E(e){if(g=!1,v(e),!A)if(null!==r(c))A=!0,O(x);else{var n=r(u);null!==n&&z(E,n.startTime-e)}}function x(e,t){A=!1,g&&(g=!1,b(B),B=-1),p=!0;var i=h;try{for(v(t),f=r(c);null!==f&&(!(f.expirationTime>t)||e&&!j());){var a=f.callback;if("function"==typeof a){f.callback=null,h=f.priorityLevel;var s=a(f.expirationTime<=t);t=n.unstable_now(),"function"==typeof s?f.callback=s:f===r(c)&&o(c),v(t)}else o(c);f=r(c)}if(null!==f)var l=!0;else{var d=r(u);null!==d&&z(E,d.startTime-t),l=!1}return l}finally{f=null,h=i,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var C,w=!1,k=null,B=-1,S=5,_=-1;function j(){return!(n.unstable_now()-_<S)}function T(){if(null!==k){var e=n.unstable_now();_=e;var t=!0;try{t=k(!0,e)}finally{t?C():(w=!1,k=null)}}else w=!1}if("function"==typeof y)C=function(){y(T)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,P=N.port2;N.port1.onmessage=T,C=function(){P.postMessage(null)}}else C=function(){m(T,0)};function O(e){k=e,w||(w=!0,C())}function z(e,t){B=m(function(){e(n.unstable_now())},t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){A||p||(A=!0,O(x))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):S=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return h},n.unstable_getFirstCallbackNode=function(){return r(c)},n.unstable_next=function(e){switch(h){case 1:case 2:case 3:var n=3;break;default:n=h}var t=h;h=n;try{return e()}finally{h=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=h;h=e;try{return n()}finally{h=t}},n.unstable_scheduleCallback=function(e,o,i){var a=n.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>a?(e.sortIndex=i,t(u,e),null===r(c)&&e===r(u)&&(g?(b(B),B=-1):g=!0,z(E,i-a))):(e.sortIndex=s,t(c,e),A||p||(A=!0,O(x))),e},n.unstable_shouldYield=j,n.unstable_wrapCallback=function(e){var n=h;return function(){var t=h;h=n;try{return e.apply(this,arguments)}finally{h=t}}}},519:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.version=void 0,n.version="0.0.0-automated"},530:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.DEFAULT_HEADERS=void 0;const r=t(519);n.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${r.version}`}},540:(e,n,t)=>{e.exports=t(287)},551:(e,n,t)=>{var r=t(540),o=t(982);function i(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(e,n){c(e,n),c(e+"Capture",n)}function c(e,n){for(s[e]=n,e=0;e<n.length;e++)a.add(n[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},p={};function A(e,n,t,r,o,i,a){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){g[e]=new A(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var n=e[0];g[n]=new A(n,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){g[e]=new A(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){g[e]=new A(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){g[e]=new A(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){g[e]=new A(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){g[e]=new A(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){g[e]=new A(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){g[e]=new A(e,5,!1,e.toLowerCase(),null,!1,!1)});var m=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function y(e,n,t,r){var o=g.hasOwnProperty(n)?g[n]:null;(null!==o?0!==o.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,o,r)&&(t=null),r||null===o?function(e){return!!d.call(p,e)||!d.call(h,e)&&(f.test(e)?p[e]=!0:(h[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):o.mustUseProperty?e[o.propertyName]=null===t?3!==o.type&&"":t:(n=o.attributeName,r=o.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(o=o.type)||4===o&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var n=e.replace(m,b);g[n]=new A(n,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var n=e.replace(m,b);g[n]=new A(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var n=e.replace(m,b);g[n]=new A(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){g[e]=new A(e,1,!1,e.toLowerCase(),null,!1,!1)}),g.xlinkHref=new A("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){g[e]=new A(e,1,!1,e.toLowerCase(),null,!0,!0)});var v=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=Symbol.for("react.element"),x=Symbol.for("react.portal"),C=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),B=Symbol.for("react.provider"),S=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),j=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),N=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var O=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var z=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}var R,L=Object.assign;function D(e){if(void 0===R)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);R=n&&n[1]||""}return"\n"+R+e}var U=!1;function $(e,n){if(!e||U)return"";U=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var o=n.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s]){var l="\n"+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=s);break}}}finally{U=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?D(e):""}function M(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 1:return $(e.type,!0);default:return""}}function F(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case x:return"Portal";case k:return"Profiler";case w:return"StrictMode";case j:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case S:return(e.displayName||"Context")+".Consumer";case B:return(e._context.displayName||"Context")+".Provider";case _:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case N:return null!==(n=e.displayName||null)?n:F(e.type)||"Memo";case P:n=e._payload,e=e._init;try{return F(e(n))}catch(e){}}return null}function q(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return F(n);case 8:return n===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function Y(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function V(e){e._valueTracker||(e._valueTracker=function(e){var n=Y(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,i=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function Q(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function H(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function G(e,n){var t=n.checked;return L({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function K(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=W(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function Z(e,n){null!=(n=n.checked)&&y(e,"checked",n,!1)}function J(e,n){Z(e,n);var t=W(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,W(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function X(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&H(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+W(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(i(91));return L({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(i(92));if(ne(t)){if(1<t.length)throw Error(i(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:W(t)}}function ie(e,n){var t=W(n.value),r=W(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ae(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?se(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction(function(){return ue(e,n)})}:ue);function fe(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function Ae(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||he.hasOwnProperty(e)&&he[e]?(""+n).trim():n+"px"}function ge(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),o=Ae(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,o):e[t]=o}}Object.keys(he).forEach(function(e){pe.forEach(function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),he[n]=he[e]})});var me=L({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,n){if(n){if(me[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(i(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(i(62))}}function ye(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ve=null;function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Ce=null,we=null;function ke(e){if(e=vo(e)){if("function"!=typeof xe)throw Error(i(280));var n=e.stateNode;n&&(n=xo(n),xe(e.stateNode,e.type,n))}}function Be(e){Ce?we?we.push(e):we=[e]:Ce=e}function Se(){if(Ce){var e=Ce,n=we;if(we=Ce=null,ke(e),n)for(e=0;e<n.length;e++)ke(n[e])}}function _e(e,n){return e(n)}function je(){}var Te=!1;function Ne(e,n,t){if(Te)return e(n,t);Te=!0;try{return _e(e,n,t)}finally{Te=!1,(null!==Ce||null!==we)&&(je(),Se())}}function Pe(e,n){var t=e.stateNode;if(null===t)return null;var r=xo(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(i(231,n,typeof t));return t}var Oe=!1;if(u)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){Oe=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(ue){Oe=!1}function Ie(e,n,t,r,o,i,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{n.apply(t,c)}catch(e){this.onError(e)}}var Re=!1,Le=null,De=!1,Ue=null,$e={onError:function(e){Re=!0,Le=e}};function Me(e,n,t,r,o,i,a,s,l){Re=!1,Le=null,Ie.apply($e,arguments)}function Fe(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function qe(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function We(e){if(Fe(e)!==e)throw Error(i(188))}function Ye(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=Fe(e)))throw Error(i(188));return n!==e?null:e}for(var t=e,r=n;;){var o=t.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){t=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===t)return We(o),e;if(a===r)return We(o),n;a=a.sibling}throw Error(i(188))}if(t.return!==r.return)t=o,r=a;else{for(var s=!1,l=o.child;l;){if(l===t){s=!0,t=o,r=a;break}if(l===r){s=!0,r=o,t=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===t){s=!0,t=a,r=o;break}if(l===r){s=!0,r=a,t=o;break}l=l.sibling}if(!s)throw Error(i(189))}}if(t.alternate!==r)throw Error(i(190))}if(3!==t.tag)throw Error(i(188));return t.stateNode.current===t?e:n}(e))?Ve(e):null}function Ve(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=Ve(e);if(null!==n)return n;e=e.sibling}return null}var Qe=o.unstable_scheduleCallback,He=o.unstable_cancelCallback,Ge=o.unstable_shouldYield,Ke=o.unstable_requestPaint,Ze=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Xe=o.unstable_ImmediatePriority,en=o.unstable_UserBlockingPriority,nn=o.unstable_NormalPriority,tn=o.unstable_LowPriority,rn=o.unstable_IdlePriority,on=null,an=null,sn=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ln(e)/cn|0)|0},ln=Math.log,cn=Math.LN2,un=64,dn=4194304;function fn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function hn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&t;if(0!==a){var s=a&~o;0!==s?r=fn(s):0!==(i&=a)&&(r=fn(i))}else 0!==(a=t&~o)?r=fn(a):0!==i&&(r=fn(i));if(0===r)return 0;if(0!==n&&n!==r&&0===(n&o)&&((o=r&-r)>=(i=n&-n)||16===o&&4194240&i))return n;if(4&r&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)o=1<<(t=31-sn(n)),r|=e[t],n&=~o;return r}function pn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function An(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gn(){var e=un;return!(4194240&(un<<=1))&&(un=64),e}function mn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function bn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-sn(n)]=t}function yn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-sn(t),o=1<<r;o&n|e[r]&n&&(e[r]|=n),t&=~o}}var vn=0;function En(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var xn,Cn,wn,kn,Bn,Sn=!1,_n=[],jn=null,Tn=null,Nn=null,Pn=new Map,On=new Map,zn=[],In="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rn(e,n){switch(e){case"focusin":case"focusout":jn=null;break;case"dragenter":case"dragleave":Tn=null;break;case"mouseover":case"mouseout":Nn=null;break;case"pointerover":case"pointerout":Pn.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":On.delete(n.pointerId)}}function Ln(e,n,t,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==n&&null!==(n=vo(n))&&Cn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==o&&-1===n.indexOf(o)&&n.push(o),e)}function Dn(e){var n=yo(e.target);if(null!==n){var t=Fe(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=qe(t)))return e.blockedOn=n,void Bn(e.priority,function(){wn(t)})}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Un(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Kn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=vo(t))&&Cn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);ve=r,t.target.dispatchEvent(r),ve=null,n.shift()}return!0}function $n(e,n,t){Un(e)&&t.delete(n)}function Mn(){Sn=!1,null!==jn&&Un(jn)&&(jn=null),null!==Tn&&Un(Tn)&&(Tn=null),null!==Nn&&Un(Nn)&&(Nn=null),Pn.forEach($n),On.forEach($n)}function Fn(e,n){e.blockedOn===n&&(e.blockedOn=null,Sn||(Sn=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Mn)))}function qn(e){function n(n){return Fn(n,e)}if(0<_n.length){Fn(_n[0],e);for(var t=1;t<_n.length;t++){var r=_n[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==jn&&Fn(jn,e),null!==Tn&&Fn(Tn,e),null!==Nn&&Fn(Nn,e),Pn.forEach(n),On.forEach(n),t=0;t<zn.length;t++)(r=zn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<zn.length&&null===(t=zn[0]).blockedOn;)Dn(t),null===t.blockedOn&&zn.shift()}var Wn=v.ReactCurrentBatchConfig,Yn=!0;function Vn(e,n,t,r){var o=vn,i=Wn.transition;Wn.transition=null;try{vn=1,Hn(e,n,t,r)}finally{vn=o,Wn.transition=i}}function Qn(e,n,t,r){var o=vn,i=Wn.transition;Wn.transition=null;try{vn=4,Hn(e,n,t,r)}finally{vn=o,Wn.transition=i}}function Hn(e,n,t,r){if(Yn){var o=Kn(e,n,t,r);if(null===o)Wr(e,n,r,Gn,t),Rn(e,r);else if(function(e,n,t,r,o){switch(n){case"focusin":return jn=Ln(jn,e,n,t,r,o),!0;case"dragenter":return Tn=Ln(Tn,e,n,t,r,o),!0;case"mouseover":return Nn=Ln(Nn,e,n,t,r,o),!0;case"pointerover":var i=o.pointerId;return Pn.set(i,Ln(Pn.get(i)||null,e,n,t,r,o)),!0;case"gotpointercapture":return i=o.pointerId,On.set(i,Ln(On.get(i)||null,e,n,t,r,o)),!0}return!1}(o,e,n,t,r))r.stopPropagation();else if(Rn(e,r),4&n&&-1<In.indexOf(e)){for(;null!==o;){var i=vo(o);if(null!==i&&xn(i),null===(i=Kn(e,n,t,r))&&Wr(e,n,r,Gn,t),i===o)break;o=i}null!==o&&r.stopPropagation()}else Wr(e,n,r,null,t)}}var Gn=null;function Kn(e,n,t,r){if(Gn=null,null!==(e=yo(e=Ee(r))))if(null===(n=Fe(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=qe(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Gn=e,null}function Zn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Xe:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Jn=null,Xn=null,et=null;function nt(){if(et)return et;var e,n,t=Xn,r=t.length,o="value"in Jn?Jn.value:Jn.textContent,i=o.length;for(e=0;e<r&&t[e]===o[e];e++);var a=r-e;for(n=1;n<=a&&t[r-n]===o[i-n];n++);return et=o.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function ot(){return!1}function it(e){function n(n,t,r,o,i){for(var a in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(n=e[a],this[a]=n?n(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rt:ot,this.isPropagationStopped=ot,this}return L(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var at,st,lt,ct={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ut=it(ct),dt=L({},ct,{view:0,detail:0}),ft=it(dt),ht=L({},dt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kt,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lt&&(lt&&"mousemove"===e.type?(at=e.screenX-lt.screenX,st=e.screenY-lt.screenY):st=at=0,lt=e),at)},movementY:function(e){return"movementY"in e?e.movementY:st}}),pt=it(ht),At=it(L({},ht,{dataTransfer:0})),gt=it(L({},dt,{relatedTarget:0})),mt=it(L({},ct,{animationName:0,elapsedTime:0,pseudoElement:0})),bt=L({},ct,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yt=it(bt),vt=it(L({},ct,{data:0})),Et={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Ct={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function wt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=Ct[e])&&!!n[e]}function kt(){return wt}var Bt=L({},dt,{key:function(e){if(e.key){var n=Et[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xt[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kt,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),St=it(Bt),_t=it(L({},ht,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),jt=it(L({},dt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kt})),Tt=it(L({},ct,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nt=L({},ht,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Pt=it(Nt),Ot=[9,13,27,32],zt=u&&"CompositionEvent"in window,It=null;u&&"documentMode"in document&&(It=document.documentMode);var Rt=u&&"TextEvent"in window&&!It,Lt=u&&(!zt||It&&8<It&&11>=It),Dt=String.fromCharCode(32),Ut=!1;function $t(e,n){switch(e){case"keyup":return-1!==Ot.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Mt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ft=!1,qt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!qt[e.type]:"textarea"===n}function Yt(e,n,t,r){Be(r),0<(n=Vr(n,"onChange")).length&&(t=new ut("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Vt=null,Qt=null;function Ht(e){Dr(e,0)}function Gt(e){if(Q(Eo(e)))return e}function Kt(e,n){if("change"===e)return n}var Zt=!1;if(u){var Jt;if(u){var Xt="oninput"in document;if(!Xt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Xt="function"==typeof er.oninput}Jt=Xt}else Jt=!1;Zt=Jt&&(!document.documentMode||9<document.documentMode)}function nr(){Vt&&(Vt.detachEvent("onpropertychange",tr),Qt=Vt=null)}function tr(e){if("value"===e.propertyName&&Gt(Qt)){var n=[];Yt(n,Qt,e,Ee(e)),Ne(Ht,n)}}function rr(e,n,t){"focusin"===e?(nr(),Qt=t,(Vt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gt(Qt)}function ir(e,n){if("click"===e)return Gt(n)}function ar(e,n){if("input"===e||"change"===e)return Gt(n)}var sr="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function lr(e,n){if(sr(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var o=t[r];if(!d.call(n,o)||!sr(e[o],n[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,n){var t,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?dr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function fr(){for(var e=window,n=H();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=H((e=n.contentWindow).document)}return n}function hr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function pr(e){var n=fr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&dr(t.ownerDocument.documentElement,t)){if(null!==r&&hr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var o=t.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=ur(t,i);var a=ur(t,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((n=n.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(n),e.extend(a.node,a.offset)):(n.setEnd(a.node,a.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Ar=u&&"documentMode"in document&&11>=document.documentMode,gr=null,mr=null,br=null,yr=!1;function vr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;yr||null==gr||gr!==H(r)||(r="selectionStart"in(r=gr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&lr(br,r)||(br=r,0<(r=Vr(mr,"onSelect")).length&&(n=new ut("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=gr)))}function Er(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var xr={animationend:Er("Animation","AnimationEnd"),animationiteration:Er("Animation","AnimationIteration"),animationstart:Er("Animation","AnimationStart"),transitionend:Er("Transition","TransitionEnd")},Cr={},wr={};function kr(e){if(Cr[e])return Cr[e];if(!xr[e])return e;var n,t=xr[e];for(n in t)if(t.hasOwnProperty(n)&&n in wr)return Cr[e]=t[n];return e}u&&(wr=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var Br=kr("animationend"),Sr=kr("animationiteration"),_r=kr("animationstart"),jr=kr("transitionend"),Tr=new Map,Nr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Pr(e,n){Tr.set(e,n),l(n,[e])}for(var Or=0;Or<Nr.length;Or++){var zr=Nr[Or];Pr(zr.toLowerCase(),"on"+(zr[0].toUpperCase()+zr.slice(1)))}Pr(Br,"onAnimationEnd"),Pr(Sr,"onAnimationIteration"),Pr(_r,"onAnimationStart"),Pr("dblclick","onDoubleClick"),Pr("focusin","onFocus"),Pr("focusout","onBlur"),Pr(jr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Lr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,o,a,s,l,c){if(Me.apply(this,arguments),Re){if(!Re)throw Error(i(198));var u=Le;Re=!1,Le=null,De||(De=!0,Ue=u)}}(r,n,void 0,e),e.currentTarget=null}function Dr(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],o=r.event;r=r.listeners;e:{var i=void 0;if(n)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==i&&o.isPropagationStopped())break e;Lr(o,s,c),i=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,c=s.currentTarget,s=s.listener,l!==i&&o.isPropagationStopped())break e;Lr(o,s,c),i=l}}}if(De)throw e=Ue,De=!1,Ue=null,e}function Ur(e,n){var t=n[go];void 0===t&&(t=n[go]=new Set);var r=e+"__bubble";t.has(r)||(qr(n,e,2,!1),t.add(r))}function $r(e,n,t){var r=0;n&&(r|=4),qr(t,e,r,n)}var Mr="_reactListening"+Math.random().toString(36).slice(2);function Fr(e){if(!e[Mr]){e[Mr]=!0,a.forEach(function(n){"selectionchange"!==n&&(Rr.has(n)||$r(n,!1,e),$r(n,!0,e))});var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Mr]||(n[Mr]=!0,$r("selectionchange",!1,n))}}function qr(e,n,t,r){switch(Zn(n)){case 1:var o=Vn;break;case 4:o=Qn;break;default:o=Hn}t=o.bind(null,n,t,e),o=void 0,!Oe||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(o=!0),r?void 0!==o?e.addEventListener(n,t,{capture:!0,passive:o}):e.addEventListener(n,t,!0):void 0!==o?e.addEventListener(n,t,{passive:o}):e.addEventListener(n,t,!1)}function Wr(e,n,t,r,o){var i=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=yo(s)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}s=s.parentNode}}r=r.return}Ne(function(){var r=i,o=Ee(t),a=[];e:{var s=Tr.get(e);if(void 0!==s){var l=ut,c=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":l=St;break;case"focusin":c="focus",l=gt;break;case"focusout":c="blur",l=gt;break;case"beforeblur":case"afterblur":l=gt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=At;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=jt;break;case Br:case Sr:case _r:l=mt;break;case jr:l=Tt;break;case"scroll":l=ft;break;case"wheel":l=Pt;break;case"copy":case"cut":case"paste":l=yt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=_t}var u=!!(4&n),d=!u&&"scroll"===e,f=u?null!==s?s+"Capture":null:s;u=[];for(var h,p=r;null!==p;){var A=(h=p).stateNode;if(5===h.tag&&null!==A&&(h=A,null!==f&&null!=(A=Pe(p,f))&&u.push(Yr(p,A,h))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,t,o),a.push({event:s,listeners:u}))}}if(!(7&n)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||t===ve||!(c=t.relatedTarget||t.fromElement)||!yo(c)&&!c[Ao])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=t.relatedTarget||t.toElement)?yo(c):null)&&(c!==(d=Fe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=pt,A="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=_t,A="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?s:Eo(l),h=null==c?s:Eo(c),(s=new u(A,p+"leave",l,t,o)).target=d,s.relatedTarget=h,A=null,yo(o)===r&&((u=new u(f,p+"enter",c,t,o)).target=h,u.relatedTarget=d,A=u),d=A,l&&c)e:{for(f=c,p=0,h=u=l;h;h=Qr(h))p++;for(h=0,A=f;A;A=Qr(A))h++;for(;0<p-h;)u=Qr(u),p--;for(;0<h-p;)f=Qr(f),h--;for(;p--;){if(u===f||null!==f&&u===f.alternate)break e;u=Qr(u),f=Qr(f)}u=null}else u=null;null!==l&&Hr(a,s,l,u,!1),null!==c&&null!==d&&Hr(a,d,c,u,!0)}if("select"===(l=(s=r?Eo(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=Kt;else if(Wt(s))if(Zt)g=ar;else{g=or;var m=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=ir);switch(g&&(g=g(e,r))?Yt(a,g,t,o):(m&&m(e,s,r),"focusout"===e&&(m=s._wrapperState)&&m.controlled&&"number"===s.type&&ee(s,"number",s.value)),m=r?Eo(r):window,e){case"focusin":(Wt(m)||"true"===m.contentEditable)&&(gr=m,mr=r,br=null);break;case"focusout":br=mr=gr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,vr(a,t,o);break;case"selectionchange":if(Ar)break;case"keydown":case"keyup":vr(a,t,o)}var b;if(zt)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Ft?$t(e,t)&&(y="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(y="onCompositionStart");y&&(Lt&&"ko"!==t.locale&&(Ft||"onCompositionStart"!==y?"onCompositionEnd"===y&&Ft&&(b=nt()):(Xn="value"in(Jn=o)?Jn.value:Jn.textContent,Ft=!0)),0<(m=Vr(r,y)).length&&(y=new vt(y,e,null,t,o),a.push({event:y,listeners:m}),(b||null!==(b=Mt(t)))&&(y.data=b))),(b=Rt?function(e,n){switch(e){case"compositionend":return Mt(n);case"keypress":return 32!==n.which?null:(Ut=!0,Dt);case"textInput":return(e=n.data)===Dt&&Ut?null:e;default:return null}}(e,t):function(e,n){if(Ft)return"compositionend"===e||!zt&&$t(e,n)?(e=nt(),et=Xn=Jn=null,Ft=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Lt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Vr(r,"onBeforeInput")).length&&(o=new vt("onBeforeInput","beforeinput",null,t,o),a.push({event:o,listeners:r}),o.data=b)}Dr(a,n)})}function Yr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Vr(e,n){for(var t=n+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Pe(e,t))&&r.unshift(Yr(e,i,o)),null!=(i=Pe(e,n))&&r.push(Yr(e,i,o))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Hr(e,n,t,r,o){for(var i=n._reactName,a=[];null!==t&&t!==r;){var s=t,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,o?null!=(l=Pe(t,i))&&a.unshift(Yr(t,l,s)):o||null!=(l=Pe(t,i))&&a.push(Yr(t,l,s))),t=t.return}0!==a.length&&e.push({event:n,listeners:a})}var Gr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Zr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Kr,"")}function Jr(e,n,t){if(n=Zr(n),Zr(e)!==n&&t)throw Error(i(425))}function Xr(){}var eo=null,no=null;function to(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(so)}:ro;function so(e){setTimeout(function(){throw e})}function lo(e,n){var t=n,r=0;do{var o=t.nextSibling;if(e.removeChild(t),o&&8===o.nodeType)if("/$"===(t=o.data)){if(0===r)return e.removeChild(o),void qn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=o}while(t);qn(n)}function co(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function uo(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),ho="__reactFiber$"+fo,po="__reactProps$"+fo,Ao="__reactContainer$"+fo,go="__reactEvents$"+fo,mo="__reactListeners$"+fo,bo="__reactHandles$"+fo;function yo(e){var n=e[ho];if(n)return n;for(var t=e.parentNode;t;){if(n=t[Ao]||t[ho]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=uo(e);null!==e;){if(t=e[ho])return t;e=uo(e)}return n}t=(e=t).parentNode}return null}function vo(e){return!(e=e[ho]||e[Ao])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function xo(e){return e[po]||null}var Co=[],wo=-1;function ko(e){return{current:e}}function Bo(e){0>wo||(e.current=Co[wo],Co[wo]=null,wo--)}function So(e,n){wo++,Co[wo]=e.current,e.current=n}var _o={},jo=ko(_o),To=ko(!1),No=_o;function Po(e,n){var t=e.type.contextTypes;if(!t)return _o;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in t)i[o]=n[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=i),i}function Oo(e){return null!=e.childContextTypes}function zo(){Bo(To),Bo(jo)}function Io(e,n,t){if(jo.current!==_o)throw Error(i(168));So(jo,n),So(To,t)}function Ro(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var o in r=r.getChildContext())if(!(o in n))throw Error(i(108,q(e)||"Unknown",o));return L({},t,r)}function Lo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_o,No=jo.current,So(jo,e),So(To,To.current),!0}function Do(e,n,t){var r=e.stateNode;if(!r)throw Error(i(169));t?(e=Ro(e,n,No),r.__reactInternalMemoizedMergedChildContext=e,Bo(To),Bo(jo),So(jo,e)):Bo(To),So(To,t)}var Uo=null,$o=!1,Mo=!1;function Fo(e){null===Uo?Uo=[e]:Uo.push(e)}function qo(){if(!Mo&&null!==Uo){Mo=!0;var e=0,n=vn;try{var t=Uo;for(vn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Uo=null,$o=!1}catch(n){throw null!==Uo&&(Uo=Uo.slice(e+1)),Qe(Xe,qo),n}finally{vn=n,Mo=!1}}return null}var Wo=[],Yo=0,Vo=null,Qo=0,Ho=[],Go=0,Ko=null,Zo=1,Jo="";function Xo(e,n){Wo[Yo++]=Qo,Wo[Yo++]=Vo,Vo=e,Qo=n}function ei(e,n,t){Ho[Go++]=Zo,Ho[Go++]=Jo,Ho[Go++]=Ko,Ko=e;var r=Zo;e=Jo;var o=32-sn(r)-1;r&=~(1<<o),t+=1;var i=32-sn(n)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Zo=1<<32-sn(n)+o|t<<o|r,Jo=i+e}else Zo=1<<i|t<<o|r,Jo=e}function ni(e){null!==e.return&&(Xo(e,1),ei(e,1,0))}function ti(e){for(;e===Vo;)Vo=Wo[--Yo],Wo[Yo]=null,Qo=Wo[--Yo],Wo[Yo]=null;for(;e===Ko;)Ko=Ho[--Go],Ho[Go]=null,Jo=Ho[--Go],Ho[Go]=null,Zo=Ho[--Go],Ho[Go]=null}var ri=null,oi=null,ii=!1,ai=null;function si(e,n){var t=Nc(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function li(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,ri=e,oi=co(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,ri=e,oi=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Ko?{id:Zo,overflow:Jo}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=Nc(18,null,null,0)).stateNode=n,t.return=e,e.child=t,ri=e,oi=null,!0);default:return!1}}function ci(e){return!(!(1&e.mode)||128&e.flags)}function ui(e){if(ii){var n=oi;if(n){var t=n;if(!li(e,n)){if(ci(e))throw Error(i(418));n=co(t.nextSibling);var r=ri;n&&li(e,n)?si(r,t):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(ci(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function di(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function fi(e){if(e!==ri)return!1;if(!ii)return di(e),ii=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!to(e.type,e.memoizedProps)),n&&(n=oi)){if(ci(e))throw hi(),Error(i(418));for(;n;)si(e,n),n=co(n.nextSibling)}if(di(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){oi=co(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}oi=null}}else oi=ri?co(e.stateNode.nextSibling):null;return!0}function hi(){for(var e=oi;e;)e=co(e.nextSibling)}function pi(){oi=ri=null,ii=!1}function Ai(e){null===ai?ai=[e]:ai.push(e)}var gi=v.ReactCurrentBatchConfig;function mi(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(i(309));var r=t.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===a?n.ref:(n=function(e){var n=o.refs;null===e?delete n[a]:n[a]=e},n._stringRef=a,n)}if("string"!=typeof e)throw Error(i(284));if(!t._owner)throw Error(i(290,e))}return e}function bi(e,n){throw e=Object.prototype.toString.call(n),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function yi(e){return(0,e._init)(e._payload)}function vi(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function o(e,n){return(e=Oc(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function s(n){return e&&null===n.alternate&&(n.flags|=2),n}function l(e,n,t,r){return null===n||6!==n.tag?((n=Lc(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function c(e,n,t,r){var i=t.type;return i===C?d(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===P&&yi(i)===n.type)?((r=o(n,t.props)).ref=mi(e,n,t),r.return=e,r):((r=zc(t.type,t.key,t.props,null,e.mode,r)).ref=mi(e,n,t),r.return=e,r)}function u(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Dc(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function d(e,n,t,r,i){return null===n||7!==n.tag?((n=Ic(t,e.mode,r,i)).return=e,n):((n=o(n,t)).return=e,n)}function f(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Lc(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return(t=zc(n.type,n.key,n.props,null,e.mode,t)).ref=mi(e,null,n),t.return=e,t;case x:return(n=Dc(n,e.mode,t)).return=e,n;case P:return f(e,(0,n._init)(n._payload),t)}if(ne(n)||I(n))return(n=Ic(n,e.mode,t,null)).return=e,n;bi(e,n)}return null}function h(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==o?null:l(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return t.key===o?c(e,n,t,r):null;case x:return t.key===o?u(e,n,t,r):null;case P:return h(e,n,(o=t._init)(t._payload),r)}if(ne(t)||I(t))return null!==o?null:d(e,n,t,r,null);bi(e,t)}return null}function p(e,n,t,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return c(n,e=e.get(null===r.key?t:r.key)||null,r,o);case x:return u(n,e=e.get(null===r.key?t:r.key)||null,r,o);case P:return p(e,n,t,(0,r._init)(r._payload),o)}if(ne(r)||I(r))return d(n,e=e.get(t)||null,r,o,null);bi(n,r)}return null}function A(o,i,s,l){for(var c=null,u=null,d=i,A=i=0,g=null;null!==d&&A<s.length;A++){d.index>A?(g=d,d=null):g=d.sibling;var m=h(o,d,s[A],l);if(null===m){null===d&&(d=g);break}e&&d&&null===m.alternate&&n(o,d),i=a(m,i,A),null===u?c=m:u.sibling=m,u=m,d=g}if(A===s.length)return t(o,d),ii&&Xo(o,A),c;if(null===d){for(;A<s.length;A++)null!==(d=f(o,s[A],l))&&(i=a(d,i,A),null===u?c=d:u.sibling=d,u=d);return ii&&Xo(o,A),c}for(d=r(o,d);A<s.length;A++)null!==(g=p(d,o,A,s[A],l))&&(e&&null!==g.alternate&&d.delete(null===g.key?A:g.key),i=a(g,i,A),null===u?c=g:u.sibling=g,u=g);return e&&d.forEach(function(e){return n(o,e)}),ii&&Xo(o,A),c}function g(o,s,l,c){var u=I(l);if("function"!=typeof u)throw Error(i(150));if(null==(l=u.call(l)))throw Error(i(151));for(var d=u=null,A=s,g=s=0,m=null,b=l.next();null!==A&&!b.done;g++,b=l.next()){A.index>g?(m=A,A=null):m=A.sibling;var y=h(o,A,b.value,c);if(null===y){null===A&&(A=m);break}e&&A&&null===y.alternate&&n(o,A),s=a(y,s,g),null===d?u=y:d.sibling=y,d=y,A=m}if(b.done)return t(o,A),ii&&Xo(o,g),u;if(null===A){for(;!b.done;g++,b=l.next())null!==(b=f(o,b.value,c))&&(s=a(b,s,g),null===d?u=b:d.sibling=b,d=b);return ii&&Xo(o,g),u}for(A=r(o,A);!b.done;g++,b=l.next())null!==(b=p(A,o,g,b.value,c))&&(e&&null!==b.alternate&&A.delete(null===b.key?g:b.key),s=a(b,s,g),null===d?u=b:d.sibling=b,d=b);return e&&A.forEach(function(e){return n(o,e)}),ii&&Xo(o,g),u}return function e(r,i,a,l){if("object"==typeof a&&null!==a&&a.type===C&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case E:e:{for(var c=a.key,u=i;null!==u;){if(u.key===c){if((c=a.type)===C){if(7===u.tag){t(r,u.sibling),(i=o(u,a.props.children)).return=r,r=i;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===P&&yi(c)===u.type){t(r,u.sibling),(i=o(u,a.props)).ref=mi(r,u,a),i.return=r,r=i;break e}t(r,u);break}n(r,u),u=u.sibling}a.type===C?((i=Ic(a.props.children,r.mode,l,a.key)).return=r,r=i):((l=zc(a.type,a.key,a.props,null,r.mode,l)).ref=mi(r,i,a),l.return=r,r=l)}return s(r);case x:e:{for(u=a.key;null!==i;){if(i.key===u){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){t(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}t(r,i);break}n(r,i),i=i.sibling}(i=Dc(a,r.mode,l)).return=r,r=i}return s(r);case P:return e(r,i,(u=a._init)(a._payload),l)}if(ne(a))return A(r,i,a,l);if(I(a))return g(r,i,a,l);bi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(t(r,i.sibling),(i=o(i,a)).return=r,r=i):(t(r,i),(i=Lc(a,r.mode,l)).return=r,r=i),s(r)):t(r,i)}}var Ei=vi(!0),xi=vi(!1),Ci=ko(null),wi=null,ki=null,Bi=null;function Si(){Bi=ki=wi=null}function _i(e){var n=Ci.current;Bo(Ci),e._currentValue=n}function ji(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function Ti(e,n){wi=e,Bi=ki=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&n)&&(ys=!0),e.firstContext=null)}function Ni(e){var n=e._currentValue;if(Bi!==e)if(e={context:e,memoizedValue:n,next:null},null===ki){if(null===wi)throw Error(i(308));ki=e,wi.dependencies={lanes:0,firstContext:e}}else ki=ki.next=e;return n}var Pi=null;function Oi(e){null===Pi?Pi=[e]:Pi.push(e)}function zi(e,n,t,r){var o=n.interleaved;return null===o?(t.next=t,Oi(n)):(t.next=o.next,o.next=t),n.interleaved=t,Ii(e,r)}function Ii(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var Ri=!1;function Li(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Di(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ui(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function $i(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&_l){var o=r.pending;return null===o?n.next=n:(n.next=o.next,o.next=n),r.pending=n,Ii(e,t)}return null===(o=r.interleaved)?(n.next=n,Oi(r)):(n.next=o.next,o.next=n),r.interleaved=n,Ii(e,t)}function Mi(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}function Fi(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,i=null;if(null!==(t=t.firstBaseUpdate)){do{var a={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===i?o=i=a:i=i.next=a,t=t.next}while(null!==t);null===i?o=i=n:i=i.next=n}else o=i=n;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function qi(e,n,t,r){var o=e.updateQueue;Ri=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var l=s,c=l.next;l.next=null,null===a?i=c:a.next=c,a=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==a&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==i){var d=o.baseState;for(a=0,u=c=l=null,s=i;;){var f=s.lane,h=s.eventTime;if((r&f)===f){null!==u&&(u=u.next={eventTime:h,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,A=s;switch(f=n,h=t,A.tag){case 1:if("function"==typeof(p=A.payload)){d=p.call(h,d,f);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=A.payload)?p.call(h,d,f):p))break e;d=L({},d,f);break e;case 2:Ri=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(f=o.effects)?o.effects=[s]:f.push(s))}else h={eventTime:h,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=h,l=d):u=u.next=h,a|=f;if(null===(s=s.next)){if(null===(s=o.shared.pending))break;s=(f=s).next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}if(null===u&&(l=d),o.baseState=l,o.firstBaseUpdate=c,o.lastBaseUpdate=u,null!==(n=o.shared.interleaved)){o=n;do{a|=o.lane,o=o.next}while(o!==n)}else null===i&&(o.shared.lanes=0);Rl|=a,e.lanes=a,e.memoizedState=d}}function Wi(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],o=r.callback;if(null!==o){if(r.callback=null,r=t,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Yi={},Vi=ko(Yi),Qi=ko(Yi),Hi=ko(Yi);function Gi(e){if(e===Yi)throw Error(i(174));return e}function Ki(e,n){switch(So(Hi,n),So(Qi,e),So(Vi,Yi),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:le(null,"");break;default:n=le(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Bo(Vi),So(Vi,n)}function Zi(){Bo(Vi),Bo(Qi),Bo(Hi)}function Ji(e){Gi(Hi.current);var n=Gi(Vi.current),t=le(n,e.type);n!==t&&(So(Qi,e),So(Vi,t))}function Xi(e){Qi.current===e&&(Bo(Vi),Bo(Qi))}var ea=ko(0);function na(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ta=[];function ra(){for(var e=0;e<ta.length;e++)ta[e]._workInProgressVersionPrimary=null;ta.length=0}var oa=v.ReactCurrentDispatcher,ia=v.ReactCurrentBatchConfig,aa=0,sa=null,la=null,ca=null,ua=!1,da=!1,fa=0,ha=0;function pa(){throw Error(i(321))}function Aa(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!sr(e[t],n[t]))return!1;return!0}function ga(e,n,t,r,o,a){if(aa=a,sa=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,oa.current=null===e||null===e.memoizedState?Xa:es,e=t(r,o),da){a=0;do{if(da=!1,fa=0,25<=a)throw Error(i(301));a+=1,ca=la=null,n.updateQueue=null,oa.current=ns,e=t(r,o)}while(da)}if(oa.current=Ja,n=null!==la&&null!==la.next,aa=0,ca=la=sa=null,ua=!1,n)throw Error(i(300));return e}function ma(){var e=0!==fa;return fa=0,e}function ba(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ca?sa.memoizedState=ca=e:ca=ca.next=e,ca}function ya(){if(null===la){var e=sa.alternate;e=null!==e?e.memoizedState:null}else e=la.next;var n=null===ca?sa.memoizedState:ca.next;if(null!==n)ca=n,la=e;else{if(null===e)throw Error(i(310));e={memoizedState:(la=e).memoizedState,baseState:la.baseState,baseQueue:la.baseQueue,queue:la.queue,next:null},null===ca?sa.memoizedState=ca=e:ca=ca.next=e}return ca}function va(e,n){return"function"==typeof n?n(e):n}function Ea(e){var n=ya(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=la,o=r.baseQueue,a=t.pending;if(null!==a){if(null!==o){var s=o.next;o.next=a.next,a.next=s}r.baseQueue=o=a,t.pending=null}if(null!==o){a=o.next,r=r.baseState;var l=s=null,c=null,u=a;do{var d=u.lane;if((aa&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=f,s=r):c=c.next=f,sa.lanes|=d,Rl|=d}u=u.next}while(null!==u&&u!==a);null===c?s=r:c.next=l,sr(r,n.memoizedState)||(ys=!0),n.memoizedState=r,n.baseState=s,n.baseQueue=c,t.lastRenderedState=r}if(null!==(e=t.interleaved)){o=e;do{a=o.lane,sa.lanes|=a,Rl|=a,o=o.next}while(o!==e)}else null===o&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function xa(e){var n=ya(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=t.dispatch,o=t.pending,a=n.memoizedState;if(null!==o){t.pending=null;var s=o=o.next;do{a=e(a,s.action),s=s.next}while(s!==o);sr(a,n.memoizedState)||(ys=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function Ca(){}function wa(e,n){var t=sa,r=ya(),o=n(),a=!sr(r.memoizedState,o);if(a&&(r.memoizedState=o,ys=!0),r=r.queue,Ra(Sa.bind(null,t,r,e),[e]),r.getSnapshot!==n||a||null!==ca&&1&ca.memoizedState.tag){if(t.flags|=2048,Na(9,Ba.bind(null,t,r,o,n),void 0,null),null===jl)throw Error(i(349));30&aa||ka(t,n,o)}return o}function ka(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=sa.updateQueue)?(n={lastEffect:null,stores:null},sa.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Ba(e,n,t,r){n.value=t,n.getSnapshot=r,_a(n)&&ja(e)}function Sa(e,n,t){return t(function(){_a(n)&&ja(e)})}function _a(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!sr(e,t)}catch(e){return!0}}function ja(e){var n=Ii(e,1);null!==n&&tc(n,e,1,-1)}function Ta(e){var n=ba();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:va,lastRenderedState:e},n.queue=e,e=e.dispatch=Ha.bind(null,sa,e),[n.memoizedState,e]}function Na(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=sa.updateQueue)?(n={lastEffect:null,stores:null},sa.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Pa(){return ya().memoizedState}function Oa(e,n,t,r){var o=ba();sa.flags|=e,o.memoizedState=Na(1|n,t,void 0,void 0===r?null:r)}function za(e,n,t,r){var o=ya();r=void 0===r?null:r;var i=void 0;if(null!==la){var a=la.memoizedState;if(i=a.destroy,null!==r&&Aa(r,a.deps))return void(o.memoizedState=Na(n,t,i,r))}sa.flags|=e,o.memoizedState=Na(1|n,t,i,r)}function Ia(e,n){return Oa(8390656,8,e,n)}function Ra(e,n){return za(2048,8,e,n)}function La(e,n){return za(4,2,e,n)}function Da(e,n){return za(4,4,e,n)}function Ua(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function $a(e,n,t){return t=null!=t?t.concat([e]):null,za(4,4,Ua.bind(null,n,e),t)}function Ma(){}function Fa(e,n){var t=ya();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&Aa(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function qa(e,n){var t=ya();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&Aa(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Wa(e,n,t){return 21&aa?(sr(t,n)||(t=gn(),sa.lanes|=t,Rl|=t,e.baseState=!0),n):(e.baseState&&(e.baseState=!1,ys=!0),e.memoizedState=t)}function Ya(e,n){var t=vn;vn=0!==t&&4>t?t:4,e(!0);var r=ia.transition;ia.transition={};try{e(!1),n()}finally{vn=t,ia.transition=r}}function Va(){return ya().memoizedState}function Qa(e,n,t){var r=nc(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},Ga(e)?Ka(n,t):null!==(t=zi(e,n,t,r))&&(tc(t,e,r,ec()),Za(t,n,r))}function Ha(e,n,t){var r=nc(e),o={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(Ga(e))Ka(n,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=n.lastRenderedReducer))try{var a=n.lastRenderedState,s=i(a,t);if(o.hasEagerState=!0,o.eagerState=s,sr(s,a)){var l=n.interleaved;return null===l?(o.next=o,Oi(n)):(o.next=l.next,l.next=o),void(n.interleaved=o)}}catch(e){}null!==(t=zi(e,n,o,r))&&(tc(t,e,r,o=ec()),Za(t,n,r))}}function Ga(e){var n=e.alternate;return e===sa||null!==n&&n===sa}function Ka(e,n){da=ua=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function Za(e,n,t){if(4194240&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}var Ja={readContext:Ni,useCallback:pa,useContext:pa,useEffect:pa,useImperativeHandle:pa,useInsertionEffect:pa,useLayoutEffect:pa,useMemo:pa,useReducer:pa,useRef:pa,useState:pa,useDebugValue:pa,useDeferredValue:pa,useTransition:pa,useMutableSource:pa,useSyncExternalStore:pa,useId:pa,unstable_isNewReconciler:!1},Xa={readContext:Ni,useCallback:function(e,n){return ba().memoizedState=[e,void 0===n?null:n],e},useContext:Ni,useEffect:Ia,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,Oa(4194308,4,Ua.bind(null,n,e),t)},useLayoutEffect:function(e,n){return Oa(4194308,4,e,n)},useInsertionEffect:function(e,n){return Oa(4,2,e,n)},useMemo:function(e,n){var t=ba();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=ba();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=Qa.bind(null,sa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ba().memoizedState=e},useState:Ta,useDebugValue:Ma,useDeferredValue:function(e){return ba().memoizedState=e},useTransition:function(){var e=Ta(!1),n=e[0];return e=Ya.bind(null,e[1]),ba().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=sa,o=ba();if(ii){if(void 0===t)throw Error(i(407));t=t()}else{if(t=n(),null===jl)throw Error(i(349));30&aa||ka(r,n,t)}o.memoizedState=t;var a={value:t,getSnapshot:n};return o.queue=a,Ia(Sa.bind(null,r,a,e),[e]),r.flags|=2048,Na(9,Ba.bind(null,r,a,t,n),void 0,null),t},useId:function(){var e=ba(),n=jl.identifierPrefix;if(ii){var t=Jo;n=":"+n+"R"+(t=(Zo&~(1<<32-sn(Zo)-1)).toString(32)+t),0<(t=fa++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=ha++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},es={readContext:Ni,useCallback:Fa,useContext:Ni,useEffect:Ra,useImperativeHandle:$a,useInsertionEffect:La,useLayoutEffect:Da,useMemo:qa,useReducer:Ea,useRef:Pa,useState:function(){return Ea(va)},useDebugValue:Ma,useDeferredValue:function(e){return Wa(ya(),la.memoizedState,e)},useTransition:function(){return[Ea(va)[0],ya().memoizedState]},useMutableSource:Ca,useSyncExternalStore:wa,useId:Va,unstable_isNewReconciler:!1},ns={readContext:Ni,useCallback:Fa,useContext:Ni,useEffect:Ra,useImperativeHandle:$a,useInsertionEffect:La,useLayoutEffect:Da,useMemo:qa,useReducer:xa,useRef:Pa,useState:function(){return xa(va)},useDebugValue:Ma,useDeferredValue:function(e){var n=ya();return null===la?n.memoizedState=e:Wa(n,la.memoizedState,e)},useTransition:function(){return[xa(va)[0],ya().memoizedState]},useMutableSource:Ca,useSyncExternalStore:wa,useId:Va,unstable_isNewReconciler:!1};function ts(e,n){if(e&&e.defaultProps){for(var t in n=L({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}function rs(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:L({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var os={isMounted:function(e){return!!(e=e._reactInternals)&&Fe(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=ec(),o=nc(e),i=Ui(r,o);i.payload=n,null!=t&&(i.callback=t),null!==(n=$i(e,i,o))&&(tc(n,e,o,r),Mi(n,e,o))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=ec(),o=nc(e),i=Ui(r,o);i.tag=1,i.payload=n,null!=t&&(i.callback=t),null!==(n=$i(e,i,o))&&(tc(n,e,o,r),Mi(n,e,o))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=ec(),r=nc(e),o=Ui(t,r);o.tag=2,null!=n&&(o.callback=n),null!==(n=$i(e,o,r))&&(tc(n,e,r,t),Mi(n,e,r))}};function is(e,n,t,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(n.prototype&&n.prototype.isPureReactComponent&&lr(t,r)&&lr(o,i))}function as(e,n,t){var r=!1,o=_o,i=n.contextType;return"object"==typeof i&&null!==i?i=Ni(i):(o=Oo(n)?No:jo.current,i=(r=null!=(r=n.contextTypes))?Po(e,o):_o),n=new n(t,i),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=os,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),n}function ss(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&os.enqueueReplaceState(n,n.state,null)}function ls(e,n,t,r){var o=e.stateNode;o.props=t,o.state=e.memoizedState,o.refs={},Li(e);var i=n.contextType;"object"==typeof i&&null!==i?o.context=Ni(i):(i=Oo(n)?No:jo.current,o.context=Po(e,i)),o.state=e.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(rs(e,n,i,t),o.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&os.enqueueReplaceState(o,o.state,null),qi(e,t,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function cs(e,n){try{var t="",r=n;do{t+=M(r),r=r.return}while(r);var o=t}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:o,digest:null}}function us(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function ds(e,n){try{console.error(n.value)}catch(e){setTimeout(function(){throw e})}}var fs="function"==typeof WeakMap?WeakMap:Map;function hs(e,n,t){(t=Ui(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Wl||(Wl=!0,Yl=r),ds(0,n)},t}function ps(e,n,t){(t=Ui(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=n.value;t.payload=function(){return r(o)},t.callback=function(){ds(0,n)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(t.callback=function(){ds(0,n),"function"!=typeof r&&(null===Vl?Vl=new Set([this]):Vl.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function As(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new fs;var o=new Set;r.set(n,o)}else void 0===(o=r.get(n))&&(o=new Set,r.set(n,o));o.has(t)||(o.add(t),e=kc.bind(null,e,n,t),n.then(e,e))}function gs(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function ms(e,n,t,r,o){return 1&e.mode?(e.flags|=65536,e.lanes=o,e):(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Ui(-1,1)).tag=2,$i(t,n,1))),t.lanes|=1),e)}var bs=v.ReactCurrentOwner,ys=!1;function vs(e,n,t,r){n.child=null===e?xi(n,null,t,r):Ei(n,e.child,t,r)}function Es(e,n,t,r,o){t=t.render;var i=n.ref;return Ti(n,o),r=ga(e,n,t,r,i,o),t=ma(),null===e||ys?(ii&&t&&ni(n),n.flags|=1,vs(e,n,r,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~o,Ws(e,n,o))}function xs(e,n,t,r,o){if(null===e){var i=t.type;return"function"!=typeof i||Pc(i)||void 0!==i.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=zc(t.type,null,r,n,n.mode,o)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=i,Cs(e,n,i,r,o))}if(i=e.child,0===(e.lanes&o)){var a=i.memoizedProps;if((t=null!==(t=t.compare)?t:lr)(a,r)&&e.ref===n.ref)return Ws(e,n,o)}return n.flags|=1,(e=Oc(i,r)).ref=n.ref,e.return=n,n.child=e}function Cs(e,n,t,r,o){if(null!==e){var i=e.memoizedProps;if(lr(i,r)&&e.ref===n.ref){if(ys=!1,n.pendingProps=r=i,0===(e.lanes&o))return n.lanes=e.lanes,Ws(e,n,o);131072&e.flags&&(ys=!0)}}return Bs(e,n,t,r,o)}function ws(e,n,t){var r=n.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&n.mode){if(!(1073741824&t))return e=null!==i?i.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,So(Ol,Pl),Pl|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:t,So(Ol,Pl),Pl|=r}else n.memoizedState={baseLanes:0,cachePool:null,transitions:null},So(Ol,Pl),Pl|=t;else null!==i?(r=i.baseLanes|t,n.memoizedState=null):r=t,So(Ol,Pl),Pl|=r;return vs(e,n,o,t),n.child}function ks(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Bs(e,n,t,r,o){var i=Oo(t)?No:jo.current;return i=Po(n,i),Ti(n,o),t=ga(e,n,t,r,i,o),r=ma(),null===e||ys?(ii&&r&&ni(n),n.flags|=1,vs(e,n,t,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~o,Ws(e,n,o))}function Ss(e,n,t,r,o){if(Oo(t)){var i=!0;Lo(n)}else i=!1;if(Ti(n,o),null===n.stateNode)qs(e,n),as(n,t,r),ls(n,t,r,o),r=!0;else if(null===e){var a=n.stateNode,s=n.memoizedProps;a.props=s;var l=a.context,c=t.contextType;c="object"==typeof c&&null!==c?Ni(c):Po(n,c=Oo(t)?No:jo.current);var u=t.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&ss(n,a,r,c),Ri=!1;var f=n.memoizedState;a.state=f,qi(n,r,a,o),l=n.memoizedState,s!==r||f!==l||To.current||Ri?("function"==typeof u&&(rs(n,t,u,r),l=n.memoizedState),(s=Ri||is(n,t,s,r,f,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(n.flags|=4194308)):("function"==typeof a.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!1)}else{a=n.stateNode,Di(e,n),s=n.memoizedProps,c=n.type===n.elementType?s:ts(n.type,s),a.props=c,d=n.pendingProps,f=a.context,l="object"==typeof(l=t.contextType)&&null!==l?Ni(l):Po(n,l=Oo(t)?No:jo.current);var h=t.getDerivedStateFromProps;(u="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||f!==l)&&ss(n,a,r,l),Ri=!1,f=n.memoizedState,a.state=f,qi(n,r,a,o);var p=n.memoizedState;s!==d||f!==p||To.current||Ri?("function"==typeof h&&(rs(n,t,h,r),p=n.memoizedState),(c=Ri||is(n,t,c,r,f,p,l)||!1)?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(n.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=p),a.props=r,a.state=p,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(n.flags|=1024),r=!1)}return _s(e,n,t,r,i,o)}function _s(e,n,t,r,o,i){ks(e,n);var a=!!(128&n.flags);if(!r&&!a)return o&&Do(n,t,!1),Ws(e,n,i);r=n.stateNode,bs.current=n;var s=a&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&a?(n.child=Ei(n,e.child,null,i),n.child=Ei(n,null,s,i)):vs(e,n,s,i),n.memoizedState=r.state,o&&Do(n,t,!0),n.child}function js(e){var n=e.stateNode;n.pendingContext?Io(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Io(0,n.context,!1),Ki(e,n.containerInfo)}function Ts(e,n,t,r,o){return pi(),Ai(o),n.flags|=256,vs(e,n,t,r),n.child}var Ns,Ps,Os,zs,Is={dehydrated:null,treeContext:null,retryLane:0};function Rs(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ls(e,n,t){var r,o=n.pendingProps,a=ea.current,s=!1,l=!!(128&n.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&a)),r?(s=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),So(ea,1&a),null===e)return ui(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(1&n.mode?"$!"===e.data?n.lanes=8:n.lanes=1073741824:n.lanes=1,null):(l=o.children,e=o.fallback,s?(o=n.mode,s=n.child,l={mode:"hidden",children:l},1&o||null===s?s=Rc(l,o,0,null):(s.childLanes=0,s.pendingProps=l),e=Ic(e,o,t,null),s.return=n,e.return=n,s.sibling=e,n.child=s,n.child.memoizedState=Rs(t),n.memoizedState=Is,e):Ds(n,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,n,t,r,o,a,s){if(t)return 256&n.flags?(n.flags&=-257,Us(e,n,s,r=us(Error(i(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(a=r.fallback,o=n.mode,r=Rc({mode:"visible",children:r.children},o,0,null),(a=Ic(a,o,s,null)).flags|=2,r.return=n,a.return=n,r.sibling=a,n.child=r,1&n.mode&&Ei(n,e.child,null,s),n.child.memoizedState=Rs(s),n.memoizedState=Is,a);if(!(1&n.mode))return Us(e,n,s,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Us(e,n,s,r=us(a=Error(i(419)),r,void 0))}if(l=0!==(s&e.childLanes),ys||l){if(null!==(r=jl)){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!==(o&(r.suspendedLanes|s))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Ii(e,o),tc(r,e,o,-1))}return Ac(),Us(e,n,s,r=us(Error(i(421))))}return"$?"===o.data?(n.flags|=128,n.child=e.child,n=Sc.bind(null,e),o._reactRetry=n,null):(e=a.treeContext,oi=co(o.nextSibling),ri=n,ii=!0,ai=null,null!==e&&(Ho[Go++]=Zo,Ho[Go++]=Jo,Ho[Go++]=Ko,Zo=e.id,Jo=e.overflow,Ko=n),(n=Ds(n,r.children)).flags|=4096,n)}(e,n,l,o,r,a,t);if(s){s=o.fallback,l=n.mode,r=(a=e.child).sibling;var c={mode:"hidden",children:o.children};return 1&l||n.child===a?(o=Oc(a,c)).subtreeFlags=14680064&a.subtreeFlags:((o=n.child).childLanes=0,o.pendingProps=c,n.deletions=null),null!==r?s=Oc(r,s):(s=Ic(s,l,t,null)).flags|=2,s.return=n,o.return=n,o.sibling=s,n.child=o,o=s,s=n.child,l=null===(l=e.child.memoizedState)?Rs(t):{baseLanes:l.baseLanes|t,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~t,n.memoizedState=Is,o}return e=(s=e.child).sibling,o=Oc(s,{mode:"visible",children:o.children}),!(1&n.mode)&&(o.lanes=t),o.return=n,o.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=o,n.memoizedState=null,o}function Ds(e,n){return(n=Rc({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Us(e,n,t,r){return null!==r&&Ai(r),Ei(n,e.child,null,t),(e=Ds(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function $s(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),ji(e.return,n,t)}function Ms(e,n,t,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o}:(i.isBackwards=n,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=t,i.tailMode=o)}function Fs(e,n,t){var r=n.pendingProps,o=r.revealOrder,i=r.tail;if(vs(e,n,r.children,t),2&(r=ea.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$s(e,t,n);else if(19===e.tag)$s(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(So(ea,r),1&n.mode)switch(o){case"forwards":for(t=n.child,o=null;null!==t;)null!==(e=t.alternate)&&null===na(e)&&(o=t),t=t.sibling;null===(t=o)?(o=n.child,n.child=null):(o=t.sibling,t.sibling=null),Ms(n,!1,o,t,i);break;case"backwards":for(t=null,o=n.child,n.child=null;null!==o;){if(null!==(e=o.alternate)&&null===na(e)){n.child=o;break}e=o.sibling,o.sibling=t,t=o,o=e}Ms(n,!0,t,null,i);break;case"together":Ms(n,!1,null,null,void 0);break;default:n.memoizedState=null}else n.memoizedState=null;return n.child}function qs(e,n){!(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Ws(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Rl|=n.lanes,0===(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(i(153));if(null!==n.child){for(t=Oc(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Oc(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Ys(e,n){if(!ii)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Vs(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Qs(e,n,t){var r=n.pendingProps;switch(ti(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Vs(n),null;case 1:case 17:return Oo(n.type)&&zo(),Vs(n),null;case 3:return r=n.stateNode,Zi(),Bo(To),Bo(jo),ra(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fi(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,null!==ai&&(ac(ai),ai=null))),Ps(e,n),Vs(n),null;case 5:Xi(n);var o=Gi(Hi.current);if(t=n.type,null!==e&&null!=n.stateNode)Os(e,n,t,r,o),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(i(166));return Vs(n),null}if(e=Gi(Vi.current),fi(n)){r=n.stateNode,t=n.type;var a=n.memoizedProps;switch(r[ho]=n,r[po]=a,e=!!(1&n.mode),t){case"dialog":Ur("cancel",r),Ur("close",r);break;case"iframe":case"object":case"embed":Ur("load",r);break;case"video":case"audio":for(o=0;o<Ir.length;o++)Ur(Ir[o],r);break;case"source":Ur("error",r);break;case"img":case"image":case"link":Ur("error",r),Ur("load",r);break;case"details":Ur("toggle",r);break;case"input":K(r,a),Ur("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Ur("invalid",r);break;case"textarea":oe(r,a),Ur("invalid",r)}for(var l in be(t,a),o=null,a)if(a.hasOwnProperty(l)){var c=a[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Ur("scroll",r)}switch(t){case"input":V(r),X(r,a,!0);break;case"textarea":V(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Xr)}r=o,n.updateQueue=r,null!==r&&(n.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(t,{is:r.is}):(e=l.createElement(t),"select"===t&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,t),e[ho]=n,e[po]=r,Ns(e,n,!1,!1),n.stateNode=e;e:{switch(l=ye(t,r),t){case"dialog":Ur("cancel",e),Ur("close",e),o=r;break;case"iframe":case"object":case"embed":Ur("load",e),o=r;break;case"video":case"audio":for(o=0;o<Ir.length;o++)Ur(Ir[o],e);o=r;break;case"source":Ur("error",e),o=r;break;case"img":case"image":case"link":Ur("error",e),Ur("load",e),o=r;break;case"details":Ur("toggle",e),o=r;break;case"input":K(e,r),o=G(e,r),Ur("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=L({},r,{value:void 0}),Ur("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Ur("invalid",e)}for(a in be(t,o),c=o)if(c.hasOwnProperty(a)){var u=c[a];"style"===a?ge(e,u):"dangerouslySetInnerHTML"===a?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===a?"string"==typeof u?("textarea"!==t||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=u&&"onScroll"===a&&Ur("scroll",e):null!=u&&y(e,a,u,l))}switch(t){case"input":V(e),X(e,r,!1);break;case"textarea":V(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?te(e,!!r.multiple,a,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Xr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Vs(n),null;case 6:if(e&&null!=n.stateNode)zs(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(i(166));if(t=Gi(Hi.current),Gi(Vi.current),fi(n)){if(r=n.stateNode,t=n.memoizedProps,r[ho]=n,(a=r.nodeValue!==t)&&null!==(e=ri))switch(e.tag){case 3:Jr(r.nodeValue,t,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,t,!!(1&e.mode))}a&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[ho]=n,n.stateNode=r}return Vs(n),null;case 13:if(Bo(ea),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&1&n.mode&&!(128&n.flags))hi(),pi(),n.flags|=98560,a=!1;else if(a=fi(n),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=n.memoizedState)?a.dehydrated:null))throw Error(i(317));a[ho]=n}else pi(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Vs(n),a=!1}else null!==ai&&(ac(ai),ai=null),a=!0;if(!a)return 65536&n.flags?n:null}return 128&n.flags?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,1&n.mode&&(null===e||1&ea.current?0===zl&&(zl=3):Ac())),null!==n.updateQueue&&(n.flags|=4),Vs(n),null);case 4:return Zi(),Ps(e,n),null===e&&Fr(n.stateNode.containerInfo),Vs(n),null;case 10:return _i(n.type._context),Vs(n),null;case 19:if(Bo(ea),null===(a=n.memoizedState))return Vs(n),null;if(r=!!(128&n.flags),null===(l=a.rendering))if(r)Ys(a,!1);else{if(0!==zl||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(l=na(e))){for(n.flags|=128,Ys(a,!1),null!==(r=l.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(a=t).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return So(ea,1&ea.current|2),n.child}e=e.sibling}null!==a.tail&&Ze()>Fl&&(n.flags|=128,r=!0,Ys(a,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=na(l))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Ys(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!ii)return Vs(n),null}else 2*Ze()-a.renderingStartTime>Fl&&1073741824!==t&&(n.flags|=128,r=!0,Ys(a,!1),n.lanes=4194304);a.isBackwards?(l.sibling=n.child,n.child=l):(null!==(t=a.last)?t.sibling=l:n.child=l,a.last=l)}return null!==a.tail?(n=a.tail,a.rendering=n,a.tail=n.sibling,a.renderingStartTime=Ze(),n.sibling=null,t=ea.current,So(ea,r?1&t|2:1&t),n):(Vs(n),null);case 22:case 23:return dc(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&1&n.mode?!!(1073741824&Pl)&&(Vs(n),6&n.subtreeFlags&&(n.flags|=8192)):Vs(n),null;case 24:case 25:return null}throw Error(i(156,n.tag))}function Hs(e,n){switch(ti(n),n.tag){case 1:return Oo(n.type)&&zo(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return Zi(),Bo(To),Bo(jo),ra(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 5:return Xi(n),null;case 13:if(Bo(ea),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(i(340));pi()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Bo(ea),null;case 4:return Zi(),null;case 10:return _i(n.type._context),null;case 22:case 23:return dc(),null;default:return null}}Ns=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Ps=function(){},Os=function(e,n,t,r){var o=e.memoizedProps;if(o!==r){e=n.stateNode,Gi(Vi.current);var i,a=null;switch(t){case"input":o=G(e,o),r=G(e,r),a=[];break;case"select":o=L({},o,{value:void 0}),r=L({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(u in be(t,r),t=null,o)if(!r.hasOwnProperty(u)&&o.hasOwnProperty(u)&&null!=o[u])if("style"===u){var l=o[u];for(i in l)l.hasOwnProperty(i)&&(t||(t={}),t[i]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?a||(a=[]):(a=a||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=o?o[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(i in l)!l.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(t||(t={}),t[i]="");for(i in c)c.hasOwnProperty(i)&&l[i]!==c[i]&&(t||(t={}),t[i]=c[i])}else t||(a||(a=[]),a.push(u,t)),t=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(a=a||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Ur("scroll",e),a||l===c||(a=[])):(a=a||[]).push(u,c))}t&&(a=a||[]).push("style",t);var u=a;(n.updateQueue=u)&&(n.flags|=4)}},zs=function(e,n,t,r){t!==r&&(n.flags|=4)};var Gs=!1,Ks=!1,Zs="function"==typeof WeakSet?WeakSet:Set,Js=null;function Xs(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){wc(e,n,t)}else t.current=null}function el(e,n,t){try{t()}catch(t){wc(e,n,t)}}var nl=!1;function tl(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&el(n,t,i)}o=o.next}while(o!==r)}}function rl(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function ol(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function il(e){var n=e.alternate;null!==n&&(e.alternate=null,il(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[ho],delete n[po],delete n[go],delete n[mo],delete n[bo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(ll(e,n,t),e=e.sibling;null!==e;)ll(e,n,t),e=e.sibling}function cl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,n,t),e=e.sibling;null!==e;)cl(e,n,t),e=e.sibling}var ul=null,dl=!1;function fl(e,n,t){for(t=t.child;null!==t;)hl(e,n,t),t=t.sibling}function hl(e,n,t){if(an&&"function"==typeof an.onCommitFiberUnmount)try{an.onCommitFiberUnmount(on,t)}catch(e){}switch(t.tag){case 5:Ks||Xs(t,n);case 6:var r=ul,o=dl;ul=null,fl(e,n,t),dl=o,null!==(ul=r)&&(dl?(e=ul,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):ul.removeChild(t.stateNode));break;case 18:null!==ul&&(dl?(e=ul,t=t.stateNode,8===e.nodeType?lo(e.parentNode,t):1===e.nodeType&&lo(e,t),qn(e)):lo(ul,t.stateNode));break;case 4:r=ul,o=dl,ul=t.stateNode.containerInfo,dl=!0,fl(e,n,t),ul=r,dl=o;break;case 0:case 11:case 14:case 15:if(!Ks&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(2&i||4&i)&&el(t,n,a),o=o.next}while(o!==r)}fl(e,n,t);break;case 1:if(!Ks&&(Xs(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){wc(t,n,e)}fl(e,n,t);break;case 21:fl(e,n,t);break;case 22:1&t.mode?(Ks=(r=Ks)||null!==t.memoizedState,fl(e,n,t),Ks=r):fl(e,n,t);break;default:fl(e,n,t)}}function pl(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Zs),n.forEach(function(n){var r=_c.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))})}}function Al(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var o=t[r];try{var a=e,s=n,l=s;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,dl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===ul)throw Error(i(160));hl(a,s,o),ul=null,dl=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){wc(o,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)gl(n,e),n=n.sibling}function gl(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Al(n,e),ml(e),4&r){try{tl(3,e,e.return),rl(3,e)}catch(n){wc(e,e.return,n)}try{tl(5,e,e.return)}catch(n){wc(e,e.return,n)}}break;case 1:Al(n,e),ml(e),512&r&&null!==t&&Xs(t,t.return);break;case 5:if(Al(n,e),ml(e),512&r&&null!==t&&Xs(t,t.return),32&e.flags){var o=e.stateNode;try{fe(o,"")}catch(n){wc(e,e.return,n)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,s=null!==t?t.memoizedProps:a,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===a.type&&null!=a.name&&Z(o,a),ye(l,s);var u=ye(l,a);for(s=0;s<c.length;s+=2){var d=c[s],f=c[s+1];"style"===d?ge(o,f):"dangerouslySetInnerHTML"===d?de(o,f):"children"===d?fe(o,f):y(o,d,f,u)}switch(l){case"input":J(o,a);break;case"textarea":ie(o,a);break;case"select":var h=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var p=a.value;null!=p?te(o,!!a.multiple,p,!1):h!==!!a.multiple&&(null!=a.defaultValue?te(o,!!a.multiple,a.defaultValue,!0):te(o,!!a.multiple,a.multiple?[]:"",!1))}o[po]=a}catch(n){wc(e,e.return,n)}}break;case 6:if(Al(n,e),ml(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(n){wc(e,e.return,n)}}break;case 3:if(Al(n,e),ml(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{qn(n.containerInfo)}catch(n){wc(e,e.return,n)}break;case 4:default:Al(n,e),ml(e);break;case 13:Al(n,e),ml(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Ml=Ze())),4&r&&pl(e);break;case 22:if(d=null!==t&&null!==t.memoizedState,1&e.mode?(Ks=(u=Ks)||d,Al(n,e),Ks=u):Al(n,e),ml(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&1&e.mode)for(Js=e,d=e.child;null!==d;){for(f=Js=d;null!==Js;){switch(p=(h=Js).child,h.tag){case 0:case 11:case 14:case 15:tl(4,h,h.return);break;case 1:Xs(h,h.return);var A=h.stateNode;if("function"==typeof A.componentWillUnmount){r=h,t=h.return;try{n=r,A.props=n.memoizedProps,A.state=n.memoizedState,A.componentWillUnmount()}catch(e){wc(r,t,e)}}break;case 5:Xs(h,h.return);break;case 22:if(null!==h.memoizedState){El(f);continue}}null!==p?(p.return=h,Js=p):El(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{o=f.stateNode,u?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=f.stateNode,s=null!=(c=f.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=Ae("display",s))}catch(n){wc(e,e.return,n)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(n){wc(e,e.return,n)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:Al(n,e),ml(e),4&r&&pl(e);case 21:}}function ml(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(al(t)){var r=t;break e}t=t.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(fe(o,""),r.flags&=-33),cl(e,sl(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,sl(e),a);break;default:throw Error(i(161))}}catch(n){wc(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function bl(e,n,t){Js=e,yl(e,n,t)}function yl(e,n,t){for(var r=!!(1&e.mode);null!==Js;){var o=Js,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Gs;if(!a){var s=o.alternate,l=null!==s&&null!==s.memoizedState||Ks;s=Gs;var c=Ks;if(Gs=a,(Ks=l)&&!c)for(Js=o;null!==Js;)l=(a=Js).child,22===a.tag&&null!==a.memoizedState?xl(o):null!==l?(l.return=a,Js=l):xl(o);for(;null!==i;)Js=i,yl(i,n,t),i=i.sibling;Js=o,Gs=s,Ks=c}vl(e)}else 8772&o.subtreeFlags&&null!==i?(i.return=o,Js=i):vl(e)}}function vl(e){for(;null!==Js;){var n=Js;if(8772&n.flags){var t=n.alternate;try{if(8772&n.flags)switch(n.tag){case 0:case 11:case 15:Ks||rl(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Ks)if(null===t)r.componentDidMount();else{var o=n.elementType===n.type?t.memoizedProps:ts(n.type,t.memoizedProps);r.componentDidUpdate(o,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=n.updateQueue;null!==a&&Wi(n,a,r);break;case 3:var s=n.updateQueue;if(null!==s){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Wi(n,s,t)}break;case 5:var l=n.stateNode;if(null===t&&4&n.flags){t=l;var c=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&t.focus();break;case"img":c.src&&(t.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var u=n.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&qn(f)}}}break;default:throw Error(i(163))}Ks||512&n.flags&&ol(n)}catch(e){wc(n,n.return,e)}}if(n===e){Js=null;break}if(null!==(t=n.sibling)){t.return=n.return,Js=t;break}Js=n.return}}function El(e){for(;null!==Js;){var n=Js;if(n===e){Js=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Js=t;break}Js=n.return}}function xl(e){for(;null!==Js;){var n=Js;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{rl(4,n)}catch(e){wc(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var o=n.return;try{r.componentDidMount()}catch(e){wc(n,o,e)}}var i=n.return;try{ol(n)}catch(e){wc(n,i,e)}break;case 5:var a=n.return;try{ol(n)}catch(e){wc(n,a,e)}}}catch(e){wc(n,n.return,e)}if(n===e){Js=null;break}var s=n.sibling;if(null!==s){s.return=n.return,Js=s;break}Js=n.return}}var Cl,wl=Math.ceil,kl=v.ReactCurrentDispatcher,Bl=v.ReactCurrentOwner,Sl=v.ReactCurrentBatchConfig,_l=0,jl=null,Tl=null,Nl=0,Pl=0,Ol=ko(0),zl=0,Il=null,Rl=0,Ll=0,Dl=0,Ul=null,$l=null,Ml=0,Fl=1/0,ql=null,Wl=!1,Yl=null,Vl=null,Ql=!1,Hl=null,Gl=0,Kl=0,Zl=null,Jl=-1,Xl=0;function ec(){return 6&_l?Ze():-1!==Jl?Jl:Jl=Ze()}function nc(e){return 1&e.mode?2&_l&&0!==Nl?Nl&-Nl:null!==gi.transition?(0===Xl&&(Xl=gn()),Xl):0!==(e=vn)?e:e=void 0===(e=window.event)?16:Zn(e.type):1}function tc(e,n,t,r){if(50<Kl)throw Kl=0,Zl=null,Error(i(185));bn(e,t,r),2&_l&&e===jl||(e===jl&&(!(2&_l)&&(Ll|=t),4===zl&&sc(e,Nl)),rc(e,r),1===t&&0===_l&&!(1&n.mode)&&(Fl=Ze()+500,$o&&qo()))}function rc(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-sn(i),s=1<<a,l=o[a];-1===l?0!==(s&t)&&0===(s&r)||(o[a]=pn(s,n)):l<=n&&(e.expiredLanes|=s),i&=~s}}(e,n);var r=hn(e,e===jl?Nl:0);if(0===r)null!==t&&He(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&He(t),1===n)0===e.tag?function(e){$o=!0,Fo(e)}(lc.bind(null,e)):Fo(lc.bind(null,e)),ao(function(){!(6&_l)&&qo()}),t=null;else{switch(En(r)){case 1:t=Xe;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=jc(t,oc.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function oc(e,n){if(Jl=-1,Xl=0,6&_l)throw Error(i(327));var t=e.callbackNode;if(xc()&&e.callbackNode!==t)return null;var r=hn(e,e===jl?Nl:0);if(0===r)return null;if(30&r||0!==(r&e.expiredLanes)||n)n=gc(e,r);else{n=r;var o=_l;_l|=2;var a=pc();for(jl===e&&Nl===n||(ql=null,Fl=Ze()+500,fc(e,n));;)try{bc();break}catch(n){hc(e,n)}Si(),kl.current=a,_l=o,null!==Tl?n=0:(jl=null,Nl=0,n=zl)}if(0!==n){if(2===n&&0!==(o=An(e))&&(r=o,n=ic(e,o)),1===n)throw t=Il,fc(e,0),sc(e,r),rc(e,Ze()),t;if(6===n)sc(e,r);else{if(o=e.current.alternate,!(30&r||function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var o=t[r],i=o.getSnapshot;o=o.value;try{if(!sr(i(),o))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(o)||(n=gc(e,r),2===n&&(a=An(e),0!==a&&(r=a,n=ic(e,a))),1!==n)))throw t=Il,fc(e,0),sc(e,r),rc(e,Ze()),t;switch(e.finishedWork=o,e.finishedLanes=r,n){case 0:case 1:throw Error(i(345));case 2:case 5:Ec(e,$l,ql);break;case 3:if(sc(e,r),(130023424&r)===r&&10<(n=Ml+500-Ze())){if(0!==hn(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Ec.bind(null,e,$l,ql),n);break}Ec(e,$l,ql);break;case 4:if(sc(e,r),(4194240&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var s=31-sn(r);a=1<<s,(s=n[s])>o&&(o=s),r&=~a}if(r=o,10<(r=(120>(r=Ze()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*wl(r/1960))-r)){e.timeoutHandle=ro(Ec.bind(null,e,$l,ql),r);break}Ec(e,$l,ql);break;default:throw Error(i(329))}}}return rc(e,Ze()),e.callbackNode===t?oc.bind(null,e):null}function ic(e,n){var t=Ul;return e.current.memoizedState.isDehydrated&&(fc(e,n).flags|=256),2!==(e=gc(e,n))&&(n=$l,$l=t,null!==n&&ac(n)),e}function ac(e){null===$l?$l=e:$l.push.apply($l,e)}function sc(e,n){for(n&=~Dl,n&=~Ll,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-sn(n),r=1<<t;e[t]=-1,n&=~r}}function lc(e){if(6&_l)throw Error(i(327));xc();var n=hn(e,0);if(!(1&n))return rc(e,Ze()),null;var t=gc(e,n);if(0!==e.tag&&2===t){var r=An(e);0!==r&&(n=r,t=ic(e,r))}if(1===t)throw t=Il,fc(e,0),sc(e,n),rc(e,Ze()),t;if(6===t)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,Ec(e,$l,ql),rc(e,Ze()),null}function cc(e,n){var t=_l;_l|=1;try{return e(n)}finally{0===(_l=t)&&(Fl=Ze()+500,$o&&qo())}}function uc(e){null!==Hl&&0===Hl.tag&&!(6&_l)&&xc();var n=_l;_l|=1;var t=Sl.transition,r=vn;try{if(Sl.transition=null,vn=1,e)return e()}finally{vn=r,Sl.transition=t,!(6&(_l=n))&&qo()}}function dc(){Pl=Ol.current,Bo(Ol)}function fc(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,oo(t)),null!==Tl)for(t=Tl.return;null!==t;){var r=t;switch(ti(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&zo();break;case 3:Zi(),Bo(To),Bo(jo),ra();break;case 5:Xi(r);break;case 4:Zi();break;case 13:case 19:Bo(ea);break;case 10:_i(r.type._context);break;case 22:case 23:dc()}t=t.return}if(jl=e,Tl=e=Oc(e.current,null),Nl=Pl=n,zl=0,Il=null,Dl=Ll=Rl=0,$l=Ul=null,null!==Pi){for(n=0;n<Pi.length;n++)if(null!==(r=(t=Pi[n]).interleaved)){t.interleaved=null;var o=r.next,i=t.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}t.pending=r}Pi=null}return e}function hc(e,n){for(;;){var t=Tl;try{if(Si(),oa.current=Ja,ua){for(var r=sa.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ua=!1}if(aa=0,ca=la=sa=null,da=!1,fa=0,Bl.current=null,null===t||null===t.return){zl=1,Il=n,Tl=null;break}e:{var a=e,s=t.return,l=t,c=n;if(n=Nl,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,f=d.tag;if(!(1&d.mode||0!==f&&11!==f&&15!==f)){var h=d.alternate;h?(d.updateQueue=h.updateQueue,d.memoizedState=h.memoizedState,d.lanes=h.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=gs(s);if(null!==p){p.flags&=-257,ms(p,s,l,0,n),1&p.mode&&As(a,u,n),c=u;var A=(n=p).updateQueue;if(null===A){var g=new Set;g.add(c),n.updateQueue=g}else A.add(c);break e}if(!(1&n)){As(a,u,n),Ac();break e}c=Error(i(426))}else if(ii&&1&l.mode){var m=gs(s);if(null!==m){!(65536&m.flags)&&(m.flags|=256),ms(m,s,l,0,n),Ai(cs(c,l));break e}}a=c=cs(c,l),4!==zl&&(zl=2),null===Ul?Ul=[a]:Ul.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,n&=-n,a.lanes|=n,Fi(a,hs(0,c,n));break e;case 1:l=c;var b=a.type,y=a.stateNode;if(!(128&a.flags||"function"!=typeof b.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Vl&&Vl.has(y)))){a.flags|=65536,n&=-n,a.lanes|=n,Fi(a,ps(a,l,n));break e}}a=a.return}while(null!==a)}vc(t)}catch(e){n=e,Tl===t&&null!==t&&(Tl=t=t.return);continue}break}}function pc(){var e=kl.current;return kl.current=Ja,null===e?Ja:e}function Ac(){0!==zl&&3!==zl&&2!==zl||(zl=4),null===jl||!(268435455&Rl)&&!(268435455&Ll)||sc(jl,Nl)}function gc(e,n){var t=_l;_l|=2;var r=pc();for(jl===e&&Nl===n||(ql=null,fc(e,n));;)try{mc();break}catch(n){hc(e,n)}if(Si(),_l=t,kl.current=r,null!==Tl)throw Error(i(261));return jl=null,Nl=0,zl}function mc(){for(;null!==Tl;)yc(Tl)}function bc(){for(;null!==Tl&&!Ge();)yc(Tl)}function yc(e){var n=Cl(e.alternate,e,Pl);e.memoizedProps=e.pendingProps,null===n?vc(e):Tl=n,Bl.current=null}function vc(e){var n=e;do{var t=n.alternate;if(e=n.return,32768&n.flags){if(null!==(t=Hs(t,n)))return t.flags&=32767,void(Tl=t);if(null===e)return zl=6,void(Tl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(t=Qs(t,n,Pl)))return void(Tl=t);if(null!==(n=n.sibling))return void(Tl=n);Tl=n=e}while(null!==n);0===zl&&(zl=5)}function Ec(e,n,t){var r=vn,o=Sl.transition;try{Sl.transition=null,vn=1,function(e,n,t,r){do{xc()}while(null!==Hl);if(6&_l)throw Error(i(327));t=e.finishedWork;var o=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var o=31-sn(t),i=1<<o;n[o]=0,r[o]=-1,e[o]=-1,t&=~i}}(e,a),e===jl&&(Tl=jl=null,Nl=0),!(2064&t.subtreeFlags)&&!(2064&t.flags)||Ql||(Ql=!0,jc(nn,function(){return xc(),null})),a=!!(15990&t.flags),15990&t.subtreeFlags||a){a=Sl.transition,Sl.transition=null;var s=vn;vn=1;var l=_l;_l|=4,Bl.current=null,function(e,n){if(eo=Yn,hr(e=fr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{t.nodeType,a.nodeType}catch(e){t=null;break e}var s=0,l=-1,c=-1,u=0,d=0,f=e,h=null;n:for(;;){for(var p;f!==t||0!==o&&3!==f.nodeType||(l=s+o),f!==a||0!==r&&3!==f.nodeType||(c=s+r),3===f.nodeType&&(s+=f.nodeValue.length),null!==(p=f.firstChild);)h=f,f=p;for(;;){if(f===e)break n;if(h===t&&++u===o&&(l=s),h===a&&++d===r&&(c=s),null!==(p=f.nextSibling))break;h=(f=h).parentNode}f=p}t=-1===l||-1===c?null:{start:l,end:c}}else t=null}t=t||{start:0,end:0}}else t=null;for(no={focusedElem:e,selectionRange:t},Yn=!1,Js=n;null!==Js;)if(e=(n=Js).child,1028&n.subtreeFlags&&null!==e)e.return=n,Js=e;else for(;null!==Js;){n=Js;try{var A=n.alternate;if(1024&n.flags)switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==A){var g=A.memoizedProps,m=A.memoizedState,b=n.stateNode,y=b.getSnapshotBeforeUpdate(n.elementType===n.type?g:ts(n.type,g),m);b.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var v=n.stateNode.containerInfo;1===v.nodeType?v.textContent="":9===v.nodeType&&v.documentElement&&v.removeChild(v.documentElement);break;default:throw Error(i(163))}}catch(e){wc(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Js=e;break}Js=n.return}A=nl,nl=!1}(e,t),gl(t,e),pr(no),Yn=!!eo,no=eo=null,e.current=t,bl(t,e,o),Ke(),_l=l,vn=s,Sl.transition=a}else e.current=t;if(Ql&&(Ql=!1,Hl=e,Gl=o),0===(a=e.pendingLanes)&&(Vl=null),function(e){if(an&&"function"==typeof an.onCommitFiberRoot)try{an.onCommitFiberRoot(on,e,void 0,!(128&~e.current.flags))}catch(e){}}(t.stateNode),rc(e,Ze()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((o=n[t]).value,{componentStack:o.stack,digest:o.digest});if(Wl)throw Wl=!1,e=Yl,Yl=null,e;!!(1&Gl)&&0!==e.tag&&xc(),1&(a=e.pendingLanes)?e===Zl?Kl++:(Kl=0,Zl=e):Kl=0,qo()}(e,n,t,r)}finally{Sl.transition=o,vn=r}return null}function xc(){if(null!==Hl){var e=En(Gl),n=Sl.transition,t=vn;try{if(Sl.transition=null,vn=16>e?16:e,null===Hl)var r=!1;else{if(e=Hl,Hl=null,Gl=0,6&_l)throw Error(i(331));var o=_l;for(_l|=4,Js=e.current;null!==Js;){var a=Js,s=a.child;if(16&Js.flags){var l=a.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Js=u;null!==Js;){var d=Js;switch(d.tag){case 0:case 11:case 15:tl(8,d,a)}var f=d.child;if(null!==f)f.return=d,Js=f;else for(;null!==Js;){var h=(d=Js).sibling,p=d.return;if(il(d),d===u){Js=null;break}if(null!==h){h.return=p,Js=h;break}Js=p}}}var A=a.alternate;if(null!==A){var g=A.child;if(null!==g){A.child=null;do{var m=g.sibling;g.sibling=null,g=m}while(null!==g)}}Js=a}}if(2064&a.subtreeFlags&&null!==s)s.return=a,Js=s;else e:for(;null!==Js;){if(2048&(a=Js).flags)switch(a.tag){case 0:case 11:case 15:tl(9,a,a.return)}var b=a.sibling;if(null!==b){b.return=a.return,Js=b;break e}Js=a.return}}var y=e.current;for(Js=y;null!==Js;){var v=(s=Js).child;if(2064&s.subtreeFlags&&null!==v)v.return=s,Js=v;else e:for(s=y;null!==Js;){if(2048&(l=Js).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){wc(l,l.return,e)}if(l===s){Js=null;break e}var E=l.sibling;if(null!==E){E.return=l.return,Js=E;break e}Js=l.return}}if(_l=o,qo(),an&&"function"==typeof an.onPostCommitFiberRoot)try{an.onPostCommitFiberRoot(on,e)}catch(e){}r=!0}return r}finally{vn=t,Sl.transition=n}}return!1}function Cc(e,n,t){e=$i(e,n=hs(0,n=cs(t,n),1),1),n=ec(),null!==e&&(bn(e,1,n),rc(e,n))}function wc(e,n,t){if(3===e.tag)Cc(e,e,t);else for(;null!==n;){if(3===n.tag){Cc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vl||!Vl.has(r))){n=$i(n,e=ps(n,e=cs(t,e),1),1),e=ec(),null!==n&&(bn(n,1,e),rc(n,e));break}}n=n.return}}function kc(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=ec(),e.pingedLanes|=e.suspendedLanes&t,jl===e&&(Nl&t)===t&&(4===zl||3===zl&&(130023424&Nl)===Nl&&500>Ze()-Ml?fc(e,0):Dl|=t),rc(e,n)}function Bc(e,n){0===n&&(1&e.mode?(n=dn,!(130023424&(dn<<=1))&&(dn=4194304)):n=1);var t=ec();null!==(e=Ii(e,n))&&(bn(e,n,t),rc(e,t))}function Sc(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Bc(e,t)}function _c(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(t=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(n),Bc(e,t)}function jc(e,n){return Qe(e,n)}function Tc(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Nc(e,n,t,r){return new Tc(e,n,t,r)}function Pc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Oc(e,n){var t=e.alternate;return null===t?((t=Nc(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function zc(e,n,t,r,o,a){var s=2;if(r=e,"function"==typeof e)Pc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case C:return Ic(t.children,o,a,n);case w:s=8,o|=8;break;case k:return(e=Nc(12,t,n,2|o)).elementType=k,e.lanes=a,e;case j:return(e=Nc(13,t,n,o)).elementType=j,e.lanes=a,e;case T:return(e=Nc(19,t,n,o)).elementType=T,e.lanes=a,e;case O:return Rc(t,o,a,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:s=10;break e;case S:s=9;break e;case _:s=11;break e;case N:s=14;break e;case P:s=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(n=Nc(s,t,n,o)).elementType=e,n.type=r,n.lanes=a,n}function Ic(e,n,t,r){return(e=Nc(7,e,r,n)).lanes=t,e}function Rc(e,n,t,r){return(e=Nc(22,e,r,n)).elementType=O,e.lanes=t,e.stateNode={isHidden:!1},e}function Lc(e,n,t){return(e=Nc(6,e,null,n)).lanes=t,e}function Dc(e,n,t){return(n=Nc(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Uc(e,n,t,r,o){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mn(0),this.expirationTimes=mn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mn(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function $c(e,n,t,r,o,i,a,s,l){return e=new Uc(e,n,t,s,l),1===n?(n=1,!0===i&&(n|=8)):n=0,i=Nc(3,null,null,n),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Li(i),e}function Mc(e){if(!e)return _o;e:{if(Fe(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(Oo(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(i(171))}if(1===e.tag){var t=e.type;if(Oo(t))return Ro(e,t,n)}return n}function Fc(e,n,t,r,o,i,a,s,l){return(e=$c(t,r,!0,e,0,i,0,s,l)).context=Mc(null),t=e.current,(i=Ui(r=ec(),o=nc(t))).callback=null!=n?n:null,$i(t,i,o),e.current.lanes=o,bn(e,o,r),rc(e,r),e}function qc(e,n,t,r){var o=n.current,i=ec(),a=nc(o);return t=Mc(t),null===n.context?n.context=t:n.pendingContext=t,(n=Ui(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=$i(o,n,a))&&(tc(e,o,a,i),Mi(e,o,a)),a}function Wc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Yc(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Vc(e,n){Yc(e,n),(e=e.alternate)&&Yc(e,n)}Cl=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||To.current)ys=!0;else{if(0===(e.lanes&t)&&!(128&n.flags))return ys=!1,function(e,n,t){switch(n.tag){case 3:js(n),pi();break;case 5:Ji(n);break;case 1:Oo(n.type)&&Lo(n);break;case 4:Ki(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,o=n.memoizedProps.value;So(Ci,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(So(ea,1&ea.current),n.flags|=128,null):0!==(t&n.child.childLanes)?Ls(e,n,t):(So(ea,1&ea.current),null!==(e=Ws(e,n,t))?e.sibling:null);So(ea,1&ea.current);break;case 19:if(r=0!==(t&n.childLanes),128&e.flags){if(r)return Fs(e,n,t);n.flags|=128}if(null!==(o=n.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),So(ea,ea.current),r)break;return null;case 22:case 23:return n.lanes=0,ws(e,n,t)}return Ws(e,n,t)}(e,n,t);ys=!!(131072&e.flags)}else ys=!1,ii&&1048576&n.flags&&ei(n,Qo,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;qs(e,n),e=n.pendingProps;var o=Po(n,jo.current);Ti(n,t),o=ga(null,n,r,e,o,t);var a=ma();return n.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,Oo(r)?(a=!0,Lo(n)):a=!1,n.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Li(n),o.updater=os,n.stateNode=o,o._reactInternals=n,ls(n,r,e,t),n=_s(null,n,r,!0,a,t)):(n.tag=0,ii&&a&&ni(n),vs(null,n,o,t),n=n.child),n;case 16:r=n.elementType;e:{switch(qs(e,n),e=n.pendingProps,r=(o=r._init)(r._payload),n.type=r,o=n.tag=function(e){if("function"==typeof e)return Pc(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===N)return 14}return 2}(r),e=ts(r,e),o){case 0:n=Bs(null,n,r,e,t);break e;case 1:n=Ss(null,n,r,e,t);break e;case 11:n=Es(null,n,r,e,t);break e;case 14:n=xs(null,n,r,ts(r.type,e),t);break e}throw Error(i(306,r,""))}return n;case 0:return r=n.type,o=n.pendingProps,Bs(e,n,r,o=n.elementType===r?o:ts(r,o),t);case 1:return r=n.type,o=n.pendingProps,Ss(e,n,r,o=n.elementType===r?o:ts(r,o),t);case 3:e:{if(js(n),null===e)throw Error(i(387));r=n.pendingProps,o=(a=n.memoizedState).element,Di(e,n),qi(n,r,null,t);var s=n.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},n.updateQueue.baseState=a,n.memoizedState=a,256&n.flags){n=Ts(e,n,r,t,o=cs(Error(i(423)),n));break e}if(r!==o){n=Ts(e,n,r,t,o=cs(Error(i(424)),n));break e}for(oi=co(n.stateNode.containerInfo.firstChild),ri=n,ii=!0,ai=null,t=xi(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(pi(),r===o){n=Ws(e,n,t);break e}vs(e,n,r,t)}n=n.child}return n;case 5:return Ji(n),null===e&&ui(n),r=n.type,o=n.pendingProps,a=null!==e?e.memoizedProps:null,s=o.children,to(r,o)?s=null:null!==a&&to(r,a)&&(n.flags|=32),ks(e,n),vs(e,n,s,t),n.child;case 6:return null===e&&ui(n),null;case 13:return Ls(e,n,t);case 4:return Ki(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Ei(n,null,r,t):vs(e,n,r,t),n.child;case 11:return r=n.type,o=n.pendingProps,Es(e,n,r,o=n.elementType===r?o:ts(r,o),t);case 7:return vs(e,n,n.pendingProps,t),n.child;case 8:case 12:return vs(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,o=n.pendingProps,a=n.memoizedProps,s=o.value,So(Ci,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===o.children&&!To.current){n=Ws(e,n,t);break e}}else for(null!==(a=n.child)&&(a.return=n);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===a.tag){(c=Ui(-1,t&-t)).tag=2;var u=a.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}a.lanes|=t,null!==(c=a.alternate)&&(c.lanes|=t),ji(a.return,t,n),l.lanes|=t;break}c=c.next}}else if(10===a.tag)s=a.type===n.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(i(341));s.lanes|=t,null!==(l=s.alternate)&&(l.lanes|=t),ji(s,t,n),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===n){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}vs(e,n,o.children,t),n=n.child}return n;case 9:return o=n.type,r=n.pendingProps.children,Ti(n,t),r=r(o=Ni(o)),n.flags|=1,vs(e,n,r,t),n.child;case 14:return o=ts(r=n.type,n.pendingProps),xs(e,n,r,o=ts(r.type,o),t);case 15:return Cs(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,o=n.pendingProps,o=n.elementType===r?o:ts(r,o),qs(e,n),n.tag=1,Oo(r)?(e=!0,Lo(n)):e=!1,Ti(n,t),as(n,r,o),ls(n,r,o,t),_s(null,n,r,!0,e,t);case 19:return Fs(e,n,t);case 22:return ws(e,n,t)}throw Error(i(156,n.tag))};var Qc="function"==typeof reportError?reportError:function(e){console.error(e)};function Hc(e){this._internalRoot=e}function Gc(e){this._internalRoot=e}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function Xc(e,n,t,r,o){var i=t._reactRootContainer;if(i){var a=i;if("function"==typeof o){var s=o;o=function(){var e=Wc(a);s.call(e)}}qc(n,a,e,o)}else a=function(e,n,t,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=Wc(a);i.call(e)}}var a=Fc(n,r,e,0,null,!1,0,"",Jc);return e._reactRootContainer=a,e[Ao]=a.current,Fr(8===e.nodeType?e.parentNode:e),uc(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var s=r;r=function(){var e=Wc(l);s.call(e)}}var l=$c(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=l,e[Ao]=l.current,Fr(8===e.nodeType?e.parentNode:e),uc(function(){qc(n,l,t,r)}),l}(t,n,e,o,r);return Wc(a)}Gc.prototype.render=Hc.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(i(409));qc(e,n,null,null)},Gc.prototype.unmount=Hc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;uc(function(){qc(null,e,null,null)}),n[Ao]=null}},Gc.prototype.unstable_scheduleHydration=function(e){if(e){var n=kn();e={blockedOn:null,target:e,priority:n};for(var t=0;t<zn.length&&0!==n&&n<zn[t].priority;t++);zn.splice(t,0,e),0===t&&Dn(e)}},xn=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=fn(n.pendingLanes);0!==t&&(yn(n,1|t),rc(n,Ze()),!(6&_l)&&(Fl=Ze()+500,qo()))}break;case 13:uc(function(){var n=Ii(e,1);if(null!==n){var t=ec();tc(n,e,1,t)}}),Vc(e,1)}},Cn=function(e){if(13===e.tag){var n=Ii(e,134217728);null!==n&&tc(n,e,134217728,ec()),Vc(e,134217728)}},wn=function(e){if(13===e.tag){var n=nc(e),t=Ii(e,n);null!==t&&tc(t,e,n,ec()),Vc(e,n)}},kn=function(){return vn},Bn=function(e,n){var t=vn;try{return vn=e,n()}finally{vn=t}},xe=function(e,n,t){switch(n){case"input":if(J(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=xo(r);if(!o)throw Error(i(90));Q(r),J(r,o)}}}break;case"textarea":ie(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},_e=cc,je=uc;var eu={usingClientEntryPoint:!1,Events:[vo,Eo,xo,Be,Se,cc]},nu={findFiberByHostInstance:yo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},tu={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:v.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ye(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{on=ru.inject(tu),an=ru}catch(ue){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kc(n))throw Error(i(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Kc(e))throw Error(i(299));var t=!1,r="",o=Qc;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),n=$c(e,1,!1,null,0,t,0,r,o),e[Ao]=n.current,Fr(8===e.nodeType?e.parentNode:e),new Hc(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=Ye(n))?null:e.stateNode},n.flushSync=function(e){return uc(e)},n.hydrate=function(e,n,t){if(!Zc(n))throw Error(i(200));return Xc(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Kc(e))throw Error(i(405));var r=null!=t&&t.hydratedSources||null,o=!1,a="",s=Qc;if(null!=t&&(!0===t.unstable_strictMode&&(o=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onRecoverableError&&(s=t.onRecoverableError)),n=Fc(n,null,e,1,null!=t?t:null,o,0,a,s),e[Ao]=n.current,Fr(e),r)for(e=0;e<r.length;e++)o=(o=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o);return new Gc(n)},n.render=function(e,n,t){if(!Zc(n))throw Error(i(200));return Xc(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Zc(e))throw Error(i(40));return!!e._reactRootContainer&&(uc(function(){Xc(null,null,e,!1,function(){e._reactRootContainer=null,e[Ao]=null})}),!0)},n.unstable_batchedUpdates=cc,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Zc(t))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Xc(e,n,t,!1,r)},n.version="18.3.1-next-f1338f8080-20240426"},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},660:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(907)),i=r(t(818));n.default=class{constructor(e){this.shouldThrowOnError=!1,this.method=e.method,this.url=e.url,this.headers=e.headers,this.schema=e.schema,this.body=e.body,this.shouldThrowOnError=e.shouldThrowOnError,this.signal=e.signal,this.isMaybeSingle=e.isMaybeSingle,e.fetch?this.fetch=e.fetch:"undefined"==typeof fetch?this.fetch=o.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(e,n){return this.headers=Object.assign({},this.headers),this.headers[e]=n,this}then(e,n){void 0===this.schema||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),"GET"!==this.method&&"HEAD"!==this.method&&(this.headers["Content-Type"]="application/json");let t=(0,this.fetch)(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async e=>{var n,t,r;let o=null,a=null,s=null,l=e.status,c=e.statusText;if(e.ok){if("HEAD"!==this.method){const n=await e.text();""===n||(a="text/csv"===this.headers.Accept||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?n:JSON.parse(n))}const r=null===(n=this.headers.Prefer)||void 0===n?void 0:n.match(/count=(exact|planned|estimated)/),i=null===(t=e.headers.get("content-range"))||void 0===t?void 0:t.split("/");r&&i&&i.length>1&&(s=parseInt(i[1])),this.isMaybeSingle&&"GET"===this.method&&Array.isArray(a)&&(a.length>1?(o={code:"PGRST116",details:`Results contain ${a.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},a=null,s=null,l=406,c="Not Acceptable"):a=1===a.length?a[0]:null)}else{const n=await e.text();try{o=JSON.parse(n),Array.isArray(o)&&404===e.status&&(a=[],o=null,l=200,c="OK")}catch(t){404===e.status&&""===n?(l=204,c="No Content"):o={message:n}}if(o&&this.isMaybeSingle&&(null===(r=null==o?void 0:o.details)||void 0===r?void 0:r.includes("0 rows"))&&(o=null,l=200,c="OK"),o&&this.shouldThrowOnError)throw new i.default(o)}return{error:o,data:a,count:s,status:l,statusText:c}});return this.shouldThrowOnError||(t=t.catch(e=>{var n,t,r;return{error:{message:`${null!==(n=null==e?void 0:e.name)&&void 0!==n?n:"FetchError"}: ${null==e?void 0:e.message}`,details:`${null!==(t=null==e?void 0:e.stack)&&void 0!==t?t:""}`,hint:"",code:`${null!==(r=null==e?void 0:e.code)&&void 0!==r?r:""}`},data:null,count:null,status:0,statusText:""}})),t.then(e,n)}returns(){return this}overrideTypes(){return this}}},818:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0});class t extends Error{constructor(e){super(e.message),this.name="PostgrestError",this.details=e.details,this.hint=e.hint,this.code=e.code}}n.default=t},825:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(261));class i extends o.default{eq(e,n){return this.url.searchParams.append(e,`eq.${n}`),this}neq(e,n){return this.url.searchParams.append(e,`neq.${n}`),this}gt(e,n){return this.url.searchParams.append(e,`gt.${n}`),this}gte(e,n){return this.url.searchParams.append(e,`gte.${n}`),this}lt(e,n){return this.url.searchParams.append(e,`lt.${n}`),this}lte(e,n){return this.url.searchParams.append(e,`lte.${n}`),this}like(e,n){return this.url.searchParams.append(e,`like.${n}`),this}likeAllOf(e,n){return this.url.searchParams.append(e,`like(all).{${n.join(",")}}`),this}likeAnyOf(e,n){return this.url.searchParams.append(e,`like(any).{${n.join(",")}}`),this}ilike(e,n){return this.url.searchParams.append(e,`ilike.${n}`),this}ilikeAllOf(e,n){return this.url.searchParams.append(e,`ilike(all).{${n.join(",")}}`),this}ilikeAnyOf(e,n){return this.url.searchParams.append(e,`ilike(any).{${n.join(",")}}`),this}is(e,n){return this.url.searchParams.append(e,`is.${n}`),this}in(e,n){const t=Array.from(new Set(n)).map(e=>"string"==typeof e&&new RegExp("[,()]").test(e)?`"${e}"`:`${e}`).join(",");return this.url.searchParams.append(e,`in.(${t})`),this}contains(e,n){return"string"==typeof n?this.url.searchParams.append(e,`cs.${n}`):Array.isArray(n)?this.url.searchParams.append(e,`cs.{${n.join(",")}}`):this.url.searchParams.append(e,`cs.${JSON.stringify(n)}`),this}containedBy(e,n){return"string"==typeof n?this.url.searchParams.append(e,`cd.${n}`):Array.isArray(n)?this.url.searchParams.append(e,`cd.{${n.join(",")}}`):this.url.searchParams.append(e,`cd.${JSON.stringify(n)}`),this}rangeGt(e,n){return this.url.searchParams.append(e,`sr.${n}`),this}rangeGte(e,n){return this.url.searchParams.append(e,`nxl.${n}`),this}rangeLt(e,n){return this.url.searchParams.append(e,`sl.${n}`),this}rangeLte(e,n){return this.url.searchParams.append(e,`nxr.${n}`),this}rangeAdjacent(e,n){return this.url.searchParams.append(e,`adj.${n}`),this}overlaps(e,n){return"string"==typeof n?this.url.searchParams.append(e,`ov.${n}`):this.url.searchParams.append(e,`ov.{${n.join(",")}}`),this}textSearch(e,n,{config:t,type:r}={}){let o="";"plain"===r?o="pl":"phrase"===r?o="ph":"websearch"===r&&(o="w");const i=void 0===t?"":`(${t})`;return this.url.searchParams.append(e,`${o}fts${i}.${n}`),this}match(e){return Object.entries(e).forEach(([e,n])=>{this.url.searchParams.append(e,`eq.${n}`)}),this}not(e,n,t){return this.url.searchParams.append(e,`not.${n}.${t}`),this}or(e,{foreignTable:n,referencedTable:t=n}={}){const r=t?`${t}.or`:"or";return this.url.searchParams.append(r,`(${e})`),this}filter(e,n,t){return this.url.searchParams.append(e,`${n}.${t}`),this}}n.default=i},848:(e,n,t)=>{e.exports=t(20)},907:(e,n,t)=>{t.r(n),t.d(n,{Headers:()=>a,Request:()=>s,Response:()=>l,default:()=>i,fetch:()=>o});var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t.g)return t.g;throw new Error("unable to locate global object")}();const o=r.fetch,i=r.fetch.bind(r),a=r.Headers,s=r.Request,l=r.Response},961:(e,n,t)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(551)},982:(e,n,t)=>{e.exports=t(463)}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.nc=void 0;var r=t(540),o=t(338),i={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const a=(e,n)=>{const t=(0,r.forwardRef)(({color:t="currentColor",size:o=24,strokeWidth:a=2,absoluteStrokeWidth:s,className:l="",children:c,...u},d)=>{return(0,r.createElement)("svg",{ref:d,...i,width:o,height:o,stroke:t,strokeWidth:s?24*Number(a)/Number(o):a,className:["lucide",`lucide-${f=e,f.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase().trim()}`,l].join(" "),...u},[...n.map(([e,n])=>(0,r.createElement)(e,n)),...Array.isArray(c)?c:[c]]);var f});return t.displayName=`${e}`,t},s=a("Bookmark",[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z",key:"1fy3hk"}]]),l=a("Plus",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]]),c=a("LogOut",[["path",{d:"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4",key:"1uf3rs"}],["polyline",{points:"16 17 21 12 16 7",key:"1gabdz"}],["line",{x1:"21",x2:"9",y1:"12",y2:"12",key:"1uyos4"}]]),u=a("Search",[["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}],["path",{d:"m21 21-4.3-4.3",key:"1qie3q"}]]),d=a("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]),f=a("Tag",[["path",{d:"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z",key:"14b2ls"}],["path",{d:"M7 7h.01",key:"7u93v4"}]]),h=a("ChevronDown",[["path",{d:"m6 9 6 6 6-6",key:"qrunsl"}]]),p=a("ChevronRight",[["path",{d:"m9 18 6-6-6-6",key:"mthhwq"}]]),A=a("FolderPlus",[["path",{d:"M12 10v6",key:"1bos4e"}],["path",{d:"M9 13h6",key:"1uhe8q"}],["path",{d:"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",key:"1kt360"}]]),g=a("Settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]);class m extends Error{constructor(e,n="FunctionsError",t){super(e),this.name=n,this.context=t}}class b extends m{constructor(e){super("Failed to send a request to the Edge Function","FunctionsFetchError",e)}}class y extends m{constructor(e){super("Relay Error invoking the Edge Function","FunctionsRelayError",e)}}class v extends m{constructor(e){super("Edge Function returned a non-2xx status code","FunctionsHttpError",e)}}var E;!function(e){e.Any="any",e.ApNortheast1="ap-northeast-1",e.ApNortheast2="ap-northeast-2",e.ApSouth1="ap-south-1",e.ApSoutheast1="ap-southeast-1",e.ApSoutheast2="ap-southeast-2",e.CaCentral1="ca-central-1",e.EuCentral1="eu-central-1",e.EuWest1="eu-west-1",e.EuWest2="eu-west-2",e.EuWest3="eu-west-3",e.SaEast1="sa-east-1",e.UsEast1="us-east-1",e.UsWest1="us-west-1",e.UsWest2="us-west-2"}(E||(E={}));class x{constructor(e,{headers:n={},customFetch:r,region:o=E.Any}={}){this.url=e,this.headers=n,this.region=o,this.fetch=(e=>{let n;return n=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(t.bind(t,907)).then(({default:n})=>n(...e)):fetch),(...e)=>n(...e)})(r)}setAuth(e){this.headers.Authorization=`Bearer ${e}`}invoke(e,n={}){var t,r,o,i,a;return r=this,o=void 0,a=function*(){try{const{headers:r,method:o,body:i}=n;let a={},{region:s}=n;s||(s=this.region);const l=new URL(`${this.url}/${e}`);let c;s&&"any"!==s&&(a["x-region"]=s,l.searchParams.set("forceFunctionRegion",s)),i&&(r&&!Object.prototype.hasOwnProperty.call(r,"Content-Type")||!r)&&("undefined"!=typeof Blob&&i instanceof Blob||i instanceof ArrayBuffer?(a["Content-Type"]="application/octet-stream",c=i):"string"==typeof i?(a["Content-Type"]="text/plain",c=i):"undefined"!=typeof FormData&&i instanceof FormData?c=i:(a["Content-Type"]="application/json",c=JSON.stringify(i)));const u=yield this.fetch(l.toString(),{method:o||"POST",headers:Object.assign(Object.assign(Object.assign({},a),this.headers),r),body:c}).catch(e=>{throw new b(e)}),d=u.headers.get("x-relay-error");if(d&&"true"===d)throw new y(u);if(!u.ok)throw new v(u);let f,h=(null!==(t=u.headers.get("Content-Type"))&&void 0!==t?t:"text/plain").split(";")[0].trim();return f="application/json"===h?yield u.json():"application/octet-stream"===h?yield u.blob():"text/event-stream"===h?u:"multipart/form-data"===h?yield u.formData():yield u.text(),{data:f,error:null,response:u}}catch(e){return{data:null,error:e,response:e instanceof v||e instanceof y?e.context:void 0}}},new((i=void 0)||(i=Promise))(function(e,n){function t(e){try{l(a.next(e))}catch(e){n(e)}}function s(e){try{l(a.throw(e))}catch(e){n(e)}}function l(n){var r;n.done?e(n.value):(r=n.value,r instanceof i?r:new i(function(e){e(r)})).then(t,s)}l((a=a.apply(r,o||[])).next())})}}var C=t(279);const{PostgrestClient:w,PostgrestQueryBuilder:k,PostgrestFilterBuilder:B,PostgrestTransformBuilder:S,PostgrestBuilder:_,PostgrestError:j}=C,T=function(){if("undefined"!=typeof WebSocket)return WebSocket;if(void 0!==global.WebSocket)return global.WebSocket;if(void 0!==window.WebSocket)return window.WebSocket;if(void 0!==self.WebSocket)return self.WebSocket;throw new Error("`WebSocket` is not supported in this environment")}();var N,P,O,z,I,R,L;!function(e){e[e.connecting=0]="connecting",e[e.open=1]="open",e[e.closing=2]="closing",e[e.closed=3]="closed"}(N||(N={})),(L=P||(P={})).closed="closed",L.errored="errored",L.joined="joined",L.joining="joining",L.leaving="leaving",function(e){e.close="phx_close",e.error="phx_error",e.join="phx_join",e.reply="phx_reply",e.leave="phx_leave",e.access_token="access_token"}(O||(O={})),function(e){e.websocket="websocket"}(z||(z={})),function(e){e.Connecting="connecting",e.Open="open",e.Closing="closing",e.Closed="closed"}(I||(I={}));class D{constructor(){this.HEADER_LENGTH=1}decode(e,n){return e.constructor===ArrayBuffer?n(this._binaryDecode(e)):n("string"==typeof e?JSON.parse(e):{})}_binaryDecode(e){const n=new DataView(e),t=new TextDecoder;return this._decodeBroadcast(e,n,t)}_decodeBroadcast(e,n,t){const r=n.getUint8(1),o=n.getUint8(2);let i=this.HEADER_LENGTH+2;const a=t.decode(e.slice(i,i+r));i+=r;const s=t.decode(e.slice(i,i+o));return i+=o,{ref:null,topic:a,event:s,payload:JSON.parse(t.decode(e.slice(i,e.byteLength)))}}}class U{constructor(e,n){this.callback=e,this.timerCalc=n,this.timer=void 0,this.tries=0,this.callback=e,this.timerCalc=n}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}!function(e){e.abstime="abstime",e.bool="bool",e.date="date",e.daterange="daterange",e.float4="float4",e.float8="float8",e.int2="int2",e.int4="int4",e.int4range="int4range",e.int8="int8",e.int8range="int8range",e.json="json",e.jsonb="jsonb",e.money="money",e.numeric="numeric",e.oid="oid",e.reltime="reltime",e.text="text",e.time="time",e.timestamp="timestamp",e.timestamptz="timestamptz",e.timetz="timetz",e.tsrange="tsrange",e.tstzrange="tstzrange"}(R||(R={}));const $=(e,n,t={})=>{var r;const o=null!==(r=t.skipTypes)&&void 0!==r?r:[];return Object.keys(n).reduce((t,r)=>(t[r]=M(r,e,n,o),t),{})},M=(e,n,t,r)=>{const o=n.find(n=>n.name===e),i=null==o?void 0:o.type,a=t[e];return i&&!r.includes(i)?F(i,a):q(a)},F=(e,n)=>{if("_"===e.charAt(0)){const t=e.slice(1,e.length);return Q(n,t)}switch(e){case R.bool:return W(n);case R.float4:case R.float8:case R.int2:case R.int4:case R.int8:case R.numeric:case R.oid:return Y(n);case R.json:case R.jsonb:return V(n);case R.timestamp:return H(n);case R.abstime:case R.date:case R.daterange:case R.int4range:case R.int8range:case R.money:case R.reltime:case R.text:case R.time:case R.timestamptz:case R.timetz:case R.tsrange:case R.tstzrange:default:return q(n)}},q=e=>e,W=e=>{switch(e){case"t":return!0;case"f":return!1;default:return e}},Y=e=>{if("string"==typeof e){const n=parseFloat(e);if(!Number.isNaN(n))return n}return e},V=e=>{if("string"==typeof e)try{return JSON.parse(e)}catch(n){return console.log(`JSON parse error: ${n}`),e}return e},Q=(e,n)=>{if("string"!=typeof e)return e;const t=e.length-1,r=e[t];if("{"===e[0]&&"}"===r){let r;const o=e.slice(1,t);try{r=JSON.parse("["+o+"]")}catch(e){r=o?o.split(","):[]}return r.map(e=>F(n,e))}return e},H=e=>"string"==typeof e?e.replace(" ","T"):e,G=e=>{let n=e;return n=n.replace(/^ws/i,"http"),n=n.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),n.replace(/\/+$/,"")};class K{constructor(e,n,t={},r=1e4){this.channel=e,this.event=n,this.payload=t,this.timeout=r,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(e){this.timeout=e,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(e){this.payload=Object.assign(Object.assign({},this.payload),e)}receive(e,n){var t;return this._hasReceived(e)&&n(null===(t=this.receivedResp)||void 0===t?void 0:t.response),this.recHooks.push({status:e,callback:n}),this}startTimeout(){this.timeoutTimer||(this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref),this.channel._on(this.refEvent,{},e=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=e,this._matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout))}trigger(e,n){this.refEvent&&this.channel._trigger(this.refEvent,{status:e,response:n})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:e,response:n}){this.recHooks.filter(n=>n.status===e).forEach(e=>e.callback(n))}_hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}}var Z,J,X,ee;!function(e){e.SYNC="sync",e.JOIN="join",e.LEAVE="leave"}(Z||(Z={}));class ne{constructor(e,n){this.channel=e,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const t=(null==n?void 0:n.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(t.state,{},e=>{const{onJoin:n,onLeave:t,onSync:r}=this.caller;this.joinRef=this.channel._joinRef(),this.state=ne.syncState(this.state,e,n,t),this.pendingDiffs.forEach(e=>{this.state=ne.syncDiff(this.state,e,n,t)}),this.pendingDiffs=[],r()}),this.channel._on(t.diff,{},e=>{const{onJoin:n,onLeave:t,onSync:r}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(e):(this.state=ne.syncDiff(this.state,e,n,t),r())}),this.onJoin((e,n,t)=>{this.channel._trigger("presence",{event:"join",key:e,currentPresences:n,newPresences:t})}),this.onLeave((e,n,t)=>{this.channel._trigger("presence",{event:"leave",key:e,currentPresences:n,leftPresences:t})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(e,n,t,r){const o=this.cloneDeep(e),i=this.transformState(n),a={},s={};return this.map(o,(e,n)=>{i[e]||(s[e]=n)}),this.map(i,(e,n)=>{const t=o[e];if(t){const r=n.map(e=>e.presence_ref),o=t.map(e=>e.presence_ref),i=n.filter(e=>o.indexOf(e.presence_ref)<0),l=t.filter(e=>r.indexOf(e.presence_ref)<0);i.length>0&&(a[e]=i),l.length>0&&(s[e]=l)}else a[e]=n}),this.syncDiff(o,{joins:a,leaves:s},t,r)}static syncDiff(e,n,t,r){const{joins:o,leaves:i}={joins:this.transformState(n.joins),leaves:this.transformState(n.leaves)};return t||(t=()=>{}),r||(r=()=>{}),this.map(o,(n,r)=>{var o;const i=null!==(o=e[n])&&void 0!==o?o:[];if(e[n]=this.cloneDeep(r),i.length>0){const t=e[n].map(e=>e.presence_ref),r=i.filter(e=>t.indexOf(e.presence_ref)<0);e[n].unshift(...r)}t(n,i,r)}),this.map(i,(n,t)=>{let o=e[n];if(!o)return;const i=t.map(e=>e.presence_ref);o=o.filter(e=>i.indexOf(e.presence_ref)<0),e[n]=o,r(n,o,t),0===o.length&&delete e[n]}),e}static map(e,n){return Object.getOwnPropertyNames(e).map(t=>n(t,e[t]))}static transformState(e){return e=this.cloneDeep(e),Object.getOwnPropertyNames(e).reduce((n,t)=>{const r=e[t];return n[t]="metas"in r?r.metas.map(e=>(e.presence_ref=e.phx_ref,delete e.phx_ref,delete e.phx_ref_prev,e)):r,n},{})}static cloneDeep(e){return JSON.parse(JSON.stringify(e))}onJoin(e){this.caller.onJoin=e}onLeave(e){this.caller.onLeave=e}onSync(e){this.caller.onSync=e}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}!function(e){e.ALL="*",e.INSERT="INSERT",e.UPDATE="UPDATE",e.DELETE="DELETE"}(J||(J={})),function(e){e.BROADCAST="broadcast",e.PRESENCE="presence",e.POSTGRES_CHANGES="postgres_changes",e.SYSTEM="system"}(X||(X={})),function(e){e.SUBSCRIBED="SUBSCRIBED",e.TIMED_OUT="TIMED_OUT",e.CLOSED="CLOSED",e.CHANNEL_ERROR="CHANNEL_ERROR"}(ee||(ee={}));class te{constructor(e,n={config:{}},t){this.topic=e,this.params=n,this.socket=t,this.bindings={},this.state=P.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=e.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},n.config),this.timeout=this.socket.timeout,this.joinPush=new K(this,O.join,this.params,this.timeout),this.rejoinTimer=new U(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=P.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(e=>e.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=P.closed,this.socket._remove(this)}),this._onError(e=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,e),this.state=P.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=P.errored,this.rejoinTimer.scheduleTimeout())}),this._on(O.reply,{},(e,n)=>{this._trigger(this._replyEventName(n),e)}),this.presence=new ne(this),this.broadcastEndpointURL=G(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(e,n=this.timeout){var t,r;if(this.socket.isConnected()||this.socket.connect(),this.state==P.closed){const{config:{broadcast:o,presence:i,private:a}}=this.params;this._onError(n=>null==e?void 0:e(ee.CHANNEL_ERROR,n)),this._onClose(()=>null==e?void 0:e(ee.CLOSED));const s={},l={broadcast:o,presence:i,postgres_changes:null!==(r=null===(t=this.bindings.postgres_changes)||void 0===t?void 0:t.map(e=>e.filter))&&void 0!==r?r:[],private:a};this.socket.accessTokenValue&&(s.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:l},s)),this.joinedOnce=!0,this._rejoin(n),this.joinPush.receive("ok",async({postgres_changes:n})=>{var t;if(this.socket.setAuth(),void 0!==n){const r=this.bindings.postgres_changes,o=null!==(t=null==r?void 0:r.length)&&void 0!==t?t:0,i=[];for(let t=0;t<o;t++){const o=r[t],{filter:{event:a,schema:s,table:l,filter:c}}=o,u=n&&n[t];if(!u||u.event!==a||u.schema!==s||u.table!==l||u.filter!==c)return this.unsubscribe(),this.state=P.errored,void(null==e||e(ee.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes")));i.push(Object.assign(Object.assign({},o),{id:u.id}))}return this.bindings.postgres_changes=i,void(e&&e(ee.SUBSCRIBED))}null==e||e(ee.SUBSCRIBED)}).receive("error",n=>{this.state=P.errored,null==e||e(ee.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(n).join(", ")||"error")))}).receive("timeout",()=>{null==e||e(ee.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(e,n={}){return await this.send({type:"presence",event:"track",payload:e},n.timeout||this.timeout)}async untrack(e={}){return await this.send({type:"presence",event:"untrack"},e)}on(e,n,t){return this._on(e,n,t)}async send(e,n={}){var t,r;if(this._canPush()||"broadcast"!==e.type)return new Promise(t=>{var r,o,i;const a=this._push(e.type,e,n.timeout||this.timeout);"broadcast"!==e.type||(null===(i=null===(o=null===(r=this.params)||void 0===r?void 0:r.config)||void 0===o?void 0:o.broadcast)||void 0===i?void 0:i.ack)||t("ok"),a.receive("ok",()=>t("ok")),a.receive("error",()=>t("error")),a.receive("timeout",()=>t("timed out"))});{const{event:o,payload:i}=e,a={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:o,payload:i,private:this.private}]})};try{const e=await this._fetchWithTimeout(this.broadcastEndpointURL,a,null!==(t=n.timeout)&&void 0!==t?t:this.timeout);return await(null===(r=e.body)||void 0===r?void 0:r.cancel()),e.ok?"ok":"error"}catch(e){return"AbortError"===e.name?"timed out":"error"}}}updateJoinPayload(e){this.joinPush.updatePayload(e)}unsubscribe(e=this.timeout){this.state=P.leaving;const n=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(O.close,"leave",this._joinRef())};this.joinPush.destroy();let t=null;return new Promise(r=>{t=new K(this,O.leave,{},e),t.receive("ok",()=>{n(),r("ok")}).receive("timeout",()=>{n(),r("timed out")}).receive("error",()=>{r("error")}),t.send(),this._canPush()||t.trigger("ok",{})}).finally(()=>{null==t||t.destroy()})}teardown(){this.pushBuffer.forEach(e=>e.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}async _fetchWithTimeout(e,n,t){const r=new AbortController,o=setTimeout(()=>r.abort(),t),i=await this.socket.fetch(e,Object.assign(Object.assign({},n),{signal:r.signal}));return clearTimeout(o),i}_push(e,n,t=this.timeout){if(!this.joinedOnce)throw`tried to push '${e}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let r=new K(this,e,n,t);return this._canPush()?r.send():(r.startTimeout(),this.pushBuffer.push(r)),r}_onMessage(e,n,t){return n}_isMember(e){return this.topic===e}_joinRef(){return this.joinPush.ref}_trigger(e,n,t){var r,o;const i=e.toLocaleLowerCase(),{close:a,error:s,leave:l,join:c}=O;if(t&&[a,s,l,c].indexOf(i)>=0&&t!==this._joinRef())return;let u=this._onMessage(i,n,t);if(n&&!u)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(i)?null===(r=this.bindings.postgres_changes)||void 0===r||r.filter(e=>{var n,t,r;return"*"===(null===(n=e.filter)||void 0===n?void 0:n.event)||(null===(r=null===(t=e.filter)||void 0===t?void 0:t.event)||void 0===r?void 0:r.toLocaleLowerCase())===i}).map(e=>e.callback(u,t)):null===(o=this.bindings[i])||void 0===o||o.filter(e=>{var t,r,o,a,s,l;if(["broadcast","presence","postgres_changes"].includes(i)){if("id"in e){const i=e.id,a=null===(t=e.filter)||void 0===t?void 0:t.event;return i&&(null===(r=n.ids)||void 0===r?void 0:r.includes(i))&&("*"===a||(null==a?void 0:a.toLocaleLowerCase())===(null===(o=n.data)||void 0===o?void 0:o.type.toLocaleLowerCase()))}{const t=null===(s=null===(a=null==e?void 0:e.filter)||void 0===a?void 0:a.event)||void 0===s?void 0:s.toLocaleLowerCase();return"*"===t||t===(null===(l=null==n?void 0:n.event)||void 0===l?void 0:l.toLocaleLowerCase())}}return e.type.toLocaleLowerCase()===i}).map(e=>{if("object"==typeof u&&"ids"in u){const e=u.data,{schema:n,table:t,commit_timestamp:r,type:o,errors:i}=e,a={schema:n,table:t,commit_timestamp:r,eventType:o,new:{},old:{},errors:i};u=Object.assign(Object.assign({},a),this._getPayloadRecords(e))}e.callback(u,t)})}_isClosed(){return this.state===P.closed}_isJoined(){return this.state===P.joined}_isJoining(){return this.state===P.joining}_isLeaving(){return this.state===P.leaving}_replyEventName(e){return`chan_reply_${e}`}_on(e,n,t){const r=e.toLocaleLowerCase(),o={type:r,filter:n,callback:t};return this.bindings[r]?this.bindings[r].push(o):this.bindings[r]=[o],this}_off(e,n){const t=e.toLocaleLowerCase();return this.bindings[t]=this.bindings[t].filter(e=>{var r;return!((null===(r=e.type)||void 0===r?void 0:r.toLocaleLowerCase())===t&&te.isEqual(e.filter,n))}),this}static isEqual(e,n){if(Object.keys(e).length!==Object.keys(n).length)return!1;for(const t in e)if(e[t]!==n[t])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(e){this._on(O.close,{},e)}_onError(e){this._on(O.error,{},n=>e(n))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(e=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=P.joining,this.joinPush.resend(e))}_getPayloadRecords(e){const n={new:{},old:{}};return"INSERT"!==e.type&&"UPDATE"!==e.type||(n.new=$(e.columns,e.record)),"UPDATE"!==e.type&&"DELETE"!==e.type||(n.old=$(e.columns,e.old_record)),n}}const re=()=>{};class oe{constructor(e,n){var r;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers={},this.params={},this.timeout=1e4,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=re,this.ref=0,this.logger=re,this.conn=null,this.sendBuffer=[],this.serializer=new D,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=e=>{let n;return n=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(t.bind(t,907)).then(({default:n})=>n(...e)):fetch),(...e)=>n(...e)},this.endPoint=`${e}/${z.websocket}`,this.httpEndpoint=G(e),(null==n?void 0:n.transport)?this.transport=n.transport:this.transport=null,(null==n?void 0:n.params)&&(this.params=n.params),(null==n?void 0:n.timeout)&&(this.timeout=n.timeout),(null==n?void 0:n.logger)&&(this.logger=n.logger),((null==n?void 0:n.logLevel)||(null==n?void 0:n.log_level))&&(this.logLevel=n.logLevel||n.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),(null==n?void 0:n.heartbeatIntervalMs)&&(this.heartbeatIntervalMs=n.heartbeatIntervalMs);const o=null===(r=null==n?void 0:n.params)||void 0===r?void 0:r.apikey;if(o&&(this.accessTokenValue=o,this.apiKey=o),this.reconnectAfterMs=(null==n?void 0:n.reconnectAfterMs)?n.reconnectAfterMs:e=>[1e3,2e3,5e3,1e4][e-1]||1e4,this.encode=(null==n?void 0:n.encode)?n.encode:(e,n)=>n(JSON.stringify(e)),this.decode=(null==n?void 0:n.decode)?n.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new U(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(null==n?void 0:n.fetch),null==n?void 0:n.worker){if("undefined"!=typeof window&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(null==n?void 0:n.worker)||!1,this.workerUrl=null==n?void 0:n.workerUrl}this.accessToken=(null==n?void 0:n.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=T),!this.transport)throw new Error("No transport provided");this.conn=new this.transport(this.endpointURL()),this.setupConnection()}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:"1.0.0"}))}disconnect(e,n){this.conn&&(this.conn.onclose=function(){},e?this.conn.close(e,null!=n?n:""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(e=>e.teardown()))}getChannels(){return this.channels}async removeChannel(e){const n=await e.unsubscribe();return 0===this.channels.length&&this.disconnect(),n}async removeAllChannels(){const e=await Promise.all(this.channels.map(e=>e.unsubscribe()));return this.channels=[],this.disconnect(),e}log(e,n,t){this.logger(e,n,t)}connectionState(){switch(this.conn&&this.conn.readyState){case N.connecting:return I.Connecting;case N.open:return I.Open;case N.closing:return I.Closing;default:return I.Closed}}isConnected(){return this.connectionState()===I.Open}channel(e,n={config:{}}){const t=`realtime:${e}`,r=this.getChannels().find(e=>e.topic===t);if(r)return r;{const t=new te(`realtime:${e}`,n,this);return this.channels.push(t),t}}push(e){const{topic:n,event:t,payload:r,ref:o}=e,i=()=>{this.encode(e,e=>{var n;null===(n=this.conn)||void 0===n||n.send(e)})};this.log("push",`${n} ${t} (${o})`,r),this.isConnected()?i():this.sendBuffer.push(i)}async setAuth(e=null){let n=e||this.accessToken&&await this.accessToken()||this.accessTokenValue;this.accessTokenValue!=n&&(this.accessTokenValue=n,this.channels.forEach(e=>{const t={access_token:n,version:"realtime-js/2.11.15"};n&&e.updateJoinPayload(t),e.joinedOnce&&e._isJoined()&&e._push(O.access_token,{access_token:n})}))}async sendHeartbeat(){var e;if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),void(null===(e=this.conn)||void 0===e||e.close(1e3,"hearbeat timeout"));this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),await this.setAuth()}else this.heartbeatCallback("disconnected")}onHeartbeat(e){this.heartbeatCallback=e}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}_makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}_leaveOpenTopic(e){let n=this.channels.find(n=>n.topic===e&&(n._isJoined()||n._isJoining()));n&&(this.log("transport",`leaving duplicate topic "${e}"`),n.unsubscribe())}_remove(e){this.channels=this.channels.filter(n=>n.topic!==e.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=e=>this._onConnError(e),this.conn.onmessage=e=>this._onConnMessage(e),this.conn.onclose=e=>this._onConnClose(e))}_onConnMessage(e){this.decode(e.data,e=>{let{topic:n,event:t,payload:r,ref:o}=e;"phoenix"===n&&"phx_reply"===t&&this.heartbeatCallback("ok"==e.payload.status?"ok":"error"),o&&o===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${r.status||""} ${n} ${t} ${o&&"("+o+")"||""}`,r),Array.from(this.channels).filter(e=>e._isMember(n)).forEach(e=>e._trigger(t,r,o)),this.stateChangeCallbacks.message.forEach(n=>n(e))})}_onConnOpen(){this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker?this.workerRef||this._startWorkerHeartbeat():this._startHeartbeat(),this.stateChangeCallbacks.open.forEach(e=>e())}_startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)}_startWorkerHeartbeat(){this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const e=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(e),this.workerRef.onerror=e=>{this.log("worker","worker error",e.message),this.workerRef.terminate()},this.workerRef.onmessage=e=>{"keepAlive"===e.data.event&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}_onConnClose(e){this.log("transport","close",e),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(n=>n(e))}_onConnError(e){this.log("transport",`${e}`),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(n=>n(e))}_triggerChanError(){this.channels.forEach(e=>e._trigger(O.error))}_appendParams(e,n){if(0===Object.keys(n).length)return e;const t=e.match(/\?/)?"&":"?";return`${e}${t}${new URLSearchParams(n)}`}_workerObjectUrl(e){let n;if(e)n=e;else{const e=new Blob(['\n  addEventListener("message", (e) => {\n    if (e.data.event === "start") {\n      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);\n    }\n  });'],{type:"application/javascript"});n=URL.createObjectURL(e)}return n}}class ie extends Error{constructor(e){super(e),this.__isStorageError=!0,this.name="StorageError"}}function ae(e){return"object"==typeof e&&null!==e&&"__isStorageError"in e}class se extends ie{constructor(e,n){super(e),this.name="StorageApiError",this.status=n}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class le extends ie{constructor(e,n){super(e),this.name="StorageUnknownError",this.originalError=n}}const ce=e=>{let n;return n=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(t.bind(t,907)).then(({default:n})=>n(...e)):fetch),(...e)=>n(...e)},ue=e=>{if(Array.isArray(e))return e.map(e=>ue(e));if("function"==typeof e||e!==Object(e))return e;const n={};return Object.entries(e).forEach(([e,t])=>{const r=e.replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace(/[-_]/g,""));n[r]=ue(t)}),n};var de=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t(function(e){e(n)})).then(a,s)}l((r=r.apply(e,n||[])).next())})};const fe=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),he=(e,n,r)=>de(void 0,void 0,void 0,function*(){const o=yield(i=void 0,a=void 0,s=void 0,l=function*(){return"undefined"==typeof Response?(yield Promise.resolve().then(t.bind(t,907))).Response:Response},new(s||(s=Promise))(function(e,n){function t(e){try{o(l.next(e))}catch(e){n(e)}}function r(e){try{o(l.throw(e))}catch(e){n(e)}}function o(n){var o;n.done?e(n.value):(o=n.value,o instanceof s?o:new s(function(e){e(o)})).then(t,r)}o((l=l.apply(i,a||[])).next())}));var i,a,s,l;e instanceof o&&!(null==r?void 0:r.noResolveJson)?e.json().then(t=>{n(new se(fe(t),e.status||500))}).catch(e=>{n(new le(fe(e),e))}):n(new le(fe(e),e))});function pe(e,n,t,r,o,i){return de(this,void 0,void 0,function*(){return new Promise((a,s)=>{e(t,((e,n,t,r)=>{const o={method:e,headers:(null==n?void 0:n.headers)||{}};return"GET"===e?o:(o.headers=Object.assign({"Content-Type":"application/json"},null==n?void 0:n.headers),r&&(o.body=JSON.stringify(r)),Object.assign(Object.assign({},o),t))})(n,r,o,i)).then(e=>{if(!e.ok)throw e;return(null==r?void 0:r.noResolveJson)?e:e.json()}).then(e=>a(e)).catch(e=>he(e,s,r))})})}function Ae(e,n,t,r){return de(this,void 0,void 0,function*(){return pe(e,"GET",n,t,r)})}function ge(e,n,t,r,o){return de(this,void 0,void 0,function*(){return pe(e,"POST",n,r,o,t)})}function me(e,n,t,r,o){return de(this,void 0,void 0,function*(){return pe(e,"DELETE",n,r,o,t)})}var be=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t(function(e){e(n)})).then(a,s)}l((r=r.apply(e,n||[])).next())})};const ye={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},ve={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class Ee{constructor(e,n={},t,r){this.url=e,this.headers=n,this.bucketId=t,this.fetch=ce(r)}uploadOrUpdate(e,n,t,r){return be(this,void 0,void 0,function*(){try{let o;const i=Object.assign(Object.assign({},ve),r);let a=Object.assign(Object.assign({},this.headers),"POST"===e&&{"x-upsert":String(i.upsert)});const s=i.metadata;"undefined"!=typeof Blob&&t instanceof Blob?(o=new FormData,o.append("cacheControl",i.cacheControl),s&&o.append("metadata",this.encodeMetadata(s)),o.append("",t)):"undefined"!=typeof FormData&&t instanceof FormData?(o=t,o.append("cacheControl",i.cacheControl),s&&o.append("metadata",this.encodeMetadata(s))):(o=t,a["cache-control"]=`max-age=${i.cacheControl}`,a["content-type"]=i.contentType,s&&(a["x-metadata"]=this.toBase64(this.encodeMetadata(s)))),(null==r?void 0:r.headers)&&(a=Object.assign(Object.assign({},a),r.headers));const l=this._removeEmptyFolders(n),c=this._getFinalPath(l),u=yield this.fetch(`${this.url}/object/${c}`,Object.assign({method:e,body:o,headers:a},(null==i?void 0:i.duplex)?{duplex:i.duplex}:{})),d=yield u.json();return u.ok?{data:{path:l,id:d.Id,fullPath:d.Key},error:null}:{data:null,error:d}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}upload(e,n,t){return be(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",e,n,t)})}uploadToSignedUrl(e,n,t,r){return be(this,void 0,void 0,function*(){const o=this._removeEmptyFolders(e),i=this._getFinalPath(o),a=new URL(this.url+`/object/upload/sign/${i}`);a.searchParams.set("token",n);try{let e;const n=Object.assign({upsert:ve.upsert},r),i=Object.assign(Object.assign({},this.headers),{"x-upsert":String(n.upsert)});"undefined"!=typeof Blob&&t instanceof Blob?(e=new FormData,e.append("cacheControl",n.cacheControl),e.append("",t)):"undefined"!=typeof FormData&&t instanceof FormData?(e=t,e.append("cacheControl",n.cacheControl)):(e=t,i["cache-control"]=`max-age=${n.cacheControl}`,i["content-type"]=n.contentType);const s=yield this.fetch(a.toString(),{method:"PUT",body:e,headers:i}),l=yield s.json();return s.ok?{data:{path:o,fullPath:l.Key},error:null}:{data:null,error:l}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}createSignedUploadUrl(e,n){return be(this,void 0,void 0,function*(){try{let t=this._getFinalPath(e);const r=Object.assign({},this.headers);(null==n?void 0:n.upsert)&&(r["x-upsert"]="true");const o=yield ge(this.fetch,`${this.url}/object/upload/sign/${t}`,{},{headers:r}),i=new URL(this.url+o.url),a=i.searchParams.get("token");if(!a)throw new ie("No token returned by API");return{data:{signedUrl:i.toString(),path:e,token:a},error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}update(e,n,t){return be(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",e,n,t)})}move(e,n,t){return be(this,void 0,void 0,function*(){try{return{data:yield ge(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:e,destinationKey:n,destinationBucket:null==t?void 0:t.destinationBucket},{headers:this.headers}),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}copy(e,n,t){return be(this,void 0,void 0,function*(){try{return{data:{path:(yield ge(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:e,destinationKey:n,destinationBucket:null==t?void 0:t.destinationBucket},{headers:this.headers})).Key},error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}createSignedUrl(e,n,t){return be(this,void 0,void 0,function*(){try{let r=this._getFinalPath(e),o=yield ge(this.fetch,`${this.url}/object/sign/${r}`,Object.assign({expiresIn:n},(null==t?void 0:t.transform)?{transform:t.transform}:{}),{headers:this.headers});const i=(null==t?void 0:t.download)?`&download=${!0===t.download?"":t.download}`:"";return o={signedUrl:encodeURI(`${this.url}${o.signedURL}${i}`)},{data:o,error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}createSignedUrls(e,n,t){return be(this,void 0,void 0,function*(){try{const r=yield ge(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:n,paths:e},{headers:this.headers}),o=(null==t?void 0:t.download)?`&download=${!0===t.download?"":t.download}`:"";return{data:r.map(e=>Object.assign(Object.assign({},e),{signedUrl:e.signedURL?encodeURI(`${this.url}${e.signedURL}${o}`):null})),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}download(e,n){return be(this,void 0,void 0,function*(){const t=void 0!==(null==n?void 0:n.transform)?"render/image/authenticated":"object",r=this.transformOptsToQueryString((null==n?void 0:n.transform)||{}),o=r?`?${r}`:"";try{const n=this._getFinalPath(e),r=yield Ae(this.fetch,`${this.url}/${t}/${n}${o}`,{headers:this.headers,noResolveJson:!0});return{data:yield r.blob(),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}info(e){return be(this,void 0,void 0,function*(){const n=this._getFinalPath(e);try{const e=yield Ae(this.fetch,`${this.url}/object/info/${n}`,{headers:this.headers});return{data:ue(e),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}exists(e){return be(this,void 0,void 0,function*(){const n=this._getFinalPath(e);try{return yield function(e,n,t){return de(this,void 0,void 0,function*(){return pe(e,"HEAD",n,Object.assign(Object.assign({},t),{noResolveJson:!0}),undefined)})}(this.fetch,`${this.url}/object/${n}`,{headers:this.headers}),{data:!0,error:null}}catch(e){if(ae(e)&&e instanceof le){const n=e.originalError;if([400,404].includes(null==n?void 0:n.status))return{data:!1,error:e}}throw e}})}getPublicUrl(e,n){const t=this._getFinalPath(e),r=[],o=(null==n?void 0:n.download)?`download=${!0===n.download?"":n.download}`:"";""!==o&&r.push(o);const i=void 0!==(null==n?void 0:n.transform)?"render/image":"object",a=this.transformOptsToQueryString((null==n?void 0:n.transform)||{});""!==a&&r.push(a);let s=r.join("&");return""!==s&&(s=`?${s}`),{data:{publicUrl:encodeURI(`${this.url}/${i}/public/${t}${s}`)}}}remove(e){return be(this,void 0,void 0,function*(){try{return{data:yield me(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:e},{headers:this.headers}),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}list(e,n,t){return be(this,void 0,void 0,function*(){try{const r=Object.assign(Object.assign(Object.assign({},ye),n),{prefix:e||""});return{data:yield ge(this.fetch,`${this.url}/object/list/${this.bucketId}`,r,{headers:this.headers},t),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}encodeMetadata(e){return JSON.stringify(e)}toBase64(e){return"undefined"!=typeof Buffer?Buffer.from(e).toString("base64"):btoa(e)}_getFinalPath(e){return`${this.bucketId}/${e}`}_removeEmptyFolders(e){return e.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(e){const n=[];return e.width&&n.push(`width=${e.width}`),e.height&&n.push(`height=${e.height}`),e.resize&&n.push(`resize=${e.resize}`),e.format&&n.push(`format=${e.format}`),e.quality&&n.push(`quality=${e.quality}`),n.join("&")}}const xe={"X-Client-Info":"storage-js/2.7.1"};var Ce=function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t(function(e){e(n)})).then(a,s)}l((r=r.apply(e,n||[])).next())})};class we{constructor(e,n={},t){this.url=e,this.headers=Object.assign(Object.assign({},xe),n),this.fetch=ce(t)}listBuckets(){return Ce(this,void 0,void 0,function*(){try{return{data:yield Ae(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}getBucket(e){return Ce(this,void 0,void 0,function*(){try{return{data:yield Ae(this.fetch,`${this.url}/bucket/${e}`,{headers:this.headers}),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}createBucket(e,n={public:!1}){return Ce(this,void 0,void 0,function*(){try{return{data:yield ge(this.fetch,`${this.url}/bucket`,{id:e,name:e,public:n.public,file_size_limit:n.fileSizeLimit,allowed_mime_types:n.allowedMimeTypes},{headers:this.headers}),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}updateBucket(e,n){return Ce(this,void 0,void 0,function*(){try{const t=yield function(e,n,t,r){return de(this,void 0,void 0,function*(){return pe(e,"PUT",n,r,undefined,t)})}(this.fetch,`${this.url}/bucket/${e}`,{id:e,name:e,public:n.public,file_size_limit:n.fileSizeLimit,allowed_mime_types:n.allowedMimeTypes},{headers:this.headers});return{data:t,error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}emptyBucket(e){return Ce(this,void 0,void 0,function*(){try{return{data:yield ge(this.fetch,`${this.url}/bucket/${e}/empty`,{},{headers:this.headers}),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}deleteBucket(e){return Ce(this,void 0,void 0,function*(){try{return{data:yield me(this.fetch,`${this.url}/bucket/${e}`,{},{headers:this.headers}),error:null}}catch(e){if(ae(e))return{data:null,error:e};throw e}})}}class ke extends we{constructor(e,n={},t){super(e,n,t)}from(e){return new Ee(this.url,this.headers,e,this.fetch)}}let Be="";Be="undefined"!=typeof Deno?"deno":"undefined"!=typeof document?"web":"undefined"!=typeof navigator&&"ReactNative"===navigator.product?"react-native":"node";const Se={headers:{"X-Client-Info":`supabase-js-${Be}/2.50.3`}},_e={schema:"public"},je={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},Te={};var Ne=t(907);const Pe=e=>{let n;return n=e||("undefined"==typeof fetch?Ne.default:fetch),(...e)=>n(...e)},Oe=(e,n,t)=>{const r=Pe(t),o="undefined"==typeof Headers?Ne.Headers:Headers;return(t,i)=>{return a=void 0,s=void 0,c=function*(){var a;const s=null!==(a=yield n())&&void 0!==a?a:e;let l=new o(null==i?void 0:i.headers);return l.has("apikey")||l.set("apikey",e),l.has("Authorization")||l.set("Authorization",`Bearer ${s}`),r(t,Object.assign(Object.assign({},i),{headers:l}))},new((l=void 0)||(l=Promise))(function(e,n){function t(e){try{o(c.next(e))}catch(e){n(e)}}function r(e){try{o(c.throw(e))}catch(e){n(e)}}function o(n){var o;n.done?e(n.value):(o=n.value,o instanceof l?o:new l(function(e){e(o)})).then(t,r)}o((c=c.apply(a,s||[])).next())});var a,s,l,c}};const ze="2.70.0",Ie=3e4,Re={"X-Client-Info":`gotrue-js/${ze}`},Le="X-Supabase-Api-Version",De=Date.parse("2024-01-01T00:00:00.0Z"),Ue="2024-01-01",$e=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;class Me extends Error{constructor(e,n,t){super(e),this.__isAuthError=!0,this.name="AuthError",this.status=n,this.code=t}}function Fe(e){return"object"==typeof e&&null!==e&&"__isAuthError"in e}class qe extends Me{constructor(e,n,t){super(e,n,t),this.name="AuthApiError",this.status=n,this.code=t}}class We extends Me{constructor(e,n){super(e),this.name="AuthUnknownError",this.originalError=n}}class Ye extends Me{constructor(e,n,t,r){super(e,t,r),this.name=n,this.status=t}}class Ve extends Ye{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}class Qe extends Ye{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class He extends Ye{constructor(e){super(e,"AuthInvalidCredentialsError",400,void 0)}}class Ge extends Ye{constructor(e,n=null){super(e,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=n}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Ke extends Ye{constructor(e,n=null){super(e,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=n}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Ze extends Ye{constructor(e,n){super(e,"AuthRetryableFetchError",n,void 0)}}function Je(e){return Fe(e)&&"AuthRetryableFetchError"===e.name}class Xe extends Ye{constructor(e,n,t){super(e,"AuthWeakPasswordError",n,"weak_password"),this.reasons=t}}class en extends Ye{constructor(e){super(e,"AuthInvalidJwtError",400,"invalid_jwt")}}const nn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),tn=" \t\n\r=".split(""),rn=(()=>{const e=new Array(128);for(let n=0;n<e.length;n+=1)e[n]=-1;for(let n=0;n<tn.length;n+=1)e[tn[n].charCodeAt(0)]=-2;for(let n=0;n<nn.length;n+=1)e[nn[n].charCodeAt(0)]=n;return e})();function on(e,n,t){if(null!==e)for(n.queue=n.queue<<8|e,n.queuedBits+=8;n.queuedBits>=6;){const e=n.queue>>n.queuedBits-6&63;t(nn[e]),n.queuedBits-=6}else if(n.queuedBits>0)for(n.queue=n.queue<<6-n.queuedBits,n.queuedBits=6;n.queuedBits>=6;){const e=n.queue>>n.queuedBits-6&63;t(nn[e]),n.queuedBits-=6}}function an(e,n,t){const r=rn[e];if(!(r>-1)){if(-2===r)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(e)}"`)}for(n.queue=n.queue<<6|r,n.queuedBits+=6;n.queuedBits>=8;)t(n.queue>>n.queuedBits-8&255),n.queuedBits-=8}function sn(e){const n=[],t=e=>{n.push(String.fromCodePoint(e))},r={utf8seq:0,codepoint:0},o={queue:0,queuedBits:0},i=e=>{!function(e,n,t){if(0===n.utf8seq){if(e<=127)return void t(e);for(let t=1;t<6;t+=1)if(!(e>>7-t&1)){n.utf8seq=t;break}if(2===n.utf8seq)n.codepoint=31&e;else if(3===n.utf8seq)n.codepoint=15&e;else{if(4!==n.utf8seq)throw new Error("Invalid UTF-8 sequence");n.codepoint=7&e}n.utf8seq-=1}else if(n.utf8seq>0){if(e<=127)throw new Error("Invalid UTF-8 sequence");n.codepoint=n.codepoint<<6|63&e,n.utf8seq-=1,0===n.utf8seq&&t(n.codepoint)}}(e,r,t)};for(let n=0;n<e.length;n+=1)an(e.charCodeAt(n),o,i);return n.join("")}function ln(e,n){if(!(e<=127)){if(e<=2047)return n(192|e>>6),void n(128|63&e);if(e<=65535)return n(224|e>>12),n(128|e>>6&63),void n(128|63&e);if(e<=1114111)return n(240|e>>18),n(128|e>>12&63),n(128|e>>6&63),void n(128|63&e);throw new Error(`Unrecognized Unicode codepoint: ${e.toString(16)}`)}n(e)}function cn(e){const n=[],t={queue:0,queuedBits:0},r=e=>{n.push(e)};for(let n=0;n<e.length;n+=1)an(e.charCodeAt(n),t,r);return new Uint8Array(n)}function un(e){const n=[],t={queue:0,queuedBits:0},r=e=>{n.push(e)};return e.forEach(e=>on(e,t,r)),on(null,t,r),n.join("")}const dn=()=>"undefined"!=typeof window&&"undefined"!=typeof document,fn={tested:!1,writable:!1},hn=()=>{if(!dn())return!1;try{if("object"!=typeof globalThis.localStorage)return!1}catch(e){return!1}if(fn.tested)return fn.writable;const e=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(e,e),globalThis.localStorage.removeItem(e),fn.tested=!0,fn.writable=!0}catch(e){fn.tested=!0,fn.writable=!1}return fn.writable},pn=e=>{let n;return n=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(t.bind(t,907)).then(({default:n})=>n(...e)):fetch),(...e)=>n(...e)},An=async(e,n,t)=>{await e.setItem(n,JSON.stringify(t))},gn=async(e,n)=>{const t=await e.getItem(n);if(!t)return null;try{return JSON.parse(t)}catch(e){return t}},mn=async(e,n)=>{await e.removeItem(n)};class bn{constructor(){this.promise=new bn.promiseConstructor((e,n)=>{this.resolve=e,this.reject=n})}}function yn(e){const n=e.split(".");if(3!==n.length)throw new en("Invalid JWT structure");for(let e=0;e<n.length;e++)if(!$e.test(n[e]))throw new en("JWT not in base64url format");return{header:JSON.parse(sn(n[0])),payload:JSON.parse(sn(n[1])),signature:cn(n[2]),raw:{header:n[0],payload:n[1]}}}function vn(e){return("0"+e.toString(16)).substr(-2)}async function En(e,n,t=!1){const r=function(){const e=new Uint32Array(56);if("undefined"==typeof crypto){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",n=e.length;let t="";for(let r=0;r<56;r++)t+=e.charAt(Math.floor(Math.random()*n));return t}return crypto.getRandomValues(e),Array.from(e,vn).join("")}();let o=r;t&&(o+="/PASSWORD_RECOVERY"),await An(e,`${n}-code-verifier`,o);const i=await async function(e){if("undefined"==typeof crypto||void 0===crypto.subtle||"undefined"==typeof TextEncoder)return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),e;const n=await async function(e){const n=(new TextEncoder).encode(e),t=await crypto.subtle.digest("SHA-256",n),r=new Uint8Array(t);return Array.from(r).map(e=>String.fromCharCode(e)).join("")}(e);return btoa(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}(r);return[i,r===i?"plain":"s256"]}bn.promiseConstructor=Promise;const xn=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i,Cn=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function wn(e){if(!Cn.test(e))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}const kn=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),Bn=[502,503,504];async function Sn(e){var n,t;if(!("object"==typeof(t=e)&&null!==t&&"status"in t&&"ok"in t&&"json"in t&&"function"==typeof t.json))throw new Ze(kn(e),0);if(Bn.includes(e.status))throw new Ze(kn(e),e.status);let r,o;try{r=await e.json()}catch(e){throw new We(kn(e),e)}const i=function(e){const n=e.headers.get(Le);if(!n)return null;if(!n.match(xn))return null;try{return new Date(`${n}T00:00:00.0Z`)}catch(e){return null}}(e);if(i&&i.getTime()>=De&&"object"==typeof r&&r&&"string"==typeof r.code?o=r.code:"object"==typeof r&&r&&"string"==typeof r.error_code&&(o=r.error_code),o){if("weak_password"===o)throw new Xe(kn(r),e.status,(null===(n=r.weak_password)||void 0===n?void 0:n.reasons)||[]);if("session_not_found"===o)throw new Ve}else if("object"==typeof r&&r&&"object"==typeof r.weak_password&&r.weak_password&&Array.isArray(r.weak_password.reasons)&&r.weak_password.reasons.length&&r.weak_password.reasons.reduce((e,n)=>e&&"string"==typeof n,!0))throw new Xe(kn(r),e.status,r.weak_password.reasons);throw new qe(kn(r),e.status||500,o)}async function _n(e,n,t,r){var o;const i=Object.assign({},null==r?void 0:r.headers);i[Le]||(i[Le]=Ue),(null==r?void 0:r.jwt)&&(i.Authorization=`Bearer ${r.jwt}`);const a=null!==(o=null==r?void 0:r.query)&&void 0!==o?o:{};(null==r?void 0:r.redirectTo)&&(a.redirect_to=r.redirectTo);const s=Object.keys(a).length?"?"+new URLSearchParams(a).toString():"",l=await async function(e,n,t,r,o,i){const a=((e,n,t,r)=>{const o={method:e,headers:(null==n?void 0:n.headers)||{}};return"GET"===e?o:(o.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},null==n?void 0:n.headers),o.body=JSON.stringify(r),Object.assign(Object.assign({},o),t))})(n,r,{},i);let s;try{s=await e(t,Object.assign({},a))}catch(e){throw console.error(e),new Ze(kn(e),0)}if(s.ok||await Sn(s),null==r?void 0:r.noResolveJson)return s;try{return await s.json()}catch(e){await Sn(e)}}(e,n,t+s,{headers:i,noResolveJson:null==r?void 0:r.noResolveJson},0,null==r?void 0:r.body);return(null==r?void 0:r.xform)?null==r?void 0:r.xform(l):{data:Object.assign({},l),error:null}}function jn(e){var n;let t=null;var r;return function(e){return e.access_token&&e.refresh_token&&e.expires_in}(e)&&(t=Object.assign({},e),e.expires_at||(t.expires_at=(r=e.expires_in,Math.round(Date.now()/1e3)+r))),{data:{session:t,user:null!==(n=e.user)&&void 0!==n?n:e},error:null}}function Tn(e){const n=jn(e);return!n.error&&e.weak_password&&"object"==typeof e.weak_password&&Array.isArray(e.weak_password.reasons)&&e.weak_password.reasons.length&&e.weak_password.message&&"string"==typeof e.weak_password.message&&e.weak_password.reasons.reduce((e,n)=>e&&"string"==typeof n,!0)&&(n.data.weak_password=e.weak_password),n}function Nn(e){var n;return{data:{user:null!==(n=e.user)&&void 0!==n?n:e},error:null}}function Pn(e){return{data:e,error:null}}function On(e){const{action_link:n,email_otp:t,hashed_token:r,redirect_to:o,verification_type:i}=e,a=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["action_link","email_otp","hashed_token","redirect_to","verification_type"]);return{data:{properties:{action_link:n,email_otp:t,hashed_token:r,redirect_to:o,verification_type:i},user:Object.assign({},a)},error:null}}function zn(e){return e}const In=["global","local","others"];class Rn{constructor({url:e="",headers:n={},fetch:t}){this.url=e,this.headers=n,this.fetch=pn(t),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(e,n=In[0]){if(In.indexOf(n)<0)throw new Error(`@supabase/auth-js: Parameter scope must be one of ${In.join(", ")}`);try{return await _n(this.fetch,"POST",`${this.url}/logout?scope=${n}`,{headers:this.headers,jwt:e,noResolveJson:!0}),{data:null,error:null}}catch(e){if(Fe(e))return{data:null,error:e};throw e}}async inviteUserByEmail(e,n={}){try{return await _n(this.fetch,"POST",`${this.url}/invite`,{body:{email:e,data:n.data},headers:this.headers,redirectTo:n.redirectTo,xform:Nn})}catch(e){if(Fe(e))return{data:{user:null},error:e};throw e}}async generateLink(e){try{const{options:n}=e,t=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["options"]),r=Object.assign(Object.assign({},t),n);return"newEmail"in t&&(r.new_email=null==t?void 0:t.newEmail,delete r.newEmail),await _n(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:r,headers:this.headers,xform:On,redirectTo:null==n?void 0:n.redirectTo})}catch(e){if(Fe(e))return{data:{properties:null,user:null},error:e};throw e}}async createUser(e){try{return await _n(this.fetch,"POST",`${this.url}/admin/users`,{body:e,headers:this.headers,xform:Nn})}catch(e){if(Fe(e))return{data:{user:null},error:e};throw e}}async listUsers(e){var n,t,r,o,i,a,s;try{const l={nextPage:null,lastPage:0,total:0},c=await _n(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:null!==(t=null===(n=null==e?void 0:e.page)||void 0===n?void 0:n.toString())&&void 0!==t?t:"",per_page:null!==(o=null===(r=null==e?void 0:e.perPage)||void 0===r?void 0:r.toString())&&void 0!==o?o:""},xform:zn});if(c.error)throw c.error;const u=await c.json(),d=null!==(i=c.headers.get("x-total-count"))&&void 0!==i?i:0,f=null!==(s=null===(a=c.headers.get("link"))||void 0===a?void 0:a.split(","))&&void 0!==s?s:[];return f.length>0&&(f.forEach(e=>{const n=parseInt(e.split(";")[0].split("=")[1].substring(0,1)),t=JSON.parse(e.split(";")[1].split("=")[1]);l[`${t}Page`]=n}),l.total=parseInt(d)),{data:Object.assign(Object.assign({},u),l),error:null}}catch(e){if(Fe(e))return{data:{users:[]},error:e};throw e}}async getUserById(e){wn(e);try{return await _n(this.fetch,"GET",`${this.url}/admin/users/${e}`,{headers:this.headers,xform:Nn})}catch(e){if(Fe(e))return{data:{user:null},error:e};throw e}}async updateUserById(e,n){wn(e);try{return await _n(this.fetch,"PUT",`${this.url}/admin/users/${e}`,{body:n,headers:this.headers,xform:Nn})}catch(e){if(Fe(e))return{data:{user:null},error:e};throw e}}async deleteUser(e,n=!1){wn(e);try{return await _n(this.fetch,"DELETE",`${this.url}/admin/users/${e}`,{headers:this.headers,body:{should_soft_delete:n},xform:Nn})}catch(e){if(Fe(e))return{data:{user:null},error:e};throw e}}async _listFactors(e){wn(e.userId);try{const{data:n,error:t}=await _n(this.fetch,"GET",`${this.url}/admin/users/${e.userId}/factors`,{headers:this.headers,xform:e=>({data:{factors:e},error:null})});return{data:n,error:t}}catch(e){if(Fe(e))return{data:null,error:e};throw e}}async _deleteFactor(e){wn(e.userId),wn(e.id);try{return{data:await _n(this.fetch,"DELETE",`${this.url}/admin/users/${e.userId}/factors/${e.id}`,{headers:this.headers}),error:null}}catch(e){if(Fe(e))return{data:null,error:e};throw e}}}const Ln={getItem:e=>hn()?globalThis.localStorage.getItem(e):null,setItem:(e,n)=>{hn()&&globalThis.localStorage.setItem(e,n)},removeItem:e=>{hn()&&globalThis.localStorage.removeItem(e)}};function Dn(e={}){return{getItem:n=>e[n]||null,setItem:(n,t)=>{e[n]=t},removeItem:n=>{delete e[n]}}}const Un=!!(globalThis&&hn()&&globalThis.localStorage&&"true"===globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug"));class $n extends Error{constructor(e){super(e),this.isAcquireTimeout=!0}}class Mn extends $n{}async function Fn(e,n,t){Un&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",e,n);const r=new globalThis.AbortController;return n>0&&setTimeout(()=>{r.abort(),Un&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",e)},n),await Promise.resolve().then(()=>globalThis.navigator.locks.request(e,0===n?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:r.signal},async r=>{if(!r){if(0===n)throw Un&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",e),new Mn(`Acquiring an exclusive Navigator LockManager lock "${e}" immediately failed`);if(Un)try{const e=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(e,null,"  "))}catch(e){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",e)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await t()}Un&&console.log("@supabase/gotrue-js: navigatorLock: acquired",e,r.name);try{return await t()}finally{Un&&console.log("@supabase/gotrue-js: navigatorLock: released",e,r.name)}}))}!function(){if("object"!=typeof globalThis)try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch(e){"undefined"!=typeof self&&(self.globalThis=self)}}();const qn={url:"http://localhost:9999",storageKey:"supabase.auth.token",autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:Re,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function Wn(e,n,t){return await t()}class Yn{constructor(e){var n,t;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=Yn.nextInstanceID,Yn.nextInstanceID+=1,this.instanceID>0&&dn()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const r=Object.assign(Object.assign({},qn),e);if(this.logDebugMessages=!!r.debug,"function"==typeof r.debug&&(this.logger=r.debug),this.persistSession=r.persistSession,this.storageKey=r.storageKey,this.autoRefreshToken=r.autoRefreshToken,this.admin=new Rn({url:r.url,headers:r.headers,fetch:r.fetch}),this.url=r.url,this.headers=r.headers,this.fetch=pn(r.fetch),this.lock=r.lock||Wn,this.detectSessionInUrl=r.detectSessionInUrl,this.flowType=r.flowType,this.hasCustomAuthorizationHeader=r.hasCustomAuthorizationHeader,r.lock?this.lock=r.lock:dn()&&(null===(n=null===globalThis||void 0===globalThis?void 0:globalThis.navigator)||void 0===n?void 0:n.locks)?this.lock=Fn:this.lock=Wn,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?r.storage?this.storage=r.storage:hn()?this.storage=Ln:(this.memoryStorage={},this.storage=Dn(this.memoryStorage)):(this.memoryStorage={},this.storage=Dn(this.memoryStorage)),dn()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(e){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",e)}null===(t=this.broadcastChannel)||void 0===t||t.addEventListener("message",async e=>{this._debug("received broadcast notification from other tab or client",e),await this._notifyAllSubscribers(e.data.event,e.data.session,!1)})}this.initialize()}_debug(...e){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${ze}) ${(new Date).toISOString()}`,...e),this}async initialize(){return this.initializePromise||(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))()),await this.initializePromise}async _initialize(){var e;try{const n=function(e){const n={},t=new URL(e);if(t.hash&&"#"===t.hash[0])try{new URLSearchParams(t.hash.substring(1)).forEach((e,t)=>{n[t]=e})}catch(e){}return t.searchParams.forEach((e,t)=>{n[t]=e}),n}(window.location.href);let t="none";if(this._isImplicitGrantCallback(n)?t="implicit":await this._isPKCECallback(n)&&(t="pkce"),dn()&&this.detectSessionInUrl&&"none"!==t){const{data:r,error:o}=await this._getSessionFromURL(n,t);if(o){if(this._debug("#_initialize()","error detecting session from URL",o),function(e){return Fe(e)&&"AuthImplicitGrantRedirectError"===e.name}(o)){const n=null===(e=o.details)||void 0===e?void 0:e.code;if("identity_already_exists"===n||"identity_not_found"===n||"single_identity_not_deletable"===n)return{error:o}}return await this._removeSession(),{error:o}}const{session:i,redirectType:a}=r;return this._debug("#_initialize()","detected session in URL",i,"redirect type",a),await this._saveSession(i),setTimeout(async()=>{"recovery"===a?await this._notifyAllSubscribers("PASSWORD_RECOVERY",i):await this._notifyAllSubscribers("SIGNED_IN",i)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(e){return Fe(e)?{error:e}:{error:new We("Unexpected error during initialization",e)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(e){var n,t,r;try{const o=await _n(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:null!==(t=null===(n=null==e?void 0:e.options)||void 0===n?void 0:n.data)&&void 0!==t?t:{},gotrue_meta_security:{captcha_token:null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken}},xform:jn}),{data:i,error:a}=o;if(a||!i)return{data:{user:null,session:null},error:a};const s=i.session,l=i.user;return i.session&&(await this._saveSession(i.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async signUp(e){var n,t,r;try{let o;if("email"in e){const{email:t,password:r,options:i}=e;let a=null,s=null;"pkce"===this.flowType&&([a,s]=await En(this.storage,this.storageKey)),o=await _n(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:null==i?void 0:i.emailRedirectTo,body:{email:t,password:r,data:null!==(n=null==i?void 0:i.data)&&void 0!==n?n:{},gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken},code_challenge:a,code_challenge_method:s},xform:jn})}else{if(!("phone"in e))throw new He("You must provide either an email or phone number and a password");{const{phone:n,password:i,options:a}=e;o=await _n(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:n,password:i,data:null!==(t=null==a?void 0:a.data)&&void 0!==t?t:{},channel:null!==(r=null==a?void 0:a.channel)&&void 0!==r?r:"sms",gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}},xform:jn})}}const{data:i,error:a}=o;if(a||!i)return{data:{user:null,session:null},error:a};const s=i.session,l=i.user;return i.session&&(await this._saveSession(i.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithPassword(e){try{let n;if("email"in e){const{email:t,password:r,options:o}=e;n=await _n(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:t,password:r,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:Tn})}else{if(!("phone"in e))throw new He("You must provide either an email or phone number and a password");{const{phone:t,password:r,options:o}=e;n=await _n(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:t,password:r,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:Tn})}}const{data:t,error:r}=n;return r?{data:{user:null,session:null},error:r}:t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign({user:t.user,session:t.session},t.weak_password?{weakPassword:t.weak_password}:null),error:r}):{data:{user:null,session:null},error:new Qe}}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOAuth(e){var n,t,r,o;return await this._handleProviderSignIn(e.provider,{redirectTo:null===(n=e.options)||void 0===n?void 0:n.redirectTo,scopes:null===(t=e.options)||void 0===t?void 0:t.scopes,queryParams:null===(r=e.options)||void 0===r?void 0:r.queryParams,skipBrowserRedirect:null===(o=e.options)||void 0===o?void 0:o.skipBrowserRedirect})}async exchangeCodeForSession(e){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(e))}async signInWithWeb3(e){const{chain:n}=e;if("solana"===n)return await this.signInWithSolana(e);throw new Error(`@supabase/auth-js: Unsupported chain "${n}"`)}async signInWithSolana(e){var n,t,r,o,i,a,s,l,c,u,d,f;let h,p;if("message"in e)h=e.message,p=e.signature;else{const{chain:d,wallet:f,statement:A,options:g}=e;let m;if(dn())if("object"==typeof f)m=f;else{const e=window;if(!("solana"in e)||"object"!=typeof e.solana||!("signIn"in e.solana&&"function"==typeof e.solana.signIn||"signMessage"in e.solana&&"function"==typeof e.solana.signMessage))throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");m=e.solana}else{if("object"!=typeof f||!(null==g?void 0:g.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");m=f}const b=new URL(null!==(n=null==g?void 0:g.url)&&void 0!==n?n:window.location.href);if("signIn"in m&&m.signIn){const e=await m.signIn(Object.assign(Object.assign(Object.assign({issuedAt:(new Date).toISOString()},null==g?void 0:g.signInWithSolana),{version:"1",domain:b.host,uri:b.href}),A?{statement:A}:null));let n;if(Array.isArray(e)&&e[0]&&"object"==typeof e[0])n=e[0];else{if(!(e&&"object"==typeof e&&"signedMessage"in e&&"signature"in e))throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");n=e}if(!("signedMessage"in n&&"signature"in n&&("string"==typeof n.signedMessage||n.signedMessage instanceof Uint8Array)&&n.signature instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");h="string"==typeof n.signedMessage?n.signedMessage:(new TextDecoder).decode(n.signedMessage),p=n.signature}else{if(!("signMessage"in m&&"function"==typeof m.signMessage&&"publicKey"in m&&"object"==typeof m&&m.publicKey&&"toBase58"in m.publicKey&&"function"==typeof m.publicKey.toBase58))throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");h=[`${b.host} wants you to sign in with your Solana account:`,m.publicKey.toBase58(),...A?["",A,""]:[""],"Version: 1",`URI: ${b.href}`,`Issued At: ${null!==(r=null===(t=null==g?void 0:g.signInWithSolana)||void 0===t?void 0:t.issuedAt)&&void 0!==r?r:(new Date).toISOString()}`,...(null===(o=null==g?void 0:g.signInWithSolana)||void 0===o?void 0:o.notBefore)?[`Not Before: ${g.signInWithSolana.notBefore}`]:[],...(null===(i=null==g?void 0:g.signInWithSolana)||void 0===i?void 0:i.expirationTime)?[`Expiration Time: ${g.signInWithSolana.expirationTime}`]:[],...(null===(a=null==g?void 0:g.signInWithSolana)||void 0===a?void 0:a.chainId)?[`Chain ID: ${g.signInWithSolana.chainId}`]:[],...(null===(s=null==g?void 0:g.signInWithSolana)||void 0===s?void 0:s.nonce)?[`Nonce: ${g.signInWithSolana.nonce}`]:[],...(null===(l=null==g?void 0:g.signInWithSolana)||void 0===l?void 0:l.requestId)?[`Request ID: ${g.signInWithSolana.requestId}`]:[],...(null===(u=null===(c=null==g?void 0:g.signInWithSolana)||void 0===c?void 0:c.resources)||void 0===u?void 0:u.length)?["Resources",...g.signInWithSolana.resources.map(e=>`- ${e}`)]:[]].join("\n");const e=await m.signMessage((new TextEncoder).encode(h),"utf8");if(!(e&&e instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");p=e}}try{const{data:n,error:t}=await _n(this.fetch,"POST",`${this.url}/token?grant_type=web3`,{headers:this.headers,body:Object.assign({chain:"solana",message:h,signature:un(p)},(null===(d=e.options)||void 0===d?void 0:d.captchaToken)?{gotrue_meta_security:{captcha_token:null===(f=e.options)||void 0===f?void 0:f.captchaToken}}:null),xform:jn});if(t)throw t;return n&&n.session&&n.user?(n.session&&(await this._saveSession(n.session),await this._notifyAllSubscribers("SIGNED_IN",n.session)),{data:Object.assign({},n),error:t}):{data:{user:null,session:null},error:new Qe}}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async _exchangeCodeForSession(e){const n=await gn(this.storage,`${this.storageKey}-code-verifier`),[t,r]=(null!=n?n:"").split("/");try{const{data:n,error:o}=await _n(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:e,code_verifier:t},xform:jn});if(await mn(this.storage,`${this.storageKey}-code-verifier`),o)throw o;return n&&n.session&&n.user?(n.session&&(await this._saveSession(n.session),await this._notifyAllSubscribers("SIGNED_IN",n.session)),{data:Object.assign(Object.assign({},n),{redirectType:null!=r?r:null}),error:o}):{data:{user:null,session:null,redirectType:null},error:new Qe}}catch(e){if(Fe(e))return{data:{user:null,session:null,redirectType:null},error:e};throw e}}async signInWithIdToken(e){try{const{options:n,provider:t,token:r,access_token:o,nonce:i}=e,a=await _n(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:t,id_token:r,access_token:o,nonce:i,gotrue_meta_security:{captcha_token:null==n?void 0:n.captchaToken}},xform:jn}),{data:s,error:l}=a;return l?{data:{user:null,session:null},error:l}:s&&s.session&&s.user?(s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",s.session)),{data:s,error:l}):{data:{user:null,session:null},error:new Qe}}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOtp(e){var n,t,r,o,i;try{if("email"in e){const{email:r,options:o}=e;let i=null,a=null;"pkce"===this.flowType&&([i,a]=await En(this.storage,this.storageKey));const{error:s}=await _n(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:r,data:null!==(n=null==o?void 0:o.data)&&void 0!==n?n:{},create_user:null===(t=null==o?void 0:o.shouldCreateUser)||void 0===t||t,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken},code_challenge:i,code_challenge_method:a},redirectTo:null==o?void 0:o.emailRedirectTo});return{data:{user:null,session:null},error:s}}if("phone"in e){const{phone:n,options:t}=e,{data:a,error:s}=await _n(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:n,data:null!==(r=null==t?void 0:t.data)&&void 0!==r?r:{},create_user:null===(o=null==t?void 0:t.shouldCreateUser)||void 0===o||o,gotrue_meta_security:{captcha_token:null==t?void 0:t.captchaToken},channel:null!==(i=null==t?void 0:t.channel)&&void 0!==i?i:"sms"}});return{data:{user:null,session:null,messageId:null==a?void 0:a.message_id},error:s}}throw new He("You must provide either an email or phone number.")}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async verifyOtp(e){var n,t;try{let r,o;"options"in e&&(r=null===(n=e.options)||void 0===n?void 0:n.redirectTo,o=null===(t=e.options)||void 0===t?void 0:t.captchaToken);const{data:i,error:a}=await _n(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},e),{gotrue_meta_security:{captcha_token:o}}),redirectTo:r,xform:jn});if(a)throw a;if(!i)throw new Error("An error occurred on token verification.");const s=i.session,l=i.user;return(null==s?void 0:s.access_token)&&(await this._saveSession(s),await this._notifyAllSubscribers("recovery"==e.type?"PASSWORD_RECOVERY":"SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithSSO(e){var n,t,r;try{let o=null,i=null;return"pkce"===this.flowType&&([o,i]=await En(this.storage,this.storageKey)),await _n(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in e?{provider_id:e.providerId}:null),"domain"in e?{domain:e.domain}:null),{redirect_to:null!==(t=null===(n=e.options)||void 0===n?void 0:n.redirectTo)&&void 0!==t?t:void 0}),(null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken)?{gotrue_meta_security:{captcha_token:e.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:o,code_challenge_method:i}),headers:this.headers,xform:Pn})}catch(e){if(Fe(e))return{data:null,error:e};throw e}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async e=>{const{data:{session:n},error:t}=e;if(t)throw t;if(!n)throw new Ve;const{error:r}=await _n(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:n.access_token});return{data:{user:null,session:null},error:r}})}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async resend(e){try{const n=`${this.url}/resend`;if("email"in e){const{email:t,type:r,options:o}=e,{error:i}=await _n(this.fetch,"POST",n,{headers:this.headers,body:{email:t,type:r,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},redirectTo:null==o?void 0:o.emailRedirectTo});return{data:{user:null,session:null},error:i}}if("phone"in e){const{phone:t,type:r,options:o}=e,{data:i,error:a}=await _n(this.fetch,"POST",n,{headers:this.headers,body:{phone:t,type:r,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}}});return{data:{user:null,session:null,messageId:null==i?void 0:i.message_id},error:a}}throw new He("You must provide either an email or phone number and a type")}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async e=>e))}async _acquireLock(e,n){this._debug("#_acquireLock","begin",e);try{if(this.lockAcquired){const e=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),t=(async()=>(await e,await n()))();return this.pendingInLock.push((async()=>{try{await t}catch(e){}})()),t}return await this.lock(`lock:${this.storageKey}`,e,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const e=n();for(this.pendingInLock.push((async()=>{try{await e}catch(e){}})()),await e;this.pendingInLock.length;){const e=[...this.pendingInLock];await Promise.all(e),this.pendingInLock.splice(0,e.length)}return await e}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(e){this._debug("#_useSession","begin");try{const n=await this.__loadSession();return await e(n)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",(new Error).stack);try{let e=null;const n=await gn(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",n),null!==n&&(this._isValidSession(n)?e=n:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!e)return{data:{session:null},error:null};const t=!!e.expires_at&&1e3*e.expires_at-Date.now()<9e4;if(this._debug("#__loadSession()",`session has${t?"":" not"} expired`,"expires_at",e.expires_at),!t){if(this.storage.isServer){let n=this.suppressGetSessionWarning;e=new Proxy(e,{get:(e,t,r)=>(n||"user"!==t||(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),n=!0,this.suppressGetSessionWarning=!0),Reflect.get(e,t,r))})}return{data:{session:e},error:null}}const{session:r,error:o}=await this._callRefreshToken(e.refresh_token);return o?{data:{session:null},error:o}:{data:{session:r},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(e){return e?await this._getUser(e):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(e){try{return e?await _n(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:e,xform:Nn}):await this._useSession(async e=>{var n,t,r;const{data:o,error:i}=e;if(i)throw i;return(null===(n=o.session)||void 0===n?void 0:n.access_token)||this.hasCustomAuthorizationHeader?await _n(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:null!==(r=null===(t=o.session)||void 0===t?void 0:t.access_token)&&void 0!==r?r:void 0,xform:Nn}):{data:{user:null},error:new Ve}})}catch(e){if(Fe(e))return function(e){return Fe(e)&&"AuthSessionMissingError"===e.name}(e)&&(await this._removeSession(),await mn(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:e};throw e}}async updateUser(e,n={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(e,n))}async _updateUser(e,n={}){try{return await this._useSession(async t=>{const{data:r,error:o}=t;if(o)throw o;if(!r.session)throw new Ve;const i=r.session;let a=null,s=null;"pkce"===this.flowType&&null!=e.email&&([a,s]=await En(this.storage,this.storageKey));const{data:l,error:c}=await _n(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:null==n?void 0:n.emailRedirectTo,body:Object.assign(Object.assign({},e),{code_challenge:a,code_challenge_method:s}),jwt:i.access_token,xform:Nn});if(c)throw c;return i.user=l.user,await this._saveSession(i),await this._notifyAllSubscribers("USER_UPDATED",i),{data:{user:i.user},error:null}})}catch(e){if(Fe(e))return{data:{user:null},error:e};throw e}}async setSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(e))}async _setSession(e){try{if(!e.access_token||!e.refresh_token)throw new Ve;const n=Date.now()/1e3;let t=n,r=!0,o=null;const{payload:i}=yn(e.access_token);if(i.exp&&(t=i.exp,r=t<=n),r){const{session:n,error:t}=await this._callRefreshToken(e.refresh_token);if(t)return{data:{user:null,session:null},error:t};if(!n)return{data:{user:null,session:null},error:null};o=n}else{const{data:r,error:i}=await this._getUser(e.access_token);if(i)throw i;o={access_token:e.access_token,refresh_token:e.refresh_token,user:r.user,token_type:"bearer",expires_in:t-n,expires_at:t},await this._saveSession(o),await this._notifyAllSubscribers("SIGNED_IN",o)}return{data:{user:o.user,session:o},error:null}}catch(e){if(Fe(e))return{data:{session:null,user:null},error:e};throw e}}async refreshSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(e))}async _refreshSession(e){try{return await this._useSession(async n=>{var t;if(!e){const{data:r,error:o}=n;if(o)throw o;e=null!==(t=r.session)&&void 0!==t?t:void 0}if(!(null==e?void 0:e.refresh_token))throw new Ve;const{session:r,error:o}=await this._callRefreshToken(e.refresh_token);return o?{data:{user:null,session:null},error:o}:r?{data:{user:r.user,session:r},error:null}:{data:{user:null,session:null},error:null}})}catch(e){if(Fe(e))return{data:{user:null,session:null},error:e};throw e}}async _getSessionFromURL(e,n){try{if(!dn())throw new Ge("No browser detected.");if(e.error||e.error_description||e.error_code)throw new Ge(e.error_description||"Error in URL with unspecified error_description",{error:e.error||"unspecified_error",code:e.error_code||"unspecified_code"});switch(n){case"implicit":if("pkce"===this.flowType)throw new Ke("Not a valid PKCE flow url.");break;case"pkce":if("implicit"===this.flowType)throw new Ge("Not a valid implicit grant flow url.")}if("pkce"===n){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!e.code)throw new Ke("No code detected.");const{data:n,error:t}=await this._exchangeCodeForSession(e.code);if(t)throw t;const r=new URL(window.location.href);return r.searchParams.delete("code"),window.history.replaceState(window.history.state,"",r.toString()),{data:{session:n.session,redirectType:null},error:null}}const{provider_token:t,provider_refresh_token:r,access_token:o,refresh_token:i,expires_in:a,expires_at:s,token_type:l}=e;if(!(o&&a&&i&&l))throw new Ge("No session defined in URL");const c=Math.round(Date.now()/1e3),u=parseInt(a);let d=c+u;s&&(d=parseInt(s));const f=d-c;1e3*f<=Ie&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${f}s, should have been closer to ${u}s`);const h=d-u;c-h>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",h,d,c):c-h<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",h,d,c);const{data:p,error:A}=await this._getUser(o);if(A)throw A;const g={provider_token:t,provider_refresh_token:r,access_token:o,expires_in:u,expires_at:d,refresh_token:i,token_type:l,user:p.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:g,redirectType:e.type},error:null}}catch(e){if(Fe(e))return{data:{session:null,redirectType:null},error:e};throw e}}_isImplicitGrantCallback(e){return Boolean(e.access_token||e.error_description)}async _isPKCECallback(e){const n=await gn(this.storage,`${this.storageKey}-code-verifier`);return!(!e.code||!n)}async signOut(e={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(e))}async _signOut({scope:e}={scope:"global"}){return await this._useSession(async n=>{var t;const{data:r,error:o}=n;if(o)return{error:o};const i=null===(t=r.session)||void 0===t?void 0:t.access_token;if(i){const{error:n}=await this.admin.signOut(i,e);if(n&&(!function(e){return Fe(e)&&"AuthApiError"===e.name}(n)||404!==n.status&&401!==n.status&&403!==n.status))return{error:n}}return"others"!==e&&(await this._removeSession(),await mn(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(e){const n="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const n=16*Math.random()|0;return("x"==e?n:3&n|8).toString(16)}),t={id:n,callback:e,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",n),this.stateChangeEmitters.delete(n)}};return this._debug("#onAuthStateChange()","registered callback with id",n),this.stateChangeEmitters.set(n,t),(async()=>{await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(n)})})(),{data:{subscription:t}}}async _emitInitialSession(e){return await this._useSession(async n=>{var t,r;try{const{data:{session:r},error:o}=n;if(o)throw o;await(null===(t=this.stateChangeEmitters.get(e))||void 0===t?void 0:t.callback("INITIAL_SESSION",r)),this._debug("INITIAL_SESSION","callback id",e,"session",r)}catch(n){await(null===(r=this.stateChangeEmitters.get(e))||void 0===r?void 0:r.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",e,"error",n),console.error(n)}})}async resetPasswordForEmail(e,n={}){let t=null,r=null;"pkce"===this.flowType&&([t,r]=await En(this.storage,this.storageKey,!0));try{return await _n(this.fetch,"POST",`${this.url}/recover`,{body:{email:e,code_challenge:t,code_challenge_method:r,gotrue_meta_security:{captcha_token:n.captchaToken}},headers:this.headers,redirectTo:n.redirectTo})}catch(e){if(Fe(e))return{data:null,error:e};throw e}}async getUserIdentities(){var e;try{const{data:n,error:t}=await this.getUser();if(t)throw t;return{data:{identities:null!==(e=n.user.identities)&&void 0!==e?e:[]},error:null}}catch(e){if(Fe(e))return{data:null,error:e};throw e}}async linkIdentity(e){var n;try{const{data:t,error:r}=await this._useSession(async n=>{var t,r,o,i,a;const{data:s,error:l}=n;if(l)throw l;const c=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,e.provider,{redirectTo:null===(t=e.options)||void 0===t?void 0:t.redirectTo,scopes:null===(r=e.options)||void 0===r?void 0:r.scopes,queryParams:null===(o=e.options)||void 0===o?void 0:o.queryParams,skipBrowserRedirect:!0});return await _n(this.fetch,"GET",c,{headers:this.headers,jwt:null!==(a=null===(i=s.session)||void 0===i?void 0:i.access_token)&&void 0!==a?a:void 0})});if(r)throw r;return dn()&&!(null===(n=e.options)||void 0===n?void 0:n.skipBrowserRedirect)&&window.location.assign(null==t?void 0:t.url),{data:{provider:e.provider,url:null==t?void 0:t.url},error:null}}catch(n){if(Fe(n))return{data:{provider:e.provider,url:null},error:n};throw n}}async unlinkIdentity(e){try{return await this._useSession(async n=>{var t,r;const{data:o,error:i}=n;if(i)throw i;return await _n(this.fetch,"DELETE",`${this.url}/user/identities/${e.identity_id}`,{headers:this.headers,jwt:null!==(r=null===(t=o.session)||void 0===t?void 0:t.access_token)&&void 0!==r?r:void 0})})}catch(e){if(Fe(e))return{data:null,error:e};throw e}}async _refreshAccessToken(e){const n=`#_refreshAccessToken(${e.substring(0,5)}...)`;this._debug(n,"begin");try{const o=Date.now();return await(t=async t=>(t>0&&await async function(e){return await new Promise(n=>{setTimeout(()=>n(null),e)})}(200*Math.pow(2,t-1)),this._debug(n,"refreshing attempt",t),await _n(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:e},headers:this.headers,xform:jn})),r=(e,n)=>{const t=200*Math.pow(2,e);return n&&Je(n)&&Date.now()+t-o<Ie},new Promise((e,n)=>{(async()=>{for(let o=0;o<1/0;o++)try{const n=await t(o);if(!r(o,null))return void e(n)}catch(e){if(!r(o,e))return void n(e)}})()}))}catch(e){if(this._debug(n,"error",e),Fe(e))return{data:{session:null,user:null},error:e};throw e}finally{this._debug(n,"end")}var t,r}_isValidSession(e){return"object"==typeof e&&null!==e&&"access_token"in e&&"refresh_token"in e&&"expires_at"in e}async _handleProviderSignIn(e,n){const t=await this._getUrlForProvider(`${this.url}/authorize`,e,{redirectTo:n.redirectTo,scopes:n.scopes,queryParams:n.queryParams});return this._debug("#_handleProviderSignIn()","provider",e,"options",n,"url",t),dn()&&!n.skipBrowserRedirect&&window.location.assign(t),{data:{provider:e,url:t},error:null}}async _recoverAndRefresh(){var e;const n="#_recoverAndRefresh()";this._debug(n,"begin");try{const t=await gn(this.storage,this.storageKey);if(this._debug(n,"session from storage",t),!this._isValidSession(t))return this._debug(n,"session is not valid"),void(null!==t&&await this._removeSession());const r=1e3*(null!==(e=t.expires_at)&&void 0!==e?e:1/0)-Date.now()<9e4;if(this._debug(n,`session has${r?"":" not"} expired with margin of 90000s`),r){if(this.autoRefreshToken&&t.refresh_token){const{error:e}=await this._callRefreshToken(t.refresh_token);e&&(console.error(e),Je(e)||(this._debug(n,"refresh failed with a non-retryable error, removing the session",e),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",t)}catch(e){return this._debug(n,"error",e),void console.error(e)}finally{this._debug(n,"end")}}async _callRefreshToken(e){var n,t;if(!e)throw new Ve;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const r=`#_callRefreshToken(${e.substring(0,5)}...)`;this._debug(r,"begin");try{this.refreshingDeferred=new bn;const{data:n,error:t}=await this._refreshAccessToken(e);if(t)throw t;if(!n.session)throw new Ve;await this._saveSession(n.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",n.session);const r={session:n.session,error:null};return this.refreshingDeferred.resolve(r),r}catch(e){if(this._debug(r,"error",e),Fe(e)){const t={session:null,error:e};return Je(e)||await this._removeSession(),null===(n=this.refreshingDeferred)||void 0===n||n.resolve(t),t}throw null===(t=this.refreshingDeferred)||void 0===t||t.reject(e),e}finally{this.refreshingDeferred=null,this._debug(r,"end")}}async _notifyAllSubscribers(e,n,t=!0){const r=`#_notifyAllSubscribers(${e})`;this._debug(r,"begin",n,`broadcast = ${t}`);try{this.broadcastChannel&&t&&this.broadcastChannel.postMessage({event:e,session:n});const r=[],o=Array.from(this.stateChangeEmitters.values()).map(async t=>{try{await t.callback(e,n)}catch(e){r.push(e)}});if(await Promise.all(o),r.length>0){for(let e=0;e<r.length;e+=1)console.error(r[e]);throw r[0]}}finally{this._debug(r,"end")}}async _saveSession(e){this._debug("#_saveSession()",e),this.suppressGetSessionWarning=!0,await An(this.storage,this.storageKey,e)}async _removeSession(){this._debug("#_removeSession()"),await mn(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const e=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{e&&dn()&&(null===window||void 0===window?void 0:window.removeEventListener)&&window.removeEventListener("visibilitychange",e)}catch(e){console.error("removing visibilitychange callback failed",e)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const e=setInterval(()=>this._autoRefreshTokenTick(),Ie);this.autoRefreshTicker=e,e&&"object"==typeof e&&"function"==typeof e.unref?e.unref():"undefined"!=typeof Deno&&"function"==typeof Deno.unrefTimer&&Deno.unrefTimer(e),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const e=this.autoRefreshTicker;this.autoRefreshTicker=null,e&&clearInterval(e)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const e=Date.now();try{return await this._useSession(async n=>{const{data:{session:t}}=n;if(!t||!t.refresh_token||!t.expires_at)return void this._debug("#_autoRefreshTokenTick()","no session");const r=Math.floor((1e3*t.expires_at-e)/Ie);this._debug("#_autoRefreshTokenTick()",`access token expires in ${r} ticks, a tick lasts 30000ms, refresh threshold is 3 ticks`),r<=3&&await this._callRefreshToken(t.refresh_token)})}catch(e){console.error("Auto refresh tick failed with error. This is likely a transient error.",e)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(e){if(!(e.isAcquireTimeout||e instanceof $n))throw e;this._debug("auto refresh token tick lock not available")}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!dn()||!(null===window||void 0===window?void 0:window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),null===window||void 0===window||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(e){console.error("_handleVisibilityChange",e)}}async _onVisibilityChanged(e){const n=`#_onVisibilityChanged(${e})`;this._debug(n,"visibilityState",document.visibilityState),"visible"===document.visibilityState?(this.autoRefreshToken&&this._startAutoRefresh(),e||(await this.initializePromise,await this._acquireLock(-1,async()=>{"visible"===document.visibilityState?await this._recoverAndRefresh():this._debug(n,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting")}))):"hidden"===document.visibilityState&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(e,n,t){const r=[`provider=${encodeURIComponent(n)}`];if((null==t?void 0:t.redirectTo)&&r.push(`redirect_to=${encodeURIComponent(t.redirectTo)}`),(null==t?void 0:t.scopes)&&r.push(`scopes=${encodeURIComponent(t.scopes)}`),"pkce"===this.flowType){const[e,n]=await En(this.storage,this.storageKey),t=new URLSearchParams({code_challenge:`${encodeURIComponent(e)}`,code_challenge_method:`${encodeURIComponent(n)}`});r.push(t.toString())}if(null==t?void 0:t.queryParams){const e=new URLSearchParams(t.queryParams);r.push(e.toString())}return(null==t?void 0:t.skipBrowserRedirect)&&r.push(`skip_http_redirect=${t.skipBrowserRedirect}`),`${e}?${r.join("&")}`}async _unenroll(e){try{return await this._useSession(async n=>{var t;const{data:r,error:o}=n;return o?{data:null,error:o}:await _n(this.fetch,"DELETE",`${this.url}/factors/${e.factorId}`,{headers:this.headers,jwt:null===(t=null==r?void 0:r.session)||void 0===t?void 0:t.access_token})})}catch(e){if(Fe(e))return{data:null,error:e};throw e}}async _enroll(e){try{return await this._useSession(async n=>{var t,r;const{data:o,error:i}=n;if(i)return{data:null,error:i};const a=Object.assign({friendly_name:e.friendlyName,factor_type:e.factorType},"phone"===e.factorType?{phone:e.phone}:{issuer:e.issuer}),{data:s,error:l}=await _n(this.fetch,"POST",`${this.url}/factors`,{body:a,headers:this.headers,jwt:null===(t=null==o?void 0:o.session)||void 0===t?void 0:t.access_token});return l?{data:null,error:l}:("totp"===e.factorType&&(null===(r=null==s?void 0:s.totp)||void 0===r?void 0:r.qr_code)&&(s.totp.qr_code=`data:image/svg+xml;utf-8,${s.totp.qr_code}`),{data:s,error:null})})}catch(e){if(Fe(e))return{data:null,error:e};throw e}}async _verify(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async n=>{var t;const{data:r,error:o}=n;if(o)return{data:null,error:o};const{data:i,error:a}=await _n(this.fetch,"POST",`${this.url}/factors/${e.factorId}/verify`,{body:{code:e.code,challenge_id:e.challengeId},headers:this.headers,jwt:null===(t=null==r?void 0:r.session)||void 0===t?void 0:t.access_token});return a?{data:null,error:a}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+i.expires_in},i)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",i),{data:i,error:a})})}catch(e){if(Fe(e))return{data:null,error:e};throw e}})}async _challenge(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async n=>{var t;const{data:r,error:o}=n;return o?{data:null,error:o}:await _n(this.fetch,"POST",`${this.url}/factors/${e.factorId}/challenge`,{body:{channel:e.channel},headers:this.headers,jwt:null===(t=null==r?void 0:r.session)||void 0===t?void 0:t.access_token})})}catch(e){if(Fe(e))return{data:null,error:e};throw e}})}async _challengeAndVerify(e){const{data:n,error:t}=await this._challenge({factorId:e.factorId});return t?{data:null,error:t}:await this._verify({factorId:e.factorId,challengeId:n.id,code:e.code})}async _listFactors(){const{data:{user:e},error:n}=await this.getUser();if(n)return{data:null,error:n};const t=(null==e?void 0:e.factors)||[],r=t.filter(e=>"totp"===e.factor_type&&"verified"===e.status),o=t.filter(e=>"phone"===e.factor_type&&"verified"===e.status);return{data:{all:t,totp:r,phone:o},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async e=>{var n,t;const{data:{session:r},error:o}=e;if(o)return{data:null,error:o};if(!r)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:i}=yn(r.access_token);let a=null;i.aal&&(a=i.aal);let s=a;return(null!==(t=null===(n=r.user.factors)||void 0===n?void 0:n.filter(e=>"verified"===e.status))&&void 0!==t?t:[]).length>0&&(s="aal2"),{data:{currentLevel:a,nextLevel:s,currentAuthenticationMethods:i.amr||[]},error:null}}))}async fetchJwk(e,n={keys:[]}){let t=n.keys.find(n=>n.kid===e);if(t)return t;if(t=this.jwks.keys.find(n=>n.kid===e),t&&this.jwks_cached_at+6e5>Date.now())return t;const{data:r,error:o}=await _n(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(o)throw o;if(!r.keys||0===r.keys.length)throw new en("JWKS is empty");if(this.jwks=r,this.jwks_cached_at=Date.now(),t=r.keys.find(n=>n.kid===e),!t)throw new en("No matching signing key found in JWKS");return t}async getClaims(e,n={keys:[]}){try{let t=e;if(!t){const{data:e,error:n}=await this.getSession();if(n||!e.session)return{data:null,error:n};t=e.session.access_token}const{header:r,payload:o,signature:i,raw:{header:a,payload:s}}=yn(t);if(function(e){if(!e)throw new Error("Missing exp claim");if(e<=Math.floor(Date.now()/1e3))throw new Error("JWT has expired")}(o.exp),!r.kid||"HS256"===r.alg||!("crypto"in globalThis)||!("subtle"in globalThis.crypto)){const{error:e}=await this.getUser(t);if(e)throw e;return{data:{claims:o,header:r,signature:i},error:null}}const l=function(e){switch(e){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}(r.alg),c=await this.fetchJwk(r.kid,n),u=await crypto.subtle.importKey("jwk",c,l,!0,["verify"]);if(!await crypto.subtle.verify(l,u,i,function(e){const n=[];return function(e,n){for(let t=0;t<e.length;t+=1){let r=e.charCodeAt(t);if(r>55295&&r<=56319){const n=1024*(r-55296)&65535;r=65536+(e.charCodeAt(t+1)-56320&65535|n),t+=1}ln(r,n)}}(e,e=>n.push(e)),new Uint8Array(n)}(`${a}.${s}`)))throw new en("Invalid JWT signature");return{data:{claims:o,header:r,signature:i},error:null}}catch(e){if(Fe(e))return{data:null,error:e};throw e}}}Yn.nextInstanceID=0;const Vn=Yn;class Qn extends Vn{constructor(e){super(e)}}class Hn{constructor(e,n,t){var r,o,i;if(this.supabaseUrl=e,this.supabaseKey=n,!e)throw new Error("supabaseUrl is required.");if(!n)throw new Error("supabaseKey is required.");const a=(s=e).endsWith("/")?s:s+"/";var s;const l=new URL(a);this.realtimeUrl=new URL("realtime/v1",l),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",l),this.storageUrl=new URL("storage/v1",l),this.functionsUrl=new URL("functions/v1",l);const c=`sb-${l.hostname.split(".")[0]}-auth-token`,u=function(e,n){var t,r;const{db:o,auth:i,realtime:a,global:s}=e,{db:l,auth:c,realtime:u,global:d}=n,f={db:Object.assign(Object.assign({},l),o),auth:Object.assign(Object.assign({},c),i),realtime:Object.assign(Object.assign({},u),a),global:Object.assign(Object.assign(Object.assign({},d),s),{headers:Object.assign(Object.assign({},null!==(t=null==d?void 0:d.headers)&&void 0!==t?t:{}),null!==(r=null==s?void 0:s.headers)&&void 0!==r?r:{})}),accessToken:()=>{return e=this,n=void 0,r=function*(){return""},new((t=void 0)||(t=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t(function(e){e(n)})).then(a,s)}l((r=r.apply(e,n||[])).next())});var e,n,t,r}};return e.accessToken?f.accessToken=e.accessToken:delete f.accessToken,f}(null!=t?t:{},{db:_e,realtime:Te,auth:Object.assign(Object.assign({},je),{storageKey:c}),global:Se});this.storageKey=null!==(r=u.auth.storageKey)&&void 0!==r?r:"",this.headers=null!==(o=u.global.headers)&&void 0!==o?o:{},u.accessToken?(this.accessToken=u.accessToken,this.auth=new Proxy({},{get:(e,n)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(n)} is not possible`)}})):this.auth=this._initSupabaseAuthClient(null!==(i=u.auth)&&void 0!==i?i:{},this.headers,u.global.fetch),this.fetch=Oe(n,this._getAccessToken.bind(this),u.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},u.realtime)),this.rest=new w(new URL("rest/v1",l).href,{headers:this.headers,schema:u.db.schema,fetch:this.fetch}),u.accessToken||this._listenForAuthEvents()}get functions(){return new x(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}get storage(){return new ke(this.storageUrl.href,this.headers,this.fetch)}from(e){return this.rest.from(e)}schema(e){return this.rest.schema(e)}rpc(e,n={},t={}){return this.rest.rpc(e,n,t)}channel(e,n={config:{}}){return this.realtime.channel(e,n)}getChannels(){return this.realtime.getChannels()}removeChannel(e){return this.realtime.removeChannel(e)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var e,n,t,r,o,i;return t=this,r=void 0,i=function*(){if(this.accessToken)return yield this.accessToken();const{data:t}=yield this.auth.getSession();return null!==(n=null===(e=t.session)||void 0===e?void 0:e.access_token)&&void 0!==n?n:null},new((o=void 0)||(o=Promise))(function(e,n){function a(e){try{l(i.next(e))}catch(e){n(e)}}function s(e){try{l(i.throw(e))}catch(e){n(e)}}function l(n){var t;n.done?e(n.value):(t=n.value,t instanceof o?t:new o(function(e){e(t)})).then(a,s)}l((i=i.apply(t,r||[])).next())})}_initSupabaseAuthClient({autoRefreshToken:e,persistSession:n,detectSessionInUrl:t,storage:r,storageKey:o,flowType:i,lock:a,debug:s},l,c){const u={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new Qn({url:this.authUrl.href,headers:Object.assign(Object.assign({},u),l),storageKey:o,autoRefreshToken:e,persistSession:n,detectSessionInUrl:t,storage:r,flowType:i,lock:a,debug:s,fetch:c,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(e){return new oe(this.realtimeUrl.href,Object.assign(Object.assign({},e),{params:Object.assign({apikey:this.supabaseKey},null==e?void 0:e.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((e,n)=>{this._handleTokenChanged(e,"CLIENT",null==n?void 0:n.access_token)})}_handleTokenChanged(e,n,t){"TOKEN_REFRESHED"!==e&&"SIGNED_IN"!==e||this.changedAccessToken===t?"SIGNED_OUT"===e&&(this.realtime.setAuth(),"STORAGE"==n&&this.auth.signOut(),this.changedAccessToken=void 0):this.changedAccessToken=t}}function Gn(e){return Gn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gn(e)}function Kn(e,n,t){return(n=function(e){var n=function(e){if("object"!=Gn(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=Gn(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Gn(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Zn(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Jn(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,f={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(n,t){return i=n,s=0,l=e,f.n=t,a}};function h(t,r){for(s=t,l=r,n=0;!d&&c&&!o&&n<u.length;n++){var o,i=u[n],h=f.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((o=t<2&&h<i[1])?(s=0,f.v=r,f.n=i[1]):h<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,f.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&h(u,p),s=u,l=p;(n=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(f.n=-1),h(s,l)):f.n=l:f.v=l);try{if(c=2,i){if(s||(o="next"),n=i[o]){if(!(n=n.call(i,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=i.return)&&n.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=e}else if((n=(d=f.n<0)?l:t.call(r,f))!==a)break}catch(n){i=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(Jn(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function f(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Jn(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,Jn(d,"constructor",c),Jn(c,"constructor",l),l.displayName="GeneratorFunction",Jn(c,o,"GeneratorFunction"),Jn(d),Jn(d,o,"Generator"),Jn(d,r,function(){return this}),Jn(d,"toString",function(){return"[object Generator]"}),(Zn=function(){return{w:i,m:f}})()}function Jn(e,n,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Jn=function(e,n,t,r){if(n)o?o(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var i=function(n,t){Jn(e,n,function(e){return this._invoke(n,t,e)})};i("next",0),i("throw",1),i("return",2)}},Jn(e,n,t,r)}function Xn(e,n,t,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,o)}function et(e){return function(){var n=this,t=arguments;return new Promise(function(r,o){var i=e.apply(n,t);function a(e){Xn(i,r,o,a,s,"next",e)}function s(e){Xn(i,r,o,a,s,"throw",e)}a(void 0)})}}var nt=((e,n,t)=>new Hn("https://tpjnyiyvpyzzbzhajbjh.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRwam55aXl2cHl6emJ6aGFqYmpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NDA1NTQsImV4cCI6MjA2NzIxNjU1NH0.cflFdHytlTUA_H_AP7E3Kry9-S-xw45pIRoJQtfk4AE",t))(0,0,{auth:{storage:{getItem:function(e){return et(Zn().m(function n(){var t;return Zn().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,chrome.storage.local.get(e);case 1:return t=n.v,n.a(2,t[e]||null)}},n)}))()},setItem:function(e,n){return et(Zn().m(function t(){return Zn().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.set(Kn({},e,n));case 1:return t.a(2)}},t)}))()},removeItem:function(e){return et(Zn().m(function n(){return Zn().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,chrome.storage.local.remove(e);case 1:return n.a(2)}},n)}))()}},autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0}});function tt(e){return tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},tt(e)}function rt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function ot(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?rt(Object(t),!0).forEach(function(n){it(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):rt(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function it(e,n,t){return(n=ht(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function at(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return st(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,f={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(n,t){return i=n,s=0,l=e,f.n=t,a}};function h(t,r){for(s=t,l=r,n=0;!d&&c&&!o&&n<u.length;n++){var o,i=u[n],h=f.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((o=t<2&&h<i[1])?(s=0,f.v=r,f.n=i[1]):h<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,f.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&h(u,p),s=u,l=p;(n=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(f.n=-1),h(s,l)):f.n=l:f.v=l);try{if(c=2,i){if(s||(o="next"),n=i[o]){if(!(n=n.call(i,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=i.return)&&n.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=e}else if((n=(d=f.n<0)?l:t.call(r,f))!==a)break}catch(n){i=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(st(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function f(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,st(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,st(d,"constructor",c),st(c,"constructor",l),l.displayName="GeneratorFunction",st(c,o,"GeneratorFunction"),st(d),st(d,o,"Generator"),st(d,r,function(){return this}),st(d,"toString",function(){return"[object Generator]"}),(at=function(){return{w:i,m:f}})()}function st(e,n,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}st=function(e,n,t,r){if(n)o?o(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var i=function(n,t){st(e,n,function(e){return this._invoke(n,t,e)})};i("next",0),i("throw",1),i("return",2)}},st(e,n,t,r)}function lt(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ct(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ct(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ct(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function ut(e,n,t,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,o)}function dt(e){return function(){var n=this,t=arguments;return new Promise(function(r,o){var i=e.apply(n,t);function a(e){ut(i,r,o,a,s,"next",e)}function s(e){ut(i,r,o,a,s,"throw",e)}a(void 0)})}}function ft(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,ht(r.key),r)}}function ht(e){var n=function(e){if("object"!=tt(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=tt(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==tt(n)?n:n+""}var pt=new(function(){return e=function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)},n=[{key:"getData",value:(v=dt(at().m(function e(){var n,t,r,o,i,a,s,l,c,u;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(n=e.v,t=n.data,!n.error&&t.session){e.n=2;break}return e.a(2,this.getDefaultData());case 2:return r=t.session.user,console.log("Fetching data for user:",r.id),e.n=3,Promise.all([nt.from("links").select("*").eq("user_id",r.id),nt.from("collections").select("*").eq("user_id",r.id)]);case 3:return o=e.v,i=lt(o,2),a=i[0],s=i[1],a.error&&console.error("Error fetching links:",a.error),s.error&&console.error("Error fetching collections:",s.error),l=(a.data||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}),c=(s.data||[]).map(function(e){return{id:e.id,name:e.name,description:e.description,color:e.color,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}}),u={links:l,collections:c,categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0}},console.log("Data fetched from Supabase:",u),e.a(2,u)}},e,this)})),function(){return v.apply(this,arguments)})},{key:"addLink",value:(y=dt(at().m(function e(n){var t,r,o,i,a,s,l;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(r=e.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,{success:!1,error:"User not logged in."});case 2:return a={user_id:i.id,collection_id:n.collectionId||null,url:n.url,title:n.title,favicon:n.favicon,domain:n.domain,user_note:n.userNote,ai_summary:n.aiSummary,category:n.category},e.n=3,nt.from("links").insert(a);case 3:if(s=e.v,!(l=s.error)){e.n=4;break}return console.error("Supabase addLink error:",l),e.a(2,{success:!1,error:l.message||"Database error occurred."});case 4:return e.a(2,{success:!0})}},e)})),function(e){return y.apply(this,arguments)})},{key:"updateLink",value:(b=dt(at().m(function e(n,t){var r,o;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.from("links").update(ot(ot({},t),{},{updatedAt:new Date})).eq("id",n);case 1:if(r=e.v,!(o=r.error)){e.n=2;break}throw o;case 2:return e.a(2)}},e)})),function(e,n){return b.apply(this,arguments)})},{key:"deleteLink",value:(m=dt(at().m(function e(n){var t,r;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.from("links").delete().eq("id",n);case 1:if(t=e.v,!(r=t.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return m.apply(this,arguments)})},{key:"addCollection",value:(g=dt(at().m(function e(n){var t,r,o,i,a,s,l;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(r=e.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){e.n=2;break}throw new Error("User not logged in.");case 2:return a={user_id:i.id,name:n.name,description:n.description,color:n.color},e.n=3,nt.from("collections").insert(a);case 3:if(s=e.v,!(l=s.error)){e.n=4;break}throw l;case 4:return e.a(2)}},e)})),function(e){return g.apply(this,arguments)})},{key:"updateCollection",value:(A=dt(at().m(function e(n,t){var r,o;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.from("collections").update(ot(ot({},t),{},{updatedAt:new Date})).eq("id",n);case 1:if(r=e.v,!(o=r.error)){e.n=2;break}throw o;case 2:return e.a(2)}},e)})),function(e,n){return A.apply(this,arguments)})},{key:"deleteCollection",value:(p=dt(at().m(function e(n){var t,r;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.from("collections").delete().eq("id",n);case 1:if(t=e.v,!(r=t.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return p.apply(this,arguments)})},{key:"searchLinks",value:(h=dt(at().m(function e(n){var t,r,o,i,a,s,l,c;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(r=e.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:if(n.trim()){e.n=3;break}return e.a(2,[]);case 3:return e.p=3,e.n=4,nt.rpc("search_user_links",{search_query:n.trim(),user_uuid:i.id,result_limit:50});case 4:if(a=e.v,s=a.data,!(l=a.error)){e.n=5;break}return console.error("Search error:",l),e.a(2,[]);case 5:return e.a(2,(s||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain,searchRank:e.rank,searchHeadline:e.headline}}));case 6:return e.p=6,c=e.v,console.error("Search failed:",c),e.a(2,[])}},e,null,[[3,6]])})),function(e){return h.apply(this,arguments)})},{key:"getUserTags",value:(f=dt(at().m(function e(){var n,t,r,o,i,a,s,l;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(t=e.v,r=t.data,o=null===(n=r.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,nt.rpc("get_user_tags_with_counts",{user_uuid:o.id});case 3:if(i=e.v,a=i.data,!(s=i.error)){e.n=4;break}return console.error("Error fetching user tags:",s),e.a(2,[]);case 4:return e.a(2,(a||[]).map(function(e){return{id:e.id,name:e.name,usageCount:e.usage_count||0}}));case 5:return e.p=5,l=e.v,console.error("Failed to get user tags:",l),e.a(2,[])}},e,null,[[2,5]])})),function(){return f.apply(this,arguments)})},{key:"getLinkTags",value:(d=dt(at().m(function e(n){var t,r,o,i;return at().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,nt.rpc("get_link_tags",{link_uuid:n});case 1:if(t=e.v,r=t.data,!(o=t.error)){e.n=2;break}return console.error("Error fetching link tags:",o),e.a(2,[]);case 2:return e.a(2,r||[]);case 3:return e.p=3,i=e.v,console.error("Failed to get link tags:",i),e.a(2,[])}},e,null,[[0,3]])})),function(e){return d.apply(this,arguments)})},{key:"addTagsToLink",value:(u=dt(at().m(function e(n,t){var r,o,i,a,s,l,c;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(o=e.v,i=o.data,a=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,error:"User not logged in."});case 2:return e.p=2,e.n=3,nt.rpc("add_tags_to_link",{link_uuid:n,tag_names:t,user_uuid:a.id});case 3:if(s=e.v,!(l=s.error)){e.n=4;break}return console.error("Error adding tags to link:",l),e.a(2,{success:!1,error:l.message||"Failed to add tags."});case 4:return e.a(2,{success:!0});case 5:return e.p=5,c=e.v,console.error("Failed to add tags to link:",c),e.a(2,{success:!1,error:c.message})}},e,null,[[2,5]])})),function(e,n){return u.apply(this,arguments)})},{key:"getLinksByTag",value:(c=dt(at().m(function e(n){var t,r,o,i,a,s,l,c;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(r=e.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,nt.rpc("get_links_by_tag",{user_uuid:i.id,tag_name:n});case 3:if(a=e.v,s=a.data,!(l=a.error)){e.n=4;break}return console.error("Error fetching links by tag:",l),e.a(2,[]);case 4:return e.a(2,(s||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}));case 5:return e.p=5,c=e.v,console.error("Failed to get links by tag:",c),e.a(2,[])}},e,null,[[2,5]])})),function(e){return c.apply(this,arguments)})},{key:"cleanupUnusedTags",value:(l=dt(at().m(function e(){var n,t,r,o,i,a,s,l;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(t=e.v,r=t.data,o=null===(n=r.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,0);case 2:return e.p=2,e.n=3,nt.rpc("cleanup_unused_tags",{user_uuid:o.id});case 3:if(i=e.v,a=i.data,!(s=i.error)){e.n=4;break}return console.error("Error cleaning up unused tags:",s),e.a(2,0);case 4:return e.a(2,a||0);case 5:return e.p=5,l=e.v,console.error("Failed to cleanup unused tags:",l),e.a(2,0)}},e,null,[[2,5]])})),function(){return l.apply(this,arguments)})},{key:"toggleCollectionSharing",value:(s=dt(at().m(function e(n,t){var r,o,i,a,s,l,c,u,d;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(o=e.v,i=o.data,a=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,message:"User not logged in."});case 2:return e.p=2,e.n=3,nt.rpc("toggle_collection_sharing",{collection_uuid:n,user_uuid:a.id,make_public:t});case 3:if(s=e.v,l=s.data,!(c=s.error)){e.n=4;break}return console.error("Error toggling collection sharing:",c),e.a(2,{success:!1,message:c.message||"Failed to update sharing settings."});case 4:return u=null==l?void 0:l[0],e.a(2,{success:(null==u?void 0:u.success)||!1,shareToken:null==u?void 0:u.share_token,message:(null==u?void 0:u.message)||"Sharing settings updated."});case 5:return e.p=5,d=e.v,console.error("Failed to toggle collection sharing:",d),e.a(2,{success:!1,message:d.message})}},e,null,[[2,5]])})),function(e,n){return s.apply(this,arguments)})},{key:"getCollectionSharingInfo",value:(a=dt(at().m(function e(n){var t,r,o,i,a,s,l,c;return at().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.getSession();case 1:if(r=e.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,null);case 2:return e.p=2,e.n=3,nt.from("collections").select("is_public, share_token, view_count").eq("id",n).eq("user_id",i.id).single();case 3:if(a=e.v,s=a.data,!(l=a.error)){e.n=4;break}return console.error("Error fetching collection sharing info:",l),e.a(2,null);case 4:return e.a(2,{isPublic:s.is_public||!1,shareToken:s.share_token,viewCount:s.view_count||0});case 5:return e.p=5,c=e.v,console.error("Failed to get collection sharing info:",c),e.a(2,null)}},e,null,[[2,5]])})),function(e){return a.apply(this,arguments)})},{key:"getDefaultCategories",value:function(){return[{id:"general",name:"General",color:"#6b7280",isDefault:!0},{id:"work",name:"Work",color:"#3b82f6"},{id:"personal",name:"Personal",color:"#10b981"},{id:"learning",name:"Learning",color:"#f59e0b"}]}},{key:"getDefaultData",value:function(){return{links:[],collections:[],categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0}}}}],t=[{key:"getPublicCollection",value:(i=dt(at().m(function e(n){var t,r,o,i,a;return at().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,nt.rpc("get_public_collection",{token:n});case 1:if(t=e.v,r=t.data,!(o=t.error)){e.n=2;break}return console.error("Error fetching public collection:",o),e.a(2,null);case 2:if(i=null==r?void 0:r[0]){e.n=3;break}return e.a(2,null);case 3:return e.a(2,{id:i.id,name:i.name,description:i.description,viewCount:i.view_count||0,createdAt:new Date(i.created_at),ownerEmail:i.owner_email});case 4:return e.p=4,a=e.v,console.error("Failed to get public collection:",a),e.a(2,null)}},e,null,[[0,4]])})),function(e){return i.apply(this,arguments)})},{key:"getPublicCollectionLinks",value:(o=dt(at().m(function e(n){var t,r,o,i;return at().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,nt.rpc("get_public_collection_links",{token:n});case 1:if(t=e.v,r=t.data,!(o=t.error)){e.n=2;break}return console.error("Error fetching public collection links:",o),e.a(2,[]);case 2:return e.a(2,(r||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,domain:e.domain,userNote:e.user_note,aiSummary:e.ai_summary,category:e.category,createdAt:new Date(e.created_at),tags:e.tag_names||[]}}));case 3:return e.p=3,i=e.v,console.error("Failed to get public collection links:",i),e.a(2,[])}},e,null,[[0,3]])})),function(e){return o.apply(this,arguments)})},{key:"incrementViewCount",value:(r=dt(at().m(function e(n){var t,r,o;return at().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,nt.rpc("increment_collection_views",{token:n});case 1:t=e.v,(r=t.error)&&console.error("Error incrementing view count:",r),e.n=3;break;case 2:e.p=2,o=e.v,console.error("Failed to increment view count:",o);case 3:return e.a(2)}},e,null,[[0,2]])})),function(e){return r.apply(this,arguments)})}],n&&ft(e.prototype,n),t&&ft(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,n,t,r,o,i,a,s,l,c,u,d,f,h,p,A,g,m,b,y,v}());const At=a("ExternalLink",[["path",{d:"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",key:"a6xqqp"}],["polyline",{points:"15 3 21 3 21 9",key:"mznyad"}],["line",{x1:"10",x2:"21",y1:"14",y2:"3",key:"18c3s4"}]]),gt=a("MoreHorizontal",[["circle",{cx:"12",cy:"12",r:"1",key:"41hilf"}],["circle",{cx:"19",cy:"12",r:"1",key:"1wjl8i"}],["circle",{cx:"5",cy:"12",r:"1",key:"1pcz8c"}]]),mt=a("PenLine",[["path",{d:"M12 20h9",key:"t2du7b"}],["path",{d:"M16.5 3.5a2.12 2.12 0 0 1 3 3L7 19l-4 1 1-4Z",key:"ymcmye"}]]),bt=a("Trash2",[["path",{d:"M3 6h18",key:"d0wm0j"}],["path",{d:"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",key:"4alrt4"}],["path",{d:"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",key:"v07s0e"}],["line",{x1:"10",x2:"10",y1:"11",y2:"17",key:"1uufr5"}],["line",{x1:"14",x2:"14",y1:"11",y2:"17",key:"xtxkd"}]]);var yt=t(848);function vt(e){return function(e){if(Array.isArray(e))return Ct(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||xt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Et(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(e,n)||xt(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xt(e,n){if(e){if("string"==typeof e)return Ct(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ct(e,n):void 0}}function Ct(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const wt=function(e){var n=e.selectedTags,t=e.availableTags,o=e.onTagsChange,i=e.placeholder,a=void 0===i?"Add tags...":i,s=e.maxTags,c=void 0===s?10:s,u=Et((0,r.useState)(""),2),f=u[0],h=u[1],p=Et((0,r.useState)(!1),2),A=p[0],g=p[1],m=Et((0,r.useState)(-1),2),b=m[0],y=m[1],v=(0,r.useRef)(null),E=t.filter(function(e){return e.name.toLowerCase().includes(f.toLowerCase())&&!n.find(function(n){return n.name===e.name})}).slice(0,8),x=function(e){var t;n.length>=c||n.find(function(n){return n.name===e.name})||(o([].concat(vt(n),[e])),h(""),g(!1),y(-1),null===(t=v.current)||void 0===t||t.focus())},C=function(e){var t;o(n.filter(function(n){return n.name!==e.name})),null===(t=v.current)||void 0===t||t.focus()},w=function(e){for(var n=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4","#84cc16","#f97316","#ec4899","#6366f1"],t=0,r=0;r<e.length;r++)t=e.charCodeAt(r)+((t<<5)-t);return n[Math.abs(t)%n.length]};return(0,yt.jsxs)("div",{className:"tag-input-container",children:[(0,yt.jsxs)("div",{className:"tag-input-wrapper",children:[n.map(function(e){return(0,yt.jsxs)("div",{className:"tag-chip",style:{backgroundColor:w(e.name)},children:[(0,yt.jsx)("span",{className:"tag-name",children:e.name}),(0,yt.jsx)("button",{onClick:function(){return C(e)},className:"tag-remove",type:"button",title:"Remove ".concat(e.name," tag"),"aria-label":"Remove ".concat(e.name," tag"),children:(0,yt.jsx)(d,{size:12})})]},e.name)}),(0,yt.jsx)("input",{ref:v,type:"text",value:f,onChange:function(e){var n=e.target.value;h(n),g(n.length>0),y(-1)},onKeyDown:function(e){"Enter"===e.key?(e.preventDefault(),b>=0&&E[b]?x(E[b]):f.trim()&&function(e){var t;if(!(n.length>=c||n.find(function(n){return n.name.toLowerCase()===e.toLowerCase()}))){var r={id:"",name:e.toLowerCase()};o([].concat(vt(n),[r])),h(""),g(!1),y(-1),null===(t=v.current)||void 0===t||t.focus()}}(f.trim())):"ArrowDown"===e.key?(e.preventDefault(),y(function(e){return e<E.length-1?e+1:e})):"ArrowUp"===e.key?(e.preventDefault(),y(function(e){return e>0?e-1:-1})):"Escape"===e.key?(g(!1),y(-1)):"Backspace"===e.key&&!f&&n.length>0&&C(n[n.length-1])},onFocus:function(){return g(f.length>0)},onBlur:function(){return setTimeout(function(){return g(!1)},150)},placeholder:0===n.length?a:"",className:"tag-input",disabled:n.length>=c}),n.length<c&&(0,yt.jsx)("div",{className:"tag-input-icon",children:(0,yt.jsx)(l,{size:14})})]}),A&&E.length>0&&(0,yt.jsx)("div",{className:"tag-suggestions",children:E.map(function(e,n){return(0,yt.jsxs)("button",{onClick:function(){return function(e){x(e)}(e)},className:"tag-suggestion ".concat(n===b?"focused":""),type:"button",children:[(0,yt.jsx)("span",{className:"tag-suggestion-color",style:{backgroundColor:w(e.name)}}),(0,yt.jsx)("span",{className:"tag-suggestion-name",children:e.name}),e.usageCount&&e.usageCount>0&&(0,yt.jsxs)("span",{className:"tag-suggestion-count",children:["(",e.usageCount,")"]})]},e.id)})})]})};function kt(e){return kt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kt(e)}function Bt(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return St(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,f={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(n,t){return i=n,s=0,l=e,f.n=t,a}};function h(t,r){for(s=t,l=r,n=0;!d&&c&&!o&&n<u.length;n++){var o,i=u[n],h=f.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((o=t<2&&h<i[1])?(s=0,f.v=r,f.n=i[1]):h<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,f.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&h(u,p),s=u,l=p;(n=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(f.n=-1),h(s,l)):f.n=l:f.v=l);try{if(c=2,i){if(s||(o="next"),n=i[o]){if(!(n=n.call(i,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=i.return)&&n.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=e}else if((n=(d=f.n<0)?l:t.call(r,f))!==a)break}catch(n){i=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(St(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function f(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,St(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,St(d,"constructor",c),St(c,"constructor",l),l.displayName="GeneratorFunction",St(c,o,"GeneratorFunction"),St(d),St(d,o,"Generator"),St(d,r,function(){return this}),St(d,"toString",function(){return"[object Generator]"}),(Bt=function(){return{w:i,m:f}})()}function St(e,n,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}St=function(e,n,t,r){if(n)o?o(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var i=function(n,t){St(e,n,function(e){return this._invoke(n,t,e)})};i("next",0),i("throw",1),i("return",2)}},St(e,n,t,r)}function _t(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function jt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?_t(Object(t),!0).forEach(function(n){Tt(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):_t(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function Tt(e,n,t){return(n=function(e){var n=function(e){if("object"!=kt(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=kt(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==kt(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Nt(e,n,t,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,o)}function Pt(e){return function(){var n=this,t=arguments;return new Promise(function(r,o){var i=e.apply(n,t);function a(e){Nt(i,r,o,a,s,"next",e)}function s(e){Nt(i,r,o,a,s,"throw",e)}a(void 0)})}}function Ot(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return zt(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?zt(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const It=function(e){var n=e.link,t=e.collections,o=(e.onUpdate,e.onDelete),i=e.onMoveToCollection,a=e.onAddNote,s=e.onTagsUpdated,l=Ot((0,r.useState)(!1),2),c=l[0],u=l[1],d=Ot((0,r.useState)(!1),2),h=d[0],p=d[1],g=Ot((0,r.useState)(!1),2),m=g[0],b=g[1],y=Ot((0,r.useState)([]),2),v=y[0],E=y[1],x=Ot((0,r.useState)([]),2),C=x[0],w=x[1],k=Ot((0,r.useState)(!1),2),B=k[0],S=k[1];(0,r.useEffect)(function(){m?N():T()},[m,n.id]);var _,j,T=function(){var e=Pt(Bt().m(function e(){var t,r;return Bt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.getLinkTags(n.id);case 1:t=e.v,E(t.map(function(e){return jt(jt({},e),{},{usageCount:0})})),e.n=3;break;case 2:e.p=2,r=e.v,console.error("Failed to load link tags:",r);case 3:return e.a(2)}},e,null,[[0,2]])}));return function(){return e.apply(this,arguments)}}(),N=function(){var e=Pt(Bt().m(function e(){var t,r,o,i,a;return Bt().w(function(e){for(;;)switch(e.n){case 0:return S(!0),e.p=1,e.n=2,Promise.all([pt.getLinkTags(n.id),pt.getUserTags()]);case 2:t=e.v,r=Ot(t,2),o=r[0],i=r[1],E(o.map(function(e){return jt(jt({},e),{},{usageCount:0})})),w(i),e.n=4;break;case 3:e.p=3,a=e.v,console.error("Failed to load tags:",a);case 4:return e.p=4,S(!1),e.f(4);case 5:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),P=function(){var e=Pt(Bt().m(function e(t){var r,o,i,a;return Bt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,r=t.map(function(e){return e.name}),e.n=1,pt.addTagsToLink(n.id,r);case 1:if(!(o=e.v).success){e.n=3;break}return E(t),e.n=2,pt.getUserTags();case 2:i=e.v,w(i),s&&s(),e.n=4;break;case 3:console.error("Failed to update tags:",o.error);case 4:e.n=6;break;case 5:e.p=5,a=e.v,console.error("Failed to update link tags:",a);case 6:return e.a(2)}},e,null,[[0,5]])}));return function(n){return e.apply(this,arguments)}}(),O=function(){chrome.tabs.create({url:n.url})},z=function(e){for(var n=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4","#84cc16","#f97316","#ec4899","#6366f1"],t=0,r=0;r<e.length;r++)t=e.charCodeAt(r)+((t<<5)-t);return n[Math.abs(t)%n.length]};return(0,yt.jsxs)("div",{className:"link-card",children:[(0,yt.jsxs)("div",{className:"link-header",children:[(0,yt.jsx)("div",{className:"link-favicon",children:n.favicon?(0,yt.jsx)("img",{src:n.favicon,alt:"",width:"16",height:"16"}):(0,yt.jsx)("div",{className:"favicon-placeholder",style:{backgroundColor:function(e){for(var n=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4"],t=0,r=0;r<e.length;r++)t=e.charCodeAt(r)+((t<<5)-t);return n[Math.abs(t)%n.length]}(n.domain)},children:n.domain.charAt(0).toUpperCase()})}),(0,yt.jsxs)("div",{className:"link-info",children:[(0,yt.jsx)("h3",{className:"link-title",onClick:O,title:n.title,children:n.title}),(0,yt.jsxs)("div",{className:"link-meta",children:[(0,yt.jsx)("span",{className:"link-domain",children:n.domain}),(0,yt.jsx)("span",{className:"link-date",children:(j=n.createdAt,new Date(j).toLocaleDateString("en-US",{month:"short",day:"numeric"}))})]})]}),(0,yt.jsxs)("div",{className:"link-actions",children:[(0,yt.jsx)("button",{onClick:O,className:"action-button",title:"Open link",children:(0,yt.jsx)(At,{size:14})}),(0,yt.jsxs)("div",{className:"dropdown",children:[(0,yt.jsx)("button",{onClick:function(){return u(!c)},className:"action-button",title:"More options",children:(0,yt.jsx)(gt,{size:14})}),c&&(0,yt.jsxs)("div",{className:"dropdown-menu",children:[(0,yt.jsxs)("button",{onClick:function(){a(n),u(!1)},children:[(0,yt.jsx)(mt,{size:14}),"Edit note"]}),(0,yt.jsxs)("button",{onClick:function(){b(!m),u(!1)},children:[(0,yt.jsx)(f,{size:14}),"Edit tags"]}),(0,yt.jsxs)("button",{onClick:function(){p(!h)},children:[(0,yt.jsx)(A,{size:14}),"Move to collection"]}),(0,yt.jsxs)("button",{onClick:function(){o(n.id),u(!1)},className:"delete-action",children:[(0,yt.jsx)(bt,{size:14}),"Delete"]})]})]})]})]}),h&&(0,yt.jsxs)("div",{className:"collections-menu",children:[(0,yt.jsx)("div",{className:"collections-header",children:"Move to:"}),t.map(function(e){return(0,yt.jsx)("button",{onClick:function(){i(n.id,e.id),p(!1),u(!1)},className:"collection-option",children:e.name},e.id)}),(0,yt.jsx)("button",{onClick:function(){i(n.id,""),p(!1),u(!1)},className:"collection-option",children:"Remove from collection"})]}),m&&(0,yt.jsxs)("div",{className:"tag-editor",children:[(0,yt.jsxs)("div",{className:"tag-editor-header",children:[(0,yt.jsx)("span",{children:"Edit Tags"}),(0,yt.jsx)("button",{onClick:function(){return b(!1)},className:"tag-editor-close",title:"Close tag editor",children:"×"})]}),B?(0,yt.jsx)("div",{className:"tag-editor-loading",children:"Loading tags..."}):(0,yt.jsx)(wt,{selectedTags:v,availableTags:C,onTagsChange:P,placeholder:"Add tags to organize this link...",maxTags:8})]}),!m&&v.length>0&&(0,yt.jsx)("div",{className:"link-tags",children:v.map(function(e){return(0,yt.jsx)("span",{className:"link-tag",style:{backgroundColor:z(e.name)},title:"Filter by ".concat(e.name),children:e.name},e.id||e.name)})}),n.userNote&&(0,yt.jsxs)("div",{className:"link-note",children:[(0,yt.jsx)("strong",{children:"Note:"})," ",n.userNote]}),n.aiSummary&&(0,yt.jsxs)("div",{className:"link-summary",children:[(0,yt.jsx)("strong",{children:"Summary:"})," ",n.aiSummary]}),(0,yt.jsx)("div",{className:"link-category",children:(0,yt.jsx)("span",{className:"category-badge",style:{backgroundColor:(_=n.category,{general:"#6b7280",work:"#3b82f6",personal:"#10b981",learning:"#f59e0b"}[_]||"#6b7280")},children:n.category})})]})},Rt=a("Folder",[["path",{d:"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",key:"1kt360"}]]),Lt=a("Globe",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20",key:"13o1zl"}],["path",{d:"M2 12h20",key:"9i4pu4"}]]),Dt=a("Share2",[["circle",{cx:"18",cy:"5",r:"3",key:"gq8acd"}],["circle",{cx:"6",cy:"12",r:"3",key:"w7nqdw"}],["circle",{cx:"18",cy:"19",r:"3",key:"1xt0gg"}],["line",{x1:"8.59",x2:"15.42",y1:"13.51",y2:"17.49",key:"47mynk"}],["line",{x1:"15.41",x2:"8.59",y1:"6.51",y2:"10.49",key:"1n3mei"}]]),Ut=a("Lock",[["rect",{width:"18",height:"11",x:"3",y:"11",rx:"2",ry:"2",key:"1w4ew1"}],["path",{d:"M7 11V7a5 5 0 0 1 10 0v4",key:"fwvmzm"}]]),$t=a("Link2",[["path",{d:"M9 17H7A5 5 0 0 1 7 7h2",key:"8i5ue5"}],["path",{d:"M15 7h2a5 5 0 1 1 0 10h-2",key:"1b9ql8"}],["line",{x1:"8",x2:"16",y1:"12",y2:"12",key:"1jonct"}]]),Mt=a("Check",[["path",{d:"M20 6 9 17l-5-5",key:"1gmf2c"}]]),Ft=a("Copy",[["rect",{width:"14",height:"14",x:"8",y:"8",rx:"2",ry:"2",key:"17jyea"}],["path",{d:"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",key:"zix9uf"}]]),qt=a("Eye",[["path",{d:"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z",key:"rwhkz3"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]);function Wt(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Yt(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,f={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(n,t){return i=n,s=0,l=e,f.n=t,a}};function h(t,r){for(s=t,l=r,n=0;!d&&c&&!o&&n<u.length;n++){var o,i=u[n],h=f.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((o=t<2&&h<i[1])?(s=0,f.v=r,f.n=i[1]):h<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,f.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&h(u,p),s=u,l=p;(n=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(f.n=-1),h(s,l)):f.n=l:f.v=l);try{if(c=2,i){if(s||(o="next"),n=i[o]){if(!(n=n.call(i,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=i.return)&&n.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=e}else if((n=(d=f.n<0)?l:t.call(r,f))!==a)break}catch(n){i=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(Yt(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function f(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Yt(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,Yt(d,"constructor",c),Yt(c,"constructor",l),l.displayName="GeneratorFunction",Yt(c,o,"GeneratorFunction"),Yt(d),Yt(d,o,"Generator"),Yt(d,r,function(){return this}),Yt(d,"toString",function(){return"[object Generator]"}),(Wt=function(){return{w:i,m:f}})()}function Yt(e,n,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Yt=function(e,n,t,r){if(n)o?o(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var i=function(n,t){Yt(e,n,function(e){return this._invoke(n,t,e)})};i("next",0),i("throw",1),i("return",2)}},Yt(e,n,t,r)}function Vt(e,n,t,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,o)}function Qt(e){return function(){var n=this,t=arguments;return new Promise(function(r,o){var i=e.apply(n,t);function a(e){Vt(i,r,o,a,s,"next",e)}function s(e){Vt(i,r,o,a,s,"throw",e)}a(void 0)})}}function Ht(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Gt(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Gt(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Kt=function(e){var n=e.collection,t=e.onClose,o=e.onUpdate,i=Ht((0,r.useState)(!1),2),a=i[0],s=i[1],l=Ht((0,r.useState)(""),2),c=l[0],u=l[1],f=Ht((0,r.useState)(0),2),h=f[0],p=f[1],A=Ht((0,r.useState)(!0),2),g=A[0],m=A[1],b=Ht((0,r.useState)(!1),2),y=b[0],v=b[1],E=Ht((0,r.useState)(""),2),x=E[0],C=E[1],w=Ht((0,r.useState)(!1),2),k=w[0],B=w[1];(0,r.useEffect)(function(){_()},[n.id]);var S,_=function(){var e=Qt(Wt().m(function e(){var t,r;return Wt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.getCollectionSharingInfo(n.id);case 1:(t=e.v)&&(s(t.isPublic),u(t.shareToken||""),p(t.viewCount)),e.n=3;break;case 2:e.p=2,r=e.v,console.error("Failed to load sharing info:",r);case 3:return e.p=3,m(!1),e.f(3);case 4:return e.a(2)}},e,null,[[0,2,3,4]])}));return function(){return e.apply(this,arguments)}}(),j=function(){var e=Qt(Wt().m(function e(){var t;return Wt().w(function(e){for(;;)switch(e.n){case 0:return v(!0),C(""),e.p=1,e.n=2,pt.toggleCollectionSharing(n.id,!a);case 2:(t=e.v).success?(s(!a),t.shareToken&&u(t.shareToken),C(t.message),o()):C(t.message),e.n=4;break;case 3:e.p=3,e.v,C("Failed to update sharing settings");case 4:return e.p=4,v(!1),e.f(4);case 5:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),T=function(){return c?"https://nest-shared.vercel.app/collection/".concat(c):""},N=function(){var e=Qt(Wt().m(function e(){var n,t;return Wt().w(function(e){for(;;)switch(e.n){case 0:if(n=T()){e.n=1;break}return e.a(2);case 1:return e.p=1,e.n=2,navigator.clipboard.writeText(n);case 2:B(!0),setTimeout(function(){return B(!1)},2e3),e.n=4;break;case 3:e.p=3,e.v,(t=document.createElement("textarea")).value=n,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),B(!0),setTimeout(function(){return B(!1)},2e3);case 4:return e.a(2)}},e,null,[[1,3]])}));return function(){return e.apply(this,arguments)}}();return g?(0,yt.jsx)("div",{className:"modal-overlay",children:(0,yt.jsxs)("div",{className:"modal share-modal",children:[(0,yt.jsxs)("div",{className:"modal-header",children:[(0,yt.jsx)("h2",{children:"Share Collection"}),(0,yt.jsx)("button",{onClick:t,className:"modal-close",title:"Close",children:(0,yt.jsx)(d,{size:20})})]}),(0,yt.jsx)("div",{className:"modal-content",children:(0,yt.jsx)("div",{className:"loading-spinner",children:"Loading sharing settings..."})})]})}):(0,yt.jsx)("div",{className:"modal-overlay",children:(0,yt.jsxs)("div",{className:"modal share-modal",children:[(0,yt.jsxs)("div",{className:"modal-header",children:[(0,yt.jsx)("h2",{children:"Share Collection"}),(0,yt.jsx)("button",{onClick:t,className:"modal-close",title:"Close",children:(0,yt.jsx)(d,{size:20})})]}),(0,yt.jsxs)("div",{className:"modal-content",children:[(0,yt.jsxs)("div",{className:"share-collection-info",children:[(0,yt.jsx)("h3",{className:"collection-name",children:n.name}),n.description&&(0,yt.jsx)("p",{className:"collection-description",children:n.description}),(0,yt.jsx)("div",{className:"collection-meta",children:(0,yt.jsxs)("span",{children:["Created ",(S=n.createdAt,new Date(S).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}))]})})]}),(0,yt.jsx)("div",{className:"share-toggle-section",children:(0,yt.jsxs)("div",{className:"share-toggle-header",children:[(0,yt.jsx)("div",{className:"share-status",children:a?(0,yt.jsxs)(yt.Fragment,{children:[(0,yt.jsx)(Lt,{size:20,className:"status-icon public"}),(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"status-title",children:"Public Collection"}),(0,yt.jsx)("div",{className:"status-subtitle",children:"Anyone with the link can view this collection"})]})]}):(0,yt.jsxs)(yt.Fragment,{children:[(0,yt.jsx)(Ut,{size:20,className:"status-icon private"}),(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"status-title",children:"Private Collection"}),(0,yt.jsx)("div",{className:"status-subtitle",children:"Only you can see this collection"})]})]})}),(0,yt.jsx)("button",{onClick:j,disabled:y,className:"toggle-button ".concat(a?"public":"private"),children:y?"Updating...":a?"Make Private":"Make Public"})]})}),a&&c&&(0,yt.jsxs)("div",{className:"share-link-section",children:[(0,yt.jsxs)("div",{className:"share-link-header",children:[(0,yt.jsx)($t,{size:16}),(0,yt.jsx)("span",{children:"Share Link"})]}),(0,yt.jsxs)("div",{className:"share-link-container",children:[(0,yt.jsx)("input",{type:"text",value:T(),readOnly:!0,className:"share-link-input",title:"Share link URL","aria-label":"Share link URL"}),(0,yt.jsxs)("div",{className:"share-link-actions",children:[(0,yt.jsx)("button",{onClick:N,className:"copy-button ".concat(k?"copied":""),title:"Copy link",children:k?(0,yt.jsx)(Mt,{size:16}):(0,yt.jsx)(Ft,{size:16})}),(0,yt.jsx)("button",{onClick:function(){var e=T();e&&chrome.tabs.create({url:e})},className:"open-button",title:"Open in new tab",children:(0,yt.jsx)(At,{size:16})})]})]}),(0,yt.jsx)("div",{className:"share-analytics",children:(0,yt.jsxs)("div",{className:"analytics-item",children:[(0,yt.jsx)(qt,{size:16}),(0,yt.jsxs)("span",{children:[h," ",1===h?"view":"views"]})]})})]}),x&&(0,yt.jsx)("div",{className:"share-message ".concat(x.includes("error")?"error":"success"),children:x}),(0,yt.jsxs)("div",{className:"share-info-box",children:[(0,yt.jsx)("h4",{children:"About Public Collections"}),(0,yt.jsxs)("ul",{children:[(0,yt.jsx)("li",{children:"Public collections can be viewed by anyone with the link"}),(0,yt.jsx)("li",{children:"Viewers don't need an account to see your collection"}),(0,yt.jsx)("li",{children:"Links, notes, summaries, and tags are included"}),(0,yt.jsx)("li",{children:"You can make collections private at any time"}),(0,yt.jsx)("li",{children:"View counts help you track sharing analytics"})]})]})]}),(0,yt.jsx)("div",{className:"modal-footer",children:(0,yt.jsx)("button",{onClick:t,className:"modal-button secondary",children:"Close"})})]})})};function Zt(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Jt(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,f={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(n,t){return i=n,s=0,l=e,f.n=t,a}};function h(t,r){for(s=t,l=r,n=0;!d&&c&&!o&&n<u.length;n++){var o,i=u[n],h=f.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((o=t<2&&h<i[1])?(s=0,f.v=r,f.n=i[1]):h<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,f.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&h(u,p),s=u,l=p;(n=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(f.n=-1),h(s,l)):f.n=l:f.v=l);try{if(c=2,i){if(s||(o="next"),n=i[o]){if(!(n=n.call(i,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=i.return)&&n.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=e}else if((n=(d=f.n<0)?l:t.call(r,f))!==a)break}catch(n){i=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(Jt(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function f(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Jt(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,Jt(d,"constructor",c),Jt(c,"constructor",l),l.displayName="GeneratorFunction",Jt(c,o,"GeneratorFunction"),Jt(d),Jt(d,o,"Generator"),Jt(d,r,function(){return this}),Jt(d,"toString",function(){return"[object Generator]"}),(Zt=function(){return{w:i,m:f}})()}function Jt(e,n,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Jt=function(e,n,t,r){if(n)o?o(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var i=function(n,t){Jt(e,n,function(e){return this._invoke(n,t,e)})};i("next",0),i("throw",1),i("return",2)}},Jt(e,n,t,r)}function Xt(e,n,t,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,o)}function er(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return nr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?nr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const tr=function(e){var n=e.collection,t=e.links,o=e.onUpdateLink,i=e.onDeleteLink,a=e.onAddNote,s=e.onTagsUpdated,l=e.onUpdate,c=er((0,r.useState)(!1),2),u=c[0],d=c[1],f=er((0,r.useState)(!1),2),A=f[0],g=f[1],m=function(){var e,n=(e=Zt().m(function e(n,t){return Zt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,o(n,{collectionId:t||void 0});case 1:return e.a(2)}},e)}),function(){var n=this,t=arguments;return new Promise(function(r,o){var i=e.apply(n,t);function a(e){Xt(i,r,o,a,s,"next",e)}function s(e){Xt(i,r,o,a,s,"throw",e)}a(void 0)})});return function(e,t){return n.apply(this,arguments)}}();return(0,yt.jsxs)(yt.Fragment,{children:[(0,yt.jsxs)("div",{className:"collection-card",children:[(0,yt.jsxs)("button",{onClick:function(){return d(!u)},className:"collection-header",children:[u?(0,yt.jsx)(h,{size:16}):(0,yt.jsx)(p,{size:16}),(0,yt.jsx)(Rt,{size:16,className:"collection-icon"}),(0,yt.jsxs)("div",{className:"collection-info",children:[(0,yt.jsxs)("div",{className:"collection-name-row",children:[(0,yt.jsx)("span",{className:"collection-name",children:n.name}),n.isPublic&&(0,yt.jsx)("div",{className:"public-indicator",title:"This collection is public",children:(0,yt.jsx)(Lt,{size:12})})]}),n.description&&(0,yt.jsx)("span",{className:"collection-description",children:n.description})]}),(0,yt.jsxs)("div",{className:"collection-actions",children:[(0,yt.jsx)("span",{className:"collection-count",children:t.length}),(0,yt.jsx)("button",{onClick:function(e){e.stopPropagation(),g(!0)},className:"share-collection-button",title:"Share collection",children:(0,yt.jsx)(Dt,{size:14})})]})]}),u&&(0,yt.jsx)("div",{className:"collection-content",children:0===t.length?(0,yt.jsx)("div",{className:"empty-collection",children:(0,yt.jsx)("p",{children:"No links in this collection"})}):t.map(function(e){return(0,yt.jsx)(It,{link:e,collections:[],onUpdate:o,onDelete:i,onMoveToCollection:m,onAddNote:a,onTagsUpdated:s},e.id)})})]}),A&&(0,yt.jsx)(Kt,{collection:n,onClose:function(){g(!1)},onUpdate:function(){l&&l()}})]})},rr=function(e){var n,t=e.link,r=e.collections,o=e.onUpdate,i=e.onDelete,a=e.onMoveToCollection,s=e.onAddNote,l=e.onTagsUpdated;return(0,yt.jsxs)("div",{className:"search-result-card",children:[t.searchRank&&(0,yt.jsx)("div",{className:"search-rank-indicator",children:(n=t.searchRank,n?"".concat(Math.round(100*n),"% match"):"")}),t.searchHeadline&&(0,yt.jsx)("div",{className:"search-headline",dangerouslySetInnerHTML:{__html:t.searchHeadline}}),(0,yt.jsx)(It,{link:t,collections:r,onUpdate:o,onDelete:i,onMoveToCollection:a,onAddNote:s,onTagsUpdated:l})]})};function or(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const ir=function(e){var n,t,o=e.link,i=e.onSave,a=e.onClose,s=(n=(0,r.useState)(o.userNote||""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,t)||function(e,n){if(e){if("string"==typeof e)return or(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?or(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0],c=s[1];return(0,yt.jsx)("div",{className:"modal-overlay",onClick:a,children:(0,yt.jsxs)("div",{className:"modal-content",onClick:function(e){return e.stopPropagation()},children:[(0,yt.jsxs)("div",{className:"modal-header",children:[(0,yt.jsx)("h2",{children:"Add Note"}),(0,yt.jsx)("button",{onClick:a,className:"close-button",title:"Close",children:(0,yt.jsx)(d,{size:20})})]}),(0,yt.jsxs)("div",{className:"modal-body",children:[(0,yt.jsxs)("div",{className:"link-preview",children:[(0,yt.jsx)("div",{className:"link-preview-favicon",children:o.favicon?(0,yt.jsx)("img",{src:o.favicon,alt:"",width:"16",height:"16"}):(0,yt.jsx)("div",{className:"favicon-placeholder",children:o.domain.charAt(0).toUpperCase()})}),(0,yt.jsxs)("div",{className:"link-preview-info",children:[(0,yt.jsx)("div",{className:"link-preview-title",children:o.title}),(0,yt.jsx)("div",{className:"link-preview-url",children:o.domain})]})]}),(0,yt.jsxs)("form",{onSubmit:function(e){e.preventDefault(),i(l)},children:[(0,yt.jsxs)("div",{className:"form-group",children:[(0,yt.jsx)("label",{htmlFor:"note",children:"Note:"}),(0,yt.jsx)("textarea",{id:"note",value:l,onChange:function(e){return c(e.target.value)},placeholder:"Add a note about why you saved this link...",rows:4,autoFocus:!0})]}),(0,yt.jsxs)("div",{className:"modal-actions",children:[(0,yt.jsx)("button",{type:"button",onClick:a,className:"button-secondary",children:"Cancel"}),(0,yt.jsx)("button",{type:"submit",className:"button-primary",children:"Save Note"})]})]})]})]})})};function ar(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return sr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?sr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function sr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const lr=function(e){var n=e.onSave,t=e.onClose,o=ar((0,r.useState)(""),2),i=o[0],a=o[1],s=ar((0,r.useState)(""),2),l=s[0],c=s[1];return(0,yt.jsx)("div",{className:"modal-overlay",onClick:t,children:(0,yt.jsxs)("div",{className:"modal-content",onClick:function(e){return e.stopPropagation()},children:[(0,yt.jsxs)("div",{className:"modal-header",children:[(0,yt.jsx)("h2",{children:"Create Collection"}),(0,yt.jsx)("button",{onClick:t,className:"close-button",title:"Close",children:(0,yt.jsx)(d,{size:20})})]}),(0,yt.jsx)("div",{className:"modal-body",children:(0,yt.jsxs)("form",{onSubmit:function(e){e.preventDefault(),i.trim()&&n(i.trim(),l.trim()||void 0)},children:[(0,yt.jsxs)("div",{className:"form-group",children:[(0,yt.jsx)("label",{htmlFor:"collection-name",children:"Collection Name:"}),(0,yt.jsx)("input",{id:"collection-name",type:"text",value:i,onChange:function(e){return a(e.target.value)},placeholder:"Enter collection name...",required:!0,autoFocus:!0})]}),(0,yt.jsxs)("div",{className:"form-group",children:[(0,yt.jsx)("label",{htmlFor:"collection-description",children:"Description (optional):"}),(0,yt.jsx)("textarea",{id:"collection-description",value:l,onChange:function(e){return c(e.target.value)},placeholder:"Describe what this collection is for...",rows:3})]}),(0,yt.jsxs)("div",{className:"modal-actions",children:[(0,yt.jsx)("button",{type:"button",onClick:t,className:"button-secondary",children:"Cancel"}),(0,yt.jsx)("button",{type:"submit",className:"button-primary",disabled:!i.trim(),children:"Create Collection"})]})]})})]})})},cr=function(e){var n=e.tags,t=e.selectedTag,r=e.onTagSelect,o=e.loading,i=function(e){for(var n=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4","#84cc16","#f97316","#ec4899","#6366f1"],t=0,r=0;r<e.length;r++)t=e.charCodeAt(r)+((t<<5)-t);return n[Math.abs(t)%n.length]};return void 0!==o&&o?(0,yt.jsx)("div",{className:"tag-filters",children:(0,yt.jsx)("div",{className:"tag-filter-skeleton",children:"Loading tags..."})}):0===n.length?null:(0,yt.jsxs)("div",{className:"tag-filters",children:[t&&(0,yt.jsxs)("button",{onClick:function(){return r(null)},className:"tag-filter active",title:"Clear tag filter",children:[(0,yt.jsx)("span",{className:"tag-filter-color",style:{backgroundColor:i(t)}}),t,(0,yt.jsx)(d,{size:12})]}),n.filter(function(e){return e.name!==t}).sort(function(e,n){return n.usageCount-e.usageCount}).slice(0,10).map(function(e){return(0,yt.jsxs)("button",{onClick:function(){return r(e.name)},className:"tag-filter",title:"Filter by ".concat(e.name," tag"),children:[(0,yt.jsx)("span",{className:"tag-filter-color",style:{backgroundColor:i(e.name)}}),e.name,(0,yt.jsx)("span",{className:"tag-filter-count",children:e.usageCount})]},e.id)}),n.length>10&&!t&&(0,yt.jsxs)("span",{className:"tag-filter-more",children:["+",n.length-10," more"]})]})},ur=a("User",[["path",{d:"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2",key:"975kel"}],["circle",{cx:"12",cy:"7",r:"4",key:"17ys0d"}]]),dr=a("Palette",[["circle",{cx:"13.5",cy:"6.5",r:".5",key:"1xcu5"}],["circle",{cx:"17.5",cy:"10.5",r:".5",key:"736e4u"}],["circle",{cx:"8.5",cy:"7.5",r:".5",key:"clrty"}],["circle",{cx:"6.5",cy:"12.5",r:".5",key:"1s4xz9"}],["path",{d:"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z",key:"12rzf8"}]]),fr=a("Database",[["ellipse",{cx:"12",cy:"5",rx:"9",ry:"3",key:"msslwz"}],["path",{d:"M3 5V19A9 3 0 0 0 21 19V5",key:"1wlel7"}],["path",{d:"M3 12A9 3 0 0 0 21 12",key:"mv7ke4"}]]),hr=a("Info",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M12 16v-4",key:"1dtifu"}],["path",{d:"M12 8h.01",key:"e9boi3"}]]),pr=a("Mail",[["rect",{width:"20",height:"16",x:"2",y:"4",rx:"2",key:"18n3k1"}],["path",{d:"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",key:"1ocrg3"}]]),Ar=a("Calendar",[["rect",{width:"18",height:"18",x:"3",y:"4",rx:"2",ry:"2",key:"eu3xkr"}],["line",{x1:"16",x2:"16",y1:"2",y2:"6",key:"m3sa8f"}],["line",{x1:"8",x2:"8",y1:"2",y2:"6",key:"18kwsl"}],["line",{x1:"3",x2:"21",y1:"10",y2:"10",key:"xt86sb"}]]),gr=a("Download",[["path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",key:"ih7n3h"}],["polyline",{points:"7 10 12 15 17 10",key:"2ggqvy"}],["line",{x1:"12",x2:"12",y1:"15",y2:"3",key:"1vk2je"}]]),mr=a("FileText",[["path",{d:"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",key:"1nnpy2"}],["polyline",{points:"14 2 14 8 20 8",key:"1ew0cm"}],["line",{x1:"16",x2:"8",y1:"13",y2:"13",key:"14keom"}],["line",{x1:"16",x2:"8",y1:"17",y2:"17",key:"17nazh"}],["line",{x1:"10",x2:"8",y1:"9",y2:"9",key:"1a5vjj"}]]),br=a("BarChart3",[["path",{d:"M3 3v18h18",key:"1s2lah"}],["path",{d:"M18 17V9",key:"2bz60n"}],["path",{d:"M13 17V5",key:"1frdt8"}],["path",{d:"M8 17v-3",key:"17ska0"}]]),yr=a("HelpCircle",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3",key:"1u773s"}],["path",{d:"M12 17h.01",key:"p32p05"}]]);function vr(e){return vr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vr(e)}function Er(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function xr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Er(Object(t),!0).forEach(function(n){Cr(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Er(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function Cr(e,n,t){return(n=function(e){var n=function(e){if("object"!=vr(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=vr(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==vr(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function wr(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return kr(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,f={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(n,t){return i=n,s=0,l=e,f.n=t,a}};function h(t,r){for(s=t,l=r,n=0;!d&&c&&!o&&n<u.length;n++){var o,i=u[n],h=f.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((o=t<2&&h<i[1])?(s=0,f.v=r,f.n=i[1]):h<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,f.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&h(u,p),s=u,l=p;(n=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(f.n=-1),h(s,l)):f.n=l:f.v=l);try{if(c=2,i){if(s||(o="next"),n=i[o]){if(!(n=n.call(i,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=i.return)&&n.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=e}else if((n=(d=f.n<0)?l:t.call(r,f))!==a)break}catch(n){i=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(kr(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function f(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,kr(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,kr(d,"constructor",c),kr(c,"constructor",l),l.displayName="GeneratorFunction",kr(c,o,"GeneratorFunction"),kr(d),kr(d,o,"Generator"),kr(d,r,function(){return this}),kr(d,"toString",function(){return"[object Generator]"}),(wr=function(){return{w:i,m:f}})()}function kr(e,n,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}kr=function(e,n,t,r){if(n)o?o(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var i=function(n,t){kr(e,n,function(e){return this._invoke(n,t,e)})};i("next",0),i("throw",1),i("return",2)}},kr(e,n,t,r)}function Br(e,n,t,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,o)}function Sr(e){return function(){var n=this,t=arguments;return new Promise(function(r,o){var i=e.apply(n,t);function a(e){Br(i,r,o,a,s,"next",e)}function s(e){Br(i,r,o,a,s,"throw",e)}a(void 0)})}}function _r(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return jr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?jr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Tr=function(e){var n=e.onClose,t=_r((0,r.useState)("account"),2),o=t[0],i=t[1],a=_r((0,r.useState)(""),2),s=a[0],l=a[1],c=_r((0,r.useState)({linkCount:0,collectionCount:0,tagCount:0,publicCollections:0,totalViews:0}),2),u=c[0],h=c[1],p=_r((0,r.useState)({autoSummarize:!0,defaultCategory:"general",defaultPrivacy:!1,showTooltips:!0,compactView:!1,darkMode:!1}),2),A=p[0],g=p[1],m=_r((0,r.useState)(!0),2),b=m[0],y=m[1],v=_r((0,r.useState)(!1),2),E=v[0],x=v[1],C=_r((0,r.useState)(""),2),w=C[0],k=C[1];(0,r.useEffect)(function(){B(),S(),_()},[]);var B=function(){var e=Sr(wr().m(function e(){var n,t,r;return wr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,nt.auth.getUser();case 1:n=e.v,(t=n.data.user)&&l(t.email||"Unknown"),e.n=3;break;case 2:e.p=2,r=e.v,console.error("Failed to load user data:",r);case 3:return e.a(2)}},e,null,[[0,2]])}));return function(){return e.apply(this,arguments)}}(),S=function(){var e=Sr(wr().m(function e(){var n,t;return wr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.getData();case 1:n=e.v,g({autoSummarize:n.settings.autoSummarize,defaultCategory:n.settings.defaultCategory,defaultPrivacy:!1,showTooltips:!0,compactView:!1,darkMode:!1}),e.n=3;break;case 2:e.p=2,t=e.v,console.error("Failed to load settings:",t);case 3:return e.p=3,y(!1),e.f(3);case 4:return e.a(2)}},e,null,[[0,2,3,4]])}));return function(){return e.apply(this,arguments)}}(),_=function(){var e=Sr(wr().m(function e(){var n,t,r,o,i,a,s;return wr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.getData();case 1:return n=e.v,e.n=2,pt.getUserTags();case 2:return t=e.v,e.n=3,nt.from("collections").select("view_count").eq("is_public",!0);case 3:r=e.v,o=r.data,i=(null==o?void 0:o.length)||0,a=(null==o?void 0:o.reduce(function(e,n){return e+(n.view_count||0)},0))||0,h({linkCount:n.links.length,collectionCount:n.collections.length,tagCount:t.length,publicCollections:i,totalViews:a}),e.n=5;break;case 4:e.p=4,s=e.v,console.error("Failed to load user stats:",s);case 5:return e.a(2)}},e,null,[[0,4]])}));return function(){return e.apply(this,arguments)}}(),j=function(){var e=Sr(wr().m(function e(n){return wr().w(function(e){for(;;)switch(e.n){case 0:x(!0),k("");try{g(n),k("Settings saved successfully!"),setTimeout(function(){return k("")},3e3)}catch(e){k("Failed to save settings")}finally{x(!1)}case 1:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}(),T=function(){var e=Sr(wr().m(function e(){var n,t,r,o,i,a;return wr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.getData();case 1:return n=e.v,e.n=2,pt.getUserTags();case 2:t=e.v,r={exported_at:(new Date).toISOString(),user_email:s,links:n.links,collections:n.collections,tags:t,stats:u},o=new Blob([JSON.stringify(r,null,2)],{type:"application/json"}),i=URL.createObjectURL(o),(a=document.createElement("a")).href=i,a.download="nest-export-".concat((new Date).toISOString().split("T")[0],".json"),document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(i),k("Data exported successfully!"),setTimeout(function(){return k("")},3e3),e.n=4;break;case 3:e.p=3,e.v,k("Failed to export data");case 4:return e.a(2)}},e,null,[[0,3]])}));return function(){return e.apply(this,arguments)}}(),N=function(){var e=Sr(wr().m(function e(){var n;return wr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.cleanupUnusedTags();case 1:n=e.v,k("Cleaned up ".concat(n," unused tags")),_(),setTimeout(function(){return k("")},3e3),e.n=3;break;case 2:e.p=2,e.v,k("Failed to cleanup tags");case 3:return e.a(2)}},e,null,[[0,2]])}));return function(){return e.apply(this,arguments)}}(),P=function(){var e=Sr(wr().m(function e(){return wr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,nt.auth.signOut();case 1:n(),e.n=3;break;case 2:e.p=2,e.v,k("Failed to logout");case 3:return e.a(2)}},e,null,[[0,2]])}));return function(){return e.apply(this,arguments)}}(),O=[{id:"account",label:"Account",icon:ur},{id:"preferences",label:"Preferences",icon:dr},{id:"data",label:"Data",icon:fr},{id:"sharing",label:"Sharing",icon:Dt},{id:"about",label:"About",icon:hr}];return b?(0,yt.jsx)("div",{className:"modal-overlay",children:(0,yt.jsxs)("div",{className:"modal settings-modal",children:[(0,yt.jsxs)("div",{className:"modal-header",children:[(0,yt.jsx)("h2",{children:"Settings"}),(0,yt.jsx)("button",{onClick:n,className:"modal-close",title:"Close",children:(0,yt.jsx)(d,{size:20})})]}),(0,yt.jsx)("div",{className:"modal-content",children:(0,yt.jsx)("div",{className:"loading-spinner",children:"Loading settings..."})})]})}):(0,yt.jsx)("div",{className:"modal-overlay",children:(0,yt.jsxs)("div",{className:"modal settings-modal",children:[(0,yt.jsxs)("div",{className:"modal-header",children:[(0,yt.jsx)("h2",{children:"Settings"}),(0,yt.jsx)("button",{onClick:n,className:"modal-close",title:"Close",children:(0,yt.jsx)(d,{size:20})})]}),(0,yt.jsxs)("div",{className:"settings-content",children:[(0,yt.jsx)("div",{className:"settings-tabs",children:O.map(function(e){var n=e.icon;return(0,yt.jsxs)("button",{onClick:function(){return i(e.id)},className:"settings-tab ".concat(o===e.id?"active":""),children:[(0,yt.jsx)(n,{size:16}),(0,yt.jsx)("span",{children:e.label})]},e.id)})}),(0,yt.jsxs)("div",{className:"settings-panel",children:["account"===o&&(0,yt.jsxs)("div",{className:"settings-section",children:[(0,yt.jsx)("h3",{children:"Account Information"}),(0,yt.jsxs)("div",{className:"setting-group",children:[(0,yt.jsx)("div",{className:"setting-item",children:(0,yt.jsxs)("div",{className:"setting-info",children:[(0,yt.jsx)(pr,{size:16}),(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"setting-label",children:"Email Address"}),(0,yt.jsx)("div",{className:"setting-description",children:s})]})]})}),(0,yt.jsx)("div",{className:"setting-item",children:(0,yt.jsxs)("div",{className:"setting-info",children:[(0,yt.jsx)(Ar,{size:16}),(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"setting-label",children:"Account Created"}),(0,yt.jsx)("div",{className:"setting-description",children:"Connected via Supabase"})]})]})})]}),(0,yt.jsxs)("div",{className:"stats-grid",children:[(0,yt.jsxs)("div",{className:"stat-card",children:[(0,yt.jsx)("div",{className:"stat-number",children:u.linkCount}),(0,yt.jsx)("div",{className:"stat-label",children:"Links Saved"})]}),(0,yt.jsxs)("div",{className:"stat-card",children:[(0,yt.jsx)("div",{className:"stat-number",children:u.collectionCount}),(0,yt.jsx)("div",{className:"stat-label",children:"Collections"})]}),(0,yt.jsxs)("div",{className:"stat-card",children:[(0,yt.jsx)("div",{className:"stat-number",children:u.tagCount}),(0,yt.jsx)("div",{className:"stat-label",children:"Tags Used"})]}),(0,yt.jsxs)("div",{className:"stat-card",children:[(0,yt.jsx)("div",{className:"stat-number",children:u.totalViews}),(0,yt.jsx)("div",{className:"stat-label",children:"Total Views"})]})]}),(0,yt.jsx)("div",{className:"setting-actions",children:(0,yt.jsx)("button",{onClick:P,className:"settings-button danger",children:"Logout"})})]}),"preferences"===o&&(0,yt.jsxs)("div",{className:"settings-section",children:[(0,yt.jsx)("h3",{children:"Application Preferences"}),(0,yt.jsxs)("div",{className:"setting-group",children:[(0,yt.jsxs)("div",{className:"setting-item",children:[(0,yt.jsx)("div",{className:"setting-info",children:(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"setting-label",children:"Auto-summarize Links"}),(0,yt.jsx)("div",{className:"setting-description",children:"Automatically generate AI summaries for saved links"})]})}),(0,yt.jsxs)("label",{className:"toggle-switch",title:"Toggle auto-summarize",children:[(0,yt.jsx)("input",{type:"checkbox",checked:A.autoSummarize,onChange:function(e){return j(xr(xr({},A),{},{autoSummarize:e.target.checked}))},disabled:E,"aria-label":"Auto-summarize links"}),(0,yt.jsx)("span",{className:"toggle-slider"})]})]}),(0,yt.jsxs)("div",{className:"setting-item",children:[(0,yt.jsx)("div",{className:"setting-info",children:(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"setting-label",children:"Default Category"}),(0,yt.jsx)("div",{className:"setting-description",children:"Default category for new links"})]})}),(0,yt.jsxs)("select",{value:A.defaultCategory,onChange:function(e){return j(xr(xr({},A),{},{defaultCategory:e.target.value}))},className:"settings-select",disabled:E,title:"Select default category","aria-label":"Default category",children:[(0,yt.jsx)("option",{value:"general",children:"General"}),(0,yt.jsx)("option",{value:"work",children:"Work"}),(0,yt.jsx)("option",{value:"personal",children:"Personal"}),(0,yt.jsx)("option",{value:"learning",children:"Learning"})]})]}),(0,yt.jsxs)("div",{className:"setting-item",children:[(0,yt.jsx)("div",{className:"setting-info",children:(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"setting-label",children:"Show Tooltips"}),(0,yt.jsx)("div",{className:"setting-description",children:"Display helpful tooltips throughout the interface"})]})}),(0,yt.jsxs)("label",{className:"toggle-switch",title:"Toggle show tooltips",children:[(0,yt.jsx)("input",{type:"checkbox",checked:A.showTooltips,onChange:function(e){return j(xr(xr({},A),{},{showTooltips:e.target.checked}))},disabled:E,"aria-label":"Show tooltips"}),(0,yt.jsx)("span",{className:"toggle-slider"})]})]}),(0,yt.jsxs)("div",{className:"setting-item",children:[(0,yt.jsx)("div",{className:"setting-info",children:(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"setting-label",children:"Compact View"}),(0,yt.jsx)("div",{className:"setting-description",children:"Use a more compact layout to show more content"})]})}),(0,yt.jsxs)("label",{className:"toggle-switch",title:"Toggle compact view",children:[(0,yt.jsx)("input",{type:"checkbox",checked:A.compactView,onChange:function(e){return j(xr(xr({},A),{},{compactView:e.target.checked}))},disabled:E,"aria-label":"Compact view"}),(0,yt.jsx)("span",{className:"toggle-slider"})]})]})]})]}),"data"===o&&(0,yt.jsxs)("div",{className:"settings-section",children:[(0,yt.jsx)("h3",{children:"Data Management"}),(0,yt.jsxs)("div",{className:"setting-group",children:[(0,yt.jsxs)("div",{className:"setting-item",children:[(0,yt.jsxs)("div",{className:"setting-info",children:[(0,yt.jsx)(gr,{size:16}),(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"setting-label",children:"Export Data"}),(0,yt.jsx)("div",{className:"setting-description",children:"Download all your links, collections, and tags as JSON"})]})]}),(0,yt.jsx)("button",{onClick:T,className:"settings-button",children:"Export"})]}),(0,yt.jsxs)("div",{className:"setting-item",children:[(0,yt.jsxs)("div",{className:"setting-info",children:[(0,yt.jsx)(bt,{size:16}),(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"setting-label",children:"Cleanup Unused Tags"}),(0,yt.jsx)("div",{className:"setting-description",children:"Remove tags that aren't used by any links"})]})]}),(0,yt.jsx)("button",{onClick:N,className:"settings-button",children:"Cleanup"})]})]}),(0,yt.jsxs)("div",{className:"data-usage",children:[(0,yt.jsx)("h4",{children:"Storage Usage"}),(0,yt.jsxs)("div",{className:"usage-items",children:[(0,yt.jsxs)("div",{className:"usage-item",children:[(0,yt.jsx)(mr,{size:14}),(0,yt.jsxs)("span",{children:[u.linkCount," links"]})]}),(0,yt.jsxs)("div",{className:"usage-item",children:[(0,yt.jsx)(f,{size:14}),(0,yt.jsxs)("span",{children:[u.tagCount," tags"]})]}),(0,yt.jsxs)("div",{className:"usage-item",children:[(0,yt.jsx)(br,{size:14}),(0,yt.jsxs)("span",{children:[u.collectionCount," collections"]})]})]})]})]}),"sharing"===o&&(0,yt.jsxs)("div",{className:"settings-section",children:[(0,yt.jsx)("h3",{children:"Sharing & Privacy"}),(0,yt.jsx)("div",{className:"setting-group",children:(0,yt.jsxs)("div",{className:"setting-item",children:[(0,yt.jsx)("div",{className:"setting-info",children:(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"setting-label",children:"Default Collection Privacy"}),(0,yt.jsx)("div",{className:"setting-description",children:"Make new collections public by default"})]})}),(0,yt.jsxs)("label",{className:"toggle-switch",title:"Toggle default privacy",children:[(0,yt.jsx)("input",{type:"checkbox",checked:A.defaultPrivacy,onChange:function(e){return j(xr(xr({},A),{},{defaultPrivacy:e.target.checked}))},disabled:E,"aria-label":"Default collection privacy"}),(0,yt.jsx)("span",{className:"toggle-slider"})]})]})}),(0,yt.jsxs)("div",{className:"sharing-stats",children:[(0,yt.jsx)("h4",{children:"Sharing Analytics"}),(0,yt.jsxs)("div",{className:"stats-row",children:[(0,yt.jsxs)("div",{className:"stat-item",children:[(0,yt.jsx)(qt,{size:16}),(0,yt.jsxs)("span",{children:[u.publicCollections," public collections"]})]}),(0,yt.jsxs)("div",{className:"stat-item",children:[(0,yt.jsx)(br,{size:16}),(0,yt.jsxs)("span",{children:[u.totalViews," total views"]})]})]})]})]}),"about"===o&&(0,yt.jsxs)("div",{className:"settings-section",children:[(0,yt.jsx)("h3",{children:"About Nest"}),(0,yt.jsxs)("div",{className:"about-info",children:[(0,yt.jsxs)("div",{className:"app-info",children:[(0,yt.jsx)("div",{className:"app-logo",children:"N"}),(0,yt.jsxs)("div",{children:[(0,yt.jsx)("div",{className:"app-name",children:"Nest - Smart Bookmarks & Notes"}),(0,yt.jsx)("div",{className:"app-version",children:"Version 1.0.0"})]})]}),(0,yt.jsx)("p",{className:"app-description",children:"Nest is a powerful browser extension that helps you save, organize, and share your bookmarks with AI-powered summaries, flexible tagging, and beautiful collections."})]}),(0,yt.jsxs)("div",{className:"support-links",children:[(0,yt.jsx)("h4",{children:"Support & Resources"}),(0,yt.jsxs)("div",{className:"link-grid",children:[(0,yt.jsxs)("a",{href:"https://github.com",target:"_blank",rel:"noopener",className:"support-link",children:[(0,yt.jsx)(At,{size:16}),(0,yt.jsx)("span",{children:"Documentation"})]}),(0,yt.jsxs)("a",{href:"https://github.com/issues",target:"_blank",rel:"noopener",className:"support-link",children:[(0,yt.jsx)(yr,{size:16}),(0,yt.jsx)("span",{children:"Report Issues"})]}),(0,yt.jsxs)("a",{href:"mailto:support@nest.dev",className:"support-link",children:[(0,yt.jsx)(pr,{size:16}),(0,yt.jsx)("span",{children:"Contact Support"})]})]})]}),(0,yt.jsxs)("div",{className:"credits",children:[(0,yt.jsx)("p",{children:"Built with ❤️ by the Nest team"}),(0,yt.jsx)("p",{children:"Powered by Supabase, React, and Chrome Extensions API"})]})]})]})]}),w&&(0,yt.jsx)("div",{className:"settings-message ".concat(w.includes("Failed")?"error":"success"),children:w}),(0,yt.jsx)("div",{className:"modal-footer",children:(0,yt.jsx)("button",{onClick:n,className:"modal-button secondary",children:"Close"})})]})})};var Nr=t(72),Pr=t.n(Nr),Or=t(206),zr=t.n(Or),Ir=t(659),Rr=t.n(Ir),Lr=t(56),Dr=t.n(Lr),Ur=t(159),$r=t.n(Ur),Mr=t(113),Fr=t.n(Mr),qr=t(182),Wr={};function Yr(e){return Yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yr(e)}function Vr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function Qr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Vr(Object(t),!0).forEach(function(n){Hr(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Vr(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function Hr(e,n,t){return(n=function(e){var n=function(e){if("object"!=Yr(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=Yr(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Yr(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Gr(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Kr(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,f={p:0,n:0,v:e,a:h,f:h.bind(e,4),d:function(n,t){return i=n,s=0,l=e,f.n=t,a}};function h(t,r){for(s=t,l=r,n=0;!d&&c&&!o&&n<u.length;n++){var o,i=u[n],h=f.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=e):i[0]<=h&&((o=t<2&&h<i[1])?(s=0,f.v=r,f.n=i[1]):h<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,f.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&h(u,p),s=u,l=p;(n=s<2?e:l)||!d;){i||(s?s<3?(s>1&&(f.n=-1),h(s,l)):f.n=l:f.v=l);try{if(c=2,i){if(s||(o="next"),n=i[o]){if(!(n=n.call(i,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=i.return)&&n.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=e}else if((n=(d=f.n<0)?l:t.call(r,f))!==a)break}catch(n){i=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(Kr(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function f(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Kr(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,Kr(d,"constructor",c),Kr(c,"constructor",l),l.displayName="GeneratorFunction",Kr(c,o,"GeneratorFunction"),Kr(d),Kr(d,o,"Generator"),Kr(d,r,function(){return this}),Kr(d,"toString",function(){return"[object Generator]"}),(Gr=function(){return{w:i,m:f}})()}function Kr(e,n,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}Kr=function(e,n,t,r){if(n)o?o(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var i=function(n,t){Kr(e,n,function(e){return this._invoke(n,t,e)})};i("next",0),i("throw",1),i("return",2)}},Kr(e,n,t,r)}function Zr(e,n,t,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,o)}function Jr(e){return function(){var n=this,t=arguments;return new Promise(function(r,o){var i=e.apply(n,t);function a(e){Zr(i,r,o,a,s,"next",e)}function s(e){Zr(i,r,o,a,s,"throw",e)}a(void 0)})}}function Xr(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return eo(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?eo(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eo(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}Wr.styleTagTransform=Fr(),Wr.setAttributes=Dr(),Wr.insert=Rr().bind(null,"head"),Wr.domAPI=zr(),Wr.insertStyleElement=$r(),Pr()(qr.A,Wr),qr.A&&qr.A.locals&&qr.A.locals;const no=function(){var e=Xr((0,r.useState)({links:[],collections:[],categories:[],settings:{defaultCategory:"general",autoSummarize:!0}}),2),n=e[0],t=e[1],o=Xr((0,r.useState)(""),2),i=o[0],a=o[1],m=Xr((0,r.useState)([]),2),b=m[0],y=m[1],v=Xr((0,r.useState)(!1),2),E=v[0],x=v[1],C=Xr((0,r.useState)(!1),2),w=C[0],k=C[1],B=Xr((0,r.useState)(null),2),S=B[0],_=B[1],j=Xr((0,r.useState)([]),2),T=j[0],N=j[1],P=Xr((0,r.useState)([]),2),O=P[0],z=P[1],I=Xr((0,r.useState)(!1),2),R=I[0],L=I[1],D=Xr((0,r.useState)({holdingArea:!0,collections:!0}),2),U=D[0],$=D[1],M=Xr((0,r.useState)(null),2),F=M[0],q=M[1],W=Xr((0,r.useState)(!1),2),Y=W[0],V=W[1],Q=Xr((0,r.useState)(!1),2),H=Q[0],G=Q[1],K=Xr((0,r.useState)(!1),2),Z=K[0],J=K[1],X=Xr((0,r.useState)(!0),2),ee=X[0],ne=X[1],te=Xr((0,r.useState)(null),2),re=te[0],oe=te[1],ie=Xr((0,r.useState)(""),2),ae=ie[0],se=ie[1],le=Xr((0,r.useState)(!1),2),ce=le[0],ue=le[1],de=Xr((0,r.useState)(""),2),fe=de[0],he=de[1];(0,r.useEffect)(function(){nt.auth.getSession().then(function(e){var n=e.data.session;oe(n),n&&(ge(),me())});var e=nt.auth.onAuthStateChange(function(e,n){console.log("Auth state changed:",e,n),oe(n),n&&(ge(),me())}),n=e.data.subscription;return function(){return n.unsubscribe()}},[]),(0,r.useEffect)(function(){ge()},[]);var pe,Ae,ge=function(){var e=Jr(Gr().m(function e(){var n,r;return Gr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.getData();case 1:n=e.v,t(n),e.n=3;break;case 2:e.p=2,r=e.v,console.error("Failed to load data:",r);case 3:return e.p=3,ne(!1),e.f(3);case 4:return e.a(2)}},e,null,[[0,2,3,4]])}));return function(){return e.apply(this,arguments)}}(),me=function(){var e=Jr(Gr().m(function e(){var n,t;return Gr().w(function(e){for(;;)switch(e.n){case 0:return L(!0),e.p=1,e.n=2,pt.getUserTags();case 2:n=e.v,z(n),e.n=4;break;case 3:e.p=3,t=e.v,console.error("Failed to load user tags:",t);case 4:return e.p=4,L(!1),e.f(4);case 5:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),be=function(){var e=Jr(Gr().m(function e(n){var t,r;return Gr().w(function(e){for(;;)switch(e.n){case 0:if(n!==S){e.n=1;break}return _(null),N([]),e.a(2);case 1:if(_(n),!n){e.n=6;break}return e.p=2,e.n=3,pt.getLinksByTag(n);case 3:t=e.v,N(t),e.n=5;break;case 4:e.p=4,r=e.v,console.error("Failed to load links by tag:",r),N([]);case 5:e.n=7;break;case 6:N([]);case 7:n&&w&&Ne();case 8:return e.a(2)}},e,null,[[2,4]])}));return function(n){return e.apply(this,arguments)}}(),ye=function(){me(),S&&be(S)},ve=function(e){$(function(n){return Qr(Qr({},n),{},Hr({},e,!n[e]))})},Ee=function(){var e=Jr(Gr().m(function e(){var n;return Gr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if(!e.v[0]){e.n=4;break}return e.n=2,chrome.runtime.sendMessage({action:"saveCurrentPage"});case 2:return e.n=3,ge();case 3:return e.n=4,me();case 4:e.n=6;break;case 5:e.p=5,n=e.v,console.error("Failed to save page:",n);case 6:return e.a(2)}},e,null,[[0,5]])}));return function(){return e.apply(this,arguments)}}(),xe=function(){var e=Jr(Gr().m(function e(n,t){var r;return Gr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.updateLink(n,t);case 1:return e.n=2,ge();case 2:e.n=4;break;case 3:e.p=3,r=e.v,console.error("Failed to update link:",r);case 4:return e.a(2)}},e,null,[[0,3]])}));return function(n,t){return e.apply(this,arguments)}}(),Ce=function(){var e=Jr(Gr().m(function e(n){var t;return Gr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.deleteLink(n);case 1:return e.n=2,ge();case 2:return e.n=3,me();case 3:S&&be(S),e.n=5;break;case 4:e.p=4,t=e.v,console.error("Failed to delete link:",t);case 5:return e.a(2)}},e,null,[[0,4]])}));return function(n){return e.apply(this,arguments)}}(),we=function(){var e=Jr(Gr().m(function e(n,t){var r;return Gr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pt.updateLink(n,{collectionId:t});case 1:return e.n=2,ge();case 2:e.n=4;break;case 3:e.p=3,r=e.v,console.error("Failed to move link:",r);case 4:return e.a(2)}},e,null,[[0,3]])}));return function(n,t){return e.apply(this,arguments)}}(),ke=function(e){q(e),V(!0)},Be=function(){var e=Jr(Gr().m(function e(n){return Gr().w(function(e){for(;;)switch(e.n){case 0:if(!F){e.n=1;break}return e.n=1,xe(F.id,{userNote:n});case 1:V(!1),q(null);case 2:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}(),Se=function(){var e=Jr(Gr().m(function e(n,t){var r,o;return Gr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,r={id:Date.now().toString(),name:n,description:t,createdAt:new Date,updatedAt:new Date},e.n=1,pt.addCollection(r);case 1:return e.n=2,ge();case 2:e.n=4;break;case 3:e.p=3,o=e.v,console.error("Failed to create collection:",o);case 4:G(!1);case 5:return e.a(2)}},e,null,[[0,3]])}));return function(n,t){return e.apply(this,arguments)}}(),_e=function(){var e=Jr(Gr().m(function e(n){var t,r,o;return Gr().w(function(e){for(;;)switch(e.n){case 0:return n.preventDefault(),ue(!0),he(""),t=chrome.runtime.getURL("auth.html"),console.log("Redirecting to:",t),e.n=1,nt.auth.signInWithOtp({email:ae,options:{emailRedirectTo:t}});case 1:r=e.v,o=r.error,he(o?o.message:"Check your email for the login link!"),ue(!1);case 2:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}(),je=function(){var e=Jr(Gr().m(function e(){return Gr().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,nt.auth.signOut();case 1:return e.a(2)}},e)}));return function(){return e.apply(this,arguments)}}(),Te=(0,r.useCallback)((pe=function(){var e=Jr(Gr().m(function e(n){var t,r;return Gr().w(function(e){for(;;)switch(e.n){case 0:if(n.trim()){e.n=1;break}return y([]),k(!1),x(!1),e.a(2);case 1:return x(!0),e.p=2,e.n=3,pt.searchLinks(n);case 3:t=e.v,y(t),k(!0),S&&(_(null),N([])),e.n=5;break;case 4:e.p=4,r=e.v,console.error("Search failed:",r),y([]);case 5:return e.p=5,x(!1),e.f(5);case 6:return e.a(2)}},e,null,[[2,4,5,6]])}));return function(n){return e.apply(this,arguments)}}(),function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];clearTimeout(Ae),Ae=setTimeout(function(){return pe.apply(void 0,n)},300)}),[S]),Ne=function(){a(""),y([]),k(!1),x(!1)},Pe=function(){Ne(),_(null),N([])},Oe=w||S?[]:n.links,ze=Oe.filter(function(e){return!e.collectionId});return re?ee?(0,yt.jsx)("div",{className:"sidepanel loading",children:(0,yt.jsx)("div",{className:"loading-spinner",children:"Loading..."})}):(0,yt.jsxs)("div",{className:"sidepanel",children:[(0,yt.jsxs)("div",{className:"header",children:[(0,yt.jsxs)("div",{className:"header-title",children:[(0,yt.jsx)(s,{className:"header-icon"}),(0,yt.jsx)("h1",{children:"Nest"})]}),(0,yt.jsxs)("div",{className:"header-actions",children:[(0,yt.jsx)("button",{onClick:Ee,className:"save-button",title:"Save current page",children:(0,yt.jsx)(l,{size:18})}),(0,yt.jsx)("button",{onClick:je,className:"logout-button",title:"Logout",children:(0,yt.jsx)(c,{size:18})})]})]}),(0,yt.jsxs)("div",{className:"search-container",children:[(0,yt.jsx)(u,{className:"search-icon",size:16}),(0,yt.jsx)("input",{type:"text",placeholder:"Search your links...",value:i,onChange:function(e){var n=e.target.value;a(n),Te(n)},className:"search-input"}),i&&(0,yt.jsx)("button",{onClick:Ne,className:"search-clear",title:"Clear search",children:(0,yt.jsx)(d,{size:16})}),E&&(0,yt.jsx)("div",{className:"search-spinner",children:"⟳"})]}),O.length>0&&(0,yt.jsx)(cr,{tags:O,selectedTag:S,onTagSelect:be,loading:R}),(0,yt.jsx)("div",{className:"content",children:w?(0,yt.jsxs)("div",{className:"search-results",children:[(0,yt.jsxs)("div",{className:"search-results-header",children:[(0,yt.jsxs)("h3",{children:["Search Results (",b.length,")"]}),(0,yt.jsx)("button",{onClick:Pe,className:"clear-search-btn",children:"Show All Links"})]}),0!==b.length||E?b.map(function(e){return(0,yt.jsx)(rr,{link:e,collections:n.collections,onUpdate:xe,onDelete:Ce,onMoveToCollection:we,onAddNote:ke,onTagsUpdated:ye},e.id)}):(0,yt.jsx)("div",{className:"no-results",children:(0,yt.jsxs)("p",{children:['No links found for "',i,'"']})})]}):S?(0,yt.jsxs)("div",{className:"tag-results",children:[(0,yt.jsxs)("div",{className:"tag-results-header",children:[(0,yt.jsxs)("h3",{children:[(0,yt.jsx)(f,{size:16}),'Tagged with "',S,'" (',T.length,")"]}),(0,yt.jsx)("button",{onClick:Pe,className:"clear-search-btn",children:"Show All Links"})]}),0===T.length?(0,yt.jsx)("div",{className:"no-results",children:(0,yt.jsxs)("p",{children:['No links found with tag "',S,'"']})}):T.map(function(e){return(0,yt.jsx)(It,{link:e,collections:n.collections,onUpdate:xe,onDelete:Ce,onMoveToCollection:we,onAddNote:ke,onTagsUpdated:ye},e.id)})]}):(0,yt.jsxs)(yt.Fragment,{children:[(0,yt.jsxs)("div",{className:"section",children:[(0,yt.jsxs)("button",{onClick:function(){return ve("holdingArea")},className:"section-header",children:[U.holdingArea?(0,yt.jsx)(h,{size:16}):(0,yt.jsx)(p,{size:16}),(0,yt.jsx)("span",{children:"Holding Area"}),(0,yt.jsx)("span",{className:"count",children:ze.length})]}),U.holdingArea&&(0,yt.jsx)("div",{className:"section-content",children:0===ze.length?(0,yt.jsxs)("div",{className:"empty-state",children:[(0,yt.jsx)("p",{children:"No links saved yet"}),(0,yt.jsx)("button",{onClick:Ee,className:"empty-action",children:"Save current page"})]}):ze.map(function(e){return(0,yt.jsx)(It,{link:e,collections:n.collections,onUpdate:xe,onDelete:Ce,onMoveToCollection:we,onAddNote:ke,onTagsUpdated:ye},e.id)})})]}),(0,yt.jsxs)("div",{className:"section",children:[(0,yt.jsxs)("button",{onClick:function(){return ve("collections")},className:"section-header",children:[U.collections?(0,yt.jsx)(h,{size:16}):(0,yt.jsx)(p,{size:16}),(0,yt.jsx)("span",{children:"Collections"}),(0,yt.jsx)("span",{className:"count",children:n.collections.length}),(0,yt.jsx)("button",{onClick:function(e){e.stopPropagation(),G(!0)},className:"add-collection-button",title:"Create new collection",children:(0,yt.jsx)(A,{size:14})})]}),U.collections&&(0,yt.jsx)("div",{className:"section-content",children:0===n.collections.length?(0,yt.jsxs)("div",{className:"empty-state",children:[(0,yt.jsx)("p",{children:"No collections yet"}),(0,yt.jsx)("button",{onClick:function(){return G(!0)},className:"empty-action",children:"Create collection"})]}):n.collections.map(function(e){var n,t=(n=e.id,Oe.filter(function(e){return e.collectionId===n}));return(0,yt.jsx)(tr,{collection:e,links:t,onUpdateLink:xe,onDeleteLink:Ce,onAddNote:ke,onTagsUpdated:ye,onUpdate:ge},e.id)})})]})]})}),(0,yt.jsxs)("div",{className:"footer",children:[(0,yt.jsx)("button",{onClick:function(){return J(!0)},className:"footer-button",title:"Settings",children:(0,yt.jsx)(g,{size:16})}),(0,yt.jsxs)("span",{className:"footer-text",children:[n.links.length," links • ",O.length," tags"]})]}),Y&&F&&(0,yt.jsx)(ir,{link:F,onSave:Be,onClose:function(){V(!1),q(null)}}),H&&(0,yt.jsx)(lr,{onSave:Se,onClose:function(){return G(!1)}}),Z&&(0,yt.jsx)(Tr,{onClose:function(){return J(!1)}})]}):(0,yt.jsxs)("div",{className:"sidepanel auth-container",children:[(0,yt.jsx)("div",{className:"header",children:(0,yt.jsxs)("div",{className:"header-title",children:[(0,yt.jsx)(s,{className:"header-icon"}),(0,yt.jsx)("h1",{children:"Nest"})]})}),(0,yt.jsxs)("div",{className:"auth-form",children:[(0,yt.jsx)("h2",{children:"Sign In"}),(0,yt.jsx)("p",{children:"Enter your email to receive a magic login link."}),(0,yt.jsxs)("form",{onSubmit:_e,children:[(0,yt.jsx)("input",{type:"email",placeholder:"Your email",value:ae,onChange:function(e){return se(e.target.value)},className:"auth-input"}),(0,yt.jsx)("button",{type:"submit",className:"auth-button",disabled:ce,children:ce?"Sending...":"Send Magic Link"})]}),fe&&(0,yt.jsx)("p",{className:"auth-message",children:fe})]})]})};var to=document.getElementById("root");(0,o.H)(to).render((0,yt.jsx)(no,{}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,