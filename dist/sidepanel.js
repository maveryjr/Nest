/*! For license information please see sidepanel.js.LICENSE.txt */
(()=>{"use strict";var e={20:(e,n,t)=>{var r=t(540),a=Symbol.for("react.element"),o=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var r,o={},c=null,u=null;for(r in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(u=n.ref),n)i.call(n,r)&&!l.hasOwnProperty(r)&&(o[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===o[r]&&(o[r]=n[r]);return{$$typeof:a,type:e,key:c,ref:u,props:o,_owner:s.current}}n.Fragment=o,n.jsx=c,n.jsxs=c},45:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const a=r(t(825));n.default=class{constructor(e,{headers:n={},schema:t,fetch:r}){this.url=e,this.headers=n,this.schema=t,this.fetch=r}select(e,{head:n=!1,count:t}={}){const r=n?"HEAD":"GET";let o=!1;const i=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!o?"":('"'===e&&(o=!o),e)).join("");return this.url.searchParams.set("select",i),t&&(this.headers.Prefer=`count=${t}`),new a.default({method:r,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(e,{count:n,defaultToNull:t=!0}={}){const r=[];if(this.headers.Prefer&&r.push(this.headers.Prefer),n&&r.push(`count=${n}`),t||r.push("missing=default"),this.headers.Prefer=r.join(","),Array.isArray(e)){const n=e.reduce((e,n)=>e.concat(Object.keys(n)),[]);if(n.length>0){const e=[...new Set(n)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new a.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}upsert(e,{onConflict:n,ignoreDuplicates:t=!1,count:r,defaultToNull:o=!0}={}){const i=[`resolution=${t?"ignore":"merge"}-duplicates`];if(void 0!==n&&this.url.searchParams.set("on_conflict",n),this.headers.Prefer&&i.push(this.headers.Prefer),r&&i.push(`count=${r}`),o||i.push("missing=default"),this.headers.Prefer=i.join(","),Array.isArray(e)){const n=e.reduce((e,n)=>e.concat(Object.keys(n)),[]);if(n.length>0){const e=[...new Set(n)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new a.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}update(e,{count:n}={}){const t=[];return this.headers.Prefer&&t.push(this.headers.Prefer),n&&t.push(`count=${n}`),this.headers.Prefer=t.join(","),new a.default({method:"PATCH",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}delete({count:e}={}){const n=[];return e&&n.push(`count=${e}`),this.headers.Prefer&&n.unshift(this.headers.Prefer),this.headers.Prefer=n.join(","),new a.default({method:"DELETE",url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=o[c]||0,d="".concat(c," ").concat(u);o[c]=u+1;var h=t(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)n[h].references++,n[h].updater(f);else{var p=a(f,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var l=r(e,a),c=0;c<o.length;c++){var u=t(o[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}o=l}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},159:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},182:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([e.id,"/* Modern Reset and Base Styles */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  /* Color System */\n  --color-primary: #2563eb;\n  --color-primary-light: #3b82f6;\n  --color-primary-dark: #1d4ed8;\n  --color-success: #10b981;\n  --color-warning: #f59e0b;\n  --color-danger: #ef4444;\n  \n  /* Neutral Colors */\n  --color-white: #ffffff;\n  --color-gray-50: #f9fafb;\n  --color-gray-100: #f3f4f6;\n  --color-gray-200: #e5e7eb;\n  --color-gray-300: #d1d5db;\n  --color-gray-400: #9ca3af;\n  --color-gray-500: #6b7280;\n  --color-gray-600: #4b5563;\n  --color-gray-700: #374151;\n  --color-gray-800: #1f2937;\n  --color-gray-900: #111827;\n  \n  /* Spacing System */\n  --space-1: 0.25rem;\n  --space-2: 0.5rem;\n  --space-3: 0.75rem;\n  --space-4: 1rem;\n  --space-5: 1.25rem;\n  --space-6: 1.5rem;\n  --space-8: 2rem;\n  --space-10: 2.5rem;\n  --space-12: 3rem;\n  \n  /* Typography */\n  --font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Inter, \"Helvetica Neue\", Arial, sans-serif;\n  --font-size-xs: 0.75rem;\n  --font-size-sm: 0.875rem;\n  --font-size-base: 1rem;\n  --font-size-lg: 1.125rem;\n  --font-size-xl: 1.25rem;\n  --font-size-2xl: 1.5rem;\n  --font-size-3xl: 1.875rem;\n  \n  /* Border Radius */\n  --radius-sm: 0.375rem;\n  --radius-md: 0.5rem;\n  --radius-lg: 0.75rem;\n  --radius-xl: 1rem;\n  \n  /* Shadows */\n  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  \n  /* Transitions */\n  --transition-fast: 150ms ease-in-out;\n  --transition-base: 250ms ease-in-out;\n  --transition-slow: 350ms ease-in-out;\n}\n\nbody {\n  font-family: var(--font-family);\n  font-size: var(--font-size-base);\n  line-height: 1.5;\n  color: var(--color-gray-700);\n  background-color: var(--color-gray-50);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/* Main Sidepanel Layout */\n.sidepanel {\n  width: 100%;\n  height: 100vh;\n  background: var(--color-white);\n  display: flex;\n  flex-direction: column;\n  font-family: var(--font-family);\n  overflow: hidden;\n  position: relative;\n}\n\n/* Modern Header Design */\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--space-4) var(--space-6);\n  background: linear-gradient(135deg, var(--color-white) 0%, var(--color-gray-50) 100%);\n  border-bottom: 1px solid var(--color-gray-200);\n  position: sticky;\n  top: 0;\n  z-index: 50;\n  -webkit-backdrop-filter: blur(10px);\n  backdrop-filter: blur(10px);\n}\n\n.header-title {\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n}\n\n.header-title h1 {\n  font-size: var(--font-size-2xl);\n  font-weight: 700;\n  color: var(--color-gray-900);\n  letter-spacing: -0.025em;\n}\n\n.header-icon {\n  color: var(--color-primary);\n  width: 24px;\n  height: 24px;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n}\n\n.save-button,\n.tab-sync-button,\n.logout-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  border: none;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  transition: all var(--transition-fast);\n  position: relative;\n}\n\n.save-button {\n  background: var(--color-primary);\n  color: var(--color-white);\n  box-shadow: var(--shadow-sm);\n}\n\n.save-button:hover {\n  background: var(--color-primary-dark);\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-md);\n}\n\n.tab-sync-button,\n.logout-button {\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.tab-sync-button:hover,\n.logout-button:hover {\n  background: var(--color-gray-200);\n  color: var(--color-gray-700);\n  transform: translateY(-1px);\n}\n\n/* Enhanced Search Design */\n.search-container {\n  position: relative;\n  padding: var(--space-4) var(--space-6);\n  background: var(--color-white);\n  border-bottom: 1px solid var(--color-gray-200);\n}\n\n.search-container::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: var(--space-6);\n  right: var(--space-6);\n  height: 1px;\n  background: linear-gradient(90deg, transparent, var(--color-gray-300), transparent);\n}\n\n.search-input-wrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.search-icon {\n  position: absolute;\n  left: var(--space-4);\n  color: var(--color-gray-400);\n  pointer-events: none;\n  z-index: 10;\n}\n\n.search-input {\n  width: 100%;\n  height: 48px;\n  padding: 0 var(--space-3) 0 44px;\n  border: 2px solid var(--color-gray-200);\n  border-radius: var(--radius-xl);\n  font-size: var(--font-size-base);\n  background: var(--color-gray-50);\n  transition: all var(--transition-base);\n  outline: none;\n}\n\n.search-input:focus {\n  border-color: var(--color-primary);\n  background: var(--color-white);\n  box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1);\n}\n\n.search-input::placeholder {\n  color: var(--color-gray-400);\n}\n\n.search-clear,\n.search-power-mode {\n  position: absolute;\n  right: var(--space-3);\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  padding: var(--space-2);\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n}\n\n.search-clear:hover,\n.search-power-mode:hover {\n  color: var(--color-gray-600);\n  background: var(--color-gray-100);\n}\n\n.search-spinner {\n  position: absolute;\n  right: var(--space-4);\n  color: var(--color-primary);\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n/* Content Area */\n.content {\n  flex: 1;\n  overflow-y: auto;\n  padding: 0 var(--space-6) var(--space-6);\n  scroll-behavior: smooth;\n}\n\n.content::-webkit-scrollbar {\n  width: 6px;\n}\n\n.content::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.content::-webkit-scrollbar-thumb {\n  background: var(--color-gray-300);\n  border-radius: 3px;\n}\n\n.content::-webkit-scrollbar-thumb:hover {\n  background: var(--color-gray-400);\n}\n\n/* Section Headers */\n.section {\n  margin-bottom: var(--space-8);\n}\n\n.section-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  padding: var(--space-4) 0;\n  background: none;\n  border: none;\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  color: var(--color-gray-900);\n  cursor: pointer;\n  text-align: left;\n  transition: color var(--transition-fast);\n  position: relative;\n}\n\n.section-header:hover {\n  color: var(--color-primary);\n}\n\n.section-header .count {\n  margin-left: auto;\n  background: var(--color-primary);\n  color: var(--color-white);\n  font-size: var(--font-size-xs);\n  font-weight: 600;\n  padding: var(--space-1) var(--space-3);\n  border-radius: var(--radius-xl);\n  min-width: 24px;\n  text-align: center;\n}\n\n.add-collection-button {\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  padding: var(--space-2);\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n}\n\n.add-collection-button:hover {\n  color: var(--color-primary);\n  background: var(--color-gray-100);\n  transform: scale(1.1);\n}\n\n.section-content {\n  margin-top: var(--space-2);\n}\n\n/* Modern Card Design Foundation */\n.card-base {\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  padding: var(--space-5);\n  margin-bottom: var(--space-4);\n  transition: all var(--transition-base);\n  position: relative;\n  overflow: hidden;\n}\n\n.card-base:hover {\n  border-color: var(--color-gray-300);\n  box-shadow: var(--shadow-md);\n  transform: translateY(-2px);\n}\n\n.card-base::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 3px;\n  background: linear-gradient(90deg, var(--color-primary), var(--color-primary-light));\n  opacity: 0;\n  transition: opacity var(--transition-base);\n}\n\n.card-base:hover::before {\n  opacity: 1;\n}\n\n/* Enhanced Favicon System */\n.favicon-container {\n  position: relative;\n  width: 40px;\n  height: 40px;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n  background: var(--color-gray-100);\n  border: 1px solid var(--color-gray-200);\n}\n\n.favicon-container img {\n  width: 24px;\n  height: 24px;\n  object-fit: contain;\n  transition: transform var(--transition-fast);\n}\n\n.favicon-container:hover img {\n  transform: scale(1.1);\n}\n\n.favicon-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-sm);\n  font-weight: 600;\n  color: var(--color-white);\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n  background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n}\n\n/* Domain Color System */\n.domain-github { background: linear-gradient(135deg, #24292e, #586069); }\n.domain-stackoverflow { background: linear-gradient(135deg, #f48024, #fe7a15); }\n.domain-medium { background: linear-gradient(135deg, #00ab6c, #00d084); }\n.domain-youtube { background: linear-gradient(135deg, #ff0000, #cc0000); }\n.domain-twitter { background: linear-gradient(135deg, #1da1f2, #0d8bd9); }\n.domain-linkedin { background: linear-gradient(135deg, #0077b5, #005885); }\n.domain-reddit { background: linear-gradient(135deg, #ff4500, #ff6500); }\n.domain-dev { background: linear-gradient(135deg, #0a0a0a, #2d2d2d); }\n\n/* Typography Improvements */\n.link-title,\n.inbox-card-title {\n  font-size: var(--font-size-base);\n  font-weight: 600;\n  color: var(--color-gray-900);\n  line-height: 1.4;\n  margin-bottom: var(--space-1);\n  cursor: pointer;\n  transition: color var(--transition-fast);\n  text-decoration: none;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.link-title:hover,\n.inbox-card-title:hover {\n  color: var(--color-primary);\n}\n\n.link-meta,\n.inbox-card-meta {\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-500);\n  margin-bottom: var(--space-3);\n}\n\n.link-domain {\n  font-weight: 500;\n  color: var(--color-gray-600);\n}\n\n.link-date::before {\n  content: '•';\n  margin: 0 var(--space-1);\n  color: var(--color-gray-400);\n}\n\n/* Action Buttons */\n.action-button {\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  padding: var(--space-2);\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.action-button:hover {\n  color: var(--color-gray-600);\n  background: var(--color-gray-100);\n  transform: scale(1.1);\n}\n\n/* Enhanced Dropdown */\n.dropdown {\n  position: relative;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-xl);\n  z-index: 50;\n  min-width: 200px;\n  padding: var(--space-2);\n  margin-top: var(--space-1);\n  -webkit-backdrop-filter: blur(10px);\n  backdrop-filter: blur(10px);\n}\n\n.dropdown-menu button {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: var(--space-3) var(--space-4);\n  text-align: left;\n  cursor: pointer;\n  border-radius: var(--radius-md);\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  color: var(--color-gray-700);\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  transition: all var(--transition-fast);\n}\n\n.dropdown-menu button:hover {\n  background: var(--color-gray-50);\n  color: var(--color-gray-900);\n}\n\n.dropdown-menu button.delete-action {\n  color: var(--color-danger);\n}\n\n.dropdown-menu button.delete-action:hover {\n  background: rgba(239, 68, 68, 0.1);\n  color: var(--color-danger);\n}\n\n/* Loading States */\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: var(--space-12);\n  color: var(--color-gray-500);\n}\n\n.loading-spinner {\n  font-size: var(--font-size-sm);\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n}\n\n.loading-spinner::before {\n  content: '';\n  width: 16px;\n  height: 16px;\n  border: 2px solid var(--color-gray-300);\n  border-top: 2px solid var(--color-primary);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n/* Empty States */\n.empty-state {\n  text-align: center;\n  padding: var(--space-12) var(--space-4);\n  color: var(--color-gray-500);\n}\n\n.empty-state svg {\n  width: 48px;\n  height: 48px;\n  color: var(--color-gray-300);\n  margin-bottom: var(--space-4);\n}\n\n.empty-state h3 {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  color: var(--color-gray-700);\n  margin-bottom: var(--space-2);\n}\n\n.empty-state p {\n  font-size: var(--font-size-sm);\n  line-height: 1.6;\n  margin-bottom: var(--space-6);\n}\n\n.empty-action {\n  background: var(--color-primary);\n  color: var(--color-white);\n  border: none;\n  border-radius: var(--radius-lg);\n  padding: var(--space-3) var(--space-6);\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  cursor: pointer;\n  transition: all var(--transition-fast);\n}\n\n.empty-action:hover {\n  background: var(--color-primary-dark);\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-md);\n}\n\n/* ==========================================================================\n   MODERN CARD SYSTEM - COMPLETE REDESIGN\n   ========================================================================== */\n\n/* ===== INBOX CARD STYLES ===== */\n.inbox-card {\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-xl);\n  margin-bottom: var(--space-4);\n  overflow: hidden;\n  transition: all var(--transition-base);\n  position: relative;\n  box-shadow: var(--shadow-sm);\n}\n\n.inbox-card:hover {\n  border-color: var(--color-primary);\n  box-shadow: var(--shadow-lg);\n  transform: translateY(-1px);\n}\n\n.inbox-card.selected {\n  border-color: var(--color-primary);\n  background: rgba(37, 99, 235, 0.02);\n  box-shadow: 0 0 0 1px rgba(37, 99, 235, 0.1);\n}\n\n.inbox-card-content {\n  padding: var(--space-5);\n}\n\n.inbox-card-header {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--space-4);\n  margin-bottom: var(--space-4);\n}\n\n.inbox-card-checkbox {\n  margin-top: var(--space-1);\n}\n\n.inbox-card-checkbox input[type=\"checkbox\"] {\n  width: 16px;\n  height: 16px;\n  border: 2px solid var(--color-gray-300);\n  border-radius: var(--radius-sm);\n  background: var(--color-white);\n  cursor: pointer;\n  position: relative;\n  appearance: none;\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-checkbox input[type=\"checkbox\"]:checked {\n  background: var(--color-primary);\n  border-color: var(--color-primary);\n}\n\n.inbox-card-checkbox input[type=\"checkbox\"]:checked::after {\n  content: '✓';\n  position: absolute;\n  top: -1px;\n  left: 2px;\n  color: var(--color-white);\n  font-size: 10px;\n  font-weight: 600;\n}\n\n/* ENHANCED FAVICON SYSTEM */\n.inbox-card-favicon {\n  width: 48px;\n  height: 48px;\n  flex-shrink: 0;\n  position: relative;\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n  background: var(--color-gray-100);\n  border: 1px solid var(--color-gray-200);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-favicon:hover {\n  transform: scale(1.05);\n  border-color: var(--color-gray-300);\n}\n\n.inbox-card-favicon img {\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n  border-radius: var(--radius-sm);\n}\n\n.inbox-card-favicon .favicon-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-lg);\n  font-weight: 700;\n  color: var(--color-white);\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n  background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n}\n\n.inbox-card-title-section {\n  flex: 1;\n  min-width: 0;\n}\n\n.inbox-card-title {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  color: var(--color-gray-900);\n  line-height: 1.4;\n  margin-bottom: var(--space-2);\n  cursor: pointer;\n  transition: color var(--transition-fast);\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-decoration: none;\n}\n\n.inbox-card-title:hover {\n  color: var(--color-primary);\n}\n\n.inbox-card-domain {\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-500);\n  font-weight: 500;\n}\n\n.inbox-card-actions {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--space-2);\n  margin-top: var(--space-1);\n}\n\n.inbox-card-link,\n.inbox-card-menu-button {\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n  cursor: pointer;\n  text-decoration: none;\n}\n\n.inbox-card-link {\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.inbox-card-link:hover {\n  background: var(--color-primary);\n  color: var(--color-white);\n  transform: translateY(-1px);\n}\n\n.inbox-card-menu-button {\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.inbox-card-menu-button:hover {\n  background: var(--color-gray-200);\n  color: var(--color-gray-700);\n}\n\n.inbox-card-menu-container {\n  position: relative;\n}\n\n.inbox-card-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-xl);\n  z-index: 50;\n  min-width: 200px;\n  padding: var(--space-2);\n  margin-top: var(--space-1);\n  -webkit-backdrop-filter: blur(10px);\n  backdrop-filter: blur(10px);\n}\n\n.inbox-card-menu-item {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: var(--space-3) var(--space-4);\n  text-align: left;\n  cursor: pointer;\n  border-radius: var(--radius-md);\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  color: var(--color-gray-700);\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-menu-item:hover {\n  background: var(--color-gray-50);\n  color: var(--color-gray-900);\n}\n\n.inbox-card-menu-item:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.inbox-card-menu-item.delete {\n  color: var(--color-danger);\n}\n\n.inbox-card-menu-item.delete:hover {\n  background: rgba(239, 68, 68, 0.1);\n  color: var(--color-danger);\n}\n\n/* SUBMENU STYLES */\n.inbox-card-submenu {\n  position: absolute;\n  left: 100%;\n  top: 0;\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-xl);\n  min-width: 180px;\n  padding: var(--space-2);\n  margin-left: var(--space-1);\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.inbox-card-submenu-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--space-2) var(--space-3);\n  font-size: var(--font-size-xs);\n  font-weight: 600;\n  color: var(--color-gray-500);\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  border-bottom: 1px solid var(--color-gray-200);\n  margin-bottom: var(--space-1);\n}\n\n.inbox-card-submenu-close {\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  padding: 2px;\n  border-radius: 2px;\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-submenu-close:hover {\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.inbox-card-submenu-item {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: var(--space-2) var(--space-3);\n  text-align: left;\n  cursor: pointer;\n  border-radius: var(--radius-sm);\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-700);\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-submenu-item:hover {\n  background: var(--color-gray-50);\n  color: var(--color-gray-900);\n}\n\n.inbox-card-submenu-empty {\n  padding: var(--space-3);\n  text-align: center;\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-500);\n  font-style: italic;\n}\n\n/* CONTENT SECTIONS */\n.inbox-card-summary,\n.inbox-card-note {\n  margin-top: var(--space-4);\n  padding: var(--space-3);\n  background: var(--color-gray-50);\n  border-radius: var(--radius-md);\n  border-left: 3px solid var(--color-primary);\n}\n\n.inbox-card-summary p,\n.inbox-card-note p {\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-600);\n  line-height: 1.5;\n  margin: 0;\n}\n\n.inbox-card-highlights {\n  margin-top: var(--space-4);\n  border-top: 1px solid var(--color-gray-200);\n  padding-top: var(--space-4);\n}\n\n.highlights-toggle {\n  background: none;\n  border: none;\n  color: var(--color-primary);\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n  transition: all var(--transition-fast);\n  padding: var(--space-1) 0;\n}\n\n.highlights-toggle:hover {\n  color: var(--color-primary-dark);\n}\n\n.highlights-chevron {\n  transition: transform var(--transition-fast);\n  font-size: 10px;\n}\n\n.highlights-chevron.expanded {\n  transform: rotate(180deg);\n}\n\n/* ===== LINK CARD STYLES ===== */\n.link-card {\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-xl);\n  padding: var(--space-5);\n  margin-bottom: var(--space-4);\n  transition: all var(--transition-base);\n  position: relative;\n  overflow: hidden;\n  box-shadow: var(--shadow-sm);\n}\n\n.link-card:hover {\n  border-color: var(--color-primary);\n  box-shadow: var(--shadow-lg);\n  transform: translateY(-1px);\n}\n\n.link-header {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--space-4);\n  margin-bottom: var(--space-4);\n}\n\n.link-favicon {\n  width: 48px;\n  height: 48px;\n  flex-shrink: 0;\n  position: relative;\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n  background: var(--color-gray-100);\n  border: 1px solid var(--color-gray-200);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all var(--transition-fast);\n}\n\n.link-favicon:hover {\n  transform: scale(1.05);\n  border-color: var(--color-gray-300);\n}\n\n.link-favicon img {\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n  border-radius: var(--radius-sm);\n}\n\n.link-favicon .favicon-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-lg);\n  font-weight: 700;\n  color: var(--color-white);\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n  background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n}\n\n.link-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-title {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  color: var(--color-gray-900);\n  line-height: 1.4;\n  margin-bottom: var(--space-2);\n  cursor: pointer;\n  transition: color var(--transition-fast);\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-decoration: none;\n}\n\n.link-title:hover {\n  color: var(--color-primary);\n}\n\n.link-meta {\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-500);\n}\n\n.link-domain {\n  font-weight: 500;\n  color: var(--color-gray-600);\n}\n\n.link-date::before {\n  content: '•';\n  margin: 0 var(--space-1);\n  color: var(--color-gray-400);\n}\n\n.link-actions {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--space-2);\n}\n\n.link-actions .action-button {\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n  cursor: pointer;\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.link-actions .action-button:hover {\n  background: var(--color-primary);\n  color: var(--color-white);\n  transform: translateY(-1px);\n}\n\n/* TAG STYLES */\n.link-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--space-2);\n  margin-top: var(--space-3);\n}\n\n.link-tag {\n  background: var(--color-primary);\n  color: var(--color-white);\n  font-size: var(--font-size-xs);\n  font-weight: 500;\n  padding: var(--space-1) var(--space-3);\n  border-radius: var(--radius-xl);\n  cursor: pointer;\n  transition: all var(--transition-fast);\n}\n\n.link-tag:hover {\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-sm);\n}\n\n/* CATEGORY BADGE */\n.link-category {\n  margin-top: var(--space-3);\n}\n\n.category-badge {\n  background: var(--color-gray-600);\n  color: var(--color-white);\n  font-size: var(--font-size-xs);\n  font-weight: 500;\n  padding: var(--space-1) var(--space-3);\n  border-radius: var(--radius-xl);\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n}\n\n/* NOTES AND SUMMARIES */\n.link-note,\n.link-summary {\n  margin-top: var(--space-4);\n  padding: var(--space-3);\n  background: var(--color-gray-50);\n  border-radius: var(--radius-md);\n  border-left: 3px solid var(--color-primary);\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-600);\n  line-height: 1.5;\n}\n\n.link-note strong,\n.link-summary strong {\n  color: var(--color-gray-800);\n  font-weight: 600;\n}\n\n/* HIGHLIGHTS SECTION */\n.link-highlights-section {\n  margin-top: var(--space-4);\n  border-top: 1px solid var(--color-gray-200);\n  padding-top: var(--space-4);\n}\n\n.highlights-header {\n  margin-bottom: var(--space-3);\n}\n\n.highlights-toggle {\n  background: none;\n  border: none;\n  color: var(--color-primary);\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n  transition: all var(--transition-fast);\n  padding: var(--space-1) 0;\n}\n\n.highlights-toggle:hover {\n  color: var(--color-primary-dark);\n}\n\n.highlights-chevron {\n  transition: transform var(--transition-fast);\n}\n\n.highlights-chevron.expanded {\n  transform: rotate(180deg);\n}\n\n.highlights-list {\n  display: flex;\n  flex-direction: column;\n  gap: var(--space-3);\n}\n\n/* TAG EDITOR */\n.tag-editor {\n  margin-top: var(--space-4);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n}\n\n.tag-editor-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--space-3) var(--space-4);\n  background: var(--color-gray-50);\n  border-bottom: 1px solid var(--color-gray-200);\n  font-size: var(--font-size-sm);\n  font-weight: 600;\n  color: var(--color-gray-700);\n}\n\n.tag-editor-close {\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  font-size: var(--font-size-lg);\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: var(--radius-sm);\n  transition: all var(--transition-fast);\n}\n\n.tag-editor-close:hover {\n  background: var(--color-gray-200);\n  color: var(--color-gray-600);\n}\n\n.tag-editor-loading {\n  padding: var(--space-4);\n  text-align: center;\n  color: var(--color-gray-500);\n  font-size: var(--font-size-sm);\n}\n\n/* COLLECTIONS MENU */\n.collections-menu {\n  margin-top: var(--space-4);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n  background: var(--color-white);\n}\n\n.collections-header {\n  padding: var(--space-3) var(--space-4);\n  background: var(--color-gray-50);\n  border-bottom: 1px solid var(--color-gray-200);\n  font-size: var(--font-size-sm);\n  font-weight: 600;\n  color: var(--color-gray-700);\n}\n\n.collection-option {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: var(--space-3) var(--space-4);\n  text-align: left;\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-700);\n  transition: background-color var(--transition-fast);\n  border-bottom: 1px solid var(--color-gray-100);\n}\n\n.collection-option:last-child {\n  border-bottom: none;\n}\n\n.collection-option:hover {\n  background: var(--color-gray-50);\n}\n\n/* Responsive Design */\n@media (max-width: 480px) {\n  :root {\n    --space-6: 1rem;\n    --font-size-base: 0.875rem;\n    --font-size-lg: 1rem;\n    --font-size-xl: 1.125rem;\n    --font-size-2xl: 1.25rem;\n  }\n  \n  .header {\n    padding: var(--space-3) var(--space-4);\n  }\n  \n  .search-container {\n    padding: var(--space-3) var(--space-4);\n  }\n  \n  .content {\n    padding: 0 var(--space-4) var(--space-4);\n  }\n  \n  .inbox-card-content,\n  .link-card {\n    padding: var(--space-4);\n  }\n  \n  .inbox-card-favicon,\n  .link-favicon {\n    width: 40px;\n    height: 40px;\n  }\n  \n  .inbox-card-favicon img,\n  .link-favicon img {\n    width: 24px;\n    height: 24px;\n  }\n  \n  .inbox-card-header,\n  .link-header {\n    gap: var(--space-3);\n  }\n}\n\n ","",{version:3,sources:["webpack://./src/sidepanel/sidepanel.css"],names:[],mappings:"AAAA,iCAAiC;AACjC;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,iBAAiB;EACjB,wBAAwB;EACxB,8BAA8B;EAC9B,6BAA6B;EAC7B,wBAAwB;EACxB,wBAAwB;EACxB,uBAAuB;;EAEvB,mBAAmB;EACnB,sBAAsB;EACtB,wBAAwB;EACxB,yBAAyB;EACzB,yBAAyB;EACzB,yBAAyB;EACzB,yBAAyB;EACzB,yBAAyB;EACzB,yBAAyB;EACzB,yBAAyB;EACzB,yBAAyB;EACzB,yBAAyB;;EAEzB,mBAAmB;EACnB,kBAAkB;EAClB,iBAAiB;EACjB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,iBAAiB;EACjB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;;EAEhB,eAAe;EACf,gHAAgH;EAChH,uBAAuB;EACvB,wBAAwB;EACxB,sBAAsB;EACtB,wBAAwB;EACxB,uBAAuB;EACvB,uBAAuB;EACvB,yBAAyB;;EAEzB,kBAAkB;EAClB,qBAAqB;EACrB,mBAAmB;EACnB,oBAAoB;EACpB,iBAAiB;;EAEjB,YAAY;EACZ,4CAA4C;EAC5C,kFAAkF;EAClF,oFAAoF;EACpF,sFAAsF;;EAEtF,gBAAgB;EAChB,oCAAoC;EACpC,oCAAoC;EACpC,oCAAoC;AACtC;;AAEA;EACE,+BAA+B;EAC/B,gCAAgC;EAChC,gBAAgB;EAChB,4BAA4B;EAC5B,sCAAsC;EACtC,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA,0BAA0B;AAC1B;EACE,WAAW;EACX,aAAa;EACb,8BAA8B;EAC9B,aAAa;EACb,sBAAsB;EACtB,+BAA+B;EAC/B,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA,yBAAyB;AACzB;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,sCAAsC;EACtC,qFAAqF;EACrF,8CAA8C;EAC9C,gBAAgB;EAChB,MAAM;EACN,WAAW;EACX,mCAAmC;EACnC,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,+BAA+B;EAC/B,gBAAgB;EAChB,4BAA4B;EAC5B,wBAAwB;AAC1B;;AAEA;EACE,2BAA2B;EAC3B,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;;;EAGE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,+BAA+B;EAC/B,eAAe;EACf,sCAAsC;EACtC,kBAAkB;AACpB;;AAEA;EACE,gCAAgC;EAChC,yBAAyB;EACzB,4BAA4B;AAC9B;;AAEA;EACE,qCAAqC;EACrC,2BAA2B;EAC3B,4BAA4B;AAC9B;;AAEA;;EAEE,iCAAiC;EACjC,4BAA4B;AAC9B;;AAEA;;EAEE,iCAAiC;EACjC,4BAA4B;EAC5B,2BAA2B;AAC7B;;AAEA,2BAA2B;AAC3B;EACE,kBAAkB;EAClB,sCAAsC;EACtC,8BAA8B;EAC9B,8CAA8C;AAChD;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,oBAAoB;EACpB,qBAAqB;EACrB,WAAW;EACX,mFAAmF;AACrF;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,4BAA4B;EAC5B,oBAAoB;EACpB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,gCAAgC;EAChC,uCAAuC;EACvC,+BAA+B;EAC/B,gCAAgC;EAChC,gCAAgC;EAChC,sCAAsC;EACtC,aAAa;AACf;;AAEA;EACE,kCAAkC;EAClC,8BAA8B;EAC9B,4CAA4C;AAC9C;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;;EAEE,kBAAkB;EAClB,qBAAqB;EACrB,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;EAC5B,eAAe;EACf,uBAAuB;EACvB,+BAA+B;EAC/B,sCAAsC;AACxC;;AAEA;;EAEE,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,kBAAkB;EAClB,qBAAqB;EACrB,2BAA2B;EAC3B,kCAAkC;AACpC;;AAEA;EACE,OAAO,uBAAuB,EAAE;EAChC,KAAK,yBAAyB,EAAE;AAClC;;AAEA,iBAAiB;AACjB;EACE,OAAO;EACP,gBAAgB;EAChB,wCAAwC;EACxC,uBAAuB;AACzB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iCAAiC;EACjC,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;AACnC;;AAEA,oBAAoB;AACpB;EACE,6BAA6B;AAC/B;;AAEA;EACE,WAAW;EACX,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,yBAAyB;EACzB,gBAAgB;EAChB,YAAY;EACZ,8BAA8B;EAC9B,gBAAgB;EAChB,4BAA4B;EAC5B,eAAe;EACf,gBAAgB;EAChB,wCAAwC;EACxC,kBAAkB;AACpB;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,iBAAiB;EACjB,gCAAgC;EAChC,yBAAyB;EACzB,8BAA8B;EAC9B,gBAAgB;EAChB,sCAAsC;EACtC,+BAA+B;EAC/B,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;EAC5B,eAAe;EACf,uBAAuB;EACvB,+BAA+B;EAC/B,sCAAsC;AACxC;;AAEA;EACE,2BAA2B;EAC3B,iCAAiC;EACjC,qBAAqB;AACvB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA,kCAAkC;AAClC;EACE,8BAA8B;EAC9B,uCAAuC;EACvC,+BAA+B;EAC/B,uBAAuB;EACvB,6BAA6B;EAC7B,sCAAsC;EACtC,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,mCAAmC;EACnC,4BAA4B;EAC5B,2BAA2B;AAC7B;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,QAAQ;EACR,WAAW;EACX,oFAAoF;EACpF,UAAU;EACV,0CAA0C;AAC5C;;AAEA;EACE,UAAU;AACZ;;AAEA,4BAA4B;AAC5B;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,cAAc;EACd,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,+BAA+B;EAC/B,gBAAgB;EAChB,iCAAiC;EACjC,uCAAuC;AACzC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,4CAA4C;AAC9C;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,8BAA8B;EAC9B,gBAAgB;EAChB,yBAAyB;EACzB,yBAAyB;EACzB,uBAAuB;EACvB,qFAAqF;AACvF;;AAEA,wBAAwB;AACxB,iBAAiB,qDAAqD,EAAE;AACxE,wBAAwB,qDAAqD,EAAE;AAC/E,iBAAiB,qDAAqD,EAAE;AACxE,kBAAkB,qDAAqD,EAAE;AACzE,kBAAkB,qDAAqD,EAAE;AACzE,mBAAmB,qDAAqD,EAAE;AAC1E,iBAAiB,qDAAqD,EAAE;AACxE,cAAc,qDAAqD,EAAE;;AAErE,4BAA4B;AAC5B;;EAEE,gCAAgC;EAChC,gBAAgB;EAChB,4BAA4B;EAC5B,gBAAgB;EAChB,6BAA6B;EAC7B,eAAe;EACf,wCAAwC;EACxC,qBAAqB;EACrB,oBAAoB;EACpB,qBAAqB;EACrB,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;;EAEE,2BAA2B;AAC7B;;AAEA;;EAEE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,8BAA8B;EAC9B,4BAA4B;EAC5B,6BAA6B;AAC/B;;AAEA;EACE,gBAAgB;EAChB,4BAA4B;AAC9B;;AAEA;EACE,YAAY;EACZ,wBAAwB;EACxB,4BAA4B;AAC9B;;AAEA,mBAAmB;AACnB;EACE,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;EAC5B,eAAe;EACf,uBAAuB;EACvB,+BAA+B;EAC/B,sCAAsC;EACtC,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,4BAA4B;EAC5B,iCAAiC;EACjC,qBAAqB;AACvB;;AAEA,sBAAsB;AACtB;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,8BAA8B;EAC9B,uCAAuC;EACvC,+BAA+B;EAC/B,4BAA4B;EAC5B,WAAW;EACX,gBAAgB;EAChB,uBAAuB;EACvB,0BAA0B;EAC1B,mCAAmC;EACnC,2BAA2B;AAC7B;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,YAAY;EACZ,sCAAsC;EACtC,gBAAgB;EAChB,eAAe;EACf,+BAA+B;EAC/B,8BAA8B;EAC9B,gBAAgB;EAChB,4BAA4B;EAC5B,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,sCAAsC;AACxC;;AAEA;EACE,gCAAgC;EAChC,4BAA4B;AAC9B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,kCAAkC;EAClC,0BAA0B;AAC5B;;AAEA,mBAAmB;AACnB;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,wBAAwB;EACxB,4BAA4B;AAC9B;;AAEA;EACE,8BAA8B;EAC9B,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;EACZ,uCAAuC;EACvC,0CAA0C;EAC1C,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA,iBAAiB;AACjB;EACE,kBAAkB;EAClB,uCAAuC;EACvC,4BAA4B;AAC9B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,4BAA4B;EAC5B,6BAA6B;AAC/B;;AAEA;EACE,8BAA8B;EAC9B,gBAAgB;EAChB,4BAA4B;EAC5B,6BAA6B;AAC/B;;AAEA;EACE,8BAA8B;EAC9B,gBAAgB;EAChB,6BAA6B;AAC/B;;AAEA;EACE,gCAAgC;EAChC,yBAAyB;EACzB,YAAY;EACZ,+BAA+B;EAC/B,sCAAsC;EACtC,8BAA8B;EAC9B,gBAAgB;EAChB,eAAe;EACf,sCAAsC;AACxC;;AAEA;EACE,qCAAqC;EACrC,2BAA2B;EAC3B,4BAA4B;AAC9B;;AAEA;;+EAE+E;;AAE/E,kCAAkC;AAClC;EACE,8BAA8B;EAC9B,uCAAuC;EACvC,+BAA+B;EAC/B,6BAA6B;EAC7B,gBAAgB;EAChB,sCAAsC;EACtC,kBAAkB;EAClB,4BAA4B;AAC9B;;AAEA;EACE,kCAAkC;EAClC,4BAA4B;EAC5B,2BAA2B;AAC7B;;AAEA;EACE,kCAAkC;EAClC,mCAAmC;EACnC,4CAA4C;AAC9C;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,6BAA6B;AAC/B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,uCAAuC;EACvC,+BAA+B;EAC/B,8BAA8B;EAC9B,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,sCAAsC;AACxC;;AAEA;EACE,gCAAgC;EAChC,kCAAkC;AACpC;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,SAAS;EACT,SAAS;EACT,yBAAyB;EACzB,eAAe;EACf,gBAAgB;AAClB;;AAEA,4BAA4B;AAC5B;EACE,WAAW;EACX,YAAY;EACZ,cAAc;EACd,kBAAkB;EAClB,+BAA+B;EAC/B,gBAAgB;EAChB,iCAAiC;EACjC,uCAAuC;EACvC,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,sCAAsC;AACxC;;AAEA;EACE,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,+BAA+B;AACjC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,8BAA8B;EAC9B,gBAAgB;EAChB,yBAAyB;EACzB,yBAAyB;EACzB,uBAAuB;EACvB,qFAAqF;AACvF;;AAEA;EACE,OAAO;EACP,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,gBAAgB;EAChB,4BAA4B;EAC5B,gBAAgB;EAChB,6BAA6B;EAC7B,eAAe;EACf,wCAAwC;EACxC,oBAAoB;EACpB,qBAAqB;EACrB,4BAA4B;EAC5B,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,8BAA8B;EAC9B,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,0BAA0B;AAC5B;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;EACZ,+BAA+B;EAC/B,sCAAsC;EACtC,eAAe;EACf,qBAAqB;AACvB;;AAEA;EACE,iCAAiC;EACjC,4BAA4B;AAC9B;;AAEA;EACE,gCAAgC;EAChC,yBAAyB;EACzB,2BAA2B;AAC7B;;AAEA;EACE,iCAAiC;EACjC,4BAA4B;AAC9B;;AAEA;EACE,iCAAiC;EACjC,4BAA4B;AAC9B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,8BAA8B;EAC9B,uCAAuC;EACvC,+BAA+B;EAC/B,4BAA4B;EAC5B,WAAW;EACX,gBAAgB;EAChB,uBAAuB;EACvB,0BAA0B;EAC1B,mCAAmC;EACnC,2BAA2B;AAC7B;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,YAAY;EACZ,sCAAsC;EACtC,gBAAgB;EAChB,eAAe;EACf,+BAA+B;EAC/B,8BAA8B;EAC9B,gBAAgB;EAChB,4BAA4B;EAC5B,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,sCAAsC;AACxC;;AAEA;EACE,gCAAgC;EAChC,4BAA4B;AAC9B;;AAEA;EACE,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,kCAAkC;EAClC,0BAA0B;AAC5B;;AAEA,mBAAmB;AACnB;EACE,kBAAkB;EAClB,UAAU;EACV,MAAM;EACN,8BAA8B;EAC9B,uCAAuC;EACvC,+BAA+B;EAC/B,4BAA4B;EAC5B,gBAAgB;EAChB,uBAAuB;EACvB,2BAA2B;EAC3B,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,sCAAsC;EACtC,8BAA8B;EAC9B,gBAAgB;EAChB,4BAA4B;EAC5B,yBAAyB;EACzB,sBAAsB;EACtB,8CAA8C;EAC9C,6BAA6B;AAC/B;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;EAC5B,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,sCAAsC;AACxC;;AAEA;EACE,iCAAiC;EACjC,4BAA4B;AAC9B;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,YAAY;EACZ,sCAAsC;EACtC,gBAAgB;EAChB,eAAe;EACf,+BAA+B;EAC/B,8BAA8B;EAC9B,4BAA4B;EAC5B,sCAAsC;AACxC;;AAEA;EACE,gCAAgC;EAChC,4BAA4B;AAC9B;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,8BAA8B;EAC9B,4BAA4B;EAC5B,kBAAkB;AACpB;;AAEA,qBAAqB;AACrB;;EAEE,0BAA0B;EAC1B,uBAAuB;EACvB,gCAAgC;EAChC,+BAA+B;EAC/B,2CAA2C;AAC7C;;AAEA;;EAEE,8BAA8B;EAC9B,4BAA4B;EAC5B,gBAAgB;EAChB,SAAS;AACX;;AAEA;EACE,0BAA0B;EAC1B,2CAA2C;EAC3C,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,2BAA2B;EAC3B,eAAe;EACf,8BAA8B;EAC9B,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,sCAAsC;EACtC,yBAAyB;AAC3B;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,4CAA4C;EAC5C,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,iCAAiC;AACjC;EACE,8BAA8B;EAC9B,uCAAuC;EACvC,+BAA+B;EAC/B,uBAAuB;EACvB,6BAA6B;EAC7B,sCAAsC;EACtC,kBAAkB;EAClB,gBAAgB;EAChB,4BAA4B;AAC9B;;AAEA;EACE,kCAAkC;EAClC,4BAA4B;EAC5B,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,6BAA6B;AAC/B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,cAAc;EACd,kBAAkB;EAClB,+BAA+B;EAC/B,gBAAgB;EAChB,iCAAiC;EACjC,uCAAuC;EACvC,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,sCAAsC;AACxC;;AAEA;EACE,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,+BAA+B;AACjC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,8BAA8B;EAC9B,gBAAgB;EAChB,yBAAyB;EACzB,yBAAyB;EACzB,uBAAuB;EACvB,qFAAqF;AACvF;;AAEA;EACE,OAAO;EACP,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,gBAAgB;EAChB,4BAA4B;EAC5B,gBAAgB;EAChB,6BAA6B;EAC7B,eAAe;EACf,wCAAwC;EACxC,oBAAoB;EACpB,qBAAqB;EACrB,4BAA4B;EAC5B,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,8BAA8B;EAC9B,4BAA4B;AAC9B;;AAEA;EACE,gBAAgB;EAChB,4BAA4B;AAC9B;;AAEA;EACE,YAAY;EACZ,wBAAwB;EACxB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;EACZ,+BAA+B;EAC/B,sCAAsC;EACtC,eAAe;EACf,iCAAiC;EACjC,4BAA4B;AAC9B;;AAEA;EACE,gCAAgC;EAChC,yBAAyB;EACzB,2BAA2B;AAC7B;;AAEA,eAAe;AACf;EACE,aAAa;EACb,eAAe;EACf,mBAAmB;EACnB,0BAA0B;AAC5B;;AAEA;EACE,gCAAgC;EAChC,yBAAyB;EACzB,8BAA8B;EAC9B,gBAAgB;EAChB,sCAAsC;EACtC,+BAA+B;EAC/B,eAAe;EACf,sCAAsC;AACxC;;AAEA;EACE,2BAA2B;EAC3B,4BAA4B;AAC9B;;AAEA,mBAAmB;AACnB;EACE,0BAA0B;AAC5B;;AAEA;EACE,iCAAiC;EACjC,yBAAyB;EACzB,8BAA8B;EAC9B,gBAAgB;EAChB,sCAAsC;EACtC,+BAA+B;EAC/B,yBAAyB;EACzB,uBAAuB;AACzB;;AAEA,wBAAwB;AACxB;;EAEE,0BAA0B;EAC1B,uBAAuB;EACvB,gCAAgC;EAChC,+BAA+B;EAC/B,2CAA2C;EAC3C,8BAA8B;EAC9B,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;;EAEE,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA,uBAAuB;AACvB;EACE,0BAA0B;EAC1B,2CAA2C;EAC3C,2BAA2B;AAC7B;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,2BAA2B;EAC3B,eAAe;EACf,8BAA8B;EAC9B,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,sCAAsC;EACtC,yBAAyB;AAC3B;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,4CAA4C;AAC9C;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA,eAAe;AACf;EACE,0BAA0B;EAC1B,uCAAuC;EACvC,+BAA+B;EAC/B,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,sCAAsC;EACtC,gCAAgC;EAChC,8CAA8C;EAC9C,8BAA8B;EAC9B,gBAAgB;EAChB,4BAA4B;AAC9B;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;EAC5B,eAAe;EACf,8BAA8B;EAC9B,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,+BAA+B;EAC/B,sCAAsC;AACxC;;AAEA;EACE,iCAAiC;EACjC,4BAA4B;AAC9B;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,4BAA4B;EAC5B,8BAA8B;AAChC;;AAEA,qBAAqB;AACrB;EACE,0BAA0B;EAC1B,uCAAuC;EACvC,+BAA+B;EAC/B,gBAAgB;EAChB,8BAA8B;AAChC;;AAEA;EACE,sCAAsC;EACtC,gCAAgC;EAChC,8CAA8C;EAC9C,8BAA8B;EAC9B,gBAAgB;EAChB,4BAA4B;AAC9B;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,YAAY;EACZ,sCAAsC;EACtC,gBAAgB;EAChB,eAAe;EACf,8BAA8B;EAC9B,4BAA4B;EAC5B,mDAAmD;EACnD,8CAA8C;AAChD;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,gCAAgC;AAClC;;AAEA,sBAAsB;AACtB;EACE;IACE,eAAe;IACf,0BAA0B;IAC1B,oBAAoB;IACpB,wBAAwB;IACxB,wBAAwB;EAC1B;;EAEA;IACE,sCAAsC;EACxC;;EAEA;IACE,sCAAsC;EACxC;;EAEA;IACE,wCAAwC;EAC1C;;EAEA;;IAEE,uBAAuB;EACzB;;EAEA;;IAEE,WAAW;IACX,YAAY;EACd;;EAEA;;IAEE,WAAW;IACX,YAAY;EACd;;EAEA;;IAEE,mBAAmB;EACrB;AACF",sourcesContent:["/* Modern Reset and Base Styles */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  /* Color System */\n  --color-primary: #2563eb;\n  --color-primary-light: #3b82f6;\n  --color-primary-dark: #1d4ed8;\n  --color-success: #10b981;\n  --color-warning: #f59e0b;\n  --color-danger: #ef4444;\n  \n  /* Neutral Colors */\n  --color-white: #ffffff;\n  --color-gray-50: #f9fafb;\n  --color-gray-100: #f3f4f6;\n  --color-gray-200: #e5e7eb;\n  --color-gray-300: #d1d5db;\n  --color-gray-400: #9ca3af;\n  --color-gray-500: #6b7280;\n  --color-gray-600: #4b5563;\n  --color-gray-700: #374151;\n  --color-gray-800: #1f2937;\n  --color-gray-900: #111827;\n  \n  /* Spacing System */\n  --space-1: 0.25rem;\n  --space-2: 0.5rem;\n  --space-3: 0.75rem;\n  --space-4: 1rem;\n  --space-5: 1.25rem;\n  --space-6: 1.5rem;\n  --space-8: 2rem;\n  --space-10: 2.5rem;\n  --space-12: 3rem;\n  \n  /* Typography */\n  --font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Inter, \"Helvetica Neue\", Arial, sans-serif;\n  --font-size-xs: 0.75rem;\n  --font-size-sm: 0.875rem;\n  --font-size-base: 1rem;\n  --font-size-lg: 1.125rem;\n  --font-size-xl: 1.25rem;\n  --font-size-2xl: 1.5rem;\n  --font-size-3xl: 1.875rem;\n  \n  /* Border Radius */\n  --radius-sm: 0.375rem;\n  --radius-md: 0.5rem;\n  --radius-lg: 0.75rem;\n  --radius-xl: 1rem;\n  \n  /* Shadows */\n  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  \n  /* Transitions */\n  --transition-fast: 150ms ease-in-out;\n  --transition-base: 250ms ease-in-out;\n  --transition-slow: 350ms ease-in-out;\n}\n\nbody {\n  font-family: var(--font-family);\n  font-size: var(--font-size-base);\n  line-height: 1.5;\n  color: var(--color-gray-700);\n  background-color: var(--color-gray-50);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/* Main Sidepanel Layout */\n.sidepanel {\n  width: 100%;\n  height: 100vh;\n  background: var(--color-white);\n  display: flex;\n  flex-direction: column;\n  font-family: var(--font-family);\n  overflow: hidden;\n  position: relative;\n}\n\n/* Modern Header Design */\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--space-4) var(--space-6);\n  background: linear-gradient(135deg, var(--color-white) 0%, var(--color-gray-50) 100%);\n  border-bottom: 1px solid var(--color-gray-200);\n  position: sticky;\n  top: 0;\n  z-index: 50;\n  -webkit-backdrop-filter: blur(10px);\n  backdrop-filter: blur(10px);\n}\n\n.header-title {\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n}\n\n.header-title h1 {\n  font-size: var(--font-size-2xl);\n  font-weight: 700;\n  color: var(--color-gray-900);\n  letter-spacing: -0.025em;\n}\n\n.header-icon {\n  color: var(--color-primary);\n  width: 24px;\n  height: 24px;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n}\n\n.save-button,\n.tab-sync-button,\n.logout-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  border: none;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  transition: all var(--transition-fast);\n  position: relative;\n}\n\n.save-button {\n  background: var(--color-primary);\n  color: var(--color-white);\n  box-shadow: var(--shadow-sm);\n}\n\n.save-button:hover {\n  background: var(--color-primary-dark);\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-md);\n}\n\n.tab-sync-button,\n.logout-button {\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.tab-sync-button:hover,\n.logout-button:hover {\n  background: var(--color-gray-200);\n  color: var(--color-gray-700);\n  transform: translateY(-1px);\n}\n\n/* Enhanced Search Design */\n.search-container {\n  position: relative;\n  padding: var(--space-4) var(--space-6);\n  background: var(--color-white);\n  border-bottom: 1px solid var(--color-gray-200);\n}\n\n.search-container::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: var(--space-6);\n  right: var(--space-6);\n  height: 1px;\n  background: linear-gradient(90deg, transparent, var(--color-gray-300), transparent);\n}\n\n.search-input-wrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.search-icon {\n  position: absolute;\n  left: var(--space-4);\n  color: var(--color-gray-400);\n  pointer-events: none;\n  z-index: 10;\n}\n\n.search-input {\n  width: 100%;\n  height: 48px;\n  padding: 0 var(--space-3) 0 44px;\n  border: 2px solid var(--color-gray-200);\n  border-radius: var(--radius-xl);\n  font-size: var(--font-size-base);\n  background: var(--color-gray-50);\n  transition: all var(--transition-base);\n  outline: none;\n}\n\n.search-input:focus {\n  border-color: var(--color-primary);\n  background: var(--color-white);\n  box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1);\n}\n\n.search-input::placeholder {\n  color: var(--color-gray-400);\n}\n\n.search-clear,\n.search-power-mode {\n  position: absolute;\n  right: var(--space-3);\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  padding: var(--space-2);\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n}\n\n.search-clear:hover,\n.search-power-mode:hover {\n  color: var(--color-gray-600);\n  background: var(--color-gray-100);\n}\n\n.search-spinner {\n  position: absolute;\n  right: var(--space-4);\n  color: var(--color-primary);\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n/* Content Area */\n.content {\n  flex: 1;\n  overflow-y: auto;\n  padding: 0 var(--space-6) var(--space-6);\n  scroll-behavior: smooth;\n}\n\n.content::-webkit-scrollbar {\n  width: 6px;\n}\n\n.content::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.content::-webkit-scrollbar-thumb {\n  background: var(--color-gray-300);\n  border-radius: 3px;\n}\n\n.content::-webkit-scrollbar-thumb:hover {\n  background: var(--color-gray-400);\n}\n\n/* Section Headers */\n.section {\n  margin-bottom: var(--space-8);\n}\n\n.section-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  padding: var(--space-4) 0;\n  background: none;\n  border: none;\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  color: var(--color-gray-900);\n  cursor: pointer;\n  text-align: left;\n  transition: color var(--transition-fast);\n  position: relative;\n}\n\n.section-header:hover {\n  color: var(--color-primary);\n}\n\n.section-header .count {\n  margin-left: auto;\n  background: var(--color-primary);\n  color: var(--color-white);\n  font-size: var(--font-size-xs);\n  font-weight: 600;\n  padding: var(--space-1) var(--space-3);\n  border-radius: var(--radius-xl);\n  min-width: 24px;\n  text-align: center;\n}\n\n.add-collection-button {\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  padding: var(--space-2);\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n}\n\n.add-collection-button:hover {\n  color: var(--color-primary);\n  background: var(--color-gray-100);\n  transform: scale(1.1);\n}\n\n.section-content {\n  margin-top: var(--space-2);\n}\n\n/* Modern Card Design Foundation */\n.card-base {\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  padding: var(--space-5);\n  margin-bottom: var(--space-4);\n  transition: all var(--transition-base);\n  position: relative;\n  overflow: hidden;\n}\n\n.card-base:hover {\n  border-color: var(--color-gray-300);\n  box-shadow: var(--shadow-md);\n  transform: translateY(-2px);\n}\n\n.card-base::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 3px;\n  background: linear-gradient(90deg, var(--color-primary), var(--color-primary-light));\n  opacity: 0;\n  transition: opacity var(--transition-base);\n}\n\n.card-base:hover::before {\n  opacity: 1;\n}\n\n/* Enhanced Favicon System */\n.favicon-container {\n  position: relative;\n  width: 40px;\n  height: 40px;\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n  background: var(--color-gray-100);\n  border: 1px solid var(--color-gray-200);\n}\n\n.favicon-container img {\n  width: 24px;\n  height: 24px;\n  object-fit: contain;\n  transition: transform var(--transition-fast);\n}\n\n.favicon-container:hover img {\n  transform: scale(1.1);\n}\n\n.favicon-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-sm);\n  font-weight: 600;\n  color: var(--color-white);\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n  background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n}\n\n/* Domain Color System */\n.domain-github { background: linear-gradient(135deg, #24292e, #586069); }\n.domain-stackoverflow { background: linear-gradient(135deg, #f48024, #fe7a15); }\n.domain-medium { background: linear-gradient(135deg, #00ab6c, #00d084); }\n.domain-youtube { background: linear-gradient(135deg, #ff0000, #cc0000); }\n.domain-twitter { background: linear-gradient(135deg, #1da1f2, #0d8bd9); }\n.domain-linkedin { background: linear-gradient(135deg, #0077b5, #005885); }\n.domain-reddit { background: linear-gradient(135deg, #ff4500, #ff6500); }\n.domain-dev { background: linear-gradient(135deg, #0a0a0a, #2d2d2d); }\n\n/* Typography Improvements */\n.link-title,\n.inbox-card-title {\n  font-size: var(--font-size-base);\n  font-weight: 600;\n  color: var(--color-gray-900);\n  line-height: 1.4;\n  margin-bottom: var(--space-1);\n  cursor: pointer;\n  transition: color var(--transition-fast);\n  text-decoration: none;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.link-title:hover,\n.inbox-card-title:hover {\n  color: var(--color-primary);\n}\n\n.link-meta,\n.inbox-card-meta {\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-500);\n  margin-bottom: var(--space-3);\n}\n\n.link-domain {\n  font-weight: 500;\n  color: var(--color-gray-600);\n}\n\n.link-date::before {\n  content: '•';\n  margin: 0 var(--space-1);\n  color: var(--color-gray-400);\n}\n\n/* Action Buttons */\n.action-button {\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  padding: var(--space-2);\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.action-button:hover {\n  color: var(--color-gray-600);\n  background: var(--color-gray-100);\n  transform: scale(1.1);\n}\n\n/* Enhanced Dropdown */\n.dropdown {\n  position: relative;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-xl);\n  z-index: 50;\n  min-width: 200px;\n  padding: var(--space-2);\n  margin-top: var(--space-1);\n  -webkit-backdrop-filter: blur(10px);\n  backdrop-filter: blur(10px);\n}\n\n.dropdown-menu button {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: var(--space-3) var(--space-4);\n  text-align: left;\n  cursor: pointer;\n  border-radius: var(--radius-md);\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  color: var(--color-gray-700);\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  transition: all var(--transition-fast);\n}\n\n.dropdown-menu button:hover {\n  background: var(--color-gray-50);\n  color: var(--color-gray-900);\n}\n\n.dropdown-menu button.delete-action {\n  color: var(--color-danger);\n}\n\n.dropdown-menu button.delete-action:hover {\n  background: rgba(239, 68, 68, 0.1);\n  color: var(--color-danger);\n}\n\n/* Loading States */\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: var(--space-12);\n  color: var(--color-gray-500);\n}\n\n.loading-spinner {\n  font-size: var(--font-size-sm);\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n}\n\n.loading-spinner::before {\n  content: '';\n  width: 16px;\n  height: 16px;\n  border: 2px solid var(--color-gray-300);\n  border-top: 2px solid var(--color-primary);\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n/* Empty States */\n.empty-state {\n  text-align: center;\n  padding: var(--space-12) var(--space-4);\n  color: var(--color-gray-500);\n}\n\n.empty-state svg {\n  width: 48px;\n  height: 48px;\n  color: var(--color-gray-300);\n  margin-bottom: var(--space-4);\n}\n\n.empty-state h3 {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  color: var(--color-gray-700);\n  margin-bottom: var(--space-2);\n}\n\n.empty-state p {\n  font-size: var(--font-size-sm);\n  line-height: 1.6;\n  margin-bottom: var(--space-6);\n}\n\n.empty-action {\n  background: var(--color-primary);\n  color: var(--color-white);\n  border: none;\n  border-radius: var(--radius-lg);\n  padding: var(--space-3) var(--space-6);\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  cursor: pointer;\n  transition: all var(--transition-fast);\n}\n\n.empty-action:hover {\n  background: var(--color-primary-dark);\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-md);\n}\n\n/* ==========================================================================\n   MODERN CARD SYSTEM - COMPLETE REDESIGN\n   ========================================================================== */\n\n/* ===== INBOX CARD STYLES ===== */\n.inbox-card {\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-xl);\n  margin-bottom: var(--space-4);\n  overflow: hidden;\n  transition: all var(--transition-base);\n  position: relative;\n  box-shadow: var(--shadow-sm);\n}\n\n.inbox-card:hover {\n  border-color: var(--color-primary);\n  box-shadow: var(--shadow-lg);\n  transform: translateY(-1px);\n}\n\n.inbox-card.selected {\n  border-color: var(--color-primary);\n  background: rgba(37, 99, 235, 0.02);\n  box-shadow: 0 0 0 1px rgba(37, 99, 235, 0.1);\n}\n\n.inbox-card-content {\n  padding: var(--space-5);\n}\n\n.inbox-card-header {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--space-4);\n  margin-bottom: var(--space-4);\n}\n\n.inbox-card-checkbox {\n  margin-top: var(--space-1);\n}\n\n.inbox-card-checkbox input[type=\"checkbox\"] {\n  width: 16px;\n  height: 16px;\n  border: 2px solid var(--color-gray-300);\n  border-radius: var(--radius-sm);\n  background: var(--color-white);\n  cursor: pointer;\n  position: relative;\n  appearance: none;\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-checkbox input[type=\"checkbox\"]:checked {\n  background: var(--color-primary);\n  border-color: var(--color-primary);\n}\n\n.inbox-card-checkbox input[type=\"checkbox\"]:checked::after {\n  content: '✓';\n  position: absolute;\n  top: -1px;\n  left: 2px;\n  color: var(--color-white);\n  font-size: 10px;\n  font-weight: 600;\n}\n\n/* ENHANCED FAVICON SYSTEM */\n.inbox-card-favicon {\n  width: 48px;\n  height: 48px;\n  flex-shrink: 0;\n  position: relative;\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n  background: var(--color-gray-100);\n  border: 1px solid var(--color-gray-200);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-favicon:hover {\n  transform: scale(1.05);\n  border-color: var(--color-gray-300);\n}\n\n.inbox-card-favicon img {\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n  border-radius: var(--radius-sm);\n}\n\n.inbox-card-favicon .favicon-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-lg);\n  font-weight: 700;\n  color: var(--color-white);\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n  background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n}\n\n.inbox-card-title-section {\n  flex: 1;\n  min-width: 0;\n}\n\n.inbox-card-title {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  color: var(--color-gray-900);\n  line-height: 1.4;\n  margin-bottom: var(--space-2);\n  cursor: pointer;\n  transition: color var(--transition-fast);\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-decoration: none;\n}\n\n.inbox-card-title:hover {\n  color: var(--color-primary);\n}\n\n.inbox-card-domain {\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-500);\n  font-weight: 500;\n}\n\n.inbox-card-actions {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--space-2);\n  margin-top: var(--space-1);\n}\n\n.inbox-card-link,\n.inbox-card-menu-button {\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n  cursor: pointer;\n  text-decoration: none;\n}\n\n.inbox-card-link {\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.inbox-card-link:hover {\n  background: var(--color-primary);\n  color: var(--color-white);\n  transform: translateY(-1px);\n}\n\n.inbox-card-menu-button {\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.inbox-card-menu-button:hover {\n  background: var(--color-gray-200);\n  color: var(--color-gray-700);\n}\n\n.inbox-card-menu-container {\n  position: relative;\n}\n\n.inbox-card-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-xl);\n  z-index: 50;\n  min-width: 200px;\n  padding: var(--space-2);\n  margin-top: var(--space-1);\n  -webkit-backdrop-filter: blur(10px);\n  backdrop-filter: blur(10px);\n}\n\n.inbox-card-menu-item {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: var(--space-3) var(--space-4);\n  text-align: left;\n  cursor: pointer;\n  border-radius: var(--radius-md);\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  color: var(--color-gray-700);\n  display: flex;\n  align-items: center;\n  gap: var(--space-3);\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-menu-item:hover {\n  background: var(--color-gray-50);\n  color: var(--color-gray-900);\n}\n\n.inbox-card-menu-item:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.inbox-card-menu-item.delete {\n  color: var(--color-danger);\n}\n\n.inbox-card-menu-item.delete:hover {\n  background: rgba(239, 68, 68, 0.1);\n  color: var(--color-danger);\n}\n\n/* SUBMENU STYLES */\n.inbox-card-submenu {\n  position: absolute;\n  left: 100%;\n  top: 0;\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  box-shadow: var(--shadow-xl);\n  min-width: 180px;\n  padding: var(--space-2);\n  margin-left: var(--space-1);\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.inbox-card-submenu-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--space-2) var(--space-3);\n  font-size: var(--font-size-xs);\n  font-weight: 600;\n  color: var(--color-gray-500);\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  border-bottom: 1px solid var(--color-gray-200);\n  margin-bottom: var(--space-1);\n}\n\n.inbox-card-submenu-close {\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  padding: 2px;\n  border-radius: 2px;\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-submenu-close:hover {\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.inbox-card-submenu-item {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: var(--space-2) var(--space-3);\n  text-align: left;\n  cursor: pointer;\n  border-radius: var(--radius-sm);\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-700);\n  transition: all var(--transition-fast);\n}\n\n.inbox-card-submenu-item:hover {\n  background: var(--color-gray-50);\n  color: var(--color-gray-900);\n}\n\n.inbox-card-submenu-empty {\n  padding: var(--space-3);\n  text-align: center;\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-500);\n  font-style: italic;\n}\n\n/* CONTENT SECTIONS */\n.inbox-card-summary,\n.inbox-card-note {\n  margin-top: var(--space-4);\n  padding: var(--space-3);\n  background: var(--color-gray-50);\n  border-radius: var(--radius-md);\n  border-left: 3px solid var(--color-primary);\n}\n\n.inbox-card-summary p,\n.inbox-card-note p {\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-600);\n  line-height: 1.5;\n  margin: 0;\n}\n\n.inbox-card-highlights {\n  margin-top: var(--space-4);\n  border-top: 1px solid var(--color-gray-200);\n  padding-top: var(--space-4);\n}\n\n.highlights-toggle {\n  background: none;\n  border: none;\n  color: var(--color-primary);\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n  transition: all var(--transition-fast);\n  padding: var(--space-1) 0;\n}\n\n.highlights-toggle:hover {\n  color: var(--color-primary-dark);\n}\n\n.highlights-chevron {\n  transition: transform var(--transition-fast);\n  font-size: 10px;\n}\n\n.highlights-chevron.expanded {\n  transform: rotate(180deg);\n}\n\n/* ===== LINK CARD STYLES ===== */\n.link-card {\n  background: var(--color-white);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-xl);\n  padding: var(--space-5);\n  margin-bottom: var(--space-4);\n  transition: all var(--transition-base);\n  position: relative;\n  overflow: hidden;\n  box-shadow: var(--shadow-sm);\n}\n\n.link-card:hover {\n  border-color: var(--color-primary);\n  box-shadow: var(--shadow-lg);\n  transform: translateY(-1px);\n}\n\n.link-header {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--space-4);\n  margin-bottom: var(--space-4);\n}\n\n.link-favicon {\n  width: 48px;\n  height: 48px;\n  flex-shrink: 0;\n  position: relative;\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n  background: var(--color-gray-100);\n  border: 1px solid var(--color-gray-200);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all var(--transition-fast);\n}\n\n.link-favicon:hover {\n  transform: scale(1.05);\n  border-color: var(--color-gray-300);\n}\n\n.link-favicon img {\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n  border-radius: var(--radius-sm);\n}\n\n.link-favicon .favicon-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: var(--font-size-lg);\n  font-weight: 700;\n  color: var(--color-white);\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n  background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light));\n}\n\n.link-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-title {\n  font-size: var(--font-size-lg);\n  font-weight: 600;\n  color: var(--color-gray-900);\n  line-height: 1.4;\n  margin-bottom: var(--space-2);\n  cursor: pointer;\n  transition: color var(--transition-fast);\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-decoration: none;\n}\n\n.link-title:hover {\n  color: var(--color-primary);\n}\n\n.link-meta {\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-500);\n}\n\n.link-domain {\n  font-weight: 500;\n  color: var(--color-gray-600);\n}\n\n.link-date::before {\n  content: '•';\n  margin: 0 var(--space-1);\n  color: var(--color-gray-400);\n}\n\n.link-actions {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--space-2);\n}\n\n.link-actions .action-button {\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  border-radius: var(--radius-md);\n  transition: all var(--transition-fast);\n  cursor: pointer;\n  background: var(--color-gray-100);\n  color: var(--color-gray-600);\n}\n\n.link-actions .action-button:hover {\n  background: var(--color-primary);\n  color: var(--color-white);\n  transform: translateY(-1px);\n}\n\n/* TAG STYLES */\n.link-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--space-2);\n  margin-top: var(--space-3);\n}\n\n.link-tag {\n  background: var(--color-primary);\n  color: var(--color-white);\n  font-size: var(--font-size-xs);\n  font-weight: 500;\n  padding: var(--space-1) var(--space-3);\n  border-radius: var(--radius-xl);\n  cursor: pointer;\n  transition: all var(--transition-fast);\n}\n\n.link-tag:hover {\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-sm);\n}\n\n/* CATEGORY BADGE */\n.link-category {\n  margin-top: var(--space-3);\n}\n\n.category-badge {\n  background: var(--color-gray-600);\n  color: var(--color-white);\n  font-size: var(--font-size-xs);\n  font-weight: 500;\n  padding: var(--space-1) var(--space-3);\n  border-radius: var(--radius-xl);\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n}\n\n/* NOTES AND SUMMARIES */\n.link-note,\n.link-summary {\n  margin-top: var(--space-4);\n  padding: var(--space-3);\n  background: var(--color-gray-50);\n  border-radius: var(--radius-md);\n  border-left: 3px solid var(--color-primary);\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-600);\n  line-height: 1.5;\n}\n\n.link-note strong,\n.link-summary strong {\n  color: var(--color-gray-800);\n  font-weight: 600;\n}\n\n/* HIGHLIGHTS SECTION */\n.link-highlights-section {\n  margin-top: var(--space-4);\n  border-top: 1px solid var(--color-gray-200);\n  padding-top: var(--space-4);\n}\n\n.highlights-header {\n  margin-bottom: var(--space-3);\n}\n\n.highlights-toggle {\n  background: none;\n  border: none;\n  color: var(--color-primary);\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: var(--space-2);\n  transition: all var(--transition-fast);\n  padding: var(--space-1) 0;\n}\n\n.highlights-toggle:hover {\n  color: var(--color-primary-dark);\n}\n\n.highlights-chevron {\n  transition: transform var(--transition-fast);\n}\n\n.highlights-chevron.expanded {\n  transform: rotate(180deg);\n}\n\n.highlights-list {\n  display: flex;\n  flex-direction: column;\n  gap: var(--space-3);\n}\n\n/* TAG EDITOR */\n.tag-editor {\n  margin-top: var(--space-4);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n}\n\n.tag-editor-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--space-3) var(--space-4);\n  background: var(--color-gray-50);\n  border-bottom: 1px solid var(--color-gray-200);\n  font-size: var(--font-size-sm);\n  font-weight: 600;\n  color: var(--color-gray-700);\n}\n\n.tag-editor-close {\n  background: none;\n  border: none;\n  color: var(--color-gray-400);\n  cursor: pointer;\n  font-size: var(--font-size-lg);\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: var(--radius-sm);\n  transition: all var(--transition-fast);\n}\n\n.tag-editor-close:hover {\n  background: var(--color-gray-200);\n  color: var(--color-gray-600);\n}\n\n.tag-editor-loading {\n  padding: var(--space-4);\n  text-align: center;\n  color: var(--color-gray-500);\n  font-size: var(--font-size-sm);\n}\n\n/* COLLECTIONS MENU */\n.collections-menu {\n  margin-top: var(--space-4);\n  border: 1px solid var(--color-gray-200);\n  border-radius: var(--radius-lg);\n  overflow: hidden;\n  background: var(--color-white);\n}\n\n.collections-header {\n  padding: var(--space-3) var(--space-4);\n  background: var(--color-gray-50);\n  border-bottom: 1px solid var(--color-gray-200);\n  font-size: var(--font-size-sm);\n  font-weight: 600;\n  color: var(--color-gray-700);\n}\n\n.collection-option {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: var(--space-3) var(--space-4);\n  text-align: left;\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  color: var(--color-gray-700);\n  transition: background-color var(--transition-fast);\n  border-bottom: 1px solid var(--color-gray-100);\n}\n\n.collection-option:last-child {\n  border-bottom: none;\n}\n\n.collection-option:hover {\n  background: var(--color-gray-50);\n}\n\n/* Responsive Design */\n@media (max-width: 480px) {\n  :root {\n    --space-6: 1rem;\n    --font-size-base: 0.875rem;\n    --font-size-lg: 1rem;\n    --font-size-xl: 1.125rem;\n    --font-size-2xl: 1.25rem;\n  }\n  \n  .header {\n    padding: var(--space-3) var(--space-4);\n  }\n  \n  .search-container {\n    padding: var(--space-3) var(--space-4);\n  }\n  \n  .content {\n    padding: 0 var(--space-4) var(--space-4);\n  }\n  \n  .inbox-card-content,\n  .link-card {\n    padding: var(--space-4);\n  }\n  \n  .inbox-card-favicon,\n  .link-favicon {\n    width: 40px;\n    height: 40px;\n  }\n  \n  .inbox-card-favicon img,\n  .link-favicon img {\n    width: 24px;\n    height: 24px;\n  }\n  \n  .inbox-card-header,\n  .link-header {\n    gap: var(--space-3);\n  }\n}\n\n "],sourceRoot:""}]);const s=i},206:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},261:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const a=r(t(660));class o extends a.default{select(e){let n=!1;const t=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!n?"":('"'===e&&(n=!n),e)).join("");return this.url.searchParams.set("select",t),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(e,{ascending:n=!0,nullsFirst:t,foreignTable:r,referencedTable:a=r}={}){const o=a?`${a}.order`:"order",i=this.url.searchParams.get(o);return this.url.searchParams.set(o,`${i?`${i},`:""}${e}.${n?"asc":"desc"}${void 0===t?"":t?".nullsfirst":".nullslast"}`),this}limit(e,{foreignTable:n,referencedTable:t=n}={}){const r=void 0===t?"limit":`${t}.limit`;return this.url.searchParams.set(r,`${e}`),this}range(e,n,{foreignTable:t,referencedTable:r=t}={}){const a=void 0===r?"offset":`${r}.offset`,o=void 0===r?"limit":`${r}.limit`;return this.url.searchParams.set(a,`${e}`),this.url.searchParams.set(o,""+(n-e+1)),this}abortSignal(e){return this.signal=e,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return"GET"===this.method?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:e=!1,verbose:n=!1,settings:t=!1,buffers:r=!1,wal:a=!1,format:o="text"}={}){var i;const s=[e?"analyze":null,n?"verbose":null,t?"settings":null,r?"buffers":null,a?"wal":null].filter(Boolean).join("|"),l=null!==(i=this.headers.Accept)&&void 0!==i?i:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${o}; for="${l}"; options=${s};`,this}rollback(){var e;return(null!==(e=this.headers.Prefer)&&void 0!==e?e:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}}n.default=o},279:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.PostgrestError=n.PostgrestBuilder=n.PostgrestTransformBuilder=n.PostgrestFilterBuilder=n.PostgrestQueryBuilder=n.PostgrestClient=void 0;const a=r(t(342));n.PostgrestClient=a.default;const o=r(t(45));n.PostgrestQueryBuilder=o.default;const i=r(t(825));n.PostgrestFilterBuilder=i.default;const s=r(t(261));n.PostgrestTransformBuilder=s.default;const l=r(t(660));n.PostgrestBuilder=l.default;const c=r(t(818));n.PostgrestError=c.default,n.default={PostgrestClient:a.default,PostgrestQueryBuilder:o.default,PostgrestFilterBuilder:i.default,PostgrestTransformBuilder:s.default,PostgrestBuilder:l.default,PostgrestError:c.default}},287:(e,n)=>{var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,v={};function m(e,n,t){this.props=e,this.context=n,this.refs=v,this.updater=t||p}function A(){}function y(e,n,t){this.props=e,this.context=n,this.refs=v,this.updater=t||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},A.prototype=m.prototype;var b=y.prototype=new A;b.constructor=y,g(b,m.prototype),b.isPureReactComponent=!0;var w=Array.isArray,C=Object.prototype.hasOwnProperty,k={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,n,r){var a,o={},i=null,s=null;if(null!=n)for(a in void 0!==n.ref&&(s=n.ref),void 0!==n.key&&(i=""+n.key),n)C.call(n,a)&&!x.hasOwnProperty(a)&&(o[a]=n[a]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===o[a]&&(o[a]=l[a]);return{$$typeof:t,type:e,key:i,ref:s,props:o,_owner:k.current}}function B(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var j=/\/+/g;function S(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(e){return n[e]})}(""+e.key):n.toString(36)}function _(e,n,a,o,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case t:case r:l=!0}}if(l)return i=i(l=e),e=""===o?"."+S(l,0):o,w(i)?(a="",null!=e&&(a=e.replace(j,"$&/")+"/"),_(i,n,a,"",function(e){return e})):null!=i&&(B(i)&&(i=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(j,"$&/")+"/")+e)),n.push(i)),1;if(l=0,o=""===o?".":o+":",w(e))for(var c=0;c<e.length;c++){var u=o+S(s=e[c],c);l+=_(s,n,a,u,i)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=_(s=s.value,n,a,u=o+S(s,c++),i);else if("object"===s)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return l}function N(e,n,t){if(null==e)return e;var r=[],a=0;return _(e,r,"","",function(e){return n.call(t,e,a++)}),r}function T(e){if(-1===e._status){var n=e._result;(n=n()).then(function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)},function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)}),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var O={current:null},P={transition:null},z={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:P,ReactCurrentOwner:k};function I(){throw Error("act(...) is not supported in production builds of React.")}n.Children={map:N,forEach:function(e,n,t){N(e,function(){n.apply(this,arguments)},t)},count:function(e){var n=0;return N(e,function(){n++}),n},toArray:function(e){return N(e,function(e){return e})||[]},only:function(e){if(!B(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=m,n.Fragment=a,n.Profiler=i,n.PureComponent=y,n.StrictMode=o,n.Suspense=u,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,n.act=I,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=g({},e.props),o=e.key,i=e.ref,s=e._owner;if(null!=n){if(void 0!==n.ref&&(i=n.ref,s=k.current),void 0!==n.key&&(o=""+n.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in n)C.call(n,c)&&!x.hasOwnProperty(c)&&(a[c]=void 0===n[c]&&void 0!==l?l[c]:n[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];a.children=l}return{$$typeof:t,type:e.type,key:o,ref:i,props:a,_owner:s}},n.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},n.createElement=E,n.createFactory=function(e){var n=E.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:c,render:e}},n.isValidElement=B,n.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:T}},n.memo=function(e,n){return{$$typeof:d,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=P.transition;P.transition={};try{e()}finally{P.transition=n}},n.unstable_act=I,n.useCallback=function(e,n){return O.current.useCallback(e,n)},n.useContext=function(e){return O.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return O.current.useDeferredValue(e)},n.useEffect=function(e,n){return O.current.useEffect(e,n)},n.useId=function(){return O.current.useId()},n.useImperativeHandle=function(e,n,t){return O.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return O.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return O.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return O.current.useMemo(e,n)},n.useReducer=function(e,n,t){return O.current.useReducer(e,n,t)},n.useRef=function(e){return O.current.useRef(e)},n.useState=function(e){return O.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return O.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return O.current.useTransition()},n.version="18.3.1"},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t}).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),n.push(u))}},n}},338:(e,n,t)=>{var r=t(961);n.H=r.createRoot,r.hydrateRoot},342:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const a=r(t(45)),o=r(t(825)),i=t(530);class s{constructor(e,{headers:n={},schema:t,fetch:r}={}){this.url=e,this.headers=Object.assign(Object.assign({},i.DEFAULT_HEADERS),n),this.schemaName=t,this.fetch=r}from(e){const n=new URL(`${this.url}/${e}`);return new a.default(n,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(e){return new s(this.url,{headers:this.headers,schema:e,fetch:this.fetch})}rpc(e,n={},{head:t=!1,get:r=!1,count:a}={}){let i;const s=new URL(`${this.url}/rpc/${e}`);let l;t||r?(i=t?"HEAD":"GET",Object.entries(n).filter(([e,n])=>void 0!==n).map(([e,n])=>[e,Array.isArray(n)?`{${n.join(",")}}`:`${n}`]).forEach(([e,n])=>{s.searchParams.append(e,n)})):(i="POST",l=n);const c=Object.assign({},this.headers);return a&&(c.Prefer=`count=${a}`),new o.default({method:i,url:s,headers:c,schema:this.schemaName,body:l,fetch:this.fetch,allowEmpty:!1})}}n.default=s},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},463:(e,n)=>{function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,a=e[r];if(!(0<o(a,n)))break e;e[r]=n,e[t]=a,t=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var s=2*(r+1)-1,l=e[s],c=s+1,u=e[c];if(0>o(l,t))c<a&&0>o(u,l)?(e[r]=u,e[c]=t,r=c):(e[r]=l,e[s]=t,r=s);else{if(!(c<a&&0>o(u,t)))break e;e[r]=u,e[c]=t,r=c}}}return n}function o(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;n.unstable_now=function(){return i.now()}}else{var s=Date,l=s.now();n.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,h=null,f=3,p=!1,g=!1,v=!1,m="function"==typeof setTimeout?setTimeout:null,A="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var n=r(u);null!==n;){if(null===n.callback)a(u);else{if(!(n.startTime<=e))break;a(u),n.sortIndex=n.expirationTime,t(c,n)}n=r(u)}}function w(e){if(v=!1,b(e),!g)if(null!==r(c))g=!0,P(C);else{var n=r(u);null!==n&&z(w,n.startTime-e)}}function C(e,t){g=!1,v&&(v=!1,A(B),B=-1),p=!0;var o=f;try{for(b(t),h=r(c);null!==h&&(!(h.expirationTime>t)||e&&!_());){var i=h.callback;if("function"==typeof i){h.callback=null,f=h.priorityLevel;var s=i(h.expirationTime<=t);t=n.unstable_now(),"function"==typeof s?h.callback=s:h===r(c)&&a(c),b(t)}else a(c);h=r(c)}if(null!==h)var l=!0;else{var d=r(u);null!==d&&z(w,d.startTime-t),l=!1}return l}finally{h=null,f=o,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,x=!1,E=null,B=-1,j=5,S=-1;function _(){return!(n.unstable_now()-S<j)}function N(){if(null!==E){var e=n.unstable_now();S=e;var t=!0;try{t=E(!0,e)}finally{t?k():(x=!1,E=null)}}else x=!1}if("function"==typeof y)k=function(){y(N)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,O=T.port2;T.port1.onmessage=N,k=function(){O.postMessage(null)}}else k=function(){m(N,0)};function P(e){E=e,x||(x=!0,k())}function z(e,t){B=m(function(){e(n.unstable_now())},t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){g||p||(g=!0,P(C))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):j=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return f},n.unstable_getFirstCallbackNode=function(){return r(c)},n.unstable_next=function(e){switch(f){case 1:case 2:case 3:var n=3;break;default:n=f}var t=f;f=n;try{return e()}finally{f=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=f;f=e;try{return n()}finally{f=t}},n.unstable_scheduleCallback=function(e,a,o){var i=n.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>i?(e.sortIndex=o,t(u,e),null===r(c)&&e===r(u)&&(v?(A(B),B=-1):v=!0,z(w,o-i))):(e.sortIndex=s,t(c,e),g||p||(g=!0,P(C))),e},n.unstable_shouldYield=_,n.unstable_wrapCallback=function(e){var n=f;return function(){var t=f;f=n;try{return e.apply(this,arguments)}finally{f=t}}}},519:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.version=void 0,n.version="0.0.0-automated"},530:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.DEFAULT_HEADERS=void 0;const r=t(519);n.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${r.version}`}},540:(e,n,t)=>{e.exports=t(287)},551:(e,n,t)=>{var r=t(540),a=t(982);function o(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,s={};function l(e,n){c(e,n),c(e+"Capture",n)}function c(e,n){for(s[e]=n,e=0;e<n.length;e++)i.add(n[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function g(e,n,t,r,a,o,i){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=o,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){v[e]=new g(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var n=e[0];v[n]=new g(n,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){v[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){v[e]=new g(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){v[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){v[e]=new g(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){v[e]=new g(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){v[e]=new g(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){v[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)});var m=/[\-:]([a-z])/g;function A(e){return e[1].toUpperCase()}function y(e,n,t,r){var a=v.hasOwnProperty(n)?v[n]:null;(null!==a?0!==a.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,a,r)&&(t=null),r||null===a?function(e){return!!d.call(p,e)||!d.call(f,e)&&(h.test(e)?p[e]=!0:(f[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):a.mustUseProperty?e[a.propertyName]=null===t?3!==a.type&&"":t:(n=a.attributeName,r=a.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(a=a.type)||4===a&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var n=e.replace(m,A);v[n]=new g(n,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var n=e.replace(m,A);v[n]=new g(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var n=e.replace(m,A);v[n]=new g(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)}),v.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)});var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),C=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),B=Symbol.for("react.provider"),j=Symbol.for("react.context"),S=Symbol.for("react.forward_ref"),_=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),O=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var P=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var z=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}var L,R=Object.assign;function D(e){if(void 0===L)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);L=n&&n[1]||""}return"\n"+L+e}var M=!1;function U(e,n){if(!e||M)return"";M=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var a=n.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,s=o.length-1;1<=i&&0<=s&&a[i]!==o[s];)s--;for(;1<=i&&0<=s;i--,s--)if(a[i]!==o[s]){if(1!==i||1!==s)do{if(i--,0>--s||a[i]!==o[s]){var l="\n"+a[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=i&&0<=s);break}}}finally{M=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?D(e):""}function F(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case C:return"Portal";case E:return"Profiler";case x:return"StrictMode";case _:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case j:return(e.displayName||"Context")+".Consumer";case B:return(e._context.displayName||"Context")+".Provider";case S:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(n=e.displayName||null)?n:$(e.type)||"Memo";case O:n=e._payload,e=e._init;try{return $(e(n))}catch(e){}}return null}function q(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(n);case 8:return n===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function V(e){e._valueTracker||(e._valueTracker=function(e){var n=H(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var a=t.get,o=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function Y(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function K(e,n){var t=n.checked;return R({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function J(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=W(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function Q(e,n){null!=(n=n.checked)&&y(e,"checked",n,!1)}function X(e,n){Q(e,n);var t=W(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,W(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function Z(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&G(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var a=0;a<t.length;a++)n["$"+t[a]]=!0;for(t=0;t<e.length;t++)a=n.hasOwnProperty("$"+e[t].value),e[t].selected!==a&&(e[t].selected=a),a&&r&&(e[t].defaultSelected=!0)}else{for(t=""+W(t),n=null,a=0;a<e.length;a++){if(e[a].value===t)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==n||e[a].disabled||(n=e[a])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(o(91));return R({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(o(92));if(ne(t)){if(1<t.length)throw Error(o(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:W(t)}}function oe(e,n){var t=W(n.value),r=W(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ie(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?se(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction(function(){return ue(e,n)})}:ue);function he(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function ge(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||fe.hasOwnProperty(e)&&fe[e]?(""+n).trim():n+"px"}function ve(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),a=ge(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,a):e[t]=a}}Object.keys(fe).forEach(function(e){pe.forEach(function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),fe[n]=fe[e]})});var me=R({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ae(e,n){if(n){if(me[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(o(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(o(62))}}function ye(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,ke=null,xe=null;function Ee(e){if(e=ya(e)){if("function"!=typeof Ce)throw Error(o(280));var n=e.stateNode;n&&(n=wa(n),Ce(e.stateNode,e.type,n))}}function Be(e){ke?xe?xe.push(e):xe=[e]:ke=e}function je(){if(ke){var e=ke,n=xe;if(xe=ke=null,Ee(e),n)for(e=0;e<n.length;e++)Ee(n[e])}}function Se(e,n){return e(n)}function _e(){}var Ne=!1;function Te(e,n,t){if(Ne)return e(n,t);Ne=!0;try{return Se(e,n,t)}finally{Ne=!1,(null!==ke||null!==xe)&&(_e(),je())}}function Oe(e,n){var t=e.stateNode;if(null===t)return null;var r=wa(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(o(231,n,typeof t));return t}var Pe=!1;if(u)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){Pe=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(ue){Pe=!1}function Ie(e,n,t,r,a,o,i,s,l){var c=Array.prototype.slice.call(arguments,3);try{n.apply(t,c)}catch(e){this.onError(e)}}var Le=!1,Re=null,De=!1,Me=null,Ue={onError:function(e){Le=!0,Re=e}};function Fe(e,n,t,r,a,o,i,s,l){Le=!1,Re=null,Ie.apply(Ue,arguments)}function $e(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function qe(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function We(e){if($e(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=$e(e)))throw Error(o(188));return n!==e?null:e}for(var t=e,r=n;;){var a=t.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){t=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===t)return We(a),e;if(i===r)return We(a),n;i=i.sibling}throw Error(o(188))}if(t.return!==r.return)t=a,r=i;else{for(var s=!1,l=a.child;l;){if(l===t){s=!0,t=a,r=i;break}if(l===r){s=!0,r=a,t=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===t){s=!0,t=i,r=a;break}if(l===r){s=!0,r=i,t=a;break}l=l.sibling}if(!s)throw Error(o(189))}}if(t.alternate!==r)throw Error(o(190))}if(3!==t.tag)throw Error(o(188));return t.stateNode.current===t?e:n}(e))?Ve(e):null}function Ve(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=Ve(e);if(null!==n)return n;e=e.sibling}return null}var Ye=a.unstable_scheduleCallback,Ge=a.unstable_cancelCallback,Ke=a.unstable_shouldYield,Je=a.unstable_requestPaint,Qe=a.unstable_now,Xe=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,en=a.unstable_UserBlockingPriority,nn=a.unstable_NormalPriority,tn=a.unstable_LowPriority,rn=a.unstable_IdlePriority,an=null,on=null,sn=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ln(e)/cn|0)|0},ln=Math.log,cn=Math.LN2,un=64,dn=4194304;function hn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function fn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&t;if(0!==i){var s=i&~a;0!==s?r=hn(s):0!==(o&=i)&&(r=hn(o))}else 0!==(i=t&~a)?r=hn(i):0!==o&&(r=hn(o));if(0===r)return 0;if(0!==n&&n!==r&&0===(n&a)&&((a=r&-r)>=(o=n&-n)||16===a&&4194240&o))return n;if(4&r&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)a=1<<(t=31-sn(n)),r|=e[t],n&=~a;return r}function pn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function gn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function vn(){var e=un;return!(4194240&(un<<=1))&&(un=64),e}function mn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function An(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-sn(n)]=t}function yn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-sn(t),a=1<<r;a&n|e[r]&n&&(e[r]|=n),t&=~a}}var bn=0;function wn(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var Cn,kn,xn,En,Bn,jn=!1,Sn=[],_n=null,Nn=null,Tn=null,On=new Map,Pn=new Map,zn=[],In="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ln(e,n){switch(e){case"focusin":case"focusout":_n=null;break;case"dragenter":case"dragleave":Nn=null;break;case"mouseover":case"mouseout":Tn=null;break;case"pointerover":case"pointerout":On.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":Pn.delete(n.pointerId)}}function Rn(e,n,t,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==n&&null!==(n=ya(n))&&kn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==a&&-1===n.indexOf(a)&&n.push(a),e)}function Dn(e){var n=Aa(e.target);if(null!==n){var t=$e(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=qe(t)))return e.blockedOn=n,void Bn(e.priority,function(){xn(t)})}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Mn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Jn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=ya(t))&&kn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);be=r,t.target.dispatchEvent(r),be=null,n.shift()}return!0}function Un(e,n,t){Mn(e)&&t.delete(n)}function Fn(){jn=!1,null!==_n&&Mn(_n)&&(_n=null),null!==Nn&&Mn(Nn)&&(Nn=null),null!==Tn&&Mn(Tn)&&(Tn=null),On.forEach(Un),Pn.forEach(Un)}function $n(e,n){e.blockedOn===n&&(e.blockedOn=null,jn||(jn=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Fn)))}function qn(e){function n(n){return $n(n,e)}if(0<Sn.length){$n(Sn[0],e);for(var t=1;t<Sn.length;t++){var r=Sn[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_n&&$n(_n,e),null!==Nn&&$n(Nn,e),null!==Tn&&$n(Tn,e),On.forEach(n),Pn.forEach(n),t=0;t<zn.length;t++)(r=zn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<zn.length&&null===(t=zn[0]).blockedOn;)Dn(t),null===t.blockedOn&&zn.shift()}var Wn=b.ReactCurrentBatchConfig,Hn=!0;function Vn(e,n,t,r){var a=bn,o=Wn.transition;Wn.transition=null;try{bn=1,Gn(e,n,t,r)}finally{bn=a,Wn.transition=o}}function Yn(e,n,t,r){var a=bn,o=Wn.transition;Wn.transition=null;try{bn=4,Gn(e,n,t,r)}finally{bn=a,Wn.transition=o}}function Gn(e,n,t,r){if(Hn){var a=Jn(e,n,t,r);if(null===a)Wr(e,n,r,Kn,t),Ln(e,r);else if(function(e,n,t,r,a){switch(n){case"focusin":return _n=Rn(_n,e,n,t,r,a),!0;case"dragenter":return Nn=Rn(Nn,e,n,t,r,a),!0;case"mouseover":return Tn=Rn(Tn,e,n,t,r,a),!0;case"pointerover":var o=a.pointerId;return On.set(o,Rn(On.get(o)||null,e,n,t,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Pn.set(o,Rn(Pn.get(o)||null,e,n,t,r,a)),!0}return!1}(a,e,n,t,r))r.stopPropagation();else if(Ln(e,r),4&n&&-1<In.indexOf(e)){for(;null!==a;){var o=ya(a);if(null!==o&&Cn(o),null===(o=Jn(e,n,t,r))&&Wr(e,n,r,Kn,t),o===a)break;a=o}null!==a&&r.stopPropagation()}else Wr(e,n,r,null,t)}}var Kn=null;function Jn(e,n,t,r){if(Kn=null,null!==(e=Aa(e=we(r))))if(null===(n=$e(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=qe(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Kn=e,null}function Qn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ze:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Xn=null,Zn=null,et=null;function nt(){if(et)return et;var e,n,t=Zn,r=t.length,a="value"in Xn?Xn.value:Xn.textContent,o=a.length;for(e=0;e<r&&t[e]===a[e];e++);var i=r-e;for(n=1;n<=i&&t[r-n]===a[o-n];n++);return et=a.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function at(){return!1}function ot(e){function n(n,t,r,a,o){for(var i in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(n=e[i],this[i]=n?n(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rt:at,this.isPropagationStopped=at,this}return R(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var it,st,lt,ct={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ut=ot(ct),dt=R({},ct,{view:0,detail:0}),ht=ot(dt),ft=R({},dt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Et,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lt&&(lt&&"mousemove"===e.type?(it=e.screenX-lt.screenX,st=e.screenY-lt.screenY):st=it=0,lt=e),it)},movementY:function(e){return"movementY"in e?e.movementY:st}}),pt=ot(ft),gt=ot(R({},ft,{dataTransfer:0})),vt=ot(R({},dt,{relatedTarget:0})),mt=ot(R({},ct,{animationName:0,elapsedTime:0,pseudoElement:0})),At=R({},ct,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yt=ot(At),bt=ot(R({},ct,{data:0})),wt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ct={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=kt[e])&&!!n[e]}function Et(){return xt}var Bt=R({},dt,{key:function(e){if(e.key){var n=wt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Ct[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Et,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),jt=ot(Bt),St=ot(R({},ft,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_t=ot(R({},dt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Et})),Nt=ot(R({},ct,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tt=R({},ft,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ot=ot(Tt),Pt=[9,13,27,32],zt=u&&"CompositionEvent"in window,It=null;u&&"documentMode"in document&&(It=document.documentMode);var Lt=u&&"TextEvent"in window&&!It,Rt=u&&(!zt||It&&8<It&&11>=It),Dt=String.fromCharCode(32),Mt=!1;function Ut(e,n){switch(e){case"keyup":return-1!==Pt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ft(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $t=!1,qt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!qt[e.type]:"textarea"===n}function Ht(e,n,t,r){Be(r),0<(n=Vr(n,"onChange")).length&&(t=new ut("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Vt=null,Yt=null;function Gt(e){Dr(e,0)}function Kt(e){if(Y(ba(e)))return e}function Jt(e,n){if("change"===e)return n}var Qt=!1;if(u){var Xt;if(u){var Zt="oninput"in document;if(!Zt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zt="function"==typeof er.oninput}Xt=Zt}else Xt=!1;Qt=Xt&&(!document.documentMode||9<document.documentMode)}function nr(){Vt&&(Vt.detachEvent("onpropertychange",tr),Yt=Vt=null)}function tr(e){if("value"===e.propertyName&&Kt(Yt)){var n=[];Ht(n,Yt,e,we(e)),Te(Gt,n)}}function rr(e,n,t){"focusin"===e?(nr(),Yt=t,(Vt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kt(Yt)}function or(e,n){if("click"===e)return Kt(n)}function ir(e,n){if("input"===e||"change"===e)return Kt(n)}var sr="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function lr(e,n){if(sr(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var a=t[r];if(!d.call(n,a)||!sr(e[a],n[a]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,n){var t,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?dr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function hr(){for(var e=window,n=G();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=G((e=n.contentWindow).document)}return n}function fr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function pr(e){var n=hr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&dr(t.ownerDocument.documentElement,t)){if(null!==r&&fr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var a=t.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=ur(t,o);var i=ur(t,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((n=n.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(n),e.extend(i.node,i.offset)):(n.setEnd(i.node,i.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=u&&"documentMode"in document&&11>=document.documentMode,vr=null,mr=null,Ar=null,yr=!1;function br(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;yr||null==vr||vr!==G(r)||(r="selectionStart"in(r=vr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Ar&&lr(Ar,r)||(Ar=r,0<(r=Vr(mr,"onSelect")).length&&(n=new ut("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=vr)))}function wr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var Cr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},kr={},xr={};function Er(e){if(kr[e])return kr[e];if(!Cr[e])return e;var n,t=Cr[e];for(n in t)if(t.hasOwnProperty(n)&&n in xr)return kr[e]=t[n];return e}u&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete Cr.animationend.animation,delete Cr.animationiteration.animation,delete Cr.animationstart.animation),"TransitionEvent"in window||delete Cr.transitionend.transition);var Br=Er("animationend"),jr=Er("animationiteration"),Sr=Er("animationstart"),_r=Er("transitionend"),Nr=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Or(e,n){Nr.set(e,n),l(n,[e])}for(var Pr=0;Pr<Tr.length;Pr++){var zr=Tr[Pr];Or(zr.toLowerCase(),"on"+(zr[0].toUpperCase()+zr.slice(1)))}Or(Br,"onAnimationEnd"),Or(jr,"onAnimationIteration"),Or(Sr,"onAnimationStart"),Or("dblclick","onDoubleClick"),Or("focusin","onFocus"),Or("focusout","onBlur"),Or(_r,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Rr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,a,i,s,l,c){if(Fe.apply(this,arguments),Le){if(!Le)throw Error(o(198));var u=Re;Le=!1,Re=null,De||(De=!0,Me=u)}}(r,n,void 0,e),e.currentTarget=null}function Dr(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],a=r.event;r=r.listeners;e:{var o=void 0;if(n)for(var i=r.length-1;0<=i;i--){var s=r[i],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&a.isPropagationStopped())break e;Rr(a,s,c),o=l}else for(i=0;i<r.length;i++){if(l=(s=r[i]).instance,c=s.currentTarget,s=s.listener,l!==o&&a.isPropagationStopped())break e;Rr(a,s,c),o=l}}}if(De)throw e=Me,De=!1,Me=null,e}function Mr(e,n){var t=n[ga];void 0===t&&(t=n[ga]=new Set);var r=e+"__bubble";t.has(r)||(qr(n,e,2,!1),t.add(r))}function Ur(e,n,t){var r=0;n&&(r|=4),qr(t,e,r,n)}var Fr="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[Fr]){e[Fr]=!0,i.forEach(function(n){"selectionchange"!==n&&(Lr.has(n)||Ur(n,!1,e),Ur(n,!0,e))});var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Fr]||(n[Fr]=!0,Ur("selectionchange",!1,n))}}function qr(e,n,t,r){switch(Qn(n)){case 1:var a=Vn;break;case 4:a=Yn;break;default:a=Gn}t=a.bind(null,n,t,e),a=void 0,!Pe||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(a=!0),r?void 0!==a?e.addEventListener(n,t,{capture:!0,passive:a}):e.addEventListener(n,t,!0):void 0!==a?e.addEventListener(n,t,{passive:a}):e.addEventListener(n,t,!1)}function Wr(e,n,t,r,a){var o=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===a||8===s.nodeType&&s.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===a||8===l.nodeType&&l.parentNode===a))return;i=i.return}for(;null!==s;){if(null===(i=Aa(s)))return;if(5===(l=i.tag)||6===l){r=o=i;continue e}s=s.parentNode}}r=r.return}Te(function(){var r=o,a=we(t),i=[];e:{var s=Nr.get(e);if(void 0!==s){var l=ut,c=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":l=jt;break;case"focusin":c="focus",l=vt;break;case"focusout":c="blur",l=vt;break;case"beforeblur":case"afterblur":l=vt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=_t;break;case Br:case jr:case Sr:l=mt;break;case _r:l=Nt;break;case"scroll":l=ht;break;case"wheel":l=Ot;break;case"copy":case"cut":case"paste":l=yt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=St}var u=!!(4&n),d=!u&&"scroll"===e,h=u?null!==s?s+"Capture":null:s;u=[];for(var f,p=r;null!==p;){var g=(f=p).stateNode;if(5===f.tag&&null!==g&&(f=g,null!==h&&null!=(g=Oe(p,h))&&u.push(Hr(p,g,f))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,t,a),i.push({event:s,listeners:u}))}}if(!(7&n)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||t===be||!(c=t.relatedTarget||t.fromElement)||!Aa(c)&&!c[pa])&&(l||s)&&(s=a.window===a?a:(s=a.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=t.relatedTarget||t.toElement)?Aa(c):null)&&(c!==(d=$e(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=pt,g="onMouseLeave",h="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=St,g="onPointerLeave",h="onPointerEnter",p="pointer"),d=null==l?s:ba(l),f=null==c?s:ba(c),(s=new u(g,p+"leave",l,t,a)).target=d,s.relatedTarget=f,g=null,Aa(a)===r&&((u=new u(h,p+"enter",c,t,a)).target=f,u.relatedTarget=d,g=u),d=g,l&&c)e:{for(h=c,p=0,f=u=l;f;f=Yr(f))p++;for(f=0,g=h;g;g=Yr(g))f++;for(;0<p-f;)u=Yr(u),p--;for(;0<f-p;)h=Yr(h),f--;for(;p--;){if(u===h||null!==h&&u===h.alternate)break e;u=Yr(u),h=Yr(h)}u=null}else u=null;null!==l&&Gr(i,s,l,u,!1),null!==c&&null!==d&&Gr(i,d,c,u,!0)}if("select"===(l=(s=r?ba(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var v=Jt;else if(Wt(s))if(Qt)v=ir;else{v=ar;var m=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(v=or);switch(v&&(v=v(e,r))?Ht(i,v,t,a):(m&&m(e,s,r),"focusout"===e&&(m=s._wrapperState)&&m.controlled&&"number"===s.type&&ee(s,"number",s.value)),m=r?ba(r):window,e){case"focusin":(Wt(m)||"true"===m.contentEditable)&&(vr=m,mr=r,Ar=null);break;case"focusout":Ar=mr=vr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(i,t,a);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":br(i,t,a)}var A;if(zt)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else $t?Ut(e,t)&&(y="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(y="onCompositionStart");y&&(Rt&&"ko"!==t.locale&&($t||"onCompositionStart"!==y?"onCompositionEnd"===y&&$t&&(A=nt()):(Zn="value"in(Xn=a)?Xn.value:Xn.textContent,$t=!0)),0<(m=Vr(r,y)).length&&(y=new bt(y,e,null,t,a),i.push({event:y,listeners:m}),(A||null!==(A=Ft(t)))&&(y.data=A))),(A=Lt?function(e,n){switch(e){case"compositionend":return Ft(n);case"keypress":return 32!==n.which?null:(Mt=!0,Dt);case"textInput":return(e=n.data)===Dt&&Mt?null:e;default:return null}}(e,t):function(e,n){if($t)return"compositionend"===e||!zt&&Ut(e,n)?(e=nt(),et=Zn=Xn=null,$t=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Rt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Vr(r,"onBeforeInput")).length&&(a=new bt("onBeforeInput","beforeinput",null,t,a),i.push({event:a,listeners:r}),a.data=A)}Dr(i,n)})}function Hr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Vr(e,n){for(var t=n+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Oe(e,t))&&r.unshift(Hr(e,o,a)),null!=(o=Oe(e,n))&&r.push(Hr(e,o,a))),e=e.return}return r}function Yr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,n,t,r,a){for(var o=n._reactName,i=[];null!==t&&t!==r;){var s=t,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,a?null!=(l=Oe(t,o))&&i.unshift(Hr(t,l,s)):a||null!=(l=Oe(t,o))&&i.push(Hr(t,l,s))),t=t.return}0!==i.length&&e.push({event:n,listeners:i})}var Kr=/\r\n?/g,Jr=/\u0000|\uFFFD/g;function Qr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Jr,"")}function Xr(e,n,t){if(n=Qr(n),Qr(e)!==n&&t)throw Error(o(425))}function Zr(){}var ea=null,na=null;function ta(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(sa)}:ra;function sa(e){setTimeout(function(){throw e})}function la(e,n){var t=n,r=0;do{var a=t.nextSibling;if(e.removeChild(t),a&&8===a.nodeType)if("/$"===(t=a.data)){if(0===r)return e.removeChild(a),void qn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=a}while(t);qn(n)}function ca(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function ua(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),ha="__reactFiber$"+da,fa="__reactProps$"+da,pa="__reactContainer$"+da,ga="__reactEvents$"+da,va="__reactListeners$"+da,ma="__reactHandles$"+da;function Aa(e){var n=e[ha];if(n)return n;for(var t=e.parentNode;t;){if(n=t[pa]||t[ha]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=ua(e);null!==e;){if(t=e[ha])return t;e=ua(e)}return n}t=(e=t).parentNode}return null}function ya(e){return!(e=e[ha]||e[pa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ba(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wa(e){return e[fa]||null}var Ca=[],ka=-1;function xa(e){return{current:e}}function Ea(e){0>ka||(e.current=Ca[ka],Ca[ka]=null,ka--)}function Ba(e,n){ka++,Ca[ka]=e.current,e.current=n}var ja={},Sa=xa(ja),_a=xa(!1),Na=ja;function Ta(e,n){var t=e.type.contextTypes;if(!t)return ja;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in t)o[a]=n[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=o),o}function Oa(e){return null!=e.childContextTypes}function Pa(){Ea(_a),Ea(Sa)}function za(e,n,t){if(Sa.current!==ja)throw Error(o(168));Ba(Sa,n),Ba(_a,t)}function Ia(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var a in r=r.getChildContext())if(!(a in n))throw Error(o(108,q(e)||"Unknown",a));return R({},t,r)}function La(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ja,Na=Sa.current,Ba(Sa,e),Ba(_a,_a.current),!0}function Ra(e,n,t){var r=e.stateNode;if(!r)throw Error(o(169));t?(e=Ia(e,n,Na),r.__reactInternalMemoizedMergedChildContext=e,Ea(_a),Ea(Sa),Ba(Sa,e)):Ea(_a),Ba(_a,t)}var Da=null,Ma=!1,Ua=!1;function Fa(e){null===Da?Da=[e]:Da.push(e)}function $a(){if(!Ua&&null!==Da){Ua=!0;var e=0,n=bn;try{var t=Da;for(bn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Da=null,Ma=!1}catch(n){throw null!==Da&&(Da=Da.slice(e+1)),Ye(Ze,$a),n}finally{bn=n,Ua=!1}}return null}var qa=[],Wa=0,Ha=null,Va=0,Ya=[],Ga=0,Ka=null,Ja=1,Qa="";function Xa(e,n){qa[Wa++]=Va,qa[Wa++]=Ha,Ha=e,Va=n}function Za(e,n,t){Ya[Ga++]=Ja,Ya[Ga++]=Qa,Ya[Ga++]=Ka,Ka=e;var r=Ja;e=Qa;var a=32-sn(r)-1;r&=~(1<<a),t+=1;var o=32-sn(n)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ja=1<<32-sn(n)+a|t<<a|r,Qa=o+e}else Ja=1<<o|t<<a|r,Qa=e}function eo(e){null!==e.return&&(Xa(e,1),Za(e,1,0))}function no(e){for(;e===Ha;)Ha=qa[--Wa],qa[Wa]=null,Va=qa[--Wa],qa[Wa]=null;for(;e===Ka;)Ka=Ya[--Ga],Ya[Ga]=null,Qa=Ya[--Ga],Ya[Ga]=null,Ja=Ya[--Ga],Ya[Ga]=null}var to=null,ro=null,ao=!1,oo=null;function io(e,n){var t=Tc(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function so(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,to=e,ro=ca(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,to=e,ro=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Ka?{id:Ja,overflow:Qa}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=Tc(18,null,null,0)).stateNode=n,t.return=e,e.child=t,to=e,ro=null,!0);default:return!1}}function lo(e){return!(!(1&e.mode)||128&e.flags)}function co(e){if(ao){var n=ro;if(n){var t=n;if(!so(e,n)){if(lo(e))throw Error(o(418));n=ca(t.nextSibling);var r=to;n&&so(e,n)?io(r,t):(e.flags=-4097&e.flags|2,ao=!1,to=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,to=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;to=e}function ho(e){if(e!==to)return!1;if(!ao)return uo(e),ao=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!ta(e.type,e.memoizedProps)),n&&(n=ro)){if(lo(e))throw fo(),Error(o(418));for(;n;)io(e,n),n=ca(n.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ro=ca(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ro=null}}else ro=to?ca(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ro;e;)e=ca(e.nextSibling)}function po(){ro=to=null,ao=!1}function go(e){null===oo?oo=[e]:oo.push(e)}var vo=b.ReactCurrentBatchConfig;function mo(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(o(309));var r=t.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===i?n.ref:(n=function(e){var n=a.refs;null===e?delete n[i]:n[i]=e},n._stringRef=i,n)}if("string"!=typeof e)throw Error(o(284));if(!t._owner)throw Error(o(290,e))}return e}function Ao(e,n){throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function yo(e){return(0,e._init)(e._payload)}function bo(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function a(e,n){return(e=Pc(e,n)).index=0,e.sibling=null,e}function i(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function s(n){return e&&null===n.alternate&&(n.flags|=2),n}function l(e,n,t,r){return null===n||6!==n.tag?((n=Rc(t,e.mode,r)).return=e,n):((n=a(n,t)).return=e,n)}function c(e,n,t,r){var o=t.type;return o===k?d(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===O&&yo(o)===n.type)?((r=a(n,t.props)).ref=mo(e,n,t),r.return=e,r):((r=zc(t.type,t.key,t.props,null,e.mode,r)).ref=mo(e,n,t),r.return=e,r)}function u(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Dc(t,e.mode,r)).return=e,n):((n=a(n,t.children||[])).return=e,n)}function d(e,n,t,r,o){return null===n||7!==n.tag?((n=Ic(t,e.mode,r,o)).return=e,n):((n=a(n,t)).return=e,n)}function h(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Rc(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return(t=zc(n.type,n.key,n.props,null,e.mode,t)).ref=mo(e,null,n),t.return=e,t;case C:return(n=Dc(n,e.mode,t)).return=e,n;case O:return h(e,(0,n._init)(n._payload),t)}if(ne(n)||I(n))return(n=Ic(n,e.mode,t,null)).return=e,n;Ao(e,n)}return null}function f(e,n,t,r){var a=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==a?null:l(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return t.key===a?c(e,n,t,r):null;case C:return t.key===a?u(e,n,t,r):null;case O:return f(e,n,(a=t._init)(t._payload),r)}if(ne(t)||I(t))return null!==a?null:d(e,n,t,r,null);Ao(e,t)}return null}function p(e,n,t,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return l(n,e=e.get(t)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(n,e=e.get(null===r.key?t:r.key)||null,r,a);case C:return u(n,e=e.get(null===r.key?t:r.key)||null,r,a);case O:return p(e,n,t,(0,r._init)(r._payload),a)}if(ne(r)||I(r))return d(n,e=e.get(t)||null,r,a,null);Ao(n,r)}return null}function g(a,o,s,l){for(var c=null,u=null,d=o,g=o=0,v=null;null!==d&&g<s.length;g++){d.index>g?(v=d,d=null):v=d.sibling;var m=f(a,d,s[g],l);if(null===m){null===d&&(d=v);break}e&&d&&null===m.alternate&&n(a,d),o=i(m,o,g),null===u?c=m:u.sibling=m,u=m,d=v}if(g===s.length)return t(a,d),ao&&Xa(a,g),c;if(null===d){for(;g<s.length;g++)null!==(d=h(a,s[g],l))&&(o=i(d,o,g),null===u?c=d:u.sibling=d,u=d);return ao&&Xa(a,g),c}for(d=r(a,d);g<s.length;g++)null!==(v=p(d,a,g,s[g],l))&&(e&&null!==v.alternate&&d.delete(null===v.key?g:v.key),o=i(v,o,g),null===u?c=v:u.sibling=v,u=v);return e&&d.forEach(function(e){return n(a,e)}),ao&&Xa(a,g),c}function v(a,s,l,c){var u=I(l);if("function"!=typeof u)throw Error(o(150));if(null==(l=u.call(l)))throw Error(o(151));for(var d=u=null,g=s,v=s=0,m=null,A=l.next();null!==g&&!A.done;v++,A=l.next()){g.index>v?(m=g,g=null):m=g.sibling;var y=f(a,g,A.value,c);if(null===y){null===g&&(g=m);break}e&&g&&null===y.alternate&&n(a,g),s=i(y,s,v),null===d?u=y:d.sibling=y,d=y,g=m}if(A.done)return t(a,g),ao&&Xa(a,v),u;if(null===g){for(;!A.done;v++,A=l.next())null!==(A=h(a,A.value,c))&&(s=i(A,s,v),null===d?u=A:d.sibling=A,d=A);return ao&&Xa(a,v),u}for(g=r(a,g);!A.done;v++,A=l.next())null!==(A=p(g,a,v,A.value,c))&&(e&&null!==A.alternate&&g.delete(null===A.key?v:A.key),s=i(A,s,v),null===d?u=A:d.sibling=A,d=A);return e&&g.forEach(function(e){return n(a,e)}),ao&&Xa(a,v),u}return function e(r,o,i,l){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case w:e:{for(var c=i.key,u=o;null!==u;){if(u.key===c){if((c=i.type)===k){if(7===u.tag){t(r,u.sibling),(o=a(u,i.props.children)).return=r,r=o;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===O&&yo(c)===u.type){t(r,u.sibling),(o=a(u,i.props)).ref=mo(r,u,i),o.return=r,r=o;break e}t(r,u);break}n(r,u),u=u.sibling}i.type===k?((o=Ic(i.props.children,r.mode,l,i.key)).return=r,r=o):((l=zc(i.type,i.key,i.props,null,r.mode,l)).ref=mo(r,o,i),l.return=r,r=l)}return s(r);case C:e:{for(u=i.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){t(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}t(r,o);break}n(r,o),o=o.sibling}(o=Dc(i,r.mode,l)).return=r,r=o}return s(r);case O:return e(r,o,(u=i._init)(i._payload),l)}if(ne(i))return g(r,o,i,l);if(I(i))return v(r,o,i,l);Ao(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(t(r,o.sibling),(o=a(o,i)).return=r,r=o):(t(r,o),(o=Rc(i,r.mode,l)).return=r,r=o),s(r)):t(r,o)}}var wo=bo(!0),Co=bo(!1),ko=xa(null),xo=null,Eo=null,Bo=null;function jo(){Bo=Eo=xo=null}function So(e){var n=ko.current;Ea(ko),e._currentValue=n}function _o(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function No(e,n){xo=e,Bo=Eo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&n)&&(ys=!0),e.firstContext=null)}function To(e){var n=e._currentValue;if(Bo!==e)if(e={context:e,memoizedValue:n,next:null},null===Eo){if(null===xo)throw Error(o(308));Eo=e,xo.dependencies={lanes:0,firstContext:e}}else Eo=Eo.next=e;return n}var Oo=null;function Po(e){null===Oo?Oo=[e]:Oo.push(e)}function zo(e,n,t,r){var a=n.interleaved;return null===a?(t.next=t,Po(n)):(t.next=a.next,a.next=t),n.interleaved=t,Io(e,r)}function Io(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var Lo=!1;function Ro(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Do(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Mo(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Uo(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Sl){var a=r.pending;return null===a?n.next=n:(n.next=a.next,a.next=n),r.pending=n,Io(e,t)}return null===(a=r.interleaved)?(n.next=n,Po(r)):(n.next=a.next,a.next=n),r.interleaved=n,Io(e,t)}function Fo(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}function $o(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var a=null,o=null;if(null!==(t=t.firstBaseUpdate)){do{var i={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===o?a=o=i:o=o.next=i,t=t.next}while(null!==t);null===o?a=o=n:o=o.next=n}else a=o=n;return t={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function qo(e,n,t,r){var a=e.updateQueue;Lo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var l=s,c=l.next;l.next=null,null===i?o=c:i.next=c,i=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==o){var d=a.baseState;for(i=0,u=c=l=null,s=o;;){var h=s.lane,f=s.eventTime;if((r&h)===h){null!==u&&(u=u.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,g=s;switch(h=n,f=t,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(f,d,h);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(h="function"==typeof(p=g.payload)?p.call(f,d,h):p))break e;d=R({},d,h);break e;case 2:Lo=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(h=a.effects)?a.effects=[s]:h.push(s))}else f={eventTime:f,lane:h,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=f,l=d):u=u.next=f,i|=h;if(null===(s=s.next)){if(null===(s=a.shared.pending))break;s=(h=s).next,h.next=null,a.lastBaseUpdate=h,a.shared.pending=null}}if(null===u&&(l=d),a.baseState=l,a.firstBaseUpdate=c,a.lastBaseUpdate=u,null!==(n=a.shared.interleaved)){a=n;do{i|=a.lane,a=a.next}while(a!==n)}else null===o&&(a.shared.lanes=0);Ll|=i,e.lanes=i,e.memoizedState=d}}function Wo(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],a=r.callback;if(null!==a){if(r.callback=null,r=t,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Ho={},Vo=xa(Ho),Yo=xa(Ho),Go=xa(Ho);function Ko(e){if(e===Ho)throw Error(o(174));return e}function Jo(e,n){switch(Ba(Go,n),Ba(Yo,e),Ba(Vo,Ho),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:le(null,"");break;default:n=le(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Ea(Vo),Ba(Vo,n)}function Qo(){Ea(Vo),Ea(Yo),Ea(Go)}function Xo(e){Ko(Go.current);var n=Ko(Vo.current),t=le(n,e.type);n!==t&&(Ba(Yo,e),Ba(Vo,t))}function Zo(e){Yo.current===e&&(Ea(Vo),Ea(Yo))}var ei=xa(0);function ni(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ti=[];function ri(){for(var e=0;e<ti.length;e++)ti[e]._workInProgressVersionPrimary=null;ti.length=0}var ai=b.ReactCurrentDispatcher,oi=b.ReactCurrentBatchConfig,ii=0,si=null,li=null,ci=null,ui=!1,di=!1,hi=0,fi=0;function pi(){throw Error(o(321))}function gi(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!sr(e[t],n[t]))return!1;return!0}function vi(e,n,t,r,a,i){if(ii=i,si=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,ai.current=null===e||null===e.memoizedState?Zi:es,e=t(r,a),di){i=0;do{if(di=!1,hi=0,25<=i)throw Error(o(301));i+=1,ci=li=null,n.updateQueue=null,ai.current=ns,e=t(r,a)}while(di)}if(ai.current=Xi,n=null!==li&&null!==li.next,ii=0,ci=li=si=null,ui=!1,n)throw Error(o(300));return e}function mi(){var e=0!==hi;return hi=0,e}function Ai(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ci?si.memoizedState=ci=e:ci=ci.next=e,ci}function yi(){if(null===li){var e=si.alternate;e=null!==e?e.memoizedState:null}else e=li.next;var n=null===ci?si.memoizedState:ci.next;if(null!==n)ci=n,li=e;else{if(null===e)throw Error(o(310));e={memoizedState:(li=e).memoizedState,baseState:li.baseState,baseQueue:li.baseQueue,queue:li.queue,next:null},null===ci?si.memoizedState=ci=e:ci=ci.next=e}return ci}function bi(e,n){return"function"==typeof n?n(e):n}function wi(e){var n=yi(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=li,a=r.baseQueue,i=t.pending;if(null!==i){if(null!==a){var s=a.next;a.next=i.next,i.next=s}r.baseQueue=a=i,t.pending=null}if(null!==a){i=a.next,r=r.baseState;var l=s=null,c=null,u=i;do{var d=u.lane;if((ii&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var h={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=h,s=r):c=c.next=h,si.lanes|=d,Ll|=d}u=u.next}while(null!==u&&u!==i);null===c?s=r:c.next=l,sr(r,n.memoizedState)||(ys=!0),n.memoizedState=r,n.baseState=s,n.baseQueue=c,t.lastRenderedState=r}if(null!==(e=t.interleaved)){a=e;do{i=a.lane,si.lanes|=i,Ll|=i,a=a.next}while(a!==e)}else null===a&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function Ci(e){var n=yi(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=t.dispatch,a=t.pending,i=n.memoizedState;if(null!==a){t.pending=null;var s=a=a.next;do{i=e(i,s.action),s=s.next}while(s!==a);sr(i,n.memoizedState)||(ys=!0),n.memoizedState=i,null===n.baseQueue&&(n.baseState=i),t.lastRenderedState=i}return[i,r]}function ki(){}function xi(e,n){var t=si,r=yi(),a=n(),i=!sr(r.memoizedState,a);if(i&&(r.memoizedState=a,ys=!0),r=r.queue,Li(ji.bind(null,t,r,e),[e]),r.getSnapshot!==n||i||null!==ci&&1&ci.memoizedState.tag){if(t.flags|=2048,Ti(9,Bi.bind(null,t,r,a,n),void 0,null),null===_l)throw Error(o(349));30&ii||Ei(t,n,a)}return a}function Ei(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=si.updateQueue)?(n={lastEffect:null,stores:null},si.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Bi(e,n,t,r){n.value=t,n.getSnapshot=r,Si(n)&&_i(e)}function ji(e,n,t){return t(function(){Si(n)&&_i(e)})}function Si(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!sr(e,t)}catch(e){return!0}}function _i(e){var n=Io(e,1);null!==n&&tc(n,e,1,-1)}function Ni(e){var n=Ai();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:bi,lastRenderedState:e},n.queue=e,e=e.dispatch=Gi.bind(null,si,e),[n.memoizedState,e]}function Ti(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=si.updateQueue)?(n={lastEffect:null,stores:null},si.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Oi(){return yi().memoizedState}function Pi(e,n,t,r){var a=Ai();si.flags|=e,a.memoizedState=Ti(1|n,t,void 0,void 0===r?null:r)}function zi(e,n,t,r){var a=yi();r=void 0===r?null:r;var o=void 0;if(null!==li){var i=li.memoizedState;if(o=i.destroy,null!==r&&gi(r,i.deps))return void(a.memoizedState=Ti(n,t,o,r))}si.flags|=e,a.memoizedState=Ti(1|n,t,o,r)}function Ii(e,n){return Pi(8390656,8,e,n)}function Li(e,n){return zi(2048,8,e,n)}function Ri(e,n){return zi(4,2,e,n)}function Di(e,n){return zi(4,4,e,n)}function Mi(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Ui(e,n,t){return t=null!=t?t.concat([e]):null,zi(4,4,Mi.bind(null,n,e),t)}function Fi(){}function $i(e,n){var t=yi();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&gi(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function qi(e,n){var t=yi();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&gi(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Wi(e,n,t){return 21&ii?(sr(t,n)||(t=vn(),si.lanes|=t,Ll|=t,e.baseState=!0),n):(e.baseState&&(e.baseState=!1,ys=!0),e.memoizedState=t)}function Hi(e,n){var t=bn;bn=0!==t&&4>t?t:4,e(!0);var r=oi.transition;oi.transition={};try{e(!1),n()}finally{bn=t,oi.transition=r}}function Vi(){return yi().memoizedState}function Yi(e,n,t){var r=nc(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},Ki(e)?Ji(n,t):null!==(t=zo(e,n,t,r))&&(tc(t,e,r,ec()),Qi(t,n,r))}function Gi(e,n,t){var r=nc(e),a={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(Ki(e))Ji(n,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=n.lastRenderedReducer))try{var i=n.lastRenderedState,s=o(i,t);if(a.hasEagerState=!0,a.eagerState=s,sr(s,i)){var l=n.interleaved;return null===l?(a.next=a,Po(n)):(a.next=l.next,l.next=a),void(n.interleaved=a)}}catch(e){}null!==(t=zo(e,n,a,r))&&(tc(t,e,r,a=ec()),Qi(t,n,r))}}function Ki(e){var n=e.alternate;return e===si||null!==n&&n===si}function Ji(e,n){di=ui=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function Qi(e,n,t){if(4194240&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,yn(e,t)}}var Xi={readContext:To,useCallback:pi,useContext:pi,useEffect:pi,useImperativeHandle:pi,useInsertionEffect:pi,useLayoutEffect:pi,useMemo:pi,useReducer:pi,useRef:pi,useState:pi,useDebugValue:pi,useDeferredValue:pi,useTransition:pi,useMutableSource:pi,useSyncExternalStore:pi,useId:pi,unstable_isNewReconciler:!1},Zi={readContext:To,useCallback:function(e,n){return Ai().memoizedState=[e,void 0===n?null:n],e},useContext:To,useEffect:Ii,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,Pi(4194308,4,Mi.bind(null,n,e),t)},useLayoutEffect:function(e,n){return Pi(4194308,4,e,n)},useInsertionEffect:function(e,n){return Pi(4,2,e,n)},useMemo:function(e,n){var t=Ai();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=Ai();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=Yi.bind(null,si,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ai().memoizedState=e},useState:Ni,useDebugValue:Fi,useDeferredValue:function(e){return Ai().memoizedState=e},useTransition:function(){var e=Ni(!1),n=e[0];return e=Hi.bind(null,e[1]),Ai().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=si,a=Ai();if(ao){if(void 0===t)throw Error(o(407));t=t()}else{if(t=n(),null===_l)throw Error(o(349));30&ii||Ei(r,n,t)}a.memoizedState=t;var i={value:t,getSnapshot:n};return a.queue=i,Ii(ji.bind(null,r,i,e),[e]),r.flags|=2048,Ti(9,Bi.bind(null,r,i,t,n),void 0,null),t},useId:function(){var e=Ai(),n=_l.identifierPrefix;if(ao){var t=Qa;n=":"+n+"R"+(t=(Ja&~(1<<32-sn(Ja)-1)).toString(32)+t),0<(t=hi++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=fi++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},es={readContext:To,useCallback:$i,useContext:To,useEffect:Li,useImperativeHandle:Ui,useInsertionEffect:Ri,useLayoutEffect:Di,useMemo:qi,useReducer:wi,useRef:Oi,useState:function(){return wi(bi)},useDebugValue:Fi,useDeferredValue:function(e){return Wi(yi(),li.memoizedState,e)},useTransition:function(){return[wi(bi)[0],yi().memoizedState]},useMutableSource:ki,useSyncExternalStore:xi,useId:Vi,unstable_isNewReconciler:!1},ns={readContext:To,useCallback:$i,useContext:To,useEffect:Li,useImperativeHandle:Ui,useInsertionEffect:Ri,useLayoutEffect:Di,useMemo:qi,useReducer:Ci,useRef:Oi,useState:function(){return Ci(bi)},useDebugValue:Fi,useDeferredValue:function(e){var n=yi();return null===li?n.memoizedState=e:Wi(n,li.memoizedState,e)},useTransition:function(){return[Ci(bi)[0],yi().memoizedState]},useMutableSource:ki,useSyncExternalStore:xi,useId:Vi,unstable_isNewReconciler:!1};function ts(e,n){if(e&&e.defaultProps){for(var t in n=R({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}function rs(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:R({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var as={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=ec(),a=nc(e),o=Mo(r,a);o.payload=n,null!=t&&(o.callback=t),null!==(n=Uo(e,o,a))&&(tc(n,e,a,r),Fo(n,e,a))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=ec(),a=nc(e),o=Mo(r,a);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=Uo(e,o,a))&&(tc(n,e,a,r),Fo(n,e,a))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=ec(),r=nc(e),a=Mo(t,r);a.tag=2,null!=n&&(a.callback=n),null!==(n=Uo(e,a,r))&&(tc(n,e,r,t),Fo(n,e,r))}};function os(e,n,t,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(n.prototype&&n.prototype.isPureReactComponent&&lr(t,r)&&lr(a,o))}function is(e,n,t){var r=!1,a=ja,o=n.contextType;return"object"==typeof o&&null!==o?o=To(o):(a=Oa(n)?Na:Sa.current,o=(r=null!=(r=n.contextTypes))?Ta(e,a):ja),n=new n(t,o),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=as,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),n}function ss(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&as.enqueueReplaceState(n,n.state,null)}function ls(e,n,t,r){var a=e.stateNode;a.props=t,a.state=e.memoizedState,a.refs={},Ro(e);var o=n.contextType;"object"==typeof o&&null!==o?a.context=To(o):(o=Oa(n)?Na:Sa.current,a.context=Ta(e,o)),a.state=e.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(rs(e,n,o,t),a.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(n=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),n!==a.state&&as.enqueueReplaceState(a,a.state,null),qo(e,t,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function cs(e,n){try{var t="",r=n;do{t+=F(r),r=r.return}while(r);var a=t}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:a,digest:null}}function us(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function ds(e,n){try{console.error(n.value)}catch(e){setTimeout(function(){throw e})}}var hs="function"==typeof WeakMap?WeakMap:Map;function fs(e,n,t){(t=Mo(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Wl||(Wl=!0,Hl=r),ds(0,n)},t}function ps(e,n,t){(t=Mo(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=n.value;t.payload=function(){return r(a)},t.callback=function(){ds(0,n)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(t.callback=function(){ds(0,n),"function"!=typeof r&&(null===Vl?Vl=new Set([this]):Vl.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function gs(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new hs;var a=new Set;r.set(n,a)}else void 0===(a=r.get(n))&&(a=new Set,r.set(n,a));a.has(t)||(a.add(t),e=Ec.bind(null,e,n,t),n.then(e,e))}function vs(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function ms(e,n,t,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Mo(-1,1)).tag=2,Uo(t,n,1))),t.lanes|=1),e)}var As=b.ReactCurrentOwner,ys=!1;function bs(e,n,t,r){n.child=null===e?Co(n,null,t,r):wo(n,e.child,t,r)}function ws(e,n,t,r,a){t=t.render;var o=n.ref;return No(n,a),r=vi(e,n,t,r,o,a),t=mi(),null===e||ys?(ao&&t&&eo(n),n.flags|=1,bs(e,n,r,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Ws(e,n,a))}function Cs(e,n,t,r,a){if(null===e){var o=t.type;return"function"!=typeof o||Oc(o)||void 0!==o.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=zc(t.type,null,r,n,n.mode,a)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=o,ks(e,n,o,r,a))}if(o=e.child,0===(e.lanes&a)){var i=o.memoizedProps;if((t=null!==(t=t.compare)?t:lr)(i,r)&&e.ref===n.ref)return Ws(e,n,a)}return n.flags|=1,(e=Pc(o,r)).ref=n.ref,e.return=n,n.child=e}function ks(e,n,t,r,a){if(null!==e){var o=e.memoizedProps;if(lr(o,r)&&e.ref===n.ref){if(ys=!1,n.pendingProps=r=o,0===(e.lanes&a))return n.lanes=e.lanes,Ws(e,n,a);131072&e.flags&&(ys=!0)}}return Bs(e,n,t,r,a)}function xs(e,n,t){var r=n.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&n.mode){if(!(1073741824&t))return e=null!==o?o.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,Ba(Pl,Ol),Ol|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:t,Ba(Pl,Ol),Ol|=r}else n.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ba(Pl,Ol),Ol|=t;else null!==o?(r=o.baseLanes|t,n.memoizedState=null):r=t,Ba(Pl,Ol),Ol|=r;return bs(e,n,a,t),n.child}function Es(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Bs(e,n,t,r,a){var o=Oa(t)?Na:Sa.current;return o=Ta(n,o),No(n,a),t=vi(e,n,t,r,o,a),r=mi(),null===e||ys?(ao&&r&&eo(n),n.flags|=1,bs(e,n,t,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Ws(e,n,a))}function js(e,n,t,r,a){if(Oa(t)){var o=!0;La(n)}else o=!1;if(No(n,a),null===n.stateNode)qs(e,n),is(n,t,r),ls(n,t,r,a),r=!0;else if(null===e){var i=n.stateNode,s=n.memoizedProps;i.props=s;var l=i.context,c=t.contextType;c="object"==typeof c&&null!==c?To(c):Ta(n,c=Oa(t)?Na:Sa.current);var u=t.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||l!==c)&&ss(n,i,r,c),Lo=!1;var h=n.memoizedState;i.state=h,qo(n,r,i,a),l=n.memoizedState,s!==r||h!==l||_a.current||Lo?("function"==typeof u&&(rs(n,t,u,r),l=n.memoizedState),(s=Lo||os(n,t,s,r,h,l,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(n.flags|=4194308)):("function"==typeof i.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=l),i.props=r,i.state=l,i.context=c,r=s):("function"==typeof i.componentDidMount&&(n.flags|=4194308),r=!1)}else{i=n.stateNode,Do(e,n),s=n.memoizedProps,c=n.type===n.elementType?s:ts(n.type,s),i.props=c,d=n.pendingProps,h=i.context,l="object"==typeof(l=t.contextType)&&null!==l?To(l):Ta(n,l=Oa(t)?Na:Sa.current);var f=t.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==d||h!==l)&&ss(n,i,r,l),Lo=!1,h=n.memoizedState,i.state=h,qo(n,r,i,a);var p=n.memoizedState;s!==d||h!==p||_a.current||Lo?("function"==typeof f&&(rs(n,t,f,r),p=n.memoizedState),(c=Lo||os(n,t,c,r,h,p,l)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof i.componentDidUpdate&&(n.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=p),i.props=r,i.state=p,i.context=l,r=c):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(n.flags|=1024),r=!1)}return Ss(e,n,t,r,o,a)}function Ss(e,n,t,r,a,o){Es(e,n);var i=!!(128&n.flags);if(!r&&!i)return a&&Ra(n,t,!1),Ws(e,n,o);r=n.stateNode,As.current=n;var s=i&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&i?(n.child=wo(n,e.child,null,o),n.child=wo(n,null,s,o)):bs(e,n,s,o),n.memoizedState=r.state,a&&Ra(n,t,!0),n.child}function _s(e){var n=e.stateNode;n.pendingContext?za(0,n.pendingContext,n.pendingContext!==n.context):n.context&&za(0,n.context,!1),Jo(e,n.containerInfo)}function Ns(e,n,t,r,a){return po(),go(a),n.flags|=256,bs(e,n,t,r),n.child}var Ts,Os,Ps,zs,Is={dehydrated:null,treeContext:null,retryLane:0};function Ls(e){return{baseLanes:e,cachePool:null,transitions:null}}function Rs(e,n,t){var r,a=n.pendingProps,i=ei.current,s=!1,l=!!(128&n.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(s=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Ba(ei,1&i),null===e)return co(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(1&n.mode?"$!"===e.data?n.lanes=8:n.lanes=1073741824:n.lanes=1,null):(l=a.children,e=a.fallback,s?(a=n.mode,s=n.child,l={mode:"hidden",children:l},1&a||null===s?s=Lc(l,a,0,null):(s.childLanes=0,s.pendingProps=l),e=Ic(e,a,t,null),s.return=n,e.return=n,s.sibling=e,n.child=s,n.child.memoizedState=Ls(t),n.memoizedState=Is,e):Ds(n,l));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,n,t,r,a,i,s){if(t)return 256&n.flags?(n.flags&=-257,Ms(e,n,s,r=us(Error(o(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(i=r.fallback,a=n.mode,r=Lc({mode:"visible",children:r.children},a,0,null),(i=Ic(i,a,s,null)).flags|=2,r.return=n,i.return=n,r.sibling=i,n.child=r,1&n.mode&&wo(n,e.child,null,s),n.child.memoizedState=Ls(s),n.memoizedState=Is,i);if(!(1&n.mode))return Ms(e,n,s,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var l=r.dgst;return r=l,Ms(e,n,s,r=us(i=Error(o(419)),r,void 0))}if(l=0!==(s&e.childLanes),ys||l){if(null!==(r=_l)){switch(s&-s){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!==(a&(r.suspendedLanes|s))?0:a)&&a!==i.retryLane&&(i.retryLane=a,Io(e,a),tc(r,e,a,-1))}return gc(),Ms(e,n,s,r=us(Error(o(421))))}return"$?"===a.data?(n.flags|=128,n.child=e.child,n=jc.bind(null,e),a._reactRetry=n,null):(e=i.treeContext,ro=ca(a.nextSibling),to=n,ao=!0,oo=null,null!==e&&(Ya[Ga++]=Ja,Ya[Ga++]=Qa,Ya[Ga++]=Ka,Ja=e.id,Qa=e.overflow,Ka=n),(n=Ds(n,r.children)).flags|=4096,n)}(e,n,l,a,r,i,t);if(s){s=a.fallback,l=n.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:a.children};return 1&l||n.child===i?(a=Pc(i,c)).subtreeFlags=14680064&i.subtreeFlags:((a=n.child).childLanes=0,a.pendingProps=c,n.deletions=null),null!==r?s=Pc(r,s):(s=Ic(s,l,t,null)).flags|=2,s.return=n,a.return=n,a.sibling=s,n.child=a,a=s,s=n.child,l=null===(l=e.child.memoizedState)?Ls(t):{baseLanes:l.baseLanes|t,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~t,n.memoizedState=Is,a}return e=(s=e.child).sibling,a=Pc(s,{mode:"visible",children:a.children}),!(1&n.mode)&&(a.lanes=t),a.return=n,a.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=a,n.memoizedState=null,a}function Ds(e,n){return(n=Lc({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Ms(e,n,t,r){return null!==r&&go(r),wo(n,e.child,null,t),(e=Ds(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Us(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),_o(e.return,n,t)}function Fs(e,n,t,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:a}:(o.isBackwards=n,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=t,o.tailMode=a)}function $s(e,n,t){var r=n.pendingProps,a=r.revealOrder,o=r.tail;if(bs(e,n,r.children,t),2&(r=ei.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Us(e,t,n);else if(19===e.tag)Us(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ba(ei,r),1&n.mode)switch(a){case"forwards":for(t=n.child,a=null;null!==t;)null!==(e=t.alternate)&&null===ni(e)&&(a=t),t=t.sibling;null===(t=a)?(a=n.child,n.child=null):(a=t.sibling,t.sibling=null),Fs(n,!1,a,t,o);break;case"backwards":for(t=null,a=n.child,n.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ni(e)){n.child=a;break}e=a.sibling,a.sibling=t,t=a,a=e}Fs(n,!0,t,null,o);break;case"together":Fs(n,!1,null,null,void 0);break;default:n.memoizedState=null}else n.memoizedState=null;return n.child}function qs(e,n){!(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Ws(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Ll|=n.lanes,0===(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(o(153));if(null!==n.child){for(t=Pc(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Pc(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Hs(e,n){if(!ao)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Vs(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Ys(e,n,t){var r=n.pendingProps;switch(no(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Vs(n),null;case 1:case 17:return Oa(n.type)&&Pa(),Vs(n),null;case 3:return r=n.stateNode,Qo(),Ea(_a),Ea(Sa),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(ho(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,null!==oo&&(ic(oo),oo=null))),Os(e,n),Vs(n),null;case 5:Zo(n);var a=Ko(Go.current);if(t=n.type,null!==e&&null!=n.stateNode)Ps(e,n,t,r,a),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(o(166));return Vs(n),null}if(e=Ko(Vo.current),ho(n)){r=n.stateNode,t=n.type;var i=n.memoizedProps;switch(r[ha]=n,r[fa]=i,e=!!(1&n.mode),t){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(a=0;a<Ir.length;a++)Mr(Ir[a],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":J(r,i),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Mr("invalid",r);break;case"textarea":ae(r,i),Mr("invalid",r)}for(var l in Ae(t,i),a=null,i)if(i.hasOwnProperty(l)){var c=i[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),a=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Mr("scroll",r)}switch(t){case"input":V(r),Z(r,i,!0);break;case"textarea":V(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=a,n.updateQueue=r,null!==r&&(n.flags|=4)}else{l=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(t,{is:r.is}):(e=l.createElement(t),"select"===t&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,t),e[ha]=n,e[fa]=r,Ts(e,n,!1,!1),n.stateNode=e;e:{switch(l=ye(t,r),t){case"dialog":Mr("cancel",e),Mr("close",e),a=r;break;case"iframe":case"object":case"embed":Mr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Ir.length;a++)Mr(Ir[a],e);a=r;break;case"source":Mr("error",e),a=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),a=r;break;case"details":Mr("toggle",e),a=r;break;case"input":J(e,r),a=K(e,r),Mr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=R({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Mr("invalid",e)}for(i in Ae(t,a),c=a)if(c.hasOwnProperty(i)){var u=c[i];"style"===i?ve(e,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===i?"string"==typeof u?("textarea"!==t||""!==u)&&he(e,u):"number"==typeof u&&he(e,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(s.hasOwnProperty(i)?null!=u&&"onScroll"===i&&Mr("scroll",e):null!=u&&y(e,i,u,l))}switch(t){case"input":V(e),Z(e,r,!1);break;case"textarea":V(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?te(e,!!r.multiple,i,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Vs(n),null;case 6:if(e&&null!=n.stateNode)zs(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(o(166));if(t=Ko(Go.current),Ko(Vo.current),ho(n)){if(r=n.stateNode,t=n.memoizedProps,r[ha]=n,(i=r.nodeValue!==t)&&null!==(e=to))switch(e.tag){case 3:Xr(r.nodeValue,t,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,t,!!(1&e.mode))}i&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[ha]=n,n.stateNode=r}return Vs(n),null;case 13:if(Ea(ei),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&n.mode&&!(128&n.flags))fo(),po(),n.flags|=98560,i=!1;else if(i=ho(n),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=n.memoizedState)?i.dehydrated:null))throw Error(o(317));i[ha]=n}else po(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Vs(n),i=!1}else null!==oo&&(ic(oo),oo=null),i=!0;if(!i)return 65536&n.flags?n:null}return 128&n.flags?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,1&n.mode&&(null===e||1&ei.current?0===zl&&(zl=3):gc())),null!==n.updateQueue&&(n.flags|=4),Vs(n),null);case 4:return Qo(),Os(e,n),null===e&&$r(n.stateNode.containerInfo),Vs(n),null;case 10:return So(n.type._context),Vs(n),null;case 19:if(Ea(ei),null===(i=n.memoizedState))return Vs(n),null;if(r=!!(128&n.flags),null===(l=i.rendering))if(r)Hs(i,!1);else{if(0!==zl||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(l=ni(e))){for(n.flags|=128,Hs(i,!1),null!==(r=l.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(i=t).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return Ba(ei,1&ei.current|2),n.child}e=e.sibling}null!==i.tail&&Qe()>$l&&(n.flags|=128,r=!0,Hs(i,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=ni(l))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Hs(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!ao)return Vs(n),null}else 2*Qe()-i.renderingStartTime>$l&&1073741824!==t&&(n.flags|=128,r=!0,Hs(i,!1),n.lanes=4194304);i.isBackwards?(l.sibling=n.child,n.child=l):(null!==(t=i.last)?t.sibling=l:n.child=l,i.last=l)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.renderingStartTime=Qe(),n.sibling=null,t=ei.current,Ba(ei,r?1&t|2:1&t),n):(Vs(n),null);case 22:case 23:return dc(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&1&n.mode?!!(1073741824&Ol)&&(Vs(n),6&n.subtreeFlags&&(n.flags|=8192)):Vs(n),null;case 24:case 25:return null}throw Error(o(156,n.tag))}function Gs(e,n){switch(no(n),n.tag){case 1:return Oa(n.type)&&Pa(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return Qo(),Ea(_a),Ea(Sa),ri(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 5:return Zo(n),null;case 13:if(Ea(ei),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(o(340));po()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Ea(ei),null;case 4:return Qo(),null;case 10:return So(n.type._context),null;case 22:case 23:return dc(),null;default:return null}}Ts=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Os=function(){},Ps=function(e,n,t,r){var a=e.memoizedProps;if(a!==r){e=n.stateNode,Ko(Vo.current);var o,i=null;switch(t){case"input":a=K(e,a),r=K(e,r),i=[];break;case"select":a=R({},a,{value:void 0}),r=R({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(u in Ae(t,r),t=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u){var l=a[u];for(o in l)l.hasOwnProperty(o)&&(t||(t={}),t[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(o in l)!l.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(t||(t={}),t[o]="");for(o in c)c.hasOwnProperty(o)&&l[o]!==c[o]&&(t||(t={}),t[o]=c[o])}else t||(i||(i=[]),i.push(u,t)),t=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(i=i||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Mr("scroll",e),i||l===c||(i=[])):(i=i||[]).push(u,c))}t&&(i=i||[]).push("style",t);var u=i;(n.updateQueue=u)&&(n.flags|=4)}},zs=function(e,n,t,r){t!==r&&(n.flags|=4)};var Ks=!1,Js=!1,Qs="function"==typeof WeakSet?WeakSet:Set,Xs=null;function Zs(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){xc(e,n,t)}else t.current=null}function el(e,n,t){try{t()}catch(t){xc(e,n,t)}}var nl=!1;function tl(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&el(n,t,o)}a=a.next}while(a!==r)}}function rl(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function al(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function ol(e){var n=e.alternate;null!==n&&(e.alternate=null,ol(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[ha],delete n[fa],delete n[ga],delete n[va],delete n[ma]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function il(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||il(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(ll(e,n,t),e=e.sibling;null!==e;)ll(e,n,t),e=e.sibling}function cl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,n,t),e=e.sibling;null!==e;)cl(e,n,t),e=e.sibling}var ul=null,dl=!1;function hl(e,n,t){for(t=t.child;null!==t;)fl(e,n,t),t=t.sibling}function fl(e,n,t){if(on&&"function"==typeof on.onCommitFiberUnmount)try{on.onCommitFiberUnmount(an,t)}catch(e){}switch(t.tag){case 5:Js||Zs(t,n);case 6:var r=ul,a=dl;ul=null,hl(e,n,t),dl=a,null!==(ul=r)&&(dl?(e=ul,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):ul.removeChild(t.stateNode));break;case 18:null!==ul&&(dl?(e=ul,t=t.stateNode,8===e.nodeType?la(e.parentNode,t):1===e.nodeType&&la(e,t),qn(e)):la(ul,t.stateNode));break;case 4:r=ul,a=dl,ul=t.stateNode.containerInfo,dl=!0,hl(e,n,t),ul=r,dl=a;break;case 0:case 11:case 14:case 15:if(!Js&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(2&o||4&o)&&el(t,n,i),a=a.next}while(a!==r)}hl(e,n,t);break;case 1:if(!Js&&(Zs(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){xc(t,n,e)}hl(e,n,t);break;case 21:hl(e,n,t);break;case 22:1&t.mode?(Js=(r=Js)||null!==t.memoizedState,hl(e,n,t),Js=r):hl(e,n,t);break;default:hl(e,n,t)}}function pl(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Qs),n.forEach(function(n){var r=Sc.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))})}}function gl(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var a=t[r];try{var i=e,s=n,l=s;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,dl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===ul)throw Error(o(160));fl(i,s,a),ul=null,dl=!1;var c=a.alternate;null!==c&&(c.return=null),a.return=null}catch(e){xc(a,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)vl(n,e),n=n.sibling}function vl(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(n,e),ml(e),4&r){try{tl(3,e,e.return),rl(3,e)}catch(n){xc(e,e.return,n)}try{tl(5,e,e.return)}catch(n){xc(e,e.return,n)}}break;case 1:gl(n,e),ml(e),512&r&&null!==t&&Zs(t,t.return);break;case 5:if(gl(n,e),ml(e),512&r&&null!==t&&Zs(t,t.return),32&e.flags){var a=e.stateNode;try{he(a,"")}catch(n){xc(e,e.return,n)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,s=null!==t?t.memoizedProps:i,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===i.type&&null!=i.name&&Q(a,i),ye(l,s);var u=ye(l,i);for(s=0;s<c.length;s+=2){var d=c[s],h=c[s+1];"style"===d?ve(a,h):"dangerouslySetInnerHTML"===d?de(a,h):"children"===d?he(a,h):y(a,d,h,u)}switch(l){case"input":X(a,i);break;case"textarea":oe(a,i);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var p=i.value;null!=p?te(a,!!i.multiple,p,!1):f!==!!i.multiple&&(null!=i.defaultValue?te(a,!!i.multiple,i.defaultValue,!0):te(a,!!i.multiple,i.multiple?[]:"",!1))}a[fa]=i}catch(n){xc(e,e.return,n)}}break;case 6:if(gl(n,e),ml(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(n){xc(e,e.return,n)}}break;case 3:if(gl(n,e),ml(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{qn(n.containerInfo)}catch(n){xc(e,e.return,n)}break;case 4:default:gl(n,e),ml(e);break;case 13:gl(n,e),ml(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Fl=Qe())),4&r&&pl(e);break;case 22:if(d=null!==t&&null!==t.memoizedState,1&e.mode?(Js=(u=Js)||d,gl(n,e),Js=u):gl(n,e),ml(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&1&e.mode)for(Xs=e,d=e.child;null!==d;){for(h=Xs=d;null!==Xs;){switch(p=(f=Xs).child,f.tag){case 0:case 11:case 14:case 15:tl(4,f,f.return);break;case 1:Zs(f,f.return);var g=f.stateNode;if("function"==typeof g.componentWillUnmount){r=f,t=f.return;try{n=r,g.props=n.memoizedProps,g.state=n.memoizedState,g.componentWillUnmount()}catch(e){xc(r,t,e)}}break;case 5:Zs(f,f.return);break;case 22:if(null!==f.memoizedState){wl(h);continue}}null!==p?(p.return=f,Xs=p):wl(h)}d=d.sibling}e:for(d=null,h=e;;){if(5===h.tag){if(null===d){d=h;try{a=h.stateNode,u?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=h.stateNode,s=null!=(c=h.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=ge("display",s))}catch(n){xc(e,e.return,n)}}}else if(6===h.tag){if(null===d)try{h.stateNode.nodeValue=u?"":h.memoizedProps}catch(n){xc(e,e.return,n)}}else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===e)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===e)break e;for(;null===h.sibling;){if(null===h.return||h.return===e)break e;d===h&&(d=null),h=h.return}d===h&&(d=null),h.sibling.return=h.return,h=h.sibling}}break;case 19:gl(n,e),ml(e),4&r&&pl(e);case 21:}}function ml(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(il(t)){var r=t;break e}t=t.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(he(a,""),r.flags&=-33),cl(e,sl(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ll(e,sl(e),i);break;default:throw Error(o(161))}}catch(n){xc(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function Al(e,n,t){Xs=e,yl(e,n,t)}function yl(e,n,t){for(var r=!!(1&e.mode);null!==Xs;){var a=Xs,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Ks;if(!i){var s=a.alternate,l=null!==s&&null!==s.memoizedState||Js;s=Ks;var c=Js;if(Ks=i,(Js=l)&&!c)for(Xs=a;null!==Xs;)l=(i=Xs).child,22===i.tag&&null!==i.memoizedState?Cl(a):null!==l?(l.return=i,Xs=l):Cl(a);for(;null!==o;)Xs=o,yl(o,n,t),o=o.sibling;Xs=a,Ks=s,Js=c}bl(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Xs=o):bl(e)}}function bl(e){for(;null!==Xs;){var n=Xs;if(8772&n.flags){var t=n.alternate;try{if(8772&n.flags)switch(n.tag){case 0:case 11:case 15:Js||rl(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Js)if(null===t)r.componentDidMount();else{var a=n.elementType===n.type?t.memoizedProps:ts(n.type,t.memoizedProps);r.componentDidUpdate(a,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=n.updateQueue;null!==i&&Wo(n,i,r);break;case 3:var s=n.updateQueue;if(null!==s){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Wo(n,s,t)}break;case 5:var l=n.stateNode;if(null===t&&4&n.flags){t=l;var c=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&t.focus();break;case"img":c.src&&(t.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var u=n.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var h=d.dehydrated;null!==h&&qn(h)}}}break;default:throw Error(o(163))}Js||512&n.flags&&al(n)}catch(e){xc(n,n.return,e)}}if(n===e){Xs=null;break}if(null!==(t=n.sibling)){t.return=n.return,Xs=t;break}Xs=n.return}}function wl(e){for(;null!==Xs;){var n=Xs;if(n===e){Xs=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Xs=t;break}Xs=n.return}}function Cl(e){for(;null!==Xs;){var n=Xs;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{rl(4,n)}catch(e){xc(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var a=n.return;try{r.componentDidMount()}catch(e){xc(n,a,e)}}var o=n.return;try{al(n)}catch(e){xc(n,o,e)}break;case 5:var i=n.return;try{al(n)}catch(e){xc(n,i,e)}}}catch(e){xc(n,n.return,e)}if(n===e){Xs=null;break}var s=n.sibling;if(null!==s){s.return=n.return,Xs=s;break}Xs=n.return}}var kl,xl=Math.ceil,El=b.ReactCurrentDispatcher,Bl=b.ReactCurrentOwner,jl=b.ReactCurrentBatchConfig,Sl=0,_l=null,Nl=null,Tl=0,Ol=0,Pl=xa(0),zl=0,Il=null,Ll=0,Rl=0,Dl=0,Ml=null,Ul=null,Fl=0,$l=1/0,ql=null,Wl=!1,Hl=null,Vl=null,Yl=!1,Gl=null,Kl=0,Jl=0,Ql=null,Xl=-1,Zl=0;function ec(){return 6&Sl?Qe():-1!==Xl?Xl:Xl=Qe()}function nc(e){return 1&e.mode?2&Sl&&0!==Tl?Tl&-Tl:null!==vo.transition?(0===Zl&&(Zl=vn()),Zl):0!==(e=bn)?e:e=void 0===(e=window.event)?16:Qn(e.type):1}function tc(e,n,t,r){if(50<Jl)throw Jl=0,Ql=null,Error(o(185));An(e,t,r),2&Sl&&e===_l||(e===_l&&(!(2&Sl)&&(Rl|=t),4===zl&&sc(e,Tl)),rc(e,r),1===t&&0===Sl&&!(1&n.mode)&&($l=Qe()+500,Ma&&$a()))}function rc(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-sn(o),s=1<<i,l=a[i];-1===l?0!==(s&t)&&0===(s&r)||(a[i]=pn(s,n)):l<=n&&(e.expiredLanes|=s),o&=~s}}(e,n);var r=fn(e,e===_l?Tl:0);if(0===r)null!==t&&Ge(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Ge(t),1===n)0===e.tag?function(e){Ma=!0,Fa(e)}(lc.bind(null,e)):Fa(lc.bind(null,e)),ia(function(){!(6&Sl)&&$a()}),t=null;else{switch(wn(r)){case 1:t=Ze;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=_c(t,ac.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function ac(e,n){if(Xl=-1,Zl=0,6&Sl)throw Error(o(327));var t=e.callbackNode;if(Cc()&&e.callbackNode!==t)return null;var r=fn(e,e===_l?Tl:0);if(0===r)return null;if(30&r||0!==(r&e.expiredLanes)||n)n=vc(e,r);else{n=r;var a=Sl;Sl|=2;var i=pc();for(_l===e&&Tl===n||(ql=null,$l=Qe()+500,hc(e,n));;)try{Ac();break}catch(n){fc(e,n)}jo(),El.current=i,Sl=a,null!==Nl?n=0:(_l=null,Tl=0,n=zl)}if(0!==n){if(2===n&&0!==(a=gn(e))&&(r=a,n=oc(e,a)),1===n)throw t=Il,hc(e,0),sc(e,r),rc(e,Qe()),t;if(6===n)sc(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var a=t[r],o=a.getSnapshot;a=a.value;try{if(!sr(o(),a))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(a)||(n=vc(e,r),2===n&&(i=gn(e),0!==i&&(r=i,n=oc(e,i))),1!==n)))throw t=Il,hc(e,0),sc(e,r),rc(e,Qe()),t;switch(e.finishedWork=a,e.finishedLanes=r,n){case 0:case 1:throw Error(o(345));case 2:case 5:wc(e,Ul,ql);break;case 3:if(sc(e,r),(130023424&r)===r&&10<(n=Fl+500-Qe())){if(0!==fn(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(wc.bind(null,e,Ul,ql),n);break}wc(e,Ul,ql);break;case 4:if(sc(e,r),(4194240&r)===r)break;for(n=e.eventTimes,a=-1;0<r;){var s=31-sn(r);i=1<<s,(s=n[s])>a&&(a=s),r&=~i}if(r=a,10<(r=(120>(r=Qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xl(r/1960))-r)){e.timeoutHandle=ra(wc.bind(null,e,Ul,ql),r);break}wc(e,Ul,ql);break;default:throw Error(o(329))}}}return rc(e,Qe()),e.callbackNode===t?ac.bind(null,e):null}function oc(e,n){var t=Ml;return e.current.memoizedState.isDehydrated&&(hc(e,n).flags|=256),2!==(e=vc(e,n))&&(n=Ul,Ul=t,null!==n&&ic(n)),e}function ic(e){null===Ul?Ul=e:Ul.push.apply(Ul,e)}function sc(e,n){for(n&=~Dl,n&=~Rl,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-sn(n),r=1<<t;e[t]=-1,n&=~r}}function lc(e){if(6&Sl)throw Error(o(327));Cc();var n=fn(e,0);if(!(1&n))return rc(e,Qe()),null;var t=vc(e,n);if(0!==e.tag&&2===t){var r=gn(e);0!==r&&(n=r,t=oc(e,r))}if(1===t)throw t=Il,hc(e,0),sc(e,n),rc(e,Qe()),t;if(6===t)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,wc(e,Ul,ql),rc(e,Qe()),null}function cc(e,n){var t=Sl;Sl|=1;try{return e(n)}finally{0===(Sl=t)&&($l=Qe()+500,Ma&&$a())}}function uc(e){null!==Gl&&0===Gl.tag&&!(6&Sl)&&Cc();var n=Sl;Sl|=1;var t=jl.transition,r=bn;try{if(jl.transition=null,bn=1,e)return e()}finally{bn=r,jl.transition=t,!(6&(Sl=n))&&$a()}}function dc(){Ol=Pl.current,Ea(Pl)}function hc(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,aa(t)),null!==Nl)for(t=Nl.return;null!==t;){var r=t;switch(no(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Pa();break;case 3:Qo(),Ea(_a),Ea(Sa),ri();break;case 5:Zo(r);break;case 4:Qo();break;case 13:case 19:Ea(ei);break;case 10:So(r.type._context);break;case 22:case 23:dc()}t=t.return}if(_l=e,Nl=e=Pc(e.current,null),Tl=Ol=n,zl=0,Il=null,Dl=Rl=Ll=0,Ul=Ml=null,null!==Oo){for(n=0;n<Oo.length;n++)if(null!==(r=(t=Oo[n]).interleaved)){t.interleaved=null;var a=r.next,o=t.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}t.pending=r}Oo=null}return e}function fc(e,n){for(;;){var t=Nl;try{if(jo(),ai.current=Xi,ui){for(var r=si.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ui=!1}if(ii=0,ci=li=si=null,di=!1,hi=0,Bl.current=null,null===t||null===t.return){zl=1,Il=n,Nl=null;break}e:{var i=e,s=t.return,l=t,c=n;if(n=Tl,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,h=d.tag;if(!(1&d.mode||0!==h&&11!==h&&15!==h)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=vs(s);if(null!==p){p.flags&=-257,ms(p,s,l,0,n),1&p.mode&&gs(i,u,n),c=u;var g=(n=p).updateQueue;if(null===g){var v=new Set;v.add(c),n.updateQueue=v}else g.add(c);break e}if(!(1&n)){gs(i,u,n),gc();break e}c=Error(o(426))}else if(ao&&1&l.mode){var m=vs(s);if(null!==m){!(65536&m.flags)&&(m.flags|=256),ms(m,s,l,0,n),go(cs(c,l));break e}}i=c=cs(c,l),4!==zl&&(zl=2),null===Ml?Ml=[i]:Ml.push(i),i=s;do{switch(i.tag){case 3:i.flags|=65536,n&=-n,i.lanes|=n,$o(i,fs(0,c,n));break e;case 1:l=c;var A=i.type,y=i.stateNode;if(!(128&i.flags||"function"!=typeof A.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Vl&&Vl.has(y)))){i.flags|=65536,n&=-n,i.lanes|=n,$o(i,ps(i,l,n));break e}}i=i.return}while(null!==i)}bc(t)}catch(e){n=e,Nl===t&&null!==t&&(Nl=t=t.return);continue}break}}function pc(){var e=El.current;return El.current=Xi,null===e?Xi:e}function gc(){0!==zl&&3!==zl&&2!==zl||(zl=4),null===_l||!(268435455&Ll)&&!(268435455&Rl)||sc(_l,Tl)}function vc(e,n){var t=Sl;Sl|=2;var r=pc();for(_l===e&&Tl===n||(ql=null,hc(e,n));;)try{mc();break}catch(n){fc(e,n)}if(jo(),Sl=t,El.current=r,null!==Nl)throw Error(o(261));return _l=null,Tl=0,zl}function mc(){for(;null!==Nl;)yc(Nl)}function Ac(){for(;null!==Nl&&!Ke();)yc(Nl)}function yc(e){var n=kl(e.alternate,e,Ol);e.memoizedProps=e.pendingProps,null===n?bc(e):Nl=n,Bl.current=null}function bc(e){var n=e;do{var t=n.alternate;if(e=n.return,32768&n.flags){if(null!==(t=Gs(t,n)))return t.flags&=32767,void(Nl=t);if(null===e)return zl=6,void(Nl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(t=Ys(t,n,Ol)))return void(Nl=t);if(null!==(n=n.sibling))return void(Nl=n);Nl=n=e}while(null!==n);0===zl&&(zl=5)}function wc(e,n,t){var r=bn,a=jl.transition;try{jl.transition=null,bn=1,function(e,n,t,r){do{Cc()}while(null!==Gl);if(6&Sl)throw Error(o(327));t=e.finishedWork;var a=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var a=31-sn(t),o=1<<a;n[a]=0,r[a]=-1,e[a]=-1,t&=~o}}(e,i),e===_l&&(Nl=_l=null,Tl=0),!(2064&t.subtreeFlags)&&!(2064&t.flags)||Yl||(Yl=!0,_c(nn,function(){return Cc(),null})),i=!!(15990&t.flags),15990&t.subtreeFlags||i){i=jl.transition,jl.transition=null;var s=bn;bn=1;var l=Sl;Sl|=4,Bl.current=null,function(e,n){if(ea=Hn,fr(e=hr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{t.nodeType,i.nodeType}catch(e){t=null;break e}var s=0,l=-1,c=-1,u=0,d=0,h=e,f=null;n:for(;;){for(var p;h!==t||0!==a&&3!==h.nodeType||(l=s+a),h!==i||0!==r&&3!==h.nodeType||(c=s+r),3===h.nodeType&&(s+=h.nodeValue.length),null!==(p=h.firstChild);)f=h,h=p;for(;;){if(h===e)break n;if(f===t&&++u===a&&(l=s),f===i&&++d===r&&(c=s),null!==(p=h.nextSibling))break;f=(h=f).parentNode}h=p}t=-1===l||-1===c?null:{start:l,end:c}}else t=null}t=t||{start:0,end:0}}else t=null;for(na={focusedElem:e,selectionRange:t},Hn=!1,Xs=n;null!==Xs;)if(e=(n=Xs).child,1028&n.subtreeFlags&&null!==e)e.return=n,Xs=e;else for(;null!==Xs;){n=Xs;try{var g=n.alternate;if(1024&n.flags)switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var v=g.memoizedProps,m=g.memoizedState,A=n.stateNode,y=A.getSnapshotBeforeUpdate(n.elementType===n.type?v:ts(n.type,v),m);A.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var b=n.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(o(163))}}catch(e){xc(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Xs=e;break}Xs=n.return}g=nl,nl=!1}(e,t),vl(t,e),pr(na),Hn=!!ea,na=ea=null,e.current=t,Al(t,e,a),Je(),Sl=l,bn=s,jl.transition=i}else e.current=t;if(Yl&&(Yl=!1,Gl=e,Kl=a),0===(i=e.pendingLanes)&&(Vl=null),function(e){if(on&&"function"==typeof on.onCommitFiberRoot)try{on.onCommitFiberRoot(an,e,void 0,!(128&~e.current.flags))}catch(e){}}(t.stateNode),rc(e,Qe()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((a=n[t]).value,{componentStack:a.stack,digest:a.digest});if(Wl)throw Wl=!1,e=Hl,Hl=null,e;!!(1&Kl)&&0!==e.tag&&Cc(),1&(i=e.pendingLanes)?e===Ql?Jl++:(Jl=0,Ql=e):Jl=0,$a()}(e,n,t,r)}finally{jl.transition=a,bn=r}return null}function Cc(){if(null!==Gl){var e=wn(Kl),n=jl.transition,t=bn;try{if(jl.transition=null,bn=16>e?16:e,null===Gl)var r=!1;else{if(e=Gl,Gl=null,Kl=0,6&Sl)throw Error(o(331));var a=Sl;for(Sl|=4,Xs=e.current;null!==Xs;){var i=Xs,s=i.child;if(16&Xs.flags){var l=i.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Xs=u;null!==Xs;){var d=Xs;switch(d.tag){case 0:case 11:case 15:tl(8,d,i)}var h=d.child;if(null!==h)h.return=d,Xs=h;else for(;null!==Xs;){var f=(d=Xs).sibling,p=d.return;if(ol(d),d===u){Xs=null;break}if(null!==f){f.return=p,Xs=f;break}Xs=p}}}var g=i.alternate;if(null!==g){var v=g.child;if(null!==v){g.child=null;do{var m=v.sibling;v.sibling=null,v=m}while(null!==v)}}Xs=i}}if(2064&i.subtreeFlags&&null!==s)s.return=i,Xs=s;else e:for(;null!==Xs;){if(2048&(i=Xs).flags)switch(i.tag){case 0:case 11:case 15:tl(9,i,i.return)}var A=i.sibling;if(null!==A){A.return=i.return,Xs=A;break e}Xs=i.return}}var y=e.current;for(Xs=y;null!==Xs;){var b=(s=Xs).child;if(2064&s.subtreeFlags&&null!==b)b.return=s,Xs=b;else e:for(s=y;null!==Xs;){if(2048&(l=Xs).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){xc(l,l.return,e)}if(l===s){Xs=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Xs=w;break e}Xs=l.return}}if(Sl=a,$a(),on&&"function"==typeof on.onPostCommitFiberRoot)try{on.onPostCommitFiberRoot(an,e)}catch(e){}r=!0}return r}finally{bn=t,jl.transition=n}}return!1}function kc(e,n,t){e=Uo(e,n=fs(0,n=cs(t,n),1),1),n=ec(),null!==e&&(An(e,1,n),rc(e,n))}function xc(e,n,t){if(3===e.tag)kc(e,e,t);else for(;null!==n;){if(3===n.tag){kc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vl||!Vl.has(r))){n=Uo(n,e=ps(n,e=cs(t,e),1),1),e=ec(),null!==n&&(An(n,1,e),rc(n,e));break}}n=n.return}}function Ec(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=ec(),e.pingedLanes|=e.suspendedLanes&t,_l===e&&(Tl&t)===t&&(4===zl||3===zl&&(130023424&Tl)===Tl&&500>Qe()-Fl?hc(e,0):Dl|=t),rc(e,n)}function Bc(e,n){0===n&&(1&e.mode?(n=dn,!(130023424&(dn<<=1))&&(dn=4194304)):n=1);var t=ec();null!==(e=Io(e,n))&&(An(e,n,t),rc(e,t))}function jc(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Bc(e,t)}function Sc(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(t=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(n),Bc(e,t)}function _c(e,n){return Ye(e,n)}function Nc(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tc(e,n,t,r){return new Nc(e,n,t,r)}function Oc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Pc(e,n){var t=e.alternate;return null===t?((t=Tc(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function zc(e,n,t,r,a,i){var s=2;if(r=e,"function"==typeof e)Oc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case k:return Ic(t.children,a,i,n);case x:s=8,a|=8;break;case E:return(e=Tc(12,t,n,2|a)).elementType=E,e.lanes=i,e;case _:return(e=Tc(13,t,n,a)).elementType=_,e.lanes=i,e;case N:return(e=Tc(19,t,n,a)).elementType=N,e.lanes=i,e;case P:return Lc(t,a,i,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:s=10;break e;case j:s=9;break e;case S:s=11;break e;case T:s=14;break e;case O:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(n=Tc(s,t,n,a)).elementType=e,n.type=r,n.lanes=i,n}function Ic(e,n,t,r){return(e=Tc(7,e,r,n)).lanes=t,e}function Lc(e,n,t,r){return(e=Tc(22,e,r,n)).elementType=P,e.lanes=t,e.stateNode={isHidden:!1},e}function Rc(e,n,t){return(e=Tc(6,e,null,n)).lanes=t,e}function Dc(e,n,t){return(n=Tc(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Mc(e,n,t,r,a){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mn(0),this.expirationTimes=mn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mn(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Uc(e,n,t,r,a,o,i,s,l){return e=new Mc(e,n,t,s,l),1===n?(n=1,!0===o&&(n|=8)):n=0,o=Tc(3,null,null,n),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ro(o),e}function Fc(e){if(!e)return ja;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(Oa(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(o(171))}if(1===e.tag){var t=e.type;if(Oa(t))return Ia(e,t,n)}return n}function $c(e,n,t,r,a,o,i,s,l){return(e=Uc(t,r,!0,e,0,o,0,s,l)).context=Fc(null),t=e.current,(o=Mo(r=ec(),a=nc(t))).callback=null!=n?n:null,Uo(t,o,a),e.current.lanes=a,An(e,a,r),rc(e,r),e}function qc(e,n,t,r){var a=n.current,o=ec(),i=nc(a);return t=Fc(t),null===n.context?n.context=t:n.pendingContext=t,(n=Mo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Uo(a,n,i))&&(tc(e,a,i,o),Fo(e,a,i)),i}function Wc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hc(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Vc(e,n){Hc(e,n),(e=e.alternate)&&Hc(e,n)}kl=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||_a.current)ys=!0;else{if(0===(e.lanes&t)&&!(128&n.flags))return ys=!1,function(e,n,t){switch(n.tag){case 3:_s(n),po();break;case 5:Xo(n);break;case 1:Oa(n.type)&&La(n);break;case 4:Jo(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,a=n.memoizedProps.value;Ba(ko,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(Ba(ei,1&ei.current),n.flags|=128,null):0!==(t&n.child.childLanes)?Rs(e,n,t):(Ba(ei,1&ei.current),null!==(e=Ws(e,n,t))?e.sibling:null);Ba(ei,1&ei.current);break;case 19:if(r=0!==(t&n.childLanes),128&e.flags){if(r)return $s(e,n,t);n.flags|=128}if(null!==(a=n.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ba(ei,ei.current),r)break;return null;case 22:case 23:return n.lanes=0,xs(e,n,t)}return Ws(e,n,t)}(e,n,t);ys=!!(131072&e.flags)}else ys=!1,ao&&1048576&n.flags&&Za(n,Va,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;qs(e,n),e=n.pendingProps;var a=Ta(n,Sa.current);No(n,t),a=vi(null,n,r,e,a,t);var i=mi();return n.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,Oa(r)?(i=!0,La(n)):i=!1,n.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Ro(n),a.updater=as,n.stateNode=a,a._reactInternals=n,ls(n,r,e,t),n=Ss(null,n,r,!0,i,t)):(n.tag=0,ao&&i&&eo(n),bs(null,n,a,t),n=n.child),n;case 16:r=n.elementType;e:{switch(qs(e,n),e=n.pendingProps,r=(a=r._init)(r._payload),n.type=r,a=n.tag=function(e){if("function"==typeof e)return Oc(e)?1:0;if(null!=e){if((e=e.$$typeof)===S)return 11;if(e===T)return 14}return 2}(r),e=ts(r,e),a){case 0:n=Bs(null,n,r,e,t);break e;case 1:n=js(null,n,r,e,t);break e;case 11:n=ws(null,n,r,e,t);break e;case 14:n=Cs(null,n,r,ts(r.type,e),t);break e}throw Error(o(306,r,""))}return n;case 0:return r=n.type,a=n.pendingProps,Bs(e,n,r,a=n.elementType===r?a:ts(r,a),t);case 1:return r=n.type,a=n.pendingProps,js(e,n,r,a=n.elementType===r?a:ts(r,a),t);case 3:e:{if(_s(n),null===e)throw Error(o(387));r=n.pendingProps,a=(i=n.memoizedState).element,Do(e,n),qo(n,r,null,t);var s=n.memoizedState;if(r=s.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},n.updateQueue.baseState=i,n.memoizedState=i,256&n.flags){n=Ns(e,n,r,t,a=cs(Error(o(423)),n));break e}if(r!==a){n=Ns(e,n,r,t,a=cs(Error(o(424)),n));break e}for(ro=ca(n.stateNode.containerInfo.firstChild),to=n,ao=!0,oo=null,t=Co(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(po(),r===a){n=Ws(e,n,t);break e}bs(e,n,r,t)}n=n.child}return n;case 5:return Xo(n),null===e&&co(n),r=n.type,a=n.pendingProps,i=null!==e?e.memoizedProps:null,s=a.children,ta(r,a)?s=null:null!==i&&ta(r,i)&&(n.flags|=32),Es(e,n),bs(e,n,s,t),n.child;case 6:return null===e&&co(n),null;case 13:return Rs(e,n,t);case 4:return Jo(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=wo(n,null,r,t):bs(e,n,r,t),n.child;case 11:return r=n.type,a=n.pendingProps,ws(e,n,r,a=n.elementType===r?a:ts(r,a),t);case 7:return bs(e,n,n.pendingProps,t),n.child;case 8:case 12:return bs(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,a=n.pendingProps,i=n.memoizedProps,s=a.value,Ba(ko,r._currentValue),r._currentValue=s,null!==i)if(sr(i.value,s)){if(i.children===a.children&&!_a.current){n=Ws(e,n,t);break e}}else for(null!==(i=n.child)&&(i.return=n);null!==i;){var l=i.dependencies;if(null!==l){s=i.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Mo(-1,t&-t)).tag=2;var u=i.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}i.lanes|=t,null!==(c=i.alternate)&&(c.lanes|=t),_o(i.return,t,n),l.lanes|=t;break}c=c.next}}else if(10===i.tag)s=i.type===n.type?null:i.child;else if(18===i.tag){if(null===(s=i.return))throw Error(o(341));s.lanes|=t,null!==(l=s.alternate)&&(l.lanes|=t),_o(s,t,n),s=i.sibling}else s=i.child;if(null!==s)s.return=i;else for(s=i;null!==s;){if(s===n){s=null;break}if(null!==(i=s.sibling)){i.return=s.return,s=i;break}s=s.return}i=s}bs(e,n,a.children,t),n=n.child}return n;case 9:return a=n.type,r=n.pendingProps.children,No(n,t),r=r(a=To(a)),n.flags|=1,bs(e,n,r,t),n.child;case 14:return a=ts(r=n.type,n.pendingProps),Cs(e,n,r,a=ts(r.type,a),t);case 15:return ks(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,a=n.pendingProps,a=n.elementType===r?a:ts(r,a),qs(e,n),n.tag=1,Oa(r)?(e=!0,La(n)):e=!1,No(n,t),is(n,r,a),ls(n,r,a,t),Ss(null,n,r,!0,e,t);case 19:return $s(e,n,t);case 22:return xs(e,n,t)}throw Error(o(156,n.tag))};var Yc="function"==typeof reportError?reportError:function(e){console.error(e)};function Gc(e){this._internalRoot=e}function Kc(e){this._internalRoot=e}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Qc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xc(){}function Zc(e,n,t,r,a){var o=t._reactRootContainer;if(o){var i=o;if("function"==typeof a){var s=a;a=function(){var e=Wc(i);s.call(e)}}qc(n,i,e,a)}else i=function(e,n,t,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Wc(i);o.call(e)}}var i=$c(n,r,e,0,null,!1,0,"",Xc);return e._reactRootContainer=i,e[pa]=i.current,$r(8===e.nodeType?e.parentNode:e),uc(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var s=r;r=function(){var e=Wc(l);s.call(e)}}var l=Uc(e,0,!1,null,0,!1,0,"",Xc);return e._reactRootContainer=l,e[pa]=l.current,$r(8===e.nodeType?e.parentNode:e),uc(function(){qc(n,l,t,r)}),l}(t,n,e,a,r);return Wc(i)}Kc.prototype.render=Gc.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(o(409));qc(e,n,null,null)},Kc.prototype.unmount=Gc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;uc(function(){qc(null,e,null,null)}),n[pa]=null}},Kc.prototype.unstable_scheduleHydration=function(e){if(e){var n=En();e={blockedOn:null,target:e,priority:n};for(var t=0;t<zn.length&&0!==n&&n<zn[t].priority;t++);zn.splice(t,0,e),0===t&&Dn(e)}},Cn=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=hn(n.pendingLanes);0!==t&&(yn(n,1|t),rc(n,Qe()),!(6&Sl)&&($l=Qe()+500,$a()))}break;case 13:uc(function(){var n=Io(e,1);if(null!==n){var t=ec();tc(n,e,1,t)}}),Vc(e,1)}},kn=function(e){if(13===e.tag){var n=Io(e,134217728);null!==n&&tc(n,e,134217728,ec()),Vc(e,134217728)}},xn=function(e){if(13===e.tag){var n=nc(e),t=Io(e,n);null!==t&&tc(t,e,n,ec()),Vc(e,n)}},En=function(){return bn},Bn=function(e,n){var t=bn;try{return bn=e,n()}finally{bn=t}},Ce=function(e,n,t){switch(n){case"input":if(X(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var a=wa(r);if(!a)throw Error(o(90));Y(r),X(r,a)}}}break;case"textarea":oe(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Se=cc,_e=uc;var eu={usingClientEntryPoint:!1,Events:[ya,ba,wa,Be,je,cc]},nu={findFiberByHostInstance:Aa,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},tu={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{an=ru.inject(tu),on=ru}catch(ue){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jc(n))throw Error(o(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Jc(e))throw Error(o(299));var t=!1,r="",a=Yc;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(a=n.onRecoverableError)),n=Uc(e,1,!1,null,0,t,0,r,a),e[pa]=n.current,$r(8===e.nodeType?e.parentNode:e),new Gc(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=He(n))?null:e.stateNode},n.flushSync=function(e){return uc(e)},n.hydrate=function(e,n,t){if(!Qc(n))throw Error(o(200));return Zc(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Jc(e))throw Error(o(405));var r=null!=t&&t.hydratedSources||null,a=!1,i="",s=Yc;if(null!=t&&(!0===t.unstable_strictMode&&(a=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onRecoverableError&&(s=t.onRecoverableError)),n=$c(n,null,e,1,null!=t?t:null,a,0,i,s),e[pa]=n.current,$r(e),r)for(e=0;e<r.length;e++)a=(a=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a);return new Kc(n)},n.render=function(e,n,t){if(!Qc(n))throw Error(o(200));return Zc(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Qc(e))throw Error(o(40));return!!e._reactRootContainer&&(uc(function(){Zc(null,null,e,!1,function(){e._reactRootContainer=null,e[pa]=null})}),!0)},n.unstable_batchedUpdates=cc,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Qc(t))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Zc(e,n,t,!1,r)},n.version="18.3.1-next-f1338f8080-20240426"},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},660:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const a=r(t(907)),o=r(t(818));n.default=class{constructor(e){this.shouldThrowOnError=!1,this.method=e.method,this.url=e.url,this.headers=e.headers,this.schema=e.schema,this.body=e.body,this.shouldThrowOnError=e.shouldThrowOnError,this.signal=e.signal,this.isMaybeSingle=e.isMaybeSingle,e.fetch?this.fetch=e.fetch:"undefined"==typeof fetch?this.fetch=a.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(e,n){return this.headers=Object.assign({},this.headers),this.headers[e]=n,this}then(e,n){void 0===this.schema||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),"GET"!==this.method&&"HEAD"!==this.method&&(this.headers["Content-Type"]="application/json");let t=(0,this.fetch)(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async e=>{var n,t,r;let a=null,i=null,s=null,l=e.status,c=e.statusText;if(e.ok){if("HEAD"!==this.method){const n=await e.text();""===n||(i="text/csv"===this.headers.Accept||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?n:JSON.parse(n))}const r=null===(n=this.headers.Prefer)||void 0===n?void 0:n.match(/count=(exact|planned|estimated)/),o=null===(t=e.headers.get("content-range"))||void 0===t?void 0:t.split("/");r&&o&&o.length>1&&(s=parseInt(o[1])),this.isMaybeSingle&&"GET"===this.method&&Array.isArray(i)&&(i.length>1?(a={code:"PGRST116",details:`Results contain ${i.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},i=null,s=null,l=406,c="Not Acceptable"):i=1===i.length?i[0]:null)}else{const n=await e.text();try{a=JSON.parse(n),Array.isArray(a)&&404===e.status&&(i=[],a=null,l=200,c="OK")}catch(t){404===e.status&&""===n?(l=204,c="No Content"):a={message:n}}if(a&&this.isMaybeSingle&&(null===(r=null==a?void 0:a.details)||void 0===r?void 0:r.includes("0 rows"))&&(a=null,l=200,c="OK"),a&&this.shouldThrowOnError)throw new o.default(a)}return{error:a,data:i,count:s,status:l,statusText:c}});return this.shouldThrowOnError||(t=t.catch(e=>{var n,t,r;return{error:{message:`${null!==(n=null==e?void 0:e.name)&&void 0!==n?n:"FetchError"}: ${null==e?void 0:e.message}`,details:`${null!==(t=null==e?void 0:e.stack)&&void 0!==t?t:""}`,hint:"",code:`${null!==(r=null==e?void 0:e.code)&&void 0!==r?r:""}`},data:null,count:null,status:0,statusText:""}})),t.then(e,n)}returns(){return this}overrideTypes(){return this}}},818:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0});class t extends Error{constructor(e){super(e.message),this.name="PostgrestError",this.details=e.details,this.hint=e.hint,this.code=e.code}}n.default=t},825:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const a=r(t(261));class o extends a.default{eq(e,n){return this.url.searchParams.append(e,`eq.${n}`),this}neq(e,n){return this.url.searchParams.append(e,`neq.${n}`),this}gt(e,n){return this.url.searchParams.append(e,`gt.${n}`),this}gte(e,n){return this.url.searchParams.append(e,`gte.${n}`),this}lt(e,n){return this.url.searchParams.append(e,`lt.${n}`),this}lte(e,n){return this.url.searchParams.append(e,`lte.${n}`),this}like(e,n){return this.url.searchParams.append(e,`like.${n}`),this}likeAllOf(e,n){return this.url.searchParams.append(e,`like(all).{${n.join(",")}}`),this}likeAnyOf(e,n){return this.url.searchParams.append(e,`like(any).{${n.join(",")}}`),this}ilike(e,n){return this.url.searchParams.append(e,`ilike.${n}`),this}ilikeAllOf(e,n){return this.url.searchParams.append(e,`ilike(all).{${n.join(",")}}`),this}ilikeAnyOf(e,n){return this.url.searchParams.append(e,`ilike(any).{${n.join(",")}}`),this}is(e,n){return this.url.searchParams.append(e,`is.${n}`),this}in(e,n){const t=Array.from(new Set(n)).map(e=>"string"==typeof e&&new RegExp("[,()]").test(e)?`"${e}"`:`${e}`).join(",");return this.url.searchParams.append(e,`in.(${t})`),this}contains(e,n){return"string"==typeof n?this.url.searchParams.append(e,`cs.${n}`):Array.isArray(n)?this.url.searchParams.append(e,`cs.{${n.join(",")}}`):this.url.searchParams.append(e,`cs.${JSON.stringify(n)}`),this}containedBy(e,n){return"string"==typeof n?this.url.searchParams.append(e,`cd.${n}`):Array.isArray(n)?this.url.searchParams.append(e,`cd.{${n.join(",")}}`):this.url.searchParams.append(e,`cd.${JSON.stringify(n)}`),this}rangeGt(e,n){return this.url.searchParams.append(e,`sr.${n}`),this}rangeGte(e,n){return this.url.searchParams.append(e,`nxl.${n}`),this}rangeLt(e,n){return this.url.searchParams.append(e,`sl.${n}`),this}rangeLte(e,n){return this.url.searchParams.append(e,`nxr.${n}`),this}rangeAdjacent(e,n){return this.url.searchParams.append(e,`adj.${n}`),this}overlaps(e,n){return"string"==typeof n?this.url.searchParams.append(e,`ov.${n}`):this.url.searchParams.append(e,`ov.{${n.join(",")}}`),this}textSearch(e,n,{config:t,type:r}={}){let a="";"plain"===r?a="pl":"phrase"===r?a="ph":"websearch"===r&&(a="w");const o=void 0===t?"":`(${t})`;return this.url.searchParams.append(e,`${a}fts${o}.${n}`),this}match(e){return Object.entries(e).forEach(([e,n])=>{this.url.searchParams.append(e,`eq.${n}`)}),this}not(e,n,t){return this.url.searchParams.append(e,`not.${n}.${t}`),this}or(e,{foreignTable:n,referencedTable:t=n}={}){const r=t?`${t}.or`:"or";return this.url.searchParams.append(r,`(${e})`),this}filter(e,n,t){return this.url.searchParams.append(e,`${n}.${t}`),this}}n.default=o},848:(e,n,t)=>{e.exports=t(20)},907:(e,n,t)=>{t.r(n),t.d(n,{Headers:()=>i,Request:()=>s,Response:()=>l,default:()=>o,fetch:()=>a});var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t.g)return t.g;throw new Error("unable to locate global object")}();const a=r.fetch,o=r.fetch.bind(r),i=r.Headers,s=r.Request,l=r.Response},961:(e,n,t)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(551)},982:(e,n,t)=>{e.exports=t(463)}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.nc=void 0;var r=t(540),a=t(338),o={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const i=(e,n)=>{const t=(0,r.forwardRef)(({color:t="currentColor",size:a=24,strokeWidth:i=2,absoluteStrokeWidth:s,className:l="",children:c,...u},d)=>{return(0,r.createElement)("svg",{ref:d,...o,width:a,height:a,stroke:t,strokeWidth:s?24*Number(i)/Number(a):i,className:["lucide",`lucide-${h=e,h.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase().trim()}`,l].join(" "),...u},[...n.map(([e,n])=>(0,r.createElement)(e,n)),...Array.isArray(c)?c:[c]]);var h});return t.displayName=`${e}`,t},s=i("Bookmark",[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z",key:"1fy3hk"}]]),l=i("TabletSmartphone",[["rect",{width:"10",height:"14",x:"3",y:"8",rx:"2",key:"1vrsiq"}],["path",{d:"M5 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2.4",key:"1j4zmg"}],["path",{d:"M8 18h.01",key:"lrp35t"}]]),c=i("Plus",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]]),u=i("LogOut",[["path",{d:"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4",key:"1uf3rs"}],["polyline",{points:"16 17 21 12 16 7",key:"1gabdz"}],["line",{x1:"21",x2:"9",y1:"12",y2:"12",key:"1uyos4"}]]),d=i("Search",[["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}],["path",{d:"m21 21-4.3-4.3",key:"1qie3q"}]]),h=i("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]),f=i("Command",[["path",{d:"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3",key:"11bfej"}]]),p=i("Tag",[["path",{d:"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z",key:"14b2ls"}],["path",{d:"M7 7h.01",key:"7u93v4"}]]),g=i("ChevronDown",[["path",{d:"m6 9 6 6 6-6",key:"qrunsl"}]]),v=i("ChevronRight",[["path",{d:"m9 18 6-6-6-6",key:"mthhwq"}]]),m=i("Inbox",[["polyline",{points:"22 12 16 12 14 15 10 15 8 12 2 12",key:"o97t9d"}],["path",{d:"M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",key:"oot6mr"}]]),A=i("CheckSquare",[["path",{d:"m9 11 3 3L22 4",key:"1pflzl"}],["path",{d:"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11",key:"1jnkn4"}]]),y=i("Archive",[["rect",{width:"20",height:"5",x:"2",y:"3",rx:"1",key:"1wp1u1"}],["path",{d:"M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8",key:"1s80jp"}],["path",{d:"M10 12h4",key:"a56b0p"}]]),b=i("FolderPlus",[["path",{d:"M12 10v6",key:"1bos4e"}],["path",{d:"M9 13h6",key:"1uhe8q"}],["path",{d:"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",key:"1kt360"}]]),w=i("Settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]);class C extends Error{constructor(e,n="FunctionsError",t){super(e),this.name=n,this.context=t}}class k extends C{constructor(e){super("Failed to send a request to the Edge Function","FunctionsFetchError",e)}}class x extends C{constructor(e){super("Relay Error invoking the Edge Function","FunctionsRelayError",e)}}class E extends C{constructor(e){super("Edge Function returned a non-2xx status code","FunctionsHttpError",e)}}var B;!function(e){e.Any="any",e.ApNortheast1="ap-northeast-1",e.ApNortheast2="ap-northeast-2",e.ApSouth1="ap-south-1",e.ApSoutheast1="ap-southeast-1",e.ApSoutheast2="ap-southeast-2",e.CaCentral1="ca-central-1",e.EuCentral1="eu-central-1",e.EuWest1="eu-west-1",e.EuWest2="eu-west-2",e.EuWest3="eu-west-3",e.SaEast1="sa-east-1",e.UsEast1="us-east-1",e.UsWest1="us-west-1",e.UsWest2="us-west-2"}(B||(B={}));class j{constructor(e,{headers:n={},customFetch:r,region:a=B.Any}={}){this.url=e,this.headers=n,this.region=a,this.fetch=(e=>{let n;return n=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(t.bind(t,907)).then(({default:n})=>n(...e)):fetch),(...e)=>n(...e)})(r)}setAuth(e){this.headers.Authorization=`Bearer ${e}`}invoke(e,n={}){var t,r,a,o,i;return r=this,a=void 0,i=function*(){try{const{headers:r,method:a,body:o}=n;let i={},{region:s}=n;s||(s=this.region);const l=new URL(`${this.url}/${e}`);let c;s&&"any"!==s&&(i["x-region"]=s,l.searchParams.set("forceFunctionRegion",s)),o&&(r&&!Object.prototype.hasOwnProperty.call(r,"Content-Type")||!r)&&("undefined"!=typeof Blob&&o instanceof Blob||o instanceof ArrayBuffer?(i["Content-Type"]="application/octet-stream",c=o):"string"==typeof o?(i["Content-Type"]="text/plain",c=o):"undefined"!=typeof FormData&&o instanceof FormData?c=o:(i["Content-Type"]="application/json",c=JSON.stringify(o)));const u=yield this.fetch(l.toString(),{method:a||"POST",headers:Object.assign(Object.assign(Object.assign({},i),this.headers),r),body:c}).catch(e=>{throw new k(e)}),d=u.headers.get("x-relay-error");if(d&&"true"===d)throw new x(u);if(!u.ok)throw new E(u);let h,f=(null!==(t=u.headers.get("Content-Type"))&&void 0!==t?t:"text/plain").split(";")[0].trim();return h="application/json"===f?yield u.json():"application/octet-stream"===f?yield u.blob():"text/event-stream"===f?u:"multipart/form-data"===f?yield u.formData():yield u.text(),{data:h,error:null,response:u}}catch(e){return{data:null,error:e,response:e instanceof E||e instanceof x?e.context:void 0}}},new((o=void 0)||(o=Promise))(function(e,n){function t(e){try{l(i.next(e))}catch(e){n(e)}}function s(e){try{l(i.throw(e))}catch(e){n(e)}}function l(n){var r;n.done?e(n.value):(r=n.value,r instanceof o?r:new o(function(e){e(r)})).then(t,s)}l((i=i.apply(r,a||[])).next())})}}var S=t(279);const{PostgrestClient:_,PostgrestQueryBuilder:N,PostgrestFilterBuilder:T,PostgrestTransformBuilder:O,PostgrestBuilder:P,PostgrestError:z}=S,I=function(){if("undefined"!=typeof WebSocket)return WebSocket;if(void 0!==global.WebSocket)return global.WebSocket;if(void 0!==window.WebSocket)return window.WebSocket;if(void 0!==self.WebSocket)return self.WebSocket;throw new Error("`WebSocket` is not supported in this environment")}();var L,R,D,M,U,F,$;!function(e){e[e.connecting=0]="connecting",e[e.open=1]="open",e[e.closing=2]="closing",e[e.closed=3]="closed"}(L||(L={})),($=R||(R={})).closed="closed",$.errored="errored",$.joined="joined",$.joining="joining",$.leaving="leaving",function(e){e.close="phx_close",e.error="phx_error",e.join="phx_join",e.reply="phx_reply",e.leave="phx_leave",e.access_token="access_token"}(D||(D={})),function(e){e.websocket="websocket"}(M||(M={})),function(e){e.Connecting="connecting",e.Open="open",e.Closing="closing",e.Closed="closed"}(U||(U={}));class q{constructor(){this.HEADER_LENGTH=1}decode(e,n){return e.constructor===ArrayBuffer?n(this._binaryDecode(e)):n("string"==typeof e?JSON.parse(e):{})}_binaryDecode(e){const n=new DataView(e),t=new TextDecoder;return this._decodeBroadcast(e,n,t)}_decodeBroadcast(e,n,t){const r=n.getUint8(1),a=n.getUint8(2);let o=this.HEADER_LENGTH+2;const i=t.decode(e.slice(o,o+r));o+=r;const s=t.decode(e.slice(o,o+a));return o+=a,{ref:null,topic:i,event:s,payload:JSON.parse(t.decode(e.slice(o,e.byteLength)))}}}class W{constructor(e,n){this.callback=e,this.timerCalc=n,this.timer=void 0,this.tries=0,this.callback=e,this.timerCalc=n}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}!function(e){e.abstime="abstime",e.bool="bool",e.date="date",e.daterange="daterange",e.float4="float4",e.float8="float8",e.int2="int2",e.int4="int4",e.int4range="int4range",e.int8="int8",e.int8range="int8range",e.json="json",e.jsonb="jsonb",e.money="money",e.numeric="numeric",e.oid="oid",e.reltime="reltime",e.text="text",e.time="time",e.timestamp="timestamp",e.timestamptz="timestamptz",e.timetz="timetz",e.tsrange="tsrange",e.tstzrange="tstzrange"}(F||(F={}));const H=(e,n,t={})=>{var r;const a=null!==(r=t.skipTypes)&&void 0!==r?r:[];return Object.keys(n).reduce((t,r)=>(t[r]=V(r,e,n,a),t),{})},V=(e,n,t,r)=>{const a=n.find(n=>n.name===e),o=null==a?void 0:a.type,i=t[e];return o&&!r.includes(o)?Y(o,i):G(i)},Y=(e,n)=>{if("_"===e.charAt(0)){const t=e.slice(1,e.length);return X(n,t)}switch(e){case F.bool:return K(n);case F.float4:case F.float8:case F.int2:case F.int4:case F.int8:case F.numeric:case F.oid:return J(n);case F.json:case F.jsonb:return Q(n);case F.timestamp:return Z(n);case F.abstime:case F.date:case F.daterange:case F.int4range:case F.int8range:case F.money:case F.reltime:case F.text:case F.time:case F.timestamptz:case F.timetz:case F.tsrange:case F.tstzrange:default:return G(n)}},G=e=>e,K=e=>{switch(e){case"t":return!0;case"f":return!1;default:return e}},J=e=>{if("string"==typeof e){const n=parseFloat(e);if(!Number.isNaN(n))return n}return e},Q=e=>{if("string"==typeof e)try{return JSON.parse(e)}catch(n){return console.log(`JSON parse error: ${n}`),e}return e},X=(e,n)=>{if("string"!=typeof e)return e;const t=e.length-1,r=e[t];if("{"===e[0]&&"}"===r){let r;const a=e.slice(1,t);try{r=JSON.parse("["+a+"]")}catch(e){r=a?a.split(","):[]}return r.map(e=>Y(n,e))}return e},Z=e=>"string"==typeof e?e.replace(" ","T"):e,ee=e=>{let n=e;return n=n.replace(/^ws/i,"http"),n=n.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),n.replace(/\/+$/,"")};class ne{constructor(e,n,t={},r=1e4){this.channel=e,this.event=n,this.payload=t,this.timeout=r,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(e){this.timeout=e,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(e){this.payload=Object.assign(Object.assign({},this.payload),e)}receive(e,n){var t;return this._hasReceived(e)&&n(null===(t=this.receivedResp)||void 0===t?void 0:t.response),this.recHooks.push({status:e,callback:n}),this}startTimeout(){this.timeoutTimer||(this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref),this.channel._on(this.refEvent,{},e=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=e,this._matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout))}trigger(e,n){this.refEvent&&this.channel._trigger(this.refEvent,{status:e,response:n})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:e,response:n}){this.recHooks.filter(n=>n.status===e).forEach(e=>e.callback(n))}_hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}}var te,re,ae,oe;!function(e){e.SYNC="sync",e.JOIN="join",e.LEAVE="leave"}(te||(te={}));class ie{constructor(e,n){this.channel=e,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const t=(null==n?void 0:n.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(t.state,{},e=>{const{onJoin:n,onLeave:t,onSync:r}=this.caller;this.joinRef=this.channel._joinRef(),this.state=ie.syncState(this.state,e,n,t),this.pendingDiffs.forEach(e=>{this.state=ie.syncDiff(this.state,e,n,t)}),this.pendingDiffs=[],r()}),this.channel._on(t.diff,{},e=>{const{onJoin:n,onLeave:t,onSync:r}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(e):(this.state=ie.syncDiff(this.state,e,n,t),r())}),this.onJoin((e,n,t)=>{this.channel._trigger("presence",{event:"join",key:e,currentPresences:n,newPresences:t})}),this.onLeave((e,n,t)=>{this.channel._trigger("presence",{event:"leave",key:e,currentPresences:n,leftPresences:t})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(e,n,t,r){const a=this.cloneDeep(e),o=this.transformState(n),i={},s={};return this.map(a,(e,n)=>{o[e]||(s[e]=n)}),this.map(o,(e,n)=>{const t=a[e];if(t){const r=n.map(e=>e.presence_ref),a=t.map(e=>e.presence_ref),o=n.filter(e=>a.indexOf(e.presence_ref)<0),l=t.filter(e=>r.indexOf(e.presence_ref)<0);o.length>0&&(i[e]=o),l.length>0&&(s[e]=l)}else i[e]=n}),this.syncDiff(a,{joins:i,leaves:s},t,r)}static syncDiff(e,n,t,r){const{joins:a,leaves:o}={joins:this.transformState(n.joins),leaves:this.transformState(n.leaves)};return t||(t=()=>{}),r||(r=()=>{}),this.map(a,(n,r)=>{var a;const o=null!==(a=e[n])&&void 0!==a?a:[];if(e[n]=this.cloneDeep(r),o.length>0){const t=e[n].map(e=>e.presence_ref),r=o.filter(e=>t.indexOf(e.presence_ref)<0);e[n].unshift(...r)}t(n,o,r)}),this.map(o,(n,t)=>{let a=e[n];if(!a)return;const o=t.map(e=>e.presence_ref);a=a.filter(e=>o.indexOf(e.presence_ref)<0),e[n]=a,r(n,a,t),0===a.length&&delete e[n]}),e}static map(e,n){return Object.getOwnPropertyNames(e).map(t=>n(t,e[t]))}static transformState(e){return e=this.cloneDeep(e),Object.getOwnPropertyNames(e).reduce((n,t)=>{const r=e[t];return n[t]="metas"in r?r.metas.map(e=>(e.presence_ref=e.phx_ref,delete e.phx_ref,delete e.phx_ref_prev,e)):r,n},{})}static cloneDeep(e){return JSON.parse(JSON.stringify(e))}onJoin(e){this.caller.onJoin=e}onLeave(e){this.caller.onLeave=e}onSync(e){this.caller.onSync=e}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}!function(e){e.ALL="*",e.INSERT="INSERT",e.UPDATE="UPDATE",e.DELETE="DELETE"}(re||(re={})),function(e){e.BROADCAST="broadcast",e.PRESENCE="presence",e.POSTGRES_CHANGES="postgres_changes",e.SYSTEM="system"}(ae||(ae={})),function(e){e.SUBSCRIBED="SUBSCRIBED",e.TIMED_OUT="TIMED_OUT",e.CLOSED="CLOSED",e.CHANNEL_ERROR="CHANNEL_ERROR"}(oe||(oe={}));class se{constructor(e,n={config:{}},t){this.topic=e,this.params=n,this.socket=t,this.bindings={},this.state=R.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=e.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},n.config),this.timeout=this.socket.timeout,this.joinPush=new ne(this,D.join,this.params,this.timeout),this.rejoinTimer=new W(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=R.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(e=>e.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=R.closed,this.socket._remove(this)}),this._onError(e=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,e),this.state=R.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=R.errored,this.rejoinTimer.scheduleTimeout())}),this._on(D.reply,{},(e,n)=>{this._trigger(this._replyEventName(n),e)}),this.presence=new ie(this),this.broadcastEndpointURL=ee(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(e,n=this.timeout){var t,r;if(this.socket.isConnected()||this.socket.connect(),this.state==R.closed){const{config:{broadcast:a,presence:o,private:i}}=this.params;this._onError(n=>null==e?void 0:e(oe.CHANNEL_ERROR,n)),this._onClose(()=>null==e?void 0:e(oe.CLOSED));const s={},l={broadcast:a,presence:o,postgres_changes:null!==(r=null===(t=this.bindings.postgres_changes)||void 0===t?void 0:t.map(e=>e.filter))&&void 0!==r?r:[],private:i};this.socket.accessTokenValue&&(s.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:l},s)),this.joinedOnce=!0,this._rejoin(n),this.joinPush.receive("ok",async({postgres_changes:n})=>{var t;if(this.socket.setAuth(),void 0!==n){const r=this.bindings.postgres_changes,a=null!==(t=null==r?void 0:r.length)&&void 0!==t?t:0,o=[];for(let t=0;t<a;t++){const a=r[t],{filter:{event:i,schema:s,table:l,filter:c}}=a,u=n&&n[t];if(!u||u.event!==i||u.schema!==s||u.table!==l||u.filter!==c)return this.unsubscribe(),this.state=R.errored,void(null==e||e(oe.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes")));o.push(Object.assign(Object.assign({},a),{id:u.id}))}return this.bindings.postgres_changes=o,void(e&&e(oe.SUBSCRIBED))}null==e||e(oe.SUBSCRIBED)}).receive("error",n=>{this.state=R.errored,null==e||e(oe.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(n).join(", ")||"error")))}).receive("timeout",()=>{null==e||e(oe.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(e,n={}){return await this.send({type:"presence",event:"track",payload:e},n.timeout||this.timeout)}async untrack(e={}){return await this.send({type:"presence",event:"untrack"},e)}on(e,n,t){return this._on(e,n,t)}async send(e,n={}){var t,r;if(this._canPush()||"broadcast"!==e.type)return new Promise(t=>{var r,a,o;const i=this._push(e.type,e,n.timeout||this.timeout);"broadcast"!==e.type||(null===(o=null===(a=null===(r=this.params)||void 0===r?void 0:r.config)||void 0===a?void 0:a.broadcast)||void 0===o?void 0:o.ack)||t("ok"),i.receive("ok",()=>t("ok")),i.receive("error",()=>t("error")),i.receive("timeout",()=>t("timed out"))});{const{event:a,payload:o}=e,i={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:a,payload:o,private:this.private}]})};try{const e=await this._fetchWithTimeout(this.broadcastEndpointURL,i,null!==(t=n.timeout)&&void 0!==t?t:this.timeout);return await(null===(r=e.body)||void 0===r?void 0:r.cancel()),e.ok?"ok":"error"}catch(e){return"AbortError"===e.name?"timed out":"error"}}}updateJoinPayload(e){this.joinPush.updatePayload(e)}unsubscribe(e=this.timeout){this.state=R.leaving;const n=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(D.close,"leave",this._joinRef())};this.joinPush.destroy();let t=null;return new Promise(r=>{t=new ne(this,D.leave,{},e),t.receive("ok",()=>{n(),r("ok")}).receive("timeout",()=>{n(),r("timed out")}).receive("error",()=>{r("error")}),t.send(),this._canPush()||t.trigger("ok",{})}).finally(()=>{null==t||t.destroy()})}teardown(){this.pushBuffer.forEach(e=>e.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}async _fetchWithTimeout(e,n,t){const r=new AbortController,a=setTimeout(()=>r.abort(),t),o=await this.socket.fetch(e,Object.assign(Object.assign({},n),{signal:r.signal}));return clearTimeout(a),o}_push(e,n,t=this.timeout){if(!this.joinedOnce)throw`tried to push '${e}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let r=new ne(this,e,n,t);return this._canPush()?r.send():(r.startTimeout(),this.pushBuffer.push(r)),r}_onMessage(e,n,t){return n}_isMember(e){return this.topic===e}_joinRef(){return this.joinPush.ref}_trigger(e,n,t){var r,a;const o=e.toLocaleLowerCase(),{close:i,error:s,leave:l,join:c}=D;if(t&&[i,s,l,c].indexOf(o)>=0&&t!==this._joinRef())return;let u=this._onMessage(o,n,t);if(n&&!u)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(o)?null===(r=this.bindings.postgres_changes)||void 0===r||r.filter(e=>{var n,t,r;return"*"===(null===(n=e.filter)||void 0===n?void 0:n.event)||(null===(r=null===(t=e.filter)||void 0===t?void 0:t.event)||void 0===r?void 0:r.toLocaleLowerCase())===o}).map(e=>e.callback(u,t)):null===(a=this.bindings[o])||void 0===a||a.filter(e=>{var t,r,a,i,s,l;if(["broadcast","presence","postgres_changes"].includes(o)){if("id"in e){const o=e.id,i=null===(t=e.filter)||void 0===t?void 0:t.event;return o&&(null===(r=n.ids)||void 0===r?void 0:r.includes(o))&&("*"===i||(null==i?void 0:i.toLocaleLowerCase())===(null===(a=n.data)||void 0===a?void 0:a.type.toLocaleLowerCase()))}{const t=null===(s=null===(i=null==e?void 0:e.filter)||void 0===i?void 0:i.event)||void 0===s?void 0:s.toLocaleLowerCase();return"*"===t||t===(null===(l=null==n?void 0:n.event)||void 0===l?void 0:l.toLocaleLowerCase())}}return e.type.toLocaleLowerCase()===o}).map(e=>{if("object"==typeof u&&"ids"in u){const e=u.data,{schema:n,table:t,commit_timestamp:r,type:a,errors:o}=e,i={schema:n,table:t,commit_timestamp:r,eventType:a,new:{},old:{},errors:o};u=Object.assign(Object.assign({},i),this._getPayloadRecords(e))}e.callback(u,t)})}_isClosed(){return this.state===R.closed}_isJoined(){return this.state===R.joined}_isJoining(){return this.state===R.joining}_isLeaving(){return this.state===R.leaving}_replyEventName(e){return`chan_reply_${e}`}_on(e,n,t){const r=e.toLocaleLowerCase(),a={type:r,filter:n,callback:t};return this.bindings[r]?this.bindings[r].push(a):this.bindings[r]=[a],this}_off(e,n){const t=e.toLocaleLowerCase();return this.bindings[t]=this.bindings[t].filter(e=>{var r;return!((null===(r=e.type)||void 0===r?void 0:r.toLocaleLowerCase())===t&&se.isEqual(e.filter,n))}),this}static isEqual(e,n){if(Object.keys(e).length!==Object.keys(n).length)return!1;for(const t in e)if(e[t]!==n[t])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(e){this._on(D.close,{},e)}_onError(e){this._on(D.error,{},n=>e(n))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(e=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=R.joining,this.joinPush.resend(e))}_getPayloadRecords(e){const n={new:{},old:{}};return"INSERT"!==e.type&&"UPDATE"!==e.type||(n.new=H(e.columns,e.record)),"UPDATE"!==e.type&&"DELETE"!==e.type||(n.old=H(e.columns,e.old_record)),n}}const le=()=>{};class ce{constructor(e,n){var r;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers={},this.params={},this.timeout=1e4,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=le,this.ref=0,this.logger=le,this.conn=null,this.sendBuffer=[],this.serializer=new q,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=e=>{let n;return n=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(t.bind(t,907)).then(({default:n})=>n(...e)):fetch),(...e)=>n(...e)},this.endPoint=`${e}/${M.websocket}`,this.httpEndpoint=ee(e),(null==n?void 0:n.transport)?this.transport=n.transport:this.transport=null,(null==n?void 0:n.params)&&(this.params=n.params),(null==n?void 0:n.timeout)&&(this.timeout=n.timeout),(null==n?void 0:n.logger)&&(this.logger=n.logger),((null==n?void 0:n.logLevel)||(null==n?void 0:n.log_level))&&(this.logLevel=n.logLevel||n.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),(null==n?void 0:n.heartbeatIntervalMs)&&(this.heartbeatIntervalMs=n.heartbeatIntervalMs);const a=null===(r=null==n?void 0:n.params)||void 0===r?void 0:r.apikey;if(a&&(this.accessTokenValue=a,this.apiKey=a),this.reconnectAfterMs=(null==n?void 0:n.reconnectAfterMs)?n.reconnectAfterMs:e=>[1e3,2e3,5e3,1e4][e-1]||1e4,this.encode=(null==n?void 0:n.encode)?n.encode:(e,n)=>n(JSON.stringify(e)),this.decode=(null==n?void 0:n.decode)?n.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new W(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(null==n?void 0:n.fetch),null==n?void 0:n.worker){if("undefined"!=typeof window&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(null==n?void 0:n.worker)||!1,this.workerUrl=null==n?void 0:n.workerUrl}this.accessToken=(null==n?void 0:n.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=I),!this.transport)throw new Error("No transport provided");this.conn=new this.transport(this.endpointURL()),this.setupConnection()}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:"1.0.0"}))}disconnect(e,n){this.conn&&(this.conn.onclose=function(){},e?this.conn.close(e,null!=n?n:""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(e=>e.teardown()))}getChannels(){return this.channels}async removeChannel(e){const n=await e.unsubscribe();return 0===this.channels.length&&this.disconnect(),n}async removeAllChannels(){const e=await Promise.all(this.channels.map(e=>e.unsubscribe()));return this.channels=[],this.disconnect(),e}log(e,n,t){this.logger(e,n,t)}connectionState(){switch(this.conn&&this.conn.readyState){case L.connecting:return U.Connecting;case L.open:return U.Open;case L.closing:return U.Closing;default:return U.Closed}}isConnected(){return this.connectionState()===U.Open}channel(e,n={config:{}}){const t=`realtime:${e}`,r=this.getChannels().find(e=>e.topic===t);if(r)return r;{const t=new se(`realtime:${e}`,n,this);return this.channels.push(t),t}}push(e){const{topic:n,event:t,payload:r,ref:a}=e,o=()=>{this.encode(e,e=>{var n;null===(n=this.conn)||void 0===n||n.send(e)})};this.log("push",`${n} ${t} (${a})`,r),this.isConnected()?o():this.sendBuffer.push(o)}async setAuth(e=null){let n=e||this.accessToken&&await this.accessToken()||this.accessTokenValue;this.accessTokenValue!=n&&(this.accessTokenValue=n,this.channels.forEach(e=>{const t={access_token:n,version:"realtime-js/2.11.15"};n&&e.updateJoinPayload(t),e.joinedOnce&&e._isJoined()&&e._push(D.access_token,{access_token:n})}))}async sendHeartbeat(){var e;if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),void(null===(e=this.conn)||void 0===e||e.close(1e3,"hearbeat timeout"));this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),await this.setAuth()}else this.heartbeatCallback("disconnected")}onHeartbeat(e){this.heartbeatCallback=e}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}_makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}_leaveOpenTopic(e){let n=this.channels.find(n=>n.topic===e&&(n._isJoined()||n._isJoining()));n&&(this.log("transport",`leaving duplicate topic "${e}"`),n.unsubscribe())}_remove(e){this.channels=this.channels.filter(n=>n.topic!==e.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=e=>this._onConnError(e),this.conn.onmessage=e=>this._onConnMessage(e),this.conn.onclose=e=>this._onConnClose(e))}_onConnMessage(e){this.decode(e.data,e=>{let{topic:n,event:t,payload:r,ref:a}=e;"phoenix"===n&&"phx_reply"===t&&this.heartbeatCallback("ok"==e.payload.status?"ok":"error"),a&&a===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${r.status||""} ${n} ${t} ${a&&"("+a+")"||""}`,r),Array.from(this.channels).filter(e=>e._isMember(n)).forEach(e=>e._trigger(t,r,a)),this.stateChangeCallbacks.message.forEach(n=>n(e))})}_onConnOpen(){this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker?this.workerRef||this._startWorkerHeartbeat():this._startHeartbeat(),this.stateChangeCallbacks.open.forEach(e=>e())}_startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)}_startWorkerHeartbeat(){this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const e=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(e),this.workerRef.onerror=e=>{this.log("worker","worker error",e.message),this.workerRef.terminate()},this.workerRef.onmessage=e=>{"keepAlive"===e.data.event&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}_onConnClose(e){this.log("transport","close",e),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(n=>n(e))}_onConnError(e){this.log("transport",`${e}`),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(n=>n(e))}_triggerChanError(){this.channels.forEach(e=>e._trigger(D.error))}_appendParams(e,n){if(0===Object.keys(n).length)return e;const t=e.match(/\?/)?"&":"?";return`${e}${t}${new URLSearchParams(n)}`}_workerObjectUrl(e){let n;if(e)n=e;else{const e=new Blob(['\n  addEventListener("message", (e) => {\n    if (e.data.event === "start") {\n      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);\n    }\n  });'],{type:"application/javascript"});n=URL.createObjectURL(e)}return n}}class ue extends Error{constructor(e){super(e),this.__isStorageError=!0,this.name="StorageError"}}function de(e){return"object"==typeof e&&null!==e&&"__isStorageError"in e}class he extends ue{constructor(e,n){super(e),this.name="StorageApiError",this.status=n}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class fe extends ue{constructor(e,n){super(e),this.name="StorageUnknownError",this.originalError=n}}const pe=e=>{let n;return n=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(t.bind(t,907)).then(({default:n})=>n(...e)):fetch),(...e)=>n(...e)},ge=e=>{if(Array.isArray(e))return e.map(e=>ge(e));if("function"==typeof e||e!==Object(e))return e;const n={};return Object.entries(e).forEach(([e,t])=>{const r=e.replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace(/[-_]/g,""));n[r]=ge(t)}),n};var ve=function(e,n,t,r){return new(t||(t=Promise))(function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t(function(e){e(n)})).then(i,s)}l((r=r.apply(e,n||[])).next())})};const me=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),Ae=(e,n,r)=>ve(void 0,void 0,void 0,function*(){const a=yield(o=void 0,i=void 0,s=void 0,l=function*(){return"undefined"==typeof Response?(yield Promise.resolve().then(t.bind(t,907))).Response:Response},new(s||(s=Promise))(function(e,n){function t(e){try{a(l.next(e))}catch(e){n(e)}}function r(e){try{a(l.throw(e))}catch(e){n(e)}}function a(n){var a;n.done?e(n.value):(a=n.value,a instanceof s?a:new s(function(e){e(a)})).then(t,r)}a((l=l.apply(o,i||[])).next())}));var o,i,s,l;e instanceof a&&!(null==r?void 0:r.noResolveJson)?e.json().then(t=>{n(new he(me(t),e.status||500))}).catch(e=>{n(new fe(me(e),e))}):n(new fe(me(e),e))});function ye(e,n,t,r,a,o){return ve(this,void 0,void 0,function*(){return new Promise((i,s)=>{e(t,((e,n,t,r)=>{const a={method:e,headers:(null==n?void 0:n.headers)||{}};return"GET"===e?a:(a.headers=Object.assign({"Content-Type":"application/json"},null==n?void 0:n.headers),r&&(a.body=JSON.stringify(r)),Object.assign(Object.assign({},a),t))})(n,r,a,o)).then(e=>{if(!e.ok)throw e;return(null==r?void 0:r.noResolveJson)?e:e.json()}).then(e=>i(e)).catch(e=>Ae(e,s,r))})})}function be(e,n,t,r){return ve(this,void 0,void 0,function*(){return ye(e,"GET",n,t,r)})}function we(e,n,t,r,a){return ve(this,void 0,void 0,function*(){return ye(e,"POST",n,r,a,t)})}function Ce(e,n,t,r,a){return ve(this,void 0,void 0,function*(){return ye(e,"DELETE",n,r,a,t)})}var ke=function(e,n,t,r){return new(t||(t=Promise))(function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t(function(e){e(n)})).then(i,s)}l((r=r.apply(e,n||[])).next())})};const xe={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},Ee={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class Be{constructor(e,n={},t,r){this.url=e,this.headers=n,this.bucketId=t,this.fetch=pe(r)}uploadOrUpdate(e,n,t,r){return ke(this,void 0,void 0,function*(){try{let a;const o=Object.assign(Object.assign({},Ee),r);let i=Object.assign(Object.assign({},this.headers),"POST"===e&&{"x-upsert":String(o.upsert)});const s=o.metadata;"undefined"!=typeof Blob&&t instanceof Blob?(a=new FormData,a.append("cacheControl",o.cacheControl),s&&a.append("metadata",this.encodeMetadata(s)),a.append("",t)):"undefined"!=typeof FormData&&t instanceof FormData?(a=t,a.append("cacheControl",o.cacheControl),s&&a.append("metadata",this.encodeMetadata(s))):(a=t,i["cache-control"]=`max-age=${o.cacheControl}`,i["content-type"]=o.contentType,s&&(i["x-metadata"]=this.toBase64(this.encodeMetadata(s)))),(null==r?void 0:r.headers)&&(i=Object.assign(Object.assign({},i),r.headers));const l=this._removeEmptyFolders(n),c=this._getFinalPath(l),u=yield this.fetch(`${this.url}/object/${c}`,Object.assign({method:e,body:a,headers:i},(null==o?void 0:o.duplex)?{duplex:o.duplex}:{})),d=yield u.json();return u.ok?{data:{path:l,id:d.Id,fullPath:d.Key},error:null}:{data:null,error:d}}catch(e){if(de(e))return{data:null,error:e};throw e}})}upload(e,n,t){return ke(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",e,n,t)})}uploadToSignedUrl(e,n,t,r){return ke(this,void 0,void 0,function*(){const a=this._removeEmptyFolders(e),o=this._getFinalPath(a),i=new URL(this.url+`/object/upload/sign/${o}`);i.searchParams.set("token",n);try{let e;const n=Object.assign({upsert:Ee.upsert},r),o=Object.assign(Object.assign({},this.headers),{"x-upsert":String(n.upsert)});"undefined"!=typeof Blob&&t instanceof Blob?(e=new FormData,e.append("cacheControl",n.cacheControl),e.append("",t)):"undefined"!=typeof FormData&&t instanceof FormData?(e=t,e.append("cacheControl",n.cacheControl)):(e=t,o["cache-control"]=`max-age=${n.cacheControl}`,o["content-type"]=n.contentType);const s=yield this.fetch(i.toString(),{method:"PUT",body:e,headers:o}),l=yield s.json();return s.ok?{data:{path:a,fullPath:l.Key},error:null}:{data:null,error:l}}catch(e){if(de(e))return{data:null,error:e};throw e}})}createSignedUploadUrl(e,n){return ke(this,void 0,void 0,function*(){try{let t=this._getFinalPath(e);const r=Object.assign({},this.headers);(null==n?void 0:n.upsert)&&(r["x-upsert"]="true");const a=yield we(this.fetch,`${this.url}/object/upload/sign/${t}`,{},{headers:r}),o=new URL(this.url+a.url),i=o.searchParams.get("token");if(!i)throw new ue("No token returned by API");return{data:{signedUrl:o.toString(),path:e,token:i},error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}update(e,n,t){return ke(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",e,n,t)})}move(e,n,t){return ke(this,void 0,void 0,function*(){try{return{data:yield we(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:e,destinationKey:n,destinationBucket:null==t?void 0:t.destinationBucket},{headers:this.headers}),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}copy(e,n,t){return ke(this,void 0,void 0,function*(){try{return{data:{path:(yield we(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:e,destinationKey:n,destinationBucket:null==t?void 0:t.destinationBucket},{headers:this.headers})).Key},error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}createSignedUrl(e,n,t){return ke(this,void 0,void 0,function*(){try{let r=this._getFinalPath(e),a=yield we(this.fetch,`${this.url}/object/sign/${r}`,Object.assign({expiresIn:n},(null==t?void 0:t.transform)?{transform:t.transform}:{}),{headers:this.headers});const o=(null==t?void 0:t.download)?`&download=${!0===t.download?"":t.download}`:"";return a={signedUrl:encodeURI(`${this.url}${a.signedURL}${o}`)},{data:a,error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}createSignedUrls(e,n,t){return ke(this,void 0,void 0,function*(){try{const r=yield we(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:n,paths:e},{headers:this.headers}),a=(null==t?void 0:t.download)?`&download=${!0===t.download?"":t.download}`:"";return{data:r.map(e=>Object.assign(Object.assign({},e),{signedUrl:e.signedURL?encodeURI(`${this.url}${e.signedURL}${a}`):null})),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}download(e,n){return ke(this,void 0,void 0,function*(){const t=void 0!==(null==n?void 0:n.transform)?"render/image/authenticated":"object",r=this.transformOptsToQueryString((null==n?void 0:n.transform)||{}),a=r?`?${r}`:"";try{const n=this._getFinalPath(e),r=yield be(this.fetch,`${this.url}/${t}/${n}${a}`,{headers:this.headers,noResolveJson:!0});return{data:yield r.blob(),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}info(e){return ke(this,void 0,void 0,function*(){const n=this._getFinalPath(e);try{const e=yield be(this.fetch,`${this.url}/object/info/${n}`,{headers:this.headers});return{data:ge(e),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}exists(e){return ke(this,void 0,void 0,function*(){const n=this._getFinalPath(e);try{return yield function(e,n,t){return ve(this,void 0,void 0,function*(){return ye(e,"HEAD",n,Object.assign(Object.assign({},t),{noResolveJson:!0}),undefined)})}(this.fetch,`${this.url}/object/${n}`,{headers:this.headers}),{data:!0,error:null}}catch(e){if(de(e)&&e instanceof fe){const n=e.originalError;if([400,404].includes(null==n?void 0:n.status))return{data:!1,error:e}}throw e}})}getPublicUrl(e,n){const t=this._getFinalPath(e),r=[],a=(null==n?void 0:n.download)?`download=${!0===n.download?"":n.download}`:"";""!==a&&r.push(a);const o=void 0!==(null==n?void 0:n.transform)?"render/image":"object",i=this.transformOptsToQueryString((null==n?void 0:n.transform)||{});""!==i&&r.push(i);let s=r.join("&");return""!==s&&(s=`?${s}`),{data:{publicUrl:encodeURI(`${this.url}/${o}/public/${t}${s}`)}}}remove(e){return ke(this,void 0,void 0,function*(){try{return{data:yield Ce(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:e},{headers:this.headers}),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}list(e,n,t){return ke(this,void 0,void 0,function*(){try{const r=Object.assign(Object.assign(Object.assign({},xe),n),{prefix:e||""});return{data:yield we(this.fetch,`${this.url}/object/list/${this.bucketId}`,r,{headers:this.headers},t),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}encodeMetadata(e){return JSON.stringify(e)}toBase64(e){return"undefined"!=typeof Buffer?Buffer.from(e).toString("base64"):btoa(e)}_getFinalPath(e){return`${this.bucketId}/${e}`}_removeEmptyFolders(e){return e.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(e){const n=[];return e.width&&n.push(`width=${e.width}`),e.height&&n.push(`height=${e.height}`),e.resize&&n.push(`resize=${e.resize}`),e.format&&n.push(`format=${e.format}`),e.quality&&n.push(`quality=${e.quality}`),n.join("&")}}const je={"X-Client-Info":"storage-js/2.7.1"};var Se=function(e,n,t,r){return new(t||(t=Promise))(function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t(function(e){e(n)})).then(i,s)}l((r=r.apply(e,n||[])).next())})};class _e{constructor(e,n={},t){this.url=e,this.headers=Object.assign(Object.assign({},je),n),this.fetch=pe(t)}listBuckets(){return Se(this,void 0,void 0,function*(){try{return{data:yield be(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}getBucket(e){return Se(this,void 0,void 0,function*(){try{return{data:yield be(this.fetch,`${this.url}/bucket/${e}`,{headers:this.headers}),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}createBucket(e,n={public:!1}){return Se(this,void 0,void 0,function*(){try{return{data:yield we(this.fetch,`${this.url}/bucket`,{id:e,name:e,public:n.public,file_size_limit:n.fileSizeLimit,allowed_mime_types:n.allowedMimeTypes},{headers:this.headers}),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}updateBucket(e,n){return Se(this,void 0,void 0,function*(){try{const t=yield function(e,n,t,r){return ve(this,void 0,void 0,function*(){return ye(e,"PUT",n,r,undefined,t)})}(this.fetch,`${this.url}/bucket/${e}`,{id:e,name:e,public:n.public,file_size_limit:n.fileSizeLimit,allowed_mime_types:n.allowedMimeTypes},{headers:this.headers});return{data:t,error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}emptyBucket(e){return Se(this,void 0,void 0,function*(){try{return{data:yield we(this.fetch,`${this.url}/bucket/${e}/empty`,{},{headers:this.headers}),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}deleteBucket(e){return Se(this,void 0,void 0,function*(){try{return{data:yield Ce(this.fetch,`${this.url}/bucket/${e}`,{},{headers:this.headers}),error:null}}catch(e){if(de(e))return{data:null,error:e};throw e}})}}class Ne extends _e{constructor(e,n={},t){super(e,n,t)}from(e){return new Be(this.url,this.headers,e,this.fetch)}}let Te="";Te="undefined"!=typeof Deno?"deno":"undefined"!=typeof document?"web":"undefined"!=typeof navigator&&"ReactNative"===navigator.product?"react-native":"node";const Oe={headers:{"X-Client-Info":`supabase-js-${Te}/2.50.3`}},Pe={schema:"public"},ze={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},Ie={};var Le=t(907);const Re=e=>{let n;return n=e||("undefined"==typeof fetch?Le.default:fetch),(...e)=>n(...e)},De=(e,n,t)=>{const r=Re(t),a="undefined"==typeof Headers?Le.Headers:Headers;return(t,o)=>{return i=void 0,s=void 0,c=function*(){var i;const s=null!==(i=yield n())&&void 0!==i?i:e;let l=new a(null==o?void 0:o.headers);return l.has("apikey")||l.set("apikey",e),l.has("Authorization")||l.set("Authorization",`Bearer ${s}`),r(t,Object.assign(Object.assign({},o),{headers:l}))},new((l=void 0)||(l=Promise))(function(e,n){function t(e){try{a(c.next(e))}catch(e){n(e)}}function r(e){try{a(c.throw(e))}catch(e){n(e)}}function a(n){var a;n.done?e(n.value):(a=n.value,a instanceof l?a:new l(function(e){e(a)})).then(t,r)}a((c=c.apply(i,s||[])).next())});var i,s,l,c}};const Me="2.70.0",Ue=3e4,Fe={"X-Client-Info":`gotrue-js/${Me}`},$e="X-Supabase-Api-Version",qe=Date.parse("2024-01-01T00:00:00.0Z"),We="2024-01-01",He=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;class Ve extends Error{constructor(e,n,t){super(e),this.__isAuthError=!0,this.name="AuthError",this.status=n,this.code=t}}function Ye(e){return"object"==typeof e&&null!==e&&"__isAuthError"in e}class Ge extends Ve{constructor(e,n,t){super(e,n,t),this.name="AuthApiError",this.status=n,this.code=t}}class Ke extends Ve{constructor(e,n){super(e),this.name="AuthUnknownError",this.originalError=n}}class Je extends Ve{constructor(e,n,t,r){super(e,t,r),this.name=n,this.status=t}}class Qe extends Je{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}class Xe extends Je{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class Ze extends Je{constructor(e){super(e,"AuthInvalidCredentialsError",400,void 0)}}class en extends Je{constructor(e,n=null){super(e,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=n}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class nn extends Je{constructor(e,n=null){super(e,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=n}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class tn extends Je{constructor(e,n){super(e,"AuthRetryableFetchError",n,void 0)}}function rn(e){return Ye(e)&&"AuthRetryableFetchError"===e.name}class an extends Je{constructor(e,n,t){super(e,"AuthWeakPasswordError",n,"weak_password"),this.reasons=t}}class on extends Je{constructor(e){super(e,"AuthInvalidJwtError",400,"invalid_jwt")}}const sn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),ln=" \t\n\r=".split(""),cn=(()=>{const e=new Array(128);for(let n=0;n<e.length;n+=1)e[n]=-1;for(let n=0;n<ln.length;n+=1)e[ln[n].charCodeAt(0)]=-2;for(let n=0;n<sn.length;n+=1)e[sn[n].charCodeAt(0)]=n;return e})();function un(e,n,t){if(null!==e)for(n.queue=n.queue<<8|e,n.queuedBits+=8;n.queuedBits>=6;){const e=n.queue>>n.queuedBits-6&63;t(sn[e]),n.queuedBits-=6}else if(n.queuedBits>0)for(n.queue=n.queue<<6-n.queuedBits,n.queuedBits=6;n.queuedBits>=6;){const e=n.queue>>n.queuedBits-6&63;t(sn[e]),n.queuedBits-=6}}function dn(e,n,t){const r=cn[e];if(!(r>-1)){if(-2===r)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(e)}"`)}for(n.queue=n.queue<<6|r,n.queuedBits+=6;n.queuedBits>=8;)t(n.queue>>n.queuedBits-8&255),n.queuedBits-=8}function hn(e){const n=[],t=e=>{n.push(String.fromCodePoint(e))},r={utf8seq:0,codepoint:0},a={queue:0,queuedBits:0},o=e=>{!function(e,n,t){if(0===n.utf8seq){if(e<=127)return void t(e);for(let t=1;t<6;t+=1)if(!(e>>7-t&1)){n.utf8seq=t;break}if(2===n.utf8seq)n.codepoint=31&e;else if(3===n.utf8seq)n.codepoint=15&e;else{if(4!==n.utf8seq)throw new Error("Invalid UTF-8 sequence");n.codepoint=7&e}n.utf8seq-=1}else if(n.utf8seq>0){if(e<=127)throw new Error("Invalid UTF-8 sequence");n.codepoint=n.codepoint<<6|63&e,n.utf8seq-=1,0===n.utf8seq&&t(n.codepoint)}}(e,r,t)};for(let n=0;n<e.length;n+=1)dn(e.charCodeAt(n),a,o);return n.join("")}function fn(e,n){if(!(e<=127)){if(e<=2047)return n(192|e>>6),void n(128|63&e);if(e<=65535)return n(224|e>>12),n(128|e>>6&63),void n(128|63&e);if(e<=1114111)return n(240|e>>18),n(128|e>>12&63),n(128|e>>6&63),void n(128|63&e);throw new Error(`Unrecognized Unicode codepoint: ${e.toString(16)}`)}n(e)}function pn(e){const n=[],t={queue:0,queuedBits:0},r=e=>{n.push(e)};for(let n=0;n<e.length;n+=1)dn(e.charCodeAt(n),t,r);return new Uint8Array(n)}function gn(e){const n=[],t={queue:0,queuedBits:0},r=e=>{n.push(e)};return e.forEach(e=>un(e,t,r)),un(null,t,r),n.join("")}const vn=()=>"undefined"!=typeof window&&"undefined"!=typeof document,mn={tested:!1,writable:!1},An=()=>{if(!vn())return!1;try{if("object"!=typeof globalThis.localStorage)return!1}catch(e){return!1}if(mn.tested)return mn.writable;const e=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(e,e),globalThis.localStorage.removeItem(e),mn.tested=!0,mn.writable=!0}catch(e){mn.tested=!0,mn.writable=!1}return mn.writable},yn=e=>{let n;return n=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(t.bind(t,907)).then(({default:n})=>n(...e)):fetch),(...e)=>n(...e)},bn=async(e,n,t)=>{await e.setItem(n,JSON.stringify(t))},wn=async(e,n)=>{const t=await e.getItem(n);if(!t)return null;try{return JSON.parse(t)}catch(e){return t}},Cn=async(e,n)=>{await e.removeItem(n)};class kn{constructor(){this.promise=new kn.promiseConstructor((e,n)=>{this.resolve=e,this.reject=n})}}function xn(e){const n=e.split(".");if(3!==n.length)throw new on("Invalid JWT structure");for(let e=0;e<n.length;e++)if(!He.test(n[e]))throw new on("JWT not in base64url format");return{header:JSON.parse(hn(n[0])),payload:JSON.parse(hn(n[1])),signature:pn(n[2]),raw:{header:n[0],payload:n[1]}}}function En(e){return("0"+e.toString(16)).substr(-2)}async function Bn(e,n,t=!1){const r=function(){const e=new Uint32Array(56);if("undefined"==typeof crypto){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",n=e.length;let t="";for(let r=0;r<56;r++)t+=e.charAt(Math.floor(Math.random()*n));return t}return crypto.getRandomValues(e),Array.from(e,En).join("")}();let a=r;t&&(a+="/PASSWORD_RECOVERY"),await bn(e,`${n}-code-verifier`,a);const o=await async function(e){if("undefined"==typeof crypto||void 0===crypto.subtle||"undefined"==typeof TextEncoder)return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),e;const n=await async function(e){const n=(new TextEncoder).encode(e),t=await crypto.subtle.digest("SHA-256",n),r=new Uint8Array(t);return Array.from(r).map(e=>String.fromCharCode(e)).join("")}(e);return btoa(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}(r);return[o,r===o?"plain":"s256"]}kn.promiseConstructor=Promise;const jn=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i,Sn=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function _n(e){if(!Sn.test(e))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}const Nn=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),Tn=[502,503,504];async function On(e){var n,t;if(!("object"==typeof(t=e)&&null!==t&&"status"in t&&"ok"in t&&"json"in t&&"function"==typeof t.json))throw new tn(Nn(e),0);if(Tn.includes(e.status))throw new tn(Nn(e),e.status);let r,a;try{r=await e.json()}catch(e){throw new Ke(Nn(e),e)}const o=function(e){const n=e.headers.get($e);if(!n)return null;if(!n.match(jn))return null;try{return new Date(`${n}T00:00:00.0Z`)}catch(e){return null}}(e);if(o&&o.getTime()>=qe&&"object"==typeof r&&r&&"string"==typeof r.code?a=r.code:"object"==typeof r&&r&&"string"==typeof r.error_code&&(a=r.error_code),a){if("weak_password"===a)throw new an(Nn(r),e.status,(null===(n=r.weak_password)||void 0===n?void 0:n.reasons)||[]);if("session_not_found"===a)throw new Qe}else if("object"==typeof r&&r&&"object"==typeof r.weak_password&&r.weak_password&&Array.isArray(r.weak_password.reasons)&&r.weak_password.reasons.length&&r.weak_password.reasons.reduce((e,n)=>e&&"string"==typeof n,!0))throw new an(Nn(r),e.status,r.weak_password.reasons);throw new Ge(Nn(r),e.status||500,a)}async function Pn(e,n,t,r){var a;const o=Object.assign({},null==r?void 0:r.headers);o[$e]||(o[$e]=We),(null==r?void 0:r.jwt)&&(o.Authorization=`Bearer ${r.jwt}`);const i=null!==(a=null==r?void 0:r.query)&&void 0!==a?a:{};(null==r?void 0:r.redirectTo)&&(i.redirect_to=r.redirectTo);const s=Object.keys(i).length?"?"+new URLSearchParams(i).toString():"",l=await async function(e,n,t,r,a,o){const i=((e,n,t,r)=>{const a={method:e,headers:(null==n?void 0:n.headers)||{}};return"GET"===e?a:(a.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},null==n?void 0:n.headers),a.body=JSON.stringify(r),Object.assign(Object.assign({},a),t))})(n,r,{},o);let s;try{s=await e(t,Object.assign({},i))}catch(e){throw console.error(e),new tn(Nn(e),0)}if(s.ok||await On(s),null==r?void 0:r.noResolveJson)return s;try{return await s.json()}catch(e){await On(e)}}(e,n,t+s,{headers:o,noResolveJson:null==r?void 0:r.noResolveJson},0,null==r?void 0:r.body);return(null==r?void 0:r.xform)?null==r?void 0:r.xform(l):{data:Object.assign({},l),error:null}}function zn(e){var n;let t=null;var r;return function(e){return e.access_token&&e.refresh_token&&e.expires_in}(e)&&(t=Object.assign({},e),e.expires_at||(t.expires_at=(r=e.expires_in,Math.round(Date.now()/1e3)+r))),{data:{session:t,user:null!==(n=e.user)&&void 0!==n?n:e},error:null}}function In(e){const n=zn(e);return!n.error&&e.weak_password&&"object"==typeof e.weak_password&&Array.isArray(e.weak_password.reasons)&&e.weak_password.reasons.length&&e.weak_password.message&&"string"==typeof e.weak_password.message&&e.weak_password.reasons.reduce((e,n)=>e&&"string"==typeof n,!0)&&(n.data.weak_password=e.weak_password),n}function Ln(e){var n;return{data:{user:null!==(n=e.user)&&void 0!==n?n:e},error:null}}function Rn(e){return{data:e,error:null}}function Dn(e){const{action_link:n,email_otp:t,hashed_token:r,redirect_to:a,verification_type:o}=e,i=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)n.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(t[r[a]]=e[r[a]])}return t}(e,["action_link","email_otp","hashed_token","redirect_to","verification_type"]);return{data:{properties:{action_link:n,email_otp:t,hashed_token:r,redirect_to:a,verification_type:o},user:Object.assign({},i)},error:null}}function Mn(e){return e}const Un=["global","local","others"];class Fn{constructor({url:e="",headers:n={},fetch:t}){this.url=e,this.headers=n,this.fetch=yn(t),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(e,n=Un[0]){if(Un.indexOf(n)<0)throw new Error(`@supabase/auth-js: Parameter scope must be one of ${Un.join(", ")}`);try{return await Pn(this.fetch,"POST",`${this.url}/logout?scope=${n}`,{headers:this.headers,jwt:e,noResolveJson:!0}),{data:null,error:null}}catch(e){if(Ye(e))return{data:null,error:e};throw e}}async inviteUserByEmail(e,n={}){try{return await Pn(this.fetch,"POST",`${this.url}/invite`,{body:{email:e,data:n.data},headers:this.headers,redirectTo:n.redirectTo,xform:Ln})}catch(e){if(Ye(e))return{data:{user:null},error:e};throw e}}async generateLink(e){try{const{options:n}=e,t=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)n.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(t[r[a]]=e[r[a]])}return t}(e,["options"]),r=Object.assign(Object.assign({},t),n);return"newEmail"in t&&(r.new_email=null==t?void 0:t.newEmail,delete r.newEmail),await Pn(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:r,headers:this.headers,xform:Dn,redirectTo:null==n?void 0:n.redirectTo})}catch(e){if(Ye(e))return{data:{properties:null,user:null},error:e};throw e}}async createUser(e){try{return await Pn(this.fetch,"POST",`${this.url}/admin/users`,{body:e,headers:this.headers,xform:Ln})}catch(e){if(Ye(e))return{data:{user:null},error:e};throw e}}async listUsers(e){var n,t,r,a,o,i,s;try{const l={nextPage:null,lastPage:0,total:0},c=await Pn(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:null!==(t=null===(n=null==e?void 0:e.page)||void 0===n?void 0:n.toString())&&void 0!==t?t:"",per_page:null!==(a=null===(r=null==e?void 0:e.perPage)||void 0===r?void 0:r.toString())&&void 0!==a?a:""},xform:Mn});if(c.error)throw c.error;const u=await c.json(),d=null!==(o=c.headers.get("x-total-count"))&&void 0!==o?o:0,h=null!==(s=null===(i=c.headers.get("link"))||void 0===i?void 0:i.split(","))&&void 0!==s?s:[];return h.length>0&&(h.forEach(e=>{const n=parseInt(e.split(";")[0].split("=")[1].substring(0,1)),t=JSON.parse(e.split(";")[1].split("=")[1]);l[`${t}Page`]=n}),l.total=parseInt(d)),{data:Object.assign(Object.assign({},u),l),error:null}}catch(e){if(Ye(e))return{data:{users:[]},error:e};throw e}}async getUserById(e){_n(e);try{return await Pn(this.fetch,"GET",`${this.url}/admin/users/${e}`,{headers:this.headers,xform:Ln})}catch(e){if(Ye(e))return{data:{user:null},error:e};throw e}}async updateUserById(e,n){_n(e);try{return await Pn(this.fetch,"PUT",`${this.url}/admin/users/${e}`,{body:n,headers:this.headers,xform:Ln})}catch(e){if(Ye(e))return{data:{user:null},error:e};throw e}}async deleteUser(e,n=!1){_n(e);try{return await Pn(this.fetch,"DELETE",`${this.url}/admin/users/${e}`,{headers:this.headers,body:{should_soft_delete:n},xform:Ln})}catch(e){if(Ye(e))return{data:{user:null},error:e};throw e}}async _listFactors(e){_n(e.userId);try{const{data:n,error:t}=await Pn(this.fetch,"GET",`${this.url}/admin/users/${e.userId}/factors`,{headers:this.headers,xform:e=>({data:{factors:e},error:null})});return{data:n,error:t}}catch(e){if(Ye(e))return{data:null,error:e};throw e}}async _deleteFactor(e){_n(e.userId),_n(e.id);try{return{data:await Pn(this.fetch,"DELETE",`${this.url}/admin/users/${e.userId}/factors/${e.id}`,{headers:this.headers}),error:null}}catch(e){if(Ye(e))return{data:null,error:e};throw e}}}const $n={getItem:e=>An()?globalThis.localStorage.getItem(e):null,setItem:(e,n)=>{An()&&globalThis.localStorage.setItem(e,n)},removeItem:e=>{An()&&globalThis.localStorage.removeItem(e)}};function qn(e={}){return{getItem:n=>e[n]||null,setItem:(n,t)=>{e[n]=t},removeItem:n=>{delete e[n]}}}const Wn=!!(globalThis&&An()&&globalThis.localStorage&&"true"===globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug"));class Hn extends Error{constructor(e){super(e),this.isAcquireTimeout=!0}}class Vn extends Hn{}async function Yn(e,n,t){Wn&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",e,n);const r=new globalThis.AbortController;return n>0&&setTimeout(()=>{r.abort(),Wn&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",e)},n),await Promise.resolve().then(()=>globalThis.navigator.locks.request(e,0===n?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:r.signal},async r=>{if(!r){if(0===n)throw Wn&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",e),new Vn(`Acquiring an exclusive Navigator LockManager lock "${e}" immediately failed`);if(Wn)try{const e=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(e,null,"  "))}catch(e){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",e)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await t()}Wn&&console.log("@supabase/gotrue-js: navigatorLock: acquired",e,r.name);try{return await t()}finally{Wn&&console.log("@supabase/gotrue-js: navigatorLock: released",e,r.name)}}))}!function(){if("object"!=typeof globalThis)try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch(e){"undefined"!=typeof self&&(self.globalThis=self)}}();const Gn={url:"http://localhost:9999",storageKey:"supabase.auth.token",autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:Fe,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function Kn(e,n,t){return await t()}class Jn{constructor(e){var n,t;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=Jn.nextInstanceID,Jn.nextInstanceID+=1,this.instanceID>0&&vn()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const r=Object.assign(Object.assign({},Gn),e);if(this.logDebugMessages=!!r.debug,"function"==typeof r.debug&&(this.logger=r.debug),this.persistSession=r.persistSession,this.storageKey=r.storageKey,this.autoRefreshToken=r.autoRefreshToken,this.admin=new Fn({url:r.url,headers:r.headers,fetch:r.fetch}),this.url=r.url,this.headers=r.headers,this.fetch=yn(r.fetch),this.lock=r.lock||Kn,this.detectSessionInUrl=r.detectSessionInUrl,this.flowType=r.flowType,this.hasCustomAuthorizationHeader=r.hasCustomAuthorizationHeader,r.lock?this.lock=r.lock:vn()&&(null===(n=null===globalThis||void 0===globalThis?void 0:globalThis.navigator)||void 0===n?void 0:n.locks)?this.lock=Yn:this.lock=Kn,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?r.storage?this.storage=r.storage:An()?this.storage=$n:(this.memoryStorage={},this.storage=qn(this.memoryStorage)):(this.memoryStorage={},this.storage=qn(this.memoryStorage)),vn()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(e){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",e)}null===(t=this.broadcastChannel)||void 0===t||t.addEventListener("message",async e=>{this._debug("received broadcast notification from other tab or client",e),await this._notifyAllSubscribers(e.data.event,e.data.session,!1)})}this.initialize()}_debug(...e){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${Me}) ${(new Date).toISOString()}`,...e),this}async initialize(){return this.initializePromise||(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))()),await this.initializePromise}async _initialize(){var e;try{const n=function(e){const n={},t=new URL(e);if(t.hash&&"#"===t.hash[0])try{new URLSearchParams(t.hash.substring(1)).forEach((e,t)=>{n[t]=e})}catch(e){}return t.searchParams.forEach((e,t)=>{n[t]=e}),n}(window.location.href);let t="none";if(this._isImplicitGrantCallback(n)?t="implicit":await this._isPKCECallback(n)&&(t="pkce"),vn()&&this.detectSessionInUrl&&"none"!==t){const{data:r,error:a}=await this._getSessionFromURL(n,t);if(a){if(this._debug("#_initialize()","error detecting session from URL",a),function(e){return Ye(e)&&"AuthImplicitGrantRedirectError"===e.name}(a)){const n=null===(e=a.details)||void 0===e?void 0:e.code;if("identity_already_exists"===n||"identity_not_found"===n||"single_identity_not_deletable"===n)return{error:a}}return await this._removeSession(),{error:a}}const{session:o,redirectType:i}=r;return this._debug("#_initialize()","detected session in URL",o,"redirect type",i),await this._saveSession(o),setTimeout(async()=>{"recovery"===i?await this._notifyAllSubscribers("PASSWORD_RECOVERY",o):await this._notifyAllSubscribers("SIGNED_IN",o)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(e){return Ye(e)?{error:e}:{error:new Ke("Unexpected error during initialization",e)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(e){var n,t,r;try{const a=await Pn(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:null!==(t=null===(n=null==e?void 0:e.options)||void 0===n?void 0:n.data)&&void 0!==t?t:{},gotrue_meta_security:{captcha_token:null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken}},xform:zn}),{data:o,error:i}=a;if(i||!o)return{data:{user:null,session:null},error:i};const s=o.session,l=o.user;return o.session&&(await this._saveSession(o.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async signUp(e){var n,t,r;try{let a;if("email"in e){const{email:t,password:r,options:o}=e;let i=null,s=null;"pkce"===this.flowType&&([i,s]=await Bn(this.storage,this.storageKey)),a=await Pn(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:null==o?void 0:o.emailRedirectTo,body:{email:t,password:r,data:null!==(n=null==o?void 0:o.data)&&void 0!==n?n:{},gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken},code_challenge:i,code_challenge_method:s},xform:zn})}else{if(!("phone"in e))throw new Ze("You must provide either an email or phone number and a password");{const{phone:n,password:o,options:i}=e;a=await Pn(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:n,password:o,data:null!==(t=null==i?void 0:i.data)&&void 0!==t?t:{},channel:null!==(r=null==i?void 0:i.channel)&&void 0!==r?r:"sms",gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},xform:zn})}}const{data:o,error:i}=a;if(i||!o)return{data:{user:null,session:null},error:i};const s=o.session,l=o.user;return o.session&&(await this._saveSession(o.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithPassword(e){try{let n;if("email"in e){const{email:t,password:r,options:a}=e;n=await Pn(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:t,password:r,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}},xform:In})}else{if(!("phone"in e))throw new Ze("You must provide either an email or phone number and a password");{const{phone:t,password:r,options:a}=e;n=await Pn(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:t,password:r,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}},xform:In})}}const{data:t,error:r}=n;return r?{data:{user:null,session:null},error:r}:t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign({user:t.user,session:t.session},t.weak_password?{weakPassword:t.weak_password}:null),error:r}):{data:{user:null,session:null},error:new Xe}}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOAuth(e){var n,t,r,a;return await this._handleProviderSignIn(e.provider,{redirectTo:null===(n=e.options)||void 0===n?void 0:n.redirectTo,scopes:null===(t=e.options)||void 0===t?void 0:t.scopes,queryParams:null===(r=e.options)||void 0===r?void 0:r.queryParams,skipBrowserRedirect:null===(a=e.options)||void 0===a?void 0:a.skipBrowserRedirect})}async exchangeCodeForSession(e){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(e))}async signInWithWeb3(e){const{chain:n}=e;if("solana"===n)return await this.signInWithSolana(e);throw new Error(`@supabase/auth-js: Unsupported chain "${n}"`)}async signInWithSolana(e){var n,t,r,a,o,i,s,l,c,u,d,h;let f,p;if("message"in e)f=e.message,p=e.signature;else{const{chain:d,wallet:h,statement:g,options:v}=e;let m;if(vn())if("object"==typeof h)m=h;else{const e=window;if(!("solana"in e)||"object"!=typeof e.solana||!("signIn"in e.solana&&"function"==typeof e.solana.signIn||"signMessage"in e.solana&&"function"==typeof e.solana.signMessage))throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");m=e.solana}else{if("object"!=typeof h||!(null==v?void 0:v.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");m=h}const A=new URL(null!==(n=null==v?void 0:v.url)&&void 0!==n?n:window.location.href);if("signIn"in m&&m.signIn){const e=await m.signIn(Object.assign(Object.assign(Object.assign({issuedAt:(new Date).toISOString()},null==v?void 0:v.signInWithSolana),{version:"1",domain:A.host,uri:A.href}),g?{statement:g}:null));let n;if(Array.isArray(e)&&e[0]&&"object"==typeof e[0])n=e[0];else{if(!(e&&"object"==typeof e&&"signedMessage"in e&&"signature"in e))throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");n=e}if(!("signedMessage"in n&&"signature"in n&&("string"==typeof n.signedMessage||n.signedMessage instanceof Uint8Array)&&n.signature instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");f="string"==typeof n.signedMessage?n.signedMessage:(new TextDecoder).decode(n.signedMessage),p=n.signature}else{if(!("signMessage"in m&&"function"==typeof m.signMessage&&"publicKey"in m&&"object"==typeof m&&m.publicKey&&"toBase58"in m.publicKey&&"function"==typeof m.publicKey.toBase58))throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");f=[`${A.host} wants you to sign in with your Solana account:`,m.publicKey.toBase58(),...g?["",g,""]:[""],"Version: 1",`URI: ${A.href}`,`Issued At: ${null!==(r=null===(t=null==v?void 0:v.signInWithSolana)||void 0===t?void 0:t.issuedAt)&&void 0!==r?r:(new Date).toISOString()}`,...(null===(a=null==v?void 0:v.signInWithSolana)||void 0===a?void 0:a.notBefore)?[`Not Before: ${v.signInWithSolana.notBefore}`]:[],...(null===(o=null==v?void 0:v.signInWithSolana)||void 0===o?void 0:o.expirationTime)?[`Expiration Time: ${v.signInWithSolana.expirationTime}`]:[],...(null===(i=null==v?void 0:v.signInWithSolana)||void 0===i?void 0:i.chainId)?[`Chain ID: ${v.signInWithSolana.chainId}`]:[],...(null===(s=null==v?void 0:v.signInWithSolana)||void 0===s?void 0:s.nonce)?[`Nonce: ${v.signInWithSolana.nonce}`]:[],...(null===(l=null==v?void 0:v.signInWithSolana)||void 0===l?void 0:l.requestId)?[`Request ID: ${v.signInWithSolana.requestId}`]:[],...(null===(u=null===(c=null==v?void 0:v.signInWithSolana)||void 0===c?void 0:c.resources)||void 0===u?void 0:u.length)?["Resources",...v.signInWithSolana.resources.map(e=>`- ${e}`)]:[]].join("\n");const e=await m.signMessage((new TextEncoder).encode(f),"utf8");if(!(e&&e instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");p=e}}try{const{data:n,error:t}=await Pn(this.fetch,"POST",`${this.url}/token?grant_type=web3`,{headers:this.headers,body:Object.assign({chain:"solana",message:f,signature:gn(p)},(null===(d=e.options)||void 0===d?void 0:d.captchaToken)?{gotrue_meta_security:{captcha_token:null===(h=e.options)||void 0===h?void 0:h.captchaToken}}:null),xform:zn});if(t)throw t;return n&&n.session&&n.user?(n.session&&(await this._saveSession(n.session),await this._notifyAllSubscribers("SIGNED_IN",n.session)),{data:Object.assign({},n),error:t}):{data:{user:null,session:null},error:new Xe}}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async _exchangeCodeForSession(e){const n=await wn(this.storage,`${this.storageKey}-code-verifier`),[t,r]=(null!=n?n:"").split("/");try{const{data:n,error:a}=await Pn(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:e,code_verifier:t},xform:zn});if(await Cn(this.storage,`${this.storageKey}-code-verifier`),a)throw a;return n&&n.session&&n.user?(n.session&&(await this._saveSession(n.session),await this._notifyAllSubscribers("SIGNED_IN",n.session)),{data:Object.assign(Object.assign({},n),{redirectType:null!=r?r:null}),error:a}):{data:{user:null,session:null,redirectType:null},error:new Xe}}catch(e){if(Ye(e))return{data:{user:null,session:null,redirectType:null},error:e};throw e}}async signInWithIdToken(e){try{const{options:n,provider:t,token:r,access_token:a,nonce:o}=e,i=await Pn(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:t,id_token:r,access_token:a,nonce:o,gotrue_meta_security:{captcha_token:null==n?void 0:n.captchaToken}},xform:zn}),{data:s,error:l}=i;return l?{data:{user:null,session:null},error:l}:s&&s.session&&s.user?(s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",s.session)),{data:s,error:l}):{data:{user:null,session:null},error:new Xe}}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOtp(e){var n,t,r,a,o;try{if("email"in e){const{email:r,options:a}=e;let o=null,i=null;"pkce"===this.flowType&&([o,i]=await Bn(this.storage,this.storageKey));const{error:s}=await Pn(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:r,data:null!==(n=null==a?void 0:a.data)&&void 0!==n?n:{},create_user:null===(t=null==a?void 0:a.shouldCreateUser)||void 0===t||t,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken},code_challenge:o,code_challenge_method:i},redirectTo:null==a?void 0:a.emailRedirectTo});return{data:{user:null,session:null},error:s}}if("phone"in e){const{phone:n,options:t}=e,{data:i,error:s}=await Pn(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:n,data:null!==(r=null==t?void 0:t.data)&&void 0!==r?r:{},create_user:null===(a=null==t?void 0:t.shouldCreateUser)||void 0===a||a,gotrue_meta_security:{captcha_token:null==t?void 0:t.captchaToken},channel:null!==(o=null==t?void 0:t.channel)&&void 0!==o?o:"sms"}});return{data:{user:null,session:null,messageId:null==i?void 0:i.message_id},error:s}}throw new Ze("You must provide either an email or phone number.")}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async verifyOtp(e){var n,t;try{let r,a;"options"in e&&(r=null===(n=e.options)||void 0===n?void 0:n.redirectTo,a=null===(t=e.options)||void 0===t?void 0:t.captchaToken);const{data:o,error:i}=await Pn(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},e),{gotrue_meta_security:{captcha_token:a}}),redirectTo:r,xform:zn});if(i)throw i;if(!o)throw new Error("An error occurred on token verification.");const s=o.session,l=o.user;return(null==s?void 0:s.access_token)&&(await this._saveSession(s),await this._notifyAllSubscribers("recovery"==e.type?"PASSWORD_RECOVERY":"SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithSSO(e){var n,t,r;try{let a=null,o=null;return"pkce"===this.flowType&&([a,o]=await Bn(this.storage,this.storageKey)),await Pn(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in e?{provider_id:e.providerId}:null),"domain"in e?{domain:e.domain}:null),{redirect_to:null!==(t=null===(n=e.options)||void 0===n?void 0:n.redirectTo)&&void 0!==t?t:void 0}),(null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken)?{gotrue_meta_security:{captcha_token:e.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:a,code_challenge_method:o}),headers:this.headers,xform:Rn})}catch(e){if(Ye(e))return{data:null,error:e};throw e}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async e=>{const{data:{session:n},error:t}=e;if(t)throw t;if(!n)throw new Qe;const{error:r}=await Pn(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:n.access_token});return{data:{user:null,session:null},error:r}})}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async resend(e){try{const n=`${this.url}/resend`;if("email"in e){const{email:t,type:r,options:a}=e,{error:o}=await Pn(this.fetch,"POST",n,{headers:this.headers,body:{email:t,type:r,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}},redirectTo:null==a?void 0:a.emailRedirectTo});return{data:{user:null,session:null},error:o}}if("phone"in e){const{phone:t,type:r,options:a}=e,{data:o,error:i}=await Pn(this.fetch,"POST",n,{headers:this.headers,body:{phone:t,type:r,gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}}});return{data:{user:null,session:null,messageId:null==o?void 0:o.message_id},error:i}}throw new Ze("You must provide either an email or phone number and a type")}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async e=>e))}async _acquireLock(e,n){this._debug("#_acquireLock","begin",e);try{if(this.lockAcquired){const e=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),t=(async()=>(await e,await n()))();return this.pendingInLock.push((async()=>{try{await t}catch(e){}})()),t}return await this.lock(`lock:${this.storageKey}`,e,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const e=n();for(this.pendingInLock.push((async()=>{try{await e}catch(e){}})()),await e;this.pendingInLock.length;){const e=[...this.pendingInLock];await Promise.all(e),this.pendingInLock.splice(0,e.length)}return await e}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(e){this._debug("#_useSession","begin");try{const n=await this.__loadSession();return await e(n)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",(new Error).stack);try{let e=null;const n=await wn(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",n),null!==n&&(this._isValidSession(n)?e=n:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!e)return{data:{session:null},error:null};const t=!!e.expires_at&&1e3*e.expires_at-Date.now()<9e4;if(this._debug("#__loadSession()",`session has${t?"":" not"} expired`,"expires_at",e.expires_at),!t){if(this.storage.isServer){let n=this.suppressGetSessionWarning;e=new Proxy(e,{get:(e,t,r)=>(n||"user"!==t||(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),n=!0,this.suppressGetSessionWarning=!0),Reflect.get(e,t,r))})}return{data:{session:e},error:null}}const{session:r,error:a}=await this._callRefreshToken(e.refresh_token);return a?{data:{session:null},error:a}:{data:{session:r},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(e){return e?await this._getUser(e):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(e){try{return e?await Pn(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:e,xform:Ln}):await this._useSession(async e=>{var n,t,r;const{data:a,error:o}=e;if(o)throw o;return(null===(n=a.session)||void 0===n?void 0:n.access_token)||this.hasCustomAuthorizationHeader?await Pn(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:null!==(r=null===(t=a.session)||void 0===t?void 0:t.access_token)&&void 0!==r?r:void 0,xform:Ln}):{data:{user:null},error:new Qe}})}catch(e){if(Ye(e))return function(e){return Ye(e)&&"AuthSessionMissingError"===e.name}(e)&&(await this._removeSession(),await Cn(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:e};throw e}}async updateUser(e,n={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(e,n))}async _updateUser(e,n={}){try{return await this._useSession(async t=>{const{data:r,error:a}=t;if(a)throw a;if(!r.session)throw new Qe;const o=r.session;let i=null,s=null;"pkce"===this.flowType&&null!=e.email&&([i,s]=await Bn(this.storage,this.storageKey));const{data:l,error:c}=await Pn(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:null==n?void 0:n.emailRedirectTo,body:Object.assign(Object.assign({},e),{code_challenge:i,code_challenge_method:s}),jwt:o.access_token,xform:Ln});if(c)throw c;return o.user=l.user,await this._saveSession(o),await this._notifyAllSubscribers("USER_UPDATED",o),{data:{user:o.user},error:null}})}catch(e){if(Ye(e))return{data:{user:null},error:e};throw e}}async setSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(e))}async _setSession(e){try{if(!e.access_token||!e.refresh_token)throw new Qe;const n=Date.now()/1e3;let t=n,r=!0,a=null;const{payload:o}=xn(e.access_token);if(o.exp&&(t=o.exp,r=t<=n),r){const{session:n,error:t}=await this._callRefreshToken(e.refresh_token);if(t)return{data:{user:null,session:null},error:t};if(!n)return{data:{user:null,session:null},error:null};a=n}else{const{data:r,error:o}=await this._getUser(e.access_token);if(o)throw o;a={access_token:e.access_token,refresh_token:e.refresh_token,user:r.user,token_type:"bearer",expires_in:t-n,expires_at:t},await this._saveSession(a),await this._notifyAllSubscribers("SIGNED_IN",a)}return{data:{user:a.user,session:a},error:null}}catch(e){if(Ye(e))return{data:{session:null,user:null},error:e};throw e}}async refreshSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(e))}async _refreshSession(e){try{return await this._useSession(async n=>{var t;if(!e){const{data:r,error:a}=n;if(a)throw a;e=null!==(t=r.session)&&void 0!==t?t:void 0}if(!(null==e?void 0:e.refresh_token))throw new Qe;const{session:r,error:a}=await this._callRefreshToken(e.refresh_token);return a?{data:{user:null,session:null},error:a}:r?{data:{user:r.user,session:r},error:null}:{data:{user:null,session:null},error:null}})}catch(e){if(Ye(e))return{data:{user:null,session:null},error:e};throw e}}async _getSessionFromURL(e,n){try{if(!vn())throw new en("No browser detected.");if(e.error||e.error_description||e.error_code)throw new en(e.error_description||"Error in URL with unspecified error_description",{error:e.error||"unspecified_error",code:e.error_code||"unspecified_code"});switch(n){case"implicit":if("pkce"===this.flowType)throw new nn("Not a valid PKCE flow url.");break;case"pkce":if("implicit"===this.flowType)throw new en("Not a valid implicit grant flow url.")}if("pkce"===n){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!e.code)throw new nn("No code detected.");const{data:n,error:t}=await this._exchangeCodeForSession(e.code);if(t)throw t;const r=new URL(window.location.href);return r.searchParams.delete("code"),window.history.replaceState(window.history.state,"",r.toString()),{data:{session:n.session,redirectType:null},error:null}}const{provider_token:t,provider_refresh_token:r,access_token:a,refresh_token:o,expires_in:i,expires_at:s,token_type:l}=e;if(!(a&&i&&o&&l))throw new en("No session defined in URL");const c=Math.round(Date.now()/1e3),u=parseInt(i);let d=c+u;s&&(d=parseInt(s));const h=d-c;1e3*h<=Ue&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${h}s, should have been closer to ${u}s`);const f=d-u;c-f>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",f,d,c):c-f<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",f,d,c);const{data:p,error:g}=await this._getUser(a);if(g)throw g;const v={provider_token:t,provider_refresh_token:r,access_token:a,expires_in:u,expires_at:d,refresh_token:o,token_type:l,user:p.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:v,redirectType:e.type},error:null}}catch(e){if(Ye(e))return{data:{session:null,redirectType:null},error:e};throw e}}_isImplicitGrantCallback(e){return Boolean(e.access_token||e.error_description)}async _isPKCECallback(e){const n=await wn(this.storage,`${this.storageKey}-code-verifier`);return!(!e.code||!n)}async signOut(e={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(e))}async _signOut({scope:e}={scope:"global"}){return await this._useSession(async n=>{var t;const{data:r,error:a}=n;if(a)return{error:a};const o=null===(t=r.session)||void 0===t?void 0:t.access_token;if(o){const{error:n}=await this.admin.signOut(o,e);if(n&&(!function(e){return Ye(e)&&"AuthApiError"===e.name}(n)||404!==n.status&&401!==n.status&&403!==n.status))return{error:n}}return"others"!==e&&(await this._removeSession(),await Cn(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(e){const n="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const n=16*Math.random()|0;return("x"==e?n:3&n|8).toString(16)}),t={id:n,callback:e,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",n),this.stateChangeEmitters.delete(n)}};return this._debug("#onAuthStateChange()","registered callback with id",n),this.stateChangeEmitters.set(n,t),(async()=>{await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(n)})})(),{data:{subscription:t}}}async _emitInitialSession(e){return await this._useSession(async n=>{var t,r;try{const{data:{session:r},error:a}=n;if(a)throw a;await(null===(t=this.stateChangeEmitters.get(e))||void 0===t?void 0:t.callback("INITIAL_SESSION",r)),this._debug("INITIAL_SESSION","callback id",e,"session",r)}catch(n){await(null===(r=this.stateChangeEmitters.get(e))||void 0===r?void 0:r.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",e,"error",n),console.error(n)}})}async resetPasswordForEmail(e,n={}){let t=null,r=null;"pkce"===this.flowType&&([t,r]=await Bn(this.storage,this.storageKey,!0));try{return await Pn(this.fetch,"POST",`${this.url}/recover`,{body:{email:e,code_challenge:t,code_challenge_method:r,gotrue_meta_security:{captcha_token:n.captchaToken}},headers:this.headers,redirectTo:n.redirectTo})}catch(e){if(Ye(e))return{data:null,error:e};throw e}}async getUserIdentities(){var e;try{const{data:n,error:t}=await this.getUser();if(t)throw t;return{data:{identities:null!==(e=n.user.identities)&&void 0!==e?e:[]},error:null}}catch(e){if(Ye(e))return{data:null,error:e};throw e}}async linkIdentity(e){var n;try{const{data:t,error:r}=await this._useSession(async n=>{var t,r,a,o,i;const{data:s,error:l}=n;if(l)throw l;const c=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,e.provider,{redirectTo:null===(t=e.options)||void 0===t?void 0:t.redirectTo,scopes:null===(r=e.options)||void 0===r?void 0:r.scopes,queryParams:null===(a=e.options)||void 0===a?void 0:a.queryParams,skipBrowserRedirect:!0});return await Pn(this.fetch,"GET",c,{headers:this.headers,jwt:null!==(i=null===(o=s.session)||void 0===o?void 0:o.access_token)&&void 0!==i?i:void 0})});if(r)throw r;return vn()&&!(null===(n=e.options)||void 0===n?void 0:n.skipBrowserRedirect)&&window.location.assign(null==t?void 0:t.url),{data:{provider:e.provider,url:null==t?void 0:t.url},error:null}}catch(n){if(Ye(n))return{data:{provider:e.provider,url:null},error:n};throw n}}async unlinkIdentity(e){try{return await this._useSession(async n=>{var t,r;const{data:a,error:o}=n;if(o)throw o;return await Pn(this.fetch,"DELETE",`${this.url}/user/identities/${e.identity_id}`,{headers:this.headers,jwt:null!==(r=null===(t=a.session)||void 0===t?void 0:t.access_token)&&void 0!==r?r:void 0})})}catch(e){if(Ye(e))return{data:null,error:e};throw e}}async _refreshAccessToken(e){const n=`#_refreshAccessToken(${e.substring(0,5)}...)`;this._debug(n,"begin");try{const a=Date.now();return await(t=async t=>(t>0&&await async function(e){return await new Promise(n=>{setTimeout(()=>n(null),e)})}(200*Math.pow(2,t-1)),this._debug(n,"refreshing attempt",t),await Pn(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:e},headers:this.headers,xform:zn})),r=(e,n)=>{const t=200*Math.pow(2,e);return n&&rn(n)&&Date.now()+t-a<Ue},new Promise((e,n)=>{(async()=>{for(let a=0;a<1/0;a++)try{const n=await t(a);if(!r(a,null))return void e(n)}catch(e){if(!r(a,e))return void n(e)}})()}))}catch(e){if(this._debug(n,"error",e),Ye(e))return{data:{session:null,user:null},error:e};throw e}finally{this._debug(n,"end")}var t,r}_isValidSession(e){return"object"==typeof e&&null!==e&&"access_token"in e&&"refresh_token"in e&&"expires_at"in e}async _handleProviderSignIn(e,n){const t=await this._getUrlForProvider(`${this.url}/authorize`,e,{redirectTo:n.redirectTo,scopes:n.scopes,queryParams:n.queryParams});return this._debug("#_handleProviderSignIn()","provider",e,"options",n,"url",t),vn()&&!n.skipBrowserRedirect&&window.location.assign(t),{data:{provider:e,url:t},error:null}}async _recoverAndRefresh(){var e;const n="#_recoverAndRefresh()";this._debug(n,"begin");try{const t=await wn(this.storage,this.storageKey);if(this._debug(n,"session from storage",t),!this._isValidSession(t))return this._debug(n,"session is not valid"),void(null!==t&&await this._removeSession());const r=1e3*(null!==(e=t.expires_at)&&void 0!==e?e:1/0)-Date.now()<9e4;if(this._debug(n,`session has${r?"":" not"} expired with margin of 90000s`),r){if(this.autoRefreshToken&&t.refresh_token){const{error:e}=await this._callRefreshToken(t.refresh_token);e&&(console.error(e),rn(e)||(this._debug(n,"refresh failed with a non-retryable error, removing the session",e),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",t)}catch(e){return this._debug(n,"error",e),void console.error(e)}finally{this._debug(n,"end")}}async _callRefreshToken(e){var n,t;if(!e)throw new Qe;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const r=`#_callRefreshToken(${e.substring(0,5)}...)`;this._debug(r,"begin");try{this.refreshingDeferred=new kn;const{data:n,error:t}=await this._refreshAccessToken(e);if(t)throw t;if(!n.session)throw new Qe;await this._saveSession(n.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",n.session);const r={session:n.session,error:null};return this.refreshingDeferred.resolve(r),r}catch(e){if(this._debug(r,"error",e),Ye(e)){const t={session:null,error:e};return rn(e)||await this._removeSession(),null===(n=this.refreshingDeferred)||void 0===n||n.resolve(t),t}throw null===(t=this.refreshingDeferred)||void 0===t||t.reject(e),e}finally{this.refreshingDeferred=null,this._debug(r,"end")}}async _notifyAllSubscribers(e,n,t=!0){const r=`#_notifyAllSubscribers(${e})`;this._debug(r,"begin",n,`broadcast = ${t}`);try{this.broadcastChannel&&t&&this.broadcastChannel.postMessage({event:e,session:n});const r=[],a=Array.from(this.stateChangeEmitters.values()).map(async t=>{try{await t.callback(e,n)}catch(e){r.push(e)}});if(await Promise.all(a),r.length>0){for(let e=0;e<r.length;e+=1)console.error(r[e]);throw r[0]}}finally{this._debug(r,"end")}}async _saveSession(e){this._debug("#_saveSession()",e),this.suppressGetSessionWarning=!0,await bn(this.storage,this.storageKey,e)}async _removeSession(){this._debug("#_removeSession()"),await Cn(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const e=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{e&&vn()&&(null===window||void 0===window?void 0:window.removeEventListener)&&window.removeEventListener("visibilitychange",e)}catch(e){console.error("removing visibilitychange callback failed",e)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const e=setInterval(()=>this._autoRefreshTokenTick(),Ue);this.autoRefreshTicker=e,e&&"object"==typeof e&&"function"==typeof e.unref?e.unref():"undefined"!=typeof Deno&&"function"==typeof Deno.unrefTimer&&Deno.unrefTimer(e),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const e=this.autoRefreshTicker;this.autoRefreshTicker=null,e&&clearInterval(e)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const e=Date.now();try{return await this._useSession(async n=>{const{data:{session:t}}=n;if(!t||!t.refresh_token||!t.expires_at)return void this._debug("#_autoRefreshTokenTick()","no session");const r=Math.floor((1e3*t.expires_at-e)/Ue);this._debug("#_autoRefreshTokenTick()",`access token expires in ${r} ticks, a tick lasts 30000ms, refresh threshold is 3 ticks`),r<=3&&await this._callRefreshToken(t.refresh_token)})}catch(e){console.error("Auto refresh tick failed with error. This is likely a transient error.",e)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(e){if(!(e.isAcquireTimeout||e instanceof Hn))throw e;this._debug("auto refresh token tick lock not available")}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!vn()||!(null===window||void 0===window?void 0:window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),null===window||void 0===window||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(e){console.error("_handleVisibilityChange",e)}}async _onVisibilityChanged(e){const n=`#_onVisibilityChanged(${e})`;this._debug(n,"visibilityState",document.visibilityState),"visible"===document.visibilityState?(this.autoRefreshToken&&this._startAutoRefresh(),e||(await this.initializePromise,await this._acquireLock(-1,async()=>{"visible"===document.visibilityState?await this._recoverAndRefresh():this._debug(n,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting")}))):"hidden"===document.visibilityState&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(e,n,t){const r=[`provider=${encodeURIComponent(n)}`];if((null==t?void 0:t.redirectTo)&&r.push(`redirect_to=${encodeURIComponent(t.redirectTo)}`),(null==t?void 0:t.scopes)&&r.push(`scopes=${encodeURIComponent(t.scopes)}`),"pkce"===this.flowType){const[e,n]=await Bn(this.storage,this.storageKey),t=new URLSearchParams({code_challenge:`${encodeURIComponent(e)}`,code_challenge_method:`${encodeURIComponent(n)}`});r.push(t.toString())}if(null==t?void 0:t.queryParams){const e=new URLSearchParams(t.queryParams);r.push(e.toString())}return(null==t?void 0:t.skipBrowserRedirect)&&r.push(`skip_http_redirect=${t.skipBrowserRedirect}`),`${e}?${r.join("&")}`}async _unenroll(e){try{return await this._useSession(async n=>{var t;const{data:r,error:a}=n;return a?{data:null,error:a}:await Pn(this.fetch,"DELETE",`${this.url}/factors/${e.factorId}`,{headers:this.headers,jwt:null===(t=null==r?void 0:r.session)||void 0===t?void 0:t.access_token})})}catch(e){if(Ye(e))return{data:null,error:e};throw e}}async _enroll(e){try{return await this._useSession(async n=>{var t,r;const{data:a,error:o}=n;if(o)return{data:null,error:o};const i=Object.assign({friendly_name:e.friendlyName,factor_type:e.factorType},"phone"===e.factorType?{phone:e.phone}:{issuer:e.issuer}),{data:s,error:l}=await Pn(this.fetch,"POST",`${this.url}/factors`,{body:i,headers:this.headers,jwt:null===(t=null==a?void 0:a.session)||void 0===t?void 0:t.access_token});return l?{data:null,error:l}:("totp"===e.factorType&&(null===(r=null==s?void 0:s.totp)||void 0===r?void 0:r.qr_code)&&(s.totp.qr_code=`data:image/svg+xml;utf-8,${s.totp.qr_code}`),{data:s,error:null})})}catch(e){if(Ye(e))return{data:null,error:e};throw e}}async _verify(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async n=>{var t;const{data:r,error:a}=n;if(a)return{data:null,error:a};const{data:o,error:i}=await Pn(this.fetch,"POST",`${this.url}/factors/${e.factorId}/verify`,{body:{code:e.code,challenge_id:e.challengeId},headers:this.headers,jwt:null===(t=null==r?void 0:r.session)||void 0===t?void 0:t.access_token});return i?{data:null,error:i}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+o.expires_in},o)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",o),{data:o,error:i})})}catch(e){if(Ye(e))return{data:null,error:e};throw e}})}async _challenge(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async n=>{var t;const{data:r,error:a}=n;return a?{data:null,error:a}:await Pn(this.fetch,"POST",`${this.url}/factors/${e.factorId}/challenge`,{body:{channel:e.channel},headers:this.headers,jwt:null===(t=null==r?void 0:r.session)||void 0===t?void 0:t.access_token})})}catch(e){if(Ye(e))return{data:null,error:e};throw e}})}async _challengeAndVerify(e){const{data:n,error:t}=await this._challenge({factorId:e.factorId});return t?{data:null,error:t}:await this._verify({factorId:e.factorId,challengeId:n.id,code:e.code})}async _listFactors(){const{data:{user:e},error:n}=await this.getUser();if(n)return{data:null,error:n};const t=(null==e?void 0:e.factors)||[],r=t.filter(e=>"totp"===e.factor_type&&"verified"===e.status),a=t.filter(e=>"phone"===e.factor_type&&"verified"===e.status);return{data:{all:t,totp:r,phone:a},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async e=>{var n,t;const{data:{session:r},error:a}=e;if(a)return{data:null,error:a};if(!r)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:o}=xn(r.access_token);let i=null;o.aal&&(i=o.aal);let s=i;return(null!==(t=null===(n=r.user.factors)||void 0===n?void 0:n.filter(e=>"verified"===e.status))&&void 0!==t?t:[]).length>0&&(s="aal2"),{data:{currentLevel:i,nextLevel:s,currentAuthenticationMethods:o.amr||[]},error:null}}))}async fetchJwk(e,n={keys:[]}){let t=n.keys.find(n=>n.kid===e);if(t)return t;if(t=this.jwks.keys.find(n=>n.kid===e),t&&this.jwks_cached_at+6e5>Date.now())return t;const{data:r,error:a}=await Pn(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(a)throw a;if(!r.keys||0===r.keys.length)throw new on("JWKS is empty");if(this.jwks=r,this.jwks_cached_at=Date.now(),t=r.keys.find(n=>n.kid===e),!t)throw new on("No matching signing key found in JWKS");return t}async getClaims(e,n={keys:[]}){try{let t=e;if(!t){const{data:e,error:n}=await this.getSession();if(n||!e.session)return{data:null,error:n};t=e.session.access_token}const{header:r,payload:a,signature:o,raw:{header:i,payload:s}}=xn(t);if(function(e){if(!e)throw new Error("Missing exp claim");if(e<=Math.floor(Date.now()/1e3))throw new Error("JWT has expired")}(a.exp),!r.kid||"HS256"===r.alg||!("crypto"in globalThis)||!("subtle"in globalThis.crypto)){const{error:e}=await this.getUser(t);if(e)throw e;return{data:{claims:a,header:r,signature:o},error:null}}const l=function(e){switch(e){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}(r.alg),c=await this.fetchJwk(r.kid,n),u=await crypto.subtle.importKey("jwk",c,l,!0,["verify"]);if(!await crypto.subtle.verify(l,u,o,function(e){const n=[];return function(e,n){for(let t=0;t<e.length;t+=1){let r=e.charCodeAt(t);if(r>55295&&r<=56319){const n=1024*(r-55296)&65535;r=65536+(e.charCodeAt(t+1)-56320&65535|n),t+=1}fn(r,n)}}(e,e=>n.push(e)),new Uint8Array(n)}(`${i}.${s}`)))throw new on("Invalid JWT signature");return{data:{claims:a,header:r,signature:o},error:null}}catch(e){if(Ye(e))return{data:null,error:e};throw e}}}Jn.nextInstanceID=0;const Qn=Jn;class Xn extends Qn{constructor(e){super(e)}}class Zn{constructor(e,n,t){var r,a,o;if(this.supabaseUrl=e,this.supabaseKey=n,!e)throw new Error("supabaseUrl is required.");if(!n)throw new Error("supabaseKey is required.");const i=(s=e).endsWith("/")?s:s+"/";var s;const l=new URL(i);this.realtimeUrl=new URL("realtime/v1",l),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",l),this.storageUrl=new URL("storage/v1",l),this.functionsUrl=new URL("functions/v1",l);const c=`sb-${l.hostname.split(".")[0]}-auth-token`,u=function(e,n){var t,r;const{db:a,auth:o,realtime:i,global:s}=e,{db:l,auth:c,realtime:u,global:d}=n,h={db:Object.assign(Object.assign({},l),a),auth:Object.assign(Object.assign({},c),o),realtime:Object.assign(Object.assign({},u),i),global:Object.assign(Object.assign(Object.assign({},d),s),{headers:Object.assign(Object.assign({},null!==(t=null==d?void 0:d.headers)&&void 0!==t?t:{}),null!==(r=null==s?void 0:s.headers)&&void 0!==r?r:{})}),accessToken:()=>{return e=this,n=void 0,r=function*(){return""},new((t=void 0)||(t=Promise))(function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t(function(e){e(n)})).then(i,s)}l((r=r.apply(e,n||[])).next())});var e,n,t,r}};return e.accessToken?h.accessToken=e.accessToken:delete h.accessToken,h}(null!=t?t:{},{db:Pe,realtime:Ie,auth:Object.assign(Object.assign({},ze),{storageKey:c}),global:Oe});this.storageKey=null!==(r=u.auth.storageKey)&&void 0!==r?r:"",this.headers=null!==(a=u.global.headers)&&void 0!==a?a:{},u.accessToken?(this.accessToken=u.accessToken,this.auth=new Proxy({},{get:(e,n)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(n)} is not possible`)}})):this.auth=this._initSupabaseAuthClient(null!==(o=u.auth)&&void 0!==o?o:{},this.headers,u.global.fetch),this.fetch=De(n,this._getAccessToken.bind(this),u.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},u.realtime)),this.rest=new _(new URL("rest/v1",l).href,{headers:this.headers,schema:u.db.schema,fetch:this.fetch}),u.accessToken||this._listenForAuthEvents()}get functions(){return new j(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}get storage(){return new Ne(this.storageUrl.href,this.headers,this.fetch)}from(e){return this.rest.from(e)}schema(e){return this.rest.schema(e)}rpc(e,n={},t={}){return this.rest.rpc(e,n,t)}channel(e,n={config:{}}){return this.realtime.channel(e,n)}getChannels(){return this.realtime.getChannels()}removeChannel(e){return this.realtime.removeChannel(e)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var e,n,t,r,a,o;return t=this,r=void 0,o=function*(){if(this.accessToken)return yield this.accessToken();const{data:t}=yield this.auth.getSession();return null!==(n=null===(e=t.session)||void 0===e?void 0:e.access_token)&&void 0!==n?n:null},new((a=void 0)||(a=Promise))(function(e,n){function i(e){try{l(o.next(e))}catch(e){n(e)}}function s(e){try{l(o.throw(e))}catch(e){n(e)}}function l(n){var t;n.done?e(n.value):(t=n.value,t instanceof a?t:new a(function(e){e(t)})).then(i,s)}l((o=o.apply(t,r||[])).next())})}_initSupabaseAuthClient({autoRefreshToken:e,persistSession:n,detectSessionInUrl:t,storage:r,storageKey:a,flowType:o,lock:i,debug:s},l,c){const u={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new Xn({url:this.authUrl.href,headers:Object.assign(Object.assign({},u),l),storageKey:a,autoRefreshToken:e,persistSession:n,detectSessionInUrl:t,storage:r,flowType:o,lock:i,debug:s,fetch:c,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(e){return new ce(this.realtimeUrl.href,Object.assign(Object.assign({},e),{params:Object.assign({apikey:this.supabaseKey},null==e?void 0:e.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((e,n)=>{this._handleTokenChanged(e,"CLIENT",null==n?void 0:n.access_token)})}_handleTokenChanged(e,n,t){"TOKEN_REFRESHED"!==e&&"SIGNED_IN"!==e||this.changedAccessToken===t?"SIGNED_OUT"===e&&(this.realtime.setAuth(),"STORAGE"==n&&this.auth.signOut(),this.changedAccessToken=void 0):this.changedAccessToken=t}}function et(e){return et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},et(e)}function nt(e,n,t){return(n=function(e){var n=function(e){if("object"!=et(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=et(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==et(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function tt(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return rt(c,"_invoke",function(t,r,a){var o,s,l,c=0,u=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(n,t){return o=n,s=0,l=e,h.n=t,i}};function f(t,r){for(s=t,l=r,n=0;!d&&c&&!a&&n<u.length;n++){var a,o=u[n],f=h.p,p=o[2];t>3?(a=p===r)&&(l=o[(s=o[4])?5:(s=3,3)],o[4]=o[5]=e):o[0]<=f&&((a=t<2&&f<o[1])?(s=0,h.v=r,h.n=o[1]):f<p&&(a=t<3||o[0]>r||r>p)&&(o[4]=t,o[5]=r,h.n=p,s=0))}if(a||t>1)return i;throw d=!0,r}return function(a,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(n=s<2?e:l)||!d;){o||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(c=2,o){if(s||(a="next"),n=o[a]){if(!(n=n.call(o,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=o.return)&&n.call(o),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);o=e}else if((n=(d=h.n<0)?l:t.call(r,h))!==i)break}catch(n){o=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,a,o),!0),c}var i={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(rt(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,rt(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,rt(d,"constructor",c),rt(c,"constructor",l),l.displayName="GeneratorFunction",rt(c,a,"GeneratorFunction"),rt(d),rt(d,a,"Generator"),rt(d,r,function(){return this}),rt(d,"toString",function(){return"[object Generator]"}),(tt=function(){return{w:o,m:h}})()}function rt(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}rt=function(e,n,t,r){if(n)a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var o=function(n,t){rt(e,n,function(e){return this._invoke(n,t,e)})};o("next",0),o("throw",1),o("return",2)}},rt(e,n,t,r)}function at(e,n,t,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,a)}function ot(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function i(e){at(o,r,a,i,s,"next",e)}function s(e){at(o,r,a,i,s,"throw",e)}i(void 0)})}}var it=((e,n,t)=>new Zn("https://tpjnyiyvpyzzbzhajbjh.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRwam55aXl2cHl6emJ6aGFqYmpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NDA1NTQsImV4cCI6MjA2NzIxNjU1NH0.cflFdHytlTUA_H_AP7E3Kry9-S-xw45pIRoJQtfk4AE",t))(0,0,{auth:{storage:{getItem:function(e){return ot(tt().m(function n(){var t;return tt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,chrome.storage.local.get(e);case 1:return t=n.v,n.a(2,t[e]||null)}},n)}))()},setItem:function(e,n){return ot(tt().m(function t(){return tt().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.set(nt({},e,n));case 1:return t.a(2)}},t)}))()},removeItem:function(e){return ot(tt().m(function n(){return tt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,chrome.storage.local.remove(e);case 1:return n.a(2)}},n)}))()}},autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0}});function st(e){return st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},st(e)}function lt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function ct(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?lt(Object(t),!0).forEach(function(n){ut(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):lt(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function ut(e,n,t){return(n=At(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function dt(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return ht(c,"_invoke",function(t,r,a){var o,s,l,c=0,u=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(n,t){return o=n,s=0,l=e,h.n=t,i}};function f(t,r){for(s=t,l=r,n=0;!d&&c&&!a&&n<u.length;n++){var a,o=u[n],f=h.p,p=o[2];t>3?(a=p===r)&&(l=o[(s=o[4])?5:(s=3,3)],o[4]=o[5]=e):o[0]<=f&&((a=t<2&&f<o[1])?(s=0,h.v=r,h.n=o[1]):f<p&&(a=t<3||o[0]>r||r>p)&&(o[4]=t,o[5]=r,h.n=p,s=0))}if(a||t>1)return i;throw d=!0,r}return function(a,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(n=s<2?e:l)||!d;){o||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(c=2,o){if(s||(a="next"),n=o[a]){if(!(n=n.call(o,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=o.return)&&n.call(o),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);o=e}else if((n=(d=h.n<0)?l:t.call(r,h))!==i)break}catch(n){o=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,a,o),!0),c}var i={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(ht(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,ht(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,ht(d,"constructor",c),ht(c,"constructor",l),l.displayName="GeneratorFunction",ht(c,a,"GeneratorFunction"),ht(d),ht(d,a,"Generator"),ht(d,r,function(){return this}),ht(d,"toString",function(){return"[object Generator]"}),(dt=function(){return{w:o,m:h}})()}function ht(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}ht=function(e,n,t,r){if(n)a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var o=function(n,t){ht(e,n,function(e){return this._invoke(n,t,e)})};o("next",0),o("throw",1),o("return",2)}},ht(e,n,t,r)}function ft(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return pt(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?pt(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function gt(e,n,t,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,a)}function vt(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function i(e){gt(o,r,a,i,s,"next",e)}function s(e){gt(o,r,a,i,s,"throw",e)}i(void 0)})}}function mt(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,At(r.key),r)}}function At(e){var n=function(e){if("object"!=st(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=st(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==st(n)?n:n+""}var yt=new(function(){return e=function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)},n=[{key:"getData",value:(E=vt(dt().m(function e(){var n,t,r,a,o,i,s,l,c,u,d=this;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(n=e.v,t=n.data,!n.error&&t.session){e.n=2;break}return e.a(2,this.getDefaultData());case 2:return r=t.session.user,console.log("Fetching data for user:",r.id),e.n=3,Promise.all([it.from("links").select("*").eq("user_id",r.id),it.from("collections").select("*").eq("user_id",r.id)]);case 3:return a=e.v,o=ft(a,2),i=o[0],s=o[1],i.error&&console.error("Error fetching links:",i.error),s.error&&console.error("Error fetching collections:",s.error),l=(i.data||[]).map(function(e){return console.log("Storage: getData highlights for link",e.id,e.highlights),{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:d.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}),c=(s.data||[]).map(function(e){return{id:e.id,name:e.name,description:e.description,color:e.color,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}}),u={links:l,collections:c,categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0}},console.log("Data fetched from Supabase:",u),e.a(2,u)}},e,this)})),function(){return E.apply(this,arguments)})},{key:"addLink",value:(x=vt(dt().m(function e(n){var t,r,a,o,i,s,l,c;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(r=e.v,a=r.data,o=null===(t=a.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,{success:!1,error:"User not logged in."});case 2:return i={user_id:o.id,collection_id:n.collectionId||null,url:n.url,title:n.title,favicon:n.favicon,domain:n.domain,user_note:n.userNote,ai_summary:n.aiSummary,category:n.category,is_in_inbox:n.isInInbox||!1,highlights:n.highlights?JSON.stringify(n.highlights):null},console.log("Storage: addLink dbLink.highlights:",i.highlights),e.n=3,it.from("links").insert(i).select("id").single();case 3:if(s=e.v,l=s.data,!(c=s.error)){e.n=4;break}return console.error("Supabase addLink error:",c),e.a(2,{success:!1,error:c.message||"Database error occurred."});case 4:return e.a(2,{success:!0,linkId:l.id})}},e)})),function(e){return x.apply(this,arguments)})},{key:"updateLink",value:(k=vt(dt().m(function e(n,t){var r,a,o;return dt().w(function(e){for(;;)switch(e.n){case 0:return r=ct(ct({},t),{},{updated_at:new Date}),void 0!==t.highlights&&(r.highlights=t.highlights?JSON.stringify(t.highlights):null),delete r.collectionId,delete r.userNote,delete r.aiSummary,delete r.isInInbox,delete r.createdAt,delete r.updatedAt,void 0!==t.collectionId&&(r.collection_id=t.collectionId),void 0!==t.userNote&&(r.user_note=t.userNote),void 0!==t.aiSummary&&(r.ai_summary=t.aiSummary),void 0!==t.isInInbox&&(r.is_in_inbox=t.isInInbox),console.log("Storage: updateLink dbUpdates.highlights:",r.highlights),e.n=1,it.from("links").update(r).eq("id",n);case 1:if(a=e.v,!(o=a.error)){e.n=2;break}throw o;case 2:return e.a(2)}},e)})),function(e,n){return k.apply(this,arguments)})},{key:"deleteLink",value:(C=vt(dt().m(function e(n){var t,r;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.from("links").delete().eq("id",n);case 1:if(t=e.v,!(r=t.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return C.apply(this,arguments)})},{key:"addCollection",value:(w=vt(dt().m(function e(n){var t,r,a,o,i,s,l;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(r=e.v,a=r.data,o=null===(t=a.session)||void 0===t?void 0:t.user){e.n=2;break}throw new Error("User not logged in.");case 2:return i={user_id:o.id,name:n.name,description:n.description,color:n.color},e.n=3,it.from("collections").insert(i);case 3:if(s=e.v,!(l=s.error)){e.n=4;break}throw l;case 4:return e.a(2)}},e)})),function(e){return w.apply(this,arguments)})},{key:"updateCollection",value:(b=vt(dt().m(function e(n,t){var r,a;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.from("collections").update(ct(ct({},t),{},{updatedAt:new Date})).eq("id",n);case 1:if(r=e.v,!(a=r.error)){e.n=2;break}throw a;case 2:return e.a(2)}},e)})),function(e,n){return b.apply(this,arguments)})},{key:"deleteCollection",value:(y=vt(dt().m(function e(n){var t,r;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.from("collections").delete().eq("id",n);case 1:if(t=e.v,!(r=t.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return y.apply(this,arguments)})},{key:"searchLinks",value:(A=vt(dt().m(function e(n){var t,r,a,o,i,s,l,c,u=this;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(r=e.v,a=r.data,o=null===(t=a.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:if(n.trim()){e.n=3;break}return e.a(2,[]);case 3:return e.p=3,e.n=4,it.rpc("search_user_links",{search_query:n.trim(),user_uuid:o.id,result_limit:50});case 4:if(i=e.v,s=i.data,!(l=i.error)){e.n=5;break}return console.error("Search error:",l),e.a(2,[]);case 5:return e.a(2,(s||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:u.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain,searchRank:e.rank,searchHeadline:e.headline}}));case 6:return e.p=6,c=e.v,console.error("Search failed:",c),e.a(2,[])}},e,null,[[3,6]])})),function(e){return A.apply(this,arguments)})},{key:"getUserTags",value:(m=vt(dt().m(function e(){var n,t,r,a,o,i,s,l;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(t=e.v,r=t.data,a=null===(n=r.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,it.rpc("get_user_tags_with_counts",{user_uuid:a.id});case 3:if(o=e.v,i=o.data,!(s=o.error)){e.n=4;break}return console.error("Error fetching user tags:",s),e.a(2,[]);case 4:return e.a(2,(i||[]).map(function(e){return{id:e.id,name:e.name,usageCount:e.usage_count||0}}));case 5:return e.p=5,l=e.v,console.error("Failed to get user tags:",l),e.a(2,[])}},e,null,[[2,5]])})),function(){return m.apply(this,arguments)})},{key:"getLinkTags",value:(v=vt(dt().m(function e(n){var t,r,a,o;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,it.rpc("get_link_tags",{link_uuid:n});case 1:if(t=e.v,r=t.data,!(a=t.error)){e.n=2;break}return console.error("Error fetching link tags:",a),e.a(2,[]);case 2:return e.a(2,r||[]);case 3:return e.p=3,o=e.v,console.error("Failed to get link tags:",o),e.a(2,[])}},e,null,[[0,3]])})),function(e){return v.apply(this,arguments)})},{key:"addTagsToLink",value:(g=vt(dt().m(function e(n,t){var r,a,o,i,s,l,c;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(a=e.v,o=a.data,i=null===(r=o.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,error:"User not logged in."});case 2:return e.p=2,e.n=3,it.rpc("add_tags_to_link",{link_uuid:n,tag_names:t,user_uuid:i.id});case 3:if(s=e.v,!(l=s.error)){e.n=4;break}return console.error("Error adding tags to link:",l),e.a(2,{success:!1,error:l.message||"Failed to add tags."});case 4:return e.a(2,{success:!0});case 5:return e.p=5,c=e.v,console.error("Failed to add tags to link:",c),e.a(2,{success:!1,error:c.message})}},e,null,[[2,5]])})),function(e,n){return g.apply(this,arguments)})},{key:"getLinksByTag",value:(p=vt(dt().m(function e(n){var t,r,a,o,i,s,l,c,u=this;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(r=e.v,a=r.data,o=null===(t=a.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,it.rpc("get_links_by_tag",{user_uuid:o.id,tag_name:n});case 3:if(i=e.v,s=i.data,!(l=i.error)){e.n=4;break}return console.error("Error fetching links by tag:",l),e.a(2,[]);case 4:return e.a(2,(s||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:u.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}));case 5:return e.p=5,c=e.v,console.error("Failed to get links by tag:",c),e.a(2,[])}},e,null,[[2,5]])})),function(e){return p.apply(this,arguments)})},{key:"cleanupUnusedTags",value:(f=vt(dt().m(function e(){var n,t,r,a,o,i,s,l;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(t=e.v,r=t.data,a=null===(n=r.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,0);case 2:return e.p=2,e.n=3,it.rpc("cleanup_unused_tags",{user_uuid:a.id});case 3:if(o=e.v,i=o.data,!(s=o.error)){e.n=4;break}return console.error("Error cleaning up unused tags:",s),e.a(2,0);case 4:return e.a(2,i||0);case 5:return e.p=5,l=e.v,console.error("Failed to cleanup unused tags:",l),e.a(2,0)}},e,null,[[2,5]])})),function(){return f.apply(this,arguments)})},{key:"moveToInbox",value:(h=vt(dt().m(function e(n){var t,r;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.from("links").update({is_in_inbox:!0,collection_id:null,updated_at:(new Date).toISOString()}).eq("id",n);case 1:if(t=e.v,!(r=t.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return h.apply(this,arguments)})},{key:"moveFromInbox",value:(d=vt(dt().m(function e(n,t){var r,a;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.from("links").update({is_in_inbox:!1,collection_id:t||null,updated_at:(new Date).toISOString()}).eq("id",n);case 1:if(r=e.v,!(a=r.error)){e.n=2;break}throw a;case 2:return e.a(2)}},e)})),function(e,n){return d.apply(this,arguments)})},{key:"getInboxLinks",value:(u=vt(dt().m(function e(){var n,t,r,a,o,i,s,l=this;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(t=e.v,r=t.data,a=null===(n=r.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,it.from("links").select("*").eq("user_id",a.id).eq("is_in_inbox",!0).order("created_at",{ascending:!1});case 3:if(o=e.v,i=o.data,!(s=o.error)){e.n=4;break}return console.error("Error fetching inbox links:",s),e.a(2,[]);case 4:return e.a(2,(i||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:l.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}))}},e)})),function(){return u.apply(this,arguments)})},{key:"bulkMoveFromInbox",value:(c=vt(dt().m(function e(n,t){var r,a;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.from("links").update({is_in_inbox:!1,collection_id:t||null,updated_at:(new Date).toISOString()}).in("id",n);case 1:if(r=e.v,!(a=r.error)){e.n=2;break}throw a;case 2:return e.a(2)}},e)})),function(e,n){return c.apply(this,arguments)})},{key:"toggleCollectionSharing",value:(l=vt(dt().m(function e(n,t){var r,a,o,i,s,l,c,u,d;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(a=e.v,o=a.data,i=null===(r=o.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,message:"User not logged in."});case 2:return e.p=2,e.n=3,it.rpc("toggle_collection_sharing",{collection_uuid:n,user_uuid:i.id,make_public:t});case 3:if(s=e.v,l=s.data,!(c=s.error)){e.n=4;break}return console.error("Error toggling collection sharing:",c),e.a(2,{success:!1,message:c.message||"Failed to update sharing settings."});case 4:return u=null==l?void 0:l[0],e.a(2,{success:(null==u?void 0:u.success)||!1,shareToken:null==u?void 0:u.share_token,message:(null==u?void 0:u.message)||"Sharing settings updated."});case 5:return e.p=5,d=e.v,console.error("Failed to toggle collection sharing:",d),e.a(2,{success:!1,message:d.message})}},e,null,[[2,5]])})),function(e,n){return l.apply(this,arguments)})},{key:"getCollectionSharingInfo",value:(s=vt(dt().m(function e(n){var t,r,a,o,i,s,l,c;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(r=e.v,a=r.data,o=null===(t=a.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,null);case 2:return e.p=2,e.n=3,it.from("collections").select("is_public, share_token, view_count").eq("id",n).eq("user_id",o.id).single();case 3:if(i=e.v,s=i.data,!(l=i.error)){e.n=4;break}return console.error("Error fetching collection sharing info:",l),e.a(2,null);case 4:return e.a(2,{isPublic:s.is_public||!1,shareToken:s.share_token,viewCount:s.view_count||0});case 5:return e.p=5,c=e.v,console.error("Failed to get collection sharing info:",c),e.a(2,null)}},e,null,[[2,5]])})),function(e){return s.apply(this,arguments)})},{key:"getDefaultCategories",value:function(){return[{id:"general",name:"General",color:"#6b7280",isDefault:!0},{id:"work",name:"Work",color:"#3b82f6"},{id:"personal",name:"Personal",color:"#10b981"},{id:"learning",name:"Learning",color:"#f59e0b"}]}},{key:"getDefaultData",value:function(){return{links:[],collections:[],categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0}}}},{key:"getLinkByUrl",value:(i=vt(dt().m(function e(n){var t,r,a,o,i,s,l;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.getSession();case 1:if(r=e.v,a=r.data,o=null===(t=a.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,null);case 2:return e.n=3,it.from("links").select("*").eq("user_id",o.id).eq("url",n).single();case 3:if(i=e.v,s=i.data,!(l=i.error)){e.n=5;break}if("PGRST116"!==l.code){e.n=4;break}return e.a(2,null);case 4:throw l;case 5:return e.a(2,{id:s.id,url:s.url,title:s.title,favicon:s.favicon,userNote:s.user_note||"",aiSummary:s.ai_summary,category:s.category,collectionId:s.collection_id,isInInbox:s.is_in_inbox||!1,highlights:this.parseHighlights(s.highlights),createdAt:new Date(s.created_at),updatedAt:new Date(s.updated_at),domain:s.domain})}},e,this)})),function(e){return i.apply(this,arguments)})},{key:"parseHighlights",value:function(e){if(!e)return console.log("Storage: No highlights data found"),[];if("string"==typeof e)try{var n=JSON.parse(e),t=Array.isArray(n)?n:[];return console.log("Storage: Parsed highlights from JSON:",t.length,"highlights",t),t}catch(e){return console.warn("Failed to parse highlights JSON:",e),[]}return Array.isArray(e)?(console.log("Storage: Found highlights array:",e.length,"highlights",e),e):(console.log("Storage: Highlights data in unexpected format:",st(e),e),[])}}],t=[{key:"getPublicCollection",value:(o=vt(dt().m(function e(n){var t,r,a,o,i;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,it.rpc("get_public_collection",{token:n});case 1:if(t=e.v,r=t.data,!(a=t.error)){e.n=2;break}return console.error("Error fetching public collection:",a),e.a(2,null);case 2:if(o=null==r?void 0:r[0]){e.n=3;break}return e.a(2,null);case 3:return e.a(2,{id:o.id,name:o.name,description:o.description,viewCount:o.view_count||0,createdAt:new Date(o.created_at),ownerEmail:o.owner_email});case 4:return e.p=4,i=e.v,console.error("Failed to get public collection:",i),e.a(2,null)}},e,null,[[0,4]])})),function(e){return o.apply(this,arguments)})},{key:"getPublicCollectionLinks",value:(a=vt(dt().m(function e(n){var t,r,a,o;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,it.rpc("get_public_collection_links",{token:n});case 1:if(t=e.v,r=t.data,!(a=t.error)){e.n=2;break}return console.error("Error fetching public collection links:",a),e.a(2,[]);case 2:return e.a(2,(r||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,domain:e.domain,userNote:e.user_note,aiSummary:e.ai_summary,category:e.category,createdAt:new Date(e.created_at),tags:e.tag_names||[]}}));case 3:return e.p=3,o=e.v,console.error("Failed to get public collection links:",o),e.a(2,[])}},e,null,[[0,3]])})),function(e){return a.apply(this,arguments)})},{key:"incrementViewCount",value:(r=vt(dt().m(function e(n){var t,r,a;return dt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,it.rpc("increment_collection_views",{token:n});case 1:t=e.v,(r=t.error)&&console.error("Error incrementing view count:",r),e.n=3;break;case 2:e.p=2,a=e.v,console.error("Failed to increment view count:",a);case 3:return e.a(2)}},e,null,[[0,2]])})),function(e){return r.apply(this,arguments)})}],n&&mt(e.prototype,n),t&&mt(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,n,t,r,a,o,i,s,l,c,u,d,h,f,p,g,v,m,A,y,b,w,C,k,x,E}());const bt=i("ExternalLink",[["path",{d:"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",key:"a6xqqp"}],["polyline",{points:"15 3 21 3 21 9",key:"mznyad"}],["line",{x1:"10",x2:"21",y1:"14",y2:"3",key:"18c3s4"}]]),wt=i("MoreHorizontal",[["circle",{cx:"12",cy:"12",r:"1",key:"41hilf"}],["circle",{cx:"19",cy:"12",r:"1",key:"1wjl8i"}],["circle",{cx:"5",cy:"12",r:"1",key:"1pcz8c"}]]),Ct=i("PenLine",[["path",{d:"M12 20h9",key:"t2du7b"}],["path",{d:"M16.5 3.5a2.12 2.12 0 0 1 3 3L7 19l-4 1 1-4Z",key:"ymcmye"}]]),kt=i("Trash2",[["path",{d:"M3 6h18",key:"d0wm0j"}],["path",{d:"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",key:"4alrt4"}],["path",{d:"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",key:"v07s0e"}],["line",{x1:"10",x2:"10",y1:"11",y2:"17",key:"1uufr5"}],["line",{x1:"14",x2:"14",y1:"11",y2:"17",key:"xtxkd"}]]);var xt=t(848);function Et(e){return function(e){if(Array.isArray(e))return St(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||jt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bt(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||jt(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jt(e,n){if(e){if("string"==typeof e)return St(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?St(e,n):void 0}}function St(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const _t=function(e){var n=e.selectedTags,t=e.availableTags,a=e.onTagsChange,o=e.placeholder,i=void 0===o?"Add tags...":o,s=e.maxTags,l=void 0===s?10:s,u=Bt((0,r.useState)(""),2),d=u[0],f=u[1],p=Bt((0,r.useState)(!1),2),g=p[0],v=p[1],m=Bt((0,r.useState)(-1),2),A=m[0],y=m[1],b=(0,r.useRef)(null),w=t.filter(function(e){return e.name.toLowerCase().includes(d.toLowerCase())&&!n.find(function(n){return n.name===e.name})}).slice(0,8),C=function(e){var t;n.length>=l||n.find(function(n){return n.name===e.name})||(a([].concat(Et(n),[e])),f(""),v(!1),y(-1),null===(t=b.current)||void 0===t||t.focus())},k=function(e){var t;a(n.filter(function(n){return n.name!==e.name})),null===(t=b.current)||void 0===t||t.focus()},x=function(e){for(var n=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4","#84cc16","#f97316","#ec4899","#6366f1"],t=0,r=0;r<e.length;r++)t=e.charCodeAt(r)+((t<<5)-t);return n[Math.abs(t)%n.length]};return(0,xt.jsxs)("div",{className:"tag-input-container",children:[(0,xt.jsxs)("div",{className:"tag-input-wrapper",children:[n.map(function(e){return(0,xt.jsxs)("div",{className:"tag-chip",style:{backgroundColor:x(e.name)},children:[(0,xt.jsx)("span",{className:"tag-name",children:e.name}),(0,xt.jsx)("button",{onClick:function(){return k(e)},className:"tag-remove",type:"button",title:"Remove ".concat(e.name," tag"),"aria-label":"Remove ".concat(e.name," tag"),children:(0,xt.jsx)(h,{size:12})})]},e.name)}),(0,xt.jsx)("input",{ref:b,type:"text",value:d,onChange:function(e){var n=e.target.value;f(n),v(n.length>0),y(-1)},onKeyDown:function(e){"Enter"===e.key?(e.preventDefault(),A>=0&&w[A]?C(w[A]):d.trim()&&function(e){var t;if(!(n.length>=l||n.find(function(n){return n.name.toLowerCase()===e.toLowerCase()}))){var r={id:"",name:e.toLowerCase()};a([].concat(Et(n),[r])),f(""),v(!1),y(-1),null===(t=b.current)||void 0===t||t.focus()}}(d.trim())):"ArrowDown"===e.key?(e.preventDefault(),y(function(e){return e<w.length-1?e+1:e})):"ArrowUp"===e.key?(e.preventDefault(),y(function(e){return e>0?e-1:-1})):"Escape"===e.key?(v(!1),y(-1)):"Backspace"===e.key&&!d&&n.length>0&&k(n[n.length-1])},onFocus:function(){return v(d.length>0)},onBlur:function(){return setTimeout(function(){return v(!1)},150)},placeholder:0===n.length?i:"",className:"tag-input",disabled:n.length>=l}),n.length<l&&(0,xt.jsx)("div",{className:"tag-input-icon",children:(0,xt.jsx)(c,{size:14})})]}),g&&w.length>0&&(0,xt.jsx)("div",{className:"tag-suggestions",children:w.map(function(e,n){return(0,xt.jsxs)("button",{onClick:function(){return function(e){C(e)}(e)},className:"tag-suggestion ".concat(n===A?"focused":""),type:"button",children:[(0,xt.jsx)("span",{className:"tag-suggestion-color",style:{backgroundColor:x(e.name)}}),(0,xt.jsx)("span",{className:"tag-suggestion-name",children:e.name}),e.usageCount&&e.usageCount>0&&(0,xt.jsxs)("span",{className:"tag-suggestion-count",children:["(",e.usageCount,")"]})]},e.id)})})]})};function Nt(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Tt(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Tt(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Ot=function(e){var n=e.highlight,t=e.onAddNote,a=e.onDelete,o=Nt((0,r.useState)(!1),2),i=o[0],s=o[1],l=Nt((0,r.useState)(n.userNote||""),2),c=l[0],u=l[1];return(0,xt.jsxs)("div",{className:"highlight-card",children:[(0,xt.jsxs)("div",{className:"highlight-content",children:[(0,xt.jsxs)("div",{className:"highlight-text",children:[(0,xt.jsx)("div",{className:"highlight-icon",children:(0,xt.jsx)("svg",{width:"16",height:"16",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,xt.jsx)("path",{d:"M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z",fill:"currentColor"})})}),(0,xt.jsxs)("p",{className:"highlight-selected-text",children:['"',n.selectedText,'"']})]}),n.context&&n.context!==n.selectedText&&(0,xt.jsx)("div",{className:"highlight-context",children:(0,xt.jsxs)("p",{children:["Context: ",n.context]})}),n.userNote&&!i&&(0,xt.jsx)("div",{className:"highlight-note",children:(0,xt.jsx)("p",{children:n.userNote})}),i&&(0,xt.jsxs)("div",{className:"highlight-note-form",children:[(0,xt.jsx)("textarea",{value:c,onChange:function(e){return u(e.target.value)},placeholder:"Add your thoughts about this highlight...",autoFocus:!0}),(0,xt.jsxs)("div",{className:"highlight-note-actions",children:[(0,xt.jsx)("button",{onClick:function(){t&&t(n.id,c),s(!1)},className:"save-button",children:"Save"}),(0,xt.jsx)("button",{onClick:function(){u(n.userNote||""),s(!1)},className:"cancel-button",children:"Cancel"})]})]})]}),(0,xt.jsxs)("div",{className:"highlight-actions",children:[(0,xt.jsx)("span",{className:"highlight-date",children:new Date(n.createdAt).toLocaleDateString()}),(0,xt.jsxs)("div",{className:"highlight-buttons",children:[!i&&(0,xt.jsx)("button",{onClick:function(){return s(!0)},className:"highlight-action-button",title:n.userNote?"Edit note":"Add note",children:(0,xt.jsxs)("svg",{width:"14",height:"14",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,xt.jsx)("path",{d:"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}),(0,xt.jsx)("path",{d:"m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})]})}),a&&(0,xt.jsx)("button",{onClick:function(){return a(n.id)},className:"highlight-action-button delete-button",title:"Delete highlight",children:(0,xt.jsxs)("svg",{width:"14",height:"14",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,xt.jsx)("path",{d:"m18 6-12 12",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}),(0,xt.jsx)("path",{d:"m6 6 12 12",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})]})})]})]})]})};function Pt(e){return Pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Pt(e)}function zt(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return It(c,"_invoke",function(t,r,a){var o,s,l,c=0,u=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(n,t){return o=n,s=0,l=e,h.n=t,i}};function f(t,r){for(s=t,l=r,n=0;!d&&c&&!a&&n<u.length;n++){var a,o=u[n],f=h.p,p=o[2];t>3?(a=p===r)&&(l=o[(s=o[4])?5:(s=3,3)],o[4]=o[5]=e):o[0]<=f&&((a=t<2&&f<o[1])?(s=0,h.v=r,h.n=o[1]):f<p&&(a=t<3||o[0]>r||r>p)&&(o[4]=t,o[5]=r,h.n=p,s=0))}if(a||t>1)return i;throw d=!0,r}return function(a,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(n=s<2?e:l)||!d;){o||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(c=2,o){if(s||(a="next"),n=o[a]){if(!(n=n.call(o,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=o.return)&&n.call(o),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);o=e}else if((n=(d=h.n<0)?l:t.call(r,h))!==i)break}catch(n){o=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,a,o),!0),c}var i={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(It(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,It(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,It(d,"constructor",c),It(c,"constructor",l),l.displayName="GeneratorFunction",It(c,a,"GeneratorFunction"),It(d),It(d,a,"Generator"),It(d,r,function(){return this}),It(d,"toString",function(){return"[object Generator]"}),(zt=function(){return{w:o,m:h}})()}function It(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}It=function(e,n,t,r){if(n)a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var o=function(n,t){It(e,n,function(e){return this._invoke(n,t,e)})};o("next",0),o("throw",1),o("return",2)}},It(e,n,t,r)}function Lt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function Rt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Lt(Object(t),!0).forEach(function(n){Dt(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Lt(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function Dt(e,n,t){return(n=function(e){var n=function(e){if("object"!=Pt(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=Pt(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Pt(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Mt(e,n,t,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,a)}function Ut(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function i(e){Mt(o,r,a,i,s,"next",e)}function s(e){Mt(o,r,a,i,s,"throw",e)}i(void 0)})}}function Ft(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return $t(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?$t(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $t(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const qt=function(e){var n=e.link,t=e.collections,a=e.onUpdate,o=e.onDelete,i=e.onMoveToCollection,s=e.onAddNote,l=e.onTagsUpdated,c=Ft((0,r.useState)(!1),2),u=c[0],d=c[1],h=Ft((0,r.useState)(!1),2),f=h[0],g=h[1],v=Ft((0,r.useState)(!1),2),m=v[0],A=v[1],y=Ft((0,r.useState)(!1),2),w=y[0],C=y[1],k=Ft((0,r.useState)([]),2),x=k[0],E=k[1],B=Ft((0,r.useState)([]),2),j=B[0],S=B[1],_=Ft((0,r.useState)(!1),2),N=_[0],T=_[1];(0,r.useEffect)(function(){m?I():z()},[m,n.id]);var O,P,z=function(){var e=Ut(zt().m(function e(){var t,r;return zt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.getLinkTags(n.id);case 1:t=e.v,E(t.map(function(e){return Rt(Rt({},e),{},{usageCount:0})})),e.n=3;break;case 2:e.p=2,r=e.v,console.error("Failed to load link tags:",r);case 3:return e.a(2)}},e,null,[[0,2]])}));return function(){return e.apply(this,arguments)}}(),I=function(){var e=Ut(zt().m(function e(){var t,r,a,o,i;return zt().w(function(e){for(;;)switch(e.n){case 0:return T(!0),e.p=1,e.n=2,Promise.all([yt.getLinkTags(n.id),yt.getUserTags()]);case 2:t=e.v,r=Ft(t,2),a=r[0],o=r[1],E(a.map(function(e){return Rt(Rt({},e),{},{usageCount:0})})),S(o),e.n=4;break;case 3:e.p=3,i=e.v,console.error("Failed to load tags:",i);case 4:return e.p=4,T(!1),e.f(4);case 5:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),L=function(){var e=Ut(zt().m(function e(t){var r,a,o,i;return zt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,r=t.map(function(e){return e.name}),e.n=1,yt.addTagsToLink(n.id,r);case 1:if(!(a=e.v).success){e.n=3;break}return E(t),e.n=2,yt.getUserTags();case 2:o=e.v,S(o),l&&l(),e.n=4;break;case 3:console.error("Failed to update tags:",a.error);case 4:e.n=6;break;case 5:e.p=5,i=e.v,console.error("Failed to update link tags:",i);case 6:return e.a(2)}},e,null,[[0,5]])}));return function(n){return e.apply(this,arguments)}}(),R=function(){chrome.tabs.create({url:n.url})},D=function(e){for(var n=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4","#84cc16","#f97316","#ec4899","#6366f1"],t=0,r=0;r<e.length;r++)t=e.charCodeAt(r)+((t<<5)-t);return n[Math.abs(t)%n.length]},M=function(){var e=Ut(zt().m(function e(t,r){var o,i;return zt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,o=(n.highlights||[]).map(function(e){return e.id===t?Rt(Rt({},e),{},{userNote:r,updatedAt:new Date}):e}),e.n=1,yt.updateLink(n.id,{highlights:o});case 1:a(n.id,{highlights:o}),e.n=3;break;case 2:e.p=2,i=e.v,console.error("Failed to update highlight note:",i);case 3:return e.a(2)}},e,null,[[0,2]])}));return function(n,t){return e.apply(this,arguments)}}(),U=function(){var e=Ut(zt().m(function e(t){var r,o;return zt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,r=(n.highlights||[]).filter(function(e){return e.id!==t}),e.n=1,yt.updateLink(n.id,{highlights:r});case 1:a(n.id,{highlights:r}),e.n=3;break;case 2:e.p=2,o=e.v,console.error("Failed to delete highlight:",o);case 3:return e.a(2)}},e,null,[[0,2]])}));return function(n){return e.apply(this,arguments)}}();return(0,xt.jsxs)("div",{className:"link-card",children:[(0,xt.jsxs)("div",{className:"link-header",children:[(0,xt.jsx)("div",{className:"link-favicon",children:n.favicon?(0,xt.jsx)("img",{src:n.favicon,alt:"",width:"16",height:"16"}):(0,xt.jsx)("div",{className:"favicon-placeholder",style:{backgroundColor:function(e){for(var n=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4"],t=0,r=0;r<e.length;r++)t=e.charCodeAt(r)+((t<<5)-t);return n[Math.abs(t)%n.length]}(n.domain)},children:n.domain.charAt(0).toUpperCase()})}),(0,xt.jsxs)("div",{className:"link-info",children:[(0,xt.jsx)("h3",{className:"link-title",onClick:R,title:n.title,children:n.title}),(0,xt.jsxs)("div",{className:"link-meta",children:[(0,xt.jsx)("span",{className:"link-domain",children:n.domain}),(0,xt.jsx)("span",{className:"link-date",children:(P=n.createdAt,new Date(P).toLocaleDateString("en-US",{month:"short",day:"numeric"}))})]})]}),(0,xt.jsxs)("div",{className:"link-actions",children:[(0,xt.jsx)("button",{onClick:R,className:"action-button",title:"Open link",children:(0,xt.jsx)(bt,{size:14})}),(0,xt.jsxs)("div",{className:"dropdown",children:[(0,xt.jsx)("button",{onClick:function(){return d(!u)},className:"action-button",title:"More options",children:(0,xt.jsx)(wt,{size:14})}),u&&(0,xt.jsxs)("div",{className:"dropdown-menu",children:[(0,xt.jsxs)("button",{onClick:function(){s(n),d(!1)},children:[(0,xt.jsx)(Ct,{size:14}),"Edit note"]}),(0,xt.jsxs)("button",{onClick:function(){A(!m),d(!1)},children:[(0,xt.jsx)(p,{size:14}),"Edit tags"]}),n.highlights&&n.highlights.length>0&&(0,xt.jsxs)("button",{onClick:function(){C(!w),d(!1)},children:[(0,xt.jsx)("svg",{width:"14",height:"14",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,xt.jsx)("path",{d:"M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z",stroke:"currentColor",strokeWidth:"2",strokeLinejoin:"round"})}),w?"Hide":"Show"," highlights (",n.highlights.length,")"]}),(0,xt.jsxs)("button",{onClick:function(){g(!f)},children:[(0,xt.jsx)(b,{size:14}),"Move to collection"]}),(0,xt.jsxs)("button",{onClick:function(){o(n.id),d(!1)},className:"delete-action",children:[(0,xt.jsx)(kt,{size:14}),"Delete"]})]})]})]})]}),f&&(0,xt.jsxs)("div",{className:"collections-menu",children:[(0,xt.jsx)("div",{className:"collections-header",children:"Move to:"}),t.map(function(e){return(0,xt.jsx)("button",{onClick:function(){i(n.id,e.id),g(!1),d(!1)},className:"collection-option",children:e.name},e.id)}),(0,xt.jsx)("button",{onClick:function(){i(n.id,""),g(!1),d(!1)},className:"collection-option",children:"Remove from collection"})]}),m&&(0,xt.jsxs)("div",{className:"tag-editor",children:[(0,xt.jsxs)("div",{className:"tag-editor-header",children:[(0,xt.jsx)("span",{children:"Edit Tags"}),(0,xt.jsx)("button",{onClick:function(){return A(!1)},className:"tag-editor-close",title:"Close tag editor",children:"×"})]}),N?(0,xt.jsx)("div",{className:"tag-editor-loading",children:"Loading tags..."}):(0,xt.jsx)(_t,{selectedTags:x,availableTags:j,onTagsChange:L,placeholder:"Add tags to organize this link...",maxTags:8})]}),!m&&x.length>0&&(0,xt.jsx)("div",{className:"link-tags",children:x.map(function(e){return(0,xt.jsx)("span",{className:"link-tag",style:{backgroundColor:D(e.name)},title:"Filter by ".concat(e.name),children:e.name},e.id||e.name)})}),n.userNote&&(0,xt.jsxs)("div",{className:"link-note",children:[(0,xt.jsx)("strong",{children:"Note:"})," ",n.userNote]}),n.aiSummary&&(0,xt.jsxs)("div",{className:"link-summary",children:[(0,xt.jsx)("strong",{children:"Summary:"})," ",n.aiSummary]}),(0,xt.jsx)("div",{className:"link-category",children:(0,xt.jsx)("span",{className:"category-badge",style:{backgroundColor:(O=n.category,{general:"#6b7280",work:"#3b82f6",personal:"#10b981",learning:"#f59e0b"}[O]||"#6b7280")},children:n.category})}),n.highlights&&n.highlights.length>0&&(0,xt.jsxs)("div",{className:"link-highlights-section",children:[console.log("LinkCard: Rendering highlights section for link:",n.id,"with",n.highlights.length,"highlights"),(0,xt.jsx)("div",{className:"highlights-header",children:(0,xt.jsxs)("button",{onClick:function(){return C(!w)},className:"highlights-toggle",children:[(0,xt.jsx)("svg",{width:"16",height:"16",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,xt.jsx)("path",{d:"M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z",fill:"currentColor"})}),(0,xt.jsxs)("span",{children:[n.highlights.length," highlight",1!==n.highlights.length?"s":""]}),(0,xt.jsx)("svg",{width:"12",height:"12",viewBox:"0 0 24 24",className:"highlights-chevron ".concat(w?"expanded":""),fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,xt.jsx)("path",{d:"m6 9 6 6 6-6",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})})]})}),w&&(0,xt.jsx)("div",{className:"highlights-list",children:n.highlights.map(function(e){return(0,xt.jsx)(Ot,{highlight:e,onAddNote:M,onDelete:U},e.id)})})]})]})},Wt=i("Folder",[["path",{d:"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",key:"1kt360"}]]),Ht=i("Globe",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20",key:"13o1zl"}],["path",{d:"M2 12h20",key:"9i4pu4"}]]),Vt=i("Share2",[["circle",{cx:"18",cy:"5",r:"3",key:"gq8acd"}],["circle",{cx:"6",cy:"12",r:"3",key:"w7nqdw"}],["circle",{cx:"18",cy:"19",r:"3",key:"1xt0gg"}],["line",{x1:"8.59",x2:"15.42",y1:"13.51",y2:"17.49",key:"47mynk"}],["line",{x1:"15.41",x2:"8.59",y1:"6.51",y2:"10.49",key:"1n3mei"}]]),Yt=i("Lock",[["rect",{width:"18",height:"11",x:"3",y:"11",rx:"2",ry:"2",key:"1w4ew1"}],["path",{d:"M7 11V7a5 5 0 0 1 10 0v4",key:"fwvmzm"}]]),Gt=i("Link2",[["path",{d:"M9 17H7A5 5 0 0 1 7 7h2",key:"8i5ue5"}],["path",{d:"M15 7h2a5 5 0 1 1 0 10h-2",key:"1b9ql8"}],["line",{x1:"8",x2:"16",y1:"12",y2:"12",key:"1jonct"}]]),Kt=i("Check",[["path",{d:"M20 6 9 17l-5-5",key:"1gmf2c"}]]),Jt=i("Copy",[["rect",{width:"14",height:"14",x:"8",y:"8",rx:"2",ry:"2",key:"17jyea"}],["path",{d:"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",key:"zix9uf"}]]),Qt=i("Eye",[["path",{d:"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z",key:"rwhkz3"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]);function Xt(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Zt(c,"_invoke",function(t,r,a){var o,s,l,c=0,u=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(n,t){return o=n,s=0,l=e,h.n=t,i}};function f(t,r){for(s=t,l=r,n=0;!d&&c&&!a&&n<u.length;n++){var a,o=u[n],f=h.p,p=o[2];t>3?(a=p===r)&&(l=o[(s=o[4])?5:(s=3,3)],o[4]=o[5]=e):o[0]<=f&&((a=t<2&&f<o[1])?(s=0,h.v=r,h.n=o[1]):f<p&&(a=t<3||o[0]>r||r>p)&&(o[4]=t,o[5]=r,h.n=p,s=0))}if(a||t>1)return i;throw d=!0,r}return function(a,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(n=s<2?e:l)||!d;){o||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(c=2,o){if(s||(a="next"),n=o[a]){if(!(n=n.call(o,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=o.return)&&n.call(o),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);o=e}else if((n=(d=h.n<0)?l:t.call(r,h))!==i)break}catch(n){o=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,a,o),!0),c}var i={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(Zt(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Zt(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,Zt(d,"constructor",c),Zt(c,"constructor",l),l.displayName="GeneratorFunction",Zt(c,a,"GeneratorFunction"),Zt(d),Zt(d,a,"Generator"),Zt(d,r,function(){return this}),Zt(d,"toString",function(){return"[object Generator]"}),(Xt=function(){return{w:o,m:h}})()}function Zt(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Zt=function(e,n,t,r){if(n)a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var o=function(n,t){Zt(e,n,function(e){return this._invoke(n,t,e)})};o("next",0),o("throw",1),o("return",2)}},Zt(e,n,t,r)}function er(e,n,t,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,a)}function nr(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function i(e){er(o,r,a,i,s,"next",e)}function s(e){er(o,r,a,i,s,"throw",e)}i(void 0)})}}function tr(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return rr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?rr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const ar=function(e){var n=e.collection,t=e.onClose,a=e.onUpdate,o=tr((0,r.useState)(!1),2),i=o[0],s=o[1],l=tr((0,r.useState)(""),2),c=l[0],u=l[1],d=tr((0,r.useState)(0),2),f=d[0],p=d[1],g=tr((0,r.useState)(!0),2),v=g[0],m=g[1],A=tr((0,r.useState)(!1),2),y=A[0],b=A[1],w=tr((0,r.useState)(""),2),C=w[0],k=w[1],x=tr((0,r.useState)(!1),2),E=x[0],B=x[1];(0,r.useEffect)(function(){S()},[n.id]);var j,S=function(){var e=nr(Xt().m(function e(){var t,r;return Xt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.getCollectionSharingInfo(n.id);case 1:(t=e.v)&&(s(t.isPublic),u(t.shareToken||""),p(t.viewCount)),e.n=3;break;case 2:e.p=2,r=e.v,console.error("Failed to load sharing info:",r);case 3:return e.p=3,m(!1),e.f(3);case 4:return e.a(2)}},e,null,[[0,2,3,4]])}));return function(){return e.apply(this,arguments)}}(),_=function(){var e=nr(Xt().m(function e(){var t;return Xt().w(function(e){for(;;)switch(e.n){case 0:return b(!0),k(""),e.p=1,e.n=2,yt.toggleCollectionSharing(n.id,!i);case 2:(t=e.v).success?(s(!i),t.shareToken&&u(t.shareToken),k(t.message),a()):k(t.message),e.n=4;break;case 3:e.p=3,e.v,k("Failed to update sharing settings");case 4:return e.p=4,b(!1),e.f(4);case 5:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),N=function(){return c?"https://nest-shared.vercel.app/collection/".concat(c):""},T=function(){var e=nr(Xt().m(function e(){var n,t;return Xt().w(function(e){for(;;)switch(e.n){case 0:if(n=N()){e.n=1;break}return e.a(2);case 1:return e.p=1,e.n=2,navigator.clipboard.writeText(n);case 2:B(!0),setTimeout(function(){return B(!1)},2e3),e.n=4;break;case 3:e.p=3,e.v,(t=document.createElement("textarea")).value=n,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),B(!0),setTimeout(function(){return B(!1)},2e3);case 4:return e.a(2)}},e,null,[[1,3]])}));return function(){return e.apply(this,arguments)}}();return v?(0,xt.jsx)("div",{className:"modal-overlay",children:(0,xt.jsxs)("div",{className:"modal share-modal",children:[(0,xt.jsxs)("div",{className:"modal-header",children:[(0,xt.jsx)("h2",{children:"Share Collection"}),(0,xt.jsx)("button",{onClick:t,className:"modal-close",title:"Close",children:(0,xt.jsx)(h,{size:20})})]}),(0,xt.jsx)("div",{className:"modal-content",children:(0,xt.jsx)("div",{className:"loading-spinner",children:"Loading sharing settings..."})})]})}):(0,xt.jsx)("div",{className:"modal-overlay",children:(0,xt.jsxs)("div",{className:"modal share-modal",children:[(0,xt.jsxs)("div",{className:"modal-header",children:[(0,xt.jsx)("h2",{children:"Share Collection"}),(0,xt.jsx)("button",{onClick:t,className:"modal-close",title:"Close",children:(0,xt.jsx)(h,{size:20})})]}),(0,xt.jsxs)("div",{className:"modal-content",children:[(0,xt.jsxs)("div",{className:"share-collection-info",children:[(0,xt.jsx)("h3",{className:"collection-name",children:n.name}),n.description&&(0,xt.jsx)("p",{className:"collection-description",children:n.description}),(0,xt.jsx)("div",{className:"collection-meta",children:(0,xt.jsxs)("span",{children:["Created ",(j=n.createdAt,new Date(j).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}))]})})]}),(0,xt.jsx)("div",{className:"share-toggle-section",children:(0,xt.jsxs)("div",{className:"share-toggle-header",children:[(0,xt.jsx)("div",{className:"share-status",children:i?(0,xt.jsxs)(xt.Fragment,{children:[(0,xt.jsx)(Ht,{size:20,className:"status-icon public"}),(0,xt.jsxs)("div",{children:[(0,xt.jsx)("div",{className:"status-title",children:"Public Collection"}),(0,xt.jsx)("div",{className:"status-subtitle",children:"Anyone with the link can view this collection"})]})]}):(0,xt.jsxs)(xt.Fragment,{children:[(0,xt.jsx)(Yt,{size:20,className:"status-icon private"}),(0,xt.jsxs)("div",{children:[(0,xt.jsx)("div",{className:"status-title",children:"Private Collection"}),(0,xt.jsx)("div",{className:"status-subtitle",children:"Only you can see this collection"})]})]})}),(0,xt.jsx)("button",{onClick:_,disabled:y,className:"toggle-button ".concat(i?"public":"private"),children:y?"Updating...":i?"Make Private":"Make Public"})]})}),i&&c&&(0,xt.jsxs)("div",{className:"share-link-section",children:[(0,xt.jsxs)("div",{className:"share-link-header",children:[(0,xt.jsx)(Gt,{size:16}),(0,xt.jsx)("span",{children:"Share Link"})]}),(0,xt.jsxs)("div",{className:"share-link-container",children:[(0,xt.jsx)("input",{type:"text",value:N(),readOnly:!0,className:"share-link-input",title:"Share link URL","aria-label":"Share link URL"}),(0,xt.jsxs)("div",{className:"share-link-actions",children:[(0,xt.jsx)("button",{onClick:T,className:"copy-button ".concat(E?"copied":""),title:"Copy link",children:E?(0,xt.jsx)(Kt,{size:16}):(0,xt.jsx)(Jt,{size:16})}),(0,xt.jsx)("button",{onClick:function(){var e=N();e&&chrome.tabs.create({url:e})},className:"open-button",title:"Open in new tab",children:(0,xt.jsx)(bt,{size:16})})]})]}),(0,xt.jsx)("div",{className:"share-analytics",children:(0,xt.jsxs)("div",{className:"analytics-item",children:[(0,xt.jsx)(Qt,{size:16}),(0,xt.jsxs)("span",{children:[f," ",1===f?"view":"views"]})]})})]}),C&&(0,xt.jsx)("div",{className:"share-message ".concat(C.includes("error")?"error":"success"),children:C}),(0,xt.jsxs)("div",{className:"share-info-box",children:[(0,xt.jsx)("h4",{children:"About Public Collections"}),(0,xt.jsxs)("ul",{children:[(0,xt.jsx)("li",{children:"Public collections can be viewed by anyone with the link"}),(0,xt.jsx)("li",{children:"Viewers don't need an account to see your collection"}),(0,xt.jsx)("li",{children:"Links, notes, summaries, and tags are included"}),(0,xt.jsx)("li",{children:"You can make collections private at any time"}),(0,xt.jsx)("li",{children:"View counts help you track sharing analytics"})]})]})]}),(0,xt.jsx)("div",{className:"modal-footer",children:(0,xt.jsx)("button",{onClick:t,className:"modal-button secondary",children:"Close"})})]})})};function or(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return ir(c,"_invoke",function(t,r,a){var o,s,l,c=0,u=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(n,t){return o=n,s=0,l=e,h.n=t,i}};function f(t,r){for(s=t,l=r,n=0;!d&&c&&!a&&n<u.length;n++){var a,o=u[n],f=h.p,p=o[2];t>3?(a=p===r)&&(l=o[(s=o[4])?5:(s=3,3)],o[4]=o[5]=e):o[0]<=f&&((a=t<2&&f<o[1])?(s=0,h.v=r,h.n=o[1]):f<p&&(a=t<3||o[0]>r||r>p)&&(o[4]=t,o[5]=r,h.n=p,s=0))}if(a||t>1)return i;throw d=!0,r}return function(a,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(n=s<2?e:l)||!d;){o||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(c=2,o){if(s||(a="next"),n=o[a]){if(!(n=n.call(o,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=o.return)&&n.call(o),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);o=e}else if((n=(d=h.n<0)?l:t.call(r,h))!==i)break}catch(n){o=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,a,o),!0),c}var i={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(ir(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,ir(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,ir(d,"constructor",c),ir(c,"constructor",l),l.displayName="GeneratorFunction",ir(c,a,"GeneratorFunction"),ir(d),ir(d,a,"Generator"),ir(d,r,function(){return this}),ir(d,"toString",function(){return"[object Generator]"}),(or=function(){return{w:o,m:h}})()}function ir(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}ir=function(e,n,t,r){if(n)a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var o=function(n,t){ir(e,n,function(e){return this._invoke(n,t,e)})};o("next",0),o("throw",1),o("return",2)}},ir(e,n,t,r)}function sr(e,n,t,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,a)}function lr(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return cr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?cr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const ur=function(e){var n=e.collection,t=e.links,a=e.onUpdateLink,o=e.onDeleteLink,i=e.onAddNote,s=e.onTagsUpdated,l=e.onUpdate,c=lr((0,r.useState)(!1),2),u=c[0],d=c[1],h=lr((0,r.useState)(!1),2),f=h[0],p=h[1],m=function(){var e,n=(e=or().m(function e(n,t){return or().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,a(n,{collectionId:t||void 0});case 1:return e.a(2)}},e)}),function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function i(e){sr(o,r,a,i,s,"next",e)}function s(e){sr(o,r,a,i,s,"throw",e)}i(void 0)})});return function(e,t){return n.apply(this,arguments)}}();return(0,xt.jsxs)(xt.Fragment,{children:[(0,xt.jsxs)("div",{className:"collection-card",children:[(0,xt.jsxs)("button",{onClick:function(){return d(!u)},className:"collection-header",children:[u?(0,xt.jsx)(g,{size:16}):(0,xt.jsx)(v,{size:16}),(0,xt.jsx)(Wt,{size:16,className:"collection-icon"}),(0,xt.jsxs)("div",{className:"collection-info",children:[(0,xt.jsxs)("div",{className:"collection-name-row",children:[(0,xt.jsx)("span",{className:"collection-name",children:n.name}),n.isPublic&&(0,xt.jsx)("div",{className:"public-indicator",title:"This collection is public",children:(0,xt.jsx)(Ht,{size:12})})]}),n.description&&(0,xt.jsx)("span",{className:"collection-description",children:n.description})]}),(0,xt.jsxs)("div",{className:"collection-actions",children:[(0,xt.jsx)("span",{className:"collection-count",children:t.length}),(0,xt.jsx)("button",{onClick:function(e){e.stopPropagation(),p(!0)},className:"share-collection-button",title:"Share collection",children:(0,xt.jsx)(Vt,{size:14})})]})]}),u&&(0,xt.jsx)("div",{className:"collection-content",children:0===t.length?(0,xt.jsx)("div",{className:"empty-collection",children:(0,xt.jsx)("p",{children:"No links in this collection"})}):t.map(function(e){return(0,xt.jsx)(qt,{link:e,collections:[],onUpdate:a,onDelete:o,onMoveToCollection:m,onAddNote:i,onTagsUpdated:s},e.id)})})]}),f&&(0,xt.jsx)(ar,{collection:n,onClose:function(){p(!1)},onUpdate:function(){l&&l()}})]})},dr=function(e){var n,t=e.link,r=e.collections,a=e.onUpdate,o=e.onDelete,i=e.onMoveToCollection,s=e.onAddNote,l=e.onTagsUpdated;return(0,xt.jsxs)("div",{className:"search-result-card",children:[t.searchRank&&(0,xt.jsx)("div",{className:"search-rank-indicator",children:(n=t.searchRank,n?"".concat(Math.round(100*n),"% match"):"")}),t.searchHeadline&&(0,xt.jsx)("div",{className:"search-headline",dangerouslySetInnerHTML:{__html:t.searchHeadline}}),(0,xt.jsx)(qt,{link:t,collections:r,onUpdate:a,onDelete:o,onMoveToCollection:i,onAddNote:s,onTagsUpdated:l})]})},hr=i("MoreVertical",[["circle",{cx:"12",cy:"12",r:"1",key:"41hilf"}],["circle",{cx:"12",cy:"5",r:"1",key:"gxeob9"}],["circle",{cx:"12",cy:"19",r:"1",key:"lyex9k"}]]),fr=i("Sparkles",[["path",{d:"m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z",key:"17u4zn"}],["path",{d:"M5 3v4",key:"bklmnn"}],["path",{d:"M19 17v4",key:"iiml17"}],["path",{d:"M3 5h4",key:"nem4j1"}],["path",{d:"M17 19h4",key:"lbex7p"}]]),pr=i("ChevronUp",[["path",{d:"m18 15-6-6-6 6",key:"153udz"}]]),gr=i("Info",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M12 16v-4",key:"1dtifu"}],["path",{d:"M12 8h.01",key:"e9boi3"}]]);function vr(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return mr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?mr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Ar=function(e){var n=e.analysis,t=e.onTagsApproved,a=e.onCategoryApproved,o=e.onClose,i=e.isLoading,s=void 0!==i&&i,l=vr((0,r.useState)(new Set),2),c=l[0],u=l[1],d=vr((0,r.useState)(""),2),f=d[0],p=d[1],v=vr((0,r.useState)(!0),2),m=v[0],A=v[1],y=function(e){return e>=.8?"#10b981":e>=.6?"#f59e0b":"#6b7280"},b=function(e){return e>=.8?"High":e>=.6?"Med":"Low"};return s?(0,xt.jsx)("div",{className:"ai-suggestions loading",children:(0,xt.jsxs)("div",{className:"ai-suggestions-header",children:[(0,xt.jsxs)("div",{className:"ai-loading-content",children:[(0,xt.jsx)(fr,{size:14,className:"ai-icon spinning"}),(0,xt.jsx)("span",{children:"AI analyzing content..."})]}),(0,xt.jsx)("button",{onClick:o,className:"ai-suggestions-close",title:"Cancel analysis",children:(0,xt.jsx)(h,{size:12})})]})}):(0,xt.jsxs)("div",{className:"ai-suggestions",children:[(0,xt.jsxs)("div",{className:"ai-suggestions-header",children:[(0,xt.jsxs)("button",{onClick:function(){return A(!m)},className:"ai-suggestions-toggle",children:[(0,xt.jsx)(fr,{size:14,className:"ai-icon"}),(0,xt.jsx)("span",{children:"AI Suggestions"}),(0,xt.jsx)("div",{className:"ai-suggestions-meta",children:n.readingTime&&(0,xt.jsxs)("span",{className:"ai-reading-time",children:[n.readingTime,"min"]})}),m?(0,xt.jsx)(pr,{size:12}):(0,xt.jsx)(g,{size:12})]}),(0,xt.jsx)("button",{onClick:o,className:"ai-suggestions-close",title:"Close suggestions",children:(0,xt.jsx)(h,{size:12})})]}),m&&(0,xt.jsxs)("div",{className:"ai-suggestions-content",children:[n.categorySuggestions.length>0&&(0,xt.jsxs)("div",{className:"ai-suggestion-section",children:[(0,xt.jsxs)("div",{className:"suggestion-section-header",children:[(0,xt.jsx)(gr,{size:12}),(0,xt.jsx)("span",{children:"Categories"})]}),(0,xt.jsx)("div",{className:"ai-category-suggestions",children:n.categorySuggestions.slice(0,3).map(function(e,n){return(0,xt.jsxs)("button",{onClick:function(){return n=e.category,void p(f===n?"":n);var n},className:"ai-category-chip ".concat(f===e.category?"selected":""),title:e.reason,children:[(0,xt.jsx)("span",{className:"suggestion-name",children:e.category}),(0,xt.jsx)("span",{className:"confidence-indicator",style:{backgroundColor:y(e.confidence)},children:b(e.confidence)})]},"".concat(e.category,"-").concat(n))})})]}),n.tagSuggestions.length>0&&(0,xt.jsxs)("div",{className:"ai-suggestion-section",children:[(0,xt.jsxs)("div",{className:"suggestion-section-header",children:[(0,xt.jsx)(gr,{size:12}),(0,xt.jsx)("span",{children:"Tags"})]}),(0,xt.jsx)("div",{className:"ai-tag-suggestions",children:n.tagSuggestions.slice(0,6).map(function(e,n){return(0,xt.jsxs)("button",{onClick:function(){return n=e.tag,(t=new Set(c)).has(n)?t.delete(n):t.add(n),void u(t);var n,t},className:"ai-tag-chip ".concat(c.has(e.tag)?"selected":""),title:"".concat(e.reason," (").concat(Math.round(100*e.confidence),"% confidence)"),children:[(0,xt.jsx)("span",{className:"suggestion-name",children:e.tag}),(0,xt.jsx)("span",{className:"confidence-indicator",style:{backgroundColor:y(e.confidence)},children:b(e.confidence)}),c.has(e.tag)&&(0,xt.jsx)(Kt,{size:10,className:"selected-icon"})]},"".concat(e.tag,"-").concat(n))})})]}),n.topics&&n.topics.length>0&&(0,xt.jsxs)("div",{className:"ai-topics-section",children:[(0,xt.jsx)("span",{className:"ai-topics-label",children:"Topics:"}),(0,xt.jsx)("div",{className:"ai-detected-topics",children:n.topics.slice(0,3).map(function(e,n){return(0,xt.jsx)("span",{className:"ai-topic-pill",children:e},n)})})]}),(0,xt.jsxs)("div",{className:"ai-suggestions-actions",children:[(0,xt.jsx)("button",{onClick:o,className:"ai-action-btn secondary",children:"Skip"}),(0,xt.jsxs)("button",{onClick:function(){c.size>0&&t(Array.from(c)),f&&a(f),o()},className:"ai-action-btn primary",disabled:0===c.size&&!f,children:["Apply (",c.size+(f?1:0),")"]})]})]})]})};function yr(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return br(c,"_invoke",function(t,r,a){var o,s,l,c=0,u=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(n,t){return o=n,s=0,l=e,h.n=t,i}};function f(t,r){for(s=t,l=r,n=0;!d&&c&&!a&&n<u.length;n++){var a,o=u[n],f=h.p,p=o[2];t>3?(a=p===r)&&(l=o[(s=o[4])?5:(s=3,3)],o[4]=o[5]=e):o[0]<=f&&((a=t<2&&f<o[1])?(s=0,h.v=r,h.n=o[1]):f<p&&(a=t<3||o[0]>r||r>p)&&(o[4]=t,o[5]=r,h.n=p,s=0))}if(a||t>1)return i;throw d=!0,r}return function(a,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(n=s<2?e:l)||!d;){o||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(c=2,o){if(s||(a="next"),n=o[a]){if(!(n=n.call(o,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=o.return)&&n.call(o),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);o=e}else if((n=(d=h.n<0)?l:t.call(r,h))!==i)break}catch(n){o=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,a,o),!0),c}var i={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(br(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,br(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,br(d,"constructor",c),br(c,"constructor",l),l.displayName="GeneratorFunction",br(c,a,"GeneratorFunction"),br(d),br(d,a,"Generator"),br(d,r,function(){return this}),br(d,"toString",function(){return"[object Generator]"}),(yr=function(){return{w:o,m:h}})()}function br(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}br=function(e,n,t,r){if(n)a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var o=function(n,t){br(e,n,function(e){return this._invoke(n,t,e)})};o("next",0),o("throw",1),o("return",2)}},br(e,n,t,r)}function wr(e,n,t,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,a)}function Cr(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function i(e){wr(o,r,a,i,s,"next",e)}function s(e){wr(o,r,a,i,s,"throw",e)}i(void 0)})}}function kr(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return xr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?xr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Er=function(e){var n,t=e.link,a=e.collections,o=e.onMoveFromInbox,i=e.onDelete,s=e.onUpdate,l=e.onAddNote,c=e.onTagsUpdated,u=e.isSelected,d=void 0!==u&&u,f=e.onSelect,g=kr((0,r.useState)(!1),2),v=g[0],m=g[1],A=kr((0,r.useState)(!1),2),w=A[0],C=A[1],k=kr((0,r.useState)(!1),2),x=k[0],E=k[1],B=kr((0,r.useState)(!1),2),j=B[0],S=B[1],_=kr((0,r.useState)(!1),2),N=_[0],T=_[1],O=kr((0,r.useState)(null),2),P=O[0],z=O[1],I=kr((0,r.useState)(!1),2),L=I[0],R=I[1],D=function(){var e=Cr(yr().m(function e(){var n,t;return yr().w(function(e){for(;;)switch(e.n){case 0:if(m(!1),P){e.n=6;break}return R(!0),e.p=1,e.n=2,chrome.runtime.sendMessage({action:"analyzePageWithAI"});case 2:(n=e.v).success&&n.analysis?(z(n.analysis),T(!0)):console.error("Failed to get AI analysis:",n.error),e.n=4;break;case 3:e.p=3,t=e.v,console.error("Error requesting AI analysis:",t);case 4:return e.p=4,R(!1),e.f(4);case 5:e.n=7;break;case 6:T(!0);case 7:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),M=function(){var e=Cr(yr().m(function e(n){var r;return yr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.addTagsToLink(t.id,n);case 1:e.v.success&&c(),e.n=3;break;case 2:e.p=2,r=e.v,console.error("Failed to apply AI tags:",r);case 3:return e.a(2)}},e,null,[[0,2]])}));return function(n){return e.apply(this,arguments)}}(),U=function(){var e=Cr(yr().m(function e(n){var r;return yr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,s(t.id,{category:n});case 1:e.n=3;break;case 2:e.p=2,r=e.v,console.error("Failed to apply AI category:",r);case 3:return e.a(2)}},e,null,[[0,2]])}));return function(n){return e.apply(this,arguments)}}();return r.useEffect(function(){var e=function(){m(!1),C(!1)};if(v)return document.addEventListener("click",e),function(){return document.removeEventListener("click",e)}},[v]),(0,xt.jsx)("div",{className:"inbox-card ".concat(d?"selected":""),children:(0,xt.jsxs)("div",{className:"inbox-card-content",children:[(0,xt.jsxs)("div",{className:"inbox-card-header",children:[(0,xt.jsx)("div",{className:"inbox-card-checkbox",children:(0,xt.jsx)("input",{type:"checkbox",checked:d,onChange:function(e){return e.target.checked,void(f&&f(t.id))},"aria-label":"Select ".concat(t.title),title:"Select ".concat(t.title)})}),(0,xt.jsxs)("div",{className:"inbox-card-favicon",children:[t.favicon?(0,xt.jsx)("img",{src:t.favicon,alt:"",onError:function(e){var n=e.target;n.style.display="none";var t=n.nextElementSibling;t&&(t.style.display="flex")}}):null,(0,xt.jsx)("div",{className:"favicon-placeholder",style:{backgroundColor:function(e){for(var n=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4"],t=0,r=0;r<e.length;r++)t=e.charCodeAt(r)+((t<<5)-t);return n[Math.abs(t)%n.length]}(t.domain),display:t.favicon?"none":"flex"},children:t.domain.charAt(0).toUpperCase()})]}),(0,xt.jsxs)("div",{className:"inbox-card-title-section",children:[(0,xt.jsx)("h3",{className:"inbox-card-title",onClick:function(){chrome.tabs.create({url:t.url})},children:t.title}),(0,xt.jsxs)("div",{className:"inbox-card-domain",children:[t.domain," • ",(n=t.createdAt,new Date(n).toLocaleDateString("en-US",{month:"short",day:"numeric"}))]})]}),(0,xt.jsxs)("div",{className:"inbox-card-actions",children:[(0,xt.jsx)("a",{href:t.url,target:"_blank",rel:"noopener noreferrer",className:"inbox-card-link",title:"Open link",children:(0,xt.jsx)(bt,{size:14})}),(0,xt.jsxs)("div",{className:"inbox-card-menu-container",children:[(0,xt.jsx)("button",{onClick:function(e){e.stopPropagation(),m(!v),C(!1)},className:"inbox-card-menu-button",title:"More options",children:(0,xt.jsx)(hr,{size:14})}),v&&(0,xt.jsxs)("div",{className:"inbox-card-menu",children:[(0,xt.jsxs)("button",{onClick:D,className:"inbox-card-menu-item",disabled:L,children:[(0,xt.jsx)(fr,{size:14}),L?"Analyzing...":"AI Suggestions"]}),(0,xt.jsxs)("button",{onClick:function(){E(!0),m(!1)},className:"inbox-card-menu-item",children:[(0,xt.jsx)(p,{size:14}),"Add Tags"]}),(0,xt.jsxs)("button",{onClick:function(){l(t),m(!1)},className:"inbox-card-menu-item",children:[(0,xt.jsx)(Ct,{size:14}),"Add Note"]}),(0,xt.jsxs)("button",{onClick:function(){return C(!w)},className:"inbox-card-menu-item",children:[(0,xt.jsx)(b,{size:14}),"Move to Collection"]}),w&&(0,xt.jsxs)("div",{className:"inbox-card-submenu",children:[(0,xt.jsxs)("div",{className:"inbox-card-submenu-header",children:[(0,xt.jsx)("span",{children:"Collections"}),(0,xt.jsx)("button",{onClick:function(){return C(!1)},className:"inbox-card-submenu-close",children:(0,xt.jsx)(h,{size:12})})]}),a.length>0?a.map(function(e){return(0,xt.jsx)("button",{onClick:function(){return n=e.id,o(t.id,n),void m(!1);var n},className:"inbox-card-submenu-item",children:e.name},e.id)}):(0,xt.jsx)("div",{className:"inbox-card-submenu-empty",children:"No collections yet"})]}),(0,xt.jsxs)("button",{onClick:function(){o(t.id),m(!1)},className:"inbox-card-menu-item",children:[(0,xt.jsx)(y,{size:14}),"Archive"]}),(0,xt.jsxs)("button",{onClick:function(){i(t.id),m(!1)},className:"inbox-card-menu-item delete",children:[(0,xt.jsx)(kt,{size:14}),"Delete"]})]})]})]})]}),N&&P&&(0,xt.jsx)(Ar,{analysis:P,onTagsApproved:M,onCategoryApproved:U,onClose:function(){return T(!1)},isLoading:L}),t.highlights&&t.highlights.length>0&&(0,xt.jsxs)("div",{className:"inbox-card-highlights",children:[(0,xt.jsxs)("button",{onClick:function(){return S(!j)},className:"highlights-toggle",title:"".concat(j?"Hide":"Show"," highlights"),"aria-label":"".concat(j?"Hide":"Show"," ").concat(t.highlights.length," highlight").concat(1!==t.highlights.length?"s":""),children:[(0,xt.jsxs)("span",{children:["🔗 ",t.highlights.length," highlight",1!==t.highlights.length?"s":""]}),(0,xt.jsx)("span",{className:"highlights-chevron ".concat(j?"expanded":""),children:"▼"})]}),j&&(0,xt.jsx)("div",{className:"inbox-highlights-list",style:{padding:12,display:"flex",flexDirection:"column",gap:12},children:t.highlights.map(function(e){return(0,xt.jsx)(Ot,{highlight:e},e.id)})})]}),t.aiSummary&&(0,xt.jsx)("div",{className:"inbox-card-summary",children:(0,xt.jsx)("p",{children:t.aiSummary})}),t.userNote&&(0,xt.jsx)("div",{className:"inbox-card-note",children:(0,xt.jsx)("p",{children:t.userNote})}),x&&(0,xt.jsx)("div",{className:"inbox-card-tags",children:(0,xt.jsx)(_t,{linkId:t.id,onTagsUpdated:function(){c(),E(!1)},onCancel:function(){return E(!1)}})})]})})},Br=i("ArrowRight",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"m12 5 7 7-7 7",key:"xquz4c"}]]);function jr(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Sr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Sr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const _r=function(e){var n=e.isOpen,t=e.onClose,a=e.links,o=e.collections,i=e.onOpenLink,l=e.onAddToCollection,u=e.onCreateCollection,h=e.onSaveCurrentPage,p=e.onAddNote,g=e.onOpenTabSync,v=jr((0,r.useState)(""),2),m=v[0],A=v[1],w=jr((0,r.useState)(0),2),C=w[0],k=w[1],x=jr((0,r.useState)([]),2),E=x[0],B=x[1],j=(0,r.useRef)(null),S=(0,r.useRef)(null),_=(0,r.useCallback)(function(e){var n=[];return n.push({id:"save-current",type:"action",title:"Save Current Page",subtitle:"Add the current browser tab to Nest",icon:(0,xt.jsx)(c,{size:16}),action:function(){h(),t()},keywords:["save","add","current","page","bookmark"]}),n.push({id:"create-collection",type:"action",title:"Create New Collection",subtitle:"Organize your links into collections",icon:(0,xt.jsx)(b,{size:16}),action:function(){u(),t()},keywords:["create","collection","folder","organize"]}),n.push({id:"tab-sync",type:"action",title:"Tab Sync Mode",subtitle:"View and save open browser tabs",icon:(0,xt.jsx)(s,{size:16}),action:function(){g(),t()},keywords:["tab","sync","browser","open","tabs","save"]}),o.forEach(function(e){var r;n.push({id:"collection-".concat(e.id),type:"collection",title:e.name,subtitle:"Collection • ".concat(a.filter(function(n){return n.collectionId===e.id}).length," links"),icon:(0,xt.jsx)(y,{size:16}),action:function(){t()},keywords:["collection",e.name.toLowerCase(),null===(r=e.description)||void 0===r?void 0:r.toLowerCase()],collection:e})}),(e.trim()?N(a,e):a.slice(0,10)).forEach(function(e){var r;n.push({id:"link-".concat(e.id),type:"link",title:e.title,subtitle:"".concat(e.domain," • ").concat(e.userNote?"Has note":"No note"),icon:(0,xt.jsx)(bt,{size:16}),action:function(){i(e.url),t()},keywords:[e.title.toLowerCase(),e.domain.toLowerCase(),e.userNote.toLowerCase(),(null===(r=e.aiSummary)||void 0===r?void 0:r.toLowerCase())||"",e.category.toLowerCase()],link:e})}),e.trim()?n.filter(function(n){var t,r;return n.title.toLowerCase().includes(e.toLowerCase())||(null===(t=n.subtitle)||void 0===t?void 0:t.toLowerCase().includes(e.toLowerCase()))||(null===(r=n.keywords)||void 0===r?void 0:r.some(function(n){return n.includes(e.toLowerCase())}))}):n.slice(0,12)},[a,o,i,l,u,h,p,g,t]),N=function(e,n){var t=n.toLowerCase();return e.map(function(e){var n,r=0,a=e.title.toLowerCase(),o=e.domain.toLowerCase(),i=e.userNote.toLowerCase(),s=(null===(n=e.aiSummary)||void 0===n?void 0:n.toLowerCase())||"";return a.includes(t)&&(r+=10),o.includes(t)&&(r+=5),i.includes(t)&&(r+=8),s.includes(t)&&(r+=6),{link:e,score:r+=T(a,t)}}).filter(function(e){return e.score>0}).sort(function(e,n){return n.score-e.score}).slice(0,8).map(function(e){return e.link})},T=function(e,n){for(var t=0,r=0,a=0;a<n.length;a++){var o=n[a],i=e.indexOf(o,r);if(-1===i)return 0;var s=i-r;t+=Math.max(0,10-s),r=i+1}return t};return(0,r.useEffect)(function(){var e=_(m);B(e),k(0)},[m,_]),(0,r.useEffect)(function(){var e=function(e){if(n)switch(e.key){case"ArrowDown":e.preventDefault(),k(function(e){return Math.min(e+1,E.length-1)});break;case"ArrowUp":e.preventDefault(),k(function(e){return Math.max(e-1,0)});break;case"Enter":e.preventDefault(),E[C]&&E[C].action();break;case"Escape":e.preventDefault(),t()}};return document.addEventListener("keydown",e),function(){return document.removeEventListener("keydown",e)}},[n,E,C,t]),(0,r.useEffect)(function(){n&&j.current&&(j.current.focus(),A(""),k(0))},[n]),(0,r.useEffect)(function(){if(S.current&&E.length>0){var e=S.current.children[C];e&&e.scrollIntoView({block:"nearest",behavior:"smooth"})}},[C,E]),n?(0,xt.jsx)("div",{className:"command-palette-overlay",onClick:t,children:(0,xt.jsxs)("div",{className:"command-palette",onClick:function(e){return e.stopPropagation()},children:[(0,xt.jsx)("div",{className:"command-palette-header",children:(0,xt.jsxs)("div",{className:"command-palette-search",children:[(0,xt.jsx)(d,{size:16,className:"command-palette-search-icon"}),(0,xt.jsx)("input",{ref:j,type:"text",placeholder:"Search links, collections, or commands...",value:m,onChange:function(e){return A(e.target.value)},className:"command-palette-input"}),(0,xt.jsxs)("div",{className:"command-palette-shortcut",children:[(0,xt.jsx)(f,{size:12}),(0,xt.jsx)("span",{children:"K"})]})]})}),(0,xt.jsx)("div",{className:"command-palette-content",ref:S,children:0===E.length?(0,xt.jsxs)("div",{className:"command-palette-empty",children:[(0,xt.jsx)(d,{size:24}),(0,xt.jsx)("p",{children:"No results found"}),(0,xt.jsx)("span",{children:"Try a different search term"})]}):E.map(function(e,n){return(0,xt.jsxs)("div",{className:"command-palette-item ".concat(n===C?"selected":""),onClick:function(){return e.action()},onMouseEnter:function(){return k(n)},children:[(0,xt.jsx)("div",{className:"command-palette-item-icon",children:e.icon}),(0,xt.jsxs)("div",{className:"command-palette-item-content",children:[(0,xt.jsx)("div",{className:"command-palette-item-title",children:e.title}),e.subtitle&&(0,xt.jsx)("div",{className:"command-palette-item-subtitle",children:e.subtitle})]}),(0,xt.jsx)("div",{className:"command-palette-item-action",children:(0,xt.jsx)(Br,{size:14})})]},e.id)})}),(0,xt.jsx)("div",{className:"command-palette-footer",children:(0,xt.jsxs)("div",{className:"command-palette-tips",children:[(0,xt.jsxs)("span",{children:[(0,xt.jsx)("kbd",{children:"↑"}),(0,xt.jsx)("kbd",{children:"↓"})," to navigate"]}),(0,xt.jsxs)("span",{children:[(0,xt.jsx)("kbd",{children:"↵"})," to select"]}),(0,xt.jsxs)("span",{children:[(0,xt.jsx)("kbd",{children:"esc"})," to close"]})]})})]})}):null},Nr=i("RefreshCw",[["path",{d:"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",key:"v9h5vc"}],["path",{d:"M21 3v5h-5",key:"1q7to0"}],["path",{d:"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",key:"3uifl3"}],["path",{d:"M8 16H3v5",key:"1cv678"}]]),Tr=i("Square",[["rect",{width:"18",height:"18",x:"3",y:"3",rx:"2",key:"afitv7"}]]),Or=i("Monitor",[["rect",{width:"20",height:"14",x:"2",y:"3",rx:"2",key:"48i651"}],["line",{x1:"8",x2:"16",y1:"21",y2:"21",key:"1svkeh"}],["line",{x1:"12",x2:"12",y1:"17",y2:"21",key:"vw1qmm"}]]);function Pr(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return zr(c,"_invoke",function(t,r,a){var o,s,l,c=0,u=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(n,t){return o=n,s=0,l=e,h.n=t,i}};function f(t,r){for(s=t,l=r,n=0;!d&&c&&!a&&n<u.length;n++){var a,o=u[n],f=h.p,p=o[2];t>3?(a=p===r)&&(l=o[(s=o[4])?5:(s=3,3)],o[4]=o[5]=e):o[0]<=f&&((a=t<2&&f<o[1])?(s=0,h.v=r,h.n=o[1]):f<p&&(a=t<3||o[0]>r||r>p)&&(o[4]=t,o[5]=r,h.n=p,s=0))}if(a||t>1)return i;throw d=!0,r}return function(a,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(n=s<2?e:l)||!d;){o||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(c=2,o){if(s||(a="next"),n=o[a]){if(!(n=n.call(o,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=o.return)&&n.call(o),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);o=e}else if((n=(d=h.n<0)?l:t.call(r,h))!==i)break}catch(n){o=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,a,o),!0),c}var i={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(zr(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,zr(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,zr(d,"constructor",c),zr(c,"constructor",l),l.displayName="GeneratorFunction",zr(c,a,"GeneratorFunction"),zr(d),zr(d,a,"Generator"),zr(d,r,function(){return this}),zr(d,"toString",function(){return"[object Generator]"}),(Pr=function(){return{w:o,m:h}})()}function zr(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}zr=function(e,n,t,r){if(n)a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var o=function(n,t){zr(e,n,function(e){return this._invoke(n,t,e)})};o("next",0),o("throw",1),o("return",2)}},zr(e,n,t,r)}function Ir(e,n,t,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,a)}function Lr(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function i(e){Ir(o,r,a,i,s,"next",e)}function s(e){Ir(o,r,a,i,s,"throw",e)}i(void 0)})}}function Rr(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Dr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Dr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Mr=function(e){var n=e.isOpen,t=e.onClose,a=e.collections,o=e.onSaveTabs,i=Rr((0,r.useState)([]),2),s=i[0],c=i[1],u=Rr((0,r.useState)(!1),2),d=u[0],f=u[1],p=Rr((0,r.useState)(new Set),2),g=p[0],v=p[1],m=Rr((0,r.useState)({}),2),b=m[0],w=m[1],C=Rr((0,r.useState)(!1),2),k=C[0],x=C[1],E=Rr((0,r.useState)(!1),2),B=E[0],j=E[1],S=Rr((0,r.useState)(""),2),_=S[0],N=S[1];(0,r.useEffect)(function(){n&&O()},[n]),(0,r.useEffect)(function(){var e=s.reduce(function(e,n){return e[n.windowId]||(e[n.windowId]=[]),e[n.windowId].push(n),e},{});w(e)},[s]);var T,O=function(){var e=Lr(Pr().m(function e(){var n,t,r;return Pr().w(function(e){for(;;)switch(e.n){case 0:return f(!0),e.p=1,e.n=2,chrome.tabs.query({});case 2:n=e.v,t=n.filter(function(e){return e.url&&!e.url.startsWith("chrome://")&&!e.url.startsWith("chrome-extension://")}).map(function(e){return{id:e.id,title:e.title||"Untitled",url:e.url,favicon:e.favIconUrl,windowId:e.windowId,index:e.index,active:e.active,domain:new URL(e.url).hostname,pinned:e.pinned}}),c(t),v(new Set),e.n=4;break;case 3:e.p=3,r=e.v,console.error("Failed to load tabs:",r);case 4:return e.p=4,f(!1),e.f(4);case 5:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),P=function(){return s.filter(function(e){return!(B&&!e.pinned||_&&!e.domain.toLowerCase().includes(_.toLowerCase()))})},z=function(){var e=Lr(Pr().m(function e(n,t){var r,a;return Pr().w(function(e){for(;;)switch(e.n){case 0:if(0!==g.size){e.n=1;break}return e.a(2);case 1:return x(!0),e.p=2,r=s.filter(function(e){return g.has(e.id)}),e.n=3,o(r,n,t);case 3:v(new Set),e.n=5;break;case 4:e.p=4,a=e.v,console.error("Failed to save tabs:",a);case 5:return e.p=5,x(!1),e.f(5);case 6:return e.a(2)}},e,null,[[2,4,5,6]])}));return function(n,t){return e.apply(this,arguments)}}(),I=function(){var e=Lr(Pr().m(function e(n,t,r){var a;return Pr().w(function(e){for(;;)switch(e.n){case 0:return x(!0),e.p=1,e.n=2,o([n],t,r);case 2:e.n=4;break;case 3:e.p=3,a=e.v,console.error("Failed to save tab:",a);case 4:return e.p=4,x(!1),e.f(4);case 5:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(n,t,r){return e.apply(this,arguments)}}(),L=P(),R=(T={},s.forEach(function(e){T[e.domain]=(T[e.domain]||0)+1}),Object.entries(T).sort(function(e,n){var t=Rr(e,2)[1];return Rr(n,2)[1]-t}).slice(0,5));return n?(0,xt.jsx)("div",{className:"tab-sync-overlay",onClick:t,children:(0,xt.jsxs)("div",{className:"tab-sync-modal",onClick:function(e){return e.stopPropagation()},children:[(0,xt.jsxs)("div",{className:"tab-sync-header",children:[(0,xt.jsxs)("div",{className:"tab-sync-title",children:[(0,xt.jsx)(l,{size:20}),(0,xt.jsx)("h2",{children:"Tab Sync Mode"}),(0,xt.jsxs)("span",{className:"tab-count",children:[s.length," open tabs"]})]}),(0,xt.jsxs)("div",{className:"tab-sync-actions",children:[(0,xt.jsx)("button",{onClick:O,className:"tab-sync-refresh",disabled:d,title:"Refresh tabs",children:(0,xt.jsx)(Nr,{size:16,className:d?"spinning":""})}),(0,xt.jsx)("button",{onClick:t,className:"tab-sync-close",title:"Close",children:(0,xt.jsx)(h,{size:16})})]})]}),(0,xt.jsxs)("div",{className:"tab-sync-filters",children:[(0,xt.jsxs)("div",{className:"tab-sync-filter-row",children:[(0,xt.jsxs)("label",{className:"tab-sync-filter-checkbox",children:[(0,xt.jsx)("input",{type:"checkbox",checked:B,onChange:function(e){return j(e.target.checked)}}),"Show only pinned tabs"]}),(0,xt.jsx)("input",{type:"text",placeholder:"Filter by domain...",value:_,onChange:function(e){return N(e.target.value)},className:"tab-sync-domain-filter"})]}),R.length>0&&(0,xt.jsxs)("div",{className:"tab-sync-domain-pills",children:[(0,xt.jsx)("span",{className:"domain-pills-label",children:"Quick filters:"}),R.map(function(e){var n=Rr(e,2),t=n[0],r=n[1];return(0,xt.jsxs)("button",{onClick:function(){return N(_===t?"":t)},className:"domain-pill ".concat(_===t?"active":""),children:[t," (",r,")"]},t)})]})]}),(0,xt.jsxs)("div",{className:"tab-sync-bulk-actions",children:[(0,xt.jsxs)("button",{onClick:function(){var e=P();g.size===e.length?v(new Set):v(new Set(e.map(function(e){return e.id})))},className:"bulk-action-btn",title:g.size===L.length?"Deselect all":"Select all",children:[g.size===L.length?(0,xt.jsx)(Tr,{size:16}):(0,xt.jsx)(A,{size:16}),g.size===L.length?"Deselect All":"Select All"]}),g.size>0&&(0,xt.jsxs)(xt.Fragment,{children:[(0,xt.jsxs)("button",{onClick:function(){return z(void 0,!0)},className:"bulk-action-btn primary",disabled:k,children:[(0,xt.jsx)(y,{size:16}),"Save to Inbox (",g.size,")"]}),(0,xt.jsxs)("select",{onChange:function(e){e.target.value&&(z(e.target.value),e.target.value="")},className:"bulk-collection-select",disabled:k,title:"Save selected tabs to collection","aria-label":"Save selected tabs to collection",children:[(0,xt.jsx)("option",{value:"",children:"Save to Collection..."}),a.map(function(e){return(0,xt.jsx)("option",{value:e.id,children:e.name},e.id)})]})]})]}),(0,xt.jsx)("div",{className:"tab-sync-content",children:d?(0,xt.jsxs)("div",{className:"tab-sync-loading",children:[(0,xt.jsx)(Nr,{size:24,className:"spinning"}),(0,xt.jsx)("p",{children:"Loading tabs..."})]}):0===Object.keys(b).length?(0,xt.jsxs)("div",{className:"tab-sync-empty",children:[(0,xt.jsx)(Or,{size:48}),(0,xt.jsx)("h3",{children:"No tabs found"}),(0,xt.jsx)("p",{children:"Open some tabs and refresh to see them here"})]}):Object.entries(b).map(function(e){var n=Rr(e,2),t=n[0],r=n[1];return(0,xt.jsxs)("div",{className:"tab-window-group",children:[(0,xt.jsx)("div",{className:"tab-window-header",children:(0,xt.jsxs)("button",{onClick:function(){return function(e){var n=(b[e]||[]).map(function(e){return e.id}),t=new Set(g);n.every(function(e){return t.has(e)})?n.forEach(function(e){return t.delete(e)}):n.forEach(function(e){return t.add(e)}),v(t)}(parseInt(t))},className:"window-select-btn",children:[(0,xt.jsx)(Or,{size:16}),"Window ",t," (",r.length," tabs)"]})}),(0,xt.jsx)("div",{className:"tab-list",children:r.filter(function(e){return!(B&&!e.pinned||_&&!e.domain.toLowerCase().includes(_.toLowerCase()))}).map(function(e){return(0,xt.jsxs)("div",{className:"tab-item ".concat(g.has(e.id)?"selected":""," ").concat(e.active?"active":""),children:[(0,xt.jsxs)("div",{className:"tab-item-content",children:[(0,xt.jsx)("input",{type:"checkbox",checked:g.has(e.id),onChange:function(){return n=e.id,(t=new Set(g)).has(n)?t.delete(n):t.add(n),void v(t);var n,t},className:"tab-checkbox",title:"Select ".concat(e.title),"aria-label":"Select ".concat(e.title)}),(0,xt.jsx)("img",{src:e.favicon||"https://www.google.com/s2/favicons?domain=".concat(e.domain,"&sz=16"),alt:"favicon",className:"tab-favicon",onError:function(n){n.target.src="https://www.google.com/s2/favicons?domain=".concat(e.domain,"&sz=16")}}),(0,xt.jsxs)("div",{className:"tab-info",children:[(0,xt.jsxs)("div",{className:"tab-title",children:[e.pinned&&(0,xt.jsx)("span",{className:"tab-pin-indicator",children:"📌"}),e.title,e.active&&(0,xt.jsx)("span",{className:"tab-active-indicator",children:"•"})]}),(0,xt.jsx)("div",{className:"tab-url",children:e.domain})]})]}),(0,xt.jsxs)("div",{className:"tab-actions",children:[(0,xt.jsx)("button",{onClick:function(){return I(e,void 0,!0)},className:"tab-action-btn",title:"Save to inbox",disabled:k,children:(0,xt.jsx)(y,{size:14})}),(0,xt.jsxs)("select",{onChange:function(n){n.target.value&&(I(e,n.target.value),n.target.value="")},className:"tab-collection-select",disabled:k,title:"Save to collection","aria-label":"Save to collection",children:[(0,xt.jsx)("option",{value:"",children:"📁"}),a.map(function(e){return(0,xt.jsx)("option",{value:e.id,children:e.name},e.id)})]}),(0,xt.jsx)("a",{href:e.url,target:"_blank",rel:"noopener noreferrer",className:"tab-action-btn",title:"Open tab",children:(0,xt.jsx)(bt,{size:14})})]})]},e.id)})})]},t)})}),(0,xt.jsx)("div",{className:"tab-sync-footer",children:(0,xt.jsxs)("div",{className:"tab-sync-stats",children:[(0,xt.jsxs)("span",{children:[g.size," of ",L.length," tabs selected"]}),_&&(0,xt.jsxs)("span",{children:['• Filtered by "',_,'"']}),B&&(0,xt.jsx)("span",{children:"• Pinned only"})]})})]})}):null};function Ur(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Fr=function(e){var n,t,a=e.link,o=e.onSave,i=e.onClose,s=(n=(0,r.useState)(a.userNote||""),t=2,function(e){if(Array.isArray(e))return e}(n)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(n,t)||function(e,n){if(e){if("string"==typeof e)return Ur(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ur(e,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0],c=s[1];return(0,xt.jsx)("div",{className:"modal-overlay",onClick:i,children:(0,xt.jsxs)("div",{className:"modal-content",onClick:function(e){return e.stopPropagation()},children:[(0,xt.jsxs)("div",{className:"modal-header",children:[(0,xt.jsx)("h2",{children:"Add Note"}),(0,xt.jsx)("button",{onClick:i,className:"close-button",title:"Close",children:(0,xt.jsx)(h,{size:20})})]}),(0,xt.jsxs)("div",{className:"modal-body",children:[(0,xt.jsxs)("div",{className:"link-preview",children:[(0,xt.jsx)("div",{className:"link-preview-favicon",children:a.favicon?(0,xt.jsx)("img",{src:a.favicon,alt:"",width:"16",height:"16"}):(0,xt.jsx)("div",{className:"favicon-placeholder",children:a.domain.charAt(0).toUpperCase()})}),(0,xt.jsxs)("div",{className:"link-preview-info",children:[(0,xt.jsx)("div",{className:"link-preview-title",children:a.title}),(0,xt.jsx)("div",{className:"link-preview-url",children:a.domain})]})]}),(0,xt.jsxs)("form",{onSubmit:function(e){e.preventDefault(),o(l)},children:[(0,xt.jsxs)("div",{className:"form-group",children:[(0,xt.jsx)("label",{htmlFor:"note",children:"Note:"}),(0,xt.jsx)("textarea",{id:"note",value:l,onChange:function(e){return c(e.target.value)},placeholder:"Add a note about why you saved this link...",rows:4,autoFocus:!0})]}),(0,xt.jsxs)("div",{className:"modal-actions",children:[(0,xt.jsx)("button",{type:"button",onClick:i,className:"button-secondary",children:"Cancel"}),(0,xt.jsx)("button",{type:"submit",className:"button-primary",children:"Save Note"})]})]})]})]})})};function $r(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return qr(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?qr(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qr(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Wr=function(e){var n=e.onSave,t=e.onClose,a=$r((0,r.useState)(""),2),o=a[0],i=a[1],s=$r((0,r.useState)(""),2),l=s[0],c=s[1];return(0,xt.jsx)("div",{className:"modal-overlay",onClick:t,children:(0,xt.jsxs)("div",{className:"modal-content",onClick:function(e){return e.stopPropagation()},children:[(0,xt.jsxs)("div",{className:"modal-header",children:[(0,xt.jsx)("h2",{children:"Create Collection"}),(0,xt.jsx)("button",{onClick:t,className:"close-button",title:"Close",children:(0,xt.jsx)(h,{size:20})})]}),(0,xt.jsx)("div",{className:"modal-body",children:(0,xt.jsxs)("form",{onSubmit:function(e){e.preventDefault(),o.trim()&&n(o.trim(),l.trim()||void 0)},children:[(0,xt.jsxs)("div",{className:"form-group",children:[(0,xt.jsx)("label",{htmlFor:"collection-name",children:"Collection Name:"}),(0,xt.jsx)("input",{id:"collection-name",type:"text",value:o,onChange:function(e){return i(e.target.value)},placeholder:"Enter collection name...",required:!0,autoFocus:!0})]}),(0,xt.jsxs)("div",{className:"form-group",children:[(0,xt.jsx)("label",{htmlFor:"collection-description",children:"Description (optional):"}),(0,xt.jsx)("textarea",{id:"collection-description",value:l,onChange:function(e){return c(e.target.value)},placeholder:"Describe what this collection is for...",rows:3})]}),(0,xt.jsxs)("div",{className:"modal-actions",children:[(0,xt.jsx)("button",{type:"button",onClick:t,className:"button-secondary",children:"Cancel"}),(0,xt.jsx)("button",{type:"submit",className:"button-primary",disabled:!o.trim(),children:"Create Collection"})]})]})})]})})},Hr=function(e){var n=e.tags,t=e.selectedTag,r=e.onTagSelect,a=e.loading,o=function(e){for(var n=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4","#84cc16","#f97316","#ec4899","#6366f1"],t=0,r=0;r<e.length;r++)t=e.charCodeAt(r)+((t<<5)-t);return n[Math.abs(t)%n.length]};return void 0!==a&&a?(0,xt.jsx)("div",{className:"tag-filters",children:(0,xt.jsx)("div",{className:"tag-filter-skeleton",children:"Loading tags..."})}):0===n.length?null:(0,xt.jsxs)("div",{className:"tag-filters",children:[t&&(0,xt.jsxs)("button",{onClick:function(){return r(null)},className:"tag-filter active",title:"Clear tag filter",children:[(0,xt.jsx)("span",{className:"tag-filter-color",style:{backgroundColor:o(t)}}),t,(0,xt.jsx)(h,{size:12})]}),n.filter(function(e){return e.name!==t}).sort(function(e,n){return n.usageCount-e.usageCount}).slice(0,10).map(function(e){return(0,xt.jsxs)("button",{onClick:function(){return r(e.name)},className:"tag-filter",title:"Filter by ".concat(e.name," tag"),children:[(0,xt.jsx)("span",{className:"tag-filter-color",style:{backgroundColor:o(e.name)}}),e.name,(0,xt.jsx)("span",{className:"tag-filter-count",children:e.usageCount})]},e.id)}),n.length>10&&!t&&(0,xt.jsxs)("span",{className:"tag-filter-more",children:["+",n.length-10," more"]})]})},Vr=i("User",[["path",{d:"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2",key:"975kel"}],["circle",{cx:"12",cy:"7",r:"4",key:"17ys0d"}]]),Yr=i("Palette",[["circle",{cx:"13.5",cy:"6.5",r:".5",key:"1xcu5"}],["circle",{cx:"17.5",cy:"10.5",r:".5",key:"736e4u"}],["circle",{cx:"8.5",cy:"7.5",r:".5",key:"clrty"}],["circle",{cx:"6.5",cy:"12.5",r:".5",key:"1s4xz9"}],["path",{d:"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z",key:"12rzf8"}]]),Gr=i("Database",[["ellipse",{cx:"12",cy:"5",rx:"9",ry:"3",key:"msslwz"}],["path",{d:"M3 5V19A9 3 0 0 0 21 19V5",key:"1wlel7"}],["path",{d:"M3 12A9 3 0 0 0 21 12",key:"mv7ke4"}]]),Kr=i("Mail",[["rect",{width:"20",height:"16",x:"2",y:"4",rx:"2",key:"18n3k1"}],["path",{d:"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",key:"1ocrg3"}]]),Jr=i("Calendar",[["rect",{width:"18",height:"18",x:"3",y:"4",rx:"2",ry:"2",key:"eu3xkr"}],["line",{x1:"16",x2:"16",y1:"2",y2:"6",key:"m3sa8f"}],["line",{x1:"8",x2:"8",y1:"2",y2:"6",key:"18kwsl"}],["line",{x1:"3",x2:"21",y1:"10",y2:"10",key:"xt86sb"}]]),Qr=i("Download",[["path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",key:"ih7n3h"}],["polyline",{points:"7 10 12 15 17 10",key:"2ggqvy"}],["line",{x1:"12",x2:"12",y1:"15",y2:"3",key:"1vk2je"}]]),Xr=i("FileText",[["path",{d:"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",key:"1nnpy2"}],["polyline",{points:"14 2 14 8 20 8",key:"1ew0cm"}],["line",{x1:"16",x2:"8",y1:"13",y2:"13",key:"14keom"}],["line",{x1:"16",x2:"8",y1:"17",y2:"17",key:"17nazh"}],["line",{x1:"10",x2:"8",y1:"9",y2:"9",key:"1a5vjj"}]]),Zr=i("BarChart3",[["path",{d:"M3 3v18h18",key:"1s2lah"}],["path",{d:"M18 17V9",key:"2bz60n"}],["path",{d:"M13 17V5",key:"1frdt8"}],["path",{d:"M8 17v-3",key:"17ska0"}]]),ea=i("HelpCircle",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3",key:"1u773s"}],["path",{d:"M12 17h.01",key:"p32p05"}]]);function na(e){return na="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},na(e)}function ta(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function ra(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ta(Object(t),!0).forEach(function(n){aa(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ta(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function aa(e,n,t){return(n=function(e){var n=function(e){if("object"!=na(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=na(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==na(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function oa(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return ia(c,"_invoke",function(t,r,a){var o,s,l,c=0,u=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(n,t){return o=n,s=0,l=e,h.n=t,i}};function f(t,r){for(s=t,l=r,n=0;!d&&c&&!a&&n<u.length;n++){var a,o=u[n],f=h.p,p=o[2];t>3?(a=p===r)&&(l=o[(s=o[4])?5:(s=3,3)],o[4]=o[5]=e):o[0]<=f&&((a=t<2&&f<o[1])?(s=0,h.v=r,h.n=o[1]):f<p&&(a=t<3||o[0]>r||r>p)&&(o[4]=t,o[5]=r,h.n=p,s=0))}if(a||t>1)return i;throw d=!0,r}return function(a,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(n=s<2?e:l)||!d;){o||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(c=2,o){if(s||(a="next"),n=o[a]){if(!(n=n.call(o,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=o.return)&&n.call(o),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);o=e}else if((n=(d=h.n<0)?l:t.call(r,h))!==i)break}catch(n){o=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,a,o),!0),c}var i={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(ia(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,ia(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,ia(d,"constructor",c),ia(c,"constructor",l),l.displayName="GeneratorFunction",ia(c,a,"GeneratorFunction"),ia(d),ia(d,a,"Generator"),ia(d,r,function(){return this}),ia(d,"toString",function(){return"[object Generator]"}),(oa=function(){return{w:o,m:h}})()}function ia(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}ia=function(e,n,t,r){if(n)a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var o=function(n,t){ia(e,n,function(e){return this._invoke(n,t,e)})};o("next",0),o("throw",1),o("return",2)}},ia(e,n,t,r)}function sa(e,n,t,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,a)}function la(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function i(e){sa(o,r,a,i,s,"next",e)}function s(e){sa(o,r,a,i,s,"throw",e)}i(void 0)})}}function ca(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return ua(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ua(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ua(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const da=function(e){var n=e.onClose,t=ca((0,r.useState)("account"),2),a=t[0],o=t[1],i=ca((0,r.useState)(""),2),s=i[0],l=i[1],c=ca((0,r.useState)({linkCount:0,collectionCount:0,tagCount:0,publicCollections:0,totalViews:0}),2),u=c[0],d=c[1],f=ca((0,r.useState)({autoSummarize:!0,defaultCategory:"general",defaultPrivacy:!1,showTooltips:!0,compactView:!1,darkMode:!1,autoTagging:!1,autoCategorization:!1,openaiApiKey:""}),2),g=f[0],v=f[1],m=ca((0,r.useState)(!0),2),A=m[0],y=m[1],b=ca((0,r.useState)(!1),2),w=b[0],C=b[1],k=ca((0,r.useState)(""),2),x=k[0],E=k[1];(0,r.useEffect)(function(){B(),j(),S()},[]);var B=function(){var e=la(oa().m(function e(){var n,t,r;return oa().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,it.auth.getUser();case 1:n=e.v,(t=n.data.user)&&l(t.email||"Unknown"),e.n=3;break;case 2:e.p=2,r=e.v,console.error("Failed to load user data:",r);case 3:return e.a(2)}},e,null,[[0,2]])}));return function(){return e.apply(this,arguments)}}(),j=function(){var e=la(oa().m(function e(){var n,t;return oa().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.getData();case 1:n=e.v,v({autoSummarize:n.settings.autoSummarize,defaultCategory:n.settings.defaultCategory,defaultPrivacy:!1,showTooltips:!0,compactView:!1,darkMode:!1,autoTagging:n.settings.autoTagging,autoCategorization:n.settings.autoCategorization,openaiApiKey:n.settings.openaiApiKey}),e.n=3;break;case 2:e.p=2,t=e.v,console.error("Failed to load settings:",t);case 3:return e.p=3,y(!1),e.f(3);case 4:return e.a(2)}},e,null,[[0,2,3,4]])}));return function(){return e.apply(this,arguments)}}(),S=function(){var e=la(oa().m(function e(){var n,t,r,a,o,i,s;return oa().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.getData();case 1:return n=e.v,e.n=2,yt.getUserTags();case 2:return t=e.v,e.n=3,it.from("collections").select("view_count").eq("is_public",!0);case 3:r=e.v,a=r.data,o=(null==a?void 0:a.length)||0,i=(null==a?void 0:a.reduce(function(e,n){return e+(n.view_count||0)},0))||0,d({linkCount:n.links.length,collectionCount:n.collections.length,tagCount:t.length,publicCollections:o,totalViews:i}),e.n=5;break;case 4:e.p=4,s=e.v,console.error("Failed to load user stats:",s);case 5:return e.a(2)}},e,null,[[0,4]])}));return function(){return e.apply(this,arguments)}}(),_=function(){var e=la(oa().m(function e(n){return oa().w(function(e){for(;;)switch(e.n){case 0:C(!0),E("");try{v(n),E("Settings saved successfully!"),setTimeout(function(){return E("")},3e3)}catch(e){E("Failed to save settings")}finally{C(!1)}case 1:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}(),N=function(){var e=la(oa().m(function e(){var n,t,r,a,o,i;return oa().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.getData();case 1:return n=e.v,e.n=2,yt.getUserTags();case 2:t=e.v,r={exported_at:(new Date).toISOString(),user_email:s,links:n.links,collections:n.collections,tags:t,stats:u},a=new Blob([JSON.stringify(r,null,2)],{type:"application/json"}),o=URL.createObjectURL(a),(i=document.createElement("a")).href=o,i.download="nest-export-".concat((new Date).toISOString().split("T")[0],".json"),document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(o),E("Data exported successfully!"),setTimeout(function(){return E("")},3e3),e.n=4;break;case 3:e.p=3,e.v,E("Failed to export data");case 4:return e.a(2)}},e,null,[[0,3]])}));return function(){return e.apply(this,arguments)}}(),T=function(){var e=la(oa().m(function e(){var n;return oa().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.cleanupUnusedTags();case 1:n=e.v,E("Cleaned up ".concat(n," unused tags")),S(),setTimeout(function(){return E("")},3e3),e.n=3;break;case 2:e.p=2,e.v,E("Failed to cleanup tags");case 3:return e.a(2)}},e,null,[[0,2]])}));return function(){return e.apply(this,arguments)}}(),O=function(){var e=la(oa().m(function e(){return oa().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,it.auth.signOut();case 1:n(),e.n=3;break;case 2:e.p=2,e.v,E("Failed to logout");case 3:return e.a(2)}},e,null,[[0,2]])}));return function(){return e.apply(this,arguments)}}(),P=[{id:"account",label:"Account",icon:Vr},{id:"preferences",label:"Preferences",icon:Yr},{id:"data",label:"Data",icon:Gr},{id:"sharing",label:"Sharing",icon:Vt},{id:"about",label:"About",icon:gr}];return A?(0,xt.jsx)("div",{className:"modal-overlay",children:(0,xt.jsxs)("div",{className:"modal settings-modal",children:[(0,xt.jsxs)("div",{className:"modal-header",children:[(0,xt.jsx)("h2",{children:"Settings"}),(0,xt.jsx)("button",{onClick:n,className:"modal-close",title:"Close",children:(0,xt.jsx)(h,{size:20})})]}),(0,xt.jsx)("div",{className:"modal-content",children:(0,xt.jsx)("div",{className:"loading-spinner",children:"Loading settings..."})})]})}):(0,xt.jsx)("div",{className:"modal-overlay",children:(0,xt.jsxs)("div",{className:"modal settings-modal",children:[(0,xt.jsxs)("div",{className:"modal-header",children:[(0,xt.jsx)("h2",{children:"Settings"}),(0,xt.jsx)("button",{onClick:n,className:"modal-close",title:"Close",children:(0,xt.jsx)(h,{size:20})})]}),(0,xt.jsxs)("div",{className:"settings-content",children:[(0,xt.jsx)("div",{className:"settings-tabs",children:P.map(function(e){var n=e.icon;return(0,xt.jsxs)("button",{onClick:function(){return o(e.id)},className:"settings-tab ".concat(a===e.id?"active":""),children:[(0,xt.jsx)(n,{size:16}),(0,xt.jsx)("span",{children:e.label})]},e.id)})}),(0,xt.jsxs)("div",{className:"settings-panel",children:["account"===a&&(0,xt.jsxs)("div",{className:"settings-section",children:[(0,xt.jsx)("h3",{children:"Account Information"}),(0,xt.jsxs)("div",{className:"setting-group",children:[(0,xt.jsx)("div",{className:"setting-item",children:(0,xt.jsxs)("div",{className:"setting-info",children:[(0,xt.jsx)(Kr,{size:16}),(0,xt.jsxs)("div",{children:[(0,xt.jsx)("div",{className:"setting-label",children:"Email Address"}),(0,xt.jsx)("div",{className:"setting-description",children:s})]})]})}),(0,xt.jsx)("div",{className:"setting-item",children:(0,xt.jsxs)("div",{className:"setting-info",children:[(0,xt.jsx)(Jr,{size:16}),(0,xt.jsxs)("div",{children:[(0,xt.jsx)("div",{className:"setting-label",children:"Account Created"}),(0,xt.jsx)("div",{className:"setting-description",children:"Connected via Supabase"})]})]})})]}),(0,xt.jsxs)("div",{className:"stats-grid",children:[(0,xt.jsxs)("div",{className:"stat-card",children:[(0,xt.jsx)("div",{className:"stat-number",children:u.linkCount}),(0,xt.jsx)("div",{className:"stat-label",children:"Links Saved"})]}),(0,xt.jsxs)("div",{className:"stat-card",children:[(0,xt.jsx)("div",{className:"stat-number",children:u.collectionCount}),(0,xt.jsx)("div",{className:"stat-label",children:"Collections"})]}),(0,xt.jsxs)("div",{className:"stat-card",children:[(0,xt.jsx)("div",{className:"stat-number",children:u.tagCount}),(0,xt.jsx)("div",{className:"stat-label",children:"Tags Used"})]}),(0,xt.jsxs)("div",{className:"stat-card",children:[(0,xt.jsx)("div",{className:"stat-number",children:u.totalViews}),(0,xt.jsx)("div",{className:"stat-label",children:"Total Views"})]})]}),(0,xt.jsx)("div",{className:"setting-actions",children:(0,xt.jsx)("button",{onClick:O,className:"settings-button danger",children:"Logout"})})]}),"preferences"===a&&(0,xt.jsxs)("div",{className:"settings-section",children:[(0,xt.jsx)("h3",{children:"Application Preferences"}),(0,xt.jsxs)("div",{className:"ai-settings-section",children:[(0,xt.jsxs)("h4",{children:[(0,xt.jsx)(fr,{size:16,className:"ai-icon"}),"AI-Powered Features"]}),(0,xt.jsxs)("div",{className:"ai-feature-toggle",children:[(0,xt.jsxs)("div",{className:"ai-feature-info",children:[(0,xt.jsx)("div",{className:"ai-feature-title",children:"Auto-summarize Links"}),(0,xt.jsx)("div",{className:"ai-feature-description",children:"Automatically generate AI summaries for saved links"})]}),(0,xt.jsxs)("label",{className:"toggle-switch",title:"Toggle auto-summarize",children:[(0,xt.jsx)("input",{type:"checkbox",checked:g.autoSummarize,onChange:function(e){return _(ra(ra({},g),{},{autoSummarize:e.target.checked}))},disabled:w,"aria-label":"Auto-summarize links"}),(0,xt.jsx)("span",{className:"toggle-slider"})]})]}),(0,xt.jsxs)("div",{className:"ai-feature-toggle",children:[(0,xt.jsxs)("div",{className:"ai-feature-info",children:[(0,xt.jsx)("div",{className:"ai-feature-title",children:"Auto-tagging"}),(0,xt.jsx)("div",{className:"ai-feature-description",children:"AI suggests relevant tags based on content analysis"})]}),(0,xt.jsxs)("label",{className:"toggle-switch",title:"Toggle auto-tagging",children:[(0,xt.jsx)("input",{type:"checkbox",checked:g.autoTagging||!1,onChange:function(e){return _(ra(ra({},g),{},{autoTagging:e.target.checked}))},disabled:w,"aria-label":"Enable auto-tagging"}),(0,xt.jsx)("span",{className:"toggle-slider"})]})]}),(0,xt.jsxs)("div",{className:"ai-feature-toggle",children:[(0,xt.jsxs)("div",{className:"ai-feature-info",children:[(0,xt.jsx)("div",{className:"ai-feature-title",children:"Auto-categorization"}),(0,xt.jsx)("div",{className:"ai-feature-description",children:"AI automatically suggests appropriate categories for links"})]}),(0,xt.jsxs)("label",{className:"toggle-switch",title:"Toggle auto-categorization",children:[(0,xt.jsx)("input",{type:"checkbox",checked:g.autoCategorization||!1,onChange:function(e){return _(ra(ra({},g),{},{autoCategorization:e.target.checked}))},disabled:w,"aria-label":"Enable auto-categorization"}),(0,xt.jsx)("span",{className:"toggle-slider"})]})]}),(0,xt.jsxs)("div",{className:"ai-api-key-section",children:[(0,xt.jsx)("label",{htmlFor:"openai-api-key",className:"setting-label",children:"OpenAI API Key (Optional)"}),(0,xt.jsx)("input",{id:"openai-api-key",type:"password",value:g.openaiApiKey||"",onChange:function(e){return _(ra(ra({},g),{},{openaiApiKey:e.target.value}))},placeholder:"sk-...",className:"ai-api-key-input",disabled:w}),(0,xt.jsxs)("div",{className:"ai-api-help",children:[(0,xt.jsx)("p",{children:"Provide your OpenAI API key for enhanced AI features. Without it, Nest uses rule-based suggestions."}),(0,xt.jsx)("p",{children:(0,xt.jsx)("a",{href:"https://platform.openai.com/api-keys",target:"_blank",rel:"noopener noreferrer",children:"Get your API key from OpenAI"})})]})]})]}),(0,xt.jsx)("div",{className:"setting-group",children:(0,xt.jsxs)("div",{className:"setting-item",children:[(0,xt.jsx)("div",{className:"setting-info",children:(0,xt.jsxs)("div",{children:[(0,xt.jsx)("div",{className:"setting-label",children:"Default Category"}),(0,xt.jsx)("div",{className:"setting-description",children:"Default category for new links"})]})}),(0,xt.jsxs)("select",{value:g.defaultCategory,onChange:function(e){return _(ra(ra({},g),{},{defaultCategory:e.target.value}))},className:"settings-select",disabled:w,"aria-label":"Default category",children:[(0,xt.jsx)("option",{value:"general",children:"General"}),(0,xt.jsx)("option",{value:"work",children:"Work"}),(0,xt.jsx)("option",{value:"learning",children:"Learning"}),(0,xt.jsx)("option",{value:"personal",children:"Personal"})]})]})})]}),"data"===a&&(0,xt.jsxs)("div",{className:"settings-section",children:[(0,xt.jsx)("h3",{children:"Data Management"}),(0,xt.jsxs)("div",{className:"setting-group",children:[(0,xt.jsxs)("div",{className:"setting-item",children:[(0,xt.jsxs)("div",{className:"setting-info",children:[(0,xt.jsx)(Qr,{size:16}),(0,xt.jsxs)("div",{children:[(0,xt.jsx)("div",{className:"setting-label",children:"Export Data"}),(0,xt.jsx)("div",{className:"setting-description",children:"Download all your links, collections, and tags as JSON"})]})]}),(0,xt.jsx)("button",{onClick:N,className:"settings-button",children:"Export"})]}),(0,xt.jsxs)("div",{className:"setting-item",children:[(0,xt.jsxs)("div",{className:"setting-info",children:[(0,xt.jsx)(kt,{size:16}),(0,xt.jsxs)("div",{children:[(0,xt.jsx)("div",{className:"setting-label",children:"Cleanup Unused Tags"}),(0,xt.jsx)("div",{className:"setting-description",children:"Remove tags that aren't used by any links"})]})]}),(0,xt.jsx)("button",{onClick:T,className:"settings-button",children:"Cleanup"})]})]}),(0,xt.jsxs)("div",{className:"data-usage",children:[(0,xt.jsx)("h4",{children:"Storage Usage"}),(0,xt.jsxs)("div",{className:"usage-items",children:[(0,xt.jsxs)("div",{className:"usage-item",children:[(0,xt.jsx)(Xr,{size:14}),(0,xt.jsxs)("span",{children:[u.linkCount," links"]})]}),(0,xt.jsxs)("div",{className:"usage-item",children:[(0,xt.jsx)(p,{size:14}),(0,xt.jsxs)("span",{children:[u.tagCount," tags"]})]}),(0,xt.jsxs)("div",{className:"usage-item",children:[(0,xt.jsx)(Zr,{size:14}),(0,xt.jsxs)("span",{children:[u.collectionCount," collections"]})]})]})]})]}),"sharing"===a&&(0,xt.jsxs)("div",{className:"settings-section",children:[(0,xt.jsx)("h3",{children:"Sharing & Privacy"}),(0,xt.jsx)("div",{className:"setting-group",children:(0,xt.jsxs)("div",{className:"setting-item",children:[(0,xt.jsx)("div",{className:"setting-info",children:(0,xt.jsxs)("div",{children:[(0,xt.jsx)("div",{className:"setting-label",children:"Default Collection Privacy"}),(0,xt.jsx)("div",{className:"setting-description",children:"Make new collections public by default"})]})}),(0,xt.jsxs)("label",{className:"toggle-switch",title:"Toggle default privacy",children:[(0,xt.jsx)("input",{type:"checkbox",checked:g.defaultPrivacy,onChange:function(e){return _(ra(ra({},g),{},{defaultPrivacy:e.target.checked}))},disabled:w,"aria-label":"Default collection privacy"}),(0,xt.jsx)("span",{className:"toggle-slider"})]})]})}),(0,xt.jsxs)("div",{className:"sharing-stats",children:[(0,xt.jsx)("h4",{children:"Sharing Analytics"}),(0,xt.jsxs)("div",{className:"stats-row",children:[(0,xt.jsxs)("div",{className:"stat-item",children:[(0,xt.jsx)(Qt,{size:16}),(0,xt.jsxs)("span",{children:[u.publicCollections," public collections"]})]}),(0,xt.jsxs)("div",{className:"stat-item",children:[(0,xt.jsx)(Zr,{size:16}),(0,xt.jsxs)("span",{children:[u.totalViews," total views"]})]})]})]})]}),"about"===a&&(0,xt.jsxs)("div",{className:"settings-section",children:[(0,xt.jsx)("h3",{children:"About Nest"}),(0,xt.jsxs)("div",{className:"about-info",children:[(0,xt.jsxs)("div",{className:"app-info",children:[(0,xt.jsx)("div",{className:"app-logo",children:"N"}),(0,xt.jsxs)("div",{children:[(0,xt.jsx)("div",{className:"app-name",children:"Nest - Smart Bookmarks & Notes"}),(0,xt.jsx)("div",{className:"app-version",children:"Version 1.0.0"})]})]}),(0,xt.jsx)("p",{className:"app-description",children:"Nest is a powerful browser extension that helps you save, organize, and share your bookmarks with AI-powered summaries, flexible tagging, and beautiful collections."})]}),(0,xt.jsxs)("div",{className:"support-links",children:[(0,xt.jsx)("h4",{children:"Support & Resources"}),(0,xt.jsxs)("div",{className:"link-grid",children:[(0,xt.jsxs)("a",{href:"https://github.com",target:"_blank",rel:"noopener",className:"support-link",children:[(0,xt.jsx)(bt,{size:16}),(0,xt.jsx)("span",{children:"Documentation"})]}),(0,xt.jsxs)("a",{href:"https://github.com/issues",target:"_blank",rel:"noopener",className:"support-link",children:[(0,xt.jsx)(ea,{size:16}),(0,xt.jsx)("span",{children:"Report Issues"})]}),(0,xt.jsxs)("a",{href:"mailto:support@nest.dev",className:"support-link",children:[(0,xt.jsx)(Kr,{size:16}),(0,xt.jsx)("span",{children:"Contact Support"})]})]})]}),(0,xt.jsxs)("div",{className:"credits",children:[(0,xt.jsx)("p",{children:"Built with ❤️ by the Nest team"}),(0,xt.jsx)("p",{children:"Powered by Supabase, React, and Chrome Extensions API"})]})]})]})]}),x&&(0,xt.jsx)("div",{className:"settings-message ".concat(x.includes("Failed")?"error":"success"),children:x}),(0,xt.jsx)("div",{className:"modal-footer",children:(0,xt.jsx)("button",{onClick:n,className:"modal-button secondary",children:"Close"})})]})})};var ha=t(72),fa=t.n(ha),pa=t(206),ga=t.n(pa),va=t(659),ma=t.n(va),Aa=t(56),ya=t.n(Aa),ba=t(159),wa=t.n(ba),Ca=t(113),ka=t.n(Ca),xa=t(182),Ea={};function Ba(e){return Ba="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ba(e)}function ja(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function Sa(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ja(Object(t),!0).forEach(function(n){_a(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ja(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function _a(e,n,t){return(n=function(e){var n=function(e){if("object"!=Ba(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=Ba(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Ba(n)?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Na(){var e,n,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",a=t.toStringTag||"@@toStringTag";function o(t,r,a,o){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Ta(c,"_invoke",function(t,r,a){var o,s,l,c=0,u=a||[],d=!1,h={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(n,t){return o=n,s=0,l=e,h.n=t,i}};function f(t,r){for(s=t,l=r,n=0;!d&&c&&!a&&n<u.length;n++){var a,o=u[n],f=h.p,p=o[2];t>3?(a=p===r)&&(l=o[(s=o[4])?5:(s=3,3)],o[4]=o[5]=e):o[0]<=f&&((a=t<2&&f<o[1])?(s=0,h.v=r,h.n=o[1]):f<p&&(a=t<3||o[0]>r||r>p)&&(o[4]=t,o[5]=r,h.n=p,s=0))}if(a||t>1)return i;throw d=!0,r}return function(a,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(n=s<2?e:l)||!d;){o||(s?s<3?(s>1&&(h.n=-1),f(s,l)):h.n=l:h.v=l);try{if(c=2,o){if(s||(a="next"),n=o[a]){if(!(n=n.call(o,l)))throw TypeError("iterator result is not an object");if(!n.done)return n;l=n.value,s<2&&(s=0)}else 1===s&&(n=o.return)&&n.call(o),s<2&&(l=TypeError("The iterator does not provide a '"+a+"' method"),s=1);o=e}else if((n=(d=h.n<0)?l:t.call(r,h))!==i)break}catch(n){o=e,s=1,l=n}finally{c=1}}return{value:n,done:d}}}(t,a,o),!0),c}var i={};function s(){}function l(){}function c(){}n=Object.getPrototypeOf;var u=[][r]?n(n([][r]())):(Ta(n={},r,function(){return this}),n),d=c.prototype=s.prototype=Object.create(u);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,Ta(e,a,"GeneratorFunction")),e.prototype=Object.create(d),e}return l.prototype=c,Ta(d,"constructor",c),Ta(c,"constructor",l),l.displayName="GeneratorFunction",Ta(c,a,"GeneratorFunction"),Ta(d),Ta(d,a,"Generator"),Ta(d,r,function(){return this}),Ta(d,"toString",function(){return"[object Generator]"}),(Na=function(){return{w:o,m:h}})()}function Ta(e,n,t,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Ta=function(e,n,t,r){if(n)a?a(e,n,{value:t,enumerable:!r,configurable:!r,writable:!r}):e[n]=t;else{var o=function(n,t){Ta(e,n,function(e){return this._invoke(n,t,e)})};o("next",0),o("throw",1),o("return",2)}},Ta(e,n,t,r)}function Oa(e,n,t,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void t(e)}s.done?n(l):Promise.resolve(l).then(r,a)}function Pa(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var o=e.apply(n,t);function i(e){Oa(o,r,a,i,s,"next",e)}function s(e){Oa(o,r,a,i,s,"throw",e)}i(void 0)})}}function za(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,n)||Ia(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ia(e,n){if(e){if("string"==typeof e)return La(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?La(e,n):void 0}}function La(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}Ea.styleTagTransform=ka(),Ea.setAttributes=ya(),Ea.insert=ma().bind(null,"head"),Ea.domAPI=ga(),Ea.insertStyleElement=wa(),fa()(xa.A,Ea),xa.A&&xa.A.locals&&xa.A.locals;const Ra=function(){var e=za((0,r.useState)({links:[],collections:[],categories:[],settings:{defaultCategory:"general",autoSummarize:!0}}),2),n=e[0],t=e[1],a=za((0,r.useState)(""),2),o=a[0],i=a[1],C=za((0,r.useState)([]),2),k=C[0],x=C[1],E=za((0,r.useState)(!1),2),B=E[0],j=E[1],S=za((0,r.useState)(!1),2),_=S[0],N=S[1],T=za((0,r.useState)(null),2),O=T[0],P=T[1],z=za((0,r.useState)([]),2),I=z[0],L=z[1],R=za((0,r.useState)([]),2),D=R[0],M=R[1],U=za((0,r.useState)(!1),2),F=U[0],$=U[1],q=za((0,r.useState)({inbox:!0,holdingArea:!0,collections:!0}),2),W=q[0],H=q[1],V=za((0,r.useState)(null),2),Y=V[0],G=V[1],K=za((0,r.useState)(!1),2),J=K[0],Q=K[1],X=za((0,r.useState)(!1),2),Z=X[0],ee=X[1],ne=za((0,r.useState)(!1),2),te=ne[0],re=ne[1],ae=za((0,r.useState)(!0),2),oe=ae[0],ie=ae[1],se=za((0,r.useState)(null),2),le=se[0],ce=se[1],ue=za((0,r.useState)(""),2),de=ue[0],he=ue[1],fe=za((0,r.useState)(!1),2),pe=fe[0],ge=fe[1],ve=za((0,r.useState)(""),2),me=ve[0],Ae=ve[1],ye=za((0,r.useState)([]),2),be=ye[0],we=ye[1],Ce=za((0,r.useState)([]),2),ke=Ce[0],xe=Ce[1],Ee=za((0,r.useState)(!1),2),Be=Ee[0],je=Ee[1],Se=za((0,r.useState)(!1),2),_e=Se[0],Ne=Se[1],Te=za((0,r.useState)(!1),2),Oe=Te[0],Pe=Te[1];(0,r.useEffect)(function(){it.auth.getSession().then(function(e){var n=e.data.session;ce(n),n&&(Le(),De())});var e=it.auth.onAuthStateChange(function(e,n){console.log("Auth state changed:",e,n),ce(n),n&&(Le(),De())}),n=e.data.subscription,t=function(e,n,t){"refreshSidebar"===e.action&&(console.log("Sidebar: Received refresh request"),Le(),Re(),De(),t({success:!0}))};return chrome.runtime.onMessage.addListener(t),function(){n.unsubscribe(),chrome.runtime.onMessage.removeListener(t)}},[]),(0,r.useEffect)(function(){Le()},[]),(0,r.useEffect)(function(){var e=function(e){(e.metaKey||e.ctrlKey)&&"k"===e.key&&(e.preventDefault(),Ne(!0))};return document.addEventListener("keydown",e),function(){return document.removeEventListener("keydown",e)}},[]);var ze,Ie,Le=function(){var e=Pa(Na().m(function e(){var n,r;return Na().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.getData();case 1:return n=e.v,t(n),e.n=2,Re();case 2:e.n=4;break;case 3:e.p=3,r=e.v,console.error("Failed to load data:",r);case 4:return e.p=4,ie(!1),e.f(4);case 5:return e.a(2)}},e,null,[[0,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),Re=function(){var e=Pa(Na().m(function e(){var n,t;return Na().w(function(e){for(;;)switch(e.n){case 0:return je(!0),e.p=1,e.n=2,yt.getInboxLinks();case 2:n=e.v,we(n),e.n=4;break;case 3:e.p=3,t=e.v,console.error("Failed to load inbox links:",t);case 4:return e.p=4,je(!1),e.f(4);case 5:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),De=function(){var e=Pa(Na().m(function e(){var n,t;return Na().w(function(e){for(;;)switch(e.n){case 0:return $(!0),e.p=1,e.n=2,yt.getUserTags();case 2:n=e.v,M(n),e.n=4;break;case 3:e.p=3,t=e.v,console.error("Failed to load user tags:",t);case 4:return e.p=4,$(!1),e.f(4);case 5:return e.a(2)}},e,null,[[1,3,4,5]])}));return function(){return e.apply(this,arguments)}}(),Me=function(){var e=Pa(Na().m(function e(n){var t,r;return Na().w(function(e){for(;;)switch(e.n){case 0:if(n!==O){e.n=1;break}return P(null),L([]),e.a(2);case 1:if(P(n),!n){e.n=6;break}return e.p=2,e.n=3,yt.getLinksByTag(n);case 3:t=e.v,L(t),e.n=5;break;case 4:e.p=4,r=e.v,console.error("Failed to load links by tag:",r),L([]);case 5:e.n=7;break;case 6:L([]);case 7:n&&_&&tn();case 8:return e.a(2)}},e,null,[[2,4]])}));return function(n){return e.apply(this,arguments)}}(),Ue=function(){De(),O&&Me(O)},Fe=function(e){H(function(n){return Sa(Sa({},n),{},_a({},e,!n[e]))})},$e=function(){var e=Pa(Na().m(function e(){var n;return Na().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if(!e.v[0]){e.n=4;break}return e.n=2,chrome.runtime.sendMessage({action:"saveCurrentPage"});case 2:return e.n=3,Le();case 3:return e.n=4,De();case 4:e.n=6;break;case 5:e.p=5,n=e.v,console.error("Failed to save page:",n);case 6:return e.a(2)}},e,null,[[0,5]])}));return function(){return e.apply(this,arguments)}}(),qe=function(){var e=Pa(Na().m(function e(n,t){var r;return Na().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.updateLink(n,t);case 1:return e.n=2,Le();case 2:e.n=4;break;case 3:e.p=3,r=e.v,console.error("Failed to update link:",r);case 4:return e.a(2)}},e,null,[[0,3]])}));return function(n,t){return e.apply(this,arguments)}}(),We=function(){var e=Pa(Na().m(function e(n){var t;return Na().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.deleteLink(n);case 1:return e.n=2,Le();case 2:return e.n=3,De();case 3:O&&Me(O),e.n=5;break;case 4:e.p=4,t=e.v,console.error("Failed to delete link:",t);case 5:return e.a(2)}},e,null,[[0,4]])}));return function(n){return e.apply(this,arguments)}}(),He=function(){var e=Pa(Na().m(function e(n,t){var r;return Na().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.updateLink(n,{collectionId:t});case 1:return e.n=2,Le();case 2:e.n=4;break;case 3:e.p=3,r=e.v,console.error("Failed to move link:",r);case 4:return e.a(2)}},e,null,[[0,3]])}));return function(n,t){return e.apply(this,arguments)}}(),Ve=function(e){G(e),Q(!0)},Ye=function(){var e=Pa(Na().m(function e(n){return Na().w(function(e){for(;;)switch(e.n){case 0:if(!Y){e.n=1;break}return e.n=1,qe(Y.id,{userNote:n});case 1:Q(!1),G(null);case 2:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}(),Ge=function(){var e=Pa(Na().m(function e(n,t){var r,a;return Na().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,r={id:Date.now().toString(),name:n,description:t,createdAt:new Date,updatedAt:new Date},e.n=1,yt.addCollection(r);case 1:return e.n=2,Le();case 2:e.n=4;break;case 3:e.p=3,a=e.v,console.error("Failed to create collection:",a);case 4:ee(!1);case 5:return e.a(2)}},e,null,[[0,3]])}));return function(n,t){return e.apply(this,arguments)}}(),Ke=function(){var e=Pa(Na().m(function e(n,t){var r;return Na().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,yt.moveFromInbox(n,t);case 1:return e.n=2,Re();case 2:return e.n=3,Le();case 3:xe(function(e){return e.filter(function(e){return e!==n})}),e.n=5;break;case 4:e.p=4,r=e.v,console.error("Failed to move link from inbox:",r);case 5:return e.a(2)}},e,null,[[0,4]])}));return function(n,t){return e.apply(this,arguments)}}(),Je=function(e){xe(function(n){return n.includes(e)?n.filter(function(n){return n!==e}):[].concat(function(e){if(Array.isArray(e))return La(e)}(t=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||Ia(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]);var t})},Qe=function(){var e=Pa(Na().m(function e(n){var t;return Na().w(function(e){for(;;)switch(e.n){case 0:if(0!==ke.length){e.n=1;break}return e.a(2);case 1:return e.p=1,e.n=2,yt.bulkMoveFromInbox(ke,n);case 2:return e.n=3,Re();case 3:return e.n=4,Le();case 4:xe([]),e.n=6;break;case 5:e.p=5,t=e.v,console.error("Failed to bulk move links from inbox:",t);case 6:return e.a(2)}},e,null,[[1,5]])}));return function(n){return e.apply(this,arguments)}}(),Xe=function(){var e=Pa(Na().m(function e(n,t,r){var a;return Na().w(function(e){for(;;)switch(e.n){case 0:return a=n.map(function(){var e=Pa(Na().m(function e(n){var a;return Na().w(function(e){for(;;)switch(e.n){case 0:return a={url:n.url,title:n.title,favicon:n.favicon||"https://www.google.com/s2/favicons?domain=".concat(n.domain,"&sz=32"),userNote:"",aiSummary:"",category:"general",domain:n.domain,isInInbox:r||!1,collectionId:r?void 0:t},e.n=1,yt.addLink(a);case 1:return e.a(2,e.v)}},e)}));return function(n){return e.apply(this,arguments)}}()),e.n=1,Promise.all(a);case 1:return e.n=2,Le();case 2:return e.n=3,Re();case 3:chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Tabs Saved to Nest",message:"Saved ".concat(n.length," tab(s) ").concat(r?"to inbox":t?"to collection":"to holding area")});case 4:return e.a(2)}},e)}));return function(n,t,r){return e.apply(this,arguments)}}(),Ze=function(){var e=Pa(Na().m(function e(n){var t,r,a;return Na().w(function(e){for(;;)switch(e.n){case 0:return n.preventDefault(),ge(!0),Ae(""),t=chrome.runtime.getURL("auth.html"),console.log("Redirecting to:",t),e.n=1,it.auth.signInWithOtp({email:de,options:{emailRedirectTo:t}});case 1:r=e.v,a=r.error,Ae(a?a.message:"Check your email for the login link!"),ge(!1);case 2:return e.a(2)}},e)}));return function(n){return e.apply(this,arguments)}}(),en=function(){var e=Pa(Na().m(function e(){return Na().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,it.auth.signOut();case 1:return e.a(2)}},e)}));return function(){return e.apply(this,arguments)}}(),nn=(0,r.useCallback)((ze=function(){var e=Pa(Na().m(function e(n){var t,r;return Na().w(function(e){for(;;)switch(e.n){case 0:if(n.trim()){e.n=1;break}return x([]),N(!1),j(!1),e.a(2);case 1:return j(!0),e.p=2,e.n=3,yt.searchLinks(n);case 3:t=e.v,x(t),N(!0),O&&(P(null),L([])),e.n=5;break;case 4:e.p=4,r=e.v,console.error("Search failed:",r),x([]);case 5:return e.p=5,j(!1),e.f(5);case 6:return e.a(2)}},e,null,[[2,4,5,6]])}));return function(n){return e.apply(this,arguments)}}(),function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];clearTimeout(Ie),Ie=setTimeout(function(){return ze.apply(void 0,n)},300)}),[O]),tn=function(){i(""),x([]),N(!1),j(!1)},rn=function(){tn(),P(null),L([])},an=_||O?[]:n.links.filter(function(e){return!e.isInInbox}),on=an.filter(function(e){return!e.collectionId});return le?oe?(0,xt.jsx)("div",{className:"sidepanel loading",children:(0,xt.jsx)("div",{className:"loading-spinner",children:"Loading..."})}):(0,xt.jsxs)("div",{className:"sidepanel",children:[(0,xt.jsxs)("div",{className:"header",children:[(0,xt.jsxs)("div",{className:"header-title",children:[(0,xt.jsx)(s,{className:"header-icon"}),(0,xt.jsx)("h1",{children:"Nest"})]}),(0,xt.jsxs)("div",{className:"header-actions",children:[(0,xt.jsx)("button",{onClick:function(){return Pe(!0)},className:"tab-sync-button",title:"Tab Sync Mode",children:(0,xt.jsx)(l,{size:18})}),(0,xt.jsx)("button",{onClick:$e,className:"save-button",title:"Save current page",children:(0,xt.jsx)(c,{size:18})}),(0,xt.jsx)("button",{onClick:en,className:"logout-button",title:"Logout",children:(0,xt.jsx)(u,{size:18})})]})]}),(0,xt.jsxs)("div",{className:"search-container",children:[(0,xt.jsx)(d,{className:"search-icon",size:16}),(0,xt.jsx)("input",{type:"text",placeholder:"Search your links... (⌘K for power mode)",value:o,onChange:function(e){var n=e.target.value;i(n),nn(n)},className:"search-input",onFocus:function(){}}),o&&(0,xt.jsx)("button",{onClick:tn,className:"search-clear",title:"Clear search",children:(0,xt.jsx)(h,{size:16})}),B&&(0,xt.jsx)("div",{className:"search-spinner",children:"⟳"}),!o&&!B&&(0,xt.jsxs)("button",{onClick:function(){return Ne(!0)},className:"command-hint-button",title:"Open command palette (⌘K)",children:[(0,xt.jsx)(f,{size:14}),(0,xt.jsx)("span",{children:"Or press ⌘K for quick access"})]})]}),D.length>0&&(0,xt.jsx)(Hr,{tags:D,selectedTag:O,onTagSelect:Me,loading:F}),(0,xt.jsx)("div",{className:"content",children:_?(0,xt.jsxs)("div",{className:"search-results",children:[(0,xt.jsxs)("div",{className:"search-results-header",children:[(0,xt.jsxs)("h3",{children:["Search Results (",k.length,")"]}),(0,xt.jsx)("button",{onClick:rn,className:"clear-search-btn",children:"Show All Links"})]}),0!==k.length||B?k.map(function(e){return(0,xt.jsx)(dr,{link:e,collections:n.collections,onUpdate:qe,onDelete:We,onMoveToCollection:He,onAddNote:Ve,onTagsUpdated:Ue},e.id)}):(0,xt.jsx)("div",{className:"no-results",children:(0,xt.jsxs)("p",{children:['No links found for "',o,'"']})})]}):O?(0,xt.jsxs)("div",{className:"tag-results",children:[(0,xt.jsxs)("div",{className:"tag-results-header",children:[(0,xt.jsxs)("h3",{children:[(0,xt.jsx)(p,{size:16}),'Tagged with "',O,'" (',I.length,")"]}),(0,xt.jsx)("button",{onClick:rn,className:"clear-search-btn",children:"Show All Links"})]}),0===I.length?(0,xt.jsx)("div",{className:"no-results",children:(0,xt.jsxs)("p",{children:['No links found with tag "',O,'"']})}):I.map(function(e){return(0,xt.jsx)(qt,{link:e,collections:n.collections,onUpdate:qe,onDelete:We,onMoveToCollection:He,onAddNote:Ve,onTagsUpdated:Ue},e.id)})]}):(0,xt.jsxs)(xt.Fragment,{children:[(0,xt.jsxs)("div",{className:"section inbox-section",children:[(0,xt.jsxs)("div",{className:"inbox-section-header",children:[(0,xt.jsxs)("div",{className:"inbox-section-title",children:[(0,xt.jsxs)("button",{onClick:function(){return Fe("inbox")},className:"section-header",style:{padding:0,background:"none",border:"none"},children:[W.inbox?(0,xt.jsx)(g,{size:16}):(0,xt.jsx)(v,{size:16}),(0,xt.jsx)(m,{size:16}),(0,xt.jsx)("span",{children:"Inbox"})]}),(0,xt.jsx)("span",{className:"inbox-count",children:be.length})]}),be.length>0&&(0,xt.jsxs)("div",{className:"inbox-actions",children:[(0,xt.jsxs)("button",{onClick:function(){ke.length===be.length?xe([]):xe(be.map(function(e){return e.id}))},className:"inbox-action-button",title:ke.length===be.length?"Deselect all":"Select all",children:[(0,xt.jsx)(A,{size:14}),ke.length===be.length?"Deselect All":"Select All"]}),ke.length>0&&(0,xt.jsxs)(xt.Fragment,{children:[(0,xt.jsxs)("button",{onClick:function(){return Qe()},className:"inbox-action-button",title:"Move selected to holding area",children:[(0,xt.jsx)(y,{size:14}),"Move to Holding (",ke.length,")"]}),(0,xt.jsxs)("select",{onChange:function(e){e.target.value&&(Qe(e.target.value),e.target.value="")},className:"inbox-action-button",style:{padding:"6px 8px"},title:"Move selected links to collection","aria-label":"Move selected links to collection",children:[(0,xt.jsx)("option",{value:"",children:"Move to Collection..."}),n.collections.map(function(e){return(0,xt.jsx)("option",{value:e.id,children:e.name},e.id)})]})]})]})]}),W.inbox&&(0,xt.jsx)("div",{className:"section-content",children:Be?(0,xt.jsx)("div",{className:"loading-spinner",children:"Loading inbox..."}):0===be.length?(0,xt.jsxs)("div",{className:"inbox-empty",children:[(0,xt.jsx)(m,{className:"inbox-empty-icon"}),(0,xt.jsx)("h3",{children:"Inbox is empty"}),(0,xt.jsx)("p",{children:"New saves will appear here for quick organization"})]}):be.map(function(e){return(0,xt.jsx)(Er,{link:e,collections:n.collections,onMoveFromInbox:Ke,onDelete:We,onUpdate:qe,onAddNote:Ve,onTagsUpdated:Ue,isSelected:ke.includes(e.id),onSelect:Je},e.id)})})]}),(0,xt.jsxs)("div",{className:"section",children:[(0,xt.jsxs)("button",{onClick:function(){return Fe("holdingArea")},className:"section-header",children:[W.holdingArea?(0,xt.jsx)(g,{size:16}):(0,xt.jsx)(v,{size:16}),(0,xt.jsx)("span",{children:"Holding Area"}),(0,xt.jsx)("span",{className:"count",children:on.length})]}),W.holdingArea&&(0,xt.jsx)("div",{className:"section-content",children:0===on.length?(0,xt.jsxs)("div",{className:"empty-state",children:[(0,xt.jsx)("p",{children:"No links saved yet"}),(0,xt.jsx)("button",{onClick:$e,className:"empty-action",children:"Save current page"})]}):on.map(function(e){return(0,xt.jsx)(qt,{link:e,collections:n.collections,onUpdate:qe,onDelete:We,onMoveToCollection:He,onAddNote:Ve,onTagsUpdated:Ue},e.id)})})]}),(0,xt.jsxs)("div",{className:"section",children:[(0,xt.jsxs)("button",{onClick:function(){return Fe("collections")},className:"section-header",children:[W.collections?(0,xt.jsx)(g,{size:16}):(0,xt.jsx)(v,{size:16}),(0,xt.jsx)("span",{children:"Collections"}),(0,xt.jsx)("span",{className:"count",children:n.collections.length}),(0,xt.jsx)("button",{onClick:function(e){e.stopPropagation(),ee(!0)},className:"add-collection-button",title:"Create new collection",children:(0,xt.jsx)(b,{size:14})})]}),W.collections&&(0,xt.jsx)("div",{className:"section-content",children:0===n.collections.length?(0,xt.jsxs)("div",{className:"empty-state",children:[(0,xt.jsx)("p",{children:"No collections yet"}),(0,xt.jsx)("button",{onClick:function(){return ee(!0)},className:"empty-action",children:"Create collection"})]}):n.collections.map(function(e){var n,t=(n=e.id,an.filter(function(e){return e.collectionId===n}));return(0,xt.jsx)(ur,{collection:e,links:t,onUpdateLink:qe,onDeleteLink:We,onAddNote:Ve,onTagsUpdated:Ue,onUpdate:Le},e.id)})})]})]})}),(0,xt.jsxs)("div",{className:"footer",children:[(0,xt.jsx)("button",{onClick:function(){return re(!0)},className:"footer-button",title:"Settings",children:(0,xt.jsx)(w,{size:16})}),(0,xt.jsxs)("span",{className:"footer-text",children:[n.links.length," links • ",D.length," tags"]})]}),J&&Y&&(0,xt.jsx)(Fr,{link:Y,onSave:Ye,onClose:function(){Q(!1),G(null)}}),Z&&(0,xt.jsx)(Wr,{onSave:Ge,onClose:function(){return ee(!1)}}),te&&(0,xt.jsx)(da,{onClose:function(){return re(!1)}}),(0,xt.jsx)(_r,{isOpen:_e,onClose:function(){return Ne(!1)},links:n.links,collections:n.collections,onOpenLink:function(e){window.open(e,"_blank")},onAddToCollection:He,onCreateCollection:function(){ee(!0)},onSaveCurrentPage:$e,onAddNote:Ve,onOpenTabSync:function(){return Pe(!0)}}),(0,xt.jsx)(Mr,{isOpen:Oe,onClose:function(){return Pe(!1)},collections:n.collections,onSaveTabs:Xe})]}):(0,xt.jsxs)("div",{className:"sidepanel auth-container",children:[(0,xt.jsx)("div",{className:"header",children:(0,xt.jsxs)("div",{className:"header-title",children:[(0,xt.jsx)(s,{className:"header-icon"}),(0,xt.jsx)("h1",{children:"Nest"})]})}),(0,xt.jsxs)("div",{className:"auth-form",children:[(0,xt.jsx)("h2",{children:"Sign In"}),(0,xt.jsx)("p",{children:"Enter your email to receive a magic login link."}),(0,xt.jsxs)("form",{onSubmit:Ze,children:[(0,xt.jsx)("input",{type:"email",placeholder:"Your email",value:de,onChange:function(e){return he(e.target.value)},className:"auth-input"}),(0,xt.jsx)("button",{type:"submit",className:"auth-button",disabled:pe,children:pe?"Sending...":"Send Magic Link"})]}),me&&(0,xt.jsx)("p",{className:"auth-message",children:me})]})]})};var Da=document.getElementById("root");(0,a.H)(Da).render((0,xt.jsx)(Ra,{}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,