/*! For license information please see sidepanel.js.LICENSE.txt */
(()=>{"use strict";var n={20:(n,e,t)=>{var r=t(540),o=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(n,e,t){var r,i={},c=null,u=null;for(r in void 0!==t&&(c=""+t),void 0!==e.key&&(c=""+e.key),void 0!==e.ref&&(u=e.ref),e)a.call(e,r)&&!l.hasOwnProperty(r)&&(i[r]=e[r]);if(n&&n.defaultProps)for(r in e=n.defaultProps)void 0===i[r]&&(i[r]=e[r]);return{$$typeof:o,type:n,key:c,ref:u,props:i,_owner:s.current}}e.Fragment=i,e.jsx=c,e.jsxs=c},45:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(825));e.default=class{constructor(n,{headers:e={},schema:t,fetch:r}){this.url=n,this.headers=e,this.schema=t,this.fetch=r}select(n,{head:e=!1,count:t}={}){const r=e?"HEAD":"GET";let i=!1;const a=(null!=n?n:"*").split("").map(n=>/\s/.test(n)&&!i?"":('"'===n&&(i=!i),n)).join("");return this.url.searchParams.set("select",a),t&&(this.headers.Prefer=`count=${t}`),new o.default({method:r,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(n,{count:e,defaultToNull:t=!0}={}){const r=[];if(this.headers.Prefer&&r.push(this.headers.Prefer),e&&r.push(`count=${e}`),t||r.push("missing=default"),this.headers.Prefer=r.join(","),Array.isArray(n)){const e=n.reduce((n,e)=>n.concat(Object.keys(e)),[]);if(e.length>0){const n=[...new Set(e)].map(n=>`"${n}"`);this.url.searchParams.set("columns",n.join(","))}}return new o.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:n,fetch:this.fetch,allowEmpty:!1})}upsert(n,{onConflict:e,ignoreDuplicates:t=!1,count:r,defaultToNull:i=!0}={}){const a=[`resolution=${t?"ignore":"merge"}-duplicates`];if(void 0!==e&&this.url.searchParams.set("on_conflict",e),this.headers.Prefer&&a.push(this.headers.Prefer),r&&a.push(`count=${r}`),i||a.push("missing=default"),this.headers.Prefer=a.join(","),Array.isArray(n)){const e=n.reduce((n,e)=>n.concat(Object.keys(e)),[]);if(e.length>0){const n=[...new Set(e)].map(n=>`"${n}"`);this.url.searchParams.set("columns",n.join(","))}}return new o.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:n,fetch:this.fetch,allowEmpty:!1})}update(n,{count:e}={}){const t=[];return this.headers.Prefer&&t.push(this.headers.Prefer),e&&t.push(`count=${e}`),this.headers.Prefer=t.join(","),new o.default({method:"PATCH",url:this.url,headers:this.headers,schema:this.schema,body:n,fetch:this.fetch,allowEmpty:!1})}delete({count:n}={}){const e=[];return n&&e.push(`count=${n}`),this.headers.Prefer&&e.unshift(this.headers.Prefer),this.headers.Prefer=e.join(","),new o.default({method:"DELETE",url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],u=i[c]||0,d="".concat(c," ").concat(u);i[c]=u+1;var A=t(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)e[A].references++,e[A].updater(f);else{var p=o(f,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var l=r(n,o),c=0;c<i.length;c++){var u=t(i[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=l}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},159:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},182:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([n.id,"/* Reset and base styles */\n* {\n  box-sizing: border-box;\n}\n\n.sidepanel {\n  width: 100%;\n  height: 100vh;\n  background: #ffffff;\n  display: flex;\n  flex-direction: column;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n  overflow: hidden;\n}\n\n/* Header */\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e5e7eb;\n  background: #ffffff;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n}\n\n.header-title {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.header-title h1 {\n  margin: 0;\n  font-size: 20px;\n  font-weight: 600;\n  color: #111827;\n}\n\n.header-icon {\n  color: #3b82f6;\n  width: 20px;\n  height: 20px;\n}\n\n.save-button {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s;\n}\n\n.save-button:hover {\n  background: #2563eb;\n}\n\n/* Enhanced Search Styles */\n.search-container {\n  position: relative;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.search-icon {\n  position: absolute;\n  left: 32px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #6b7280;\n  pointer-events: none;\n}\n\n.search-input {\n  width: 100%;\n  padding: 10px 12px 10px 36px;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  font-size: 14px;\n  background: #f9fafb;\n  transition: border-color 0.2s, background-color 0.2s;\n  padding-right: 60px; /* Space for clear button and spinner */\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  background: white;\n}\n\n.search-clear {\n  position: absolute;\n  right: 40px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.search-clear:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.search-spinner {\n  position: absolute;\n  right: 24px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #3b82f6;\n  font-size: 16px;\n  animation: spin 1s linear infinite;\n}\n\n.search-power-mode {\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  color: #9ca3af;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.search-power-mode:hover {\n  color: #3b82f6;\n  background: #f3f4f6;\n}\n\n@keyframes spin {\n  from { transform: translateY(-50%) rotate(0deg); }\n  to { transform: translateY(-50%) rotate(360deg); }\n}\n\n/* Search Results Styles */\n.search-results {\n  padding: 16px 0;\n}\n\n.search-results-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 20px 16px;\n  border-bottom: 1px solid #e5e7eb;\n  margin-bottom: 16px;\n}\n\n.search-results-header h3 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0;\n}\n\n.clear-search-btn {\n  padding: 6px 12px;\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  color: #374151;\n  font-size: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.clear-search-btn:hover {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.no-results {\n  text-align: center;\n  padding: 40px 20px;\n  color: #6b7280;\n}\n\n/* Search Result Card Styles */\n.search-result-card {\n  position: relative;\n  margin-bottom: 16px;\n}\n\n.search-rank-indicator {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  background: #3b82f6;\n  color: white;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n  font-weight: 500;\n  z-index: 10;\n}\n\n.search-result-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.search-result-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.search-result-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.search-result-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.search-result-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  cursor: pointer;\n  line-height: 1.4;\n  word-wrap: break-word;\n  transition: color 0.2s;\n}\n\n.search-result-title:hover {\n  color: #3b82f6;\n}\n\n.search-result-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #6b7280;\n  flex-wrap: wrap;\n}\n\n.search-result-domain {\n  font-weight: 500;\n}\n\n.search-result-date::before {\n  content: '•';\n  margin-right: 8px;\n}\n\n.search-result-rank {\n  background: #eff6ff;\n  color: #1d4ed8;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 11px;\n  font-weight: 500;\n}\n\n.search-result-rank::before {\n  content: '•';\n  margin-right: 8px;\n  color: #6b7280;\n}\n\n.search-result-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n/* Search headline with highlighting */\n.search-headline {\n  background: #fffbeb;\n  border: 1px solid #fed7aa;\n  border-radius: 6px;\n  padding: 8px 12px;\n  margin-bottom: 8px;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #92400e;\n}\n\n.search-headline mark {\n  background: #fbbf24;\n  color: #92400e;\n  padding: 1px 2px;\n  border-radius: 2px;\n}\n\n.search-result-category {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n/* Content */\n.content {\n  flex: 1;\n  overflow-y: auto;\n  padding: 0 20px 20px;\n}\n\n/* Sections */\n.section {\n  margin-bottom: 24px;\n}\n\n.section-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 0;\n  background: none;\n  border: none;\n  font-size: 16px;\n  font-weight: 600;\n  color: #374151;\n  cursor: pointer;\n  text-align: left;\n  transition: color 0.2s;\n}\n\n.section-header:hover {\n  color: #111827;\n}\n\n.section-header .count {\n  margin-left: auto;\n  background: #f3f4f6;\n  color: #6b7280;\n  font-size: 12px;\n  font-weight: 500;\n  padding: 2px 8px;\n  border-radius: 12px;\n}\n\n.add-collection-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.add-collection-button:hover {\n  color: #3b82f6;\n  background: #f3f4f6;\n}\n\n.section-content {\n  margin-top: 8px;\n}\n\n/* Link Cards */\n.link-card {\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 12px;\n  transition: border-color 0.2s, box-shadow 0.2s;\n}\n\n.link-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.link-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.link-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.favicon-placeholder {\n  width: 16px;\n  height: 16px;\n  border-radius: 2px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 10px;\n  font-weight: 600;\n}\n\n.link-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  cursor: pointer;\n  line-height: 1.4;\n  word-wrap: break-word;\n  transition: color 0.2s;\n}\n\n.link-title:hover {\n  color: #3b82f6;\n}\n\n.link-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #6b7280;\n}\n\n.link-domain {\n  font-weight: 500;\n}\n\n.link-date::before {\n  content: '•';\n  margin-right: 8px;\n}\n\n.link-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.action-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.action-button:hover {\n  background-color: #f3f4f6;\n}\n\n/* Dropdown */\n.dropdown {\n  position: relative;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  z-index: 50;\n  min-width: 160px;\n  padding: 4px;\n}\n\n.dropdown-menu button {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 8px 12px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #374151;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n}\n\n.dropdown-menu button:hover {\n  background: #f3f4f6;\n}\n\n.dropdown-menu button.delete-action {\n  color: #dc2626;\n}\n\n.dropdown-menu button.delete-action:hover {\n  background: #fef2f2;\n}\n\n/* Collections menu */\n.collections-menu {\n  background: #f9fafb;\n  border: 1px solid #e5e7eb;\n  border-radius: 6px;\n  padding: 8px;\n  margin-top: 8px;\n}\n\n.collections-header {\n  font-size: 12px;\n  font-weight: 600;\n  color: #6b7280;\n  margin-bottom: 4px;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.collection-option {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 6px 8px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 13px;\n  color: #374151;\n  transition: background-color 0.2s;\n}\n\n.collection-option:hover {\n  background: white;\n}\n\n/* Link content */\n.link-note, .link-summary {\n  margin-bottom: 8px;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #4b5563;\n}\n\n.link-note strong, .link-summary strong {\n  color: #374151;\n  font-weight: 600;\n}\n\n.link-category {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.category-badge {\n  background: #f3f4f6;\n  color: white;\n  font-size: 11px;\n  font-weight: 600;\n  padding: 3px 8px;\n  border-radius: 12px;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n/* Collection Cards */\n.collection-card {\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  margin-bottom: 12px;\n  background: white;\n}\n\n.collection-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 16px;\n  background: none;\n  border: none;\n  text-align: left;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.collection-header:hover {\n  background: #f9fafb;\n}\n\n.collection-icon {\n  color: #6b7280;\n  flex-shrink: 0;\n}\n\n.collection-info {\n  flex: 1;\n  text-align: left;\n  min-width: 0;\n}\n\n.collection-name-row {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 2px;\n}\n\n.collection-name {\n  font-weight: 500;\n  color: #374151;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.public-indicator {\n  display: flex;\n  align-items: center;\n  padding: 2px 6px;\n  background: #dcfce7;\n  color: #16a34a;\n  border-radius: 10px;\n  font-size: 10px;\n  flex-shrink: 0;\n}\n\n.collection-description {\n  font-size: 12px;\n  color: #6b7280;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.collection-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.collection-count {\n  background: #f3f4f6;\n  color: #6b7280;\n  padding: 2px 8px;\n  border-radius: 10px;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.share-collection-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  border: none;\n  background: transparent;\n  color: #6b7280;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  flex-shrink: 0;\n}\n\n.share-collection-button:hover {\n  background: #f3f4f6;\n  color: #374151;\n}\n\n.collection-content {\n  padding: 0 16px 16px;\n  border-top: 1px solid #f3f4f6;\n}\n\n.collection-content .link-card {\n  border: none;\n  background: #f9fafb;\n  margin-bottom: 8px;\n}\n\n.empty-collection {\n  padding: 20px;\n  text-align: center;\n  color: #6b7280;\n  font-size: 14px;\n}\n\n/* Empty states */\n.empty-state {\n  text-align: center;\n  padding: 32px 16px;\n  color: #6b7280;\n}\n\n.empty-state p {\n  margin: 0 0 16px 0;\n  font-size: 14px;\n}\n\n.empty-action {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 8px 16px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.empty-action:hover {\n  background: #2563eb;\n}\n\n/* Footer */\n.footer {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-top: 1px solid #e5e7eb;\n  background: #f9fafb;\n}\n\n.footer-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.footer-button:hover {\n  color: #374151;\n  background: white;\n}\n\n.footer-text {\n  font-size: 12px;\n  color: #6b7280;\n}\n\n/* Modals */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n  padding: 20px;\n}\n\n.modal-content {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 500px;\n  max-height: 80vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px 24px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.modal-header h2 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #111827;\n}\n\n.close-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.close-button:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.modal-body {\n  padding: 24px;\n  overflow-y: auto;\n}\n\n/* Link preview in modal */\n.link-preview {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  background: #f9fafb;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.link-preview-favicon {\n  flex-shrink: 0;\n}\n\n.link-preview-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-preview-title {\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  margin-bottom: 2px;\n  word-wrap: break-word;\n}\n\n.link-preview-url {\n  font-size: 12px;\n  color: #6b7280;\n}\n\n/* Form elements */\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  font-size: 14px;\n  font-weight: 500;\n  color: #374151;\n  margin-bottom: 6px;\n}\n\n.form-group input,\n.form-group textarea {\n  width: 100%;\n  padding: 10px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 14px;\n  transition: border-color 0.2s;\n  font-family: inherit;\n}\n\n.form-group input:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 80px;\n}\n\n.modal-actions {\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 24px;\n}\n\n.button-primary {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.button-primary:hover:not(:disabled) {\n  background: #2563eb;\n}\n\n.button-primary:disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n\n.button-secondary {\n  background: white;\n  color: #374151;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n}\n\n.button-secondary:hover {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n/* Loading state */\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n}\n\n.loading-spinner {\n  font-size: 14px;\n}\n\n/* Responsive adjustments */\n@media (max-width: 480px) {\n  .modal-content {\n    margin: 0;\n    border-radius: 0;\n    height: 100vh;\n    max-height: none;\n  }\n  \n  .modal-overlay {\n    padding: 0;\n  }\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.tab-sync-button,\n.logout-button {\n  background: #f3f4f6;\n  color: #374151;\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s, color 0.2s;\n}\n\n.tab-sync-button:hover,\n.logout-button:hover {\n  background: #e5e7eb;\n}\n\n/* Auth Form Styles */\n.auth-container {\n  padding: 20px;\n}\n\n.auth-form {\n  margin-top: 40px;\n  text-align: center;\n}\n\n.auth-form h2 {\n  font-size: 24px;\n  font-weight: 600;\n  margin-bottom: 8px;\n}\n\n.auth-form p {\n  font-size: 14px;\n  color: #6b7280;\n  margin-bottom: 24px;\n}\n\n.auth-input {\n  width: 100%;\n  padding: 12px;\n  font-size: 14px;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  margin-bottom: 16px;\n}\n\n.auth-button {\n  width: 100%;\n  padding: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  color: white;\n  background: #3b82f6;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.auth-button:hover {\n  background: #2563eb;\n}\n\n.auth-button:disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n\n.auth-message {\n  margin-top: 16px;\n  font-size: 14px;\n  color: #374151;\n}\n\n/* Tag Input Styles */\n.tag-input-container {\n  position: relative;\n  width: 100%;\n}\n\n.tag-input-wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 6px;\n  padding: 8px 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background-color: white;\n  min-height: 42px;\n  cursor: text;\n  transition: border-color 0.2s ease;\n}\n\n.tag-input-wrapper:focus-within {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.tag-chip {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;\n  border-radius: 16px;\n  color: white;\n  font-size: 12px;\n  font-weight: 500;\n  white-space: nowrap;\n  max-width: 150px;\n}\n\n.tag-name {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tag-remove {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 16px;\n  height: 16px;\n  border: none;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 50%;\n  color: white;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  flex-shrink: 0;\n}\n\n.tag-remove:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.tag-input {\n  flex: 1;\n  border: none;\n  outline: none;\n  font-size: 14px;\n  min-width: 80px;\n  background: transparent;\n}\n\n.tag-input::placeholder {\n  color: #94a3b8;\n}\n\n.tag-input:disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n.tag-input-icon {\n  display: flex;\n  align-items: center;\n  color: #94a3b8;\n  flex-shrink: 0;\n}\n\n.tag-suggestions {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  right: 0;\n  z-index: 1000;\n  margin-top: 4px;\n  background: white;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.tag-suggestion {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  padding: 8px 12px;\n  border: none;\n  background: white;\n  text-align: left;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  font-size: 14px;\n}\n\n.tag-suggestion:hover,\n.tag-suggestion.focused {\n  background-color: #f8fafc;\n}\n\n.tag-suggestion-color {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-suggestion-name {\n  flex: 1;\n  color: #1e293b;\n}\n\n.tag-suggestion-count {\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n/* Tag Filter Styles */\n.tag-filters {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #f8fafc;\n  border-radius: 8px;\n}\n\n.tag-filter {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 12px;\n  border: 1px solid transparent;\n  border-radius: 20px;\n  background: white;\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n\n.tag-filter:hover {\n  border-color: #e2e8f0;\n  transform: translateY(-1px);\n}\n\n.tag-filter.active {\n  background: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n}\n\n.tag-filter-color {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-filter-count {\n  background: rgba(100, 116, 139, 0.1);\n  color: #64748b;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n  margin-left: 4px;\n}\n\n.tag-filter.active .tag-filter-count {\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n}\n\n.tag-filter-skeleton {\n  color: #94a3b8;\n  font-size: 12px;\n  padding: 6px 12px;\n  background: #f1f5f9;\n  border-radius: 20px;\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.tag-filter-more {\n  color: #64748b;\n  font-size: 12px;\n  padding: 6px 12px;\n  background: #f1f5f9;\n  border-radius: 20px;\n  font-weight: 500;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .5;\n  }\n}\n\n/* Tag Cloud Styles */\n.tag-cloud {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  padding: 16px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: #fafafa;\n}\n\n.tag-cloud-item {\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 12px;\n  border-radius: 16px;\n  background: white;\n  border: 1px solid #e2e8f0;\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n\n.tag-cloud-item:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n  transform: translateY(-1px);\n}\n\n.tag-cloud-count {\n  background: #f1f5f9;\n  color: #64748b;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n}\n\n/* Tag Management Modal Styles */\n.tag-management {\n  padding: 16px;\n}\n\n.tag-management-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n}\n\n.tag-management-title {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.tag-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.tag-list-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n}\n\n.tag-list-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n}\n\n.tag-list-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-list-name {\n  font-weight: 500;\n  color: #1e293b;\n}\n\n.tag-list-count {\n  color: #64748b;\n  font-size: 12px;\n}\n\n.tag-list-actions {\n  display: flex;\n  gap: 8px;\n}\n\n.tag-action-btn {\n  padding: 4px 8px;\n  border: 1px solid #e2e8f0;\n  border-radius: 4px;\n  background: white;\n  color: #64748b;\n  font-size: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.tag-action-btn:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.tag-action-btn.danger:hover {\n  border-color: #ef4444;\n  color: #ef4444;\n}\n\n/* Responsive Design */\n@media (max-width: 480px) {\n  .tag-input-wrapper {\n    padding: 6px 8px;\n    min-height: 38px;\n  }\n  \n  .tag-chip {\n    font-size: 11px;\n    padding: 3px 6px;\n  }\n  \n  .tag-filters {\n    padding: 8px;\n    gap: 6px;\n  }\n  \n  .tag-filter {\n    padding: 4px 8px;\n    font-size: 11px;\n  }\n}\n\n/* Tag Editor Styles */\n.tag-editor {\n  margin-top: 12px;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: #fafafa;\n}\n\n.tag-editor-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  color: #374151;\n}\n\n.tag-editor-close {\n  background: none;\n  border: none;\n  font-size: 18px;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 0;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n  transition: background-color 0.2s ease;\n}\n\n.tag-editor-close:hover {\n  background-color: #e5e7eb;\n}\n\n.tag-editor-loading {\n  color: #6b7280;\n  font-size: 14px;\n  padding: 8px 0;\n  text-align: center;\n}\n\n/* Link Tags Display */\n.link-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n.link-tag {\n  display: inline-block;\n  padding: 3px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 500;\n  color: white;\n  cursor: pointer;\n  transition: transform 0.2s ease, opacity 0.2s ease;\n  max-width: 100px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.link-tag:hover {\n  transform: translateY(-1px);\n  opacity: 0.9;\n}\n\n/* Tag Results Styles */\n.tag-results {\n  margin-bottom: 24px;\n}\n\n.tag-results-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #f0fdf4;\n  border: 1px solid #bbf7d0;\n  border-radius: 8px;\n}\n\n.tag-results-header h3 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #166534;\n  margin: 0;\n}\n\n/* Share Modal Styles */\n.share-modal {\n  width: 500px;\n  max-width: 90vw;\n}\n\n.share-collection-info {\n  margin-bottom: 24px;\n  padding: 16px;\n  background: #f8fafc;\n  border-radius: 8px;\n  border: 1px solid #e2e8f0;\n}\n\n.collection-name {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0 0 8px 0;\n}\n\n.collection-description {\n  color: #64748b;\n  margin: 0 0 12px 0;\n  line-height: 1.5;\n}\n\n.collection-meta {\n  font-size: 12px;\n  color: #94a3b8;\n}\n\n.share-toggle-section {\n  margin-bottom: 24px;\n  padding: 20px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n}\n\n.share-toggle-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 16px;\n}\n\n.share-status {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n}\n\n.status-icon {\n  flex-shrink: 0;\n}\n\n.status-icon.public {\n  color: #10b981;\n}\n\n.status-icon.private {\n  color: #6b7280;\n}\n\n.status-title {\n  font-weight: 600;\n  color: #1e293b;\n  margin-bottom: 2px;\n}\n\n.status-subtitle {\n  font-size: 13px;\n  color: #64748b;\n}\n\n.toggle-button {\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  border: none;\n  transition: all 0.2s ease;\n  min-width: 120px;\n}\n\n.toggle-button.private {\n  background: #3b82f6;\n  color: white;\n}\n\n.toggle-button.private:hover:not(:disabled) {\n  background: #2563eb;\n}\n\n.toggle-button.public {\n  background: #ef4444;\n  color: white;\n}\n\n.toggle-button.public:hover:not(:disabled) {\n  background: #dc2626;\n}\n\n.toggle-button:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.share-link-section {\n  margin-bottom: 24px;\n  padding: 20px;\n  border: 1px solid #d1fae5;\n  border-radius: 8px;\n  background: #f0fdf4;\n}\n\n.share-link-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 12px;\n  font-weight: 600;\n  color: #166534;\n}\n\n.share-link-container {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.share-link-input {\n  flex: 1;\n  padding: 10px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  font-size: 13px;\n  color: #374151;\n  font-family: monospace;\n}\n\n.share-link-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.share-link-actions {\n  display: flex;\n  gap: 4px;\n}\n\n.copy-button,\n.open-button {\n  padding: 10px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #6b7280;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.copy-button:hover,\n.open-button:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.copy-button.copied {\n  background: #10b981;\n  color: white;\n  border-color: #10b981;\n}\n\n.share-analytics {\n  display: flex;\n  gap: 16px;\n}\n\n.analytics-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  padding: 6px 12px;\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 16px;\n  font-size: 13px;\n  color: #64748b;\n}\n\n.share-message {\n  padding: 12px;\n  border-radius: 6px;\n  margin-bottom: 16px;\n  font-size: 14px;\n}\n\n.share-message.success {\n  background: #f0fdf4;\n  color: #166534;\n  border: 1px solid #bbf7d0;\n}\n\n.share-message.error {\n  background: #fef2f2;\n  color: #dc2626;\n  border: 1px solid #fecaca;\n}\n\n.share-info-box {\n  padding: 16px;\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  margin-bottom: 16px;\n}\n\n.share-info-box h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.share-info-box ul {\n  margin: 0;\n  padding-left: 16px;\n  list-style-type: disc;\n}\n\n.share-info-box li {\n  margin-bottom: 6px;\n  font-size: 13px;\n  color: #64748b;\n  line-height: 1.4;\n}\n\n.share-info-box li:last-child {\n  margin-bottom: 0;\n}\n\n/* Settings Modal Styles */\n.settings-modal {\n  width: 700px;\n  max-width: 95vw;\n  max-height: 90vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.settings-content {\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n}\n\n.settings-tabs {\n  display: flex;\n  flex-direction: column;\n  background: #f8fafc;\n  border-right: 1px solid #e2e8f0;\n  min-width: 160px;\n  padding: 16px 0;\n}\n\n.settings-tab {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  border: none;\n  background: transparent;\n  color: #64748b;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: left;\n  border-radius: 0;\n}\n\n.settings-tab:hover {\n  background: #e2e8f0;\n  color: #1e293b;\n}\n\n.settings-tab.active {\n  background: #3b82f6;\n  color: white;\n}\n\n.settings-panel {\n  flex: 1;\n  overflow-y: auto;\n  padding: 24px;\n}\n\n.settings-section h3 {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0 0 20px 0;\n}\n\n.setting-group {\n  margin-bottom: 32px;\n}\n\n.setting-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n  margin-bottom: 12px;\n  gap: 16px;\n}\n\n.setting-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n  min-width: 0;\n}\n\n.setting-label {\n  font-weight: 500;\n  color: #1e293b;\n  margin-bottom: 2px;\n}\n\n.setting-description {\n  font-size: 13px;\n  color: #64748b;\n  line-height: 1.4;\n}\n\n/* Toggle Switch Styles */\n.toggle-switch {\n  position: relative;\n  display: inline-block;\n  width: 44px;\n  height: 24px;\n  cursor: pointer;\n}\n\n.toggle-switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.toggle-slider {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #cbd5e1;\n  border-radius: 24px;\n  transition: 0.3s;\n}\n\n.toggle-slider:before {\n  position: absolute;\n  content: \"\";\n  height: 18px;\n  width: 18px;\n  left: 3px;\n  bottom: 3px;\n  background-color: white;\n  border-radius: 50%;\n  transition: 0.3s;\n}\n\n.toggle-switch input:checked + .toggle-slider {\n  background-color: #3b82f6;\n}\n\n.toggle-switch input:checked + .toggle-slider:before {\n  transform: translateX(20px);\n}\n\n.toggle-switch input:disabled + .toggle-slider {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n/* Settings Controls */\n.settings-select {\n  padding: 8px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  min-width: 120px;\n}\n\n.settings-select:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.settings-select:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.settings-button {\n  padding: 8px 16px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.settings-button:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.settings-button.danger {\n  background: #ef4444;\n  color: white;\n  border-color: #ef4444;\n}\n\n.settings-button.danger:hover {\n  background: #dc2626;\n  border-color: #dc2626;\n}\n\n/* Stats Grid */\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 16px;\n  margin: 24px 0;\n}\n\n.stat-card {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 16px;\n  text-align: center;\n}\n\n.stat-number {\n  font-size: 24px;\n  font-weight: 700;\n  color: #3b82f6;\n  margin-bottom: 4px;\n}\n\n.stat-label {\n  font-size: 12px;\n  color: #64748b;\n  font-weight: 500;\n}\n\n/* Data Usage */\n.data-usage {\n  margin-top: 24px;\n  padding: 16px;\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n}\n\n.data-usage h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.usage-items {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n}\n\n.usage-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 13px;\n  color: #64748b;\n}\n\n/* Sharing Stats */\n.sharing-stats {\n  margin-top: 24px;\n  padding: 16px;\n  background: #f0fdf4;\n  border: 1px solid #bbf7d0;\n  border-radius: 8px;\n}\n\n.sharing-stats h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #166534;\n}\n\n.stats-row {\n  display: flex;\n  gap: 24px;\n}\n\n.stat-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 13px;\n  color: #166534;\n}\n\n/* About Section */\n.about-info {\n  margin-bottom: 32px;\n}\n\n.app-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 16px;\n}\n\n.app-logo {\n  width: 48px;\n  height: 48px;\n  background: #3b82f6;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.app-name {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.app-version {\n  font-size: 12px;\n  color: #64748b;\n}\n\n.app-description {\n  color: #64748b;\n  line-height: 1.6;\n  margin: 0;\n}\n\n.support-links {\n  margin-bottom: 32px;\n}\n\n.support-links h4 {\n  margin: 0 0 16px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.link-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 12px;\n}\n\n.support-link {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  color: #64748b;\n  text-decoration: none;\n  transition: all 0.2s ease;\n  font-size: 14px;\n}\n\n.support-link:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.credits {\n  text-align: center;\n  color: #94a3b8;\n  font-size: 12px;\n  line-height: 1.6;\n}\n\n.credits p {\n  margin: 0 0 4px 0;\n}\n\n/* Settings Actions */\n.setting-actions {\n  margin-top: 24px;\n  padding-top: 24px;\n  border-top: 1px solid #e2e8f0;\n}\n\n/* Settings Message */\n.settings-message {\n  position: absolute;\n  bottom: 80px;\n  left: 24px;\n  right: 24px;\n  padding: 12px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  z-index: 1000;\n  animation: slideUp 0.3s ease-out;\n}\n\n.settings-message.success {\n  background: #f0fdf4;\n  color: #166534;\n  border: 1px solid #bbf7d0;\n}\n\n.settings-message.error {\n  background: #fef2f2;\n  color: #dc2626;\n  border: 1px solid #fecaca;\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .settings-modal {\n    width: 100%;\n    max-width: 100vw;\n    max-height: 100vh;\n    border-radius: 0;\n  }\n\n  .settings-content {\n    flex-direction: column;\n  }\n\n  .settings-tabs {\n    flex-direction: row;\n    min-width: auto;\n    border-right: none;\n    border-bottom: 1px solid #e2e8f0;\n    overflow-x: auto;\n    padding: 8px 0;\n  }\n\n  .settings-tab {\n    white-space: nowrap;\n    padding: 8px 12px;\n    min-width: 100px;\n  }\n\n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .stats-row {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .link-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Inbox Card Styles */\n.inbox-card {\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  margin-bottom: 8px;\n  transition: all 0.2s ease;\n  position: relative;\n}\n\n.inbox-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.inbox-card.selected {\n  border-color: #3b82f6;\n  background: #f8fafc;\n}\n\n.inbox-card-content {\n  padding: 12px 16px;\n}\n\n.inbox-card-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n}\n\n.inbox-card-checkbox {\n  flex-shrink: 0;\n  padding-top: 2px;\n}\n\n.inbox-card-checkbox input[type=\"checkbox\"] {\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n  accent-color: #3b82f6;\n}\n\n.inbox-card-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.inbox-card-title-section {\n  flex: 1;\n  min-width: 0;\n}\n\n.inbox-card-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  line-height: 1.4;\n  word-wrap: break-word;\n}\n\n.inbox-card-domain {\n  font-size: 12px;\n  color: #6b7280;\n  font-weight: 500;\n}\n\n.inbox-card-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.inbox-card-link {\n  color: #6b7280;\n  text-decoration: none;\n  padding: 4px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.inbox-card-link:hover {\n  color: #3b82f6;\n  background: #f3f4f6;\n}\n\n.inbox-card-menu-container {\n  position: relative;\n}\n\n.inbox-card-menu-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.inbox-card-menu-button:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.inbox-card-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  z-index: 50;\n  min-width: 180px;\n  padding: 4px;\n  margin-top: 4px;\n}\n\n.inbox-card-menu-item {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 8px 12px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #374151;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n}\n\n.inbox-card-menu-item:hover {\n  background: #f3f4f6;\n}\n\n.inbox-card-menu-item.delete {\n  color: #dc2626;\n}\n\n.inbox-card-menu-item.delete:hover {\n  background: #fef2f2;\n}\n\n.inbox-card-submenu {\n  position: absolute;\n  top: 0;\n  right: 100%;\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  z-index: 51;\n  min-width: 160px;\n  padding: 4px;\n  margin-right: 8px;\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.inbox-card-submenu-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 12px;\n  border-bottom: 1px solid #e5e7eb;\n  margin-bottom: 4px;\n  font-size: 12px;\n  font-weight: 600;\n  color: #6b7280;\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n}\n\n.inbox-card-submenu-close {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 2px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.inbox-card-submenu-close:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.inbox-card-submenu-item {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 6px 12px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #374151;\n  transition: background-color 0.2s;\n}\n\n.inbox-card-submenu-item:hover {\n  background: #f3f4f6;\n}\n\n.inbox-card-submenu-empty {\n  padding: 8px 12px;\n  font-size: 14px;\n  color: #6b7280;\n  text-align: center;\n  font-style: italic;\n}\n\n.inbox-card-summary {\n  margin-top: 8px;\n  padding: 8px 12px;\n  background: #f8fafc;\n  border-radius: 6px;\n  border-left: 3px solid #3b82f6;\n}\n\n.inbox-card-summary p {\n  margin: 0;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #475569;\n}\n\n.inbox-card-note {\n  margin-top: 8px;\n  padding: 8px 12px;\n  background: #fffbeb;\n  border-radius: 6px;\n  border-left: 3px solid #f59e0b;\n}\n\n.inbox-card-note p {\n  margin: 0;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #92400e;\n}\n\n.inbox-card-tags {\n  margin-top: 8px;\n  padding-top: 8px;\n  border-top: 1px solid #e5e7eb;\n}\n\n/* Inbox Section Styles */\n.inbox-section {\n  margin-bottom: 24px;\n}\n\n.inbox-section-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.inbox-section-title {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0;\n}\n\n.inbox-count {\n  background: #fef3c7;\n  color: #d97706;\n  font-size: 12px;\n  font-weight: 500;\n  padding: 2px 8px;\n  border-radius: 12px;\n}\n\n.inbox-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.inbox-action-button {\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  padding: 6px 12px;\n  font-size: 12px;\n  color: #374151;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.inbox-action-button:hover:not(:disabled) {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.inbox-action-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.inbox-action-button.primary {\n  background: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n}\n\n.inbox-action-button.primary:hover:not(:disabled) {\n  background: #2563eb;\n  border-color: #2563eb;\n}\n\n.inbox-empty {\n  text-align: center;\n  padding: 40px 20px;\n  color: #6b7280;\n}\n\n.inbox-empty-icon {\n  width: 48px;\n  height: 48px;\n  color: #d1d5db;\n  margin: 0 auto 16px;\n}\n\n.inbox-empty h3 {\n  margin: 0 0 8px 0;\n  font-size: 16px;\n  font-weight: 500;\n  color: #374151;\n}\n\n  .inbox-empty p {\n    margin: 0;\n    font-size: 14px;\n    line-height: 1.5;\n  }\n\n  /* Command Palette Styles */\n  .command-palette-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.6);\n    -webkit-backdrop-filter: blur(4px);\n    backdrop-filter: blur(4px);\n    z-index: 1000;\n    display: flex;\n    align-items: flex-start;\n    justify-content: center;\n    padding: 10vh 20px 20px;\n    animation: fadeIn 0.15s ease-out;\n  }\n\n  .command-palette {\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n    width: 100%;\n    max-width: 640px;\n    max-height: 80vh;\n    overflow: hidden;\n    animation: slideIn 0.15s ease-out;\n  }\n\n  .command-palette-header {\n    padding: 16px;\n    border-bottom: 1px solid #e5e7eb;\n  }\n\n  .command-palette-search {\n    position: relative;\n    display: flex;\n    align-items: center;\n  }\n\n  .command-palette-search-icon {\n    position: absolute;\n    left: 12px;\n    color: #6b7280;\n    z-index: 10;\n  }\n\n  .command-palette-input {\n    width: 100%;\n    padding: 12px 16px 12px 44px;\n    border: none;\n    font-size: 16px;\n    background: #f9fafb;\n    border-radius: 8px;\n    outline: none;\n    color: #111827;\n    padding-right: 60px;\n  }\n\n  .command-palette-input::placeholder {\n    color: #9ca3af;\n  }\n\n  .command-palette-shortcut {\n    position: absolute;\n    right: 12px;\n    display: flex;\n    align-items: center;\n    gap: 2px;\n    background: white;\n    border: 1px solid #d1d5db;\n    border-radius: 4px;\n    padding: 4px 6px;\n    font-size: 11px;\n    color: #6b7280;\n    font-weight: 500;\n  }\n\n  .command-palette-content {\n    max-height: 400px;\n    overflow-y: auto;\n    padding: 8px 0;\n  }\n\n  .command-palette-item {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    padding: 12px 16px;\n    cursor: pointer;\n    transition: all 0.1s ease;\n    border-left: 3px solid transparent;\n  }\n\n  .command-palette-item:hover,\n  .command-palette-item.selected {\n    background: #f8fafc;\n    border-left-color: #3b82f6;\n  }\n\n  .command-palette-item.selected {\n    background: #eff6ff;\n  }\n\n  .command-palette-item-icon {\n    flex-shrink: 0;\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 6px;\n    background: #f3f4f6;\n    color: #6b7280;\n  }\n\n  .command-palette-item.selected .command-palette-item-icon {\n    background: #dbeafe;\n    color: #3b82f6;\n  }\n\n  .command-palette-item-content {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .command-palette-item-title {\n    font-size: 14px;\n    font-weight: 500;\n    color: #111827;\n    margin-bottom: 2px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .command-palette-item-subtitle {\n    font-size: 12px;\n    color: #6b7280;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .command-palette-item-action {\n    flex-shrink: 0;\n    color: #d1d5db;\n    transition: color 0.1s ease;\n  }\n\n  .command-palette-item.selected .command-palette-item-action {\n    color: #6b7280;\n  }\n\n  .command-palette-empty {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 40px 20px;\n    color: #6b7280;\n    text-align: center;\n  }\n\n  .command-palette-empty svg {\n    margin-bottom: 12px;\n    color: #d1d5db;\n  }\n\n  .command-palette-empty p {\n    margin: 0 0 4px 0;\n    font-size: 14px;\n    font-weight: 500;\n    color: #374151;\n  }\n\n  .command-palette-empty span {\n    font-size: 12px;\n    color: #9ca3af;\n  }\n\n  .command-palette-footer {\n    padding: 12px 16px;\n    border-top: 1px solid #e5e7eb;\n    background: #f9fafb;\n  }\n\n  .command-palette-tips {\n    display: flex;\n    gap: 16px;\n    align-items: center;\n    justify-content: center;\n    font-size: 11px;\n    color: #6b7280;\n  }\n\n  .command-palette-tips kbd {\n    display: inline-block;\n    padding: 2px 4px;\n    background: white;\n    border: 1px solid #d1d5db;\n    border-radius: 3px;\n    font-size: 10px;\n    font-weight: 500;\n    color: #374151;\n    margin: 0 2px;\n    font-family: inherit;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  @keyframes slideIn {\n    from {\n      opacity: 0;\n      transform: translateY(-20px) scale(0.98);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n\n  /* Mobile responsive */\n  @media (max-width: 640px) {\n    .command-palette-overlay {\n      padding: 5vh 16px 16px;\n    }\n\n    .command-palette {\n      max-height: 90vh;\n    }\n\n    .command-palette-tips {\n      flex-wrap: wrap;\n      gap: 8px;\n    }\n\n    .command-palette-item {\n      padding: 10px 12px;\n    }\n\n    .command-palette-item-title {\n      font-size: 13px;\n    }\n\n         .command-palette-item-subtitle {\n       font-size: 11px;\n     }\n   }\n\n   /* Tab Sync Styles */\n   .tab-sync-overlay {\n     position: fixed;\n     top: 0;\n     left: 0;\n     right: 0;\n     bottom: 0;\n     background: rgba(0, 0, 0, 0.6);\n     -webkit-backdrop-filter: blur(4px);\n     backdrop-filter: blur(4px);\n     z-index: 1001;\n     display: flex;\n     align-items: center;\n     justify-content: center;\n     padding: 20px;\n     animation: fadeIn 0.15s ease-out;\n   }\n\n   .tab-sync-modal {\n     background: white;\n     border-radius: 12px;\n     box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n     width: 100%;\n     max-width: 900px;\n     max-height: 90vh;\n     overflow: hidden;\n     animation: slideIn 0.15s ease-out;\n     display: flex;\n     flex-direction: column;\n   }\n\n   .tab-sync-header {\n     display: flex;\n     align-items: center;\n     justify-content: space-between;\n     padding: 20px 24px;\n     border-bottom: 1px solid #e5e7eb;\n     background: #f9fafb;\n   }\n\n   .tab-sync-title {\n     display: flex;\n     align-items: center;\n     gap: 12px;\n   }\n\n   .tab-sync-title h2 {\n     margin: 0;\n     font-size: 20px;\n     font-weight: 600;\n     color: #111827;\n   }\n\n   .tab-count {\n     background: #dbeafe;\n     color: #1d4ed8;\n     font-size: 12px;\n     font-weight: 500;\n     padding: 4px 8px;\n     border-radius: 12px;\n   }\n\n   .tab-sync-actions {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n   }\n\n   .tab-sync-refresh,\n   .tab-sync-close {\n     background: none;\n     border: none;\n     color: #6b7280;\n     cursor: pointer;\n     padding: 8px;\n     border-radius: 6px;\n     transition: all 0.2s ease;\n   }\n\n   .tab-sync-refresh:hover,\n   .tab-sync-close:hover {\n     color: #374151;\n     background: #f3f4f6;\n   }\n\n   .tab-sync-refresh:disabled {\n     opacity: 0.5;\n     cursor: not-allowed;\n   }\n\n   .spinning {\n     animation: spin 1s linear infinite;\n   }\n\n   .tab-sync-filters {\n     padding: 16px 24px;\n     border-bottom: 1px solid #e5e7eb;\n     background: #fafafa;\n   }\n\n   .tab-sync-filter-row {\n     display: flex;\n     align-items: center;\n     gap: 16px;\n     margin-bottom: 12px;\n   }\n\n   .tab-sync-filter-checkbox {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     font-size: 14px;\n     color: #374151;\n     cursor: pointer;\n   }\n\n   .tab-sync-filter-checkbox input[type=\"checkbox\"] {\n     width: 16px;\n     height: 16px;\n     cursor: pointer;\n     accent-color: #3b82f6;\n   }\n\n   .tab-sync-domain-filter {\n     flex: 1;\n     padding: 8px 12px;\n     border: 1px solid #d1d5db;\n     border-radius: 6px;\n     font-size: 14px;\n     background: white;\n   }\n\n   .tab-sync-domain-filter:focus {\n     outline: none;\n     border-color: #3b82f6;\n     box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n   }\n\n   .tab-sync-domain-pills {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     flex-wrap: wrap;\n   }\n\n   .domain-pills-label {\n     font-size: 12px;\n     color: #6b7280;\n     font-weight: 500;\n   }\n\n   .domain-pill {\n     background: white;\n     border: 1px solid #d1d5db;\n     border-radius: 16px;\n     padding: 4px 12px;\n     font-size: 12px;\n     color: #374151;\n     cursor: pointer;\n     transition: all 0.2s ease;\n   }\n\n   .domain-pill:hover {\n     border-color: #9ca3af;\n     background: #f9fafb;\n   }\n\n   .domain-pill.active {\n     background: #3b82f6;\n     color: white;\n     border-color: #3b82f6;\n   }\n\n   .tab-sync-bulk-actions {\n     display: flex;\n     align-items: center;\n     gap: 12px;\n     padding: 16px 24px;\n     border-bottom: 1px solid #e5e7eb;\n     background: white;\n   }\n\n   .bulk-action-btn {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     padding: 8px 16px;\n     background: white;\n     border: 1px solid #d1d5db;\n     border-radius: 6px;\n     font-size: 14px;\n     color: #374151;\n     cursor: pointer;\n     transition: all 0.2s ease;\n   }\n\n   .bulk-action-btn:hover:not(:disabled) {\n     background: #f9fafb;\n     border-color: #9ca3af;\n   }\n\n   .bulk-action-btn:disabled {\n     opacity: 0.5;\n     cursor: not-allowed;\n   }\n\n   .bulk-action-btn.primary {\n     background: #3b82f6;\n     color: white;\n     border-color: #3b82f6;\n   }\n\n   .bulk-action-btn.primary:hover:not(:disabled) {\n     background: #2563eb;\n     border-color: #2563eb;\n   }\n\n   .bulk-collection-select {\n     padding: 8px 12px;\n     border: 1px solid #d1d5db;\n     border-radius: 6px;\n     font-size: 14px;\n     background: white;\n     color: #374151;\n     cursor: pointer;\n   }\n\n   .bulk-collection-select:focus {\n     outline: none;\n     border-color: #3b82f6;\n     box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n   }\n\n   .tab-sync-content {\n     flex: 1;\n     overflow-y: auto;\n     padding: 0;\n   }\n\n   .tab-sync-loading,\n   .tab-sync-empty {\n     display: flex;\n     flex-direction: column;\n     align-items: center;\n     justify-content: center;\n     padding: 60px 20px;\n     color: #6b7280;\n     text-align: center;\n   }\n\n   .tab-sync-loading svg,\n   .tab-sync-empty svg {\n     margin-bottom: 16px;\n     color: #d1d5db;\n   }\n\n   .tab-sync-empty h3 {\n     margin: 0 0 8px 0;\n     font-size: 18px;\n     font-weight: 500;\n     color: #374151;\n   }\n\n   .tab-sync-empty p {\n     margin: 0;\n     font-size: 14px;\n     line-height: 1.5;\n   }\n\n   .tab-window-group {\n     border-bottom: 1px solid #e5e7eb;\n   }\n\n   .tab-window-group:last-child {\n     border-bottom: none;\n   }\n\n   .tab-window-header {\n     padding: 12px 24px;\n     background: #f8fafc;\n     border-bottom: 1px solid #e5e7eb;\n   }\n\n   .window-select-btn {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     background: none;\n     border: none;\n     font-size: 14px;\n     font-weight: 500;\n     color: #374151;\n     cursor: pointer;\n     padding: 4px 0;\n     transition: color 0.2s ease;\n   }\n\n   .window-select-btn:hover {\n     color: #3b82f6;\n   }\n\n   .tab-list {\n     padding: 0;\n   }\n\n   .tab-item {\n     display: flex;\n     align-items: center;\n     justify-content: space-between;\n     padding: 12px 24px;\n     border-bottom: 1px solid #f3f4f6;\n     transition: all 0.2s ease;\n   }\n\n   .tab-item:hover {\n     background: #f8fafc;\n   }\n\n   .tab-item.selected {\n     background: #eff6ff;\n     border-left: 3px solid #3b82f6;\n   }\n\n   .tab-item.active {\n     border-left: 3px solid #10b981;\n   }\n\n   .tab-item.selected.active {\n     border-left: 3px solid #3b82f6;\n   }\n\n   .tab-item-content {\n     display: flex;\n     align-items: center;\n     gap: 12px;\n     flex: 1;\n     min-width: 0;\n   }\n\n   .tab-checkbox {\n     width: 16px;\n     height: 16px;\n     cursor: pointer;\n     accent-color: #3b82f6;\n   }\n\n   .tab-favicon {\n     flex-shrink: 0;\n     width: 16px;\n     height: 16px;\n   }\n\n   .tab-info {\n     flex: 1;\n     min-width: 0;\n   }\n\n   .tab-title {\n     display: flex;\n     align-items: center;\n     gap: 6px;\n     font-size: 14px;\n     font-weight: 500;\n     color: #111827;\n     margin-bottom: 2px;\n     white-space: nowrap;\n     overflow: hidden;\n     text-overflow: ellipsis;\n   }\n\n   .tab-pin-indicator {\n     font-size: 12px;\n   }\n\n   .tab-active-indicator {\n     color: #10b981;\n     font-weight: bold;\n     font-size: 16px;\n   }\n\n   .tab-url {\n     font-size: 12px;\n     color: #6b7280;\n     white-space: nowrap;\n     overflow: hidden;\n     text-overflow: ellipsis;\n   }\n\n   .tab-actions {\n     display: flex;\n     align-items: center;\n     gap: 4px;\n   }\n\n   .tab-action-btn {\n     display: flex;\n     align-items: center;\n     justify-content: center;\n     background: none;\n     border: none;\n     color: #6b7280;\n     cursor: pointer;\n     padding: 6px;\n     border-radius: 4px;\n     transition: all 0.2s ease;\n     text-decoration: none;\n   }\n\n   .tab-action-btn:hover {\n     color: #3b82f6;\n     background: #f3f4f6;\n   }\n\n   .tab-action-btn:disabled {\n     opacity: 0.5;\n     cursor: not-allowed;\n   }\n\n   .tab-collection-select {\n     padding: 4px 6px;\n     border: 1px solid #d1d5db;\n     border-radius: 4px;\n     font-size: 12px;\n     background: white;\n     color: #374151;\n     cursor: pointer;\n     min-width: 40px;\n   }\n\n   .tab-collection-select:focus {\n     outline: none;\n     border-color: #3b82f6;\n   }\n\n   .tab-sync-footer {\n     padding: 16px 24px;\n     border-top: 1px solid #e5e7eb;\n     background: #f9fafb;\n   }\n\n   .tab-sync-stats {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     font-size: 12px;\n     color: #6b7280;\n   }\n\n   /* Mobile responsive */\n   @media (max-width: 768px) {\n     .tab-sync-overlay {\n       padding: 10px;\n     }\n\n     .tab-sync-modal {\n       max-height: 95vh;\n     }\n\n     .tab-sync-header {\n       padding: 16px;\n     }\n\n     .tab-sync-title h2 {\n       font-size: 18px;\n     }\n\n     .tab-sync-filters {\n       padding: 12px 16px;\n     }\n\n     .tab-sync-filter-row {\n       flex-direction: column;\n       align-items: stretch;\n       gap: 12px;\n     }\n\n     .tab-sync-bulk-actions {\n       padding: 12px 16px;\n       flex-wrap: wrap;\n       gap: 8px;\n     }\n\n     .tab-item {\n       padding: 10px 16px;\n     }\n\n     .tab-title {\n       font-size: 13px;\n     }\n\n     .tab-url {\n       font-size: 11px;\n     }\n\n     .tab-actions {\n       gap: 2px;\n     }\n\n     .tab-sync-footer {\n       padding: 12px 16px;\n     }\n\n     .tab-sync-stats {\n       flex-wrap: wrap;\n       gap: 4px;\n     }\n   }\n\n  /* Highlight Components */\n  .link-highlights-section {\n    margin-top: 12px;\n    border: 1px solid #e5e7eb;\n    border-radius: 8px;\n    background: #f9fafb;\n    overflow: hidden;\n  }\n\n  .highlights-header {\n    padding: 8px 12px;\n    background: #f3f4f6;\n    border-bottom: 1px solid #e5e7eb;\n  }\n\n  .highlights-toggle {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    width: 100%;\n    background: none;\n    border: none;\n    font-size: 13px;\n    font-weight: 500;\n    color: #374151;\n    cursor: pointer;\n    padding: 0;\n  }\n\n  .highlights-toggle:hover {\n    color: #111827;\n  }\n\n  .highlights-toggle svg:first-child {\n    color: #8b5cf6;\n  }\n\n  .highlights-chevron {\n    margin-left: auto;\n    color: #6b7280;\n    transition: transform 0.2s ease;\n  }\n\n  .highlights-chevron.expanded {\n    transform: rotate(180deg);\n  }\n\n  .highlights-list {\n    padding: 12px;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n\n  .highlight-card {\n    background: white;\n    border: 1px solid #e5e7eb;\n    border-radius: 6px;\n    padding: 12px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .highlight-content {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .highlight-text {\n    display: flex;\n    align-items: flex-start;\n    gap: 8px;\n  }\n\n  .highlight-icon {\n    color: #8b5cf6;\n    margin-top: 2px;\n    flex-shrink: 0;\n  }\n\n  .highlight-selected-text {\n    font-style: italic;\n    color: #374151;\n    font-size: 14px;\n    line-height: 1.5;\n    margin: 0;\n    padding: 8px 12px;\n    background: #f8fafc;\n    border-left: 3px solid #8b5cf6;\n    border-radius: 0 4px 4px 0;\n  }\n\n  .highlight-context {\n    padding-left: 24px;\n  }\n\n  .highlight-context p {\n    font-size: 12px;\n    color: #6b7280;\n    margin: 0;\n    line-height: 1.4;\n    max-height: 60px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .highlight-note {\n    padding-left: 24px;\n  }\n\n  .highlight-note p {\n    font-size: 13px;\n    color: #374151;\n    margin: 0;\n    padding: 8px 12px;\n    background: #fef3c7;\n    border-left: 3px solid #f59e0b;\n    border-radius: 0 4px 4px 0;\n    line-height: 1.4;\n  }\n\n  .highlight-note-form {\n    padding-left: 24px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .highlight-note-form textarea {\n    width: 100%;\n    min-height: 60px;\n    padding: 8px 12px;\n    border: 1px solid #d1d5db;\n    border-radius: 4px;\n    font-size: 13px;\n    line-height: 1.4;\n    resize: vertical;\n    font-family: inherit;\n  }\n\n  .highlight-note-form textarea:focus {\n    outline: none;\n    border-color: #8b5cf6;\n    box-shadow: 0 0 0 1px #8b5cf6;\n  }\n\n  .highlight-note-actions {\n    display: flex;\n    gap: 8px;\n    justify-content: flex-end;\n  }\n\n  .highlight-note-actions .save-button {\n    background: #8b5cf6;\n    color: white;\n    border: none;\n    padding: 6px 12px;\n    border-radius: 4px;\n    font-size: 12px;\n    font-weight: 500;\n    cursor: pointer;\n  }\n\n  .highlight-note-actions .save-button:hover {\n    background: #7c3aed;\n  }\n\n  .highlight-note-actions .cancel-button {\n    background: #f3f4f6;\n    color: #374151;\n    border: 1px solid #d1d5db;\n    padding: 6px 12px;\n    border-radius: 4px;\n    font-size: 12px;\n    font-weight: 500;\n    cursor: pointer;\n  }\n\n  .highlight-note-actions .cancel-button:hover {\n    background: #e5e7eb;\n  }\n\n  .highlight-actions {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding-top: 8px;\n    border-top: 1px solid #f3f4f6;\n  }\n\n  .highlight-date {\n    font-size: 11px;\n    color: #9ca3af;\n  }\n\n  .highlight-buttons {\n    display: flex;\n    gap: 4px;\n  }\n\n  .highlight-action-button {\n    background: none;\n    border: none;\n    padding: 4px;\n    border-radius: 4px;\n    color: #6b7280;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .highlight-action-button:hover {\n    color: #374151;\n    background: #f3f4f6;\n  }\n\n  .highlight-action-button.delete-button:hover {\n    color: #dc2626;\n    background: #fef2f2;\n  }\n\n  /* Update command palette to include highlight actions */\n  .command-palette-section .command-item[data-action*=\"highlight\"] {\n    --command-icon-color: #8b5cf6;\n  }\n\n  /* Mobile responsive adjustments for highlights */\n  @media (max-width: 768px) {\n    .highlight-card {\n      padding: 10px;\n    }\n    \n    .highlight-selected-text {\n      font-size: 13px;\n      padding: 6px 10px;\n    }\n    \n    .highlight-note p {\n      font-size: 12px;\n      padding: 6px 10px;\n    }\n    \n    .highlight-note-form {\n      padding-left: 16px;\n    }\n    \n    .highlight-text {\n      gap: 6px;\n    }\n    \n    .highlight-context {\n      padding-left: 16px;\n    }\n    \n    .highlight-note {\n      padding-left: 16px;\n    }\n  }\n\n ","",{version:3,sources:["webpack://./src/sidepanel/sidepanel.css"],names:[],mappings:"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",sourcesContent:["/* Reset and base styles */\n* {\n  box-sizing: border-box;\n}\n\n.sidepanel {\n  width: 100%;\n  height: 100vh;\n  background: #ffffff;\n  display: flex;\n  flex-direction: column;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n  overflow: hidden;\n}\n\n/* Header */\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e5e7eb;\n  background: #ffffff;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n}\n\n.header-title {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.header-title h1 {\n  margin: 0;\n  font-size: 20px;\n  font-weight: 600;\n  color: #111827;\n}\n\n.header-icon {\n  color: #3b82f6;\n  width: 20px;\n  height: 20px;\n}\n\n.save-button {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s;\n}\n\n.save-button:hover {\n  background: #2563eb;\n}\n\n/* Enhanced Search Styles */\n.search-container {\n  position: relative;\n  padding: 16px 20px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.search-icon {\n  position: absolute;\n  left: 32px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #6b7280;\n  pointer-events: none;\n}\n\n.search-input {\n  width: 100%;\n  padding: 10px 12px 10px 36px;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  font-size: 14px;\n  background: #f9fafb;\n  transition: border-color 0.2s, background-color 0.2s;\n  padding-right: 60px; /* Space for clear button and spinner */\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  background: white;\n}\n\n.search-clear {\n  position: absolute;\n  right: 40px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.search-clear:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.search-spinner {\n  position: absolute;\n  right: 24px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #3b82f6;\n  font-size: 16px;\n  animation: spin 1s linear infinite;\n}\n\n.search-power-mode {\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  color: #9ca3af;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.search-power-mode:hover {\n  color: #3b82f6;\n  background: #f3f4f6;\n}\n\n@keyframes spin {\n  from { transform: translateY(-50%) rotate(0deg); }\n  to { transform: translateY(-50%) rotate(360deg); }\n}\n\n/* Search Results Styles */\n.search-results {\n  padding: 16px 0;\n}\n\n.search-results-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 20px 16px;\n  border-bottom: 1px solid #e5e7eb;\n  margin-bottom: 16px;\n}\n\n.search-results-header h3 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0;\n}\n\n.clear-search-btn {\n  padding: 6px 12px;\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  color: #374151;\n  font-size: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.clear-search-btn:hover {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.no-results {\n  text-align: center;\n  padding: 40px 20px;\n  color: #6b7280;\n}\n\n/* Search Result Card Styles */\n.search-result-card {\n  position: relative;\n  margin-bottom: 16px;\n}\n\n.search-rank-indicator {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  background: #3b82f6;\n  color: white;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n  font-weight: 500;\n  z-index: 10;\n}\n\n.search-result-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.search-result-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.search-result-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.search-result-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.search-result-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  cursor: pointer;\n  line-height: 1.4;\n  word-wrap: break-word;\n  transition: color 0.2s;\n}\n\n.search-result-title:hover {\n  color: #3b82f6;\n}\n\n.search-result-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #6b7280;\n  flex-wrap: wrap;\n}\n\n.search-result-domain {\n  font-weight: 500;\n}\n\n.search-result-date::before {\n  content: '•';\n  margin-right: 8px;\n}\n\n.search-result-rank {\n  background: #eff6ff;\n  color: #1d4ed8;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 11px;\n  font-weight: 500;\n}\n\n.search-result-rank::before {\n  content: '•';\n  margin-right: 8px;\n  color: #6b7280;\n}\n\n.search-result-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n/* Search headline with highlighting */\n.search-headline {\n  background: #fffbeb;\n  border: 1px solid #fed7aa;\n  border-radius: 6px;\n  padding: 8px 12px;\n  margin-bottom: 8px;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #92400e;\n}\n\n.search-headline mark {\n  background: #fbbf24;\n  color: #92400e;\n  padding: 1px 2px;\n  border-radius: 2px;\n}\n\n.search-result-category {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n/* Content */\n.content {\n  flex: 1;\n  overflow-y: auto;\n  padding: 0 20px 20px;\n}\n\n/* Sections */\n.section {\n  margin-bottom: 24px;\n}\n\n.section-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 0;\n  background: none;\n  border: none;\n  font-size: 16px;\n  font-weight: 600;\n  color: #374151;\n  cursor: pointer;\n  text-align: left;\n  transition: color 0.2s;\n}\n\n.section-header:hover {\n  color: #111827;\n}\n\n.section-header .count {\n  margin-left: auto;\n  background: #f3f4f6;\n  color: #6b7280;\n  font-size: 12px;\n  font-weight: 500;\n  padding: 2px 8px;\n  border-radius: 12px;\n}\n\n.add-collection-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.add-collection-button:hover {\n  color: #3b82f6;\n  background: #f3f4f6;\n}\n\n.section-content {\n  margin-top: 8px;\n}\n\n/* Link Cards */\n.link-card {\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 12px;\n  transition: border-color 0.2s, box-shadow 0.2s;\n}\n\n.link-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.link-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.link-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.favicon-placeholder {\n  width: 16px;\n  height: 16px;\n  border-radius: 2px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 10px;\n  font-weight: 600;\n}\n\n.link-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  cursor: pointer;\n  line-height: 1.4;\n  word-wrap: break-word;\n  transition: color 0.2s;\n}\n\n.link-title:hover {\n  color: #3b82f6;\n}\n\n.link-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: #6b7280;\n}\n\n.link-domain {\n  font-weight: 500;\n}\n\n.link-date::before {\n  content: '•';\n  margin-right: 8px;\n}\n\n.link-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.action-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.action-button:hover {\n  background-color: #f3f4f6;\n}\n\n/* Dropdown */\n.dropdown {\n  position: relative;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  z-index: 50;\n  min-width: 160px;\n  padding: 4px;\n}\n\n.dropdown-menu button {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 8px 12px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #374151;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n}\n\n.dropdown-menu button:hover {\n  background: #f3f4f6;\n}\n\n.dropdown-menu button.delete-action {\n  color: #dc2626;\n}\n\n.dropdown-menu button.delete-action:hover {\n  background: #fef2f2;\n}\n\n/* Collections menu */\n.collections-menu {\n  background: #f9fafb;\n  border: 1px solid #e5e7eb;\n  border-radius: 6px;\n  padding: 8px;\n  margin-top: 8px;\n}\n\n.collections-header {\n  font-size: 12px;\n  font-weight: 600;\n  color: #6b7280;\n  margin-bottom: 4px;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.collection-option {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 6px 8px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 13px;\n  color: #374151;\n  transition: background-color 0.2s;\n}\n\n.collection-option:hover {\n  background: white;\n}\n\n/* Link content */\n.link-note, .link-summary {\n  margin-bottom: 8px;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #4b5563;\n}\n\n.link-note strong, .link-summary strong {\n  color: #374151;\n  font-weight: 600;\n}\n\n.link-category {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.category-badge {\n  background: #f3f4f6;\n  color: white;\n  font-size: 11px;\n  font-weight: 600;\n  padding: 3px 8px;\n  border-radius: 12px;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n/* Collection Cards */\n.collection-card {\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  margin-bottom: 12px;\n  background: white;\n}\n\n.collection-header {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 16px;\n  background: none;\n  border: none;\n  text-align: left;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.collection-header:hover {\n  background: #f9fafb;\n}\n\n.collection-icon {\n  color: #6b7280;\n  flex-shrink: 0;\n}\n\n.collection-info {\n  flex: 1;\n  text-align: left;\n  min-width: 0;\n}\n\n.collection-name-row {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 2px;\n}\n\n.collection-name {\n  font-weight: 500;\n  color: #374151;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.public-indicator {\n  display: flex;\n  align-items: center;\n  padding: 2px 6px;\n  background: #dcfce7;\n  color: #16a34a;\n  border-radius: 10px;\n  font-size: 10px;\n  flex-shrink: 0;\n}\n\n.collection-description {\n  font-size: 12px;\n  color: #6b7280;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.collection-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.collection-count {\n  background: #f3f4f6;\n  color: #6b7280;\n  padding: 2px 8px;\n  border-radius: 10px;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.share-collection-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  border: none;\n  background: transparent;\n  color: #6b7280;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  flex-shrink: 0;\n}\n\n.share-collection-button:hover {\n  background: #f3f4f6;\n  color: #374151;\n}\n\n.collection-content {\n  padding: 0 16px 16px;\n  border-top: 1px solid #f3f4f6;\n}\n\n.collection-content .link-card {\n  border: none;\n  background: #f9fafb;\n  margin-bottom: 8px;\n}\n\n.empty-collection {\n  padding: 20px;\n  text-align: center;\n  color: #6b7280;\n  font-size: 14px;\n}\n\n/* Empty states */\n.empty-state {\n  text-align: center;\n  padding: 32px 16px;\n  color: #6b7280;\n}\n\n.empty-state p {\n  margin: 0 0 16px 0;\n  font-size: 14px;\n}\n\n.empty-action {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 8px 16px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.empty-action:hover {\n  background: #2563eb;\n}\n\n/* Footer */\n.footer {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  border-top: 1px solid #e5e7eb;\n  background: #f9fafb;\n}\n\n.footer-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 6px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.footer-button:hover {\n  color: #374151;\n  background: white;\n}\n\n.footer-text {\n  font-size: 12px;\n  color: #6b7280;\n}\n\n/* Modals */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n  padding: 20px;\n}\n\n.modal-content {\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 500px;\n  max-height: 80vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px 24px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.modal-header h2 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #111827;\n}\n\n.close-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: color 0.2s, background-color 0.2s;\n}\n\n.close-button:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.modal-body {\n  padding: 24px;\n  overflow-y: auto;\n}\n\n/* Link preview in modal */\n.link-preview {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  background: #f9fafb;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.link-preview-favicon {\n  flex-shrink: 0;\n}\n\n.link-preview-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.link-preview-title {\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  margin-bottom: 2px;\n  word-wrap: break-word;\n}\n\n.link-preview-url {\n  font-size: 12px;\n  color: #6b7280;\n}\n\n/* Form elements */\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  font-size: 14px;\n  font-weight: 500;\n  color: #374151;\n  margin-bottom: 6px;\n}\n\n.form-group input,\n.form-group textarea {\n  width: 100%;\n  padding: 10px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 14px;\n  transition: border-color 0.2s;\n  font-family: inherit;\n}\n\n.form-group input:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 80px;\n}\n\n.modal-actions {\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 24px;\n}\n\n.button-primary {\n  background: #3b82f6;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.button-primary:hover:not(:disabled) {\n  background: #2563eb;\n}\n\n.button-primary:disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n\n.button-secondary {\n  background: white;\n  color: #374151;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s, border-color 0.2s;\n}\n\n.button-secondary:hover {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n/* Loading state */\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n}\n\n.loading-spinner {\n  font-size: 14px;\n}\n\n/* Responsive adjustments */\n@media (max-width: 480px) {\n  .modal-content {\n    margin: 0;\n    border-radius: 0;\n    height: 100vh;\n    max-height: none;\n  }\n  \n  .modal-overlay {\n    padding: 0;\n  }\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.tab-sync-button,\n.logout-button {\n  background: #f3f4f6;\n  color: #374151;\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.2s, color 0.2s;\n}\n\n.tab-sync-button:hover,\n.logout-button:hover {\n  background: #e5e7eb;\n}\n\n/* Auth Form Styles */\n.auth-container {\n  padding: 20px;\n}\n\n.auth-form {\n  margin-top: 40px;\n  text-align: center;\n}\n\n.auth-form h2 {\n  font-size: 24px;\n  font-weight: 600;\n  margin-bottom: 8px;\n}\n\n.auth-form p {\n  font-size: 14px;\n  color: #6b7280;\n  margin-bottom: 24px;\n}\n\n.auth-input {\n  width: 100%;\n  padding: 12px;\n  font-size: 14px;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  margin-bottom: 16px;\n}\n\n.auth-button {\n  width: 100%;\n  padding: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  color: white;\n  background: #3b82f6;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.auth-button:hover {\n  background: #2563eb;\n}\n\n.auth-button:disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n\n.auth-message {\n  margin-top: 16px;\n  font-size: 14px;\n  color: #374151;\n}\n\n/* Tag Input Styles */\n.tag-input-container {\n  position: relative;\n  width: 100%;\n}\n\n.tag-input-wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 6px;\n  padding: 8px 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background-color: white;\n  min-height: 42px;\n  cursor: text;\n  transition: border-color 0.2s ease;\n}\n\n.tag-input-wrapper:focus-within {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.tag-chip {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;\n  border-radius: 16px;\n  color: white;\n  font-size: 12px;\n  font-weight: 500;\n  white-space: nowrap;\n  max-width: 150px;\n}\n\n.tag-name {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tag-remove {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 16px;\n  height: 16px;\n  border: none;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 50%;\n  color: white;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  flex-shrink: 0;\n}\n\n.tag-remove:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.tag-input {\n  flex: 1;\n  border: none;\n  outline: none;\n  font-size: 14px;\n  min-width: 80px;\n  background: transparent;\n}\n\n.tag-input::placeholder {\n  color: #94a3b8;\n}\n\n.tag-input:disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n.tag-input-icon {\n  display: flex;\n  align-items: center;\n  color: #94a3b8;\n  flex-shrink: 0;\n}\n\n.tag-suggestions {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  right: 0;\n  z-index: 1000;\n  margin-top: 4px;\n  background: white;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.tag-suggestion {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  padding: 8px 12px;\n  border: none;\n  background: white;\n  text-align: left;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  font-size: 14px;\n}\n\n.tag-suggestion:hover,\n.tag-suggestion.focused {\n  background-color: #f8fafc;\n}\n\n.tag-suggestion-color {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-suggestion-name {\n  flex: 1;\n  color: #1e293b;\n}\n\n.tag-suggestion-count {\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n/* Tag Filter Styles */\n.tag-filters {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #f8fafc;\n  border-radius: 8px;\n}\n\n.tag-filter {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 12px;\n  border: 1px solid transparent;\n  border-radius: 20px;\n  background: white;\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n\n.tag-filter:hover {\n  border-color: #e2e8f0;\n  transform: translateY(-1px);\n}\n\n.tag-filter.active {\n  background: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n}\n\n.tag-filter-color {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-filter-count {\n  background: rgba(100, 116, 139, 0.1);\n  color: #64748b;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n  margin-left: 4px;\n}\n\n.tag-filter.active .tag-filter-count {\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n}\n\n.tag-filter-skeleton {\n  color: #94a3b8;\n  font-size: 12px;\n  padding: 6px 12px;\n  background: #f1f5f9;\n  border-radius: 20px;\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.tag-filter-more {\n  color: #64748b;\n  font-size: 12px;\n  padding: 6px 12px;\n  background: #f1f5f9;\n  border-radius: 20px;\n  font-weight: 500;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .5;\n  }\n}\n\n/* Tag Cloud Styles */\n.tag-cloud {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  padding: 16px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: #fafafa;\n}\n\n.tag-cloud-item {\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 12px;\n  border-radius: 16px;\n  background: white;\n  border: 1px solid #e2e8f0;\n  color: #64748b;\n  font-size: 12px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n\n.tag-cloud-item:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n  transform: translateY(-1px);\n}\n\n.tag-cloud-count {\n  background: #f1f5f9;\n  color: #64748b;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 10px;\n}\n\n/* Tag Management Modal Styles */\n.tag-management {\n  padding: 16px;\n}\n\n.tag-management-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n}\n\n.tag-management-title {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.tag-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.tag-list-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n}\n\n.tag-list-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n}\n\n.tag-list-color {\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  flex-shrink: 0;\n}\n\n.tag-list-name {\n  font-weight: 500;\n  color: #1e293b;\n}\n\n.tag-list-count {\n  color: #64748b;\n  font-size: 12px;\n}\n\n.tag-list-actions {\n  display: flex;\n  gap: 8px;\n}\n\n.tag-action-btn {\n  padding: 4px 8px;\n  border: 1px solid #e2e8f0;\n  border-radius: 4px;\n  background: white;\n  color: #64748b;\n  font-size: 12px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.tag-action-btn:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.tag-action-btn.danger:hover {\n  border-color: #ef4444;\n  color: #ef4444;\n}\n\n/* Responsive Design */\n@media (max-width: 480px) {\n  .tag-input-wrapper {\n    padding: 6px 8px;\n    min-height: 38px;\n  }\n  \n  .tag-chip {\n    font-size: 11px;\n    padding: 3px 6px;\n  }\n  \n  .tag-filters {\n    padding: 8px;\n    gap: 6px;\n  }\n  \n  .tag-filter {\n    padding: 4px 8px;\n    font-size: 11px;\n  }\n}\n\n/* Tag Editor Styles */\n.tag-editor {\n  margin-top: 12px;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: #fafafa;\n}\n\n.tag-editor-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  color: #374151;\n}\n\n.tag-editor-close {\n  background: none;\n  border: none;\n  font-size: 18px;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 0;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n  transition: background-color 0.2s ease;\n}\n\n.tag-editor-close:hover {\n  background-color: #e5e7eb;\n}\n\n.tag-editor-loading {\n  color: #6b7280;\n  font-size: 14px;\n  padding: 8px 0;\n  text-align: center;\n}\n\n/* Link Tags Display */\n.link-tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 6px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n.link-tag {\n  display: inline-block;\n  padding: 3px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 500;\n  color: white;\n  cursor: pointer;\n  transition: transform 0.2s ease, opacity 0.2s ease;\n  max-width: 100px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.link-tag:hover {\n  transform: translateY(-1px);\n  opacity: 0.9;\n}\n\n/* Tag Results Styles */\n.tag-results {\n  margin-bottom: 24px;\n}\n\n.tag-results-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  padding: 12px;\n  background: #f0fdf4;\n  border: 1px solid #bbf7d0;\n  border-radius: 8px;\n}\n\n.tag-results-header h3 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #166534;\n  margin: 0;\n}\n\n/* Share Modal Styles */\n.share-modal {\n  width: 500px;\n  max-width: 90vw;\n}\n\n.share-collection-info {\n  margin-bottom: 24px;\n  padding: 16px;\n  background: #f8fafc;\n  border-radius: 8px;\n  border: 1px solid #e2e8f0;\n}\n\n.collection-name {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0 0 8px 0;\n}\n\n.collection-description {\n  color: #64748b;\n  margin: 0 0 12px 0;\n  line-height: 1.5;\n}\n\n.collection-meta {\n  font-size: 12px;\n  color: #94a3b8;\n}\n\n.share-toggle-section {\n  margin-bottom: 24px;\n  padding: 20px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n}\n\n.share-toggle-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 16px;\n}\n\n.share-status {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n}\n\n.status-icon {\n  flex-shrink: 0;\n}\n\n.status-icon.public {\n  color: #10b981;\n}\n\n.status-icon.private {\n  color: #6b7280;\n}\n\n.status-title {\n  font-weight: 600;\n  color: #1e293b;\n  margin-bottom: 2px;\n}\n\n.status-subtitle {\n  font-size: 13px;\n  color: #64748b;\n}\n\n.toggle-button {\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  border: none;\n  transition: all 0.2s ease;\n  min-width: 120px;\n}\n\n.toggle-button.private {\n  background: #3b82f6;\n  color: white;\n}\n\n.toggle-button.private:hover:not(:disabled) {\n  background: #2563eb;\n}\n\n.toggle-button.public {\n  background: #ef4444;\n  color: white;\n}\n\n.toggle-button.public:hover:not(:disabled) {\n  background: #dc2626;\n}\n\n.toggle-button:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.share-link-section {\n  margin-bottom: 24px;\n  padding: 20px;\n  border: 1px solid #d1fae5;\n  border-radius: 8px;\n  background: #f0fdf4;\n}\n\n.share-link-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 12px;\n  font-weight: 600;\n  color: #166534;\n}\n\n.share-link-container {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.share-link-input {\n  flex: 1;\n  padding: 10px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  font-size: 13px;\n  color: #374151;\n  font-family: monospace;\n}\n\n.share-link-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.share-link-actions {\n  display: flex;\n  gap: 4px;\n}\n\n.copy-button,\n.open-button {\n  padding: 10px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #6b7280;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.copy-button:hover,\n.open-button:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.copy-button.copied {\n  background: #10b981;\n  color: white;\n  border-color: #10b981;\n}\n\n.share-analytics {\n  display: flex;\n  gap: 16px;\n}\n\n.analytics-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  padding: 6px 12px;\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 16px;\n  font-size: 13px;\n  color: #64748b;\n}\n\n.share-message {\n  padding: 12px;\n  border-radius: 6px;\n  margin-bottom: 16px;\n  font-size: 14px;\n}\n\n.share-message.success {\n  background: #f0fdf4;\n  color: #166534;\n  border: 1px solid #bbf7d0;\n}\n\n.share-message.error {\n  background: #fef2f2;\n  color: #dc2626;\n  border: 1px solid #fecaca;\n}\n\n.share-info-box {\n  padding: 16px;\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  margin-bottom: 16px;\n}\n\n.share-info-box h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.share-info-box ul {\n  margin: 0;\n  padding-left: 16px;\n  list-style-type: disc;\n}\n\n.share-info-box li {\n  margin-bottom: 6px;\n  font-size: 13px;\n  color: #64748b;\n  line-height: 1.4;\n}\n\n.share-info-box li:last-child {\n  margin-bottom: 0;\n}\n\n/* Settings Modal Styles */\n.settings-modal {\n  width: 700px;\n  max-width: 95vw;\n  max-height: 90vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n}\n\n.settings-content {\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n}\n\n.settings-tabs {\n  display: flex;\n  flex-direction: column;\n  background: #f8fafc;\n  border-right: 1px solid #e2e8f0;\n  min-width: 160px;\n  padding: 16px 0;\n}\n\n.settings-tab {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  border: none;\n  background: transparent;\n  color: #64748b;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: left;\n  border-radius: 0;\n}\n\n.settings-tab:hover {\n  background: #e2e8f0;\n  color: #1e293b;\n}\n\n.settings-tab.active {\n  background: #3b82f6;\n  color: white;\n}\n\n.settings-panel {\n  flex: 1;\n  overflow-y: auto;\n  padding: 24px;\n}\n\n.settings-section h3 {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n  margin: 0 0 20px 0;\n}\n\n.setting-group {\n  margin-bottom: 32px;\n}\n\n.setting-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  background: white;\n  margin-bottom: 12px;\n  gap: 16px;\n}\n\n.setting-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n  min-width: 0;\n}\n\n.setting-label {\n  font-weight: 500;\n  color: #1e293b;\n  margin-bottom: 2px;\n}\n\n.setting-description {\n  font-size: 13px;\n  color: #64748b;\n  line-height: 1.4;\n}\n\n/* Toggle Switch Styles */\n.toggle-switch {\n  position: relative;\n  display: inline-block;\n  width: 44px;\n  height: 24px;\n  cursor: pointer;\n}\n\n.toggle-switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.toggle-slider {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #cbd5e1;\n  border-radius: 24px;\n  transition: 0.3s;\n}\n\n.toggle-slider:before {\n  position: absolute;\n  content: \"\";\n  height: 18px;\n  width: 18px;\n  left: 3px;\n  bottom: 3px;\n  background-color: white;\n  border-radius: 50%;\n  transition: 0.3s;\n}\n\n.toggle-switch input:checked + .toggle-slider {\n  background-color: #3b82f6;\n}\n\n.toggle-switch input:checked + .toggle-slider:before {\n  transform: translateX(20px);\n}\n\n.toggle-switch input:disabled + .toggle-slider {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n/* Settings Controls */\n.settings-select {\n  padding: 8px 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  min-width: 120px;\n}\n\n.settings-select:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.settings-select:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.settings-button {\n  padding: 8px 16px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  background: white;\n  color: #374151;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.settings-button:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.settings-button.danger {\n  background: #ef4444;\n  color: white;\n  border-color: #ef4444;\n}\n\n.settings-button.danger:hover {\n  background: #dc2626;\n  border-color: #dc2626;\n}\n\n/* Stats Grid */\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 16px;\n  margin: 24px 0;\n}\n\n.stat-card {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 16px;\n  text-align: center;\n}\n\n.stat-number {\n  font-size: 24px;\n  font-weight: 700;\n  color: #3b82f6;\n  margin-bottom: 4px;\n}\n\n.stat-label {\n  font-size: 12px;\n  color: #64748b;\n  font-weight: 500;\n}\n\n/* Data Usage */\n.data-usage {\n  margin-top: 24px;\n  padding: 16px;\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n}\n\n.data-usage h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.usage-items {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n}\n\n.usage-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 13px;\n  color: #64748b;\n}\n\n/* Sharing Stats */\n.sharing-stats {\n  margin-top: 24px;\n  padding: 16px;\n  background: #f0fdf4;\n  border: 1px solid #bbf7d0;\n  border-radius: 8px;\n}\n\n.sharing-stats h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #166534;\n}\n\n.stats-row {\n  display: flex;\n  gap: 24px;\n}\n\n.stat-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 13px;\n  color: #166534;\n}\n\n/* About Section */\n.about-info {\n  margin-bottom: 32px;\n}\n\n.app-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 16px;\n}\n\n.app-logo {\n  width: 48px;\n  height: 48px;\n  background: #3b82f6;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.app-name {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.app-version {\n  font-size: 12px;\n  color: #64748b;\n}\n\n.app-description {\n  color: #64748b;\n  line-height: 1.6;\n  margin: 0;\n}\n\n.support-links {\n  margin-bottom: 32px;\n}\n\n.support-links h4 {\n  margin: 0 0 16px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #1e293b;\n}\n\n.link-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 12px;\n}\n\n.support-link {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  color: #64748b;\n  text-decoration: none;\n  transition: all 0.2s ease;\n  font-size: 14px;\n}\n\n.support-link:hover {\n  border-color: #3b82f6;\n  color: #3b82f6;\n}\n\n.credits {\n  text-align: center;\n  color: #94a3b8;\n  font-size: 12px;\n  line-height: 1.6;\n}\n\n.credits p {\n  margin: 0 0 4px 0;\n}\n\n/* Settings Actions */\n.setting-actions {\n  margin-top: 24px;\n  padding-top: 24px;\n  border-top: 1px solid #e2e8f0;\n}\n\n/* Settings Message */\n.settings-message {\n  position: absolute;\n  bottom: 80px;\n  left: 24px;\n  right: 24px;\n  padding: 12px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  z-index: 1000;\n  animation: slideUp 0.3s ease-out;\n}\n\n.settings-message.success {\n  background: #f0fdf4;\n  color: #166534;\n  border: 1px solid #bbf7d0;\n}\n\n.settings-message.error {\n  background: #fef2f2;\n  color: #dc2626;\n  border: 1px solid #fecaca;\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .settings-modal {\n    width: 100%;\n    max-width: 100vw;\n    max-height: 100vh;\n    border-radius: 0;\n  }\n\n  .settings-content {\n    flex-direction: column;\n  }\n\n  .settings-tabs {\n    flex-direction: row;\n    min-width: auto;\n    border-right: none;\n    border-bottom: 1px solid #e2e8f0;\n    overflow-x: auto;\n    padding: 8px 0;\n  }\n\n  .settings-tab {\n    white-space: nowrap;\n    padding: 8px 12px;\n    min-width: 100px;\n  }\n\n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  .stats-row {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .link-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Inbox Card Styles */\n.inbox-card {\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  margin-bottom: 8px;\n  transition: all 0.2s ease;\n  position: relative;\n}\n\n.inbox-card:hover {\n  border-color: #d1d5db;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.inbox-card.selected {\n  border-color: #3b82f6;\n  background: #f8fafc;\n}\n\n.inbox-card-content {\n  padding: 12px 16px;\n}\n\n.inbox-card-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n}\n\n.inbox-card-checkbox {\n  flex-shrink: 0;\n  padding-top: 2px;\n}\n\n.inbox-card-checkbox input[type=\"checkbox\"] {\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n  accent-color: #3b82f6;\n}\n\n.inbox-card-favicon {\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n  margin-top: 2px;\n}\n\n.inbox-card-title-section {\n  flex: 1;\n  min-width: 0;\n}\n\n.inbox-card-title {\n  margin: 0 0 4px 0;\n  font-size: 14px;\n  font-weight: 500;\n  color: #111827;\n  line-height: 1.4;\n  word-wrap: break-word;\n}\n\n.inbox-card-domain {\n  font-size: 12px;\n  color: #6b7280;\n  font-weight: 500;\n}\n\n.inbox-card-actions {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.inbox-card-link {\n  color: #6b7280;\n  text-decoration: none;\n  padding: 4px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.inbox-card-link:hover {\n  color: #3b82f6;\n  background: #f3f4f6;\n}\n\n.inbox-card-menu-container {\n  position: relative;\n}\n\n.inbox-card-menu-button {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.inbox-card-menu-button:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.inbox-card-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  z-index: 50;\n  min-width: 180px;\n  padding: 4px;\n  margin-top: 4px;\n}\n\n.inbox-card-menu-item {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 8px 12px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #374151;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s;\n}\n\n.inbox-card-menu-item:hover {\n  background: #f3f4f6;\n}\n\n.inbox-card-menu-item.delete {\n  color: #dc2626;\n}\n\n.inbox-card-menu-item.delete:hover {\n  background: #fef2f2;\n}\n\n.inbox-card-submenu {\n  position: absolute;\n  top: 0;\n  right: 100%;\n  background: white;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  z-index: 51;\n  min-width: 160px;\n  padding: 4px;\n  margin-right: 8px;\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.inbox-card-submenu-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 12px;\n  border-bottom: 1px solid #e5e7eb;\n  margin-bottom: 4px;\n  font-size: 12px;\n  font-weight: 600;\n  color: #6b7280;\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n}\n\n.inbox-card-submenu-close {\n  background: none;\n  border: none;\n  color: #6b7280;\n  cursor: pointer;\n  padding: 2px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.inbox-card-submenu-close:hover {\n  color: #374151;\n  background: #f3f4f6;\n}\n\n.inbox-card-submenu-item {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 6px 12px;\n  text-align: left;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #374151;\n  transition: background-color 0.2s;\n}\n\n.inbox-card-submenu-item:hover {\n  background: #f3f4f6;\n}\n\n.inbox-card-submenu-empty {\n  padding: 8px 12px;\n  font-size: 14px;\n  color: #6b7280;\n  text-align: center;\n  font-style: italic;\n}\n\n.inbox-card-summary {\n  margin-top: 8px;\n  padding: 8px 12px;\n  background: #f8fafc;\n  border-radius: 6px;\n  border-left: 3px solid #3b82f6;\n}\n\n.inbox-card-summary p {\n  margin: 0;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #475569;\n}\n\n.inbox-card-note {\n  margin-top: 8px;\n  padding: 8px 12px;\n  background: #fffbeb;\n  border-radius: 6px;\n  border-left: 3px solid #f59e0b;\n}\n\n.inbox-card-note p {\n  margin: 0;\n  font-size: 13px;\n  line-height: 1.4;\n  color: #92400e;\n}\n\n.inbox-card-tags {\n  margin-top: 8px;\n  padding-top: 8px;\n  border-top: 1px solid #e5e7eb;\n}\n\n/* Inbox Section Styles */\n.inbox-section {\n  margin-bottom: 24px;\n}\n\n.inbox-section-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.inbox-section-title {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0;\n}\n\n.inbox-count {\n  background: #fef3c7;\n  color: #d97706;\n  font-size: 12px;\n  font-weight: 500;\n  padding: 2px 8px;\n  border-radius: 12px;\n}\n\n.inbox-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.inbox-action-button {\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  padding: 6px 12px;\n  font-size: 12px;\n  color: #374151;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.inbox-action-button:hover:not(:disabled) {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n\n.inbox-action-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.inbox-action-button.primary {\n  background: #3b82f6;\n  color: white;\n  border-color: #3b82f6;\n}\n\n.inbox-action-button.primary:hover:not(:disabled) {\n  background: #2563eb;\n  border-color: #2563eb;\n}\n\n.inbox-empty {\n  text-align: center;\n  padding: 40px 20px;\n  color: #6b7280;\n}\n\n.inbox-empty-icon {\n  width: 48px;\n  height: 48px;\n  color: #d1d5db;\n  margin: 0 auto 16px;\n}\n\n.inbox-empty h3 {\n  margin: 0 0 8px 0;\n  font-size: 16px;\n  font-weight: 500;\n  color: #374151;\n}\n\n  .inbox-empty p {\n    margin: 0;\n    font-size: 14px;\n    line-height: 1.5;\n  }\n\n  /* Command Palette Styles */\n  .command-palette-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.6);\n    -webkit-backdrop-filter: blur(4px);\n    backdrop-filter: blur(4px);\n    z-index: 1000;\n    display: flex;\n    align-items: flex-start;\n    justify-content: center;\n    padding: 10vh 20px 20px;\n    animation: fadeIn 0.15s ease-out;\n  }\n\n  .command-palette {\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n    width: 100%;\n    max-width: 640px;\n    max-height: 80vh;\n    overflow: hidden;\n    animation: slideIn 0.15s ease-out;\n  }\n\n  .command-palette-header {\n    padding: 16px;\n    border-bottom: 1px solid #e5e7eb;\n  }\n\n  .command-palette-search {\n    position: relative;\n    display: flex;\n    align-items: center;\n  }\n\n  .command-palette-search-icon {\n    position: absolute;\n    left: 12px;\n    color: #6b7280;\n    z-index: 10;\n  }\n\n  .command-palette-input {\n    width: 100%;\n    padding: 12px 16px 12px 44px;\n    border: none;\n    font-size: 16px;\n    background: #f9fafb;\n    border-radius: 8px;\n    outline: none;\n    color: #111827;\n    padding-right: 60px;\n  }\n\n  .command-palette-input::placeholder {\n    color: #9ca3af;\n  }\n\n  .command-palette-shortcut {\n    position: absolute;\n    right: 12px;\n    display: flex;\n    align-items: center;\n    gap: 2px;\n    background: white;\n    border: 1px solid #d1d5db;\n    border-radius: 4px;\n    padding: 4px 6px;\n    font-size: 11px;\n    color: #6b7280;\n    font-weight: 500;\n  }\n\n  .command-palette-content {\n    max-height: 400px;\n    overflow-y: auto;\n    padding: 8px 0;\n  }\n\n  .command-palette-item {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    padding: 12px 16px;\n    cursor: pointer;\n    transition: all 0.1s ease;\n    border-left: 3px solid transparent;\n  }\n\n  .command-palette-item:hover,\n  .command-palette-item.selected {\n    background: #f8fafc;\n    border-left-color: #3b82f6;\n  }\n\n  .command-palette-item.selected {\n    background: #eff6ff;\n  }\n\n  .command-palette-item-icon {\n    flex-shrink: 0;\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 6px;\n    background: #f3f4f6;\n    color: #6b7280;\n  }\n\n  .command-palette-item.selected .command-palette-item-icon {\n    background: #dbeafe;\n    color: #3b82f6;\n  }\n\n  .command-palette-item-content {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .command-palette-item-title {\n    font-size: 14px;\n    font-weight: 500;\n    color: #111827;\n    margin-bottom: 2px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .command-palette-item-subtitle {\n    font-size: 12px;\n    color: #6b7280;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .command-palette-item-action {\n    flex-shrink: 0;\n    color: #d1d5db;\n    transition: color 0.1s ease;\n  }\n\n  .command-palette-item.selected .command-palette-item-action {\n    color: #6b7280;\n  }\n\n  .command-palette-empty {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 40px 20px;\n    color: #6b7280;\n    text-align: center;\n  }\n\n  .command-palette-empty svg {\n    margin-bottom: 12px;\n    color: #d1d5db;\n  }\n\n  .command-palette-empty p {\n    margin: 0 0 4px 0;\n    font-size: 14px;\n    font-weight: 500;\n    color: #374151;\n  }\n\n  .command-palette-empty span {\n    font-size: 12px;\n    color: #9ca3af;\n  }\n\n  .command-palette-footer {\n    padding: 12px 16px;\n    border-top: 1px solid #e5e7eb;\n    background: #f9fafb;\n  }\n\n  .command-palette-tips {\n    display: flex;\n    gap: 16px;\n    align-items: center;\n    justify-content: center;\n    font-size: 11px;\n    color: #6b7280;\n  }\n\n  .command-palette-tips kbd {\n    display: inline-block;\n    padding: 2px 4px;\n    background: white;\n    border: 1px solid #d1d5db;\n    border-radius: 3px;\n    font-size: 10px;\n    font-weight: 500;\n    color: #374151;\n    margin: 0 2px;\n    font-family: inherit;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  @keyframes slideIn {\n    from {\n      opacity: 0;\n      transform: translateY(-20px) scale(0.98);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n\n  /* Mobile responsive */\n  @media (max-width: 640px) {\n    .command-palette-overlay {\n      padding: 5vh 16px 16px;\n    }\n\n    .command-palette {\n      max-height: 90vh;\n    }\n\n    .command-palette-tips {\n      flex-wrap: wrap;\n      gap: 8px;\n    }\n\n    .command-palette-item {\n      padding: 10px 12px;\n    }\n\n    .command-palette-item-title {\n      font-size: 13px;\n    }\n\n         .command-palette-item-subtitle {\n       font-size: 11px;\n     }\n   }\n\n   /* Tab Sync Styles */\n   .tab-sync-overlay {\n     position: fixed;\n     top: 0;\n     left: 0;\n     right: 0;\n     bottom: 0;\n     background: rgba(0, 0, 0, 0.6);\n     -webkit-backdrop-filter: blur(4px);\n     backdrop-filter: blur(4px);\n     z-index: 1001;\n     display: flex;\n     align-items: center;\n     justify-content: center;\n     padding: 20px;\n     animation: fadeIn 0.15s ease-out;\n   }\n\n   .tab-sync-modal {\n     background: white;\n     border-radius: 12px;\n     box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n     width: 100%;\n     max-width: 900px;\n     max-height: 90vh;\n     overflow: hidden;\n     animation: slideIn 0.15s ease-out;\n     display: flex;\n     flex-direction: column;\n   }\n\n   .tab-sync-header {\n     display: flex;\n     align-items: center;\n     justify-content: space-between;\n     padding: 20px 24px;\n     border-bottom: 1px solid #e5e7eb;\n     background: #f9fafb;\n   }\n\n   .tab-sync-title {\n     display: flex;\n     align-items: center;\n     gap: 12px;\n   }\n\n   .tab-sync-title h2 {\n     margin: 0;\n     font-size: 20px;\n     font-weight: 600;\n     color: #111827;\n   }\n\n   .tab-count {\n     background: #dbeafe;\n     color: #1d4ed8;\n     font-size: 12px;\n     font-weight: 500;\n     padding: 4px 8px;\n     border-radius: 12px;\n   }\n\n   .tab-sync-actions {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n   }\n\n   .tab-sync-refresh,\n   .tab-sync-close {\n     background: none;\n     border: none;\n     color: #6b7280;\n     cursor: pointer;\n     padding: 8px;\n     border-radius: 6px;\n     transition: all 0.2s ease;\n   }\n\n   .tab-sync-refresh:hover,\n   .tab-sync-close:hover {\n     color: #374151;\n     background: #f3f4f6;\n   }\n\n   .tab-sync-refresh:disabled {\n     opacity: 0.5;\n     cursor: not-allowed;\n   }\n\n   .spinning {\n     animation: spin 1s linear infinite;\n   }\n\n   .tab-sync-filters {\n     padding: 16px 24px;\n     border-bottom: 1px solid #e5e7eb;\n     background: #fafafa;\n   }\n\n   .tab-sync-filter-row {\n     display: flex;\n     align-items: center;\n     gap: 16px;\n     margin-bottom: 12px;\n   }\n\n   .tab-sync-filter-checkbox {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     font-size: 14px;\n     color: #374151;\n     cursor: pointer;\n   }\n\n   .tab-sync-filter-checkbox input[type=\"checkbox\"] {\n     width: 16px;\n     height: 16px;\n     cursor: pointer;\n     accent-color: #3b82f6;\n   }\n\n   .tab-sync-domain-filter {\n     flex: 1;\n     padding: 8px 12px;\n     border: 1px solid #d1d5db;\n     border-radius: 6px;\n     font-size: 14px;\n     background: white;\n   }\n\n   .tab-sync-domain-filter:focus {\n     outline: none;\n     border-color: #3b82f6;\n     box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n   }\n\n   .tab-sync-domain-pills {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     flex-wrap: wrap;\n   }\n\n   .domain-pills-label {\n     font-size: 12px;\n     color: #6b7280;\n     font-weight: 500;\n   }\n\n   .domain-pill {\n     background: white;\n     border: 1px solid #d1d5db;\n     border-radius: 16px;\n     padding: 4px 12px;\n     font-size: 12px;\n     color: #374151;\n     cursor: pointer;\n     transition: all 0.2s ease;\n   }\n\n   .domain-pill:hover {\n     border-color: #9ca3af;\n     background: #f9fafb;\n   }\n\n   .domain-pill.active {\n     background: #3b82f6;\n     color: white;\n     border-color: #3b82f6;\n   }\n\n   .tab-sync-bulk-actions {\n     display: flex;\n     align-items: center;\n     gap: 12px;\n     padding: 16px 24px;\n     border-bottom: 1px solid #e5e7eb;\n     background: white;\n   }\n\n   .bulk-action-btn {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     padding: 8px 16px;\n     background: white;\n     border: 1px solid #d1d5db;\n     border-radius: 6px;\n     font-size: 14px;\n     color: #374151;\n     cursor: pointer;\n     transition: all 0.2s ease;\n   }\n\n   .bulk-action-btn:hover:not(:disabled) {\n     background: #f9fafb;\n     border-color: #9ca3af;\n   }\n\n   .bulk-action-btn:disabled {\n     opacity: 0.5;\n     cursor: not-allowed;\n   }\n\n   .bulk-action-btn.primary {\n     background: #3b82f6;\n     color: white;\n     border-color: #3b82f6;\n   }\n\n   .bulk-action-btn.primary:hover:not(:disabled) {\n     background: #2563eb;\n     border-color: #2563eb;\n   }\n\n   .bulk-collection-select {\n     padding: 8px 12px;\n     border: 1px solid #d1d5db;\n     border-radius: 6px;\n     font-size: 14px;\n     background: white;\n     color: #374151;\n     cursor: pointer;\n   }\n\n   .bulk-collection-select:focus {\n     outline: none;\n     border-color: #3b82f6;\n     box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n   }\n\n   .tab-sync-content {\n     flex: 1;\n     overflow-y: auto;\n     padding: 0;\n   }\n\n   .tab-sync-loading,\n   .tab-sync-empty {\n     display: flex;\n     flex-direction: column;\n     align-items: center;\n     justify-content: center;\n     padding: 60px 20px;\n     color: #6b7280;\n     text-align: center;\n   }\n\n   .tab-sync-loading svg,\n   .tab-sync-empty svg {\n     margin-bottom: 16px;\n     color: #d1d5db;\n   }\n\n   .tab-sync-empty h3 {\n     margin: 0 0 8px 0;\n     font-size: 18px;\n     font-weight: 500;\n     color: #374151;\n   }\n\n   .tab-sync-empty p {\n     margin: 0;\n     font-size: 14px;\n     line-height: 1.5;\n   }\n\n   .tab-window-group {\n     border-bottom: 1px solid #e5e7eb;\n   }\n\n   .tab-window-group:last-child {\n     border-bottom: none;\n   }\n\n   .tab-window-header {\n     padding: 12px 24px;\n     background: #f8fafc;\n     border-bottom: 1px solid #e5e7eb;\n   }\n\n   .window-select-btn {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     background: none;\n     border: none;\n     font-size: 14px;\n     font-weight: 500;\n     color: #374151;\n     cursor: pointer;\n     padding: 4px 0;\n     transition: color 0.2s ease;\n   }\n\n   .window-select-btn:hover {\n     color: #3b82f6;\n   }\n\n   .tab-list {\n     padding: 0;\n   }\n\n   .tab-item {\n     display: flex;\n     align-items: center;\n     justify-content: space-between;\n     padding: 12px 24px;\n     border-bottom: 1px solid #f3f4f6;\n     transition: all 0.2s ease;\n   }\n\n   .tab-item:hover {\n     background: #f8fafc;\n   }\n\n   .tab-item.selected {\n     background: #eff6ff;\n     border-left: 3px solid #3b82f6;\n   }\n\n   .tab-item.active {\n     border-left: 3px solid #10b981;\n   }\n\n   .tab-item.selected.active {\n     border-left: 3px solid #3b82f6;\n   }\n\n   .tab-item-content {\n     display: flex;\n     align-items: center;\n     gap: 12px;\n     flex: 1;\n     min-width: 0;\n   }\n\n   .tab-checkbox {\n     width: 16px;\n     height: 16px;\n     cursor: pointer;\n     accent-color: #3b82f6;\n   }\n\n   .tab-favicon {\n     flex-shrink: 0;\n     width: 16px;\n     height: 16px;\n   }\n\n   .tab-info {\n     flex: 1;\n     min-width: 0;\n   }\n\n   .tab-title {\n     display: flex;\n     align-items: center;\n     gap: 6px;\n     font-size: 14px;\n     font-weight: 500;\n     color: #111827;\n     margin-bottom: 2px;\n     white-space: nowrap;\n     overflow: hidden;\n     text-overflow: ellipsis;\n   }\n\n   .tab-pin-indicator {\n     font-size: 12px;\n   }\n\n   .tab-active-indicator {\n     color: #10b981;\n     font-weight: bold;\n     font-size: 16px;\n   }\n\n   .tab-url {\n     font-size: 12px;\n     color: #6b7280;\n     white-space: nowrap;\n     overflow: hidden;\n     text-overflow: ellipsis;\n   }\n\n   .tab-actions {\n     display: flex;\n     align-items: center;\n     gap: 4px;\n   }\n\n   .tab-action-btn {\n     display: flex;\n     align-items: center;\n     justify-content: center;\n     background: none;\n     border: none;\n     color: #6b7280;\n     cursor: pointer;\n     padding: 6px;\n     border-radius: 4px;\n     transition: all 0.2s ease;\n     text-decoration: none;\n   }\n\n   .tab-action-btn:hover {\n     color: #3b82f6;\n     background: #f3f4f6;\n   }\n\n   .tab-action-btn:disabled {\n     opacity: 0.5;\n     cursor: not-allowed;\n   }\n\n   .tab-collection-select {\n     padding: 4px 6px;\n     border: 1px solid #d1d5db;\n     border-radius: 4px;\n     font-size: 12px;\n     background: white;\n     color: #374151;\n     cursor: pointer;\n     min-width: 40px;\n   }\n\n   .tab-collection-select:focus {\n     outline: none;\n     border-color: #3b82f6;\n   }\n\n   .tab-sync-footer {\n     padding: 16px 24px;\n     border-top: 1px solid #e5e7eb;\n     background: #f9fafb;\n   }\n\n   .tab-sync-stats {\n     display: flex;\n     align-items: center;\n     gap: 8px;\n     font-size: 12px;\n     color: #6b7280;\n   }\n\n   /* Mobile responsive */\n   @media (max-width: 768px) {\n     .tab-sync-overlay {\n       padding: 10px;\n     }\n\n     .tab-sync-modal {\n       max-height: 95vh;\n     }\n\n     .tab-sync-header {\n       padding: 16px;\n     }\n\n     .tab-sync-title h2 {\n       font-size: 18px;\n     }\n\n     .tab-sync-filters {\n       padding: 12px 16px;\n     }\n\n     .tab-sync-filter-row {\n       flex-direction: column;\n       align-items: stretch;\n       gap: 12px;\n     }\n\n     .tab-sync-bulk-actions {\n       padding: 12px 16px;\n       flex-wrap: wrap;\n       gap: 8px;\n     }\n\n     .tab-item {\n       padding: 10px 16px;\n     }\n\n     .tab-title {\n       font-size: 13px;\n     }\n\n     .tab-url {\n       font-size: 11px;\n     }\n\n     .tab-actions {\n       gap: 2px;\n     }\n\n     .tab-sync-footer {\n       padding: 12px 16px;\n     }\n\n     .tab-sync-stats {\n       flex-wrap: wrap;\n       gap: 4px;\n     }\n   }\n\n  /* Highlight Components */\n  .link-highlights-section {\n    margin-top: 12px;\n    border: 1px solid #e5e7eb;\n    border-radius: 8px;\n    background: #f9fafb;\n    overflow: hidden;\n  }\n\n  .highlights-header {\n    padding: 8px 12px;\n    background: #f3f4f6;\n    border-bottom: 1px solid #e5e7eb;\n  }\n\n  .highlights-toggle {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    width: 100%;\n    background: none;\n    border: none;\n    font-size: 13px;\n    font-weight: 500;\n    color: #374151;\n    cursor: pointer;\n    padding: 0;\n  }\n\n  .highlights-toggle:hover {\n    color: #111827;\n  }\n\n  .highlights-toggle svg:first-child {\n    color: #8b5cf6;\n  }\n\n  .highlights-chevron {\n    margin-left: auto;\n    color: #6b7280;\n    transition: transform 0.2s ease;\n  }\n\n  .highlights-chevron.expanded {\n    transform: rotate(180deg);\n  }\n\n  .highlights-list {\n    padding: 12px;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n\n  .highlight-card {\n    background: white;\n    border: 1px solid #e5e7eb;\n    border-radius: 6px;\n    padding: 12px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .highlight-content {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .highlight-text {\n    display: flex;\n    align-items: flex-start;\n    gap: 8px;\n  }\n\n  .highlight-icon {\n    color: #8b5cf6;\n    margin-top: 2px;\n    flex-shrink: 0;\n  }\n\n  .highlight-selected-text {\n    font-style: italic;\n    color: #374151;\n    font-size: 14px;\n    line-height: 1.5;\n    margin: 0;\n    padding: 8px 12px;\n    background: #f8fafc;\n    border-left: 3px solid #8b5cf6;\n    border-radius: 0 4px 4px 0;\n  }\n\n  .highlight-context {\n    padding-left: 24px;\n  }\n\n  .highlight-context p {\n    font-size: 12px;\n    color: #6b7280;\n    margin: 0;\n    line-height: 1.4;\n    max-height: 60px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .highlight-note {\n    padding-left: 24px;\n  }\n\n  .highlight-note p {\n    font-size: 13px;\n    color: #374151;\n    margin: 0;\n    padding: 8px 12px;\n    background: #fef3c7;\n    border-left: 3px solid #f59e0b;\n    border-radius: 0 4px 4px 0;\n    line-height: 1.4;\n  }\n\n  .highlight-note-form {\n    padding-left: 24px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .highlight-note-form textarea {\n    width: 100%;\n    min-height: 60px;\n    padding: 8px 12px;\n    border: 1px solid #d1d5db;\n    border-radius: 4px;\n    font-size: 13px;\n    line-height: 1.4;\n    resize: vertical;\n    font-family: inherit;\n  }\n\n  .highlight-note-form textarea:focus {\n    outline: none;\n    border-color: #8b5cf6;\n    box-shadow: 0 0 0 1px #8b5cf6;\n  }\n\n  .highlight-note-actions {\n    display: flex;\n    gap: 8px;\n    justify-content: flex-end;\n  }\n\n  .highlight-note-actions .save-button {\n    background: #8b5cf6;\n    color: white;\n    border: none;\n    padding: 6px 12px;\n    border-radius: 4px;\n    font-size: 12px;\n    font-weight: 500;\n    cursor: pointer;\n  }\n\n  .highlight-note-actions .save-button:hover {\n    background: #7c3aed;\n  }\n\n  .highlight-note-actions .cancel-button {\n    background: #f3f4f6;\n    color: #374151;\n    border: 1px solid #d1d5db;\n    padding: 6px 12px;\n    border-radius: 4px;\n    font-size: 12px;\n    font-weight: 500;\n    cursor: pointer;\n  }\n\n  .highlight-note-actions .cancel-button:hover {\n    background: #e5e7eb;\n  }\n\n  .highlight-actions {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding-top: 8px;\n    border-top: 1px solid #f3f4f6;\n  }\n\n  .highlight-date {\n    font-size: 11px;\n    color: #9ca3af;\n  }\n\n  .highlight-buttons {\n    display: flex;\n    gap: 4px;\n  }\n\n  .highlight-action-button {\n    background: none;\n    border: none;\n    padding: 4px;\n    border-radius: 4px;\n    color: #6b7280;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .highlight-action-button:hover {\n    color: #374151;\n    background: #f3f4f6;\n  }\n\n  .highlight-action-button.delete-button:hover {\n    color: #dc2626;\n    background: #fef2f2;\n  }\n\n  /* Update command palette to include highlight actions */\n  .command-palette-section .command-item[data-action*=\"highlight\"] {\n    --command-icon-color: #8b5cf6;\n  }\n\n  /* Mobile responsive adjustments for highlights */\n  @media (max-width: 768px) {\n    .highlight-card {\n      padding: 10px;\n    }\n    \n    .highlight-selected-text {\n      font-size: 13px;\n      padding: 6px 10px;\n    }\n    \n    .highlight-note p {\n      font-size: 12px;\n      padding: 6px 10px;\n    }\n    \n    .highlight-note-form {\n      padding-left: 16px;\n    }\n    \n    .highlight-text {\n      gap: 6px;\n    }\n    \n    .highlight-context {\n      padding-left: 16px;\n    }\n    \n    .highlight-note {\n      padding-left: 16px;\n    }\n  }\n\n "],sourceRoot:""}]);const s=a},206:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},261:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(660));class i extends o.default{select(n){let e=!1;const t=(null!=n?n:"*").split("").map(n=>/\s/.test(n)&&!e?"":('"'===n&&(e=!e),n)).join("");return this.url.searchParams.set("select",t),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(n,{ascending:e=!0,nullsFirst:t,foreignTable:r,referencedTable:o=r}={}){const i=o?`${o}.order`:"order",a=this.url.searchParams.get(i);return this.url.searchParams.set(i,`${a?`${a},`:""}${n}.${e?"asc":"desc"}${void 0===t?"":t?".nullsfirst":".nullslast"}`),this}limit(n,{foreignTable:e,referencedTable:t=e}={}){const r=void 0===t?"limit":`${t}.limit`;return this.url.searchParams.set(r,`${n}`),this}range(n,e,{foreignTable:t,referencedTable:r=t}={}){const o=void 0===r?"offset":`${r}.offset`,i=void 0===r?"limit":`${r}.limit`;return this.url.searchParams.set(o,`${n}`),this.url.searchParams.set(i,""+(e-n+1)),this}abortSignal(n){return this.signal=n,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return"GET"===this.method?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:n=!1,verbose:e=!1,settings:t=!1,buffers:r=!1,wal:o=!1,format:i="text"}={}){var a;const s=[n?"analyze":null,e?"verbose":null,t?"settings":null,r?"buffers":null,o?"wal":null].filter(Boolean).join("|"),l=null!==(a=this.headers.Accept)&&void 0!==a?a:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${i}; for="${l}"; options=${s};`,this}rollback(){var n;return(null!==(n=this.headers.Prefer)&&void 0!==n?n:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}}e.default=i},279:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0}),e.PostgrestError=e.PostgrestBuilder=e.PostgrestTransformBuilder=e.PostgrestFilterBuilder=e.PostgrestQueryBuilder=e.PostgrestClient=void 0;const o=r(t(342));e.PostgrestClient=o.default;const i=r(t(45));e.PostgrestQueryBuilder=i.default;const a=r(t(825));e.PostgrestFilterBuilder=a.default;const s=r(t(261));e.PostgrestTransformBuilder=s.default;const l=r(t(660));e.PostgrestBuilder=l.default;const c=r(t(818));e.PostgrestError=c.default,e.default={PostgrestClient:o.default,PostgrestQueryBuilder:i.default,PostgrestFilterBuilder:a.default,PostgrestTransformBuilder:s.default,PostgrestBuilder:l.default,PostgrestError:c.default}},287:(n,e)=>{var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),A=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function m(n,e,t){this.props=n,this.context=e,this.refs=g,this.updater=t||p}function b(){}function x(n,e,t){this.props=n,this.context=e,this.refs=g,this.updater=t||p}m.prototype.isReactComponent={},m.prototype.setState=function(n,e){if("object"!=typeof n&&"function"!=typeof n&&null!=n)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,n,e,"setState")},m.prototype.forceUpdate=function(n){this.updater.enqueueForceUpdate(this,n,"forceUpdate")},b.prototype=m.prototype;var y=x.prototype=new b;y.constructor=x,h(y,m.prototype),y.isPureReactComponent=!0;var C=Array.isArray,v=Object.prototype.hasOwnProperty,B={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function k(n,e,r){var o,i={},a=null,s=null;if(null!=e)for(o in void 0!==e.ref&&(s=e.ref),void 0!==e.key&&(a=""+e.key),e)v.call(e,o)&&!E.hasOwnProperty(o)&&(i[o]=e[o]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];i.children=c}if(n&&n.defaultProps)for(o in l=n.defaultProps)void 0===i[o]&&(i[o]=l[o]);return{$$typeof:t,type:n,key:a,ref:s,props:i,_owner:B.current}}function w(n){return"object"==typeof n&&null!==n&&n.$$typeof===t}var j=/\/+/g;function S(n,e){return"object"==typeof n&&null!==n&&null!=n.key?function(n){var e={"=":"=0",":":"=2"};return"$"+n.replace(/[=:]/g,function(n){return e[n]})}(""+n.key):e.toString(36)}function _(n,e,o,i,a){var s=typeof n;"undefined"!==s&&"boolean"!==s||(n=null);var l=!1;if(null===n)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(n.$$typeof){case t:case r:l=!0}}if(l)return a=a(l=n),n=""===i?"."+S(l,0):i,C(a)?(o="",null!=n&&(o=n.replace(j,"$&/")+"/"),_(a,e,o,"",function(n){return n})):null!=a&&(w(a)&&(a=function(n,e){return{$$typeof:t,type:n.type,key:e,ref:n.ref,props:n.props,_owner:n._owner}}(a,o+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(j,"$&/")+"/")+n)),e.push(a)),1;if(l=0,i=""===i?".":i+":",C(n))for(var c=0;c<n.length;c++){var u=i+S(s=n[c],c);l+=_(s,e,o,u,a)}else if(u=function(n){return null===n||"object"!=typeof n?null:"function"==typeof(n=f&&n[f]||n["@@iterator"])?n:null}(n),"function"==typeof u)for(n=u.call(n),c=0;!(s=n.next()).done;)l+=_(s=s.value,e,o,u=i+S(s,c++),a);else if("object"===s)throw e=String(n),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return l}function N(n,e,t){if(null==n)return n;var r=[],o=0;return _(n,r,"","",function(n){return e.call(t,n,o++)}),r}function I(n){if(-1===n._status){var e=n._result;(e=e()).then(function(e){0!==n._status&&-1!==n._status||(n._status=1,n._result=e)},function(e){0!==n._status&&-1!==n._status||(n._status=2,n._result=e)}),-1===n._status&&(n._status=0,n._result=e)}if(1===n._status)return n._result.default;throw n._result}var z={current:null},T={transition:null},O={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:T,ReactCurrentOwner:B};function P(){throw Error("act(...) is not supported in production builds of React.")}e.Children={map:N,forEach:function(n,e,t){N(n,function(){e.apply(this,arguments)},t)},count:function(n){var e=0;return N(n,function(){e++}),e},toArray:function(n){return N(n,function(n){return n})||[]},only:function(n){if(!w(n))throw Error("React.Children.only expected to receive a single React element child.");return n}},e.Component=m,e.Fragment=o,e.Profiler=a,e.PureComponent=x,e.StrictMode=i,e.Suspense=u,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,e.act=P,e.cloneElement=function(n,e,r){if(null==n)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+n+".");var o=h({},n.props),i=n.key,a=n.ref,s=n._owner;if(null!=e){if(void 0!==e.ref&&(a=e.ref,s=B.current),void 0!==e.key&&(i=""+e.key),n.type&&n.type.defaultProps)var l=n.type.defaultProps;for(c in e)v.call(e,c)&&!E.hasOwnProperty(c)&&(o[c]=void 0===e[c]&&void 0!==l?l[c]:e[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];o.children=l}return{$$typeof:t,type:n.type,key:i,ref:a,props:o,_owner:s}},e.createContext=function(n){return(n={$$typeof:l,_currentValue:n,_currentValue2:n,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:n},n.Consumer=n},e.createElement=k,e.createFactory=function(n){var e=k.bind(null,n);return e.type=n,e},e.createRef=function(){return{current:null}},e.forwardRef=function(n){return{$$typeof:c,render:n}},e.isValidElement=w,e.lazy=function(n){return{$$typeof:A,_payload:{_status:-1,_result:n},_init:I}},e.memo=function(n,e){return{$$typeof:d,type:n,compare:void 0===e?null:e}},e.startTransition=function(n){var e=T.transition;T.transition={};try{n()}finally{T.transition=e}},e.unstable_act=P,e.useCallback=function(n,e){return z.current.useCallback(n,e)},e.useContext=function(n){return z.current.useContext(n)},e.useDebugValue=function(){},e.useDeferredValue=function(n){return z.current.useDeferredValue(n)},e.useEffect=function(n,e){return z.current.useEffect(n,e)},e.useId=function(){return z.current.useId()},e.useImperativeHandle=function(n,e,t){return z.current.useImperativeHandle(n,e,t)},e.useInsertionEffect=function(n,e){return z.current.useInsertionEffect(n,e)},e.useLayoutEffect=function(n,e){return z.current.useLayoutEffect(n,e)},e.useMemo=function(n,e){return z.current.useMemo(n,e)},e.useReducer=function(n,e,t){return z.current.useReducer(n,e,t)},e.useRef=function(n){return z.current.useRef(n)},e.useState=function(n){return z.current.useState(n)},e.useSyncExternalStore=function(n,e,t){return z.current.useSyncExternalStore(n,e,t)},e.useTransition=function(){return z.current.useTransition()},e.version="18.3.1"},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t}).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<n.length;c++){var u=[].concat(n[c]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},338:(n,e,t)=>{var r=t(961);e.H=r.createRoot,r.hydrateRoot},342:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(45)),i=r(t(825)),a=t(530);class s{constructor(n,{headers:e={},schema:t,fetch:r}={}){this.url=n,this.headers=Object.assign(Object.assign({},a.DEFAULT_HEADERS),e),this.schemaName=t,this.fetch=r}from(n){const e=new URL(`${this.url}/${n}`);return new o.default(e,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(n){return new s(this.url,{headers:this.headers,schema:n,fetch:this.fetch})}rpc(n,e={},{head:t=!1,get:r=!1,count:o}={}){let a;const s=new URL(`${this.url}/rpc/${n}`);let l;t||r?(a=t?"HEAD":"GET",Object.entries(e).filter(([n,e])=>void 0!==e).map(([n,e])=>[n,Array.isArray(e)?`{${e.join(",")}}`:`${e}`]).forEach(([n,e])=>{s.searchParams.append(n,e)})):(a="POST",l=e);const c=Object.assign({},this.headers);return o&&(c.Prefer=`count=${o}`),new i.default({method:a,url:s,headers:c,schema:this.schemaName,body:l,fetch:this.fetch,allowEmpty:!1})}}e.default=s},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},463:(n,e)=>{function t(n,e){var t=n.length;n.push(e);n:for(;0<t;){var r=t-1>>>1,o=n[r];if(!(0<i(o,e)))break n;n[r]=e,n[t]=o,t=r}}function r(n){return 0===n.length?null:n[0]}function o(n){if(0===n.length)return null;var e=n[0],t=n.pop();if(t!==e){n[0]=t;n:for(var r=0,o=n.length,a=o>>>1;r<a;){var s=2*(r+1)-1,l=n[s],c=s+1,u=n[c];if(0>i(l,t))c<o&&0>i(u,l)?(n[r]=u,n[c]=t,r=c):(n[r]=l,n[s]=t,r=s);else{if(!(c<o&&0>i(u,t)))break n;n[r]=u,n[c]=t,r=c}}}return e}function i(n,e){var t=n.sortIndex-e.sortIndex;return 0!==t?t:n.id-e.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();e.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,A=null,f=3,p=!1,h=!1,g=!1,m="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,x="undefined"!=typeof setImmediate?setImmediate:null;function y(n){for(var e=r(u);null!==e;){if(null===e.callback)o(u);else{if(!(e.startTime<=n))break;o(u),e.sortIndex=e.expirationTime,t(c,e)}e=r(u)}}function C(n){if(g=!1,y(n),!h)if(null!==r(c))h=!0,T(v);else{var e=r(u);null!==e&&O(C,e.startTime-n)}}function v(n,t){h=!1,g&&(g=!1,b(w),w=-1),p=!0;var i=f;try{for(y(t),A=r(c);null!==A&&(!(A.expirationTime>t)||n&&!_());){var a=A.callback;if("function"==typeof a){A.callback=null,f=A.priorityLevel;var s=a(A.expirationTime<=t);t=e.unstable_now(),"function"==typeof s?A.callback=s:A===r(c)&&o(c),y(t)}else o(c);A=r(c)}if(null!==A)var l=!0;else{var d=r(u);null!==d&&O(C,d.startTime-t),l=!1}return l}finally{A=null,f=i,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var B,E=!1,k=null,w=-1,j=5,S=-1;function _(){return!(e.unstable_now()-S<j)}function N(){if(null!==k){var n=e.unstable_now();S=n;var t=!0;try{t=k(!0,n)}finally{t?B():(E=!1,k=null)}}else E=!1}if("function"==typeof x)B=function(){x(N)};else if("undefined"!=typeof MessageChannel){var I=new MessageChannel,z=I.port2;I.port1.onmessage=N,B=function(){z.postMessage(null)}}else B=function(){m(N,0)};function T(n){k=n,E||(E=!0,B())}function O(n,t){w=m(function(){n(e.unstable_now())},t)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(n){n.callback=null},e.unstable_continueExecution=function(){h||p||(h=!0,T(v))},e.unstable_forceFrameRate=function(n){0>n||125<n?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):j=0<n?Math.floor(1e3/n):5},e.unstable_getCurrentPriorityLevel=function(){return f},e.unstable_getFirstCallbackNode=function(){return r(c)},e.unstable_next=function(n){switch(f){case 1:case 2:case 3:var e=3;break;default:e=f}var t=f;f=e;try{return n()}finally{f=t}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(n,e){switch(n){case 1:case 2:case 3:case 4:case 5:break;default:n=3}var t=f;f=n;try{return e()}finally{f=t}},e.unstable_scheduleCallback=function(n,o,i){var a=e.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,n){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return n={id:d++,callback:o,priorityLevel:n,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>a?(n.sortIndex=i,t(u,n),null===r(c)&&n===r(u)&&(g?(b(w),w=-1):g=!0,O(C,i-a))):(n.sortIndex=s,t(c,n),h||p||(h=!0,T(v))),n},e.unstable_shouldYield=_,e.unstable_wrapCallback=function(n){var e=f;return function(){var t=f;f=e;try{return n.apply(this,arguments)}finally{f=t}}}},519:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.version=void 0,e.version="0.0.0-automated"},530:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_HEADERS=void 0;const r=t(519);e.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${r.version}`}},540:(n,e,t)=>{n.exports=t(287)},551:(n,e,t)=>{var r=t(540),o=t(982);function i(n){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+n,t=1;t<arguments.length;t++)e+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+n+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(n,e){c(n,e),c(n+"Capture",e)}function c(n,e){for(s[n]=e,n=0;n<e.length;n++)a.add(e[n])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,A=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function h(n,e,t,r,o,i,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=t,this.propertyName=n,this.type=e,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(n){g[n]=new h(n,0,!1,n,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(n){var e=n[0];g[e]=new h(e,1,!1,n[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(n){g[n]=new h(n,2,!1,n.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(n){g[n]=new h(n,2,!1,n,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(n){g[n]=new h(n,3,!1,n.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(n){g[n]=new h(n,3,!0,n,null,!1,!1)}),["capture","download"].forEach(function(n){g[n]=new h(n,4,!1,n,null,!1,!1)}),["cols","rows","size","span"].forEach(function(n){g[n]=new h(n,6,!1,n,null,!1,!1)}),["rowSpan","start"].forEach(function(n){g[n]=new h(n,5,!1,n.toLowerCase(),null,!1,!1)});var m=/[\-:]([a-z])/g;function b(n){return n[1].toUpperCase()}function x(n,e,t,r){var o=g.hasOwnProperty(e)?g[e]:null;(null!==o?0!==o.type:r||!(2<e.length)||"o"!==e[0]&&"O"!==e[0]||"n"!==e[1]&&"N"!==e[1])&&(function(n,e,t,r){if(null==e||function(n,e,t,r){if(null!==t&&0===t.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(n=n.toLowerCase().slice(0,5))&&"aria-"!==n);default:return!1}}(n,e,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,t,o,r)&&(t=null),r||null===o?function(n){return!!d.call(p,n)||!d.call(f,n)&&(A.test(n)?p[n]=!0:(f[n]=!0,!1))}(e)&&(null===t?n.removeAttribute(e):n.setAttribute(e,""+t)):o.mustUseProperty?n[o.propertyName]=null===t?3!==o.type&&"":t:(e=o.attributeName,r=o.attributeNamespace,null===t?n.removeAttribute(e):(t=3===(o=o.type)||4===o&&!0===t?"":""+t,r?n.setAttributeNS(r,e,t):n.setAttribute(e,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(n){var e=n.replace(m,b);g[e]=new h(e,1,!1,n,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(n){var e=n.replace(m,b);g[e]=new h(e,1,!1,n,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(n){var e=n.replace(m,b);g[e]=new h(e,1,!1,n,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(n){g[n]=new h(n,1,!1,n.toLowerCase(),null,!1,!1)}),g.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(n){g[n]=new h(n,1,!1,n.toLowerCase(),null,!0,!0)});var y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,C=Symbol.for("react.element"),v=Symbol.for("react.portal"),B=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),w=Symbol.for("react.provider"),j=Symbol.for("react.context"),S=Symbol.for("react.forward_ref"),_=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),I=Symbol.for("react.memo"),z=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var T=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var O=Symbol.iterator;function P(n){return null===n||"object"!=typeof n?null:"function"==typeof(n=O&&n[O]||n["@@iterator"])?n:null}var L,R=Object.assign;function M(n){if(void 0===L)try{throw Error()}catch(n){var e=n.stack.trim().match(/\n( *(at )?)/);L=e&&e[1]||""}return"\n"+L+n}var D=!1;function U(n,e){if(!n||D)return"";D=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(n){var r=n}Reflect.construct(n,[],e)}else{try{e.call()}catch(n){r=n}n.call(e.prototype)}else{try{throw Error()}catch(n){r=n}n()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s]){var l="\n"+o[a].replace(" at new "," at ");return n.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",n.displayName)),l}}while(1<=a&&0<=s);break}}}finally{D=!1,Error.prepareStackTrace=t}return(n=n?n.displayName||n.name:"")?M(n):""}function K(n){switch(n.tag){case 5:return M(n.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return U(n.type,!1);case 11:return U(n.type.render,!1);case 1:return U(n.type,!0);default:return""}}function $(n){if(null==n)return null;if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n;switch(n){case B:return"Fragment";case v:return"Portal";case k:return"Profiler";case E:return"StrictMode";case _:return"Suspense";case N:return"SuspenseList"}if("object"==typeof n)switch(n.$$typeof){case j:return(n.displayName||"Context")+".Consumer";case w:return(n._context.displayName||"Context")+".Provider";case S:var e=n.render;return(n=n.displayName)||(n=""!==(n=e.displayName||e.name||"")?"ForwardRef("+n+")":"ForwardRef"),n;case I:return null!==(e=n.displayName||null)?e:$(n.type)||"Memo";case z:e=n._payload,n=n._init;try{return $(n(e))}catch(n){}}return null}function F(n){var e=n.type;switch(n.tag){case 24:return"Cache";case 9:return(e.displayName||"Context")+".Consumer";case 10:return(e._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return n=(n=e.render).displayName||n.name||"",e.displayName||(""!==n?"ForwardRef("+n+")":"ForwardRef");case 7:return"Fragment";case 5:return e;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(e);case 8:return e===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e}return null}function q(n){switch(typeof n){case"boolean":case"number":case"string":case"undefined":case"object":return n;default:return""}}function Y(n){var e=n.type;return(n=n.nodeName)&&"input"===n.toLowerCase()&&("checkbox"===e||"radio"===e)}function W(n){n._valueTracker||(n._valueTracker=function(n){var e=Y(n)?"checked":"value",t=Object.getOwnPropertyDescriptor(n.constructor.prototype,e),r=""+n[e];if(!n.hasOwnProperty(e)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,i=t.set;return Object.defineProperty(n,e,{configurable:!0,get:function(){return o.call(this)},set:function(n){r=""+n,i.call(this,n)}}),Object.defineProperty(n,e,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(n){r=""+n},stopTracking:function(){n._valueTracker=null,delete n[e]}}}}(n))}function G(n){if(!n)return!1;var e=n._valueTracker;if(!e)return!0;var t=e.getValue(),r="";return n&&(r=Y(n)?n.checked?"true":"false":n.value),(n=r)!==t&&(e.setValue(n),!0)}function Q(n){if(void 0===(n=n||("undefined"!=typeof document?document:void 0)))return null;try{return n.activeElement||n.body}catch(e){return n.body}}function V(n,e){var t=e.checked;return R({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:n._wrapperState.initialChecked})}function H(n,e){var t=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;t=q(null!=e.value?e.value:t),n._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function Z(n,e){null!=(e=e.checked)&&x(n,"checked",e,!1)}function X(n,e){Z(n,e);var t=q(e.value),r=e.type;if(null!=t)"number"===r?(0===t&&""===n.value||n.value!=t)&&(n.value=""+t):n.value!==""+t&&(n.value=""+t);else if("submit"===r||"reset"===r)return void n.removeAttribute("value");e.hasOwnProperty("value")?nn(n,e.type,t):e.hasOwnProperty("defaultValue")&&nn(n,e.type,q(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(n.defaultChecked=!!e.defaultChecked)}function J(n,e,t){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!("submit"!==r&&"reset"!==r||void 0!==e.value&&null!==e.value))return;e=""+n._wrapperState.initialValue,t||e===n.value||(n.value=e),n.defaultValue=e}""!==(t=n.name)&&(n.name=""),n.defaultChecked=!!n._wrapperState.initialChecked,""!==t&&(n.name=t)}function nn(n,e,t){"number"===e&&Q(n.ownerDocument)===n||(null==t?n.defaultValue=""+n._wrapperState.initialValue:n.defaultValue!==""+t&&(n.defaultValue=""+t))}var en=Array.isArray;function tn(n,e,t,r){if(n=n.options,e){e={};for(var o=0;o<t.length;o++)e["$"+t[o]]=!0;for(t=0;t<n.length;t++)o=e.hasOwnProperty("$"+n[t].value),n[t].selected!==o&&(n[t].selected=o),o&&r&&(n[t].defaultSelected=!0)}else{for(t=""+q(t),e=null,o=0;o<n.length;o++){if(n[o].value===t)return n[o].selected=!0,void(r&&(n[o].defaultSelected=!0));null!==e||n[o].disabled||(e=n[o])}null!==e&&(e.selected=!0)}}function rn(n,e){if(null!=e.dangerouslySetInnerHTML)throw Error(i(91));return R({},e,{value:void 0,defaultValue:void 0,children:""+n._wrapperState.initialValue})}function on(n,e){var t=e.value;if(null==t){if(t=e.children,e=e.defaultValue,null!=t){if(null!=e)throw Error(i(92));if(en(t)){if(1<t.length)throw Error(i(93));t=t[0]}e=t}null==e&&(e=""),t=e}n._wrapperState={initialValue:q(t)}}function an(n,e){var t=q(e.value),r=q(e.defaultValue);null!=t&&((t=""+t)!==n.value&&(n.value=t),null==e.defaultValue&&n.defaultValue!==t&&(n.defaultValue=t)),null!=r&&(n.defaultValue=""+r)}function sn(n){var e=n.textContent;e===n._wrapperState.initialValue&&""!==e&&null!==e&&(n.value=e)}function ln(n){switch(n){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function cn(n,e){return null==n||"http://www.w3.org/1999/xhtml"===n?ln(e):"http://www.w3.org/2000/svg"===n&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":n}var un,dn,An=(dn=function(n,e){if("http://www.w3.org/2000/svg"!==n.namespaceURI||"innerHTML"in n)n.innerHTML=e;else{for((un=un||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=un.firstChild;n.firstChild;)n.removeChild(n.firstChild);for(;e.firstChild;)n.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(n,e,t,r){MSApp.execUnsafeLocalFunction(function(){return dn(n,e)})}:dn);function fn(n,e){if(e){var t=n.firstChild;if(t&&t===n.lastChild&&3===t.nodeType)return void(t.nodeValue=e)}n.textContent=e}var pn={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},hn=["Webkit","ms","Moz","O"];function gn(n,e,t){return null==e||"boolean"==typeof e||""===e?"":t||"number"!=typeof e||0===e||pn.hasOwnProperty(n)&&pn[n]?(""+e).trim():e+"px"}function mn(n,e){for(var t in n=n.style,e)if(e.hasOwnProperty(t)){var r=0===t.indexOf("--"),o=gn(t,e[t],r);"float"===t&&(t="cssFloat"),r?n.setProperty(t,o):n[t]=o}}Object.keys(pn).forEach(function(n){hn.forEach(function(e){e=e+n.charAt(0).toUpperCase()+n.substring(1),pn[e]=pn[n]})});var bn=R({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xn(n,e){if(e){if(bn[n]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(i(137,n));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(i(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(i(62))}}function yn(n,e){if(-1===n.indexOf("-"))return"string"==typeof e.is;switch(n){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Cn=null;function vn(n){return(n=n.target||n.srcElement||window).correspondingUseElement&&(n=n.correspondingUseElement),3===n.nodeType?n.parentNode:n}var Bn=null,En=null,kn=null;function wn(n){if(n=yo(n)){if("function"!=typeof Bn)throw Error(i(280));var e=n.stateNode;e&&(e=vo(e),Bn(n.stateNode,n.type,e))}}function jn(n){En?kn?kn.push(n):kn=[n]:En=n}function Sn(){if(En){var n=En,e=kn;if(kn=En=null,wn(n),e)for(n=0;n<e.length;n++)wn(e[n])}}function _n(n,e){return n(e)}function Nn(){}var In=!1;function zn(n,e,t){if(In)return n(e,t);In=!0;try{return _n(n,e,t)}finally{In=!1,(null!==En||null!==kn)&&(Nn(),Sn())}}function Tn(n,e){var t=n.stateNode;if(null===t)return null;var r=vo(t);if(null===r)return null;t=r[e];n:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(n=n.type)||"input"===n||"select"===n||"textarea"===n)),n=!r;break n;default:n=!1}if(n)return null;if(t&&"function"!=typeof t)throw Error(i(231,e,typeof t));return t}var On=!1;if(u)try{var Pn={};Object.defineProperty(Pn,"passive",{get:function(){On=!0}}),window.addEventListener("test",Pn,Pn),window.removeEventListener("test",Pn,Pn)}catch(dn){On=!1}function Ln(n,e,t,r,o,i,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{e.apply(t,c)}catch(n){this.onError(n)}}var Rn=!1,Mn=null,Dn=!1,Un=null,Kn={onError:function(n){Rn=!0,Mn=n}};function $n(n,e,t,r,o,i,a,s,l){Rn=!1,Mn=null,Ln.apply(Kn,arguments)}function Fn(n){var e=n,t=n;if(n.alternate)for(;e.return;)e=e.return;else{n=e;do{!!(4098&(e=n).flags)&&(t=e.return),n=e.return}while(n)}return 3===e.tag?t:null}function qn(n){if(13===n.tag){var e=n.memoizedState;if(null===e&&null!==(n=n.alternate)&&(e=n.memoizedState),null!==e)return e.dehydrated}return null}function Yn(n){if(Fn(n)!==n)throw Error(i(188))}function Wn(n){return null!==(n=function(n){var e=n.alternate;if(!e){if(null===(e=Fn(n)))throw Error(i(188));return e!==n?null:n}for(var t=n,r=e;;){var o=t.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){t=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===t)return Yn(o),n;if(a===r)return Yn(o),e;a=a.sibling}throw Error(i(188))}if(t.return!==r.return)t=o,r=a;else{for(var s=!1,l=o.child;l;){if(l===t){s=!0,t=o,r=a;break}if(l===r){s=!0,r=o,t=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===t){s=!0,t=a,r=o;break}if(l===r){s=!0,r=a,t=o;break}l=l.sibling}if(!s)throw Error(i(189))}}if(t.alternate!==r)throw Error(i(190))}if(3!==t.tag)throw Error(i(188));return t.stateNode.current===t?n:e}(n))?Gn(n):null}function Gn(n){if(5===n.tag||6===n.tag)return n;for(n=n.child;null!==n;){var e=Gn(n);if(null!==e)return e;n=n.sibling}return null}var Qn=o.unstable_scheduleCallback,Vn=o.unstable_cancelCallback,Hn=o.unstable_shouldYield,Zn=o.unstable_requestPaint,Xn=o.unstable_now,Jn=o.unstable_getCurrentPriorityLevel,ne=o.unstable_ImmediatePriority,ee=o.unstable_UserBlockingPriority,te=o.unstable_NormalPriority,re=o.unstable_LowPriority,oe=o.unstable_IdlePriority,ie=null,ae=null,se=Math.clz32?Math.clz32:function(n){return 0===(n>>>=0)?32:31-(le(n)/ce|0)|0},le=Math.log,ce=Math.LN2,ue=64,de=4194304;function Ae(n){switch(n&-n){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&n;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&n;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return n}}function fe(n,e){var t=n.pendingLanes;if(0===t)return 0;var r=0,o=n.suspendedLanes,i=n.pingedLanes,a=268435455&t;if(0!==a){var s=a&~o;0!==s?r=Ae(s):0!==(i&=a)&&(r=Ae(i))}else 0!==(a=t&~o)?r=Ae(a):0!==i&&(r=Ae(i));if(0===r)return 0;if(0!==e&&e!==r&&0===(e&o)&&((o=r&-r)>=(i=e&-e)||16===o&&4194240&i))return e;if(4&r&&(r|=16&t),0!==(e=n.entangledLanes))for(n=n.entanglements,e&=r;0<e;)o=1<<(t=31-se(e)),r|=n[t],e&=~o;return r}function pe(n,e){switch(n){case 1:case 2:case 4:return e+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e+5e3;default:return-1}}function he(n){return 0!=(n=-1073741825&n.pendingLanes)?n:1073741824&n?1073741824:0}function ge(){var n=ue;return!(4194240&(ue<<=1))&&(ue=64),n}function me(n){for(var e=[],t=0;31>t;t++)e.push(n);return e}function be(n,e,t){n.pendingLanes|=e,536870912!==e&&(n.suspendedLanes=0,n.pingedLanes=0),(n=n.eventTimes)[e=31-se(e)]=t}function xe(n,e){var t=n.entangledLanes|=e;for(n=n.entanglements;t;){var r=31-se(t),o=1<<r;o&e|n[r]&e&&(n[r]|=e),t&=~o}}var ye=0;function Ce(n){return 1<(n&=-n)?4<n?268435455&n?16:536870912:4:1}var ve,Be,Ee,ke,we,je=!1,Se=[],_e=null,Ne=null,Ie=null,ze=new Map,Te=new Map,Oe=[],Pe="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Le(n,e){switch(n){case"focusin":case"focusout":_e=null;break;case"dragenter":case"dragleave":Ne=null;break;case"mouseover":case"mouseout":Ie=null;break;case"pointerover":case"pointerout":ze.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":Te.delete(e.pointerId)}}function Re(n,e,t,r,o,i){return null===n||n.nativeEvent!==i?(n={blockedOn:e,domEventName:t,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==e&&null!==(e=yo(e))&&Be(e),n):(n.eventSystemFlags|=r,e=n.targetContainers,null!==o&&-1===e.indexOf(o)&&e.push(o),n)}function Me(n){var e=xo(n.target);if(null!==e){var t=Fn(e);if(null!==t)if(13===(e=t.tag)){if(null!==(e=qn(t)))return n.blockedOn=e,void we(n.priority,function(){Ee(t)})}else if(3===e&&t.stateNode.current.memoizedState.isDehydrated)return void(n.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}n.blockedOn=null}function De(n){if(null!==n.blockedOn)return!1;for(var e=n.targetContainers;0<e.length;){var t=He(n.domEventName,n.eventSystemFlags,e[0],n.nativeEvent);if(null!==t)return null!==(e=yo(t))&&Be(e),n.blockedOn=t,!1;var r=new(t=n.nativeEvent).constructor(t.type,t);Cn=r,t.target.dispatchEvent(r),Cn=null,e.shift()}return!0}function Ue(n,e,t){De(n)&&t.delete(e)}function Ke(){je=!1,null!==_e&&De(_e)&&(_e=null),null!==Ne&&De(Ne)&&(Ne=null),null!==Ie&&De(Ie)&&(Ie=null),ze.forEach(Ue),Te.forEach(Ue)}function $e(n,e){n.blockedOn===e&&(n.blockedOn=null,je||(je=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ke)))}function Fe(n){function e(e){return $e(e,n)}if(0<Se.length){$e(Se[0],n);for(var t=1;t<Se.length;t++){var r=Se[t];r.blockedOn===n&&(r.blockedOn=null)}}for(null!==_e&&$e(_e,n),null!==Ne&&$e(Ne,n),null!==Ie&&$e(Ie,n),ze.forEach(e),Te.forEach(e),t=0;t<Oe.length;t++)(r=Oe[t]).blockedOn===n&&(r.blockedOn=null);for(;0<Oe.length&&null===(t=Oe[0]).blockedOn;)Me(t),null===t.blockedOn&&Oe.shift()}var qe=y.ReactCurrentBatchConfig,Ye=!0;function We(n,e,t,r){var o=ye,i=qe.transition;qe.transition=null;try{ye=1,Qe(n,e,t,r)}finally{ye=o,qe.transition=i}}function Ge(n,e,t,r){var o=ye,i=qe.transition;qe.transition=null;try{ye=4,Qe(n,e,t,r)}finally{ye=o,qe.transition=i}}function Qe(n,e,t,r){if(Ye){var o=He(n,e,t,r);if(null===o)qr(n,e,r,Ve,t),Le(n,r);else if(function(n,e,t,r,o){switch(e){case"focusin":return _e=Re(_e,n,e,t,r,o),!0;case"dragenter":return Ne=Re(Ne,n,e,t,r,o),!0;case"mouseover":return Ie=Re(Ie,n,e,t,r,o),!0;case"pointerover":var i=o.pointerId;return ze.set(i,Re(ze.get(i)||null,n,e,t,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Te.set(i,Re(Te.get(i)||null,n,e,t,r,o)),!0}return!1}(o,n,e,t,r))r.stopPropagation();else if(Le(n,r),4&e&&-1<Pe.indexOf(n)){for(;null!==o;){var i=yo(o);if(null!==i&&ve(i),null===(i=He(n,e,t,r))&&qr(n,e,r,Ve,t),i===o)break;o=i}null!==o&&r.stopPropagation()}else qr(n,e,r,null,t)}}var Ve=null;function He(n,e,t,r){if(Ve=null,null!==(n=xo(n=vn(r))))if(null===(e=Fn(n)))n=null;else if(13===(t=e.tag)){if(null!==(n=qn(e)))return n;n=null}else if(3===t){if(e.stateNode.current.memoizedState.isDehydrated)return 3===e.tag?e.stateNode.containerInfo:null;n=null}else e!==n&&(n=null);return Ve=n,null}function Ze(n){switch(n){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Jn()){case ne:return 1;case ee:return 4;case te:case re:return 16;case oe:return 536870912;default:return 16}default:return 16}}var Xe=null,Je=null,nt=null;function et(){if(nt)return nt;var n,e,t=Je,r=t.length,o="value"in Xe?Xe.value:Xe.textContent,i=o.length;for(n=0;n<r&&t[n]===o[n];n++);var a=r-n;for(e=1;e<=a&&t[r-e]===o[i-e];e++);return nt=o.slice(n,1<e?1-e:void 0)}function tt(n){var e=n.keyCode;return"charCode"in n?0===(n=n.charCode)&&13===e&&(n=13):n=e,10===n&&(n=13),32<=n||13===n?n:0}function rt(){return!0}function ot(){return!1}function it(n){function e(e,t,r,o,i){for(var a in this._reactName=e,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=i,this.currentTarget=null,n)n.hasOwnProperty(a)&&(e=n[a],this[a]=e?e(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rt:ot,this.isPropagationStopped=ot,this}return R(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():"unknown"!=typeof n.returnValue&&(n.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():"unknown"!=typeof n.cancelBubble&&(n.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),e}var at,st,lt,ct={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(n){return n.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ut=it(ct),dt=R({},ct,{view:0,detail:0}),At=it(dt),ft=R({},dt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kt,button:0,buttons:0,relatedTarget:function(n){return void 0===n.relatedTarget?n.fromElement===n.srcElement?n.toElement:n.fromElement:n.relatedTarget},movementX:function(n){return"movementX"in n?n.movementX:(n!==lt&&(lt&&"mousemove"===n.type?(at=n.screenX-lt.screenX,st=n.screenY-lt.screenY):st=at=0,lt=n),at)},movementY:function(n){return"movementY"in n?n.movementY:st}}),pt=it(ft),ht=it(R({},ft,{dataTransfer:0})),gt=it(R({},dt,{relatedTarget:0})),mt=it(R({},ct,{animationName:0,elapsedTime:0,pseudoElement:0})),bt=R({},ct,{clipboardData:function(n){return"clipboardData"in n?n.clipboardData:window.clipboardData}}),xt=it(bt),yt=it(R({},ct,{data:0})),Ct={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},vt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Bt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Et(n){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(n):!!(n=Bt[n])&&!!e[n]}function kt(){return Et}var wt=R({},dt,{key:function(n){if(n.key){var e=Ct[n.key]||n.key;if("Unidentified"!==e)return e}return"keypress"===n.type?13===(n=tt(n))?"Enter":String.fromCharCode(n):"keydown"===n.type||"keyup"===n.type?vt[n.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kt,charCode:function(n){return"keypress"===n.type?tt(n):0},keyCode:function(n){return"keydown"===n.type||"keyup"===n.type?n.keyCode:0},which:function(n){return"keypress"===n.type?tt(n):"keydown"===n.type||"keyup"===n.type?n.keyCode:0}}),jt=it(wt),St=it(R({},ft,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_t=it(R({},dt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kt})),Nt=it(R({},ct,{propertyName:0,elapsedTime:0,pseudoElement:0})),It=R({},ft,{deltaX:function(n){return"deltaX"in n?n.deltaX:"wheelDeltaX"in n?-n.wheelDeltaX:0},deltaY:function(n){return"deltaY"in n?n.deltaY:"wheelDeltaY"in n?-n.wheelDeltaY:"wheelDelta"in n?-n.wheelDelta:0},deltaZ:0,deltaMode:0}),zt=it(It),Tt=[9,13,27,32],Ot=u&&"CompositionEvent"in window,Pt=null;u&&"documentMode"in document&&(Pt=document.documentMode);var Lt=u&&"TextEvent"in window&&!Pt,Rt=u&&(!Ot||Pt&&8<Pt&&11>=Pt),Mt=String.fromCharCode(32),Dt=!1;function Ut(n,e){switch(n){case"keyup":return-1!==Tt.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Kt(n){return"object"==typeof(n=n.detail)&&"data"in n?n.data:null}var $t=!1,Ft={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qt(n){var e=n&&n.nodeName&&n.nodeName.toLowerCase();return"input"===e?!!Ft[n.type]:"textarea"===e}function Yt(n,e,t,r){jn(r),0<(e=Wr(e,"onChange")).length&&(t=new ut("onChange","change",null,t,r),n.push({event:t,listeners:e}))}var Wt=null,Gt=null;function Qt(n){Mr(n,0)}function Vt(n){if(G(Co(n)))return n}function Ht(n,e){if("change"===n)return e}var Zt=!1;if(u){var Xt;if(u){var Jt="oninput"in document;if(!Jt){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),Jt="function"==typeof nr.oninput}Xt=Jt}else Xt=!1;Zt=Xt&&(!document.documentMode||9<document.documentMode)}function er(){Wt&&(Wt.detachEvent("onpropertychange",tr),Gt=Wt=null)}function tr(n){if("value"===n.propertyName&&Vt(Gt)){var e=[];Yt(e,Gt,n,vn(n)),zn(Qt,e)}}function rr(n,e,t){"focusin"===n?(er(),Gt=t,(Wt=e).attachEvent("onpropertychange",tr)):"focusout"===n&&er()}function or(n){if("selectionchange"===n||"keyup"===n||"keydown"===n)return Vt(Gt)}function ir(n,e){if("click"===n)return Vt(e)}function ar(n,e){if("input"===n||"change"===n)return Vt(e)}var sr="function"==typeof Object.is?Object.is:function(n,e){return n===e&&(0!==n||1/n==1/e)||n!=n&&e!=e};function lr(n,e){if(sr(n,e))return!0;if("object"!=typeof n||null===n||"object"!=typeof e||null===e)return!1;var t=Object.keys(n),r=Object.keys(e);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var o=t[r];if(!d.call(e,o)||!sr(n[o],e[o]))return!1}return!0}function cr(n){for(;n&&n.firstChild;)n=n.firstChild;return n}function ur(n,e){var t,r=cr(n);for(n=0;r;){if(3===r.nodeType){if(t=n+r.textContent.length,n<=e&&t>=e)return{node:r,offset:e-n};n=t}n:{for(;r;){if(r.nextSibling){r=r.nextSibling;break n}r=r.parentNode}r=void 0}r=cr(r)}}function dr(n,e){return!(!n||!e)&&(n===e||(!n||3!==n.nodeType)&&(e&&3===e.nodeType?dr(n,e.parentNode):"contains"in n?n.contains(e):!!n.compareDocumentPosition&&!!(16&n.compareDocumentPosition(e))))}function Ar(){for(var n=window,e=Q();e instanceof n.HTMLIFrameElement;){try{var t="string"==typeof e.contentWindow.location.href}catch(n){t=!1}if(!t)break;e=Q((n=e.contentWindow).document)}return e}function fr(n){var e=n&&n.nodeName&&n.nodeName.toLowerCase();return e&&("input"===e&&("text"===n.type||"search"===n.type||"tel"===n.type||"url"===n.type||"password"===n.type)||"textarea"===e||"true"===n.contentEditable)}function pr(n){var e=Ar(),t=n.focusedElem,r=n.selectionRange;if(e!==t&&t&&t.ownerDocument&&dr(t.ownerDocument.documentElement,t)){if(null!==r&&fr(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var o=t.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!n.extend&&i>r&&(o=r,r=i,i=o),o=ur(t,i);var a=ur(t,r);o&&a&&(1!==n.rangeCount||n.anchorNode!==o.node||n.anchorOffset!==o.offset||n.focusNode!==a.node||n.focusOffset!==a.offset)&&((e=e.createRange()).setStart(o.node,o.offset),n.removeAllRanges(),i>r?(n.addRange(e),n.extend(a.node,a.offset)):(e.setEnd(a.node,a.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var hr=u&&"documentMode"in document&&11>=document.documentMode,gr=null,mr=null,br=null,xr=!1;function yr(n,e,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;xr||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&lr(br,r)||(br=r,0<(r=Wr(mr,"onSelect")).length&&(e=new ut("onSelect","select",null,e,t),n.push({event:e,listeners:r}),e.target=gr)))}function Cr(n,e){var t={};return t[n.toLowerCase()]=e.toLowerCase(),t["Webkit"+n]="webkit"+e,t["Moz"+n]="moz"+e,t}var vr={animationend:Cr("Animation","AnimationEnd"),animationiteration:Cr("Animation","AnimationIteration"),animationstart:Cr("Animation","AnimationStart"),transitionend:Cr("Transition","TransitionEnd")},Br={},Er={};function kr(n){if(Br[n])return Br[n];if(!vr[n])return n;var e,t=vr[n];for(e in t)if(t.hasOwnProperty(e)&&e in Er)return Br[n]=t[e];return n}u&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete vr.animationend.animation,delete vr.animationiteration.animation,delete vr.animationstart.animation),"TransitionEvent"in window||delete vr.transitionend.transition);var wr=kr("animationend"),jr=kr("animationiteration"),Sr=kr("animationstart"),_r=kr("transitionend"),Nr=new Map,Ir="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function zr(n,e){Nr.set(n,e),l(e,[n])}for(var Tr=0;Tr<Ir.length;Tr++){var Or=Ir[Tr];zr(Or.toLowerCase(),"on"+(Or[0].toUpperCase()+Or.slice(1)))}zr(wr,"onAnimationEnd"),zr(jr,"onAnimationIteration"),zr(Sr,"onAnimationStart"),zr("dblclick","onDoubleClick"),zr("focusin","onFocus"),zr("focusout","onBlur"),zr(_r,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Pr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Pr));function Rr(n,e,t){var r=n.type||"unknown-event";n.currentTarget=t,function(n,e,t,r,o,a,s,l,c){if($n.apply(this,arguments),Rn){if(!Rn)throw Error(i(198));var u=Mn;Rn=!1,Mn=null,Dn||(Dn=!0,Un=u)}}(r,e,void 0,n),n.currentTarget=null}function Mr(n,e){e=!!(4&e);for(var t=0;t<n.length;t++){var r=n[t],o=r.event;r=r.listeners;n:{var i=void 0;if(e)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==i&&o.isPropagationStopped())break n;Rr(o,s,c),i=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,c=s.currentTarget,s=s.listener,l!==i&&o.isPropagationStopped())break n;Rr(o,s,c),i=l}}}if(Dn)throw n=Un,Dn=!1,Un=null,n}function Dr(n,e){var t=e[go];void 0===t&&(t=e[go]=new Set);var r=n+"__bubble";t.has(r)||(Fr(e,n,2,!1),t.add(r))}function Ur(n,e,t){var r=0;e&&(r|=4),Fr(t,n,r,e)}var Kr="_reactListening"+Math.random().toString(36).slice(2);function $r(n){if(!n[Kr]){n[Kr]=!0,a.forEach(function(e){"selectionchange"!==e&&(Lr.has(e)||Ur(e,!1,n),Ur(e,!0,n))});var e=9===n.nodeType?n:n.ownerDocument;null===e||e[Kr]||(e[Kr]=!0,Ur("selectionchange",!1,e))}}function Fr(n,e,t,r){switch(Ze(e)){case 1:var o=We;break;case 4:o=Ge;break;default:o=Qe}t=o.bind(null,e,t,n),o=void 0,!On||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(o=!0),r?void 0!==o?n.addEventListener(e,t,{capture:!0,passive:o}):n.addEventListener(e,t,!0):void 0!==o?n.addEventListener(e,t,{passive:o}):n.addEventListener(e,t,!1)}function qr(n,e,t,r,o){var i=r;if(!(1&e||2&e||null===r))n:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=xo(s)))return;if(5===(l=a.tag)||6===l){r=i=a;continue n}s=s.parentNode}}r=r.return}zn(function(){var r=i,o=vn(t),a=[];n:{var s=Nr.get(n);if(void 0!==s){var l=ut,c=n;switch(n){case"keypress":if(0===tt(t))break n;case"keydown":case"keyup":l=jt;break;case"focusin":c="focus",l=gt;break;case"focusout":c="blur",l=gt;break;case"beforeblur":case"afterblur":l=gt;break;case"click":if(2===t.button)break n;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=ht;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=_t;break;case wr:case jr:case Sr:l=mt;break;case _r:l=Nt;break;case"scroll":l=At;break;case"wheel":l=zt;break;case"copy":case"cut":case"paste":l=xt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=St}var u=!!(4&e),d=!u&&"scroll"===n,A=u?null!==s?s+"Capture":null:s;u=[];for(var f,p=r;null!==p;){var h=(f=p).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==A&&null!=(h=Tn(p,A))&&u.push(Yr(p,h,f))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,t,o),a.push({event:s,listeners:u}))}}if(!(7&e)){if(l="mouseout"===n||"pointerout"===n,(!(s="mouseover"===n||"pointerover"===n)||t===Cn||!(c=t.relatedTarget||t.fromElement)||!xo(c)&&!c[ho])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=t.relatedTarget||t.toElement)?xo(c):null)&&(c!==(d=Fn(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=pt,h="onMouseLeave",A="onMouseEnter",p="mouse","pointerout"!==n&&"pointerover"!==n||(u=St,h="onPointerLeave",A="onPointerEnter",p="pointer"),d=null==l?s:Co(l),f=null==c?s:Co(c),(s=new u(h,p+"leave",l,t,o)).target=d,s.relatedTarget=f,h=null,xo(o)===r&&((u=new u(A,p+"enter",c,t,o)).target=f,u.relatedTarget=d,h=u),d=h,l&&c)n:{for(A=c,p=0,f=u=l;f;f=Gr(f))p++;for(f=0,h=A;h;h=Gr(h))f++;for(;0<p-f;)u=Gr(u),p--;for(;0<f-p;)A=Gr(A),f--;for(;p--;){if(u===A||null!==A&&u===A.alternate)break n;u=Gr(u),A=Gr(A)}u=null}else u=null;null!==l&&Qr(a,s,l,u,!1),null!==c&&null!==d&&Qr(a,d,c,u,!0)}if("select"===(l=(s=r?Co(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=Ht;else if(qt(s))if(Zt)g=ar;else{g=or;var m=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=ir);switch(g&&(g=g(n,r))?Yt(a,g,t,o):(m&&m(n,s,r),"focusout"===n&&(m=s._wrapperState)&&m.controlled&&"number"===s.type&&nn(s,"number",s.value)),m=r?Co(r):window,n){case"focusin":(qt(m)||"true"===m.contentEditable)&&(gr=m,mr=r,br=null);break;case"focusout":br=mr=gr=null;break;case"mousedown":xr=!0;break;case"contextmenu":case"mouseup":case"dragend":xr=!1,yr(a,t,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":yr(a,t,o)}var b;if(Ot)n:{switch(n){case"compositionstart":var x="onCompositionStart";break n;case"compositionend":x="onCompositionEnd";break n;case"compositionupdate":x="onCompositionUpdate";break n}x=void 0}else $t?Ut(n,t)&&(x="onCompositionEnd"):"keydown"===n&&229===t.keyCode&&(x="onCompositionStart");x&&(Rt&&"ko"!==t.locale&&($t||"onCompositionStart"!==x?"onCompositionEnd"===x&&$t&&(b=et()):(Je="value"in(Xe=o)?Xe.value:Xe.textContent,$t=!0)),0<(m=Wr(r,x)).length&&(x=new yt(x,n,null,t,o),a.push({event:x,listeners:m}),(b||null!==(b=Kt(t)))&&(x.data=b))),(b=Lt?function(n,e){switch(n){case"compositionend":return Kt(e);case"keypress":return 32!==e.which?null:(Dt=!0,Mt);case"textInput":return(n=e.data)===Mt&&Dt?null:n;default:return null}}(n,t):function(n,e){if($t)return"compositionend"===n||!Ot&&Ut(n,e)?(n=et(),nt=Je=Xe=null,$t=!1,n):null;switch(n){case"paste":default:return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Rt&&"ko"!==e.locale?null:e.data}}(n,t))&&0<(r=Wr(r,"onBeforeInput")).length&&(o=new yt("onBeforeInput","beforeinput",null,t,o),a.push({event:o,listeners:r}),o.data=b)}Mr(a,e)})}function Yr(n,e,t){return{instance:n,listener:e,currentTarget:t}}function Wr(n,e){for(var t=e+"Capture",r=[];null!==n;){var o=n,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Tn(n,t))&&r.unshift(Yr(n,i,o)),null!=(i=Tn(n,e))&&r.push(Yr(n,i,o))),n=n.return}return r}function Gr(n){if(null===n)return null;do{n=n.return}while(n&&5!==n.tag);return n||null}function Qr(n,e,t,r,o){for(var i=e._reactName,a=[];null!==t&&t!==r;){var s=t,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,o?null!=(l=Tn(t,i))&&a.unshift(Yr(t,l,s)):o||null!=(l=Tn(t,i))&&a.push(Yr(t,l,s))),t=t.return}0!==a.length&&n.push({event:e,listeners:a})}var Vr=/\r\n?/g,Hr=/\u0000|\uFFFD/g;function Zr(n){return("string"==typeof n?n:""+n).replace(Vr,"\n").replace(Hr,"")}function Xr(n,e,t){if(e=Zr(e),Zr(n)!==e&&t)throw Error(i(425))}function Jr(){}var no=null,eo=null;function to(n,e){return"textarea"===n||"noscript"===n||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(n){return io.resolve(null).then(n).catch(so)}:ro;function so(n){setTimeout(function(){throw n})}function lo(n,e){var t=e,r=0;do{var o=t.nextSibling;if(n.removeChild(t),o&&8===o.nodeType)if("/$"===(t=o.data)){if(0===r)return n.removeChild(o),void Fe(e);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=o}while(t);Fe(e)}function co(n){for(;null!=n;n=n.nextSibling){var e=n.nodeType;if(1===e||3===e)break;if(8===e){if("$"===(e=n.data)||"$!"===e||"$?"===e)break;if("/$"===e)return null}}return n}function uo(n){n=n.previousSibling;for(var e=0;n;){if(8===n.nodeType){var t=n.data;if("$"===t||"$!"===t||"$?"===t){if(0===e)return n;e--}else"/$"===t&&e++}n=n.previousSibling}return null}var Ao=Math.random().toString(36).slice(2),fo="__reactFiber$"+Ao,po="__reactProps$"+Ao,ho="__reactContainer$"+Ao,go="__reactEvents$"+Ao,mo="__reactListeners$"+Ao,bo="__reactHandles$"+Ao;function xo(n){var e=n[fo];if(e)return e;for(var t=n.parentNode;t;){if(e=t[ho]||t[fo]){if(t=e.alternate,null!==e.child||null!==t&&null!==t.child)for(n=uo(n);null!==n;){if(t=n[fo])return t;n=uo(n)}return e}t=(n=t).parentNode}return null}function yo(n){return!(n=n[fo]||n[ho])||5!==n.tag&&6!==n.tag&&13!==n.tag&&3!==n.tag?null:n}function Co(n){if(5===n.tag||6===n.tag)return n.stateNode;throw Error(i(33))}function vo(n){return n[po]||null}var Bo=[],Eo=-1;function ko(n){return{current:n}}function wo(n){0>Eo||(n.current=Bo[Eo],Bo[Eo]=null,Eo--)}function jo(n,e){Eo++,Bo[Eo]=n.current,n.current=e}var So={},_o=ko(So),No=ko(!1),Io=So;function zo(n,e){var t=n.type.contextTypes;if(!t)return So;var r=n.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in t)i[o]=e[o];return r&&((n=n.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,n.__reactInternalMemoizedMaskedChildContext=i),i}function To(n){return null!=n.childContextTypes}function Oo(){wo(No),wo(_o)}function Po(n,e,t){if(_o.current!==So)throw Error(i(168));jo(_o,e),jo(No,t)}function Lo(n,e,t){var r=n.stateNode;if(e=e.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,F(n)||"Unknown",o));return R({},t,r)}function Ro(n){return n=(n=n.stateNode)&&n.__reactInternalMemoizedMergedChildContext||So,Io=_o.current,jo(_o,n),jo(No,No.current),!0}function Mo(n,e,t){var r=n.stateNode;if(!r)throw Error(i(169));t?(n=Lo(n,e,Io),r.__reactInternalMemoizedMergedChildContext=n,wo(No),wo(_o),jo(_o,n)):wo(No),jo(No,t)}var Do=null,Uo=!1,Ko=!1;function $o(n){null===Do?Do=[n]:Do.push(n)}function Fo(){if(!Ko&&null!==Do){Ko=!0;var n=0,e=ye;try{var t=Do;for(ye=1;n<t.length;n++){var r=t[n];do{r=r(!0)}while(null!==r)}Do=null,Uo=!1}catch(e){throw null!==Do&&(Do=Do.slice(n+1)),Qn(ne,Fo),e}finally{ye=e,Ko=!1}}return null}var qo=[],Yo=0,Wo=null,Go=0,Qo=[],Vo=0,Ho=null,Zo=1,Xo="";function Jo(n,e){qo[Yo++]=Go,qo[Yo++]=Wo,Wo=n,Go=e}function ni(n,e,t){Qo[Vo++]=Zo,Qo[Vo++]=Xo,Qo[Vo++]=Ho,Ho=n;var r=Zo;n=Xo;var o=32-se(r)-1;r&=~(1<<o),t+=1;var i=32-se(e)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Zo=1<<32-se(e)+o|t<<o|r,Xo=i+n}else Zo=1<<i|t<<o|r,Xo=n}function ei(n){null!==n.return&&(Jo(n,1),ni(n,1,0))}function ti(n){for(;n===Wo;)Wo=qo[--Yo],qo[Yo]=null,Go=qo[--Yo],qo[Yo]=null;for(;n===Ho;)Ho=Qo[--Vo],Qo[Vo]=null,Xo=Qo[--Vo],Qo[Vo]=null,Zo=Qo[--Vo],Qo[Vo]=null}var ri=null,oi=null,ii=!1,ai=null;function si(n,e){var t=Ic(5,null,null,0);t.elementType="DELETED",t.stateNode=e,t.return=n,null===(e=n.deletions)?(n.deletions=[t],n.flags|=16):e.push(t)}function li(n,e){switch(n.tag){case 5:var t=n.type;return null!==(e=1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(n.stateNode=e,ri=n,oi=co(e.firstChild),!0);case 6:return null!==(e=""===n.pendingProps||3!==e.nodeType?null:e)&&(n.stateNode=e,ri=n,oi=null,!0);case 13:return null!==(e=8!==e.nodeType?null:e)&&(t=null!==Ho?{id:Zo,overflow:Xo}:null,n.memoizedState={dehydrated:e,treeContext:t,retryLane:1073741824},(t=Ic(18,null,null,0)).stateNode=e,t.return=n,n.child=t,ri=n,oi=null,!0);default:return!1}}function ci(n){return!(!(1&n.mode)||128&n.flags)}function ui(n){if(ii){var e=oi;if(e){var t=e;if(!li(n,e)){if(ci(n))throw Error(i(418));e=co(t.nextSibling);var r=ri;e&&li(n,e)?si(r,t):(n.flags=-4097&n.flags|2,ii=!1,ri=n)}}else{if(ci(n))throw Error(i(418));n.flags=-4097&n.flags|2,ii=!1,ri=n}}}function di(n){for(n=n.return;null!==n&&5!==n.tag&&3!==n.tag&&13!==n.tag;)n=n.return;ri=n}function Ai(n){if(n!==ri)return!1;if(!ii)return di(n),ii=!0,!1;var e;if((e=3!==n.tag)&&!(e=5!==n.tag)&&(e="head"!==(e=n.type)&&"body"!==e&&!to(n.type,n.memoizedProps)),e&&(e=oi)){if(ci(n))throw fi(),Error(i(418));for(;e;)si(n,e),e=co(e.nextSibling)}if(di(n),13===n.tag){if(!(n=null!==(n=n.memoizedState)?n.dehydrated:null))throw Error(i(317));n:{for(n=n.nextSibling,e=0;n;){if(8===n.nodeType){var t=n.data;if("/$"===t){if(0===e){oi=co(n.nextSibling);break n}e--}else"$"!==t&&"$!"!==t&&"$?"!==t||e++}n=n.nextSibling}oi=null}}else oi=ri?co(n.stateNode.nextSibling):null;return!0}function fi(){for(var n=oi;n;)n=co(n.nextSibling)}function pi(){oi=ri=null,ii=!1}function hi(n){null===ai?ai=[n]:ai.push(n)}var gi=y.ReactCurrentBatchConfig;function mi(n,e,t){if(null!==(n=t.ref)&&"function"!=typeof n&&"object"!=typeof n){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(i(309));var r=t.stateNode}if(!r)throw Error(i(147,n));var o=r,a=""+n;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===a?e.ref:(e=function(n){var e=o.refs;null===n?delete e[a]:e[a]=n},e._stringRef=a,e)}if("string"!=typeof n)throw Error(i(284));if(!t._owner)throw Error(i(290,n))}return n}function bi(n,e){throw n=Object.prototype.toString.call(e),Error(i(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n))}function xi(n){return(0,n._init)(n._payload)}function yi(n){function e(e,t){if(n){var r=e.deletions;null===r?(e.deletions=[t],e.flags|=16):r.push(t)}}function t(t,r){if(!n)return null;for(;null!==r;)e(t,r),r=r.sibling;return null}function r(n,e){for(n=new Map;null!==e;)null!==e.key?n.set(e.key,e):n.set(e.index,e),e=e.sibling;return n}function o(n,e){return(n=Tc(n,e)).index=0,n.sibling=null,n}function a(e,t,r){return e.index=r,n?null!==(r=e.alternate)?(r=r.index)<t?(e.flags|=2,t):r:(e.flags|=2,t):(e.flags|=1048576,t)}function s(e){return n&&null===e.alternate&&(e.flags|=2),e}function l(n,e,t,r){return null===e||6!==e.tag?((e=Rc(t,n.mode,r)).return=n,e):((e=o(e,t)).return=n,e)}function c(n,e,t,r){var i=t.type;return i===B?d(n,e,t.props.children,r,t.key):null!==e&&(e.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===z&&xi(i)===e.type)?((r=o(e,t.props)).ref=mi(n,e,t),r.return=n,r):((r=Oc(t.type,t.key,t.props,null,n.mode,r)).ref=mi(n,e,t),r.return=n,r)}function u(n,e,t,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==t.containerInfo||e.stateNode.implementation!==t.implementation?((e=Mc(t,n.mode,r)).return=n,e):((e=o(e,t.children||[])).return=n,e)}function d(n,e,t,r,i){return null===e||7!==e.tag?((e=Pc(t,n.mode,r,i)).return=n,e):((e=o(e,t)).return=n,e)}function A(n,e,t){if("string"==typeof e&&""!==e||"number"==typeof e)return(e=Rc(""+e,n.mode,t)).return=n,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case C:return(t=Oc(e.type,e.key,e.props,null,n.mode,t)).ref=mi(n,null,e),t.return=n,t;case v:return(e=Mc(e,n.mode,t)).return=n,e;case z:return A(n,(0,e._init)(e._payload),t)}if(en(e)||P(e))return(e=Pc(e,n.mode,t,null)).return=n,e;bi(n,e)}return null}function f(n,e,t,r){var o=null!==e?e.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==o?null:l(n,e,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case C:return t.key===o?c(n,e,t,r):null;case v:return t.key===o?u(n,e,t,r):null;case z:return f(n,e,(o=t._init)(t._payload),r)}if(en(t)||P(t))return null!==o?null:d(n,e,t,r,null);bi(n,t)}return null}function p(n,e,t,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(e,n=n.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case C:return c(e,n=n.get(null===r.key?t:r.key)||null,r,o);case v:return u(e,n=n.get(null===r.key?t:r.key)||null,r,o);case z:return p(n,e,t,(0,r._init)(r._payload),o)}if(en(r)||P(r))return d(e,n=n.get(t)||null,r,o,null);bi(e,r)}return null}function h(o,i,s,l){for(var c=null,u=null,d=i,h=i=0,g=null;null!==d&&h<s.length;h++){d.index>h?(g=d,d=null):g=d.sibling;var m=f(o,d,s[h],l);if(null===m){null===d&&(d=g);break}n&&d&&null===m.alternate&&e(o,d),i=a(m,i,h),null===u?c=m:u.sibling=m,u=m,d=g}if(h===s.length)return t(o,d),ii&&Jo(o,h),c;if(null===d){for(;h<s.length;h++)null!==(d=A(o,s[h],l))&&(i=a(d,i,h),null===u?c=d:u.sibling=d,u=d);return ii&&Jo(o,h),c}for(d=r(o,d);h<s.length;h++)null!==(g=p(d,o,h,s[h],l))&&(n&&null!==g.alternate&&d.delete(null===g.key?h:g.key),i=a(g,i,h),null===u?c=g:u.sibling=g,u=g);return n&&d.forEach(function(n){return e(o,n)}),ii&&Jo(o,h),c}function g(o,s,l,c){var u=P(l);if("function"!=typeof u)throw Error(i(150));if(null==(l=u.call(l)))throw Error(i(151));for(var d=u=null,h=s,g=s=0,m=null,b=l.next();null!==h&&!b.done;g++,b=l.next()){h.index>g?(m=h,h=null):m=h.sibling;var x=f(o,h,b.value,c);if(null===x){null===h&&(h=m);break}n&&h&&null===x.alternate&&e(o,h),s=a(x,s,g),null===d?u=x:d.sibling=x,d=x,h=m}if(b.done)return t(o,h),ii&&Jo(o,g),u;if(null===h){for(;!b.done;g++,b=l.next())null!==(b=A(o,b.value,c))&&(s=a(b,s,g),null===d?u=b:d.sibling=b,d=b);return ii&&Jo(o,g),u}for(h=r(o,h);!b.done;g++,b=l.next())null!==(b=p(h,o,g,b.value,c))&&(n&&null!==b.alternate&&h.delete(null===b.key?g:b.key),s=a(b,s,g),null===d?u=b:d.sibling=b,d=b);return n&&h.forEach(function(n){return e(o,n)}),ii&&Jo(o,g),u}return function n(r,i,a,l){if("object"==typeof a&&null!==a&&a.type===B&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case C:n:{for(var c=a.key,u=i;null!==u;){if(u.key===c){if((c=a.type)===B){if(7===u.tag){t(r,u.sibling),(i=o(u,a.props.children)).return=r,r=i;break n}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===z&&xi(c)===u.type){t(r,u.sibling),(i=o(u,a.props)).ref=mi(r,u,a),i.return=r,r=i;break n}t(r,u);break}e(r,u),u=u.sibling}a.type===B?((i=Pc(a.props.children,r.mode,l,a.key)).return=r,r=i):((l=Oc(a.type,a.key,a.props,null,r.mode,l)).ref=mi(r,i,a),l.return=r,r=l)}return s(r);case v:n:{for(u=a.key;null!==i;){if(i.key===u){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){t(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break n}t(r,i);break}e(r,i),i=i.sibling}(i=Mc(a,r.mode,l)).return=r,r=i}return s(r);case z:return n(r,i,(u=a._init)(a._payload),l)}if(en(a))return h(r,i,a,l);if(P(a))return g(r,i,a,l);bi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(t(r,i.sibling),(i=o(i,a)).return=r,r=i):(t(r,i),(i=Rc(a,r.mode,l)).return=r,r=i),s(r)):t(r,i)}}var Ci=yi(!0),vi=yi(!1),Bi=ko(null),Ei=null,ki=null,wi=null;function ji(){wi=ki=Ei=null}function Si(n){var e=Bi.current;wo(Bi),n._currentValue=e}function _i(n,e,t){for(;null!==n;){var r=n.alternate;if((n.childLanes&e)!==e?(n.childLanes|=e,null!==r&&(r.childLanes|=e)):null!==r&&(r.childLanes&e)!==e&&(r.childLanes|=e),n===t)break;n=n.return}}function Ni(n,e){Ei=n,wi=ki=null,null!==(n=n.dependencies)&&null!==n.firstContext&&(0!==(n.lanes&e)&&(xs=!0),n.firstContext=null)}function Ii(n){var e=n._currentValue;if(wi!==n)if(n={context:n,memoizedValue:e,next:null},null===ki){if(null===Ei)throw Error(i(308));ki=n,Ei.dependencies={lanes:0,firstContext:n}}else ki=ki.next=n;return e}var zi=null;function Ti(n){null===zi?zi=[n]:zi.push(n)}function Oi(n,e,t,r){var o=e.interleaved;return null===o?(t.next=t,Ti(e)):(t.next=o.next,o.next=t),e.interleaved=t,Pi(n,r)}function Pi(n,e){n.lanes|=e;var t=n.alternate;for(null!==t&&(t.lanes|=e),t=n,n=n.return;null!==n;)n.childLanes|=e,null!==(t=n.alternate)&&(t.childLanes|=e),t=n,n=n.return;return 3===t.tag?t.stateNode:null}var Li=!1;function Ri(n){n.updateQueue={baseState:n.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Mi(n,e){n=n.updateQueue,e.updateQueue===n&&(e.updateQueue={baseState:n.baseState,firstBaseUpdate:n.firstBaseUpdate,lastBaseUpdate:n.lastBaseUpdate,shared:n.shared,effects:n.effects})}function Di(n,e){return{eventTime:n,lane:e,tag:0,payload:null,callback:null,next:null}}function Ui(n,e,t){var r=n.updateQueue;if(null===r)return null;if(r=r.shared,2&Sl){var o=r.pending;return null===o?e.next=e:(e.next=o.next,o.next=e),r.pending=e,Pi(n,t)}return null===(o=r.interleaved)?(e.next=e,Ti(r)):(e.next=o.next,o.next=e),r.interleaved=e,Pi(n,t)}function Ki(n,e,t){if(null!==(e=e.updateQueue)&&(e=e.shared,4194240&t)){var r=e.lanes;t|=r&=n.pendingLanes,e.lanes=t,xe(n,t)}}function $i(n,e){var t=n.updateQueue,r=n.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,i=null;if(null!==(t=t.firstBaseUpdate)){do{var a={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===i?o=i=a:i=i.next=a,t=t.next}while(null!==t);null===i?o=i=e:i=i.next=e}else o=i=e;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(n.updateQueue=t)}null===(n=t.lastBaseUpdate)?t.firstBaseUpdate=e:n.next=e,t.lastBaseUpdate=e}function Fi(n,e,t,r){var o=n.updateQueue;Li=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var l=s,c=l.next;l.next=null,null===a?i=c:a.next=c,a=l;var u=n.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==a&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==i){var d=o.baseState;for(a=0,u=c=l=null,s=i;;){var A=s.lane,f=s.eventTime;if((r&A)===A){null!==u&&(u=u.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});n:{var p=n,h=s;switch(A=e,f=t,h.tag){case 1:if("function"==typeof(p=h.payload)){d=p.call(f,d,A);break n}d=p;break n;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(A="function"==typeof(p=h.payload)?p.call(f,d,A):p))break n;d=R({},d,A);break n;case 2:Li=!0}}null!==s.callback&&0!==s.lane&&(n.flags|=64,null===(A=o.effects)?o.effects=[s]:A.push(s))}else f={eventTime:f,lane:A,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=f,l=d):u=u.next=f,a|=A;if(null===(s=s.next)){if(null===(s=o.shared.pending))break;s=(A=s).next,A.next=null,o.lastBaseUpdate=A,o.shared.pending=null}}if(null===u&&(l=d),o.baseState=l,o.firstBaseUpdate=c,o.lastBaseUpdate=u,null!==(e=o.shared.interleaved)){o=e;do{a|=o.lane,o=o.next}while(o!==e)}else null===i&&(o.shared.lanes=0);Ll|=a,n.lanes=a,n.memoizedState=d}}function qi(n,e,t){if(n=e.effects,e.effects=null,null!==n)for(e=0;e<n.length;e++){var r=n[e],o=r.callback;if(null!==o){if(r.callback=null,r=t,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Yi={},Wi=ko(Yi),Gi=ko(Yi),Qi=ko(Yi);function Vi(n){if(n===Yi)throw Error(i(174));return n}function Hi(n,e){switch(jo(Qi,e),jo(Gi,n),jo(Wi,Yi),n=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:cn(null,"");break;default:e=cn(e=(n=8===n?e.parentNode:e).namespaceURI||null,n=n.tagName)}wo(Wi),jo(Wi,e)}function Zi(){wo(Wi),wo(Gi),wo(Qi)}function Xi(n){Vi(Qi.current);var e=Vi(Wi.current),t=cn(e,n.type);e!==t&&(jo(Gi,n),jo(Wi,t))}function Ji(n){Gi.current===n&&(wo(Wi),wo(Gi))}var na=ko(0);function ea(n){for(var e=n;null!==e;){if(13===e.tag){var t=e.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(128&e.flags)return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var ta=[];function ra(){for(var n=0;n<ta.length;n++)ta[n]._workInProgressVersionPrimary=null;ta.length=0}var oa=y.ReactCurrentDispatcher,ia=y.ReactCurrentBatchConfig,aa=0,sa=null,la=null,ca=null,ua=!1,da=!1,Aa=0,fa=0;function pa(){throw Error(i(321))}function ha(n,e){if(null===e)return!1;for(var t=0;t<e.length&&t<n.length;t++)if(!sr(n[t],e[t]))return!1;return!0}function ga(n,e,t,r,o,a){if(aa=a,sa=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,oa.current=null===n||null===n.memoizedState?Ja:ns,n=t(r,o),da){a=0;do{if(da=!1,Aa=0,25<=a)throw Error(i(301));a+=1,ca=la=null,e.updateQueue=null,oa.current=es,n=t(r,o)}while(da)}if(oa.current=Xa,e=null!==la&&null!==la.next,aa=0,ca=la=sa=null,ua=!1,e)throw Error(i(300));return n}function ma(){var n=0!==Aa;return Aa=0,n}function ba(){var n={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ca?sa.memoizedState=ca=n:ca=ca.next=n,ca}function xa(){if(null===la){var n=sa.alternate;n=null!==n?n.memoizedState:null}else n=la.next;var e=null===ca?sa.memoizedState:ca.next;if(null!==e)ca=e,la=n;else{if(null===n)throw Error(i(310));n={memoizedState:(la=n).memoizedState,baseState:la.baseState,baseQueue:la.baseQueue,queue:la.queue,next:null},null===ca?sa.memoizedState=ca=n:ca=ca.next=n}return ca}function ya(n,e){return"function"==typeof e?e(n):e}function Ca(n){var e=xa(),t=e.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=n;var r=la,o=r.baseQueue,a=t.pending;if(null!==a){if(null!==o){var s=o.next;o.next=a.next,a.next=s}r.baseQueue=o=a,t.pending=null}if(null!==o){a=o.next,r=r.baseState;var l=s=null,c=null,u=a;do{var d=u.lane;if((aa&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:n(r,u.action);else{var A={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=A,s=r):c=c.next=A,sa.lanes|=d,Ll|=d}u=u.next}while(null!==u&&u!==a);null===c?s=r:c.next=l,sr(r,e.memoizedState)||(xs=!0),e.memoizedState=r,e.baseState=s,e.baseQueue=c,t.lastRenderedState=r}if(null!==(n=t.interleaved)){o=n;do{a=o.lane,sa.lanes|=a,Ll|=a,o=o.next}while(o!==n)}else null===o&&(t.lanes=0);return[e.memoizedState,t.dispatch]}function va(n){var e=xa(),t=e.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=n;var r=t.dispatch,o=t.pending,a=e.memoizedState;if(null!==o){t.pending=null;var s=o=o.next;do{a=n(a,s.action),s=s.next}while(s!==o);sr(a,e.memoizedState)||(xs=!0),e.memoizedState=a,null===e.baseQueue&&(e.baseState=a),t.lastRenderedState=a}return[a,r]}function Ba(){}function Ea(n,e){var t=sa,r=xa(),o=e(),a=!sr(r.memoizedState,o);if(a&&(r.memoizedState=o,xs=!0),r=r.queue,La(ja.bind(null,t,r,n),[n]),r.getSnapshot!==e||a||null!==ca&&1&ca.memoizedState.tag){if(t.flags|=2048,Ia(9,wa.bind(null,t,r,o,e),void 0,null),null===_l)throw Error(i(349));30&aa||ka(t,e,o)}return o}function ka(n,e,t){n.flags|=16384,n={getSnapshot:e,value:t},null===(e=sa.updateQueue)?(e={lastEffect:null,stores:null},sa.updateQueue=e,e.stores=[n]):null===(t=e.stores)?e.stores=[n]:t.push(n)}function wa(n,e,t,r){e.value=t,e.getSnapshot=r,Sa(e)&&_a(n)}function ja(n,e,t){return t(function(){Sa(e)&&_a(n)})}function Sa(n){var e=n.getSnapshot;n=n.value;try{var t=e();return!sr(n,t)}catch(n){return!0}}function _a(n){var e=Pi(n,1);null!==e&&tc(e,n,1,-1)}function Na(n){var e=ba();return"function"==typeof n&&(n=n()),e.memoizedState=e.baseState=n,n={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ya,lastRenderedState:n},e.queue=n,n=n.dispatch=Qa.bind(null,sa,n),[e.memoizedState,n]}function Ia(n,e,t,r){return n={tag:n,create:e,destroy:t,deps:r,next:null},null===(e=sa.updateQueue)?(e={lastEffect:null,stores:null},sa.updateQueue=e,e.lastEffect=n.next=n):null===(t=e.lastEffect)?e.lastEffect=n.next=n:(r=t.next,t.next=n,n.next=r,e.lastEffect=n),n}function za(){return xa().memoizedState}function Ta(n,e,t,r){var o=ba();sa.flags|=n,o.memoizedState=Ia(1|e,t,void 0,void 0===r?null:r)}function Oa(n,e,t,r){var o=xa();r=void 0===r?null:r;var i=void 0;if(null!==la){var a=la.memoizedState;if(i=a.destroy,null!==r&&ha(r,a.deps))return void(o.memoizedState=Ia(e,t,i,r))}sa.flags|=n,o.memoizedState=Ia(1|e,t,i,r)}function Pa(n,e){return Ta(8390656,8,n,e)}function La(n,e){return Oa(2048,8,n,e)}function Ra(n,e){return Oa(4,2,n,e)}function Ma(n,e){return Oa(4,4,n,e)}function Da(n,e){return"function"==typeof e?(n=n(),e(n),function(){e(null)}):null!=e?(n=n(),e.current=n,function(){e.current=null}):void 0}function Ua(n,e,t){return t=null!=t?t.concat([n]):null,Oa(4,4,Da.bind(null,e,n),t)}function Ka(){}function $a(n,e){var t=xa();e=void 0===e?null:e;var r=t.memoizedState;return null!==r&&null!==e&&ha(e,r[1])?r[0]:(t.memoizedState=[n,e],n)}function Fa(n,e){var t=xa();e=void 0===e?null:e;var r=t.memoizedState;return null!==r&&null!==e&&ha(e,r[1])?r[0]:(n=n(),t.memoizedState=[n,e],n)}function qa(n,e,t){return 21&aa?(sr(t,e)||(t=ge(),sa.lanes|=t,Ll|=t,n.baseState=!0),e):(n.baseState&&(n.baseState=!1,xs=!0),n.memoizedState=t)}function Ya(n,e){var t=ye;ye=0!==t&&4>t?t:4,n(!0);var r=ia.transition;ia.transition={};try{n(!1),e()}finally{ye=t,ia.transition=r}}function Wa(){return xa().memoizedState}function Ga(n,e,t){var r=ec(n);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},Va(n)?Ha(e,t):null!==(t=Oi(n,e,t,r))&&(tc(t,n,r,nc()),Za(t,e,r))}function Qa(n,e,t){var r=ec(n),o={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(Va(n))Ha(e,o);else{var i=n.alternate;if(0===n.lanes&&(null===i||0===i.lanes)&&null!==(i=e.lastRenderedReducer))try{var a=e.lastRenderedState,s=i(a,t);if(o.hasEagerState=!0,o.eagerState=s,sr(s,a)){var l=e.interleaved;return null===l?(o.next=o,Ti(e)):(o.next=l.next,l.next=o),void(e.interleaved=o)}}catch(n){}null!==(t=Oi(n,e,o,r))&&(tc(t,n,r,o=nc()),Za(t,e,r))}}function Va(n){var e=n.alternate;return n===sa||null!==e&&e===sa}function Ha(n,e){da=ua=!0;var t=n.pending;null===t?e.next=e:(e.next=t.next,t.next=e),n.pending=e}function Za(n,e,t){if(4194240&t){var r=e.lanes;t|=r&=n.pendingLanes,e.lanes=t,xe(n,t)}}var Xa={readContext:Ii,useCallback:pa,useContext:pa,useEffect:pa,useImperativeHandle:pa,useInsertionEffect:pa,useLayoutEffect:pa,useMemo:pa,useReducer:pa,useRef:pa,useState:pa,useDebugValue:pa,useDeferredValue:pa,useTransition:pa,useMutableSource:pa,useSyncExternalStore:pa,useId:pa,unstable_isNewReconciler:!1},Ja={readContext:Ii,useCallback:function(n,e){return ba().memoizedState=[n,void 0===e?null:e],n},useContext:Ii,useEffect:Pa,useImperativeHandle:function(n,e,t){return t=null!=t?t.concat([n]):null,Ta(4194308,4,Da.bind(null,e,n),t)},useLayoutEffect:function(n,e){return Ta(4194308,4,n,e)},useInsertionEffect:function(n,e){return Ta(4,2,n,e)},useMemo:function(n,e){var t=ba();return e=void 0===e?null:e,n=n(),t.memoizedState=[n,e],n},useReducer:function(n,e,t){var r=ba();return e=void 0!==t?t(e):e,r.memoizedState=r.baseState=e,n={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:n,lastRenderedState:e},r.queue=n,n=n.dispatch=Ga.bind(null,sa,n),[r.memoizedState,n]},useRef:function(n){return n={current:n},ba().memoizedState=n},useState:Na,useDebugValue:Ka,useDeferredValue:function(n){return ba().memoizedState=n},useTransition:function(){var n=Na(!1),e=n[0];return n=Ya.bind(null,n[1]),ba().memoizedState=n,[e,n]},useMutableSource:function(){},useSyncExternalStore:function(n,e,t){var r=sa,o=ba();if(ii){if(void 0===t)throw Error(i(407));t=t()}else{if(t=e(),null===_l)throw Error(i(349));30&aa||ka(r,e,t)}o.memoizedState=t;var a={value:t,getSnapshot:e};return o.queue=a,Pa(ja.bind(null,r,a,n),[n]),r.flags|=2048,Ia(9,wa.bind(null,r,a,t,e),void 0,null),t},useId:function(){var n=ba(),e=_l.identifierPrefix;if(ii){var t=Xo;e=":"+e+"R"+(t=(Zo&~(1<<32-se(Zo)-1)).toString(32)+t),0<(t=Aa++)&&(e+="H"+t.toString(32)),e+=":"}else e=":"+e+"r"+(t=fa++).toString(32)+":";return n.memoizedState=e},unstable_isNewReconciler:!1},ns={readContext:Ii,useCallback:$a,useContext:Ii,useEffect:La,useImperativeHandle:Ua,useInsertionEffect:Ra,useLayoutEffect:Ma,useMemo:Fa,useReducer:Ca,useRef:za,useState:function(){return Ca(ya)},useDebugValue:Ka,useDeferredValue:function(n){return qa(xa(),la.memoizedState,n)},useTransition:function(){return[Ca(ya)[0],xa().memoizedState]},useMutableSource:Ba,useSyncExternalStore:Ea,useId:Wa,unstable_isNewReconciler:!1},es={readContext:Ii,useCallback:$a,useContext:Ii,useEffect:La,useImperativeHandle:Ua,useInsertionEffect:Ra,useLayoutEffect:Ma,useMemo:Fa,useReducer:va,useRef:za,useState:function(){return va(ya)},useDebugValue:Ka,useDeferredValue:function(n){var e=xa();return null===la?e.memoizedState=n:qa(e,la.memoizedState,n)},useTransition:function(){return[va(ya)[0],xa().memoizedState]},useMutableSource:Ba,useSyncExternalStore:Ea,useId:Wa,unstable_isNewReconciler:!1};function ts(n,e){if(n&&n.defaultProps){for(var t in e=R({},e),n=n.defaultProps)void 0===e[t]&&(e[t]=n[t]);return e}return e}function rs(n,e,t,r){t=null==(t=t(r,e=n.memoizedState))?e:R({},e,t),n.memoizedState=t,0===n.lanes&&(n.updateQueue.baseState=t)}var os={isMounted:function(n){return!!(n=n._reactInternals)&&Fn(n)===n},enqueueSetState:function(n,e,t){n=n._reactInternals;var r=nc(),o=ec(n),i=Di(r,o);i.payload=e,null!=t&&(i.callback=t),null!==(e=Ui(n,i,o))&&(tc(e,n,o,r),Ki(e,n,o))},enqueueReplaceState:function(n,e,t){n=n._reactInternals;var r=nc(),o=ec(n),i=Di(r,o);i.tag=1,i.payload=e,null!=t&&(i.callback=t),null!==(e=Ui(n,i,o))&&(tc(e,n,o,r),Ki(e,n,o))},enqueueForceUpdate:function(n,e){n=n._reactInternals;var t=nc(),r=ec(n),o=Di(t,r);o.tag=2,null!=e&&(o.callback=e),null!==(e=Ui(n,o,r))&&(tc(e,n,r,t),Ki(e,n,r))}};function is(n,e,t,r,o,i,a){return"function"==typeof(n=n.stateNode).shouldComponentUpdate?n.shouldComponentUpdate(r,i,a):!(e.prototype&&e.prototype.isPureReactComponent&&lr(t,r)&&lr(o,i))}function as(n,e,t){var r=!1,o=So,i=e.contextType;return"object"==typeof i&&null!==i?i=Ii(i):(o=To(e)?Io:_o.current,i=(r=null!=(r=e.contextTypes))?zo(n,o):So),e=new e(t,i),n.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=os,n.stateNode=e,e._reactInternals=n,r&&((n=n.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,n.__reactInternalMemoizedMaskedChildContext=i),e}function ss(n,e,t,r){n=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(t,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(t,r),e.state!==n&&os.enqueueReplaceState(e,e.state,null)}function ls(n,e,t,r){var o=n.stateNode;o.props=t,o.state=n.memoizedState,o.refs={},Ri(n);var i=e.contextType;"object"==typeof i&&null!==i?o.context=Ii(i):(i=To(e)?Io:_o.current,o.context=zo(n,i)),o.state=n.memoizedState,"function"==typeof(i=e.getDerivedStateFromProps)&&(rs(n,e,i,t),o.state=n.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(e=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),e!==o.state&&os.enqueueReplaceState(o,o.state,null),Fi(n,t,o,r),o.state=n.memoizedState),"function"==typeof o.componentDidMount&&(n.flags|=4194308)}function cs(n,e){try{var t="",r=e;do{t+=K(r),r=r.return}while(r);var o=t}catch(n){o="\nError generating stack: "+n.message+"\n"+n.stack}return{value:n,source:e,stack:o,digest:null}}function us(n,e,t){return{value:n,source:null,stack:null!=t?t:null,digest:null!=e?e:null}}function ds(n,e){try{console.error(e.value)}catch(n){setTimeout(function(){throw n})}}var As="function"==typeof WeakMap?WeakMap:Map;function fs(n,e,t){(t=Di(-1,t)).tag=3,t.payload={element:null};var r=e.value;return t.callback=function(){ql||(ql=!0,Yl=r),ds(0,e)},t}function ps(n,e,t){(t=Di(-1,t)).tag=3;var r=n.type.getDerivedStateFromError;if("function"==typeof r){var o=e.value;t.payload=function(){return r(o)},t.callback=function(){ds(0,e)}}var i=n.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(t.callback=function(){ds(0,e),"function"!=typeof r&&(null===Wl?Wl=new Set([this]):Wl.add(this));var n=e.stack;this.componentDidCatch(e.value,{componentStack:null!==n?n:""})}),t}function hs(n,e,t){var r=n.pingCache;if(null===r){r=n.pingCache=new As;var o=new Set;r.set(e,o)}else void 0===(o=r.get(e))&&(o=new Set,r.set(e,o));o.has(t)||(o.add(t),n=kc.bind(null,n,e,t),e.then(n,n))}function gs(n){do{var e;if((e=13===n.tag)&&(e=null===(e=n.memoizedState)||null!==e.dehydrated),e)return n;n=n.return}while(null!==n);return null}function ms(n,e,t,r,o){return 1&n.mode?(n.flags|=65536,n.lanes=o,n):(n===e?n.flags|=65536:(n.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((e=Di(-1,1)).tag=2,Ui(t,e,1))),t.lanes|=1),n)}var bs=y.ReactCurrentOwner,xs=!1;function ys(n,e,t,r){e.child=null===n?vi(e,null,t,r):Ci(e,n.child,t,r)}function Cs(n,e,t,r,o){t=t.render;var i=e.ref;return Ni(e,o),r=ga(n,e,t,r,i,o),t=ma(),null===n||xs?(ii&&t&&ei(e),e.flags|=1,ys(n,e,r,o),e.child):(e.updateQueue=n.updateQueue,e.flags&=-2053,n.lanes&=~o,qs(n,e,o))}function vs(n,e,t,r,o){if(null===n){var i=t.type;return"function"!=typeof i||zc(i)||void 0!==i.defaultProps||null!==t.compare||void 0!==t.defaultProps?((n=Oc(t.type,null,r,e,e.mode,o)).ref=e.ref,n.return=e,e.child=n):(e.tag=15,e.type=i,Bs(n,e,i,r,o))}if(i=n.child,0===(n.lanes&o)){var a=i.memoizedProps;if((t=null!==(t=t.compare)?t:lr)(a,r)&&n.ref===e.ref)return qs(n,e,o)}return e.flags|=1,(n=Tc(i,r)).ref=e.ref,n.return=e,e.child=n}function Bs(n,e,t,r,o){if(null!==n){var i=n.memoizedProps;if(lr(i,r)&&n.ref===e.ref){if(xs=!1,e.pendingProps=r=i,0===(n.lanes&o))return e.lanes=n.lanes,qs(n,e,o);131072&n.flags&&(xs=!0)}}return ws(n,e,t,r,o)}function Es(n,e,t){var r=e.pendingProps,o=r.children,i=null!==n?n.memoizedState:null;if("hidden"===r.mode)if(1&e.mode){if(!(1073741824&t))return n=null!==i?i.baseLanes|t:t,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:n,cachePool:null,transitions:null},e.updateQueue=null,jo(Tl,zl),zl|=n,null;e.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:t,jo(Tl,zl),zl|=r}else e.memoizedState={baseLanes:0,cachePool:null,transitions:null},jo(Tl,zl),zl|=t;else null!==i?(r=i.baseLanes|t,e.memoizedState=null):r=t,jo(Tl,zl),zl|=r;return ys(n,e,o,t),e.child}function ks(n,e){var t=e.ref;(null===n&&null!==t||null!==n&&n.ref!==t)&&(e.flags|=512,e.flags|=2097152)}function ws(n,e,t,r,o){var i=To(t)?Io:_o.current;return i=zo(e,i),Ni(e,o),t=ga(n,e,t,r,i,o),r=ma(),null===n||xs?(ii&&r&&ei(e),e.flags|=1,ys(n,e,t,o),e.child):(e.updateQueue=n.updateQueue,e.flags&=-2053,n.lanes&=~o,qs(n,e,o))}function js(n,e,t,r,o){if(To(t)){var i=!0;Ro(e)}else i=!1;if(Ni(e,o),null===e.stateNode)Fs(n,e),as(e,t,r),ls(e,t,r,o),r=!0;else if(null===n){var a=e.stateNode,s=e.memoizedProps;a.props=s;var l=a.context,c=t.contextType;c="object"==typeof c&&null!==c?Ii(c):zo(e,c=To(t)?Io:_o.current);var u=t.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&ss(e,a,r,c),Li=!1;var A=e.memoizedState;a.state=A,Fi(e,r,a,o),l=e.memoizedState,s!==r||A!==l||No.current||Li?("function"==typeof u&&(rs(e,t,u,r),l=e.memoizedState),(s=Li||is(e,t,s,r,A,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4194308)):("function"==typeof a.componentDidMount&&(e.flags|=4194308),e.memoizedProps=r,e.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(e.flags|=4194308),r=!1)}else{a=e.stateNode,Mi(n,e),s=e.memoizedProps,c=e.type===e.elementType?s:ts(e.type,s),a.props=c,d=e.pendingProps,A=a.context,l="object"==typeof(l=t.contextType)&&null!==l?Ii(l):zo(e,l=To(t)?Io:_o.current);var f=t.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||A!==l)&&ss(e,a,r,l),Li=!1,A=e.memoizedState,a.state=A,Fi(e,r,a,o);var p=e.memoizedState;s!==d||A!==p||No.current||Li?("function"==typeof f&&(rs(e,t,f,r),p=e.memoizedState),(c=Li||is(e,t,c,r,A,p,l)||!1)?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===n.memoizedProps&&A===n.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===n.memoizedProps&&A===n.memoizedState||(e.flags|=1024),e.memoizedProps=r,e.memoizedState=p),a.props=r,a.state=p,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===n.memoizedProps&&A===n.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===n.memoizedProps&&A===n.memoizedState||(e.flags|=1024),r=!1)}return Ss(n,e,t,r,i,o)}function Ss(n,e,t,r,o,i){ks(n,e);var a=!!(128&e.flags);if(!r&&!a)return o&&Mo(e,t,!1),qs(n,e,i);r=e.stateNode,bs.current=e;var s=a&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return e.flags|=1,null!==n&&a?(e.child=Ci(e,n.child,null,i),e.child=Ci(e,null,s,i)):ys(n,e,s,i),e.memoizedState=r.state,o&&Mo(e,t,!0),e.child}function _s(n){var e=n.stateNode;e.pendingContext?Po(0,e.pendingContext,e.pendingContext!==e.context):e.context&&Po(0,e.context,!1),Hi(n,e.containerInfo)}function Ns(n,e,t,r,o){return pi(),hi(o),e.flags|=256,ys(n,e,t,r),e.child}var Is,zs,Ts,Os,Ps={dehydrated:null,treeContext:null,retryLane:0};function Ls(n){return{baseLanes:n,cachePool:null,transitions:null}}function Rs(n,e,t){var r,o=e.pendingProps,a=na.current,s=!1,l=!!(128&e.flags);if((r=l)||(r=(null===n||null!==n.memoizedState)&&!!(2&a)),r?(s=!0,e.flags&=-129):null!==n&&null===n.memoizedState||(a|=1),jo(na,1&a),null===n)return ui(e),null!==(n=e.memoizedState)&&null!==(n=n.dehydrated)?(1&e.mode?"$!"===n.data?e.lanes=8:e.lanes=1073741824:e.lanes=1,null):(l=o.children,n=o.fallback,s?(o=e.mode,s=e.child,l={mode:"hidden",children:l},1&o||null===s?s=Lc(l,o,0,null):(s.childLanes=0,s.pendingProps=l),n=Pc(n,o,t,null),s.return=e,n.return=e,s.sibling=n,e.child=s,e.child.memoizedState=Ls(t),e.memoizedState=Ps,n):Ms(e,l));if(null!==(a=n.memoizedState)&&null!==(r=a.dehydrated))return function(n,e,t,r,o,a,s){if(t)return 256&e.flags?(e.flags&=-257,Ds(n,e,s,r=us(Error(i(422))))):null!==e.memoizedState?(e.child=n.child,e.flags|=128,null):(a=r.fallback,o=e.mode,r=Lc({mode:"visible",children:r.children},o,0,null),(a=Pc(a,o,s,null)).flags|=2,r.return=e,a.return=e,r.sibling=a,e.child=r,1&e.mode&&Ci(e,n.child,null,s),e.child.memoizedState=Ls(s),e.memoizedState=Ps,a);if(!(1&e.mode))return Ds(n,e,s,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Ds(n,e,s,r=us(a=Error(i(419)),r,void 0))}if(l=0!==(s&n.childLanes),xs||l){if(null!==(r=_l)){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!==(o&(r.suspendedLanes|s))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Pi(n,o),tc(r,n,o,-1))}return hc(),Ds(n,e,s,r=us(Error(i(421))))}return"$?"===o.data?(e.flags|=128,e.child=n.child,e=jc.bind(null,n),o._reactRetry=e,null):(n=a.treeContext,oi=co(o.nextSibling),ri=e,ii=!0,ai=null,null!==n&&(Qo[Vo++]=Zo,Qo[Vo++]=Xo,Qo[Vo++]=Ho,Zo=n.id,Xo=n.overflow,Ho=e),(e=Ms(e,r.children)).flags|=4096,e)}(n,e,l,o,r,a,t);if(s){s=o.fallback,l=e.mode,r=(a=n.child).sibling;var c={mode:"hidden",children:o.children};return 1&l||e.child===a?(o=Tc(a,c)).subtreeFlags=14680064&a.subtreeFlags:((o=e.child).childLanes=0,o.pendingProps=c,e.deletions=null),null!==r?s=Tc(r,s):(s=Pc(s,l,t,null)).flags|=2,s.return=e,o.return=e,o.sibling=s,e.child=o,o=s,s=e.child,l=null===(l=n.child.memoizedState)?Ls(t):{baseLanes:l.baseLanes|t,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=n.childLanes&~t,e.memoizedState=Ps,o}return n=(s=n.child).sibling,o=Tc(s,{mode:"visible",children:o.children}),!(1&e.mode)&&(o.lanes=t),o.return=e,o.sibling=null,null!==n&&(null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)),e.child=o,e.memoizedState=null,o}function Ms(n,e){return(e=Lc({mode:"visible",children:e},n.mode,0,null)).return=n,n.child=e}function Ds(n,e,t,r){return null!==r&&hi(r),Ci(e,n.child,null,t),(n=Ms(e,e.pendingProps.children)).flags|=2,e.memoizedState=null,n}function Us(n,e,t){n.lanes|=e;var r=n.alternate;null!==r&&(r.lanes|=e),_i(n.return,e,t)}function Ks(n,e,t,r,o){var i=n.memoizedState;null===i?n.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o}:(i.isBackwards=e,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=t,i.tailMode=o)}function $s(n,e,t){var r=e.pendingProps,o=r.revealOrder,i=r.tail;if(ys(n,e,r.children,t),2&(r=na.current))r=1&r|2,e.flags|=128;else{if(null!==n&&128&n.flags)n:for(n=e.child;null!==n;){if(13===n.tag)null!==n.memoizedState&&Us(n,t,e);else if(19===n.tag)Us(n,t,e);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break n;for(;null===n.sibling;){if(null===n.return||n.return===e)break n;n=n.return}n.sibling.return=n.return,n=n.sibling}r&=1}if(jo(na,r),1&e.mode)switch(o){case"forwards":for(t=e.child,o=null;null!==t;)null!==(n=t.alternate)&&null===ea(n)&&(o=t),t=t.sibling;null===(t=o)?(o=e.child,e.child=null):(o=t.sibling,t.sibling=null),Ks(e,!1,o,t,i);break;case"backwards":for(t=null,o=e.child,e.child=null;null!==o;){if(null!==(n=o.alternate)&&null===ea(n)){e.child=o;break}n=o.sibling,o.sibling=t,t=o,o=n}Ks(e,!0,t,null,i);break;case"together":Ks(e,!1,null,null,void 0);break;default:e.memoizedState=null}else e.memoizedState=null;return e.child}function Fs(n,e){!(1&e.mode)&&null!==n&&(n.alternate=null,e.alternate=null,e.flags|=2)}function qs(n,e,t){if(null!==n&&(e.dependencies=n.dependencies),Ll|=e.lanes,0===(t&e.childLanes))return null;if(null!==n&&e.child!==n.child)throw Error(i(153));if(null!==e.child){for(t=Tc(n=e.child,n.pendingProps),e.child=t,t.return=e;null!==n.sibling;)n=n.sibling,(t=t.sibling=Tc(n,n.pendingProps)).return=e;t.sibling=null}return e.child}function Ys(n,e){if(!ii)switch(n.tailMode){case"hidden":e=n.tail;for(var t=null;null!==e;)null!==e.alternate&&(t=e),e=e.sibling;null===t?n.tail=null:t.sibling=null;break;case"collapsed":t=n.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e||null===n.tail?n.tail=null:n.tail.sibling=null:r.sibling=null}}function Ws(n){var e=null!==n.alternate&&n.alternate.child===n.child,t=0,r=0;if(e)for(var o=n.child;null!==o;)t|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=n,o=o.sibling;else for(o=n.child;null!==o;)t|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=n,o=o.sibling;return n.subtreeFlags|=r,n.childLanes=t,e}function Gs(n,e,t){var r=e.pendingProps;switch(ti(e),e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ws(e),null;case 1:case 17:return To(e.type)&&Oo(),Ws(e),null;case 3:return r=e.stateNode,Zi(),wo(No),wo(_o),ra(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==n&&null!==n.child||(Ai(e)?e.flags|=4:null===n||n.memoizedState.isDehydrated&&!(256&e.flags)||(e.flags|=1024,null!==ai&&(ac(ai),ai=null))),zs(n,e),Ws(e),null;case 5:Ji(e);var o=Vi(Qi.current);if(t=e.type,null!==n&&null!=e.stateNode)Ts(n,e,t,r,o),n.ref!==e.ref&&(e.flags|=512,e.flags|=2097152);else{if(!r){if(null===e.stateNode)throw Error(i(166));return Ws(e),null}if(n=Vi(Wi.current),Ai(e)){r=e.stateNode,t=e.type;var a=e.memoizedProps;switch(r[fo]=e,r[po]=a,n=!!(1&e.mode),t){case"dialog":Dr("cancel",r),Dr("close",r);break;case"iframe":case"object":case"embed":Dr("load",r);break;case"video":case"audio":for(o=0;o<Pr.length;o++)Dr(Pr[o],r);break;case"source":Dr("error",r);break;case"img":case"image":case"link":Dr("error",r),Dr("load",r);break;case"details":Dr("toggle",r);break;case"input":H(r,a),Dr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Dr("invalid",r);break;case"textarea":on(r,a),Dr("invalid",r)}for(var l in xn(t,a),o=null,a)if(a.hasOwnProperty(l)){var c=a[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==a.suppressHydrationWarning&&Xr(r.textContent,c,n),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==a.suppressHydrationWarning&&Xr(r.textContent,c,n),o=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Dr("scroll",r)}switch(t){case"input":W(r),J(r,a,!0);break;case"textarea":W(r),sn(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=o,e.updateQueue=r,null!==r&&(e.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===n&&(n=ln(t)),"http://www.w3.org/1999/xhtml"===n?"script"===t?((n=l.createElement("div")).innerHTML="<script><\/script>",n=n.removeChild(n.firstChild)):"string"==typeof r.is?n=l.createElement(t,{is:r.is}):(n=l.createElement(t),"select"===t&&(l=n,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):n=l.createElementNS(n,t),n[fo]=e,n[po]=r,Is(n,e,!1,!1),e.stateNode=n;n:{switch(l=yn(t,r),t){case"dialog":Dr("cancel",n),Dr("close",n),o=r;break;case"iframe":case"object":case"embed":Dr("load",n),o=r;break;case"video":case"audio":for(o=0;o<Pr.length;o++)Dr(Pr[o],n);o=r;break;case"source":Dr("error",n),o=r;break;case"img":case"image":case"link":Dr("error",n),Dr("load",n),o=r;break;case"details":Dr("toggle",n),o=r;break;case"input":H(n,r),o=V(n,r),Dr("invalid",n);break;case"option":default:o=r;break;case"select":n._wrapperState={wasMultiple:!!r.multiple},o=R({},r,{value:void 0}),Dr("invalid",n);break;case"textarea":on(n,r),o=rn(n,r),Dr("invalid",n)}for(a in xn(t,o),c=o)if(c.hasOwnProperty(a)){var u=c[a];"style"===a?mn(n,u):"dangerouslySetInnerHTML"===a?null!=(u=u?u.__html:void 0)&&An(n,u):"children"===a?"string"==typeof u?("textarea"!==t||""!==u)&&fn(n,u):"number"==typeof u&&fn(n,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=u&&"onScroll"===a&&Dr("scroll",n):null!=u&&x(n,a,u,l))}switch(t){case"input":W(n),J(n,r,!1);break;case"textarea":W(n),sn(n);break;case"option":null!=r.value&&n.setAttribute("value",""+q(r.value));break;case"select":n.multiple=!!r.multiple,null!=(a=r.value)?tn(n,!!r.multiple,a,!1):null!=r.defaultValue&&tn(n,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(n.onclick=Jr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break n;case"img":r=!0;break n;default:r=!1}}r&&(e.flags|=4)}null!==e.ref&&(e.flags|=512,e.flags|=2097152)}return Ws(e),null;case 6:if(n&&null!=e.stateNode)Os(n,e,n.memoizedProps,r);else{if("string"!=typeof r&&null===e.stateNode)throw Error(i(166));if(t=Vi(Qi.current),Vi(Wi.current),Ai(e)){if(r=e.stateNode,t=e.memoizedProps,r[fo]=e,(a=r.nodeValue!==t)&&null!==(n=ri))switch(n.tag){case 3:Xr(r.nodeValue,t,!!(1&n.mode));break;case 5:!0!==n.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,t,!!(1&n.mode))}a&&(e.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[fo]=e,e.stateNode=r}return Ws(e),null;case 13:if(wo(na),r=e.memoizedState,null===n||null!==n.memoizedState&&null!==n.memoizedState.dehydrated){if(ii&&null!==oi&&1&e.mode&&!(128&e.flags))fi(),pi(),e.flags|=98560,a=!1;else if(a=Ai(e),null!==r&&null!==r.dehydrated){if(null===n){if(!a)throw Error(i(318));if(!(a=null!==(a=e.memoizedState)?a.dehydrated:null))throw Error(i(317));a[fo]=e}else pi(),!(128&e.flags)&&(e.memoizedState=null),e.flags|=4;Ws(e),a=!1}else null!==ai&&(ac(ai),ai=null),a=!0;if(!a)return 65536&e.flags?e:null}return 128&e.flags?(e.lanes=t,e):((r=null!==r)!=(null!==n&&null!==n.memoizedState)&&r&&(e.child.flags|=8192,1&e.mode&&(null===n||1&na.current?0===Ol&&(Ol=3):hc())),null!==e.updateQueue&&(e.flags|=4),Ws(e),null);case 4:return Zi(),zs(n,e),null===n&&$r(e.stateNode.containerInfo),Ws(e),null;case 10:return Si(e.type._context),Ws(e),null;case 19:if(wo(na),null===(a=e.memoizedState))return Ws(e),null;if(r=!!(128&e.flags),null===(l=a.rendering))if(r)Ys(a,!1);else{if(0!==Ol||null!==n&&128&n.flags)for(n=e.child;null!==n;){if(null!==(l=ea(n))){for(e.flags|=128,Ys(a,!1),null!==(r=l.updateQueue)&&(e.updateQueue=r,e.flags|=4),e.subtreeFlags=0,r=t,t=e.child;null!==t;)n=r,(a=t).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=n,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,n=l.dependencies,a.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),t=t.sibling;return jo(na,1&na.current|2),e.child}n=n.sibling}null!==a.tail&&Xn()>$l&&(e.flags|=128,r=!0,Ys(a,!1),e.lanes=4194304)}else{if(!r)if(null!==(n=ea(l))){if(e.flags|=128,r=!0,null!==(t=n.updateQueue)&&(e.updateQueue=t,e.flags|=4),Ys(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!ii)return Ws(e),null}else 2*Xn()-a.renderingStartTime>$l&&1073741824!==t&&(e.flags|=128,r=!0,Ys(a,!1),e.lanes=4194304);a.isBackwards?(l.sibling=e.child,e.child=l):(null!==(t=a.last)?t.sibling=l:e.child=l,a.last=l)}return null!==a.tail?(e=a.tail,a.rendering=e,a.tail=e.sibling,a.renderingStartTime=Xn(),e.sibling=null,t=na.current,jo(na,r?1&t|2:1&t),e):(Ws(e),null);case 22:case 23:return dc(),r=null!==e.memoizedState,null!==n&&null!==n.memoizedState!==r&&(e.flags|=8192),r&&1&e.mode?!!(1073741824&zl)&&(Ws(e),6&e.subtreeFlags&&(e.flags|=8192)):Ws(e),null;case 24:case 25:return null}throw Error(i(156,e.tag))}function Qs(n,e){switch(ti(e),e.tag){case 1:return To(e.type)&&Oo(),65536&(n=e.flags)?(e.flags=-65537&n|128,e):null;case 3:return Zi(),wo(No),wo(_o),ra(),65536&(n=e.flags)&&!(128&n)?(e.flags=-65537&n|128,e):null;case 5:return Ji(e),null;case 13:if(wo(na),null!==(n=e.memoizedState)&&null!==n.dehydrated){if(null===e.alternate)throw Error(i(340));pi()}return 65536&(n=e.flags)?(e.flags=-65537&n|128,e):null;case 19:return wo(na),null;case 4:return Zi(),null;case 10:return Si(e.type._context),null;case 22:case 23:return dc(),null;default:return null}}Is=function(n,e){for(var t=e.child;null!==t;){if(5===t.tag||6===t.tag)n.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},zs=function(){},Ts=function(n,e,t,r){var o=n.memoizedProps;if(o!==r){n=e.stateNode,Vi(Wi.current);var i,a=null;switch(t){case"input":o=V(n,o),r=V(n,r),a=[];break;case"select":o=R({},o,{value:void 0}),r=R({},r,{value:void 0}),a=[];break;case"textarea":o=rn(n,o),r=rn(n,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(n.onclick=Jr)}for(u in xn(t,r),t=null,o)if(!r.hasOwnProperty(u)&&o.hasOwnProperty(u)&&null!=o[u])if("style"===u){var l=o[u];for(i in l)l.hasOwnProperty(i)&&(t||(t={}),t[i]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?a||(a=[]):(a=a||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=o?o[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(i in l)!l.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(t||(t={}),t[i]="");for(i in c)c.hasOwnProperty(i)&&l[i]!==c[i]&&(t||(t={}),t[i]=c[i])}else t||(a||(a=[]),a.push(u,t)),t=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(a=a||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Dr("scroll",n),a||l===c||(a=[])):(a=a||[]).push(u,c))}t&&(a=a||[]).push("style",t);var u=a;(e.updateQueue=u)&&(e.flags|=4)}},Os=function(n,e,t,r){t!==r&&(e.flags|=4)};var Vs=!1,Hs=!1,Zs="function"==typeof WeakSet?WeakSet:Set,Xs=null;function Js(n,e){var t=n.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ec(n,e,t)}else t.current=null}function nl(n,e,t){try{t()}catch(t){Ec(n,e,t)}}var el=!1;function tl(n,e,t){var r=e.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&n)===n){var i=o.destroy;o.destroy=void 0,void 0!==i&&nl(e,t,i)}o=o.next}while(o!==r)}}function rl(n,e){if(null!==(e=null!==(e=e.updateQueue)?e.lastEffect:null)){var t=e=e.next;do{if((t.tag&n)===n){var r=t.create;t.destroy=r()}t=t.next}while(t!==e)}}function ol(n){var e=n.ref;if(null!==e){var t=n.stateNode;n.tag,n=t,"function"==typeof e?e(n):e.current=n}}function il(n){var e=n.alternate;null!==e&&(n.alternate=null,il(e)),n.child=null,n.deletions=null,n.sibling=null,5===n.tag&&null!==(e=n.stateNode)&&(delete e[fo],delete e[po],delete e[go],delete e[mo],delete e[bo]),n.stateNode=null,n.return=null,n.dependencies=null,n.memoizedProps=null,n.memoizedState=null,n.pendingProps=null,n.stateNode=null,n.updateQueue=null}function al(n){return 5===n.tag||3===n.tag||4===n.tag}function sl(n){n:for(;;){for(;null===n.sibling;){if(null===n.return||al(n.return))return null;n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue n;if(null===n.child||4===n.tag)continue n;n.child.return=n,n=n.child}if(!(2&n.flags))return n.stateNode}}function ll(n,e,t){var r=n.tag;if(5===r||6===r)n=n.stateNode,e?8===t.nodeType?t.parentNode.insertBefore(n,e):t.insertBefore(n,e):(8===t.nodeType?(e=t.parentNode).insertBefore(n,t):(e=t).appendChild(n),null!=(t=t._reactRootContainer)||null!==e.onclick||(e.onclick=Jr));else if(4!==r&&null!==(n=n.child))for(ll(n,e,t),n=n.sibling;null!==n;)ll(n,e,t),n=n.sibling}function cl(n,e,t){var r=n.tag;if(5===r||6===r)n=n.stateNode,e?t.insertBefore(n,e):t.appendChild(n);else if(4!==r&&null!==(n=n.child))for(cl(n,e,t),n=n.sibling;null!==n;)cl(n,e,t),n=n.sibling}var ul=null,dl=!1;function Al(n,e,t){for(t=t.child;null!==t;)fl(n,e,t),t=t.sibling}function fl(n,e,t){if(ae&&"function"==typeof ae.onCommitFiberUnmount)try{ae.onCommitFiberUnmount(ie,t)}catch(n){}switch(t.tag){case 5:Hs||Js(t,e);case 6:var r=ul,o=dl;ul=null,Al(n,e,t),dl=o,null!==(ul=r)&&(dl?(n=ul,t=t.stateNode,8===n.nodeType?n.parentNode.removeChild(t):n.removeChild(t)):ul.removeChild(t.stateNode));break;case 18:null!==ul&&(dl?(n=ul,t=t.stateNode,8===n.nodeType?lo(n.parentNode,t):1===n.nodeType&&lo(n,t),Fe(n)):lo(ul,t.stateNode));break;case 4:r=ul,o=dl,ul=t.stateNode.containerInfo,dl=!0,Al(n,e,t),ul=r,dl=o;break;case 0:case 11:case 14:case 15:if(!Hs&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(2&i||4&i)&&nl(t,e,a),o=o.next}while(o!==r)}Al(n,e,t);break;case 1:if(!Hs&&(Js(t,e),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(n){Ec(t,e,n)}Al(n,e,t);break;case 21:Al(n,e,t);break;case 22:1&t.mode?(Hs=(r=Hs)||null!==t.memoizedState,Al(n,e,t),Hs=r):Al(n,e,t);break;default:Al(n,e,t)}}function pl(n){var e=n.updateQueue;if(null!==e){n.updateQueue=null;var t=n.stateNode;null===t&&(t=n.stateNode=new Zs),e.forEach(function(e){var r=Sc.bind(null,n,e);t.has(e)||(t.add(e),e.then(r,r))})}}function hl(n,e){var t=e.deletions;if(null!==t)for(var r=0;r<t.length;r++){var o=t[r];try{var a=n,s=e,l=s;n:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,dl=!1;break n;case 3:case 4:ul=l.stateNode.containerInfo,dl=!0;break n}l=l.return}if(null===ul)throw Error(i(160));fl(a,s,o),ul=null,dl=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(n){Ec(o,e,n)}}if(12854&e.subtreeFlags)for(e=e.child;null!==e;)gl(e,n),e=e.sibling}function gl(n,e){var t=n.alternate,r=n.flags;switch(n.tag){case 0:case 11:case 14:case 15:if(hl(e,n),ml(n),4&r){try{tl(3,n,n.return),rl(3,n)}catch(e){Ec(n,n.return,e)}try{tl(5,n,n.return)}catch(e){Ec(n,n.return,e)}}break;case 1:hl(e,n),ml(n),512&r&&null!==t&&Js(t,t.return);break;case 5:if(hl(e,n),ml(n),512&r&&null!==t&&Js(t,t.return),32&n.flags){var o=n.stateNode;try{fn(o,"")}catch(e){Ec(n,n.return,e)}}if(4&r&&null!=(o=n.stateNode)){var a=n.memoizedProps,s=null!==t?t.memoizedProps:a,l=n.type,c=n.updateQueue;if(n.updateQueue=null,null!==c)try{"input"===l&&"radio"===a.type&&null!=a.name&&Z(o,a),yn(l,s);var u=yn(l,a);for(s=0;s<c.length;s+=2){var d=c[s],A=c[s+1];"style"===d?mn(o,A):"dangerouslySetInnerHTML"===d?An(o,A):"children"===d?fn(o,A):x(o,d,A,u)}switch(l){case"input":X(o,a);break;case"textarea":an(o,a);break;case"select":var f=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var p=a.value;null!=p?tn(o,!!a.multiple,p,!1):f!==!!a.multiple&&(null!=a.defaultValue?tn(o,!!a.multiple,a.defaultValue,!0):tn(o,!!a.multiple,a.multiple?[]:"",!1))}o[po]=a}catch(e){Ec(n,n.return,e)}}break;case 6:if(hl(e,n),ml(n),4&r){if(null===n.stateNode)throw Error(i(162));o=n.stateNode,a=n.memoizedProps;try{o.nodeValue=a}catch(e){Ec(n,n.return,e)}}break;case 3:if(hl(e,n),ml(n),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Fe(e.containerInfo)}catch(e){Ec(n,n.return,e)}break;case 4:default:hl(e,n),ml(n);break;case 13:hl(e,n),ml(n),8192&(o=n.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Kl=Xn())),4&r&&pl(n);break;case 22:if(d=null!==t&&null!==t.memoizedState,1&n.mode?(Hs=(u=Hs)||d,hl(e,n),Hs=u):hl(e,n),ml(n),8192&r){if(u=null!==n.memoizedState,(n.stateNode.isHidden=u)&&!d&&1&n.mode)for(Xs=n,d=n.child;null!==d;){for(A=Xs=d;null!==Xs;){switch(p=(f=Xs).child,f.tag){case 0:case 11:case 14:case 15:tl(4,f,f.return);break;case 1:Js(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){r=f,t=f.return;try{e=r,h.props=e.memoizedProps,h.state=e.memoizedState,h.componentWillUnmount()}catch(n){Ec(r,t,n)}}break;case 5:Js(f,f.return);break;case 22:if(null!==f.memoizedState){Cl(A);continue}}null!==p?(p.return=f,Xs=p):Cl(A)}d=d.sibling}n:for(d=null,A=n;;){if(5===A.tag){if(null===d){d=A;try{o=A.stateNode,u?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=A.stateNode,s=null!=(c=A.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=gn("display",s))}catch(e){Ec(n,n.return,e)}}}else if(6===A.tag){if(null===d)try{A.stateNode.nodeValue=u?"":A.memoizedProps}catch(e){Ec(n,n.return,e)}}else if((22!==A.tag&&23!==A.tag||null===A.memoizedState||A===n)&&null!==A.child){A.child.return=A,A=A.child;continue}if(A===n)break n;for(;null===A.sibling;){if(null===A.return||A.return===n)break n;d===A&&(d=null),A=A.return}d===A&&(d=null),A.sibling.return=A.return,A=A.sibling}}break;case 19:hl(e,n),ml(n),4&r&&pl(n);case 21:}}function ml(n){var e=n.flags;if(2&e){try{n:{for(var t=n.return;null!==t;){if(al(t)){var r=t;break n}t=t.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(fn(o,""),r.flags&=-33),cl(n,sl(n),o);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(n,sl(n),a);break;default:throw Error(i(161))}}catch(e){Ec(n,n.return,e)}n.flags&=-3}4096&e&&(n.flags&=-4097)}function bl(n,e,t){Xs=n,xl(n,e,t)}function xl(n,e,t){for(var r=!!(1&n.mode);null!==Xs;){var o=Xs,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Vs;if(!a){var s=o.alternate,l=null!==s&&null!==s.memoizedState||Hs;s=Vs;var c=Hs;if(Vs=a,(Hs=l)&&!c)for(Xs=o;null!==Xs;)l=(a=Xs).child,22===a.tag&&null!==a.memoizedState?vl(o):null!==l?(l.return=a,Xs=l):vl(o);for(;null!==i;)Xs=i,xl(i,e,t),i=i.sibling;Xs=o,Vs=s,Hs=c}yl(n)}else 8772&o.subtreeFlags&&null!==i?(i.return=o,Xs=i):yl(n)}}function yl(n){for(;null!==Xs;){var e=Xs;if(8772&e.flags){var t=e.alternate;try{if(8772&e.flags)switch(e.tag){case 0:case 11:case 15:Hs||rl(5,e);break;case 1:var r=e.stateNode;if(4&e.flags&&!Hs)if(null===t)r.componentDidMount();else{var o=e.elementType===e.type?t.memoizedProps:ts(e.type,t.memoizedProps);r.componentDidUpdate(o,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=e.updateQueue;null!==a&&qi(e,a,r);break;case 3:var s=e.updateQueue;if(null!==s){if(t=null,null!==e.child)switch(e.child.tag){case 5:case 1:t=e.child.stateNode}qi(e,s,t)}break;case 5:var l=e.stateNode;if(null===t&&4&e.flags){t=l;var c=e.memoizedProps;switch(e.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&t.focus();break;case"img":c.src&&(t.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===e.memoizedState){var u=e.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var A=d.dehydrated;null!==A&&Fe(A)}}}break;default:throw Error(i(163))}Hs||512&e.flags&&ol(e)}catch(n){Ec(e,e.return,n)}}if(e===n){Xs=null;break}if(null!==(t=e.sibling)){t.return=e.return,Xs=t;break}Xs=e.return}}function Cl(n){for(;null!==Xs;){var e=Xs;if(e===n){Xs=null;break}var t=e.sibling;if(null!==t){t.return=e.return,Xs=t;break}Xs=e.return}}function vl(n){for(;null!==Xs;){var e=Xs;try{switch(e.tag){case 0:case 11:case 15:var t=e.return;try{rl(4,e)}catch(n){Ec(e,t,n)}break;case 1:var r=e.stateNode;if("function"==typeof r.componentDidMount){var o=e.return;try{r.componentDidMount()}catch(n){Ec(e,o,n)}}var i=e.return;try{ol(e)}catch(n){Ec(e,i,n)}break;case 5:var a=e.return;try{ol(e)}catch(n){Ec(e,a,n)}}}catch(n){Ec(e,e.return,n)}if(e===n){Xs=null;break}var s=e.sibling;if(null!==s){s.return=e.return,Xs=s;break}Xs=e.return}}var Bl,El=Math.ceil,kl=y.ReactCurrentDispatcher,wl=y.ReactCurrentOwner,jl=y.ReactCurrentBatchConfig,Sl=0,_l=null,Nl=null,Il=0,zl=0,Tl=ko(0),Ol=0,Pl=null,Ll=0,Rl=0,Ml=0,Dl=null,Ul=null,Kl=0,$l=1/0,Fl=null,ql=!1,Yl=null,Wl=null,Gl=!1,Ql=null,Vl=0,Hl=0,Zl=null,Xl=-1,Jl=0;function nc(){return 6&Sl?Xn():-1!==Xl?Xl:Xl=Xn()}function ec(n){return 1&n.mode?2&Sl&&0!==Il?Il&-Il:null!==gi.transition?(0===Jl&&(Jl=ge()),Jl):0!==(n=ye)?n:n=void 0===(n=window.event)?16:Ze(n.type):1}function tc(n,e,t,r){if(50<Hl)throw Hl=0,Zl=null,Error(i(185));be(n,t,r),2&Sl&&n===_l||(n===_l&&(!(2&Sl)&&(Rl|=t),4===Ol&&sc(n,Il)),rc(n,r),1===t&&0===Sl&&!(1&e.mode)&&($l=Xn()+500,Uo&&Fo()))}function rc(n,e){var t=n.callbackNode;!function(n,e){for(var t=n.suspendedLanes,r=n.pingedLanes,o=n.expirationTimes,i=n.pendingLanes;0<i;){var a=31-se(i),s=1<<a,l=o[a];-1===l?0!==(s&t)&&0===(s&r)||(o[a]=pe(s,e)):l<=e&&(n.expiredLanes|=s),i&=~s}}(n,e);var r=fe(n,n===_l?Il:0);if(0===r)null!==t&&Vn(t),n.callbackNode=null,n.callbackPriority=0;else if(e=r&-r,n.callbackPriority!==e){if(null!=t&&Vn(t),1===e)0===n.tag?function(n){Uo=!0,$o(n)}(lc.bind(null,n)):$o(lc.bind(null,n)),ao(function(){!(6&Sl)&&Fo()}),t=null;else{switch(Ce(r)){case 1:t=ne;break;case 4:t=ee;break;case 16:default:t=te;break;case 536870912:t=oe}t=_c(t,oc.bind(null,n))}n.callbackPriority=e,n.callbackNode=t}}function oc(n,e){if(Xl=-1,Jl=0,6&Sl)throw Error(i(327));var t=n.callbackNode;if(vc()&&n.callbackNode!==t)return null;var r=fe(n,n===_l?Il:0);if(0===r)return null;if(30&r||0!==(r&n.expiredLanes)||e)e=gc(n,r);else{e=r;var o=Sl;Sl|=2;var a=pc();for(_l===n&&Il===e||(Fl=null,$l=Xn()+500,Ac(n,e));;)try{bc();break}catch(e){fc(n,e)}ji(),kl.current=a,Sl=o,null!==Nl?e=0:(_l=null,Il=0,e=Ol)}if(0!==e){if(2===e&&0!==(o=he(n))&&(r=o,e=ic(n,o)),1===e)throw t=Pl,Ac(n,0),sc(n,r),rc(n,Xn()),t;if(6===e)sc(n,r);else{if(o=n.current.alternate,!(30&r||function(n){for(var e=n;;){if(16384&e.flags){var t=e.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var o=t[r],i=o.getSnapshot;o=o.value;try{if(!sr(i(),o))return!1}catch(n){return!1}}}if(t=e.child,16384&e.subtreeFlags&&null!==t)t.return=e,e=t;else{if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)return!0;e=e.return}e.sibling.return=e.return,e=e.sibling}}return!0}(o)||(e=gc(n,r),2===e&&(a=he(n),0!==a&&(r=a,e=ic(n,a))),1!==e)))throw t=Pl,Ac(n,0),sc(n,r),rc(n,Xn()),t;switch(n.finishedWork=o,n.finishedLanes=r,e){case 0:case 1:throw Error(i(345));case 2:case 5:Cc(n,Ul,Fl);break;case 3:if(sc(n,r),(130023424&r)===r&&10<(e=Kl+500-Xn())){if(0!==fe(n,0))break;if(((o=n.suspendedLanes)&r)!==r){nc(),n.pingedLanes|=n.suspendedLanes&o;break}n.timeoutHandle=ro(Cc.bind(null,n,Ul,Fl),e);break}Cc(n,Ul,Fl);break;case 4:if(sc(n,r),(4194240&r)===r)break;for(e=n.eventTimes,o=-1;0<r;){var s=31-se(r);a=1<<s,(s=e[s])>o&&(o=s),r&=~a}if(r=o,10<(r=(120>(r=Xn()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*El(r/1960))-r)){n.timeoutHandle=ro(Cc.bind(null,n,Ul,Fl),r);break}Cc(n,Ul,Fl);break;default:throw Error(i(329))}}}return rc(n,Xn()),n.callbackNode===t?oc.bind(null,n):null}function ic(n,e){var t=Dl;return n.current.memoizedState.isDehydrated&&(Ac(n,e).flags|=256),2!==(n=gc(n,e))&&(e=Ul,Ul=t,null!==e&&ac(e)),n}function ac(n){null===Ul?Ul=n:Ul.push.apply(Ul,n)}function sc(n,e){for(e&=~Ml,e&=~Rl,n.suspendedLanes|=e,n.pingedLanes&=~e,n=n.expirationTimes;0<e;){var t=31-se(e),r=1<<t;n[t]=-1,e&=~r}}function lc(n){if(6&Sl)throw Error(i(327));vc();var e=fe(n,0);if(!(1&e))return rc(n,Xn()),null;var t=gc(n,e);if(0!==n.tag&&2===t){var r=he(n);0!==r&&(e=r,t=ic(n,r))}if(1===t)throw t=Pl,Ac(n,0),sc(n,e),rc(n,Xn()),t;if(6===t)throw Error(i(345));return n.finishedWork=n.current.alternate,n.finishedLanes=e,Cc(n,Ul,Fl),rc(n,Xn()),null}function cc(n,e){var t=Sl;Sl|=1;try{return n(e)}finally{0===(Sl=t)&&($l=Xn()+500,Uo&&Fo())}}function uc(n){null!==Ql&&0===Ql.tag&&!(6&Sl)&&vc();var e=Sl;Sl|=1;var t=jl.transition,r=ye;try{if(jl.transition=null,ye=1,n)return n()}finally{ye=r,jl.transition=t,!(6&(Sl=e))&&Fo()}}function dc(){zl=Tl.current,wo(Tl)}function Ac(n,e){n.finishedWork=null,n.finishedLanes=0;var t=n.timeoutHandle;if(-1!==t&&(n.timeoutHandle=-1,oo(t)),null!==Nl)for(t=Nl.return;null!==t;){var r=t;switch(ti(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Oo();break;case 3:Zi(),wo(No),wo(_o),ra();break;case 5:Ji(r);break;case 4:Zi();break;case 13:case 19:wo(na);break;case 10:Si(r.type._context);break;case 22:case 23:dc()}t=t.return}if(_l=n,Nl=n=Tc(n.current,null),Il=zl=e,Ol=0,Pl=null,Ml=Rl=Ll=0,Ul=Dl=null,null!==zi){for(e=0;e<zi.length;e++)if(null!==(r=(t=zi[e]).interleaved)){t.interleaved=null;var o=r.next,i=t.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}t.pending=r}zi=null}return n}function fc(n,e){for(;;){var t=Nl;try{if(ji(),oa.current=Xa,ua){for(var r=sa.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ua=!1}if(aa=0,ca=la=sa=null,da=!1,Aa=0,wl.current=null,null===t||null===t.return){Ol=1,Pl=e,Nl=null;break}n:{var a=n,s=t.return,l=t,c=e;if(e=Il,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,A=d.tag;if(!(1&d.mode||0!==A&&11!==A&&15!==A)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=gs(s);if(null!==p){p.flags&=-257,ms(p,s,l,0,e),1&p.mode&&hs(a,u,e),c=u;var h=(e=p).updateQueue;if(null===h){var g=new Set;g.add(c),e.updateQueue=g}else h.add(c);break n}if(!(1&e)){hs(a,u,e),hc();break n}c=Error(i(426))}else if(ii&&1&l.mode){var m=gs(s);if(null!==m){!(65536&m.flags)&&(m.flags|=256),ms(m,s,l,0,e),hi(cs(c,l));break n}}a=c=cs(c,l),4!==Ol&&(Ol=2),null===Dl?Dl=[a]:Dl.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,e&=-e,a.lanes|=e,$i(a,fs(0,c,e));break n;case 1:l=c;var b=a.type,x=a.stateNode;if(!(128&a.flags||"function"!=typeof b.getDerivedStateFromError&&(null===x||"function"!=typeof x.componentDidCatch||null!==Wl&&Wl.has(x)))){a.flags|=65536,e&=-e,a.lanes|=e,$i(a,ps(a,l,e));break n}}a=a.return}while(null!==a)}yc(t)}catch(n){e=n,Nl===t&&null!==t&&(Nl=t=t.return);continue}break}}function pc(){var n=kl.current;return kl.current=Xa,null===n?Xa:n}function hc(){0!==Ol&&3!==Ol&&2!==Ol||(Ol=4),null===_l||!(268435455&Ll)&&!(268435455&Rl)||sc(_l,Il)}function gc(n,e){var t=Sl;Sl|=2;var r=pc();for(_l===n&&Il===e||(Fl=null,Ac(n,e));;)try{mc();break}catch(e){fc(n,e)}if(ji(),Sl=t,kl.current=r,null!==Nl)throw Error(i(261));return _l=null,Il=0,Ol}function mc(){for(;null!==Nl;)xc(Nl)}function bc(){for(;null!==Nl&&!Hn();)xc(Nl)}function xc(n){var e=Bl(n.alternate,n,zl);n.memoizedProps=n.pendingProps,null===e?yc(n):Nl=e,wl.current=null}function yc(n){var e=n;do{var t=e.alternate;if(n=e.return,32768&e.flags){if(null!==(t=Qs(t,e)))return t.flags&=32767,void(Nl=t);if(null===n)return Ol=6,void(Nl=null);n.flags|=32768,n.subtreeFlags=0,n.deletions=null}else if(null!==(t=Gs(t,e,zl)))return void(Nl=t);if(null!==(e=e.sibling))return void(Nl=e);Nl=e=n}while(null!==e);0===Ol&&(Ol=5)}function Cc(n,e,t){var r=ye,o=jl.transition;try{jl.transition=null,ye=1,function(n,e,t,r){do{vc()}while(null!==Ql);if(6&Sl)throw Error(i(327));t=n.finishedWork;var o=n.finishedLanes;if(null===t)return null;if(n.finishedWork=null,n.finishedLanes=0,t===n.current)throw Error(i(177));n.callbackNode=null,n.callbackPriority=0;var a=t.lanes|t.childLanes;if(function(n,e){var t=n.pendingLanes&~e;n.pendingLanes=e,n.suspendedLanes=0,n.pingedLanes=0,n.expiredLanes&=e,n.mutableReadLanes&=e,n.entangledLanes&=e,e=n.entanglements;var r=n.eventTimes;for(n=n.expirationTimes;0<t;){var o=31-se(t),i=1<<o;e[o]=0,r[o]=-1,n[o]=-1,t&=~i}}(n,a),n===_l&&(Nl=_l=null,Il=0),!(2064&t.subtreeFlags)&&!(2064&t.flags)||Gl||(Gl=!0,_c(te,function(){return vc(),null})),a=!!(15990&t.flags),15990&t.subtreeFlags||a){a=jl.transition,jl.transition=null;var s=ye;ye=1;var l=Sl;Sl|=4,wl.current=null,function(n,e){if(no=Ye,fr(n=Ar())){if("selectionStart"in n)var t={start:n.selectionStart,end:n.selectionEnd};else n:{var r=(t=(t=n.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{t.nodeType,a.nodeType}catch(n){t=null;break n}var s=0,l=-1,c=-1,u=0,d=0,A=n,f=null;e:for(;;){for(var p;A!==t||0!==o&&3!==A.nodeType||(l=s+o),A!==a||0!==r&&3!==A.nodeType||(c=s+r),3===A.nodeType&&(s+=A.nodeValue.length),null!==(p=A.firstChild);)f=A,A=p;for(;;){if(A===n)break e;if(f===t&&++u===o&&(l=s),f===a&&++d===r&&(c=s),null!==(p=A.nextSibling))break;f=(A=f).parentNode}A=p}t=-1===l||-1===c?null:{start:l,end:c}}else t=null}t=t||{start:0,end:0}}else t=null;for(eo={focusedElem:n,selectionRange:t},Ye=!1,Xs=e;null!==Xs;)if(n=(e=Xs).child,1028&e.subtreeFlags&&null!==n)n.return=e,Xs=n;else for(;null!==Xs;){e=Xs;try{var h=e.alternate;if(1024&e.flags)switch(e.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,m=h.memoizedState,b=e.stateNode,x=b.getSnapshotBeforeUpdate(e.elementType===e.type?g:ts(e.type,g),m);b.__reactInternalSnapshotBeforeUpdate=x}break;case 3:var y=e.stateNode.containerInfo;1===y.nodeType?y.textContent="":9===y.nodeType&&y.documentElement&&y.removeChild(y.documentElement);break;default:throw Error(i(163))}}catch(n){Ec(e,e.return,n)}if(null!==(n=e.sibling)){n.return=e.return,Xs=n;break}Xs=e.return}h=el,el=!1}(n,t),gl(t,n),pr(eo),Ye=!!no,eo=no=null,n.current=t,bl(t,n,o),Zn(),Sl=l,ye=s,jl.transition=a}else n.current=t;if(Gl&&(Gl=!1,Ql=n,Vl=o),0===(a=n.pendingLanes)&&(Wl=null),function(n){if(ae&&"function"==typeof ae.onCommitFiberRoot)try{ae.onCommitFiberRoot(ie,n,void 0,!(128&~n.current.flags))}catch(n){}}(t.stateNode),rc(n,Xn()),null!==e)for(r=n.onRecoverableError,t=0;t<e.length;t++)r((o=e[t]).value,{componentStack:o.stack,digest:o.digest});if(ql)throw ql=!1,n=Yl,Yl=null,n;!!(1&Vl)&&0!==n.tag&&vc(),1&(a=n.pendingLanes)?n===Zl?Hl++:(Hl=0,Zl=n):Hl=0,Fo()}(n,e,t,r)}finally{jl.transition=o,ye=r}return null}function vc(){if(null!==Ql){var n=Ce(Vl),e=jl.transition,t=ye;try{if(jl.transition=null,ye=16>n?16:n,null===Ql)var r=!1;else{if(n=Ql,Ql=null,Vl=0,6&Sl)throw Error(i(331));var o=Sl;for(Sl|=4,Xs=n.current;null!==Xs;){var a=Xs,s=a.child;if(16&Xs.flags){var l=a.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Xs=u;null!==Xs;){var d=Xs;switch(d.tag){case 0:case 11:case 15:tl(8,d,a)}var A=d.child;if(null!==A)A.return=d,Xs=A;else for(;null!==Xs;){var f=(d=Xs).sibling,p=d.return;if(il(d),d===u){Xs=null;break}if(null!==f){f.return=p,Xs=f;break}Xs=p}}}var h=a.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var m=g.sibling;g.sibling=null,g=m}while(null!==g)}}Xs=a}}if(2064&a.subtreeFlags&&null!==s)s.return=a,Xs=s;else n:for(;null!==Xs;){if(2048&(a=Xs).flags)switch(a.tag){case 0:case 11:case 15:tl(9,a,a.return)}var b=a.sibling;if(null!==b){b.return=a.return,Xs=b;break n}Xs=a.return}}var x=n.current;for(Xs=x;null!==Xs;){var y=(s=Xs).child;if(2064&s.subtreeFlags&&null!==y)y.return=s,Xs=y;else n:for(s=x;null!==Xs;){if(2048&(l=Xs).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(n){Ec(l,l.return,n)}if(l===s){Xs=null;break n}var C=l.sibling;if(null!==C){C.return=l.return,Xs=C;break n}Xs=l.return}}if(Sl=o,Fo(),ae&&"function"==typeof ae.onPostCommitFiberRoot)try{ae.onPostCommitFiberRoot(ie,n)}catch(n){}r=!0}return r}finally{ye=t,jl.transition=e}}return!1}function Bc(n,e,t){n=Ui(n,e=fs(0,e=cs(t,e),1),1),e=nc(),null!==n&&(be(n,1,e),rc(n,e))}function Ec(n,e,t){if(3===n.tag)Bc(n,n,t);else for(;null!==e;){if(3===e.tag){Bc(e,n,t);break}if(1===e.tag){var r=e.stateNode;if("function"==typeof e.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wl||!Wl.has(r))){e=Ui(e,n=ps(e,n=cs(t,n),1),1),n=nc(),null!==e&&(be(e,1,n),rc(e,n));break}}e=e.return}}function kc(n,e,t){var r=n.pingCache;null!==r&&r.delete(e),e=nc(),n.pingedLanes|=n.suspendedLanes&t,_l===n&&(Il&t)===t&&(4===Ol||3===Ol&&(130023424&Il)===Il&&500>Xn()-Kl?Ac(n,0):Ml|=t),rc(n,e)}function wc(n,e){0===e&&(1&n.mode?(e=de,!(130023424&(de<<=1))&&(de=4194304)):e=1);var t=nc();null!==(n=Pi(n,e))&&(be(n,e,t),rc(n,t))}function jc(n){var e=n.memoizedState,t=0;null!==e&&(t=e.retryLane),wc(n,t)}function Sc(n,e){var t=0;switch(n.tag){case 13:var r=n.stateNode,o=n.memoizedState;null!==o&&(t=o.retryLane);break;case 19:r=n.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(e),wc(n,t)}function _c(n,e){return Qn(n,e)}function Nc(n,e,t,r){this.tag=n,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ic(n,e,t,r){return new Nc(n,e,t,r)}function zc(n){return!(!(n=n.prototype)||!n.isReactComponent)}function Tc(n,e){var t=n.alternate;return null===t?((t=Ic(n.tag,e,n.key,n.mode)).elementType=n.elementType,t.type=n.type,t.stateNode=n.stateNode,t.alternate=n,n.alternate=t):(t.pendingProps=e,t.type=n.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&n.flags,t.childLanes=n.childLanes,t.lanes=n.lanes,t.child=n.child,t.memoizedProps=n.memoizedProps,t.memoizedState=n.memoizedState,t.updateQueue=n.updateQueue,e=n.dependencies,t.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},t.sibling=n.sibling,t.index=n.index,t.ref=n.ref,t}function Oc(n,e,t,r,o,a){var s=2;if(r=n,"function"==typeof n)zc(n)&&(s=1);else if("string"==typeof n)s=5;else n:switch(n){case B:return Pc(t.children,o,a,e);case E:s=8,o|=8;break;case k:return(n=Ic(12,t,e,2|o)).elementType=k,n.lanes=a,n;case _:return(n=Ic(13,t,e,o)).elementType=_,n.lanes=a,n;case N:return(n=Ic(19,t,e,o)).elementType=N,n.lanes=a,n;case T:return Lc(t,o,a,e);default:if("object"==typeof n&&null!==n)switch(n.$$typeof){case w:s=10;break n;case j:s=9;break n;case S:s=11;break n;case I:s=14;break n;case z:s=16,r=null;break n}throw Error(i(130,null==n?n:typeof n,""))}return(e=Ic(s,t,e,o)).elementType=n,e.type=r,e.lanes=a,e}function Pc(n,e,t,r){return(n=Ic(7,n,r,e)).lanes=t,n}function Lc(n,e,t,r){return(n=Ic(22,n,r,e)).elementType=T,n.lanes=t,n.stateNode={isHidden:!1},n}function Rc(n,e,t){return(n=Ic(6,n,null,e)).lanes=t,n}function Mc(n,e,t){return(e=Ic(4,null!==n.children?n.children:[],n.key,e)).lanes=t,e.stateNode={containerInfo:n.containerInfo,pendingChildren:null,implementation:n.implementation},e}function Dc(n,e,t,r,o){this.tag=e,this.containerInfo=n,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=me(0),this.expirationTimes=me(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=me(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Uc(n,e,t,r,o,i,a,s,l){return n=new Dc(n,e,t,s,l),1===e?(e=1,!0===i&&(e|=8)):e=0,i=Ic(3,null,null,e),n.current=i,i.stateNode=n,i.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ri(i),n}function Kc(n){if(!n)return So;n:{if(Fn(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var e=n;do{switch(e.tag){case 3:e=e.stateNode.context;break n;case 1:if(To(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break n}}e=e.return}while(null!==e);throw Error(i(171))}if(1===n.tag){var t=n.type;if(To(t))return Lo(n,t,e)}return e}function $c(n,e,t,r,o,i,a,s,l){return(n=Uc(t,r,!0,n,0,i,0,s,l)).context=Kc(null),t=n.current,(i=Di(r=nc(),o=ec(t))).callback=null!=e?e:null,Ui(t,i,o),n.current.lanes=o,be(n,o,r),rc(n,r),n}function Fc(n,e,t,r){var o=e.current,i=nc(),a=ec(o);return t=Kc(t),null===e.context?e.context=t:e.pendingContext=t,(e=Di(i,a)).payload={element:n},null!==(r=void 0===r?null:r)&&(e.callback=r),null!==(n=Ui(o,e,a))&&(tc(n,o,a,i),Ki(n,o,a)),a}function qc(n){return(n=n.current).child?(n.child.tag,n.child.stateNode):null}function Yc(n,e){if(null!==(n=n.memoizedState)&&null!==n.dehydrated){var t=n.retryLane;n.retryLane=0!==t&&t<e?t:e}}function Wc(n,e){Yc(n,e),(n=n.alternate)&&Yc(n,e)}Bl=function(n,e,t){if(null!==n)if(n.memoizedProps!==e.pendingProps||No.current)xs=!0;else{if(0===(n.lanes&t)&&!(128&e.flags))return xs=!1,function(n,e,t){switch(e.tag){case 3:_s(e),pi();break;case 5:Xi(e);break;case 1:To(e.type)&&Ro(e);break;case 4:Hi(e,e.stateNode.containerInfo);break;case 10:var r=e.type._context,o=e.memoizedProps.value;jo(Bi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=e.memoizedState))return null!==r.dehydrated?(jo(na,1&na.current),e.flags|=128,null):0!==(t&e.child.childLanes)?Rs(n,e,t):(jo(na,1&na.current),null!==(n=qs(n,e,t))?n.sibling:null);jo(na,1&na.current);break;case 19:if(r=0!==(t&e.childLanes),128&n.flags){if(r)return $s(n,e,t);e.flags|=128}if(null!==(o=e.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),jo(na,na.current),r)break;return null;case 22:case 23:return e.lanes=0,Es(n,e,t)}return qs(n,e,t)}(n,e,t);xs=!!(131072&n.flags)}else xs=!1,ii&&1048576&e.flags&&ni(e,Go,e.index);switch(e.lanes=0,e.tag){case 2:var r=e.type;Fs(n,e),n=e.pendingProps;var o=zo(e,_o.current);Ni(e,t),o=ga(null,e,r,n,o,t);var a=ma();return e.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(e.tag=1,e.memoizedState=null,e.updateQueue=null,To(r)?(a=!0,Ro(e)):a=!1,e.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ri(e),o.updater=os,e.stateNode=o,o._reactInternals=e,ls(e,r,n,t),e=Ss(null,e,r,!0,a,t)):(e.tag=0,ii&&a&&ei(e),ys(null,e,o,t),e=e.child),e;case 16:r=e.elementType;n:{switch(Fs(n,e),n=e.pendingProps,r=(o=r._init)(r._payload),e.type=r,o=e.tag=function(n){if("function"==typeof n)return zc(n)?1:0;if(null!=n){if((n=n.$$typeof)===S)return 11;if(n===I)return 14}return 2}(r),n=ts(r,n),o){case 0:e=ws(null,e,r,n,t);break n;case 1:e=js(null,e,r,n,t);break n;case 11:e=Cs(null,e,r,n,t);break n;case 14:e=vs(null,e,r,ts(r.type,n),t);break n}throw Error(i(306,r,""))}return e;case 0:return r=e.type,o=e.pendingProps,ws(n,e,r,o=e.elementType===r?o:ts(r,o),t);case 1:return r=e.type,o=e.pendingProps,js(n,e,r,o=e.elementType===r?o:ts(r,o),t);case 3:n:{if(_s(e),null===n)throw Error(i(387));r=e.pendingProps,o=(a=e.memoizedState).element,Mi(n,e),Fi(e,r,null,t);var s=e.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},e.updateQueue.baseState=a,e.memoizedState=a,256&e.flags){e=Ns(n,e,r,t,o=cs(Error(i(423)),e));break n}if(r!==o){e=Ns(n,e,r,t,o=cs(Error(i(424)),e));break n}for(oi=co(e.stateNode.containerInfo.firstChild),ri=e,ii=!0,ai=null,t=vi(e,null,r,t),e.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(pi(),r===o){e=qs(n,e,t);break n}ys(n,e,r,t)}e=e.child}return e;case 5:return Xi(e),null===n&&ui(e),r=e.type,o=e.pendingProps,a=null!==n?n.memoizedProps:null,s=o.children,to(r,o)?s=null:null!==a&&to(r,a)&&(e.flags|=32),ks(n,e),ys(n,e,s,t),e.child;case 6:return null===n&&ui(e),null;case 13:return Rs(n,e,t);case 4:return Hi(e,e.stateNode.containerInfo),r=e.pendingProps,null===n?e.child=Ci(e,null,r,t):ys(n,e,r,t),e.child;case 11:return r=e.type,o=e.pendingProps,Cs(n,e,r,o=e.elementType===r?o:ts(r,o),t);case 7:return ys(n,e,e.pendingProps,t),e.child;case 8:case 12:return ys(n,e,e.pendingProps.children,t),e.child;case 10:n:{if(r=e.type._context,o=e.pendingProps,a=e.memoizedProps,s=o.value,jo(Bi,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===o.children&&!No.current){e=qs(n,e,t);break n}}else for(null!==(a=e.child)&&(a.return=e);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===a.tag){(c=Di(-1,t&-t)).tag=2;var u=a.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}a.lanes|=t,null!==(c=a.alternate)&&(c.lanes|=t),_i(a.return,t,e),l.lanes|=t;break}c=c.next}}else if(10===a.tag)s=a.type===e.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(i(341));s.lanes|=t,null!==(l=s.alternate)&&(l.lanes|=t),_i(s,t,e),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===e){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}ys(n,e,o.children,t),e=e.child}return e;case 9:return o=e.type,r=e.pendingProps.children,Ni(e,t),r=r(o=Ii(o)),e.flags|=1,ys(n,e,r,t),e.child;case 14:return o=ts(r=e.type,e.pendingProps),vs(n,e,r,o=ts(r.type,o),t);case 15:return Bs(n,e,e.type,e.pendingProps,t);case 17:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:ts(r,o),Fs(n,e),e.tag=1,To(r)?(n=!0,Ro(e)):n=!1,Ni(e,t),as(e,r,o),ls(e,r,o,t),Ss(null,e,r,!0,n,t);case 19:return $s(n,e,t);case 22:return Es(n,e,t)}throw Error(i(156,e.tag))};var Gc="function"==typeof reportError?reportError:function(n){console.error(n)};function Qc(n){this._internalRoot=n}function Vc(n){this._internalRoot=n}function Hc(n){return!(!n||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)}function Zc(n){return!(!n||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType&&(8!==n.nodeType||" react-mount-point-unstable "!==n.nodeValue))}function Xc(){}function Jc(n,e,t,r,o){var i=t._reactRootContainer;if(i){var a=i;if("function"==typeof o){var s=o;o=function(){var n=qc(a);s.call(n)}}Fc(e,a,n,o)}else a=function(n,e,t,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var n=qc(a);i.call(n)}}var a=$c(e,r,n,0,null,!1,0,"",Xc);return n._reactRootContainer=a,n[ho]=a.current,$r(8===n.nodeType?n.parentNode:n),uc(),a}for(;o=n.lastChild;)n.removeChild(o);if("function"==typeof r){var s=r;r=function(){var n=qc(l);s.call(n)}}var l=Uc(n,0,!1,null,0,!1,0,"",Xc);return n._reactRootContainer=l,n[ho]=l.current,$r(8===n.nodeType?n.parentNode:n),uc(function(){Fc(e,l,t,r)}),l}(t,e,n,o,r);return qc(a)}Vc.prototype.render=Qc.prototype.render=function(n){var e=this._internalRoot;if(null===e)throw Error(i(409));Fc(n,e,null,null)},Vc.prototype.unmount=Qc.prototype.unmount=function(){var n=this._internalRoot;if(null!==n){this._internalRoot=null;var e=n.containerInfo;uc(function(){Fc(null,n,null,null)}),e[ho]=null}},Vc.prototype.unstable_scheduleHydration=function(n){if(n){var e=ke();n={blockedOn:null,target:n,priority:e};for(var t=0;t<Oe.length&&0!==e&&e<Oe[t].priority;t++);Oe.splice(t,0,n),0===t&&Me(n)}},ve=function(n){switch(n.tag){case 3:var e=n.stateNode;if(e.current.memoizedState.isDehydrated){var t=Ae(e.pendingLanes);0!==t&&(xe(e,1|t),rc(e,Xn()),!(6&Sl)&&($l=Xn()+500,Fo()))}break;case 13:uc(function(){var e=Pi(n,1);if(null!==e){var t=nc();tc(e,n,1,t)}}),Wc(n,1)}},Be=function(n){if(13===n.tag){var e=Pi(n,134217728);null!==e&&tc(e,n,134217728,nc()),Wc(n,134217728)}},Ee=function(n){if(13===n.tag){var e=ec(n),t=Pi(n,e);null!==t&&tc(t,n,e,nc()),Wc(n,e)}},ke=function(){return ye},we=function(n,e){var t=ye;try{return ye=n,e()}finally{ye=t}},Bn=function(n,e,t){switch(e){case"input":if(X(n,t),e=t.name,"radio"===t.type&&null!=e){for(t=n;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<t.length;e++){var r=t[e];if(r!==n&&r.form===n.form){var o=vo(r);if(!o)throw Error(i(90));G(r),X(r,o)}}}break;case"textarea":an(n,t);break;case"select":null!=(e=t.value)&&tn(n,!!t.multiple,e,!1)}},_n=cc,Nn=uc;var nu={usingClientEntryPoint:!1,Events:[yo,Co,vo,jn,Sn,cc]},eu={findFiberByHostInstance:xo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},tu={bundleType:eu.bundleType,version:eu.version,rendererPackageName:eu.rendererPackageName,rendererConfig:eu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:y.ReactCurrentDispatcher,findHostInstanceByFiber:function(n){return null===(n=Wn(n))?null:n.stateNode},findFiberByHostInstance:eu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{ie=ru.inject(tu),ae=ru}catch(dn){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nu,e.createPortal=function(n,e){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Hc(e))throw Error(i(200));return function(n,e,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:v,key:null==r?null:""+r,children:n,containerInfo:e,implementation:t}}(n,e,null,t)},e.createRoot=function(n,e){if(!Hc(n))throw Error(i(299));var t=!1,r="",o=Gc;return null!=e&&(!0===e.unstable_strictMode&&(t=!0),void 0!==e.identifierPrefix&&(r=e.identifierPrefix),void 0!==e.onRecoverableError&&(o=e.onRecoverableError)),e=Uc(n,1,!1,null,0,t,0,r,o),n[ho]=e.current,$r(8===n.nodeType?n.parentNode:n),new Qc(e)},e.findDOMNode=function(n){if(null==n)return null;if(1===n.nodeType)return n;var e=n._reactInternals;if(void 0===e){if("function"==typeof n.render)throw Error(i(188));throw n=Object.keys(n).join(","),Error(i(268,n))}return null===(n=Wn(e))?null:n.stateNode},e.flushSync=function(n){return uc(n)},e.hydrate=function(n,e,t){if(!Zc(e))throw Error(i(200));return Jc(null,n,e,!0,t)},e.hydrateRoot=function(n,e,t){if(!Hc(n))throw Error(i(405));var r=null!=t&&t.hydratedSources||null,o=!1,a="",s=Gc;if(null!=t&&(!0===t.unstable_strictMode&&(o=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onRecoverableError&&(s=t.onRecoverableError)),e=$c(e,null,n,1,null!=t?t:null,o,0,a,s),n[ho]=e.current,$r(n),r)for(n=0;n<r.length;n++)o=(o=(t=r[n])._getVersion)(t._source),null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,o]:e.mutableSourceEagerHydrationData.push(t,o);return new Vc(e)},e.render=function(n,e,t){if(!Zc(e))throw Error(i(200));return Jc(null,n,e,!1,t)},e.unmountComponentAtNode=function(n){if(!Zc(n))throw Error(i(40));return!!n._reactRootContainer&&(uc(function(){Jc(null,null,n,!1,function(){n._reactRootContainer=null,n[ho]=null})}),!0)},e.unstable_batchedUpdates=cc,e.unstable_renderSubtreeIntoContainer=function(n,e,t,r){if(!Zc(t))throw Error(i(200));if(null==n||void 0===n._reactInternals)throw Error(i(38));return Jc(n,e,t,!1,r)},e.version="18.3.1-next-f1338f8080-20240426"},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},660:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(907)),i=r(t(818));e.default=class{constructor(n){this.shouldThrowOnError=!1,this.method=n.method,this.url=n.url,this.headers=n.headers,this.schema=n.schema,this.body=n.body,this.shouldThrowOnError=n.shouldThrowOnError,this.signal=n.signal,this.isMaybeSingle=n.isMaybeSingle,n.fetch?this.fetch=n.fetch:"undefined"==typeof fetch?this.fetch=o.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(n,e){return this.headers=Object.assign({},this.headers),this.headers[n]=e,this}then(n,e){void 0===this.schema||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),"GET"!==this.method&&"HEAD"!==this.method&&(this.headers["Content-Type"]="application/json");let t=(0,this.fetch)(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async n=>{var e,t,r;let o=null,a=null,s=null,l=n.status,c=n.statusText;if(n.ok){if("HEAD"!==this.method){const e=await n.text();""===e||(a="text/csv"===this.headers.Accept||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?e:JSON.parse(e))}const r=null===(e=this.headers.Prefer)||void 0===e?void 0:e.match(/count=(exact|planned|estimated)/),i=null===(t=n.headers.get("content-range"))||void 0===t?void 0:t.split("/");r&&i&&i.length>1&&(s=parseInt(i[1])),this.isMaybeSingle&&"GET"===this.method&&Array.isArray(a)&&(a.length>1?(o={code:"PGRST116",details:`Results contain ${a.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},a=null,s=null,l=406,c="Not Acceptable"):a=1===a.length?a[0]:null)}else{const e=await n.text();try{o=JSON.parse(e),Array.isArray(o)&&404===n.status&&(a=[],o=null,l=200,c="OK")}catch(t){404===n.status&&""===e?(l=204,c="No Content"):o={message:e}}if(o&&this.isMaybeSingle&&(null===(r=null==o?void 0:o.details)||void 0===r?void 0:r.includes("0 rows"))&&(o=null,l=200,c="OK"),o&&this.shouldThrowOnError)throw new i.default(o)}return{error:o,data:a,count:s,status:l,statusText:c}});return this.shouldThrowOnError||(t=t.catch(n=>{var e,t,r;return{error:{message:`${null!==(e=null==n?void 0:n.name)&&void 0!==e?e:"FetchError"}: ${null==n?void 0:n.message}`,details:`${null!==(t=null==n?void 0:n.stack)&&void 0!==t?t:""}`,hint:"",code:`${null!==(r=null==n?void 0:n.code)&&void 0!==r?r:""}`},data:null,count:null,status:0,statusText:""}})),t.then(n,e)}returns(){return this}overrideTypes(){return this}}},818:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class t extends Error{constructor(n){super(n.message),this.name="PostgrestError",this.details=n.details,this.hint=n.hint,this.code=n.code}}e.default=t},825:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(261));class i extends o.default{eq(n,e){return this.url.searchParams.append(n,`eq.${e}`),this}neq(n,e){return this.url.searchParams.append(n,`neq.${e}`),this}gt(n,e){return this.url.searchParams.append(n,`gt.${e}`),this}gte(n,e){return this.url.searchParams.append(n,`gte.${e}`),this}lt(n,e){return this.url.searchParams.append(n,`lt.${e}`),this}lte(n,e){return this.url.searchParams.append(n,`lte.${e}`),this}like(n,e){return this.url.searchParams.append(n,`like.${e}`),this}likeAllOf(n,e){return this.url.searchParams.append(n,`like(all).{${e.join(",")}}`),this}likeAnyOf(n,e){return this.url.searchParams.append(n,`like(any).{${e.join(",")}}`),this}ilike(n,e){return this.url.searchParams.append(n,`ilike.${e}`),this}ilikeAllOf(n,e){return this.url.searchParams.append(n,`ilike(all).{${e.join(",")}}`),this}ilikeAnyOf(n,e){return this.url.searchParams.append(n,`ilike(any).{${e.join(",")}}`),this}is(n,e){return this.url.searchParams.append(n,`is.${e}`),this}in(n,e){const t=Array.from(new Set(e)).map(n=>"string"==typeof n&&new RegExp("[,()]").test(n)?`"${n}"`:`${n}`).join(",");return this.url.searchParams.append(n,`in.(${t})`),this}contains(n,e){return"string"==typeof e?this.url.searchParams.append(n,`cs.${e}`):Array.isArray(e)?this.url.searchParams.append(n,`cs.{${e.join(",")}}`):this.url.searchParams.append(n,`cs.${JSON.stringify(e)}`),this}containedBy(n,e){return"string"==typeof e?this.url.searchParams.append(n,`cd.${e}`):Array.isArray(e)?this.url.searchParams.append(n,`cd.{${e.join(",")}}`):this.url.searchParams.append(n,`cd.${JSON.stringify(e)}`),this}rangeGt(n,e){return this.url.searchParams.append(n,`sr.${e}`),this}rangeGte(n,e){return this.url.searchParams.append(n,`nxl.${e}`),this}rangeLt(n,e){return this.url.searchParams.append(n,`sl.${e}`),this}rangeLte(n,e){return this.url.searchParams.append(n,`nxr.${e}`),this}rangeAdjacent(n,e){return this.url.searchParams.append(n,`adj.${e}`),this}overlaps(n,e){return"string"==typeof e?this.url.searchParams.append(n,`ov.${e}`):this.url.searchParams.append(n,`ov.{${e.join(",")}}`),this}textSearch(n,e,{config:t,type:r}={}){let o="";"plain"===r?o="pl":"phrase"===r?o="ph":"websearch"===r&&(o="w");const i=void 0===t?"":`(${t})`;return this.url.searchParams.append(n,`${o}fts${i}.${e}`),this}match(n){return Object.entries(n).forEach(([n,e])=>{this.url.searchParams.append(n,`eq.${e}`)}),this}not(n,e,t){return this.url.searchParams.append(n,`not.${e}.${t}`),this}or(n,{foreignTable:e,referencedTable:t=e}={}){const r=t?`${t}.or`:"or";return this.url.searchParams.append(r,`(${n})`),this}filter(n,e,t){return this.url.searchParams.append(n,`${e}.${t}`),this}}e.default=i},848:(n,e,t)=>{n.exports=t(20)},907:(n,e,t)=>{t.r(e),t.d(e,{Headers:()=>a,Request:()=>s,Response:()=>l,default:()=>i,fetch:()=>o});var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t.g)return t.g;throw new Error("unable to locate global object")}();const o=r.fetch,i=r.fetch.bind(r),a=r.Headers,s=r.Request,l=r.Response},961:(n,e,t)=>{!function n(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(n)}catch(n){console.error(n)}}(),n.exports=t(551)},982:(n,e,t)=>{n.exports=t(463)}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r].call(i.exports,i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.nc=void 0;var r=t(540),o=t(338),i={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const a=(n,e)=>{const t=(0,r.forwardRef)(({color:t="currentColor",size:o=24,strokeWidth:a=2,absoluteStrokeWidth:s,className:l="",children:c,...u},d)=>{return(0,r.createElement)("svg",{ref:d,...i,width:o,height:o,stroke:t,strokeWidth:s?24*Number(a)/Number(o):a,className:["lucide",`lucide-${A=n,A.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase().trim()}`,l].join(" "),...u},[...e.map(([n,e])=>(0,r.createElement)(n,e)),...Array.isArray(c)?c:[c]]);var A});return t.displayName=`${n}`,t},s=a("Bookmark",[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z",key:"1fy3hk"}]]),l=a("TabletSmartphone",[["rect",{width:"10",height:"14",x:"3",y:"8",rx:"2",key:"1vrsiq"}],["path",{d:"M5 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2.4",key:"1j4zmg"}],["path",{d:"M8 18h.01",key:"lrp35t"}]]),c=a("Plus",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]]),u=a("LogOut",[["path",{d:"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4",key:"1uf3rs"}],["polyline",{points:"16 17 21 12 16 7",key:"1gabdz"}],["line",{x1:"21",x2:"9",y1:"12",y2:"12",key:"1uyos4"}]]),d=a("Search",[["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}],["path",{d:"m21 21-4.3-4.3",key:"1qie3q"}]]),A=a("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]),f=a("Command",[["path",{d:"M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3",key:"11bfej"}]]),p=a("Tag",[["path",{d:"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z",key:"14b2ls"}],["path",{d:"M7 7h.01",key:"7u93v4"}]]),h=a("ChevronDown",[["path",{d:"m6 9 6 6 6-6",key:"qrunsl"}]]),g=a("ChevronRight",[["path",{d:"m9 18 6-6-6-6",key:"mthhwq"}]]),m=a("Inbox",[["polyline",{points:"22 12 16 12 14 15 10 15 8 12 2 12",key:"o97t9d"}],["path",{d:"M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",key:"oot6mr"}]]),b=a("CheckSquare",[["path",{d:"m9 11 3 3L22 4",key:"1pflzl"}],["path",{d:"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11",key:"1jnkn4"}]]),x=a("Archive",[["rect",{width:"20",height:"5",x:"2",y:"3",rx:"1",key:"1wp1u1"}],["path",{d:"M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8",key:"1s80jp"}],["path",{d:"M10 12h4",key:"a56b0p"}]]),y=a("FolderPlus",[["path",{d:"M12 10v6",key:"1bos4e"}],["path",{d:"M9 13h6",key:"1uhe8q"}],["path",{d:"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",key:"1kt360"}]]),C=a("Settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]);class v extends Error{constructor(n,e="FunctionsError",t){super(n),this.name=e,this.context=t}}class B extends v{constructor(n){super("Failed to send a request to the Edge Function","FunctionsFetchError",n)}}class E extends v{constructor(n){super("Relay Error invoking the Edge Function","FunctionsRelayError",n)}}class k extends v{constructor(n){super("Edge Function returned a non-2xx status code","FunctionsHttpError",n)}}var w;!function(n){n.Any="any",n.ApNortheast1="ap-northeast-1",n.ApNortheast2="ap-northeast-2",n.ApSouth1="ap-south-1",n.ApSoutheast1="ap-southeast-1",n.ApSoutheast2="ap-southeast-2",n.CaCentral1="ca-central-1",n.EuCentral1="eu-central-1",n.EuWest1="eu-west-1",n.EuWest2="eu-west-2",n.EuWest3="eu-west-3",n.SaEast1="sa-east-1",n.UsEast1="us-east-1",n.UsWest1="us-west-1",n.UsWest2="us-west-2"}(w||(w={}));class j{constructor(n,{headers:e={},customFetch:r,region:o=w.Any}={}){this.url=n,this.headers=e,this.region=o,this.fetch=(n=>{let e;return e=n||("undefined"==typeof fetch?(...n)=>Promise.resolve().then(t.bind(t,907)).then(({default:e})=>e(...n)):fetch),(...n)=>e(...n)})(r)}setAuth(n){this.headers.Authorization=`Bearer ${n}`}invoke(n,e={}){var t,r,o,i,a;return r=this,o=void 0,a=function*(){try{const{headers:r,method:o,body:i}=e;let a={},{region:s}=e;s||(s=this.region);const l=new URL(`${this.url}/${n}`);let c;s&&"any"!==s&&(a["x-region"]=s,l.searchParams.set("forceFunctionRegion",s)),i&&(r&&!Object.prototype.hasOwnProperty.call(r,"Content-Type")||!r)&&("undefined"!=typeof Blob&&i instanceof Blob||i instanceof ArrayBuffer?(a["Content-Type"]="application/octet-stream",c=i):"string"==typeof i?(a["Content-Type"]="text/plain",c=i):"undefined"!=typeof FormData&&i instanceof FormData?c=i:(a["Content-Type"]="application/json",c=JSON.stringify(i)));const u=yield this.fetch(l.toString(),{method:o||"POST",headers:Object.assign(Object.assign(Object.assign({},a),this.headers),r),body:c}).catch(n=>{throw new B(n)}),d=u.headers.get("x-relay-error");if(d&&"true"===d)throw new E(u);if(!u.ok)throw new k(u);let A,f=(null!==(t=u.headers.get("Content-Type"))&&void 0!==t?t:"text/plain").split(";")[0].trim();return A="application/json"===f?yield u.json():"application/octet-stream"===f?yield u.blob():"text/event-stream"===f?u:"multipart/form-data"===f?yield u.formData():yield u.text(),{data:A,error:null,response:u}}catch(n){return{data:null,error:n,response:n instanceof k||n instanceof E?n.context:void 0}}},new((i=void 0)||(i=Promise))(function(n,e){function t(n){try{l(a.next(n))}catch(n){e(n)}}function s(n){try{l(a.throw(n))}catch(n){e(n)}}function l(e){var r;e.done?n(e.value):(r=e.value,r instanceof i?r:new i(function(n){n(r)})).then(t,s)}l((a=a.apply(r,o||[])).next())})}}var S=t(279);const{PostgrestClient:_,PostgrestQueryBuilder:N,PostgrestFilterBuilder:I,PostgrestTransformBuilder:z,PostgrestBuilder:T,PostgrestError:O}=S,P=function(){if("undefined"!=typeof WebSocket)return WebSocket;if(void 0!==global.WebSocket)return global.WebSocket;if(void 0!==window.WebSocket)return window.WebSocket;if(void 0!==self.WebSocket)return self.WebSocket;throw new Error("`WebSocket` is not supported in this environment")}();var L,R,M,D,U,K,$;!function(n){n[n.connecting=0]="connecting",n[n.open=1]="open",n[n.closing=2]="closing",n[n.closed=3]="closed"}(L||(L={})),($=R||(R={})).closed="closed",$.errored="errored",$.joined="joined",$.joining="joining",$.leaving="leaving",function(n){n.close="phx_close",n.error="phx_error",n.join="phx_join",n.reply="phx_reply",n.leave="phx_leave",n.access_token="access_token"}(M||(M={})),function(n){n.websocket="websocket"}(D||(D={})),function(n){n.Connecting="connecting",n.Open="open",n.Closing="closing",n.Closed="closed"}(U||(U={}));class F{constructor(){this.HEADER_LENGTH=1}decode(n,e){return n.constructor===ArrayBuffer?e(this._binaryDecode(n)):e("string"==typeof n?JSON.parse(n):{})}_binaryDecode(n){const e=new DataView(n),t=new TextDecoder;return this._decodeBroadcast(n,e,t)}_decodeBroadcast(n,e,t){const r=e.getUint8(1),o=e.getUint8(2);let i=this.HEADER_LENGTH+2;const a=t.decode(n.slice(i,i+r));i+=r;const s=t.decode(n.slice(i,i+o));return i+=o,{ref:null,topic:a,event:s,payload:JSON.parse(t.decode(n.slice(i,n.byteLength)))}}}class q{constructor(n,e){this.callback=n,this.timerCalc=e,this.timer=void 0,this.tries=0,this.callback=n,this.timerCalc=e}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}!function(n){n.abstime="abstime",n.bool="bool",n.date="date",n.daterange="daterange",n.float4="float4",n.float8="float8",n.int2="int2",n.int4="int4",n.int4range="int4range",n.int8="int8",n.int8range="int8range",n.json="json",n.jsonb="jsonb",n.money="money",n.numeric="numeric",n.oid="oid",n.reltime="reltime",n.text="text",n.time="time",n.timestamp="timestamp",n.timestamptz="timestamptz",n.timetz="timetz",n.tsrange="tsrange",n.tstzrange="tstzrange"}(K||(K={}));const Y=(n,e,t={})=>{var r;const o=null!==(r=t.skipTypes)&&void 0!==r?r:[];return Object.keys(e).reduce((t,r)=>(t[r]=W(r,n,e,o),t),{})},W=(n,e,t,r)=>{const o=e.find(e=>e.name===n),i=null==o?void 0:o.type,a=t[n];return i&&!r.includes(i)?G(i,a):Q(a)},G=(n,e)=>{if("_"===n.charAt(0)){const t=n.slice(1,n.length);return X(e,t)}switch(n){case K.bool:return V(e);case K.float4:case K.float8:case K.int2:case K.int4:case K.int8:case K.numeric:case K.oid:return H(e);case K.json:case K.jsonb:return Z(e);case K.timestamp:return J(e);case K.abstime:case K.date:case K.daterange:case K.int4range:case K.int8range:case K.money:case K.reltime:case K.text:case K.time:case K.timestamptz:case K.timetz:case K.tsrange:case K.tstzrange:default:return Q(e)}},Q=n=>n,V=n=>{switch(n){case"t":return!0;case"f":return!1;default:return n}},H=n=>{if("string"==typeof n){const e=parseFloat(n);if(!Number.isNaN(e))return e}return n},Z=n=>{if("string"==typeof n)try{return JSON.parse(n)}catch(e){return console.log(`JSON parse error: ${e}`),n}return n},X=(n,e)=>{if("string"!=typeof n)return n;const t=n.length-1,r=n[t];if("{"===n[0]&&"}"===r){let r;const o=n.slice(1,t);try{r=JSON.parse("["+o+"]")}catch(n){r=o?o.split(","):[]}return r.map(n=>G(e,n))}return n},J=n=>"string"==typeof n?n.replace(" ","T"):n,nn=n=>{let e=n;return e=e.replace(/^ws/i,"http"),e=e.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),e.replace(/\/+$/,"")};class en{constructor(n,e,t={},r=1e4){this.channel=n,this.event=e,this.payload=t,this.timeout=r,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(n){this.timeout=n,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(n){this.payload=Object.assign(Object.assign({},this.payload),n)}receive(n,e){var t;return this._hasReceived(n)&&e(null===(t=this.receivedResp)||void 0===t?void 0:t.response),this.recHooks.push({status:n,callback:e}),this}startTimeout(){this.timeoutTimer||(this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref),this.channel._on(this.refEvent,{},n=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=n,this._matchReceive(n)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout))}trigger(n,e){this.refEvent&&this.channel._trigger(this.refEvent,{status:n,response:e})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:n,response:e}){this.recHooks.filter(e=>e.status===n).forEach(n=>n.callback(e))}_hasReceived(n){return this.receivedResp&&this.receivedResp.status===n}}var tn,rn,on,an;!function(n){n.SYNC="sync",n.JOIN="join",n.LEAVE="leave"}(tn||(tn={}));class sn{constructor(n,e){this.channel=n,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const t=(null==e?void 0:e.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(t.state,{},n=>{const{onJoin:e,onLeave:t,onSync:r}=this.caller;this.joinRef=this.channel._joinRef(),this.state=sn.syncState(this.state,n,e,t),this.pendingDiffs.forEach(n=>{this.state=sn.syncDiff(this.state,n,e,t)}),this.pendingDiffs=[],r()}),this.channel._on(t.diff,{},n=>{const{onJoin:e,onLeave:t,onSync:r}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(n):(this.state=sn.syncDiff(this.state,n,e,t),r())}),this.onJoin((n,e,t)=>{this.channel._trigger("presence",{event:"join",key:n,currentPresences:e,newPresences:t})}),this.onLeave((n,e,t)=>{this.channel._trigger("presence",{event:"leave",key:n,currentPresences:e,leftPresences:t})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(n,e,t,r){const o=this.cloneDeep(n),i=this.transformState(e),a={},s={};return this.map(o,(n,e)=>{i[n]||(s[n]=e)}),this.map(i,(n,e)=>{const t=o[n];if(t){const r=e.map(n=>n.presence_ref),o=t.map(n=>n.presence_ref),i=e.filter(n=>o.indexOf(n.presence_ref)<0),l=t.filter(n=>r.indexOf(n.presence_ref)<0);i.length>0&&(a[n]=i),l.length>0&&(s[n]=l)}else a[n]=e}),this.syncDiff(o,{joins:a,leaves:s},t,r)}static syncDiff(n,e,t,r){const{joins:o,leaves:i}={joins:this.transformState(e.joins),leaves:this.transformState(e.leaves)};return t||(t=()=>{}),r||(r=()=>{}),this.map(o,(e,r)=>{var o;const i=null!==(o=n[e])&&void 0!==o?o:[];if(n[e]=this.cloneDeep(r),i.length>0){const t=n[e].map(n=>n.presence_ref),r=i.filter(n=>t.indexOf(n.presence_ref)<0);n[e].unshift(...r)}t(e,i,r)}),this.map(i,(e,t)=>{let o=n[e];if(!o)return;const i=t.map(n=>n.presence_ref);o=o.filter(n=>i.indexOf(n.presence_ref)<0),n[e]=o,r(e,o,t),0===o.length&&delete n[e]}),n}static map(n,e){return Object.getOwnPropertyNames(n).map(t=>e(t,n[t]))}static transformState(n){return n=this.cloneDeep(n),Object.getOwnPropertyNames(n).reduce((e,t)=>{const r=n[t];return e[t]="metas"in r?r.metas.map(n=>(n.presence_ref=n.phx_ref,delete n.phx_ref,delete n.phx_ref_prev,n)):r,e},{})}static cloneDeep(n){return JSON.parse(JSON.stringify(n))}onJoin(n){this.caller.onJoin=n}onLeave(n){this.caller.onLeave=n}onSync(n){this.caller.onSync=n}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}!function(n){n.ALL="*",n.INSERT="INSERT",n.UPDATE="UPDATE",n.DELETE="DELETE"}(rn||(rn={})),function(n){n.BROADCAST="broadcast",n.PRESENCE="presence",n.POSTGRES_CHANGES="postgres_changes",n.SYSTEM="system"}(on||(on={})),function(n){n.SUBSCRIBED="SUBSCRIBED",n.TIMED_OUT="TIMED_OUT",n.CLOSED="CLOSED",n.CHANNEL_ERROR="CHANNEL_ERROR"}(an||(an={}));class ln{constructor(n,e={config:{}},t){this.topic=n,this.params=e,this.socket=t,this.bindings={},this.state=R.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=n.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},e.config),this.timeout=this.socket.timeout,this.joinPush=new en(this,M.join,this.params,this.timeout),this.rejoinTimer=new q(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=R.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(n=>n.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=R.closed,this.socket._remove(this)}),this._onError(n=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,n),this.state=R.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=R.errored,this.rejoinTimer.scheduleTimeout())}),this._on(M.reply,{},(n,e)=>{this._trigger(this._replyEventName(e),n)}),this.presence=new sn(this),this.broadcastEndpointURL=nn(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(n,e=this.timeout){var t,r;if(this.socket.isConnected()||this.socket.connect(),this.state==R.closed){const{config:{broadcast:o,presence:i,private:a}}=this.params;this._onError(e=>null==n?void 0:n(an.CHANNEL_ERROR,e)),this._onClose(()=>null==n?void 0:n(an.CLOSED));const s={},l={broadcast:o,presence:i,postgres_changes:null!==(r=null===(t=this.bindings.postgres_changes)||void 0===t?void 0:t.map(n=>n.filter))&&void 0!==r?r:[],private:a};this.socket.accessTokenValue&&(s.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:l},s)),this.joinedOnce=!0,this._rejoin(e),this.joinPush.receive("ok",async({postgres_changes:e})=>{var t;if(this.socket.setAuth(),void 0!==e){const r=this.bindings.postgres_changes,o=null!==(t=null==r?void 0:r.length)&&void 0!==t?t:0,i=[];for(let t=0;t<o;t++){const o=r[t],{filter:{event:a,schema:s,table:l,filter:c}}=o,u=e&&e[t];if(!u||u.event!==a||u.schema!==s||u.table!==l||u.filter!==c)return this.unsubscribe(),this.state=R.errored,void(null==n||n(an.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes")));i.push(Object.assign(Object.assign({},o),{id:u.id}))}return this.bindings.postgres_changes=i,void(n&&n(an.SUBSCRIBED))}null==n||n(an.SUBSCRIBED)}).receive("error",e=>{this.state=R.errored,null==n||n(an.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(e).join(", ")||"error")))}).receive("timeout",()=>{null==n||n(an.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(n,e={}){return await this.send({type:"presence",event:"track",payload:n},e.timeout||this.timeout)}async untrack(n={}){return await this.send({type:"presence",event:"untrack"},n)}on(n,e,t){return this._on(n,e,t)}async send(n,e={}){var t,r;if(this._canPush()||"broadcast"!==n.type)return new Promise(t=>{var r,o,i;const a=this._push(n.type,n,e.timeout||this.timeout);"broadcast"!==n.type||(null===(i=null===(o=null===(r=this.params)||void 0===r?void 0:r.config)||void 0===o?void 0:o.broadcast)||void 0===i?void 0:i.ack)||t("ok"),a.receive("ok",()=>t("ok")),a.receive("error",()=>t("error")),a.receive("timeout",()=>t("timed out"))});{const{event:o,payload:i}=n,a={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:o,payload:i,private:this.private}]})};try{const n=await this._fetchWithTimeout(this.broadcastEndpointURL,a,null!==(t=e.timeout)&&void 0!==t?t:this.timeout);return await(null===(r=n.body)||void 0===r?void 0:r.cancel()),n.ok?"ok":"error"}catch(n){return"AbortError"===n.name?"timed out":"error"}}}updateJoinPayload(n){this.joinPush.updatePayload(n)}unsubscribe(n=this.timeout){this.state=R.leaving;const e=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(M.close,"leave",this._joinRef())};this.joinPush.destroy();let t=null;return new Promise(r=>{t=new en(this,M.leave,{},n),t.receive("ok",()=>{e(),r("ok")}).receive("timeout",()=>{e(),r("timed out")}).receive("error",()=>{r("error")}),t.send(),this._canPush()||t.trigger("ok",{})}).finally(()=>{null==t||t.destroy()})}teardown(){this.pushBuffer.forEach(n=>n.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}async _fetchWithTimeout(n,e,t){const r=new AbortController,o=setTimeout(()=>r.abort(),t),i=await this.socket.fetch(n,Object.assign(Object.assign({},e),{signal:r.signal}));return clearTimeout(o),i}_push(n,e,t=this.timeout){if(!this.joinedOnce)throw`tried to push '${n}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let r=new en(this,n,e,t);return this._canPush()?r.send():(r.startTimeout(),this.pushBuffer.push(r)),r}_onMessage(n,e,t){return e}_isMember(n){return this.topic===n}_joinRef(){return this.joinPush.ref}_trigger(n,e,t){var r,o;const i=n.toLocaleLowerCase(),{close:a,error:s,leave:l,join:c}=M;if(t&&[a,s,l,c].indexOf(i)>=0&&t!==this._joinRef())return;let u=this._onMessage(i,e,t);if(e&&!u)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(i)?null===(r=this.bindings.postgres_changes)||void 0===r||r.filter(n=>{var e,t,r;return"*"===(null===(e=n.filter)||void 0===e?void 0:e.event)||(null===(r=null===(t=n.filter)||void 0===t?void 0:t.event)||void 0===r?void 0:r.toLocaleLowerCase())===i}).map(n=>n.callback(u,t)):null===(o=this.bindings[i])||void 0===o||o.filter(n=>{var t,r,o,a,s,l;if(["broadcast","presence","postgres_changes"].includes(i)){if("id"in n){const i=n.id,a=null===(t=n.filter)||void 0===t?void 0:t.event;return i&&(null===(r=e.ids)||void 0===r?void 0:r.includes(i))&&("*"===a||(null==a?void 0:a.toLocaleLowerCase())===(null===(o=e.data)||void 0===o?void 0:o.type.toLocaleLowerCase()))}{const t=null===(s=null===(a=null==n?void 0:n.filter)||void 0===a?void 0:a.event)||void 0===s?void 0:s.toLocaleLowerCase();return"*"===t||t===(null===(l=null==e?void 0:e.event)||void 0===l?void 0:l.toLocaleLowerCase())}}return n.type.toLocaleLowerCase()===i}).map(n=>{if("object"==typeof u&&"ids"in u){const n=u.data,{schema:e,table:t,commit_timestamp:r,type:o,errors:i}=n,a={schema:e,table:t,commit_timestamp:r,eventType:o,new:{},old:{},errors:i};u=Object.assign(Object.assign({},a),this._getPayloadRecords(n))}n.callback(u,t)})}_isClosed(){return this.state===R.closed}_isJoined(){return this.state===R.joined}_isJoining(){return this.state===R.joining}_isLeaving(){return this.state===R.leaving}_replyEventName(n){return`chan_reply_${n}`}_on(n,e,t){const r=n.toLocaleLowerCase(),o={type:r,filter:e,callback:t};return this.bindings[r]?this.bindings[r].push(o):this.bindings[r]=[o],this}_off(n,e){const t=n.toLocaleLowerCase();return this.bindings[t]=this.bindings[t].filter(n=>{var r;return!((null===(r=n.type)||void 0===r?void 0:r.toLocaleLowerCase())===t&&ln.isEqual(n.filter,e))}),this}static isEqual(n,e){if(Object.keys(n).length!==Object.keys(e).length)return!1;for(const t in n)if(n[t]!==e[t])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(n){this._on(M.close,{},n)}_onError(n){this._on(M.error,{},e=>n(e))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(n=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=R.joining,this.joinPush.resend(n))}_getPayloadRecords(n){const e={new:{},old:{}};return"INSERT"!==n.type&&"UPDATE"!==n.type||(e.new=Y(n.columns,n.record)),"UPDATE"!==n.type&&"DELETE"!==n.type||(e.old=Y(n.columns,n.old_record)),e}}const cn=()=>{};class un{constructor(n,e){var r;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers={},this.params={},this.timeout=1e4,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=cn,this.ref=0,this.logger=cn,this.conn=null,this.sendBuffer=[],this.serializer=new F,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=n=>{let e;return e=n||("undefined"==typeof fetch?(...n)=>Promise.resolve().then(t.bind(t,907)).then(({default:e})=>e(...n)):fetch),(...n)=>e(...n)},this.endPoint=`${n}/${D.websocket}`,this.httpEndpoint=nn(n),(null==e?void 0:e.transport)?this.transport=e.transport:this.transport=null,(null==e?void 0:e.params)&&(this.params=e.params),(null==e?void 0:e.timeout)&&(this.timeout=e.timeout),(null==e?void 0:e.logger)&&(this.logger=e.logger),((null==e?void 0:e.logLevel)||(null==e?void 0:e.log_level))&&(this.logLevel=e.logLevel||e.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),(null==e?void 0:e.heartbeatIntervalMs)&&(this.heartbeatIntervalMs=e.heartbeatIntervalMs);const o=null===(r=null==e?void 0:e.params)||void 0===r?void 0:r.apikey;if(o&&(this.accessTokenValue=o,this.apiKey=o),this.reconnectAfterMs=(null==e?void 0:e.reconnectAfterMs)?e.reconnectAfterMs:n=>[1e3,2e3,5e3,1e4][n-1]||1e4,this.encode=(null==e?void 0:e.encode)?e.encode:(n,e)=>e(JSON.stringify(n)),this.decode=(null==e?void 0:e.decode)?e.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new q(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(null==e?void 0:e.fetch),null==e?void 0:e.worker){if("undefined"!=typeof window&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(null==e?void 0:e.worker)||!1,this.workerUrl=null==e?void 0:e.workerUrl}this.accessToken=(null==e?void 0:e.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=P),!this.transport)throw new Error("No transport provided");this.conn=new this.transport(this.endpointURL()),this.setupConnection()}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:"1.0.0"}))}disconnect(n,e){this.conn&&(this.conn.onclose=function(){},n?this.conn.close(n,null!=e?e:""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(n=>n.teardown()))}getChannels(){return this.channels}async removeChannel(n){const e=await n.unsubscribe();return 0===this.channels.length&&this.disconnect(),e}async removeAllChannels(){const n=await Promise.all(this.channels.map(n=>n.unsubscribe()));return this.channels=[],this.disconnect(),n}log(n,e,t){this.logger(n,e,t)}connectionState(){switch(this.conn&&this.conn.readyState){case L.connecting:return U.Connecting;case L.open:return U.Open;case L.closing:return U.Closing;default:return U.Closed}}isConnected(){return this.connectionState()===U.Open}channel(n,e={config:{}}){const t=`realtime:${n}`,r=this.getChannels().find(n=>n.topic===t);if(r)return r;{const t=new ln(`realtime:${n}`,e,this);return this.channels.push(t),t}}push(n){const{topic:e,event:t,payload:r,ref:o}=n,i=()=>{this.encode(n,n=>{var e;null===(e=this.conn)||void 0===e||e.send(n)})};this.log("push",`${e} ${t} (${o})`,r),this.isConnected()?i():this.sendBuffer.push(i)}async setAuth(n=null){let e=n||this.accessToken&&await this.accessToken()||this.accessTokenValue;this.accessTokenValue!=e&&(this.accessTokenValue=e,this.channels.forEach(n=>{const t={access_token:e,version:"realtime-js/2.11.15"};e&&n.updateJoinPayload(t),n.joinedOnce&&n._isJoined()&&n._push(M.access_token,{access_token:e})}))}async sendHeartbeat(){var n;if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),void(null===(n=this.conn)||void 0===n||n.close(1e3,"hearbeat timeout"));this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),await this.setAuth()}else this.heartbeatCallback("disconnected")}onHeartbeat(n){this.heartbeatCallback=n}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(n=>n()),this.sendBuffer=[])}_makeRef(){let n=this.ref+1;return n===this.ref?this.ref=0:this.ref=n,this.ref.toString()}_leaveOpenTopic(n){let e=this.channels.find(e=>e.topic===n&&(e._isJoined()||e._isJoining()));e&&(this.log("transport",`leaving duplicate topic "${n}"`),e.unsubscribe())}_remove(n){this.channels=this.channels.filter(e=>e.topic!==n.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=n=>this._onConnError(n),this.conn.onmessage=n=>this._onConnMessage(n),this.conn.onclose=n=>this._onConnClose(n))}_onConnMessage(n){this.decode(n.data,n=>{let{topic:e,event:t,payload:r,ref:o}=n;"phoenix"===e&&"phx_reply"===t&&this.heartbeatCallback("ok"==n.payload.status?"ok":"error"),o&&o===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${r.status||""} ${e} ${t} ${o&&"("+o+")"||""}`,r),Array.from(this.channels).filter(n=>n._isMember(e)).forEach(n=>n._trigger(t,r,o)),this.stateChangeCallbacks.message.forEach(e=>e(n))})}_onConnOpen(){this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker?this.workerRef||this._startWorkerHeartbeat():this._startHeartbeat(),this.stateChangeCallbacks.open.forEach(n=>n())}_startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)}_startWorkerHeartbeat(){this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const n=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(n),this.workerRef.onerror=n=>{this.log("worker","worker error",n.message),this.workerRef.terminate()},this.workerRef.onmessage=n=>{"keepAlive"===n.data.event&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}_onConnClose(n){this.log("transport","close",n),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(e=>e(n))}_onConnError(n){this.log("transport",`${n}`),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(e=>e(n))}_triggerChanError(){this.channels.forEach(n=>n._trigger(M.error))}_appendParams(n,e){if(0===Object.keys(e).length)return n;const t=n.match(/\?/)?"&":"?";return`${n}${t}${new URLSearchParams(e)}`}_workerObjectUrl(n){let e;if(n)e=n;else{const n=new Blob(['\n  addEventListener("message", (e) => {\n    if (e.data.event === "start") {\n      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);\n    }\n  });'],{type:"application/javascript"});e=URL.createObjectURL(n)}return e}}class dn extends Error{constructor(n){super(n),this.__isStorageError=!0,this.name="StorageError"}}function An(n){return"object"==typeof n&&null!==n&&"__isStorageError"in n}class fn extends dn{constructor(n,e){super(n),this.name="StorageApiError",this.status=e}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class pn extends dn{constructor(n,e){super(n),this.name="StorageUnknownError",this.originalError=e}}const hn=n=>{let e;return e=n||("undefined"==typeof fetch?(...n)=>Promise.resolve().then(t.bind(t,907)).then(({default:e})=>e(...n)):fetch),(...n)=>e(...n)},gn=n=>{if(Array.isArray(n))return n.map(n=>gn(n));if("function"==typeof n||n!==Object(n))return n;const e={};return Object.entries(n).forEach(([n,t])=>{const r=n.replace(/([-_][a-z])/gi,n=>n.toUpperCase().replace(/[-_]/g,""));e[r]=gn(t)}),e};var mn=function(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{l(r.next(n))}catch(n){i(n)}}function s(n){try{l(r.throw(n))}catch(n){i(n)}}function l(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t(function(n){n(e)})).then(a,s)}l((r=r.apply(n,e||[])).next())})};const bn=n=>n.msg||n.message||n.error_description||n.error||JSON.stringify(n),xn=(n,e,r)=>mn(void 0,void 0,void 0,function*(){const o=yield(i=void 0,a=void 0,s=void 0,l=function*(){return"undefined"==typeof Response?(yield Promise.resolve().then(t.bind(t,907))).Response:Response},new(s||(s=Promise))(function(n,e){function t(n){try{o(l.next(n))}catch(n){e(n)}}function r(n){try{o(l.throw(n))}catch(n){e(n)}}function o(e){var o;e.done?n(e.value):(o=e.value,o instanceof s?o:new s(function(n){n(o)})).then(t,r)}o((l=l.apply(i,a||[])).next())}));var i,a,s,l;n instanceof o&&!(null==r?void 0:r.noResolveJson)?n.json().then(t=>{e(new fn(bn(t),n.status||500))}).catch(n=>{e(new pn(bn(n),n))}):e(new pn(bn(n),n))});function yn(n,e,t,r,o,i){return mn(this,void 0,void 0,function*(){return new Promise((a,s)=>{n(t,((n,e,t,r)=>{const o={method:n,headers:(null==e?void 0:e.headers)||{}};return"GET"===n?o:(o.headers=Object.assign({"Content-Type":"application/json"},null==e?void 0:e.headers),r&&(o.body=JSON.stringify(r)),Object.assign(Object.assign({},o),t))})(e,r,o,i)).then(n=>{if(!n.ok)throw n;return(null==r?void 0:r.noResolveJson)?n:n.json()}).then(n=>a(n)).catch(n=>xn(n,s,r))})})}function Cn(n,e,t,r){return mn(this,void 0,void 0,function*(){return yn(n,"GET",e,t,r)})}function vn(n,e,t,r,o){return mn(this,void 0,void 0,function*(){return yn(n,"POST",e,r,o,t)})}function Bn(n,e,t,r,o){return mn(this,void 0,void 0,function*(){return yn(n,"DELETE",e,r,o,t)})}var En=function(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{l(r.next(n))}catch(n){i(n)}}function s(n){try{l(r.throw(n))}catch(n){i(n)}}function l(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t(function(n){n(e)})).then(a,s)}l((r=r.apply(n,e||[])).next())})};const kn={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},wn={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class jn{constructor(n,e={},t,r){this.url=n,this.headers=e,this.bucketId=t,this.fetch=hn(r)}uploadOrUpdate(n,e,t,r){return En(this,void 0,void 0,function*(){try{let o;const i=Object.assign(Object.assign({},wn),r);let a=Object.assign(Object.assign({},this.headers),"POST"===n&&{"x-upsert":String(i.upsert)});const s=i.metadata;"undefined"!=typeof Blob&&t instanceof Blob?(o=new FormData,o.append("cacheControl",i.cacheControl),s&&o.append("metadata",this.encodeMetadata(s)),o.append("",t)):"undefined"!=typeof FormData&&t instanceof FormData?(o=t,o.append("cacheControl",i.cacheControl),s&&o.append("metadata",this.encodeMetadata(s))):(o=t,a["cache-control"]=`max-age=${i.cacheControl}`,a["content-type"]=i.contentType,s&&(a["x-metadata"]=this.toBase64(this.encodeMetadata(s)))),(null==r?void 0:r.headers)&&(a=Object.assign(Object.assign({},a),r.headers));const l=this._removeEmptyFolders(e),c=this._getFinalPath(l),u=yield this.fetch(`${this.url}/object/${c}`,Object.assign({method:n,body:o,headers:a},(null==i?void 0:i.duplex)?{duplex:i.duplex}:{})),d=yield u.json();return u.ok?{data:{path:l,id:d.Id,fullPath:d.Key},error:null}:{data:null,error:d}}catch(n){if(An(n))return{data:null,error:n};throw n}})}upload(n,e,t){return En(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",n,e,t)})}uploadToSignedUrl(n,e,t,r){return En(this,void 0,void 0,function*(){const o=this._removeEmptyFolders(n),i=this._getFinalPath(o),a=new URL(this.url+`/object/upload/sign/${i}`);a.searchParams.set("token",e);try{let n;const e=Object.assign({upsert:wn.upsert},r),i=Object.assign(Object.assign({},this.headers),{"x-upsert":String(e.upsert)});"undefined"!=typeof Blob&&t instanceof Blob?(n=new FormData,n.append("cacheControl",e.cacheControl),n.append("",t)):"undefined"!=typeof FormData&&t instanceof FormData?(n=t,n.append("cacheControl",e.cacheControl)):(n=t,i["cache-control"]=`max-age=${e.cacheControl}`,i["content-type"]=e.contentType);const s=yield this.fetch(a.toString(),{method:"PUT",body:n,headers:i}),l=yield s.json();return s.ok?{data:{path:o,fullPath:l.Key},error:null}:{data:null,error:l}}catch(n){if(An(n))return{data:null,error:n};throw n}})}createSignedUploadUrl(n,e){return En(this,void 0,void 0,function*(){try{let t=this._getFinalPath(n);const r=Object.assign({},this.headers);(null==e?void 0:e.upsert)&&(r["x-upsert"]="true");const o=yield vn(this.fetch,`${this.url}/object/upload/sign/${t}`,{},{headers:r}),i=new URL(this.url+o.url),a=i.searchParams.get("token");if(!a)throw new dn("No token returned by API");return{data:{signedUrl:i.toString(),path:n,token:a},error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}update(n,e,t){return En(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",n,e,t)})}move(n,e,t){return En(this,void 0,void 0,function*(){try{return{data:yield vn(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:n,destinationKey:e,destinationBucket:null==t?void 0:t.destinationBucket},{headers:this.headers}),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}copy(n,e,t){return En(this,void 0,void 0,function*(){try{return{data:{path:(yield vn(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:n,destinationKey:e,destinationBucket:null==t?void 0:t.destinationBucket},{headers:this.headers})).Key},error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}createSignedUrl(n,e,t){return En(this,void 0,void 0,function*(){try{let r=this._getFinalPath(n),o=yield vn(this.fetch,`${this.url}/object/sign/${r}`,Object.assign({expiresIn:e},(null==t?void 0:t.transform)?{transform:t.transform}:{}),{headers:this.headers});const i=(null==t?void 0:t.download)?`&download=${!0===t.download?"":t.download}`:"";return o={signedUrl:encodeURI(`${this.url}${o.signedURL}${i}`)},{data:o,error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}createSignedUrls(n,e,t){return En(this,void 0,void 0,function*(){try{const r=yield vn(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:e,paths:n},{headers:this.headers}),o=(null==t?void 0:t.download)?`&download=${!0===t.download?"":t.download}`:"";return{data:r.map(n=>Object.assign(Object.assign({},n),{signedUrl:n.signedURL?encodeURI(`${this.url}${n.signedURL}${o}`):null})),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}download(n,e){return En(this,void 0,void 0,function*(){const t=void 0!==(null==e?void 0:e.transform)?"render/image/authenticated":"object",r=this.transformOptsToQueryString((null==e?void 0:e.transform)||{}),o=r?`?${r}`:"";try{const e=this._getFinalPath(n),r=yield Cn(this.fetch,`${this.url}/${t}/${e}${o}`,{headers:this.headers,noResolveJson:!0});return{data:yield r.blob(),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}info(n){return En(this,void 0,void 0,function*(){const e=this._getFinalPath(n);try{const n=yield Cn(this.fetch,`${this.url}/object/info/${e}`,{headers:this.headers});return{data:gn(n),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}exists(n){return En(this,void 0,void 0,function*(){const e=this._getFinalPath(n);try{return yield function(n,e,t){return mn(this,void 0,void 0,function*(){return yn(n,"HEAD",e,Object.assign(Object.assign({},t),{noResolveJson:!0}),undefined)})}(this.fetch,`${this.url}/object/${e}`,{headers:this.headers}),{data:!0,error:null}}catch(n){if(An(n)&&n instanceof pn){const e=n.originalError;if([400,404].includes(null==e?void 0:e.status))return{data:!1,error:n}}throw n}})}getPublicUrl(n,e){const t=this._getFinalPath(n),r=[],o=(null==e?void 0:e.download)?`download=${!0===e.download?"":e.download}`:"";""!==o&&r.push(o);const i=void 0!==(null==e?void 0:e.transform)?"render/image":"object",a=this.transformOptsToQueryString((null==e?void 0:e.transform)||{});""!==a&&r.push(a);let s=r.join("&");return""!==s&&(s=`?${s}`),{data:{publicUrl:encodeURI(`${this.url}/${i}/public/${t}${s}`)}}}remove(n){return En(this,void 0,void 0,function*(){try{return{data:yield Bn(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:n},{headers:this.headers}),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}list(n,e,t){return En(this,void 0,void 0,function*(){try{const r=Object.assign(Object.assign(Object.assign({},kn),e),{prefix:n||""});return{data:yield vn(this.fetch,`${this.url}/object/list/${this.bucketId}`,r,{headers:this.headers},t),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}encodeMetadata(n){return JSON.stringify(n)}toBase64(n){return"undefined"!=typeof Buffer?Buffer.from(n).toString("base64"):btoa(n)}_getFinalPath(n){return`${this.bucketId}/${n}`}_removeEmptyFolders(n){return n.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(n){const e=[];return n.width&&e.push(`width=${n.width}`),n.height&&e.push(`height=${n.height}`),n.resize&&e.push(`resize=${n.resize}`),n.format&&e.push(`format=${n.format}`),n.quality&&e.push(`quality=${n.quality}`),e.join("&")}}const Sn={"X-Client-Info":"storage-js/2.7.1"};var _n=function(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{l(r.next(n))}catch(n){i(n)}}function s(n){try{l(r.throw(n))}catch(n){i(n)}}function l(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t(function(n){n(e)})).then(a,s)}l((r=r.apply(n,e||[])).next())})};class Nn{constructor(n,e={},t){this.url=n,this.headers=Object.assign(Object.assign({},Sn),e),this.fetch=hn(t)}listBuckets(){return _n(this,void 0,void 0,function*(){try{return{data:yield Cn(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}getBucket(n){return _n(this,void 0,void 0,function*(){try{return{data:yield Cn(this.fetch,`${this.url}/bucket/${n}`,{headers:this.headers}),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}createBucket(n,e={public:!1}){return _n(this,void 0,void 0,function*(){try{return{data:yield vn(this.fetch,`${this.url}/bucket`,{id:n,name:n,public:e.public,file_size_limit:e.fileSizeLimit,allowed_mime_types:e.allowedMimeTypes},{headers:this.headers}),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}updateBucket(n,e){return _n(this,void 0,void 0,function*(){try{const t=yield function(n,e,t,r){return mn(this,void 0,void 0,function*(){return yn(n,"PUT",e,r,undefined,t)})}(this.fetch,`${this.url}/bucket/${n}`,{id:n,name:n,public:e.public,file_size_limit:e.fileSizeLimit,allowed_mime_types:e.allowedMimeTypes},{headers:this.headers});return{data:t,error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}emptyBucket(n){return _n(this,void 0,void 0,function*(){try{return{data:yield vn(this.fetch,`${this.url}/bucket/${n}/empty`,{},{headers:this.headers}),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}deleteBucket(n){return _n(this,void 0,void 0,function*(){try{return{data:yield Bn(this.fetch,`${this.url}/bucket/${n}`,{},{headers:this.headers}),error:null}}catch(n){if(An(n))return{data:null,error:n};throw n}})}}class In extends Nn{constructor(n,e={},t){super(n,e,t)}from(n){return new jn(this.url,this.headers,n,this.fetch)}}let zn="";zn="undefined"!=typeof Deno?"deno":"undefined"!=typeof document?"web":"undefined"!=typeof navigator&&"ReactNative"===navigator.product?"react-native":"node";const Tn={headers:{"X-Client-Info":`supabase-js-${zn}/2.50.3`}},On={schema:"public"},Pn={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},Ln={};var Rn=t(907);const Mn=n=>{let e;return e=n||("undefined"==typeof fetch?Rn.default:fetch),(...n)=>e(...n)},Dn=(n,e,t)=>{const r=Mn(t),o="undefined"==typeof Headers?Rn.Headers:Headers;return(t,i)=>{return a=void 0,s=void 0,c=function*(){var a;const s=null!==(a=yield e())&&void 0!==a?a:n;let l=new o(null==i?void 0:i.headers);return l.has("apikey")||l.set("apikey",n),l.has("Authorization")||l.set("Authorization",`Bearer ${s}`),r(t,Object.assign(Object.assign({},i),{headers:l}))},new((l=void 0)||(l=Promise))(function(n,e){function t(n){try{o(c.next(n))}catch(n){e(n)}}function r(n){try{o(c.throw(n))}catch(n){e(n)}}function o(e){var o;e.done?n(e.value):(o=e.value,o instanceof l?o:new l(function(n){n(o)})).then(t,r)}o((c=c.apply(a,s||[])).next())});var a,s,l,c}};const Un="2.70.0",Kn=3e4,$n={"X-Client-Info":`gotrue-js/${Un}`},Fn="X-Supabase-Api-Version",qn=Date.parse("2024-01-01T00:00:00.0Z"),Yn="2024-01-01",Wn=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;class Gn extends Error{constructor(n,e,t){super(n),this.__isAuthError=!0,this.name="AuthError",this.status=e,this.code=t}}function Qn(n){return"object"==typeof n&&null!==n&&"__isAuthError"in n}class Vn extends Gn{constructor(n,e,t){super(n,e,t),this.name="AuthApiError",this.status=e,this.code=t}}class Hn extends Gn{constructor(n,e){super(n),this.name="AuthUnknownError",this.originalError=e}}class Zn extends Gn{constructor(n,e,t,r){super(n,t,r),this.name=e,this.status=t}}class Xn extends Zn{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}class Jn extends Zn{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class ne extends Zn{constructor(n){super(n,"AuthInvalidCredentialsError",400,void 0)}}class ee extends Zn{constructor(n,e=null){super(n,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=e}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class te extends Zn{constructor(n,e=null){super(n,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=e}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class re extends Zn{constructor(n,e){super(n,"AuthRetryableFetchError",e,void 0)}}function oe(n){return Qn(n)&&"AuthRetryableFetchError"===n.name}class ie extends Zn{constructor(n,e,t){super(n,"AuthWeakPasswordError",e,"weak_password"),this.reasons=t}}class ae extends Zn{constructor(n){super(n,"AuthInvalidJwtError",400,"invalid_jwt")}}const se="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),le=" \t\n\r=".split(""),ce=(()=>{const n=new Array(128);for(let e=0;e<n.length;e+=1)n[e]=-1;for(let e=0;e<le.length;e+=1)n[le[e].charCodeAt(0)]=-2;for(let e=0;e<se.length;e+=1)n[se[e].charCodeAt(0)]=e;return n})();function ue(n,e,t){if(null!==n)for(e.queue=e.queue<<8|n,e.queuedBits+=8;e.queuedBits>=6;){const n=e.queue>>e.queuedBits-6&63;t(se[n]),e.queuedBits-=6}else if(e.queuedBits>0)for(e.queue=e.queue<<6-e.queuedBits,e.queuedBits=6;e.queuedBits>=6;){const n=e.queue>>e.queuedBits-6&63;t(se[n]),e.queuedBits-=6}}function de(n,e,t){const r=ce[n];if(!(r>-1)){if(-2===r)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(n)}"`)}for(e.queue=e.queue<<6|r,e.queuedBits+=6;e.queuedBits>=8;)t(e.queue>>e.queuedBits-8&255),e.queuedBits-=8}function Ae(n){const e=[],t=n=>{e.push(String.fromCodePoint(n))},r={utf8seq:0,codepoint:0},o={queue:0,queuedBits:0},i=n=>{!function(n,e,t){if(0===e.utf8seq){if(n<=127)return void t(n);for(let t=1;t<6;t+=1)if(!(n>>7-t&1)){e.utf8seq=t;break}if(2===e.utf8seq)e.codepoint=31&n;else if(3===e.utf8seq)e.codepoint=15&n;else{if(4!==e.utf8seq)throw new Error("Invalid UTF-8 sequence");e.codepoint=7&n}e.utf8seq-=1}else if(e.utf8seq>0){if(n<=127)throw new Error("Invalid UTF-8 sequence");e.codepoint=e.codepoint<<6|63&n,e.utf8seq-=1,0===e.utf8seq&&t(e.codepoint)}}(n,r,t)};for(let e=0;e<n.length;e+=1)de(n.charCodeAt(e),o,i);return e.join("")}function fe(n,e){if(!(n<=127)){if(n<=2047)return e(192|n>>6),void e(128|63&n);if(n<=65535)return e(224|n>>12),e(128|n>>6&63),void e(128|63&n);if(n<=1114111)return e(240|n>>18),e(128|n>>12&63),e(128|n>>6&63),void e(128|63&n);throw new Error(`Unrecognized Unicode codepoint: ${n.toString(16)}`)}e(n)}function pe(n){const e=[],t={queue:0,queuedBits:0},r=n=>{e.push(n)};for(let e=0;e<n.length;e+=1)de(n.charCodeAt(e),t,r);return new Uint8Array(e)}function he(n){const e=[],t={queue:0,queuedBits:0},r=n=>{e.push(n)};return n.forEach(n=>ue(n,t,r)),ue(null,t,r),e.join("")}const ge=()=>"undefined"!=typeof window&&"undefined"!=typeof document,me={tested:!1,writable:!1},be=()=>{if(!ge())return!1;try{if("object"!=typeof globalThis.localStorage)return!1}catch(n){return!1}if(me.tested)return me.writable;const n=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(n,n),globalThis.localStorage.removeItem(n),me.tested=!0,me.writable=!0}catch(n){me.tested=!0,me.writable=!1}return me.writable},xe=n=>{let e;return e=n||("undefined"==typeof fetch?(...n)=>Promise.resolve().then(t.bind(t,907)).then(({default:e})=>e(...n)):fetch),(...n)=>e(...n)},ye=async(n,e,t)=>{await n.setItem(e,JSON.stringify(t))},Ce=async(n,e)=>{const t=await n.getItem(e);if(!t)return null;try{return JSON.parse(t)}catch(n){return t}},ve=async(n,e)=>{await n.removeItem(e)};class Be{constructor(){this.promise=new Be.promiseConstructor((n,e)=>{this.resolve=n,this.reject=e})}}function Ee(n){const e=n.split(".");if(3!==e.length)throw new ae("Invalid JWT structure");for(let n=0;n<e.length;n++)if(!Wn.test(e[n]))throw new ae("JWT not in base64url format");return{header:JSON.parse(Ae(e[0])),payload:JSON.parse(Ae(e[1])),signature:pe(e[2]),raw:{header:e[0],payload:e[1]}}}function ke(n){return("0"+n.toString(16)).substr(-2)}async function we(n,e,t=!1){const r=function(){const n=new Uint32Array(56);if("undefined"==typeof crypto){const n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",e=n.length;let t="";for(let r=0;r<56;r++)t+=n.charAt(Math.floor(Math.random()*e));return t}return crypto.getRandomValues(n),Array.from(n,ke).join("")}();let o=r;t&&(o+="/PASSWORD_RECOVERY"),await ye(n,`${e}-code-verifier`,o);const i=await async function(n){if("undefined"==typeof crypto||void 0===crypto.subtle||"undefined"==typeof TextEncoder)return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),n;const e=await async function(n){const e=(new TextEncoder).encode(n),t=await crypto.subtle.digest("SHA-256",e),r=new Uint8Array(t);return Array.from(r).map(n=>String.fromCharCode(n)).join("")}(n);return btoa(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}(r);return[i,r===i?"plain":"s256"]}Be.promiseConstructor=Promise;const je=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i,Se=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function _e(n){if(!Se.test(n))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}const Ne=n=>n.msg||n.message||n.error_description||n.error||JSON.stringify(n),Ie=[502,503,504];async function ze(n){var e,t;if(!("object"==typeof(t=n)&&null!==t&&"status"in t&&"ok"in t&&"json"in t&&"function"==typeof t.json))throw new re(Ne(n),0);if(Ie.includes(n.status))throw new re(Ne(n),n.status);let r,o;try{r=await n.json()}catch(n){throw new Hn(Ne(n),n)}const i=function(n){const e=n.headers.get(Fn);if(!e)return null;if(!e.match(je))return null;try{return new Date(`${e}T00:00:00.0Z`)}catch(n){return null}}(n);if(i&&i.getTime()>=qn&&"object"==typeof r&&r&&"string"==typeof r.code?o=r.code:"object"==typeof r&&r&&"string"==typeof r.error_code&&(o=r.error_code),o){if("weak_password"===o)throw new ie(Ne(r),n.status,(null===(e=r.weak_password)||void 0===e?void 0:e.reasons)||[]);if("session_not_found"===o)throw new Xn}else if("object"==typeof r&&r&&"object"==typeof r.weak_password&&r.weak_password&&Array.isArray(r.weak_password.reasons)&&r.weak_password.reasons.length&&r.weak_password.reasons.reduce((n,e)=>n&&"string"==typeof e,!0))throw new ie(Ne(r),n.status,r.weak_password.reasons);throw new Vn(Ne(r),n.status||500,o)}async function Te(n,e,t,r){var o;const i=Object.assign({},null==r?void 0:r.headers);i[Fn]||(i[Fn]=Yn),(null==r?void 0:r.jwt)&&(i.Authorization=`Bearer ${r.jwt}`);const a=null!==(o=null==r?void 0:r.query)&&void 0!==o?o:{};(null==r?void 0:r.redirectTo)&&(a.redirect_to=r.redirectTo);const s=Object.keys(a).length?"?"+new URLSearchParams(a).toString():"",l=await async function(n,e,t,r,o,i){const a=((n,e,t,r)=>{const o={method:n,headers:(null==e?void 0:e.headers)||{}};return"GET"===n?o:(o.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},null==e?void 0:e.headers),o.body=JSON.stringify(r),Object.assign(Object.assign({},o),t))})(e,r,{},i);let s;try{s=await n(t,Object.assign({},a))}catch(n){throw console.error(n),new re(Ne(n),0)}if(s.ok||await ze(s),null==r?void 0:r.noResolveJson)return s;try{return await s.json()}catch(n){await ze(n)}}(n,e,t+s,{headers:i,noResolveJson:null==r?void 0:r.noResolveJson},0,null==r?void 0:r.body);return(null==r?void 0:r.xform)?null==r?void 0:r.xform(l):{data:Object.assign({},l),error:null}}function Oe(n){var e;let t=null;var r;return function(n){return n.access_token&&n.refresh_token&&n.expires_in}(n)&&(t=Object.assign({},n),n.expires_at||(t.expires_at=(r=n.expires_in,Math.round(Date.now()/1e3)+r))),{data:{session:t,user:null!==(e=n.user)&&void 0!==e?e:n},error:null}}function Pe(n){const e=Oe(n);return!e.error&&n.weak_password&&"object"==typeof n.weak_password&&Array.isArray(n.weak_password.reasons)&&n.weak_password.reasons.length&&n.weak_password.message&&"string"==typeof n.weak_password.message&&n.weak_password.reasons.reduce((n,e)=>n&&"string"==typeof e,!0)&&(e.data.weak_password=n.weak_password),e}function Le(n){var e;return{data:{user:null!==(e=n.user)&&void 0!==e?e:n},error:null}}function Re(n){return{data:n,error:null}}function Me(n){const{action_link:e,email_otp:t,hashed_token:r,redirect_to:o,verification_type:i}=n,a=function(n,e){var t={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&e.indexOf(r)<0&&(t[r]=n[r]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(n);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(n,r[o])&&(t[r[o]]=n[r[o]])}return t}(n,["action_link","email_otp","hashed_token","redirect_to","verification_type"]);return{data:{properties:{action_link:e,email_otp:t,hashed_token:r,redirect_to:o,verification_type:i},user:Object.assign({},a)},error:null}}function De(n){return n}const Ue=["global","local","others"];class Ke{constructor({url:n="",headers:e={},fetch:t}){this.url=n,this.headers=e,this.fetch=xe(t),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(n,e=Ue[0]){if(Ue.indexOf(e)<0)throw new Error(`@supabase/auth-js: Parameter scope must be one of ${Ue.join(", ")}`);try{return await Te(this.fetch,"POST",`${this.url}/logout?scope=${e}`,{headers:this.headers,jwt:n,noResolveJson:!0}),{data:null,error:null}}catch(n){if(Qn(n))return{data:null,error:n};throw n}}async inviteUserByEmail(n,e={}){try{return await Te(this.fetch,"POST",`${this.url}/invite`,{body:{email:n,data:e.data},headers:this.headers,redirectTo:e.redirectTo,xform:Le})}catch(n){if(Qn(n))return{data:{user:null},error:n};throw n}}async generateLink(n){try{const{options:e}=n,t=function(n,e){var t={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&e.indexOf(r)<0&&(t[r]=n[r]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(n);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(n,r[o])&&(t[r[o]]=n[r[o]])}return t}(n,["options"]),r=Object.assign(Object.assign({},t),e);return"newEmail"in t&&(r.new_email=null==t?void 0:t.newEmail,delete r.newEmail),await Te(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:r,headers:this.headers,xform:Me,redirectTo:null==e?void 0:e.redirectTo})}catch(n){if(Qn(n))return{data:{properties:null,user:null},error:n};throw n}}async createUser(n){try{return await Te(this.fetch,"POST",`${this.url}/admin/users`,{body:n,headers:this.headers,xform:Le})}catch(n){if(Qn(n))return{data:{user:null},error:n};throw n}}async listUsers(n){var e,t,r,o,i,a,s;try{const l={nextPage:null,lastPage:0,total:0},c=await Te(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:null!==(t=null===(e=null==n?void 0:n.page)||void 0===e?void 0:e.toString())&&void 0!==t?t:"",per_page:null!==(o=null===(r=null==n?void 0:n.perPage)||void 0===r?void 0:r.toString())&&void 0!==o?o:""},xform:De});if(c.error)throw c.error;const u=await c.json(),d=null!==(i=c.headers.get("x-total-count"))&&void 0!==i?i:0,A=null!==(s=null===(a=c.headers.get("link"))||void 0===a?void 0:a.split(","))&&void 0!==s?s:[];return A.length>0&&(A.forEach(n=>{const e=parseInt(n.split(";")[0].split("=")[1].substring(0,1)),t=JSON.parse(n.split(";")[1].split("=")[1]);l[`${t}Page`]=e}),l.total=parseInt(d)),{data:Object.assign(Object.assign({},u),l),error:null}}catch(n){if(Qn(n))return{data:{users:[]},error:n};throw n}}async getUserById(n){_e(n);try{return await Te(this.fetch,"GET",`${this.url}/admin/users/${n}`,{headers:this.headers,xform:Le})}catch(n){if(Qn(n))return{data:{user:null},error:n};throw n}}async updateUserById(n,e){_e(n);try{return await Te(this.fetch,"PUT",`${this.url}/admin/users/${n}`,{body:e,headers:this.headers,xform:Le})}catch(n){if(Qn(n))return{data:{user:null},error:n};throw n}}async deleteUser(n,e=!1){_e(n);try{return await Te(this.fetch,"DELETE",`${this.url}/admin/users/${n}`,{headers:this.headers,body:{should_soft_delete:e},xform:Le})}catch(n){if(Qn(n))return{data:{user:null},error:n};throw n}}async _listFactors(n){_e(n.userId);try{const{data:e,error:t}=await Te(this.fetch,"GET",`${this.url}/admin/users/${n.userId}/factors`,{headers:this.headers,xform:n=>({data:{factors:n},error:null})});return{data:e,error:t}}catch(n){if(Qn(n))return{data:null,error:n};throw n}}async _deleteFactor(n){_e(n.userId),_e(n.id);try{return{data:await Te(this.fetch,"DELETE",`${this.url}/admin/users/${n.userId}/factors/${n.id}`,{headers:this.headers}),error:null}}catch(n){if(Qn(n))return{data:null,error:n};throw n}}}const $e={getItem:n=>be()?globalThis.localStorage.getItem(n):null,setItem:(n,e)=>{be()&&globalThis.localStorage.setItem(n,e)},removeItem:n=>{be()&&globalThis.localStorage.removeItem(n)}};function Fe(n={}){return{getItem:e=>n[e]||null,setItem:(e,t)=>{n[e]=t},removeItem:e=>{delete n[e]}}}const qe=!!(globalThis&&be()&&globalThis.localStorage&&"true"===globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug"));class Ye extends Error{constructor(n){super(n),this.isAcquireTimeout=!0}}class We extends Ye{}async function Ge(n,e,t){qe&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",n,e);const r=new globalThis.AbortController;return e>0&&setTimeout(()=>{r.abort(),qe&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",n)},e),await Promise.resolve().then(()=>globalThis.navigator.locks.request(n,0===e?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:r.signal},async r=>{if(!r){if(0===e)throw qe&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",n),new We(`Acquiring an exclusive Navigator LockManager lock "${n}" immediately failed`);if(qe)try{const n=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(n,null,"  "))}catch(n){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",n)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await t()}qe&&console.log("@supabase/gotrue-js: navigatorLock: acquired",n,r.name);try{return await t()}finally{qe&&console.log("@supabase/gotrue-js: navigatorLock: released",n,r.name)}}))}!function(){if("object"!=typeof globalThis)try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch(n){"undefined"!=typeof self&&(self.globalThis=self)}}();const Qe={url:"http://localhost:9999",storageKey:"supabase.auth.token",autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:$n,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function Ve(n,e,t){return await t()}class He{constructor(n){var e,t;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=He.nextInstanceID,He.nextInstanceID+=1,this.instanceID>0&&ge()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const r=Object.assign(Object.assign({},Qe),n);if(this.logDebugMessages=!!r.debug,"function"==typeof r.debug&&(this.logger=r.debug),this.persistSession=r.persistSession,this.storageKey=r.storageKey,this.autoRefreshToken=r.autoRefreshToken,this.admin=new Ke({url:r.url,headers:r.headers,fetch:r.fetch}),this.url=r.url,this.headers=r.headers,this.fetch=xe(r.fetch),this.lock=r.lock||Ve,this.detectSessionInUrl=r.detectSessionInUrl,this.flowType=r.flowType,this.hasCustomAuthorizationHeader=r.hasCustomAuthorizationHeader,r.lock?this.lock=r.lock:ge()&&(null===(e=null===globalThis||void 0===globalThis?void 0:globalThis.navigator)||void 0===e?void 0:e.locks)?this.lock=Ge:this.lock=Ve,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?r.storage?this.storage=r.storage:be()?this.storage=$e:(this.memoryStorage={},this.storage=Fe(this.memoryStorage)):(this.memoryStorage={},this.storage=Fe(this.memoryStorage)),ge()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(n){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",n)}null===(t=this.broadcastChannel)||void 0===t||t.addEventListener("message",async n=>{this._debug("received broadcast notification from other tab or client",n),await this._notifyAllSubscribers(n.data.event,n.data.session,!1)})}this.initialize()}_debug(...n){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${Un}) ${(new Date).toISOString()}`,...n),this}async initialize(){return this.initializePromise||(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))()),await this.initializePromise}async _initialize(){var n;try{const e=function(n){const e={},t=new URL(n);if(t.hash&&"#"===t.hash[0])try{new URLSearchParams(t.hash.substring(1)).forEach((n,t)=>{e[t]=n})}catch(n){}return t.searchParams.forEach((n,t)=>{e[t]=n}),e}(window.location.href);let t="none";if(this._isImplicitGrantCallback(e)?t="implicit":await this._isPKCECallback(e)&&(t="pkce"),ge()&&this.detectSessionInUrl&&"none"!==t){const{data:r,error:o}=await this._getSessionFromURL(e,t);if(o){if(this._debug("#_initialize()","error detecting session from URL",o),function(n){return Qn(n)&&"AuthImplicitGrantRedirectError"===n.name}(o)){const e=null===(n=o.details)||void 0===n?void 0:n.code;if("identity_already_exists"===e||"identity_not_found"===e||"single_identity_not_deletable"===e)return{error:o}}return await this._removeSession(),{error:o}}const{session:i,redirectType:a}=r;return this._debug("#_initialize()","detected session in URL",i,"redirect type",a),await this._saveSession(i),setTimeout(async()=>{"recovery"===a?await this._notifyAllSubscribers("PASSWORD_RECOVERY",i):await this._notifyAllSubscribers("SIGNED_IN",i)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(n){return Qn(n)?{error:n}:{error:new Hn("Unexpected error during initialization",n)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(n){var e,t,r;try{const o=await Te(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:null!==(t=null===(e=null==n?void 0:n.options)||void 0===e?void 0:e.data)&&void 0!==t?t:{},gotrue_meta_security:{captcha_token:null===(r=null==n?void 0:n.options)||void 0===r?void 0:r.captchaToken}},xform:Oe}),{data:i,error:a}=o;if(a||!i)return{data:{user:null,session:null},error:a};const s=i.session,l=i.user;return i.session&&(await this._saveSession(i.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async signUp(n){var e,t,r;try{let o;if("email"in n){const{email:t,password:r,options:i}=n;let a=null,s=null;"pkce"===this.flowType&&([a,s]=await we(this.storage,this.storageKey)),o=await Te(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:null==i?void 0:i.emailRedirectTo,body:{email:t,password:r,data:null!==(e=null==i?void 0:i.data)&&void 0!==e?e:{},gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken},code_challenge:a,code_challenge_method:s},xform:Oe})}else{if(!("phone"in n))throw new ne("You must provide either an email or phone number and a password");{const{phone:e,password:i,options:a}=n;o=await Te(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:e,password:i,data:null!==(t=null==a?void 0:a.data)&&void 0!==t?t:{},channel:null!==(r=null==a?void 0:a.channel)&&void 0!==r?r:"sms",gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken}},xform:Oe})}}const{data:i,error:a}=o;if(a||!i)return{data:{user:null,session:null},error:a};const s=i.session,l=i.user;return i.session&&(await this._saveSession(i.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async signInWithPassword(n){try{let e;if("email"in n){const{email:t,password:r,options:o}=n;e=await Te(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:t,password:r,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:Pe})}else{if(!("phone"in n))throw new ne("You must provide either an email or phone number and a password");{const{phone:t,password:r,options:o}=n;e=await Te(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:t,password:r,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:Pe})}}const{data:t,error:r}=e;return r?{data:{user:null,session:null},error:r}:t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign({user:t.user,session:t.session},t.weak_password?{weakPassword:t.weak_password}:null),error:r}):{data:{user:null,session:null},error:new Jn}}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async signInWithOAuth(n){var e,t,r,o;return await this._handleProviderSignIn(n.provider,{redirectTo:null===(e=n.options)||void 0===e?void 0:e.redirectTo,scopes:null===(t=n.options)||void 0===t?void 0:t.scopes,queryParams:null===(r=n.options)||void 0===r?void 0:r.queryParams,skipBrowserRedirect:null===(o=n.options)||void 0===o?void 0:o.skipBrowserRedirect})}async exchangeCodeForSession(n){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(n))}async signInWithWeb3(n){const{chain:e}=n;if("solana"===e)return await this.signInWithSolana(n);throw new Error(`@supabase/auth-js: Unsupported chain "${e}"`)}async signInWithSolana(n){var e,t,r,o,i,a,s,l,c,u,d,A;let f,p;if("message"in n)f=n.message,p=n.signature;else{const{chain:d,wallet:A,statement:h,options:g}=n;let m;if(ge())if("object"==typeof A)m=A;else{const n=window;if(!("solana"in n)||"object"!=typeof n.solana||!("signIn"in n.solana&&"function"==typeof n.solana.signIn||"signMessage"in n.solana&&"function"==typeof n.solana.signMessage))throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");m=n.solana}else{if("object"!=typeof A||!(null==g?void 0:g.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");m=A}const b=new URL(null!==(e=null==g?void 0:g.url)&&void 0!==e?e:window.location.href);if("signIn"in m&&m.signIn){const n=await m.signIn(Object.assign(Object.assign(Object.assign({issuedAt:(new Date).toISOString()},null==g?void 0:g.signInWithSolana),{version:"1",domain:b.host,uri:b.href}),h?{statement:h}:null));let e;if(Array.isArray(n)&&n[0]&&"object"==typeof n[0])e=n[0];else{if(!(n&&"object"==typeof n&&"signedMessage"in n&&"signature"in n))throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");e=n}if(!("signedMessage"in e&&"signature"in e&&("string"==typeof e.signedMessage||e.signedMessage instanceof Uint8Array)&&e.signature instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");f="string"==typeof e.signedMessage?e.signedMessage:(new TextDecoder).decode(e.signedMessage),p=e.signature}else{if(!("signMessage"in m&&"function"==typeof m.signMessage&&"publicKey"in m&&"object"==typeof m&&m.publicKey&&"toBase58"in m.publicKey&&"function"==typeof m.publicKey.toBase58))throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");f=[`${b.host} wants you to sign in with your Solana account:`,m.publicKey.toBase58(),...h?["",h,""]:[""],"Version: 1",`URI: ${b.href}`,`Issued At: ${null!==(r=null===(t=null==g?void 0:g.signInWithSolana)||void 0===t?void 0:t.issuedAt)&&void 0!==r?r:(new Date).toISOString()}`,...(null===(o=null==g?void 0:g.signInWithSolana)||void 0===o?void 0:o.notBefore)?[`Not Before: ${g.signInWithSolana.notBefore}`]:[],...(null===(i=null==g?void 0:g.signInWithSolana)||void 0===i?void 0:i.expirationTime)?[`Expiration Time: ${g.signInWithSolana.expirationTime}`]:[],...(null===(a=null==g?void 0:g.signInWithSolana)||void 0===a?void 0:a.chainId)?[`Chain ID: ${g.signInWithSolana.chainId}`]:[],...(null===(s=null==g?void 0:g.signInWithSolana)||void 0===s?void 0:s.nonce)?[`Nonce: ${g.signInWithSolana.nonce}`]:[],...(null===(l=null==g?void 0:g.signInWithSolana)||void 0===l?void 0:l.requestId)?[`Request ID: ${g.signInWithSolana.requestId}`]:[],...(null===(u=null===(c=null==g?void 0:g.signInWithSolana)||void 0===c?void 0:c.resources)||void 0===u?void 0:u.length)?["Resources",...g.signInWithSolana.resources.map(n=>`- ${n}`)]:[]].join("\n");const n=await m.signMessage((new TextEncoder).encode(f),"utf8");if(!(n&&n instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");p=n}}try{const{data:e,error:t}=await Te(this.fetch,"POST",`${this.url}/token?grant_type=web3`,{headers:this.headers,body:Object.assign({chain:"solana",message:f,signature:he(p)},(null===(d=n.options)||void 0===d?void 0:d.captchaToken)?{gotrue_meta_security:{captcha_token:null===(A=n.options)||void 0===A?void 0:A.captchaToken}}:null),xform:Oe});if(t)throw t;return e&&e.session&&e.user?(e.session&&(await this._saveSession(e.session),await this._notifyAllSubscribers("SIGNED_IN",e.session)),{data:Object.assign({},e),error:t}):{data:{user:null,session:null},error:new Jn}}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async _exchangeCodeForSession(n){const e=await Ce(this.storage,`${this.storageKey}-code-verifier`),[t,r]=(null!=e?e:"").split("/");try{const{data:e,error:o}=await Te(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:n,code_verifier:t},xform:Oe});if(await ve(this.storage,`${this.storageKey}-code-verifier`),o)throw o;return e&&e.session&&e.user?(e.session&&(await this._saveSession(e.session),await this._notifyAllSubscribers("SIGNED_IN",e.session)),{data:Object.assign(Object.assign({},e),{redirectType:null!=r?r:null}),error:o}):{data:{user:null,session:null,redirectType:null},error:new Jn}}catch(n){if(Qn(n))return{data:{user:null,session:null,redirectType:null},error:n};throw n}}async signInWithIdToken(n){try{const{options:e,provider:t,token:r,access_token:o,nonce:i}=n,a=await Te(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:t,id_token:r,access_token:o,nonce:i,gotrue_meta_security:{captcha_token:null==e?void 0:e.captchaToken}},xform:Oe}),{data:s,error:l}=a;return l?{data:{user:null,session:null},error:l}:s&&s.session&&s.user?(s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",s.session)),{data:s,error:l}):{data:{user:null,session:null},error:new Jn}}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async signInWithOtp(n){var e,t,r,o,i;try{if("email"in n){const{email:r,options:o}=n;let i=null,a=null;"pkce"===this.flowType&&([i,a]=await we(this.storage,this.storageKey));const{error:s}=await Te(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:r,data:null!==(e=null==o?void 0:o.data)&&void 0!==e?e:{},create_user:null===(t=null==o?void 0:o.shouldCreateUser)||void 0===t||t,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken},code_challenge:i,code_challenge_method:a},redirectTo:null==o?void 0:o.emailRedirectTo});return{data:{user:null,session:null},error:s}}if("phone"in n){const{phone:e,options:t}=n,{data:a,error:s}=await Te(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:e,data:null!==(r=null==t?void 0:t.data)&&void 0!==r?r:{},create_user:null===(o=null==t?void 0:t.shouldCreateUser)||void 0===o||o,gotrue_meta_security:{captcha_token:null==t?void 0:t.captchaToken},channel:null!==(i=null==t?void 0:t.channel)&&void 0!==i?i:"sms"}});return{data:{user:null,session:null,messageId:null==a?void 0:a.message_id},error:s}}throw new ne("You must provide either an email or phone number.")}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async verifyOtp(n){var e,t;try{let r,o;"options"in n&&(r=null===(e=n.options)||void 0===e?void 0:e.redirectTo,o=null===(t=n.options)||void 0===t?void 0:t.captchaToken);const{data:i,error:a}=await Te(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},n),{gotrue_meta_security:{captcha_token:o}}),redirectTo:r,xform:Oe});if(a)throw a;if(!i)throw new Error("An error occurred on token verification.");const s=i.session,l=i.user;return(null==s?void 0:s.access_token)&&(await this._saveSession(s),await this._notifyAllSubscribers("recovery"==n.type?"PASSWORD_RECOVERY":"SIGNED_IN",s)),{data:{user:l,session:s},error:null}}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async signInWithSSO(n){var e,t,r;try{let o=null,i=null;return"pkce"===this.flowType&&([o,i]=await we(this.storage,this.storageKey)),await Te(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in n?{provider_id:n.providerId}:null),"domain"in n?{domain:n.domain}:null),{redirect_to:null!==(t=null===(e=n.options)||void 0===e?void 0:e.redirectTo)&&void 0!==t?t:void 0}),(null===(r=null==n?void 0:n.options)||void 0===r?void 0:r.captchaToken)?{gotrue_meta_security:{captcha_token:n.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:o,code_challenge_method:i}),headers:this.headers,xform:Re})}catch(n){if(Qn(n))return{data:null,error:n};throw n}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async n=>{const{data:{session:e},error:t}=n;if(t)throw t;if(!e)throw new Xn;const{error:r}=await Te(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:e.access_token});return{data:{user:null,session:null},error:r}})}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async resend(n){try{const e=`${this.url}/resend`;if("email"in n){const{email:t,type:r,options:o}=n,{error:i}=await Te(this.fetch,"POST",e,{headers:this.headers,body:{email:t,type:r,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},redirectTo:null==o?void 0:o.emailRedirectTo});return{data:{user:null,session:null},error:i}}if("phone"in n){const{phone:t,type:r,options:o}=n,{data:i,error:a}=await Te(this.fetch,"POST",e,{headers:this.headers,body:{phone:t,type:r,gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}}});return{data:{user:null,session:null,messageId:null==i?void 0:i.message_id},error:a}}throw new ne("You must provide either an email or phone number and a type")}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async n=>n))}async _acquireLock(n,e){this._debug("#_acquireLock","begin",n);try{if(this.lockAcquired){const n=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),t=(async()=>(await n,await e()))();return this.pendingInLock.push((async()=>{try{await t}catch(n){}})()),t}return await this.lock(`lock:${this.storageKey}`,n,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const n=e();for(this.pendingInLock.push((async()=>{try{await n}catch(n){}})()),await n;this.pendingInLock.length;){const n=[...this.pendingInLock];await Promise.all(n),this.pendingInLock.splice(0,n.length)}return await n}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(n){this._debug("#_useSession","begin");try{const e=await this.__loadSession();return await n(e)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",(new Error).stack);try{let n=null;const e=await Ce(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",e),null!==e&&(this._isValidSession(e)?n=e:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!n)return{data:{session:null},error:null};const t=!!n.expires_at&&1e3*n.expires_at-Date.now()<9e4;if(this._debug("#__loadSession()",`session has${t?"":" not"} expired`,"expires_at",n.expires_at),!t){if(this.storage.isServer){let e=this.suppressGetSessionWarning;n=new Proxy(n,{get:(n,t,r)=>(e||"user"!==t||(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),e=!0,this.suppressGetSessionWarning=!0),Reflect.get(n,t,r))})}return{data:{session:n},error:null}}const{session:r,error:o}=await this._callRefreshToken(n.refresh_token);return o?{data:{session:null},error:o}:{data:{session:r},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(n){return n?await this._getUser(n):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(n){try{return n?await Te(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:n,xform:Le}):await this._useSession(async n=>{var e,t,r;const{data:o,error:i}=n;if(i)throw i;return(null===(e=o.session)||void 0===e?void 0:e.access_token)||this.hasCustomAuthorizationHeader?await Te(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:null!==(r=null===(t=o.session)||void 0===t?void 0:t.access_token)&&void 0!==r?r:void 0,xform:Le}):{data:{user:null},error:new Xn}})}catch(n){if(Qn(n))return function(n){return Qn(n)&&"AuthSessionMissingError"===n.name}(n)&&(await this._removeSession(),await ve(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:n};throw n}}async updateUser(n,e={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(n,e))}async _updateUser(n,e={}){try{return await this._useSession(async t=>{const{data:r,error:o}=t;if(o)throw o;if(!r.session)throw new Xn;const i=r.session;let a=null,s=null;"pkce"===this.flowType&&null!=n.email&&([a,s]=await we(this.storage,this.storageKey));const{data:l,error:c}=await Te(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:null==e?void 0:e.emailRedirectTo,body:Object.assign(Object.assign({},n),{code_challenge:a,code_challenge_method:s}),jwt:i.access_token,xform:Le});if(c)throw c;return i.user=l.user,await this._saveSession(i),await this._notifyAllSubscribers("USER_UPDATED",i),{data:{user:i.user},error:null}})}catch(n){if(Qn(n))return{data:{user:null},error:n};throw n}}async setSession(n){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(n))}async _setSession(n){try{if(!n.access_token||!n.refresh_token)throw new Xn;const e=Date.now()/1e3;let t=e,r=!0,o=null;const{payload:i}=Ee(n.access_token);if(i.exp&&(t=i.exp,r=t<=e),r){const{session:e,error:t}=await this._callRefreshToken(n.refresh_token);if(t)return{data:{user:null,session:null},error:t};if(!e)return{data:{user:null,session:null},error:null};o=e}else{const{data:r,error:i}=await this._getUser(n.access_token);if(i)throw i;o={access_token:n.access_token,refresh_token:n.refresh_token,user:r.user,token_type:"bearer",expires_in:t-e,expires_at:t},await this._saveSession(o),await this._notifyAllSubscribers("SIGNED_IN",o)}return{data:{user:o.user,session:o},error:null}}catch(n){if(Qn(n))return{data:{session:null,user:null},error:n};throw n}}async refreshSession(n){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(n))}async _refreshSession(n){try{return await this._useSession(async e=>{var t;if(!n){const{data:r,error:o}=e;if(o)throw o;n=null!==(t=r.session)&&void 0!==t?t:void 0}if(!(null==n?void 0:n.refresh_token))throw new Xn;const{session:r,error:o}=await this._callRefreshToken(n.refresh_token);return o?{data:{user:null,session:null},error:o}:r?{data:{user:r.user,session:r},error:null}:{data:{user:null,session:null},error:null}})}catch(n){if(Qn(n))return{data:{user:null,session:null},error:n};throw n}}async _getSessionFromURL(n,e){try{if(!ge())throw new ee("No browser detected.");if(n.error||n.error_description||n.error_code)throw new ee(n.error_description||"Error in URL with unspecified error_description",{error:n.error||"unspecified_error",code:n.error_code||"unspecified_code"});switch(e){case"implicit":if("pkce"===this.flowType)throw new te("Not a valid PKCE flow url.");break;case"pkce":if("implicit"===this.flowType)throw new ee("Not a valid implicit grant flow url.")}if("pkce"===e){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!n.code)throw new te("No code detected.");const{data:e,error:t}=await this._exchangeCodeForSession(n.code);if(t)throw t;const r=new URL(window.location.href);return r.searchParams.delete("code"),window.history.replaceState(window.history.state,"",r.toString()),{data:{session:e.session,redirectType:null},error:null}}const{provider_token:t,provider_refresh_token:r,access_token:o,refresh_token:i,expires_in:a,expires_at:s,token_type:l}=n;if(!(o&&a&&i&&l))throw new ee("No session defined in URL");const c=Math.round(Date.now()/1e3),u=parseInt(a);let d=c+u;s&&(d=parseInt(s));const A=d-c;1e3*A<=Kn&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${A}s, should have been closer to ${u}s`);const f=d-u;c-f>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",f,d,c):c-f<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",f,d,c);const{data:p,error:h}=await this._getUser(o);if(h)throw h;const g={provider_token:t,provider_refresh_token:r,access_token:o,expires_in:u,expires_at:d,refresh_token:i,token_type:l,user:p.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:g,redirectType:n.type},error:null}}catch(n){if(Qn(n))return{data:{session:null,redirectType:null},error:n};throw n}}_isImplicitGrantCallback(n){return Boolean(n.access_token||n.error_description)}async _isPKCECallback(n){const e=await Ce(this.storage,`${this.storageKey}-code-verifier`);return!(!n.code||!e)}async signOut(n={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(n))}async _signOut({scope:n}={scope:"global"}){return await this._useSession(async e=>{var t;const{data:r,error:o}=e;if(o)return{error:o};const i=null===(t=r.session)||void 0===t?void 0:t.access_token;if(i){const{error:e}=await this.admin.signOut(i,n);if(e&&(!function(n){return Qn(n)&&"AuthApiError"===n.name}(e)||404!==e.status&&401!==e.status&&403!==e.status))return{error:e}}return"others"!==n&&(await this._removeSession(),await ve(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(n){const e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){const e=16*Math.random()|0;return("x"==n?e:3&e|8).toString(16)}),t={id:e,callback:n,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",e),this.stateChangeEmitters.delete(e)}};return this._debug("#onAuthStateChange()","registered callback with id",e),this.stateChangeEmitters.set(e,t),(async()=>{await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(e)})})(),{data:{subscription:t}}}async _emitInitialSession(n){return await this._useSession(async e=>{var t,r;try{const{data:{session:r},error:o}=e;if(o)throw o;await(null===(t=this.stateChangeEmitters.get(n))||void 0===t?void 0:t.callback("INITIAL_SESSION",r)),this._debug("INITIAL_SESSION","callback id",n,"session",r)}catch(e){await(null===(r=this.stateChangeEmitters.get(n))||void 0===r?void 0:r.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",n,"error",e),console.error(e)}})}async resetPasswordForEmail(n,e={}){let t=null,r=null;"pkce"===this.flowType&&([t,r]=await we(this.storage,this.storageKey,!0));try{return await Te(this.fetch,"POST",`${this.url}/recover`,{body:{email:n,code_challenge:t,code_challenge_method:r,gotrue_meta_security:{captcha_token:e.captchaToken}},headers:this.headers,redirectTo:e.redirectTo})}catch(n){if(Qn(n))return{data:null,error:n};throw n}}async getUserIdentities(){var n;try{const{data:e,error:t}=await this.getUser();if(t)throw t;return{data:{identities:null!==(n=e.user.identities)&&void 0!==n?n:[]},error:null}}catch(n){if(Qn(n))return{data:null,error:n};throw n}}async linkIdentity(n){var e;try{const{data:t,error:r}=await this._useSession(async e=>{var t,r,o,i,a;const{data:s,error:l}=e;if(l)throw l;const c=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,n.provider,{redirectTo:null===(t=n.options)||void 0===t?void 0:t.redirectTo,scopes:null===(r=n.options)||void 0===r?void 0:r.scopes,queryParams:null===(o=n.options)||void 0===o?void 0:o.queryParams,skipBrowserRedirect:!0});return await Te(this.fetch,"GET",c,{headers:this.headers,jwt:null!==(a=null===(i=s.session)||void 0===i?void 0:i.access_token)&&void 0!==a?a:void 0})});if(r)throw r;return ge()&&!(null===(e=n.options)||void 0===e?void 0:e.skipBrowserRedirect)&&window.location.assign(null==t?void 0:t.url),{data:{provider:n.provider,url:null==t?void 0:t.url},error:null}}catch(e){if(Qn(e))return{data:{provider:n.provider,url:null},error:e};throw e}}async unlinkIdentity(n){try{return await this._useSession(async e=>{var t,r;const{data:o,error:i}=e;if(i)throw i;return await Te(this.fetch,"DELETE",`${this.url}/user/identities/${n.identity_id}`,{headers:this.headers,jwt:null!==(r=null===(t=o.session)||void 0===t?void 0:t.access_token)&&void 0!==r?r:void 0})})}catch(n){if(Qn(n))return{data:null,error:n};throw n}}async _refreshAccessToken(n){const e=`#_refreshAccessToken(${n.substring(0,5)}...)`;this._debug(e,"begin");try{const o=Date.now();return await(t=async t=>(t>0&&await async function(n){return await new Promise(e=>{setTimeout(()=>e(null),n)})}(200*Math.pow(2,t-1)),this._debug(e,"refreshing attempt",t),await Te(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:n},headers:this.headers,xform:Oe})),r=(n,e)=>{const t=200*Math.pow(2,n);return e&&oe(e)&&Date.now()+t-o<Kn},new Promise((n,e)=>{(async()=>{for(let o=0;o<1/0;o++)try{const e=await t(o);if(!r(o,null))return void n(e)}catch(n){if(!r(o,n))return void e(n)}})()}))}catch(n){if(this._debug(e,"error",n),Qn(n))return{data:{session:null,user:null},error:n};throw n}finally{this._debug(e,"end")}var t,r}_isValidSession(n){return"object"==typeof n&&null!==n&&"access_token"in n&&"refresh_token"in n&&"expires_at"in n}async _handleProviderSignIn(n,e){const t=await this._getUrlForProvider(`${this.url}/authorize`,n,{redirectTo:e.redirectTo,scopes:e.scopes,queryParams:e.queryParams});return this._debug("#_handleProviderSignIn()","provider",n,"options",e,"url",t),ge()&&!e.skipBrowserRedirect&&window.location.assign(t),{data:{provider:n,url:t},error:null}}async _recoverAndRefresh(){var n;const e="#_recoverAndRefresh()";this._debug(e,"begin");try{const t=await Ce(this.storage,this.storageKey);if(this._debug(e,"session from storage",t),!this._isValidSession(t))return this._debug(e,"session is not valid"),void(null!==t&&await this._removeSession());const r=1e3*(null!==(n=t.expires_at)&&void 0!==n?n:1/0)-Date.now()<9e4;if(this._debug(e,`session has${r?"":" not"} expired with margin of 90000s`),r){if(this.autoRefreshToken&&t.refresh_token){const{error:n}=await this._callRefreshToken(t.refresh_token);n&&(console.error(n),oe(n)||(this._debug(e,"refresh failed with a non-retryable error, removing the session",n),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",t)}catch(n){return this._debug(e,"error",n),void console.error(n)}finally{this._debug(e,"end")}}async _callRefreshToken(n){var e,t;if(!n)throw new Xn;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const r=`#_callRefreshToken(${n.substring(0,5)}...)`;this._debug(r,"begin");try{this.refreshingDeferred=new Be;const{data:e,error:t}=await this._refreshAccessToken(n);if(t)throw t;if(!e.session)throw new Xn;await this._saveSession(e.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",e.session);const r={session:e.session,error:null};return this.refreshingDeferred.resolve(r),r}catch(n){if(this._debug(r,"error",n),Qn(n)){const t={session:null,error:n};return oe(n)||await this._removeSession(),null===(e=this.refreshingDeferred)||void 0===e||e.resolve(t),t}throw null===(t=this.refreshingDeferred)||void 0===t||t.reject(n),n}finally{this.refreshingDeferred=null,this._debug(r,"end")}}async _notifyAllSubscribers(n,e,t=!0){const r=`#_notifyAllSubscribers(${n})`;this._debug(r,"begin",e,`broadcast = ${t}`);try{this.broadcastChannel&&t&&this.broadcastChannel.postMessage({event:n,session:e});const r=[],o=Array.from(this.stateChangeEmitters.values()).map(async t=>{try{await t.callback(n,e)}catch(n){r.push(n)}});if(await Promise.all(o),r.length>0){for(let n=0;n<r.length;n+=1)console.error(r[n]);throw r[0]}}finally{this._debug(r,"end")}}async _saveSession(n){this._debug("#_saveSession()",n),this.suppressGetSessionWarning=!0,await ye(this.storage,this.storageKey,n)}async _removeSession(){this._debug("#_removeSession()"),await ve(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const n=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{n&&ge()&&(null===window||void 0===window?void 0:window.removeEventListener)&&window.removeEventListener("visibilitychange",n)}catch(n){console.error("removing visibilitychange callback failed",n)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const n=setInterval(()=>this._autoRefreshTokenTick(),Kn);this.autoRefreshTicker=n,n&&"object"==typeof n&&"function"==typeof n.unref?n.unref():"undefined"!=typeof Deno&&"function"==typeof Deno.unrefTimer&&Deno.unrefTimer(n),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const n=this.autoRefreshTicker;this.autoRefreshTicker=null,n&&clearInterval(n)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const n=Date.now();try{return await this._useSession(async e=>{const{data:{session:t}}=e;if(!t||!t.refresh_token||!t.expires_at)return void this._debug("#_autoRefreshTokenTick()","no session");const r=Math.floor((1e3*t.expires_at-n)/Kn);this._debug("#_autoRefreshTokenTick()",`access token expires in ${r} ticks, a tick lasts 30000ms, refresh threshold is 3 ticks`),r<=3&&await this._callRefreshToken(t.refresh_token)})}catch(n){console.error("Auto refresh tick failed with error. This is likely a transient error.",n)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(n){if(!(n.isAcquireTimeout||n instanceof Ye))throw n;this._debug("auto refresh token tick lock not available")}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!ge()||!(null===window||void 0===window?void 0:window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),null===window||void 0===window||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(n){console.error("_handleVisibilityChange",n)}}async _onVisibilityChanged(n){const e=`#_onVisibilityChanged(${n})`;this._debug(e,"visibilityState",document.visibilityState),"visible"===document.visibilityState?(this.autoRefreshToken&&this._startAutoRefresh(),n||(await this.initializePromise,await this._acquireLock(-1,async()=>{"visible"===document.visibilityState?await this._recoverAndRefresh():this._debug(e,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting")}))):"hidden"===document.visibilityState&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(n,e,t){const r=[`provider=${encodeURIComponent(e)}`];if((null==t?void 0:t.redirectTo)&&r.push(`redirect_to=${encodeURIComponent(t.redirectTo)}`),(null==t?void 0:t.scopes)&&r.push(`scopes=${encodeURIComponent(t.scopes)}`),"pkce"===this.flowType){const[n,e]=await we(this.storage,this.storageKey),t=new URLSearchParams({code_challenge:`${encodeURIComponent(n)}`,code_challenge_method:`${encodeURIComponent(e)}`});r.push(t.toString())}if(null==t?void 0:t.queryParams){const n=new URLSearchParams(t.queryParams);r.push(n.toString())}return(null==t?void 0:t.skipBrowserRedirect)&&r.push(`skip_http_redirect=${t.skipBrowserRedirect}`),`${n}?${r.join("&")}`}async _unenroll(n){try{return await this._useSession(async e=>{var t;const{data:r,error:o}=e;return o?{data:null,error:o}:await Te(this.fetch,"DELETE",`${this.url}/factors/${n.factorId}`,{headers:this.headers,jwt:null===(t=null==r?void 0:r.session)||void 0===t?void 0:t.access_token})})}catch(n){if(Qn(n))return{data:null,error:n};throw n}}async _enroll(n){try{return await this._useSession(async e=>{var t,r;const{data:o,error:i}=e;if(i)return{data:null,error:i};const a=Object.assign({friendly_name:n.friendlyName,factor_type:n.factorType},"phone"===n.factorType?{phone:n.phone}:{issuer:n.issuer}),{data:s,error:l}=await Te(this.fetch,"POST",`${this.url}/factors`,{body:a,headers:this.headers,jwt:null===(t=null==o?void 0:o.session)||void 0===t?void 0:t.access_token});return l?{data:null,error:l}:("totp"===n.factorType&&(null===(r=null==s?void 0:s.totp)||void 0===r?void 0:r.qr_code)&&(s.totp.qr_code=`data:image/svg+xml;utf-8,${s.totp.qr_code}`),{data:s,error:null})})}catch(n){if(Qn(n))return{data:null,error:n};throw n}}async _verify(n){return this._acquireLock(-1,async()=>{try{return await this._useSession(async e=>{var t;const{data:r,error:o}=e;if(o)return{data:null,error:o};const{data:i,error:a}=await Te(this.fetch,"POST",`${this.url}/factors/${n.factorId}/verify`,{body:{code:n.code,challenge_id:n.challengeId},headers:this.headers,jwt:null===(t=null==r?void 0:r.session)||void 0===t?void 0:t.access_token});return a?{data:null,error:a}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+i.expires_in},i)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",i),{data:i,error:a})})}catch(n){if(Qn(n))return{data:null,error:n};throw n}})}async _challenge(n){return this._acquireLock(-1,async()=>{try{return await this._useSession(async e=>{var t;const{data:r,error:o}=e;return o?{data:null,error:o}:await Te(this.fetch,"POST",`${this.url}/factors/${n.factorId}/challenge`,{body:{channel:n.channel},headers:this.headers,jwt:null===(t=null==r?void 0:r.session)||void 0===t?void 0:t.access_token})})}catch(n){if(Qn(n))return{data:null,error:n};throw n}})}async _challengeAndVerify(n){const{data:e,error:t}=await this._challenge({factorId:n.factorId});return t?{data:null,error:t}:await this._verify({factorId:n.factorId,challengeId:e.id,code:n.code})}async _listFactors(){const{data:{user:n},error:e}=await this.getUser();if(e)return{data:null,error:e};const t=(null==n?void 0:n.factors)||[],r=t.filter(n=>"totp"===n.factor_type&&"verified"===n.status),o=t.filter(n=>"phone"===n.factor_type&&"verified"===n.status);return{data:{all:t,totp:r,phone:o},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async n=>{var e,t;const{data:{session:r},error:o}=n;if(o)return{data:null,error:o};if(!r)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:i}=Ee(r.access_token);let a=null;i.aal&&(a=i.aal);let s=a;return(null!==(t=null===(e=r.user.factors)||void 0===e?void 0:e.filter(n=>"verified"===n.status))&&void 0!==t?t:[]).length>0&&(s="aal2"),{data:{currentLevel:a,nextLevel:s,currentAuthenticationMethods:i.amr||[]},error:null}}))}async fetchJwk(n,e={keys:[]}){let t=e.keys.find(e=>e.kid===n);if(t)return t;if(t=this.jwks.keys.find(e=>e.kid===n),t&&this.jwks_cached_at+6e5>Date.now())return t;const{data:r,error:o}=await Te(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(o)throw o;if(!r.keys||0===r.keys.length)throw new ae("JWKS is empty");if(this.jwks=r,this.jwks_cached_at=Date.now(),t=r.keys.find(e=>e.kid===n),!t)throw new ae("No matching signing key found in JWKS");return t}async getClaims(n,e={keys:[]}){try{let t=n;if(!t){const{data:n,error:e}=await this.getSession();if(e||!n.session)return{data:null,error:e};t=n.session.access_token}const{header:r,payload:o,signature:i,raw:{header:a,payload:s}}=Ee(t);if(function(n){if(!n)throw new Error("Missing exp claim");if(n<=Math.floor(Date.now()/1e3))throw new Error("JWT has expired")}(o.exp),!r.kid||"HS256"===r.alg||!("crypto"in globalThis)||!("subtle"in globalThis.crypto)){const{error:n}=await this.getUser(t);if(n)throw n;return{data:{claims:o,header:r,signature:i},error:null}}const l=function(n){switch(n){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}(r.alg),c=await this.fetchJwk(r.kid,e),u=await crypto.subtle.importKey("jwk",c,l,!0,["verify"]);if(!await crypto.subtle.verify(l,u,i,function(n){const e=[];return function(n,e){for(let t=0;t<n.length;t+=1){let r=n.charCodeAt(t);if(r>55295&&r<=56319){const e=1024*(r-55296)&65535;r=65536+(n.charCodeAt(t+1)-56320&65535|e),t+=1}fe(r,e)}}(n,n=>e.push(n)),new Uint8Array(e)}(`${a}.${s}`)))throw new ae("Invalid JWT signature");return{data:{claims:o,header:r,signature:i},error:null}}catch(n){if(Qn(n))return{data:null,error:n};throw n}}}He.nextInstanceID=0;const Ze=He;class Xe extends Ze{constructor(n){super(n)}}class Je{constructor(n,e,t){var r,o,i;if(this.supabaseUrl=n,this.supabaseKey=e,!n)throw new Error("supabaseUrl is required.");if(!e)throw new Error("supabaseKey is required.");const a=(s=n).endsWith("/")?s:s+"/";var s;const l=new URL(a);this.realtimeUrl=new URL("realtime/v1",l),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",l),this.storageUrl=new URL("storage/v1",l),this.functionsUrl=new URL("functions/v1",l);const c=`sb-${l.hostname.split(".")[0]}-auth-token`,u=function(n,e){var t,r;const{db:o,auth:i,realtime:a,global:s}=n,{db:l,auth:c,realtime:u,global:d}=e,A={db:Object.assign(Object.assign({},l),o),auth:Object.assign(Object.assign({},c),i),realtime:Object.assign(Object.assign({},u),a),global:Object.assign(Object.assign(Object.assign({},d),s),{headers:Object.assign(Object.assign({},null!==(t=null==d?void 0:d.headers)&&void 0!==t?t:{}),null!==(r=null==s?void 0:s.headers)&&void 0!==r?r:{})}),accessToken:()=>{return n=this,e=void 0,r=function*(){return""},new((t=void 0)||(t=Promise))(function(o,i){function a(n){try{l(r.next(n))}catch(n){i(n)}}function s(n){try{l(r.throw(n))}catch(n){i(n)}}function l(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t(function(n){n(e)})).then(a,s)}l((r=r.apply(n,e||[])).next())});var n,e,t,r}};return n.accessToken?A.accessToken=n.accessToken:delete A.accessToken,A}(null!=t?t:{},{db:On,realtime:Ln,auth:Object.assign(Object.assign({},Pn),{storageKey:c}),global:Tn});this.storageKey=null!==(r=u.auth.storageKey)&&void 0!==r?r:"",this.headers=null!==(o=u.global.headers)&&void 0!==o?o:{},u.accessToken?(this.accessToken=u.accessToken,this.auth=new Proxy({},{get:(n,e)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(e)} is not possible`)}})):this.auth=this._initSupabaseAuthClient(null!==(i=u.auth)&&void 0!==i?i:{},this.headers,u.global.fetch),this.fetch=Dn(e,this._getAccessToken.bind(this),u.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},u.realtime)),this.rest=new _(new URL("rest/v1",l).href,{headers:this.headers,schema:u.db.schema,fetch:this.fetch}),u.accessToken||this._listenForAuthEvents()}get functions(){return new j(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}get storage(){return new In(this.storageUrl.href,this.headers,this.fetch)}from(n){return this.rest.from(n)}schema(n){return this.rest.schema(n)}rpc(n,e={},t={}){return this.rest.rpc(n,e,t)}channel(n,e={config:{}}){return this.realtime.channel(n,e)}getChannels(){return this.realtime.getChannels()}removeChannel(n){return this.realtime.removeChannel(n)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var n,e,t,r,o,i;return t=this,r=void 0,i=function*(){if(this.accessToken)return yield this.accessToken();const{data:t}=yield this.auth.getSession();return null!==(e=null===(n=t.session)||void 0===n?void 0:n.access_token)&&void 0!==e?e:null},new((o=void 0)||(o=Promise))(function(n,e){function a(n){try{l(i.next(n))}catch(n){e(n)}}function s(n){try{l(i.throw(n))}catch(n){e(n)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o(function(n){n(t)})).then(a,s)}l((i=i.apply(t,r||[])).next())})}_initSupabaseAuthClient({autoRefreshToken:n,persistSession:e,detectSessionInUrl:t,storage:r,storageKey:o,flowType:i,lock:a,debug:s},l,c){const u={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new Xe({url:this.authUrl.href,headers:Object.assign(Object.assign({},u),l),storageKey:o,autoRefreshToken:n,persistSession:e,detectSessionInUrl:t,storage:r,flowType:i,lock:a,debug:s,fetch:c,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(n){return new un(this.realtimeUrl.href,Object.assign(Object.assign({},n),{params:Object.assign({apikey:this.supabaseKey},null==n?void 0:n.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((n,e)=>{this._handleTokenChanged(n,"CLIENT",null==e?void 0:e.access_token)})}_handleTokenChanged(n,e,t){"TOKEN_REFRESHED"!==n&&"SIGNED_IN"!==n||this.changedAccessToken===t?"SIGNED_OUT"===n&&(this.realtime.setAuth(),"STORAGE"==e&&this.auth.signOut(),this.changedAccessToken=void 0):this.changedAccessToken=t}}function nt(n){return nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},nt(n)}function et(n,e,t){return(e=function(n){var e=function(n){if("object"!=nt(n)||!n)return n;var e=n[Symbol.toPrimitive];if(void 0!==e){var t=e.call(n,"string");if("object"!=nt(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(n);return"symbol"==nt(e)?e:e+""}(e))in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function tt(){var n,e,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return rt(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,A={p:0,n:0,v:n,a:f,f:f.bind(n,4),d:function(e,t){return i=e,s=0,l=n,A.n=t,a}};function f(t,r){for(s=t,l=r,e=0;!d&&c&&!o&&e<u.length;e++){var o,i=u[e],f=A.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=n):i[0]<=f&&((o=t<2&&f<i[1])?(s=0,A.v=r,A.n=i[1]):f<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,A.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(e=s<2?n:l)||!d;){i||(s?s<3?(s>1&&(A.n=-1),f(s,l)):A.n=l:A.v=l);try{if(c=2,i){if(s||(o="next"),e=i[o]){if(!(e=e.call(i,l)))throw TypeError("iterator result is not an object");if(!e.done)return e;l=e.value,s<2&&(s=0)}else 1===s&&(e=i.return)&&e.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=n}else if((e=(d=A.n<0)?l:t.call(r,A))!==a)break}catch(e){i=n,s=1,l=e}finally{c=1}}return{value:e,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}e=Object.getPrototypeOf;var u=[][r]?e(e([][r]())):(rt(e={},r,function(){return this}),e),d=c.prototype=s.prototype=Object.create(u);function A(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,c):(n.__proto__=c,rt(n,o,"GeneratorFunction")),n.prototype=Object.create(d),n}return l.prototype=c,rt(d,"constructor",c),rt(c,"constructor",l),l.displayName="GeneratorFunction",rt(c,o,"GeneratorFunction"),rt(d),rt(d,o,"Generator"),rt(d,r,function(){return this}),rt(d,"toString",function(){return"[object Generator]"}),(tt=function(){return{w:i,m:A}})()}function rt(n,e,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(n){o=0}rt=function(n,e,t,r){if(e)o?o(n,e,{value:t,enumerable:!r,configurable:!r,writable:!r}):n[e]=t;else{var i=function(e,t){rt(n,e,function(n){return this._invoke(e,t,n)})};i("next",0),i("throw",1),i("return",2)}},rt(n,e,t,r)}function ot(n,e,t,r,o,i,a){try{var s=n[i](a),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,o)}function it(n){return function(){var e=this,t=arguments;return new Promise(function(r,o){var i=n.apply(e,t);function a(n){ot(i,r,o,a,s,"next",n)}function s(n){ot(i,r,o,a,s,"throw",n)}a(void 0)})}}var at=((n,e,t)=>new Je("https://tpjnyiyvpyzzbzhajbjh.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRwam55aXl2cHl6emJ6aGFqYmpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NDA1NTQsImV4cCI6MjA2NzIxNjU1NH0.cflFdHytlTUA_H_AP7E3Kry9-S-xw45pIRoJQtfk4AE",t))(0,0,{auth:{storage:{getItem:function(n){return it(tt().m(function e(){var t;return tt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,chrome.storage.local.get(n);case 1:return t=e.v,e.a(2,t[n]||null)}},e)}))()},setItem:function(n,e){return it(tt().m(function t(){return tt().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.set(et({},n,e));case 1:return t.a(2)}},t)}))()},removeItem:function(n){return it(tt().m(function e(){return tt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,chrome.storage.local.remove(n);case 1:return e.a(2)}},e)}))()}},autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0}});function st(n){return st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},st(n)}function lt(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,r)}return t}function ct(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?lt(Object(t),!0).forEach(function(e){ut(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):lt(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}function ut(n,e,t){return(e=bt(e))in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function dt(){var n,e,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return At(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,A={p:0,n:0,v:n,a:f,f:f.bind(n,4),d:function(e,t){return i=e,s=0,l=n,A.n=t,a}};function f(t,r){for(s=t,l=r,e=0;!d&&c&&!o&&e<u.length;e++){var o,i=u[e],f=A.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=n):i[0]<=f&&((o=t<2&&f<i[1])?(s=0,A.v=r,A.n=i[1]):f<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,A.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(e=s<2?n:l)||!d;){i||(s?s<3?(s>1&&(A.n=-1),f(s,l)):A.n=l:A.v=l);try{if(c=2,i){if(s||(o="next"),e=i[o]){if(!(e=e.call(i,l)))throw TypeError("iterator result is not an object");if(!e.done)return e;l=e.value,s<2&&(s=0)}else 1===s&&(e=i.return)&&e.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=n}else if((e=(d=A.n<0)?l:t.call(r,A))!==a)break}catch(e){i=n,s=1,l=e}finally{c=1}}return{value:e,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}e=Object.getPrototypeOf;var u=[][r]?e(e([][r]())):(At(e={},r,function(){return this}),e),d=c.prototype=s.prototype=Object.create(u);function A(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,c):(n.__proto__=c,At(n,o,"GeneratorFunction")),n.prototype=Object.create(d),n}return l.prototype=c,At(d,"constructor",c),At(c,"constructor",l),l.displayName="GeneratorFunction",At(c,o,"GeneratorFunction"),At(d),At(d,o,"Generator"),At(d,r,function(){return this}),At(d,"toString",function(){return"[object Generator]"}),(dt=function(){return{w:i,m:A}})()}function At(n,e,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(n){o=0}At=function(n,e,t,r){if(e)o?o(n,e,{value:t,enumerable:!r,configurable:!r,writable:!r}):n[e]=t;else{var i=function(e,t){At(n,e,function(n){return this._invoke(e,t,n)})};i("next",0),i("throw",1),i("return",2)}},At(n,e,t,r)}function ft(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return pt(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?pt(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pt(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}function ht(n,e,t,r,o,i,a){try{var s=n[i](a),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,o)}function gt(n){return function(){var e=this,t=arguments;return new Promise(function(r,o){var i=n.apply(e,t);function a(n){ht(i,r,o,a,s,"next",n)}function s(n){ht(i,r,o,a,s,"throw",n)}a(void 0)})}}function mt(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,bt(r.key),r)}}function bt(n){var e=function(n){if("object"!=st(n)||!n)return n;var e=n[Symbol.toPrimitive];if(void 0!==e){var t=e.call(n,"string");if("object"!=st(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(n);return"symbol"==st(e)?e:e+""}var xt=new(function(){return n=function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n)},e=[{key:"getData",value:(k=gt(dt().m(function n(){var e,t,r,o,i,a,s,l,c,u,d=this;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(e=n.v,t=e.data,!e.error&&t.session){n.n=2;break}return n.a(2,this.getDefaultData());case 2:return r=t.session.user,console.log("Fetching data for user:",r.id),n.n=3,Promise.all([at.from("links").select("*").eq("user_id",r.id),at.from("collections").select("*").eq("user_id",r.id)]);case 3:return o=n.v,i=ft(o,2),a=i[0],s=i[1],a.error&&console.error("Error fetching links:",a.error),s.error&&console.error("Error fetching collections:",s.error),l=(a.data||[]).map(function(n){return console.log("Storage: getData highlights for link",n.id,n.highlights),{id:n.id,url:n.url,title:n.title,favicon:n.favicon,userNote:n.user_note||"",aiSummary:n.ai_summary,category:n.category,collectionId:n.collection_id,isInInbox:n.is_in_inbox||!1,highlights:d.parseHighlights(n.highlights),createdAt:new Date(n.created_at),updatedAt:new Date(n.updated_at),domain:n.domain}}),c=(s.data||[]).map(function(n){return{id:n.id,name:n.name,description:n.description,color:n.color,createdAt:new Date(n.created_at),updatedAt:new Date(n.updated_at)}}),u={links:l,collections:c,categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0}},console.log("Data fetched from Supabase:",u),n.a(2,u)}},n,this)})),function(){return k.apply(this,arguments)})},{key:"addLink",value:(E=gt(dt().m(function n(e){var t,r,o,i,a,s,l,c;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(r=n.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){n.n=2;break}return console.error("User not logged in"),n.a(2,{success:!1,error:"User not logged in."});case 2:return a={user_id:i.id,collection_id:e.collectionId||null,url:e.url,title:e.title,favicon:e.favicon,domain:e.domain,user_note:e.userNote,ai_summary:e.aiSummary,category:e.category,is_in_inbox:e.isInInbox||!1,highlights:e.highlights?JSON.stringify(e.highlights):null},console.log("Storage: addLink dbLink.highlights:",a.highlights),n.n=3,at.from("links").insert(a).select("id").single();case 3:if(s=n.v,l=s.data,!(c=s.error)){n.n=4;break}return console.error("Supabase addLink error:",c),n.a(2,{success:!1,error:c.message||"Database error occurred."});case 4:return n.a(2,{success:!0,linkId:l.id})}},n)})),function(n){return E.apply(this,arguments)})},{key:"updateLink",value:(B=gt(dt().m(function n(e,t){var r,o,i;return dt().w(function(n){for(;;)switch(n.n){case 0:return r=ct(ct({},t),{},{updated_at:new Date}),void 0!==t.highlights&&(r.highlights=t.highlights?JSON.stringify(t.highlights):null),delete r.collectionId,delete r.userNote,delete r.aiSummary,delete r.isInInbox,delete r.createdAt,delete r.updatedAt,void 0!==t.collectionId&&(r.collection_id=t.collectionId),void 0!==t.userNote&&(r.user_note=t.userNote),void 0!==t.aiSummary&&(r.ai_summary=t.aiSummary),void 0!==t.isInInbox&&(r.is_in_inbox=t.isInInbox),console.log("Storage: updateLink dbUpdates.highlights:",r.highlights),n.n=1,at.from("links").update(r).eq("id",e);case 1:if(o=n.v,!(i=o.error)){n.n=2;break}throw i;case 2:return n.a(2)}},n)})),function(n,e){return B.apply(this,arguments)})},{key:"deleteLink",value:(v=gt(dt().m(function n(e){var t,r;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.from("links").delete().eq("id",e);case 1:if(t=n.v,!(r=t.error)){n.n=2;break}throw r;case 2:return n.a(2)}},n)})),function(n){return v.apply(this,arguments)})},{key:"addCollection",value:(C=gt(dt().m(function n(e){var t,r,o,i,a,s,l;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(r=n.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){n.n=2;break}throw new Error("User not logged in.");case 2:return a={user_id:i.id,name:e.name,description:e.description,color:e.color},n.n=3,at.from("collections").insert(a);case 3:if(s=n.v,!(l=s.error)){n.n=4;break}throw l;case 4:return n.a(2)}},n)})),function(n){return C.apply(this,arguments)})},{key:"updateCollection",value:(y=gt(dt().m(function n(e,t){var r,o;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.from("collections").update(ct(ct({},t),{},{updatedAt:new Date})).eq("id",e);case 1:if(r=n.v,!(o=r.error)){n.n=2;break}throw o;case 2:return n.a(2)}},n)})),function(n,e){return y.apply(this,arguments)})},{key:"deleteCollection",value:(x=gt(dt().m(function n(e){var t,r;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.from("collections").delete().eq("id",e);case 1:if(t=n.v,!(r=t.error)){n.n=2;break}throw r;case 2:return n.a(2)}},n)})),function(n){return x.apply(this,arguments)})},{key:"searchLinks",value:(b=gt(dt().m(function n(e){var t,r,o,i,a,s,l,c,u=this;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(r=n.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){n.n=2;break}return console.error("User not logged in"),n.a(2,[]);case 2:if(e.trim()){n.n=3;break}return n.a(2,[]);case 3:return n.p=3,n.n=4,at.rpc("search_user_links",{search_query:e.trim(),user_uuid:i.id,result_limit:50});case 4:if(a=n.v,s=a.data,!(l=a.error)){n.n=5;break}return console.error("Search error:",l),n.a(2,[]);case 5:return n.a(2,(s||[]).map(function(n){return{id:n.id,url:n.url,title:n.title,favicon:n.favicon,userNote:n.user_note||"",aiSummary:n.ai_summary,category:n.category,collectionId:n.collection_id,isInInbox:n.is_in_inbox||!1,highlights:u.parseHighlights(n.highlights),createdAt:new Date(n.created_at),updatedAt:new Date(n.updated_at),domain:n.domain,searchRank:n.rank,searchHeadline:n.headline}}));case 6:return n.p=6,c=n.v,console.error("Search failed:",c),n.a(2,[])}},n,null,[[3,6]])})),function(n){return b.apply(this,arguments)})},{key:"getUserTags",value:(m=gt(dt().m(function n(){var e,t,r,o,i,a,s,l;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(t=n.v,r=t.data,o=null===(e=r.session)||void 0===e?void 0:e.user){n.n=2;break}return console.error("User not logged in"),n.a(2,[]);case 2:return n.p=2,n.n=3,at.rpc("get_user_tags_with_counts",{user_uuid:o.id});case 3:if(i=n.v,a=i.data,!(s=i.error)){n.n=4;break}return console.error("Error fetching user tags:",s),n.a(2,[]);case 4:return n.a(2,(a||[]).map(function(n){return{id:n.id,name:n.name,usageCount:n.usage_count||0}}));case 5:return n.p=5,l=n.v,console.error("Failed to get user tags:",l),n.a(2,[])}},n,null,[[2,5]])})),function(){return m.apply(this,arguments)})},{key:"getLinkTags",value:(g=gt(dt().m(function n(e){var t,r,o,i;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,at.rpc("get_link_tags",{link_uuid:e});case 1:if(t=n.v,r=t.data,!(o=t.error)){n.n=2;break}return console.error("Error fetching link tags:",o),n.a(2,[]);case 2:return n.a(2,r||[]);case 3:return n.p=3,i=n.v,console.error("Failed to get link tags:",i),n.a(2,[])}},n,null,[[0,3]])})),function(n){return g.apply(this,arguments)})},{key:"addTagsToLink",value:(h=gt(dt().m(function n(e,t){var r,o,i,a,s,l,c;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(o=n.v,i=o.data,a=null===(r=i.session)||void 0===r?void 0:r.user){n.n=2;break}return n.a(2,{success:!1,error:"User not logged in."});case 2:return n.p=2,n.n=3,at.rpc("add_tags_to_link",{link_uuid:e,tag_names:t,user_uuid:a.id});case 3:if(s=n.v,!(l=s.error)){n.n=4;break}return console.error("Error adding tags to link:",l),n.a(2,{success:!1,error:l.message||"Failed to add tags."});case 4:return n.a(2,{success:!0});case 5:return n.p=5,c=n.v,console.error("Failed to add tags to link:",c),n.a(2,{success:!1,error:c.message})}},n,null,[[2,5]])})),function(n,e){return h.apply(this,arguments)})},{key:"getLinksByTag",value:(p=gt(dt().m(function n(e){var t,r,o,i,a,s,l,c,u=this;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(r=n.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){n.n=2;break}return console.error("User not logged in"),n.a(2,[]);case 2:return n.p=2,n.n=3,at.rpc("get_links_by_tag",{user_uuid:i.id,tag_name:e});case 3:if(a=n.v,s=a.data,!(l=a.error)){n.n=4;break}return console.error("Error fetching links by tag:",l),n.a(2,[]);case 4:return n.a(2,(s||[]).map(function(n){return{id:n.id,url:n.url,title:n.title,favicon:n.favicon,userNote:n.user_note||"",aiSummary:n.ai_summary,category:n.category,collectionId:n.collection_id,isInInbox:n.is_in_inbox||!1,highlights:u.parseHighlights(n.highlights),createdAt:new Date(n.created_at),updatedAt:new Date(n.updated_at),domain:n.domain}}));case 5:return n.p=5,c=n.v,console.error("Failed to get links by tag:",c),n.a(2,[])}},n,null,[[2,5]])})),function(n){return p.apply(this,arguments)})},{key:"cleanupUnusedTags",value:(f=gt(dt().m(function n(){var e,t,r,o,i,a,s,l;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(t=n.v,r=t.data,o=null===(e=r.session)||void 0===e?void 0:e.user){n.n=2;break}return n.a(2,0);case 2:return n.p=2,n.n=3,at.rpc("cleanup_unused_tags",{user_uuid:o.id});case 3:if(i=n.v,a=i.data,!(s=i.error)){n.n=4;break}return console.error("Error cleaning up unused tags:",s),n.a(2,0);case 4:return n.a(2,a||0);case 5:return n.p=5,l=n.v,console.error("Failed to cleanup unused tags:",l),n.a(2,0)}},n,null,[[2,5]])})),function(){return f.apply(this,arguments)})},{key:"moveToInbox",value:(A=gt(dt().m(function n(e){var t,r;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.from("links").update({is_in_inbox:!0,collection_id:null,updated_at:(new Date).toISOString()}).eq("id",e);case 1:if(t=n.v,!(r=t.error)){n.n=2;break}throw r;case 2:return n.a(2)}},n)})),function(n){return A.apply(this,arguments)})},{key:"moveFromInbox",value:(d=gt(dt().m(function n(e,t){var r,o;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.from("links").update({is_in_inbox:!1,collection_id:t||null,updated_at:(new Date).toISOString()}).eq("id",e);case 1:if(r=n.v,!(o=r.error)){n.n=2;break}throw o;case 2:return n.a(2)}},n)})),function(n,e){return d.apply(this,arguments)})},{key:"getInboxLinks",value:(u=gt(dt().m(function n(){var e,t,r,o,i,a,s,l=this;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(t=n.v,r=t.data,o=null===(e=r.session)||void 0===e?void 0:e.user){n.n=2;break}return n.a(2,[]);case 2:return n.n=3,at.from("links").select("*").eq("user_id",o.id).eq("is_in_inbox",!0).order("created_at",{ascending:!1});case 3:if(i=n.v,a=i.data,!(s=i.error)){n.n=4;break}return console.error("Error fetching inbox links:",s),n.a(2,[]);case 4:return n.a(2,(a||[]).map(function(n){return{id:n.id,url:n.url,title:n.title,favicon:n.favicon,userNote:n.user_note||"",aiSummary:n.ai_summary,category:n.category,collectionId:n.collection_id,isInInbox:n.is_in_inbox||!1,highlights:l.parseHighlights(n.highlights),createdAt:new Date(n.created_at),updatedAt:new Date(n.updated_at),domain:n.domain}}))}},n)})),function(){return u.apply(this,arguments)})},{key:"bulkMoveFromInbox",value:(c=gt(dt().m(function n(e,t){var r,o;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.from("links").update({is_in_inbox:!1,collection_id:t||null,updated_at:(new Date).toISOString()}).in("id",e);case 1:if(r=n.v,!(o=r.error)){n.n=2;break}throw o;case 2:return n.a(2)}},n)})),function(n,e){return c.apply(this,arguments)})},{key:"toggleCollectionSharing",value:(l=gt(dt().m(function n(e,t){var r,o,i,a,s,l,c,u,d;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(o=n.v,i=o.data,a=null===(r=i.session)||void 0===r?void 0:r.user){n.n=2;break}return n.a(2,{success:!1,message:"User not logged in."});case 2:return n.p=2,n.n=3,at.rpc("toggle_collection_sharing",{collection_uuid:e,user_uuid:a.id,make_public:t});case 3:if(s=n.v,l=s.data,!(c=s.error)){n.n=4;break}return console.error("Error toggling collection sharing:",c),n.a(2,{success:!1,message:c.message||"Failed to update sharing settings."});case 4:return u=null==l?void 0:l[0],n.a(2,{success:(null==u?void 0:u.success)||!1,shareToken:null==u?void 0:u.share_token,message:(null==u?void 0:u.message)||"Sharing settings updated."});case 5:return n.p=5,d=n.v,console.error("Failed to toggle collection sharing:",d),n.a(2,{success:!1,message:d.message})}},n,null,[[2,5]])})),function(n,e){return l.apply(this,arguments)})},{key:"getCollectionSharingInfo",value:(s=gt(dt().m(function n(e){var t,r,o,i,a,s,l,c;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(r=n.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){n.n=2;break}return n.a(2,null);case 2:return n.p=2,n.n=3,at.from("collections").select("is_public, share_token, view_count").eq("id",e).eq("user_id",i.id).single();case 3:if(a=n.v,s=a.data,!(l=a.error)){n.n=4;break}return console.error("Error fetching collection sharing info:",l),n.a(2,null);case 4:return n.a(2,{isPublic:s.is_public||!1,shareToken:s.share_token,viewCount:s.view_count||0});case 5:return n.p=5,c=n.v,console.error("Failed to get collection sharing info:",c),n.a(2,null)}},n,null,[[2,5]])})),function(n){return s.apply(this,arguments)})},{key:"getDefaultCategories",value:function(){return[{id:"general",name:"General",color:"#6b7280",isDefault:!0},{id:"work",name:"Work",color:"#3b82f6"},{id:"personal",name:"Personal",color:"#10b981"},{id:"learning",name:"Learning",color:"#f59e0b"}]}},{key:"getDefaultData",value:function(){return{links:[],collections:[],categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0}}}},{key:"getLinkByUrl",value:(a=gt(dt().m(function n(e){var t,r,o,i,a,s,l;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.getSession();case 1:if(r=n.v,o=r.data,i=null===(t=o.session)||void 0===t?void 0:t.user){n.n=2;break}return n.a(2,null);case 2:return n.n=3,at.from("links").select("*").eq("user_id",i.id).eq("url",e).single();case 3:if(a=n.v,s=a.data,!(l=a.error)){n.n=5;break}if("PGRST116"!==l.code){n.n=4;break}return n.a(2,null);case 4:throw l;case 5:return n.a(2,{id:s.id,url:s.url,title:s.title,favicon:s.favicon,userNote:s.user_note||"",aiSummary:s.ai_summary,category:s.category,collectionId:s.collection_id,isInInbox:s.is_in_inbox||!1,highlights:this.parseHighlights(s.highlights),createdAt:new Date(s.created_at),updatedAt:new Date(s.updated_at),domain:s.domain})}},n,this)})),function(n){return a.apply(this,arguments)})},{key:"parseHighlights",value:function(n){if(!n)return console.log("Storage: No highlights data found"),[];if("string"==typeof n)try{var e=JSON.parse(n),t=Array.isArray(e)?e:[];return console.log("Storage: Parsed highlights from JSON:",t.length,"highlights",t),t}catch(n){return console.warn("Failed to parse highlights JSON:",n),[]}return Array.isArray(n)?(console.log("Storage: Found highlights array:",n.length,"highlights",n),n):(console.log("Storage: Highlights data in unexpected format:",st(n),n),[])}}],t=[{key:"getPublicCollection",value:(i=gt(dt().m(function n(e){var t,r,o,i,a;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,at.rpc("get_public_collection",{token:e});case 1:if(t=n.v,r=t.data,!(o=t.error)){n.n=2;break}return console.error("Error fetching public collection:",o),n.a(2,null);case 2:if(i=null==r?void 0:r[0]){n.n=3;break}return n.a(2,null);case 3:return n.a(2,{id:i.id,name:i.name,description:i.description,viewCount:i.view_count||0,createdAt:new Date(i.created_at),ownerEmail:i.owner_email});case 4:return n.p=4,a=n.v,console.error("Failed to get public collection:",a),n.a(2,null)}},n,null,[[0,4]])})),function(n){return i.apply(this,arguments)})},{key:"getPublicCollectionLinks",value:(o=gt(dt().m(function n(e){var t,r,o,i;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,at.rpc("get_public_collection_links",{token:e});case 1:if(t=n.v,r=t.data,!(o=t.error)){n.n=2;break}return console.error("Error fetching public collection links:",o),n.a(2,[]);case 2:return n.a(2,(r||[]).map(function(n){return{id:n.id,url:n.url,title:n.title,favicon:n.favicon,domain:n.domain,userNote:n.user_note,aiSummary:n.ai_summary,category:n.category,createdAt:new Date(n.created_at),tags:n.tag_names||[]}}));case 3:return n.p=3,i=n.v,console.error("Failed to get public collection links:",i),n.a(2,[])}},n,null,[[0,3]])})),function(n){return o.apply(this,arguments)})},{key:"incrementViewCount",value:(r=gt(dt().m(function n(e){var t,r,o;return dt().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,at.rpc("increment_collection_views",{token:e});case 1:t=n.v,(r=t.error)&&console.error("Error incrementing view count:",r),n.n=3;break;case 2:n.p=2,o=n.v,console.error("Failed to increment view count:",o);case 3:return n.a(2)}},n,null,[[0,2]])})),function(n){return r.apply(this,arguments)})}],e&&mt(n.prototype,e),t&&mt(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,e,t,r,o,i,a,s,l,c,u,d,A,f,p,h,g,m,b,x,y,C,v,B,E,k}());const yt=a("ExternalLink",[["path",{d:"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",key:"a6xqqp"}],["polyline",{points:"15 3 21 3 21 9",key:"mznyad"}],["line",{x1:"10",x2:"21",y1:"14",y2:"3",key:"18c3s4"}]]),Ct=a("MoreHorizontal",[["circle",{cx:"12",cy:"12",r:"1",key:"41hilf"}],["circle",{cx:"19",cy:"12",r:"1",key:"1wjl8i"}],["circle",{cx:"5",cy:"12",r:"1",key:"1pcz8c"}]]),vt=a("PenLine",[["path",{d:"M12 20h9",key:"t2du7b"}],["path",{d:"M16.5 3.5a2.12 2.12 0 0 1 3 3L7 19l-4 1 1-4Z",key:"ymcmye"}]]),Bt=a("Trash2",[["path",{d:"M3 6h18",key:"d0wm0j"}],["path",{d:"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",key:"4alrt4"}],["path",{d:"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",key:"v07s0e"}],["line",{x1:"10",x2:"10",y1:"11",y2:"17",key:"1uufr5"}],["line",{x1:"14",x2:"14",y1:"11",y2:"17",key:"xtxkd"}]]);var Et=t(848);function kt(n){return function(n){if(Array.isArray(n))return St(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||jt(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wt(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||jt(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jt(n,e){if(n){if("string"==typeof n)return St(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?St(n,e):void 0}}function St(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const _t=function(n){var e=n.selectedTags,t=n.availableTags,o=n.onTagsChange,i=n.placeholder,a=void 0===i?"Add tags...":i,s=n.maxTags,l=void 0===s?10:s,u=wt((0,r.useState)(""),2),d=u[0],f=u[1],p=wt((0,r.useState)(!1),2),h=p[0],g=p[1],m=wt((0,r.useState)(-1),2),b=m[0],x=m[1],y=(0,r.useRef)(null),C=t.filter(function(n){return n.name.toLowerCase().includes(d.toLowerCase())&&!e.find(function(e){return e.name===n.name})}).slice(0,8),v=function(n){var t;e.length>=l||e.find(function(e){return e.name===n.name})||(o([].concat(kt(e),[n])),f(""),g(!1),x(-1),null===(t=y.current)||void 0===t||t.focus())},B=function(n){var t;o(e.filter(function(e){return e.name!==n.name})),null===(t=y.current)||void 0===t||t.focus()},E=function(n){for(var e=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4","#84cc16","#f97316","#ec4899","#6366f1"],t=0,r=0;r<n.length;r++)t=n.charCodeAt(r)+((t<<5)-t);return e[Math.abs(t)%e.length]};return(0,Et.jsxs)("div",{className:"tag-input-container",children:[(0,Et.jsxs)("div",{className:"tag-input-wrapper",children:[e.map(function(n){return(0,Et.jsxs)("div",{className:"tag-chip",style:{backgroundColor:E(n.name)},children:[(0,Et.jsx)("span",{className:"tag-name",children:n.name}),(0,Et.jsx)("button",{onClick:function(){return B(n)},className:"tag-remove",type:"button",title:"Remove ".concat(n.name," tag"),"aria-label":"Remove ".concat(n.name," tag"),children:(0,Et.jsx)(A,{size:12})})]},n.name)}),(0,Et.jsx)("input",{ref:y,type:"text",value:d,onChange:function(n){var e=n.target.value;f(e),g(e.length>0),x(-1)},onKeyDown:function(n){"Enter"===n.key?(n.preventDefault(),b>=0&&C[b]?v(C[b]):d.trim()&&function(n){var t;if(!(e.length>=l||e.find(function(e){return e.name.toLowerCase()===n.toLowerCase()}))){var r={id:"",name:n.toLowerCase()};o([].concat(kt(e),[r])),f(""),g(!1),x(-1),null===(t=y.current)||void 0===t||t.focus()}}(d.trim())):"ArrowDown"===n.key?(n.preventDefault(),x(function(n){return n<C.length-1?n+1:n})):"ArrowUp"===n.key?(n.preventDefault(),x(function(n){return n>0?n-1:-1})):"Escape"===n.key?(g(!1),x(-1)):"Backspace"===n.key&&!d&&e.length>0&&B(e[e.length-1])},onFocus:function(){return g(d.length>0)},onBlur:function(){return setTimeout(function(){return g(!1)},150)},placeholder:0===e.length?a:"",className:"tag-input",disabled:e.length>=l}),e.length<l&&(0,Et.jsx)("div",{className:"tag-input-icon",children:(0,Et.jsx)(c,{size:14})})]}),h&&C.length>0&&(0,Et.jsx)("div",{className:"tag-suggestions",children:C.map(function(n,e){return(0,Et.jsxs)("button",{onClick:function(){return function(n){v(n)}(n)},className:"tag-suggestion ".concat(e===b?"focused":""),type:"button",children:[(0,Et.jsx)("span",{className:"tag-suggestion-color",style:{backgroundColor:E(n.name)}}),(0,Et.jsx)("span",{className:"tag-suggestion-name",children:n.name}),n.usageCount&&n.usageCount>0&&(0,Et.jsxs)("span",{className:"tag-suggestion-count",children:["(",n.usageCount,")"]})]},n.id)})})]})};function Nt(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return It(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?It(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function It(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const zt=function(n){var e=n.highlight,t=n.onAddNote,o=n.onDelete,i=Nt((0,r.useState)(!1),2),a=i[0],s=i[1],l=Nt((0,r.useState)(e.userNote||""),2),c=l[0],u=l[1];return(0,Et.jsxs)("div",{className:"highlight-card",children:[(0,Et.jsxs)("div",{className:"highlight-content",children:[(0,Et.jsxs)("div",{className:"highlight-text",children:[(0,Et.jsx)("div",{className:"highlight-icon",children:(0,Et.jsx)("svg",{width:"16",height:"16",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,Et.jsx)("path",{d:"M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z",fill:"currentColor"})})}),(0,Et.jsxs)("p",{className:"highlight-selected-text",children:['"',e.selectedText,'"']})]}),e.context&&e.context!==e.selectedText&&(0,Et.jsx)("div",{className:"highlight-context",children:(0,Et.jsxs)("p",{children:["Context: ",e.context]})}),e.userNote&&!a&&(0,Et.jsx)("div",{className:"highlight-note",children:(0,Et.jsx)("p",{children:e.userNote})}),a&&(0,Et.jsxs)("div",{className:"highlight-note-form",children:[(0,Et.jsx)("textarea",{value:c,onChange:function(n){return u(n.target.value)},placeholder:"Add your thoughts about this highlight...",autoFocus:!0}),(0,Et.jsxs)("div",{className:"highlight-note-actions",children:[(0,Et.jsx)("button",{onClick:function(){t&&t(e.id,c),s(!1)},className:"save-button",children:"Save"}),(0,Et.jsx)("button",{onClick:function(){u(e.userNote||""),s(!1)},className:"cancel-button",children:"Cancel"})]})]})]}),(0,Et.jsxs)("div",{className:"highlight-actions",children:[(0,Et.jsx)("span",{className:"highlight-date",children:new Date(e.createdAt).toLocaleDateString()}),(0,Et.jsxs)("div",{className:"highlight-buttons",children:[!a&&(0,Et.jsx)("button",{onClick:function(){return s(!0)},className:"highlight-action-button",title:e.userNote?"Edit note":"Add note",children:(0,Et.jsxs)("svg",{width:"14",height:"14",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,Et.jsx)("path",{d:"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}),(0,Et.jsx)("path",{d:"m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})]})}),o&&(0,Et.jsx)("button",{onClick:function(){return o(e.id)},className:"highlight-action-button delete-button",title:"Delete highlight",children:(0,Et.jsxs)("svg",{width:"14",height:"14",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,Et.jsx)("path",{d:"m18 6-12 12",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}),(0,Et.jsx)("path",{d:"m6 6 12 12",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})]})})]})]})]})};function Tt(n){return Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Tt(n)}function Ot(){var n,e,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Pt(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,A={p:0,n:0,v:n,a:f,f:f.bind(n,4),d:function(e,t){return i=e,s=0,l=n,A.n=t,a}};function f(t,r){for(s=t,l=r,e=0;!d&&c&&!o&&e<u.length;e++){var o,i=u[e],f=A.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=n):i[0]<=f&&((o=t<2&&f<i[1])?(s=0,A.v=r,A.n=i[1]):f<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,A.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(e=s<2?n:l)||!d;){i||(s?s<3?(s>1&&(A.n=-1),f(s,l)):A.n=l:A.v=l);try{if(c=2,i){if(s||(o="next"),e=i[o]){if(!(e=e.call(i,l)))throw TypeError("iterator result is not an object");if(!e.done)return e;l=e.value,s<2&&(s=0)}else 1===s&&(e=i.return)&&e.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=n}else if((e=(d=A.n<0)?l:t.call(r,A))!==a)break}catch(e){i=n,s=1,l=e}finally{c=1}}return{value:e,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}e=Object.getPrototypeOf;var u=[][r]?e(e([][r]())):(Pt(e={},r,function(){return this}),e),d=c.prototype=s.prototype=Object.create(u);function A(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,c):(n.__proto__=c,Pt(n,o,"GeneratorFunction")),n.prototype=Object.create(d),n}return l.prototype=c,Pt(d,"constructor",c),Pt(c,"constructor",l),l.displayName="GeneratorFunction",Pt(c,o,"GeneratorFunction"),Pt(d),Pt(d,o,"Generator"),Pt(d,r,function(){return this}),Pt(d,"toString",function(){return"[object Generator]"}),(Ot=function(){return{w:i,m:A}})()}function Pt(n,e,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(n){o=0}Pt=function(n,e,t,r){if(e)o?o(n,e,{value:t,enumerable:!r,configurable:!r,writable:!r}):n[e]=t;else{var i=function(e,t){Pt(n,e,function(n){return this._invoke(e,t,n)})};i("next",0),i("throw",1),i("return",2)}},Pt(n,e,t,r)}function Lt(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,r)}return t}function Rt(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?Lt(Object(t),!0).forEach(function(e){Mt(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):Lt(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}function Mt(n,e,t){return(e=function(n){var e=function(n){if("object"!=Tt(n)||!n)return n;var e=n[Symbol.toPrimitive];if(void 0!==e){var t=e.call(n,"string");if("object"!=Tt(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(n);return"symbol"==Tt(e)?e:e+""}(e))in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function Dt(n,e,t,r,o,i,a){try{var s=n[i](a),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,o)}function Ut(n){return function(){var e=this,t=arguments;return new Promise(function(r,o){var i=n.apply(e,t);function a(n){Dt(i,r,o,a,s,"next",n)}function s(n){Dt(i,r,o,a,s,"throw",n)}a(void 0)})}}function Kt(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return $t(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?$t(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $t(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const Ft=function(n){var e=n.link,t=n.collections,o=n.onUpdate,i=n.onDelete,a=n.onMoveToCollection,s=n.onAddNote,l=n.onTagsUpdated,c=Kt((0,r.useState)(!1),2),u=c[0],d=c[1],A=Kt((0,r.useState)(!1),2),f=A[0],h=A[1],g=Kt((0,r.useState)(!1),2),m=g[0],b=g[1],x=Kt((0,r.useState)(!1),2),C=x[0],v=x[1],B=Kt((0,r.useState)([]),2),E=B[0],k=B[1],w=Kt((0,r.useState)([]),2),j=w[0],S=w[1],_=Kt((0,r.useState)(!1),2),N=_[0],I=_[1];(0,r.useEffect)(function(){m?P():O()},[m,e.id]);var z,T,O=function(){var n=Ut(Ot().m(function n(){var t,r;return Ot().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.getLinkTags(e.id);case 1:t=n.v,k(t.map(function(n){return Rt(Rt({},n),{},{usageCount:0})})),n.n=3;break;case 2:n.p=2,r=n.v,console.error("Failed to load link tags:",r);case 3:return n.a(2)}},n,null,[[0,2]])}));return function(){return n.apply(this,arguments)}}(),P=function(){var n=Ut(Ot().m(function n(){var t,r,o,i,a;return Ot().w(function(n){for(;;)switch(n.n){case 0:return I(!0),n.p=1,n.n=2,Promise.all([xt.getLinkTags(e.id),xt.getUserTags()]);case 2:t=n.v,r=Kt(t,2),o=r[0],i=r[1],k(o.map(function(n){return Rt(Rt({},n),{},{usageCount:0})})),S(i),n.n=4;break;case 3:n.p=3,a=n.v,console.error("Failed to load tags:",a);case 4:return n.p=4,I(!1),n.f(4);case 5:return n.a(2)}},n,null,[[1,3,4,5]])}));return function(){return n.apply(this,arguments)}}(),L=function(){var n=Ut(Ot().m(function n(t){var r,o,i,a;return Ot().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,r=t.map(function(n){return n.name}),n.n=1,xt.addTagsToLink(e.id,r);case 1:if(!(o=n.v).success){n.n=3;break}return k(t),n.n=2,xt.getUserTags();case 2:i=n.v,S(i),l&&l(),n.n=4;break;case 3:console.error("Failed to update tags:",o.error);case 4:n.n=6;break;case 5:n.p=5,a=n.v,console.error("Failed to update link tags:",a);case 6:return n.a(2)}},n,null,[[0,5]])}));return function(e){return n.apply(this,arguments)}}(),R=function(){chrome.tabs.create({url:e.url})},M=function(n){for(var e=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4","#84cc16","#f97316","#ec4899","#6366f1"],t=0,r=0;r<n.length;r++)t=n.charCodeAt(r)+((t<<5)-t);return e[Math.abs(t)%e.length]},D=function(){var n=Ut(Ot().m(function n(t,r){var i,a;return Ot().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,i=(e.highlights||[]).map(function(n){return n.id===t?Rt(Rt({},n),{},{userNote:r,updatedAt:new Date}):n}),n.n=1,xt.updateLink(e.id,{highlights:i});case 1:o(e.id,{highlights:i}),n.n=3;break;case 2:n.p=2,a=n.v,console.error("Failed to update highlight note:",a);case 3:return n.a(2)}},n,null,[[0,2]])}));return function(e,t){return n.apply(this,arguments)}}(),U=function(){var n=Ut(Ot().m(function n(t){var r,i;return Ot().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,r=(e.highlights||[]).filter(function(n){return n.id!==t}),n.n=1,xt.updateLink(e.id,{highlights:r});case 1:o(e.id,{highlights:r}),n.n=3;break;case 2:n.p=2,i=n.v,console.error("Failed to delete highlight:",i);case 3:return n.a(2)}},n,null,[[0,2]])}));return function(e){return n.apply(this,arguments)}}();return(0,Et.jsxs)("div",{className:"link-card",children:[(0,Et.jsxs)("div",{className:"link-header",children:[(0,Et.jsx)("div",{className:"link-favicon",children:e.favicon?(0,Et.jsx)("img",{src:e.favicon,alt:"",width:"16",height:"16"}):(0,Et.jsx)("div",{className:"favicon-placeholder",style:{backgroundColor:function(n){for(var e=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4"],t=0,r=0;r<n.length;r++)t=n.charCodeAt(r)+((t<<5)-t);return e[Math.abs(t)%e.length]}(e.domain)},children:e.domain.charAt(0).toUpperCase()})}),(0,Et.jsxs)("div",{className:"link-info",children:[(0,Et.jsx)("h3",{className:"link-title",onClick:R,title:e.title,children:e.title}),(0,Et.jsxs)("div",{className:"link-meta",children:[(0,Et.jsx)("span",{className:"link-domain",children:e.domain}),(0,Et.jsx)("span",{className:"link-date",children:(T=e.createdAt,new Date(T).toLocaleDateString("en-US",{month:"short",day:"numeric"}))})]})]}),(0,Et.jsxs)("div",{className:"link-actions",children:[(0,Et.jsx)("button",{onClick:R,className:"action-button",title:"Open link",children:(0,Et.jsx)(yt,{size:14})}),(0,Et.jsxs)("div",{className:"dropdown",children:[(0,Et.jsx)("button",{onClick:function(){return d(!u)},className:"action-button",title:"More options",children:(0,Et.jsx)(Ct,{size:14})}),u&&(0,Et.jsxs)("div",{className:"dropdown-menu",children:[(0,Et.jsxs)("button",{onClick:function(){s(e),d(!1)},children:[(0,Et.jsx)(vt,{size:14}),"Edit note"]}),(0,Et.jsxs)("button",{onClick:function(){b(!m),d(!1)},children:[(0,Et.jsx)(p,{size:14}),"Edit tags"]}),e.highlights&&e.highlights.length>0&&(0,Et.jsxs)("button",{onClick:function(){v(!C),d(!1)},children:[(0,Et.jsx)("svg",{width:"14",height:"14",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,Et.jsx)("path",{d:"M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z",stroke:"currentColor",strokeWidth:"2",strokeLinejoin:"round"})}),C?"Hide":"Show"," highlights (",e.highlights.length,")"]}),(0,Et.jsxs)("button",{onClick:function(){h(!f)},children:[(0,Et.jsx)(y,{size:14}),"Move to collection"]}),(0,Et.jsxs)("button",{onClick:function(){i(e.id),d(!1)},className:"delete-action",children:[(0,Et.jsx)(Bt,{size:14}),"Delete"]})]})]})]})]}),f&&(0,Et.jsxs)("div",{className:"collections-menu",children:[(0,Et.jsx)("div",{className:"collections-header",children:"Move to:"}),t.map(function(n){return(0,Et.jsx)("button",{onClick:function(){a(e.id,n.id),h(!1),d(!1)},className:"collection-option",children:n.name},n.id)}),(0,Et.jsx)("button",{onClick:function(){a(e.id,""),h(!1),d(!1)},className:"collection-option",children:"Remove from collection"})]}),m&&(0,Et.jsxs)("div",{className:"tag-editor",children:[(0,Et.jsxs)("div",{className:"tag-editor-header",children:[(0,Et.jsx)("span",{children:"Edit Tags"}),(0,Et.jsx)("button",{onClick:function(){return b(!1)},className:"tag-editor-close",title:"Close tag editor",children:"×"})]}),N?(0,Et.jsx)("div",{className:"tag-editor-loading",children:"Loading tags..."}):(0,Et.jsx)(_t,{selectedTags:E,availableTags:j,onTagsChange:L,placeholder:"Add tags to organize this link...",maxTags:8})]}),!m&&E.length>0&&(0,Et.jsx)("div",{className:"link-tags",children:E.map(function(n){return(0,Et.jsx)("span",{className:"link-tag",style:{backgroundColor:M(n.name)},title:"Filter by ".concat(n.name),children:n.name},n.id||n.name)})}),e.userNote&&(0,Et.jsxs)("div",{className:"link-note",children:[(0,Et.jsx)("strong",{children:"Note:"})," ",e.userNote]}),e.aiSummary&&(0,Et.jsxs)("div",{className:"link-summary",children:[(0,Et.jsx)("strong",{children:"Summary:"})," ",e.aiSummary]}),(0,Et.jsx)("div",{className:"link-category",children:(0,Et.jsx)("span",{className:"category-badge",style:{backgroundColor:(z=e.category,{general:"#6b7280",work:"#3b82f6",personal:"#10b981",learning:"#f59e0b"}[z]||"#6b7280")},children:e.category})}),e.highlights&&e.highlights.length>0&&(0,Et.jsxs)("div",{className:"link-highlights-section",children:[console.log("LinkCard: Rendering highlights section for link:",e.id,"with",e.highlights.length,"highlights"),(0,Et.jsx)("div",{className:"highlights-header",children:(0,Et.jsxs)("button",{onClick:function(){return v(!C)},className:"highlights-toggle",children:[(0,Et.jsx)("svg",{width:"16",height:"16",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,Et.jsx)("path",{d:"M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z",fill:"currentColor"})}),(0,Et.jsxs)("span",{children:[e.highlights.length," highlight",1!==e.highlights.length?"s":""]}),(0,Et.jsx)("svg",{width:"12",height:"12",viewBox:"0 0 24 24",className:"highlights-chevron ".concat(C?"expanded":""),fill:"none",xmlns:"http://www.w3.org/2000/svg",children:(0,Et.jsx)("path",{d:"m6 9 6 6 6-6",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})})]})}),C&&(0,Et.jsx)("div",{className:"highlights-list",children:e.highlights.map(function(n){return(0,Et.jsx)(zt,{highlight:n,onAddNote:D,onDelete:U},n.id)})})]})]})},qt=a("Folder",[["path",{d:"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",key:"1kt360"}]]),Yt=a("Globe",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20",key:"13o1zl"}],["path",{d:"M2 12h20",key:"9i4pu4"}]]),Wt=a("Share2",[["circle",{cx:"18",cy:"5",r:"3",key:"gq8acd"}],["circle",{cx:"6",cy:"12",r:"3",key:"w7nqdw"}],["circle",{cx:"18",cy:"19",r:"3",key:"1xt0gg"}],["line",{x1:"8.59",x2:"15.42",y1:"13.51",y2:"17.49",key:"47mynk"}],["line",{x1:"15.41",x2:"8.59",y1:"6.51",y2:"10.49",key:"1n3mei"}]]),Gt=a("Lock",[["rect",{width:"18",height:"11",x:"3",y:"11",rx:"2",ry:"2",key:"1w4ew1"}],["path",{d:"M7 11V7a5 5 0 0 1 10 0v4",key:"fwvmzm"}]]),Qt=a("Link2",[["path",{d:"M9 17H7A5 5 0 0 1 7 7h2",key:"8i5ue5"}],["path",{d:"M15 7h2a5 5 0 1 1 0 10h-2",key:"1b9ql8"}],["line",{x1:"8",x2:"16",y1:"12",y2:"12",key:"1jonct"}]]),Vt=a("Check",[["path",{d:"M20 6 9 17l-5-5",key:"1gmf2c"}]]),Ht=a("Copy",[["rect",{width:"14",height:"14",x:"8",y:"8",rx:"2",ry:"2",key:"17jyea"}],["path",{d:"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2",key:"zix9uf"}]]),Zt=a("Eye",[["path",{d:"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z",key:"rwhkz3"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]);function Xt(){var n,e,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Jt(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,A={p:0,n:0,v:n,a:f,f:f.bind(n,4),d:function(e,t){return i=e,s=0,l=n,A.n=t,a}};function f(t,r){for(s=t,l=r,e=0;!d&&c&&!o&&e<u.length;e++){var o,i=u[e],f=A.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=n):i[0]<=f&&((o=t<2&&f<i[1])?(s=0,A.v=r,A.n=i[1]):f<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,A.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(e=s<2?n:l)||!d;){i||(s?s<3?(s>1&&(A.n=-1),f(s,l)):A.n=l:A.v=l);try{if(c=2,i){if(s||(o="next"),e=i[o]){if(!(e=e.call(i,l)))throw TypeError("iterator result is not an object");if(!e.done)return e;l=e.value,s<2&&(s=0)}else 1===s&&(e=i.return)&&e.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=n}else if((e=(d=A.n<0)?l:t.call(r,A))!==a)break}catch(e){i=n,s=1,l=e}finally{c=1}}return{value:e,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}e=Object.getPrototypeOf;var u=[][r]?e(e([][r]())):(Jt(e={},r,function(){return this}),e),d=c.prototype=s.prototype=Object.create(u);function A(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,c):(n.__proto__=c,Jt(n,o,"GeneratorFunction")),n.prototype=Object.create(d),n}return l.prototype=c,Jt(d,"constructor",c),Jt(c,"constructor",l),l.displayName="GeneratorFunction",Jt(c,o,"GeneratorFunction"),Jt(d),Jt(d,o,"Generator"),Jt(d,r,function(){return this}),Jt(d,"toString",function(){return"[object Generator]"}),(Xt=function(){return{w:i,m:A}})()}function Jt(n,e,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(n){o=0}Jt=function(n,e,t,r){if(e)o?o(n,e,{value:t,enumerable:!r,configurable:!r,writable:!r}):n[e]=t;else{var i=function(e,t){Jt(n,e,function(n){return this._invoke(e,t,n)})};i("next",0),i("throw",1),i("return",2)}},Jt(n,e,t,r)}function nr(n,e,t,r,o,i,a){try{var s=n[i](a),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,o)}function er(n){return function(){var e=this,t=arguments;return new Promise(function(r,o){var i=n.apply(e,t);function a(n){nr(i,r,o,a,s,"next",n)}function s(n){nr(i,r,o,a,s,"throw",n)}a(void 0)})}}function tr(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return rr(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?rr(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rr(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const or=function(n){var e=n.collection,t=n.onClose,o=n.onUpdate,i=tr((0,r.useState)(!1),2),a=i[0],s=i[1],l=tr((0,r.useState)(""),2),c=l[0],u=l[1],d=tr((0,r.useState)(0),2),f=d[0],p=d[1],h=tr((0,r.useState)(!0),2),g=h[0],m=h[1],b=tr((0,r.useState)(!1),2),x=b[0],y=b[1],C=tr((0,r.useState)(""),2),v=C[0],B=C[1],E=tr((0,r.useState)(!1),2),k=E[0],w=E[1];(0,r.useEffect)(function(){S()},[e.id]);var j,S=function(){var n=er(Xt().m(function n(){var t,r;return Xt().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.getCollectionSharingInfo(e.id);case 1:(t=n.v)&&(s(t.isPublic),u(t.shareToken||""),p(t.viewCount)),n.n=3;break;case 2:n.p=2,r=n.v,console.error("Failed to load sharing info:",r);case 3:return n.p=3,m(!1),n.f(3);case 4:return n.a(2)}},n,null,[[0,2,3,4]])}));return function(){return n.apply(this,arguments)}}(),_=function(){var n=er(Xt().m(function n(){var t;return Xt().w(function(n){for(;;)switch(n.n){case 0:return y(!0),B(""),n.p=1,n.n=2,xt.toggleCollectionSharing(e.id,!a);case 2:(t=n.v).success?(s(!a),t.shareToken&&u(t.shareToken),B(t.message),o()):B(t.message),n.n=4;break;case 3:n.p=3,n.v,B("Failed to update sharing settings");case 4:return n.p=4,y(!1),n.f(4);case 5:return n.a(2)}},n,null,[[1,3,4,5]])}));return function(){return n.apply(this,arguments)}}(),N=function(){return c?"https://nest-shared.vercel.app/collection/".concat(c):""},I=function(){var n=er(Xt().m(function n(){var e,t;return Xt().w(function(n){for(;;)switch(n.n){case 0:if(e=N()){n.n=1;break}return n.a(2);case 1:return n.p=1,n.n=2,navigator.clipboard.writeText(e);case 2:w(!0),setTimeout(function(){return w(!1)},2e3),n.n=4;break;case 3:n.p=3,n.v,(t=document.createElement("textarea")).value=e,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),w(!0),setTimeout(function(){return w(!1)},2e3);case 4:return n.a(2)}},n,null,[[1,3]])}));return function(){return n.apply(this,arguments)}}();return g?(0,Et.jsx)("div",{className:"modal-overlay",children:(0,Et.jsxs)("div",{className:"modal share-modal",children:[(0,Et.jsxs)("div",{className:"modal-header",children:[(0,Et.jsx)("h2",{children:"Share Collection"}),(0,Et.jsx)("button",{onClick:t,className:"modal-close",title:"Close",children:(0,Et.jsx)(A,{size:20})})]}),(0,Et.jsx)("div",{className:"modal-content",children:(0,Et.jsx)("div",{className:"loading-spinner",children:"Loading sharing settings..."})})]})}):(0,Et.jsx)("div",{className:"modal-overlay",children:(0,Et.jsxs)("div",{className:"modal share-modal",children:[(0,Et.jsxs)("div",{className:"modal-header",children:[(0,Et.jsx)("h2",{children:"Share Collection"}),(0,Et.jsx)("button",{onClick:t,className:"modal-close",title:"Close",children:(0,Et.jsx)(A,{size:20})})]}),(0,Et.jsxs)("div",{className:"modal-content",children:[(0,Et.jsxs)("div",{className:"share-collection-info",children:[(0,Et.jsx)("h3",{className:"collection-name",children:e.name}),e.description&&(0,Et.jsx)("p",{className:"collection-description",children:e.description}),(0,Et.jsx)("div",{className:"collection-meta",children:(0,Et.jsxs)("span",{children:["Created ",(j=e.createdAt,new Date(j).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}))]})})]}),(0,Et.jsx)("div",{className:"share-toggle-section",children:(0,Et.jsxs)("div",{className:"share-toggle-header",children:[(0,Et.jsx)("div",{className:"share-status",children:a?(0,Et.jsxs)(Et.Fragment,{children:[(0,Et.jsx)(Yt,{size:20,className:"status-icon public"}),(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"status-title",children:"Public Collection"}),(0,Et.jsx)("div",{className:"status-subtitle",children:"Anyone with the link can view this collection"})]})]}):(0,Et.jsxs)(Et.Fragment,{children:[(0,Et.jsx)(Gt,{size:20,className:"status-icon private"}),(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"status-title",children:"Private Collection"}),(0,Et.jsx)("div",{className:"status-subtitle",children:"Only you can see this collection"})]})]})}),(0,Et.jsx)("button",{onClick:_,disabled:x,className:"toggle-button ".concat(a?"public":"private"),children:x?"Updating...":a?"Make Private":"Make Public"})]})}),a&&c&&(0,Et.jsxs)("div",{className:"share-link-section",children:[(0,Et.jsxs)("div",{className:"share-link-header",children:[(0,Et.jsx)(Qt,{size:16}),(0,Et.jsx)("span",{children:"Share Link"})]}),(0,Et.jsxs)("div",{className:"share-link-container",children:[(0,Et.jsx)("input",{type:"text",value:N(),readOnly:!0,className:"share-link-input",title:"Share link URL","aria-label":"Share link URL"}),(0,Et.jsxs)("div",{className:"share-link-actions",children:[(0,Et.jsx)("button",{onClick:I,className:"copy-button ".concat(k?"copied":""),title:"Copy link",children:k?(0,Et.jsx)(Vt,{size:16}):(0,Et.jsx)(Ht,{size:16})}),(0,Et.jsx)("button",{onClick:function(){var n=N();n&&chrome.tabs.create({url:n})},className:"open-button",title:"Open in new tab",children:(0,Et.jsx)(yt,{size:16})})]})]}),(0,Et.jsx)("div",{className:"share-analytics",children:(0,Et.jsxs)("div",{className:"analytics-item",children:[(0,Et.jsx)(Zt,{size:16}),(0,Et.jsxs)("span",{children:[f," ",1===f?"view":"views"]})]})})]}),v&&(0,Et.jsx)("div",{className:"share-message ".concat(v.includes("error")?"error":"success"),children:v}),(0,Et.jsxs)("div",{className:"share-info-box",children:[(0,Et.jsx)("h4",{children:"About Public Collections"}),(0,Et.jsxs)("ul",{children:[(0,Et.jsx)("li",{children:"Public collections can be viewed by anyone with the link"}),(0,Et.jsx)("li",{children:"Viewers don't need an account to see your collection"}),(0,Et.jsx)("li",{children:"Links, notes, summaries, and tags are included"}),(0,Et.jsx)("li",{children:"You can make collections private at any time"}),(0,Et.jsx)("li",{children:"View counts help you track sharing analytics"})]})]})]}),(0,Et.jsx)("div",{className:"modal-footer",children:(0,Et.jsx)("button",{onClick:t,className:"modal-button secondary",children:"Close"})})]})})};function ir(){var n,e,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return ar(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,A={p:0,n:0,v:n,a:f,f:f.bind(n,4),d:function(e,t){return i=e,s=0,l=n,A.n=t,a}};function f(t,r){for(s=t,l=r,e=0;!d&&c&&!o&&e<u.length;e++){var o,i=u[e],f=A.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=n):i[0]<=f&&((o=t<2&&f<i[1])?(s=0,A.v=r,A.n=i[1]):f<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,A.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(e=s<2?n:l)||!d;){i||(s?s<3?(s>1&&(A.n=-1),f(s,l)):A.n=l:A.v=l);try{if(c=2,i){if(s||(o="next"),e=i[o]){if(!(e=e.call(i,l)))throw TypeError("iterator result is not an object");if(!e.done)return e;l=e.value,s<2&&(s=0)}else 1===s&&(e=i.return)&&e.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=n}else if((e=(d=A.n<0)?l:t.call(r,A))!==a)break}catch(e){i=n,s=1,l=e}finally{c=1}}return{value:e,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}e=Object.getPrototypeOf;var u=[][r]?e(e([][r]())):(ar(e={},r,function(){return this}),e),d=c.prototype=s.prototype=Object.create(u);function A(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,c):(n.__proto__=c,ar(n,o,"GeneratorFunction")),n.prototype=Object.create(d),n}return l.prototype=c,ar(d,"constructor",c),ar(c,"constructor",l),l.displayName="GeneratorFunction",ar(c,o,"GeneratorFunction"),ar(d),ar(d,o,"Generator"),ar(d,r,function(){return this}),ar(d,"toString",function(){return"[object Generator]"}),(ir=function(){return{w:i,m:A}})()}function ar(n,e,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(n){o=0}ar=function(n,e,t,r){if(e)o?o(n,e,{value:t,enumerable:!r,configurable:!r,writable:!r}):n[e]=t;else{var i=function(e,t){ar(n,e,function(n){return this._invoke(e,t,n)})};i("next",0),i("throw",1),i("return",2)}},ar(n,e,t,r)}function sr(n,e,t,r,o,i,a){try{var s=n[i](a),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,o)}function lr(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return cr(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?cr(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cr(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const ur=function(n){var e=n.collection,t=n.links,o=n.onUpdateLink,i=n.onDeleteLink,a=n.onAddNote,s=n.onTagsUpdated,l=n.onUpdate,c=lr((0,r.useState)(!1),2),u=c[0],d=c[1],A=lr((0,r.useState)(!1),2),f=A[0],p=A[1],m=function(){var n,e=(n=ir().m(function n(e,t){return ir().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,o(e,{collectionId:t||void 0});case 1:return n.a(2)}},n)}),function(){var e=this,t=arguments;return new Promise(function(r,o){var i=n.apply(e,t);function a(n){sr(i,r,o,a,s,"next",n)}function s(n){sr(i,r,o,a,s,"throw",n)}a(void 0)})});return function(n,t){return e.apply(this,arguments)}}();return(0,Et.jsxs)(Et.Fragment,{children:[(0,Et.jsxs)("div",{className:"collection-card",children:[(0,Et.jsxs)("button",{onClick:function(){return d(!u)},className:"collection-header",children:[u?(0,Et.jsx)(h,{size:16}):(0,Et.jsx)(g,{size:16}),(0,Et.jsx)(qt,{size:16,className:"collection-icon"}),(0,Et.jsxs)("div",{className:"collection-info",children:[(0,Et.jsxs)("div",{className:"collection-name-row",children:[(0,Et.jsx)("span",{className:"collection-name",children:e.name}),e.isPublic&&(0,Et.jsx)("div",{className:"public-indicator",title:"This collection is public",children:(0,Et.jsx)(Yt,{size:12})})]}),e.description&&(0,Et.jsx)("span",{className:"collection-description",children:e.description})]}),(0,Et.jsxs)("div",{className:"collection-actions",children:[(0,Et.jsx)("span",{className:"collection-count",children:t.length}),(0,Et.jsx)("button",{onClick:function(n){n.stopPropagation(),p(!0)},className:"share-collection-button",title:"Share collection",children:(0,Et.jsx)(Wt,{size:14})})]})]}),u&&(0,Et.jsx)("div",{className:"collection-content",children:0===t.length?(0,Et.jsx)("div",{className:"empty-collection",children:(0,Et.jsx)("p",{children:"No links in this collection"})}):t.map(function(n){return(0,Et.jsx)(Ft,{link:n,collections:[],onUpdate:o,onDelete:i,onMoveToCollection:m,onAddNote:a,onTagsUpdated:s},n.id)})})]}),f&&(0,Et.jsx)(or,{collection:e,onClose:function(){p(!1)},onUpdate:function(){l&&l()}})]})},dr=function(n){var e,t=n.link,r=n.collections,o=n.onUpdate,i=n.onDelete,a=n.onMoveToCollection,s=n.onAddNote,l=n.onTagsUpdated;return(0,Et.jsxs)("div",{className:"search-result-card",children:[t.searchRank&&(0,Et.jsx)("div",{className:"search-rank-indicator",children:(e=t.searchRank,e?"".concat(Math.round(100*e),"% match"):"")}),t.searchHeadline&&(0,Et.jsx)("div",{className:"search-headline",dangerouslySetInnerHTML:{__html:t.searchHeadline}}),(0,Et.jsx)(Ft,{link:t,collections:r,onUpdate:o,onDelete:i,onMoveToCollection:a,onAddNote:s,onTagsUpdated:l})]})},Ar=a("MoreVertical",[["circle",{cx:"12",cy:"12",r:"1",key:"41hilf"}],["circle",{cx:"12",cy:"5",r:"1",key:"gxeob9"}],["circle",{cx:"12",cy:"19",r:"1",key:"lyex9k"}]]);function fr(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return pr(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?pr(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pr(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const hr=function(n){var e=n.link,t=n.collections,o=n.onMoveFromInbox,i=n.onDelete,a=(n.onUpdate,n.onAddNote),s=n.onTagsUpdated,l=n.isSelected,c=void 0!==l&&l,u=n.onSelect,d=fr((0,r.useState)(!1),2),f=d[0],h=d[1],g=fr((0,r.useState)(!1),2),m=g[0],b=g[1],C=fr((0,r.useState)(!1),2),v=C[0],B=C[1];return(0,Et.jsx)("div",{className:"inbox-card ".concat(c?"selected":""),onClick:function(n){!u||f||m||v||(n.preventDefault(),u(e.id))},"data-link-id":e.id,children:(0,Et.jsxs)("div",{className:"inbox-card-content",children:[(0,Et.jsxs)("div",{className:"inbox-card-header",children:[(0,Et.jsx)("div",{className:"inbox-card-checkbox",children:(0,Et.jsx)("input",{type:"checkbox",checked:c,onChange:function(){return null==u?void 0:u(e.id)},onClick:function(n){return n.stopPropagation()},"aria-label":"Select ".concat(e.title),title:"Select ".concat(e.title)})}),(0,Et.jsx)("img",{src:e.favicon||"https://www.google.com/s2/favicons?domain=".concat(e.domain,"&sz=16"),alt:"favicon",className:"inbox-card-favicon",onError:function(n){n.target.src="https://www.google.com/s2/favicons?domain=".concat(e.domain,"&sz=16")}}),(0,Et.jsxs)("div",{className:"inbox-card-title-section",children:[(0,Et.jsx)("h3",{className:"inbox-card-title",children:e.title}),(0,Et.jsx)("span",{className:"inbox-card-domain",children:e.domain})]}),(0,Et.jsxs)("div",{className:"inbox-card-actions",children:[(0,Et.jsx)("a",{href:e.url,target:"_blank",rel:"noopener noreferrer",className:"inbox-card-link",title:"Open link",onClick:function(n){return n.stopPropagation()},children:(0,Et.jsx)(yt,{size:14})}),(0,Et.jsxs)("div",{className:"inbox-card-menu-container",children:[(0,Et.jsx)("button",{onClick:function(n){n.stopPropagation(),h(!f)},className:"inbox-card-menu-button",title:"More options",children:(0,Et.jsx)(Ar,{size:14})}),f&&(0,Et.jsxs)("div",{className:"inbox-card-menu",children:[(0,Et.jsxs)("button",{onClick:function(n){n.stopPropagation(),b(!m)},className:"inbox-card-menu-item",children:[(0,Et.jsx)(y,{size:14}),"Move to Collection"]}),(0,Et.jsxs)("button",{onClick:function(n){n.stopPropagation(),o(e.id),h(!1)},className:"inbox-card-menu-item",children:[(0,Et.jsx)(x,{size:14}),"Move to Holding Area"]}),(0,Et.jsxs)("button",{onClick:function(n){n.stopPropagation(),a(e),h(!1)},className:"inbox-card-menu-item",children:[(0,Et.jsx)(vt,{size:14}),e.userNote?"Edit Note":"Add Note"]}),(0,Et.jsxs)("button",{onClick:function(n){n.stopPropagation(),B(!v),h(!1)},className:"inbox-card-menu-item",children:[(0,Et.jsx)(p,{size:14}),"Manage Tags"]}),(0,Et.jsxs)("button",{onClick:function(n){n.stopPropagation(),confirm("Are you sure you want to delete this link?")&&i(e.id),h(!1)},className:"inbox-card-menu-item delete",children:[(0,Et.jsx)(Bt,{size:14}),"Delete"]})]}),m&&(0,Et.jsxs)("div",{className:"inbox-card-submenu",children:[(0,Et.jsxs)("div",{className:"inbox-card-submenu-header",children:[(0,Et.jsx)("span",{children:"Move to Collection"}),(0,Et.jsx)("button",{onClick:function(n){n.stopPropagation(),b(!1)},className:"inbox-card-submenu-close",title:"Close menu","aria-label":"Close menu",children:(0,Et.jsx)(A,{size:12})})]}),0===t.length?(0,Et.jsx)("div",{className:"inbox-card-submenu-empty",children:"No collections available"}):t.map(function(n){return(0,Et.jsx)("button",{onClick:function(t){var r;t.stopPropagation(),r=n.id,o(e.id,r),b(!1),h(!1)},className:"inbox-card-submenu-item",children:n.name},n.id)})]})]})]})]}),e.aiSummary&&(0,Et.jsx)("div",{className:"inbox-card-summary",children:(0,Et.jsx)("p",{children:e.aiSummary})}),e.userNote&&(0,Et.jsx)("div",{className:"inbox-card-note",children:(0,Et.jsx)("p",{children:e.userNote})}),v&&(0,Et.jsx)("div",{className:"inbox-card-tags",children:(0,Et.jsx)(_t,{linkId:e.id,onTagsUpdated:function(){s(),B(!1)},onCancel:function(){return B(!1)}})})]})})},gr=a("ArrowRight",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"m12 5 7 7-7 7",key:"xquz4c"}]]);function mr(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return br(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?br(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function br(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const xr=function(n){var e=n.isOpen,t=n.onClose,o=n.links,i=n.collections,a=n.onOpenLink,l=n.onAddToCollection,u=n.onCreateCollection,A=n.onSaveCurrentPage,p=n.onAddNote,h=n.onOpenTabSync,g=mr((0,r.useState)(""),2),m=g[0],b=g[1],C=mr((0,r.useState)(0),2),v=C[0],B=C[1],E=mr((0,r.useState)([]),2),k=E[0],w=E[1],j=(0,r.useRef)(null),S=(0,r.useRef)(null),_=(0,r.useCallback)(function(n){var e=[];return e.push({id:"save-current",type:"action",title:"Save Current Page",subtitle:"Add the current browser tab to Nest",icon:(0,Et.jsx)(c,{size:16}),action:function(){A(),t()},keywords:["save","add","current","page","bookmark"]}),e.push({id:"create-collection",type:"action",title:"Create New Collection",subtitle:"Organize your links into collections",icon:(0,Et.jsx)(y,{size:16}),action:function(){u(),t()},keywords:["create","collection","folder","organize"]}),e.push({id:"tab-sync",type:"action",title:"Tab Sync Mode",subtitle:"View and save open browser tabs",icon:(0,Et.jsx)(s,{size:16}),action:function(){h(),t()},keywords:["tab","sync","browser","open","tabs","save"]}),i.forEach(function(n){var r;e.push({id:"collection-".concat(n.id),type:"collection",title:n.name,subtitle:"Collection • ".concat(o.filter(function(e){return e.collectionId===n.id}).length," links"),icon:(0,Et.jsx)(x,{size:16}),action:function(){t()},keywords:["collection",n.name.toLowerCase(),null===(r=n.description)||void 0===r?void 0:r.toLowerCase()],collection:n})}),(n.trim()?N(o,n):o.slice(0,10)).forEach(function(n){var r;e.push({id:"link-".concat(n.id),type:"link",title:n.title,subtitle:"".concat(n.domain," • ").concat(n.userNote?"Has note":"No note"),icon:(0,Et.jsx)(yt,{size:16}),action:function(){a(n.url),t()},keywords:[n.title.toLowerCase(),n.domain.toLowerCase(),n.userNote.toLowerCase(),(null===(r=n.aiSummary)||void 0===r?void 0:r.toLowerCase())||"",n.category.toLowerCase()],link:n})}),n.trim()?e.filter(function(e){var t,r;return e.title.toLowerCase().includes(n.toLowerCase())||(null===(t=e.subtitle)||void 0===t?void 0:t.toLowerCase().includes(n.toLowerCase()))||(null===(r=e.keywords)||void 0===r?void 0:r.some(function(e){return e.includes(n.toLowerCase())}))}):e.slice(0,12)},[o,i,a,l,u,A,p,h,t]),N=function(n,e){var t=e.toLowerCase();return n.map(function(n){var e,r=0,o=n.title.toLowerCase(),i=n.domain.toLowerCase(),a=n.userNote.toLowerCase(),s=(null===(e=n.aiSummary)||void 0===e?void 0:e.toLowerCase())||"";return o.includes(t)&&(r+=10),i.includes(t)&&(r+=5),a.includes(t)&&(r+=8),s.includes(t)&&(r+=6),{link:n,score:r+=I(o,t)}}).filter(function(n){return n.score>0}).sort(function(n,e){return e.score-n.score}).slice(0,8).map(function(n){return n.link})},I=function(n,e){for(var t=0,r=0,o=0;o<e.length;o++){var i=e[o],a=n.indexOf(i,r);if(-1===a)return 0;var s=a-r;t+=Math.max(0,10-s),r=a+1}return t};return(0,r.useEffect)(function(){var n=_(m);w(n),B(0)},[m,_]),(0,r.useEffect)(function(){var n=function(n){if(e)switch(n.key){case"ArrowDown":n.preventDefault(),B(function(n){return Math.min(n+1,k.length-1)});break;case"ArrowUp":n.preventDefault(),B(function(n){return Math.max(n-1,0)});break;case"Enter":n.preventDefault(),k[v]&&k[v].action();break;case"Escape":n.preventDefault(),t()}};return document.addEventListener("keydown",n),function(){return document.removeEventListener("keydown",n)}},[e,k,v,t]),(0,r.useEffect)(function(){e&&j.current&&(j.current.focus(),b(""),B(0))},[e]),(0,r.useEffect)(function(){if(S.current&&k.length>0){var n=S.current.children[v];n&&n.scrollIntoView({block:"nearest",behavior:"smooth"})}},[v,k]),e?(0,Et.jsx)("div",{className:"command-palette-overlay",onClick:t,children:(0,Et.jsxs)("div",{className:"command-palette",onClick:function(n){return n.stopPropagation()},children:[(0,Et.jsx)("div",{className:"command-palette-header",children:(0,Et.jsxs)("div",{className:"command-palette-search",children:[(0,Et.jsx)(d,{size:16,className:"command-palette-search-icon"}),(0,Et.jsx)("input",{ref:j,type:"text",placeholder:"Search links, collections, or commands...",value:m,onChange:function(n){return b(n.target.value)},className:"command-palette-input"}),(0,Et.jsxs)("div",{className:"command-palette-shortcut",children:[(0,Et.jsx)(f,{size:12}),(0,Et.jsx)("span",{children:"K"})]})]})}),(0,Et.jsx)("div",{className:"command-palette-content",ref:S,children:0===k.length?(0,Et.jsxs)("div",{className:"command-palette-empty",children:[(0,Et.jsx)(d,{size:24}),(0,Et.jsx)("p",{children:"No results found"}),(0,Et.jsx)("span",{children:"Try a different search term"})]}):k.map(function(n,e){return(0,Et.jsxs)("div",{className:"command-palette-item ".concat(e===v?"selected":""),onClick:function(){return n.action()},onMouseEnter:function(){return B(e)},children:[(0,Et.jsx)("div",{className:"command-palette-item-icon",children:n.icon}),(0,Et.jsxs)("div",{className:"command-palette-item-content",children:[(0,Et.jsx)("div",{className:"command-palette-item-title",children:n.title}),n.subtitle&&(0,Et.jsx)("div",{className:"command-palette-item-subtitle",children:n.subtitle})]}),(0,Et.jsx)("div",{className:"command-palette-item-action",children:(0,Et.jsx)(gr,{size:14})})]},n.id)})}),(0,Et.jsx)("div",{className:"command-palette-footer",children:(0,Et.jsxs)("div",{className:"command-palette-tips",children:[(0,Et.jsxs)("span",{children:[(0,Et.jsx)("kbd",{children:"↑"}),(0,Et.jsx)("kbd",{children:"↓"})," to navigate"]}),(0,Et.jsxs)("span",{children:[(0,Et.jsx)("kbd",{children:"↵"})," to select"]}),(0,Et.jsxs)("span",{children:[(0,Et.jsx)("kbd",{children:"esc"})," to close"]})]})})]})}):null},yr=a("RefreshCw",[["path",{d:"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",key:"v9h5vc"}],["path",{d:"M21 3v5h-5",key:"1q7to0"}],["path",{d:"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",key:"3uifl3"}],["path",{d:"M8 16H3v5",key:"1cv678"}]]),Cr=a("Square",[["rect",{width:"18",height:"18",x:"3",y:"3",rx:"2",key:"afitv7"}]]),vr=a("Monitor",[["rect",{width:"20",height:"14",x:"2",y:"3",rx:"2",key:"48i651"}],["line",{x1:"8",x2:"16",y1:"21",y2:"21",key:"1svkeh"}],["line",{x1:"12",x2:"12",y1:"17",y2:"21",key:"vw1qmm"}]]);function Br(){var n,e,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Er(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,A={p:0,n:0,v:n,a:f,f:f.bind(n,4),d:function(e,t){return i=e,s=0,l=n,A.n=t,a}};function f(t,r){for(s=t,l=r,e=0;!d&&c&&!o&&e<u.length;e++){var o,i=u[e],f=A.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=n):i[0]<=f&&((o=t<2&&f<i[1])?(s=0,A.v=r,A.n=i[1]):f<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,A.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(e=s<2?n:l)||!d;){i||(s?s<3?(s>1&&(A.n=-1),f(s,l)):A.n=l:A.v=l);try{if(c=2,i){if(s||(o="next"),e=i[o]){if(!(e=e.call(i,l)))throw TypeError("iterator result is not an object");if(!e.done)return e;l=e.value,s<2&&(s=0)}else 1===s&&(e=i.return)&&e.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=n}else if((e=(d=A.n<0)?l:t.call(r,A))!==a)break}catch(e){i=n,s=1,l=e}finally{c=1}}return{value:e,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}e=Object.getPrototypeOf;var u=[][r]?e(e([][r]())):(Er(e={},r,function(){return this}),e),d=c.prototype=s.prototype=Object.create(u);function A(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,c):(n.__proto__=c,Er(n,o,"GeneratorFunction")),n.prototype=Object.create(d),n}return l.prototype=c,Er(d,"constructor",c),Er(c,"constructor",l),l.displayName="GeneratorFunction",Er(c,o,"GeneratorFunction"),Er(d),Er(d,o,"Generator"),Er(d,r,function(){return this}),Er(d,"toString",function(){return"[object Generator]"}),(Br=function(){return{w:i,m:A}})()}function Er(n,e,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(n){o=0}Er=function(n,e,t,r){if(e)o?o(n,e,{value:t,enumerable:!r,configurable:!r,writable:!r}):n[e]=t;else{var i=function(e,t){Er(n,e,function(n){return this._invoke(e,t,n)})};i("next",0),i("throw",1),i("return",2)}},Er(n,e,t,r)}function kr(n,e,t,r,o,i,a){try{var s=n[i](a),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,o)}function wr(n){return function(){var e=this,t=arguments;return new Promise(function(r,o){var i=n.apply(e,t);function a(n){kr(i,r,o,a,s,"next",n)}function s(n){kr(i,r,o,a,s,"throw",n)}a(void 0)})}}function jr(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return Sr(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Sr(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sr(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const _r=function(n){var e=n.isOpen,t=n.onClose,o=n.collections,i=n.onSaveTabs,a=jr((0,r.useState)([]),2),s=a[0],c=a[1],u=jr((0,r.useState)(!1),2),d=u[0],f=u[1],p=jr((0,r.useState)(new Set),2),h=p[0],g=p[1],m=jr((0,r.useState)({}),2),y=m[0],C=m[1],v=jr((0,r.useState)(!1),2),B=v[0],E=v[1],k=jr((0,r.useState)(!1),2),w=k[0],j=k[1],S=jr((0,r.useState)(""),2),_=S[0],N=S[1];(0,r.useEffect)(function(){e&&z()},[e]),(0,r.useEffect)(function(){var n=s.reduce(function(n,e){return n[e.windowId]||(n[e.windowId]=[]),n[e.windowId].push(e),n},{});C(n)},[s]);var I,z=function(){var n=wr(Br().m(function n(){var e,t,r;return Br().w(function(n){for(;;)switch(n.n){case 0:return f(!0),n.p=1,n.n=2,chrome.tabs.query({});case 2:e=n.v,t=e.filter(function(n){return n.url&&!n.url.startsWith("chrome://")&&!n.url.startsWith("chrome-extension://")}).map(function(n){return{id:n.id,title:n.title||"Untitled",url:n.url,favicon:n.favIconUrl,windowId:n.windowId,index:n.index,active:n.active,domain:new URL(n.url).hostname,pinned:n.pinned}}),c(t),g(new Set),n.n=4;break;case 3:n.p=3,r=n.v,console.error("Failed to load tabs:",r);case 4:return n.p=4,f(!1),n.f(4);case 5:return n.a(2)}},n,null,[[1,3,4,5]])}));return function(){return n.apply(this,arguments)}}(),T=function(){return s.filter(function(n){return!(w&&!n.pinned||_&&!n.domain.toLowerCase().includes(_.toLowerCase()))})},O=function(){var n=wr(Br().m(function n(e,t){var r,o;return Br().w(function(n){for(;;)switch(n.n){case 0:if(0!==h.size){n.n=1;break}return n.a(2);case 1:return E(!0),n.p=2,r=s.filter(function(n){return h.has(n.id)}),n.n=3,i(r,e,t);case 3:g(new Set),n.n=5;break;case 4:n.p=4,o=n.v,console.error("Failed to save tabs:",o);case 5:return n.p=5,E(!1),n.f(5);case 6:return n.a(2)}},n,null,[[2,4,5,6]])}));return function(e,t){return n.apply(this,arguments)}}(),P=function(){var n=wr(Br().m(function n(e,t,r){var o;return Br().w(function(n){for(;;)switch(n.n){case 0:return E(!0),n.p=1,n.n=2,i([e],t,r);case 2:n.n=4;break;case 3:n.p=3,o=n.v,console.error("Failed to save tab:",o);case 4:return n.p=4,E(!1),n.f(4);case 5:return n.a(2)}},n,null,[[1,3,4,5]])}));return function(e,t,r){return n.apply(this,arguments)}}(),L=T(),R=(I={},s.forEach(function(n){I[n.domain]=(I[n.domain]||0)+1}),Object.entries(I).sort(function(n,e){var t=jr(n,2)[1];return jr(e,2)[1]-t}).slice(0,5));return e?(0,Et.jsx)("div",{className:"tab-sync-overlay",onClick:t,children:(0,Et.jsxs)("div",{className:"tab-sync-modal",onClick:function(n){return n.stopPropagation()},children:[(0,Et.jsxs)("div",{className:"tab-sync-header",children:[(0,Et.jsxs)("div",{className:"tab-sync-title",children:[(0,Et.jsx)(l,{size:20}),(0,Et.jsx)("h2",{children:"Tab Sync Mode"}),(0,Et.jsxs)("span",{className:"tab-count",children:[s.length," open tabs"]})]}),(0,Et.jsxs)("div",{className:"tab-sync-actions",children:[(0,Et.jsx)("button",{onClick:z,className:"tab-sync-refresh",disabled:d,title:"Refresh tabs",children:(0,Et.jsx)(yr,{size:16,className:d?"spinning":""})}),(0,Et.jsx)("button",{onClick:t,className:"tab-sync-close",title:"Close",children:(0,Et.jsx)(A,{size:16})})]})]}),(0,Et.jsxs)("div",{className:"tab-sync-filters",children:[(0,Et.jsxs)("div",{className:"tab-sync-filter-row",children:[(0,Et.jsxs)("label",{className:"tab-sync-filter-checkbox",children:[(0,Et.jsx)("input",{type:"checkbox",checked:w,onChange:function(n){return j(n.target.checked)}}),"Show only pinned tabs"]}),(0,Et.jsx)("input",{type:"text",placeholder:"Filter by domain...",value:_,onChange:function(n){return N(n.target.value)},className:"tab-sync-domain-filter"})]}),R.length>0&&(0,Et.jsxs)("div",{className:"tab-sync-domain-pills",children:[(0,Et.jsx)("span",{className:"domain-pills-label",children:"Quick filters:"}),R.map(function(n){var e=jr(n,2),t=e[0],r=e[1];return(0,Et.jsxs)("button",{onClick:function(){return N(_===t?"":t)},className:"domain-pill ".concat(_===t?"active":""),children:[t," (",r,")"]},t)})]})]}),(0,Et.jsxs)("div",{className:"tab-sync-bulk-actions",children:[(0,Et.jsxs)("button",{onClick:function(){var n=T();h.size===n.length?g(new Set):g(new Set(n.map(function(n){return n.id})))},className:"bulk-action-btn",title:h.size===L.length?"Deselect all":"Select all",children:[h.size===L.length?(0,Et.jsx)(Cr,{size:16}):(0,Et.jsx)(b,{size:16}),h.size===L.length?"Deselect All":"Select All"]}),h.size>0&&(0,Et.jsxs)(Et.Fragment,{children:[(0,Et.jsxs)("button",{onClick:function(){return O(void 0,!0)},className:"bulk-action-btn primary",disabled:B,children:[(0,Et.jsx)(x,{size:16}),"Save to Inbox (",h.size,")"]}),(0,Et.jsxs)("select",{onChange:function(n){n.target.value&&(O(n.target.value),n.target.value="")},className:"bulk-collection-select",disabled:B,title:"Save selected tabs to collection","aria-label":"Save selected tabs to collection",children:[(0,Et.jsx)("option",{value:"",children:"Save to Collection..."}),o.map(function(n){return(0,Et.jsx)("option",{value:n.id,children:n.name},n.id)})]})]})]}),(0,Et.jsx)("div",{className:"tab-sync-content",children:d?(0,Et.jsxs)("div",{className:"tab-sync-loading",children:[(0,Et.jsx)(yr,{size:24,className:"spinning"}),(0,Et.jsx)("p",{children:"Loading tabs..."})]}):0===Object.keys(y).length?(0,Et.jsxs)("div",{className:"tab-sync-empty",children:[(0,Et.jsx)(vr,{size:48}),(0,Et.jsx)("h3",{children:"No tabs found"}),(0,Et.jsx)("p",{children:"Open some tabs and refresh to see them here"})]}):Object.entries(y).map(function(n){var e=jr(n,2),t=e[0],r=e[1];return(0,Et.jsxs)("div",{className:"tab-window-group",children:[(0,Et.jsx)("div",{className:"tab-window-header",children:(0,Et.jsxs)("button",{onClick:function(){return function(n){var e=(y[n]||[]).map(function(n){return n.id}),t=new Set(h);e.every(function(n){return t.has(n)})?e.forEach(function(n){return t.delete(n)}):e.forEach(function(n){return t.add(n)}),g(t)}(parseInt(t))},className:"window-select-btn",children:[(0,Et.jsx)(vr,{size:16}),"Window ",t," (",r.length," tabs)"]})}),(0,Et.jsx)("div",{className:"tab-list",children:r.filter(function(n){return!(w&&!n.pinned||_&&!n.domain.toLowerCase().includes(_.toLowerCase()))}).map(function(n){return(0,Et.jsxs)("div",{className:"tab-item ".concat(h.has(n.id)?"selected":""," ").concat(n.active?"active":""),children:[(0,Et.jsxs)("div",{className:"tab-item-content",children:[(0,Et.jsx)("input",{type:"checkbox",checked:h.has(n.id),onChange:function(){return e=n.id,(t=new Set(h)).has(e)?t.delete(e):t.add(e),void g(t);var e,t},className:"tab-checkbox",title:"Select ".concat(n.title),"aria-label":"Select ".concat(n.title)}),(0,Et.jsx)("img",{src:n.favicon||"https://www.google.com/s2/favicons?domain=".concat(n.domain,"&sz=16"),alt:"favicon",className:"tab-favicon",onError:function(e){e.target.src="https://www.google.com/s2/favicons?domain=".concat(n.domain,"&sz=16")}}),(0,Et.jsxs)("div",{className:"tab-info",children:[(0,Et.jsxs)("div",{className:"tab-title",children:[n.pinned&&(0,Et.jsx)("span",{className:"tab-pin-indicator",children:"📌"}),n.title,n.active&&(0,Et.jsx)("span",{className:"tab-active-indicator",children:"•"})]}),(0,Et.jsx)("div",{className:"tab-url",children:n.domain})]})]}),(0,Et.jsxs)("div",{className:"tab-actions",children:[(0,Et.jsx)("button",{onClick:function(){return P(n,void 0,!0)},className:"tab-action-btn",title:"Save to inbox",disabled:B,children:(0,Et.jsx)(x,{size:14})}),(0,Et.jsxs)("select",{onChange:function(e){e.target.value&&(P(n,e.target.value),e.target.value="")},className:"tab-collection-select",disabled:B,title:"Save to collection","aria-label":"Save to collection",children:[(0,Et.jsx)("option",{value:"",children:"📁"}),o.map(function(n){return(0,Et.jsx)("option",{value:n.id,children:n.name},n.id)})]}),(0,Et.jsx)("a",{href:n.url,target:"_blank",rel:"noopener noreferrer",className:"tab-action-btn",title:"Open tab",children:(0,Et.jsx)(yt,{size:14})})]})]},n.id)})})]},t)})}),(0,Et.jsx)("div",{className:"tab-sync-footer",children:(0,Et.jsxs)("div",{className:"tab-sync-stats",children:[(0,Et.jsxs)("span",{children:[h.size," of ",L.length," tabs selected"]}),_&&(0,Et.jsxs)("span",{children:['• Filtered by "',_,'"']}),w&&(0,Et.jsx)("span",{children:"• Pinned only"})]})})]})}):null};function Nr(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const Ir=function(n){var e,t,o=n.link,i=n.onSave,a=n.onClose,s=(e=(0,r.useState)(o.userNote||""),t=2,function(n){if(Array.isArray(n))return n}(e)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(e,t)||function(n,e){if(n){if("string"==typeof n)return Nr(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Nr(n,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0],c=s[1];return(0,Et.jsx)("div",{className:"modal-overlay",onClick:a,children:(0,Et.jsxs)("div",{className:"modal-content",onClick:function(n){return n.stopPropagation()},children:[(0,Et.jsxs)("div",{className:"modal-header",children:[(0,Et.jsx)("h2",{children:"Add Note"}),(0,Et.jsx)("button",{onClick:a,className:"close-button",title:"Close",children:(0,Et.jsx)(A,{size:20})})]}),(0,Et.jsxs)("div",{className:"modal-body",children:[(0,Et.jsxs)("div",{className:"link-preview",children:[(0,Et.jsx)("div",{className:"link-preview-favicon",children:o.favicon?(0,Et.jsx)("img",{src:o.favicon,alt:"",width:"16",height:"16"}):(0,Et.jsx)("div",{className:"favicon-placeholder",children:o.domain.charAt(0).toUpperCase()})}),(0,Et.jsxs)("div",{className:"link-preview-info",children:[(0,Et.jsx)("div",{className:"link-preview-title",children:o.title}),(0,Et.jsx)("div",{className:"link-preview-url",children:o.domain})]})]}),(0,Et.jsxs)("form",{onSubmit:function(n){n.preventDefault(),i(l)},children:[(0,Et.jsxs)("div",{className:"form-group",children:[(0,Et.jsx)("label",{htmlFor:"note",children:"Note:"}),(0,Et.jsx)("textarea",{id:"note",value:l,onChange:function(n){return c(n.target.value)},placeholder:"Add a note about why you saved this link...",rows:4,autoFocus:!0})]}),(0,Et.jsxs)("div",{className:"modal-actions",children:[(0,Et.jsx)("button",{type:"button",onClick:a,className:"button-secondary",children:"Cancel"}),(0,Et.jsx)("button",{type:"submit",className:"button-primary",children:"Save Note"})]})]})]})]})})};function zr(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return Tr(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Tr(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tr(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const Or=function(n){var e=n.onSave,t=n.onClose,o=zr((0,r.useState)(""),2),i=o[0],a=o[1],s=zr((0,r.useState)(""),2),l=s[0],c=s[1];return(0,Et.jsx)("div",{className:"modal-overlay",onClick:t,children:(0,Et.jsxs)("div",{className:"modal-content",onClick:function(n){return n.stopPropagation()},children:[(0,Et.jsxs)("div",{className:"modal-header",children:[(0,Et.jsx)("h2",{children:"Create Collection"}),(0,Et.jsx)("button",{onClick:t,className:"close-button",title:"Close",children:(0,Et.jsx)(A,{size:20})})]}),(0,Et.jsx)("div",{className:"modal-body",children:(0,Et.jsxs)("form",{onSubmit:function(n){n.preventDefault(),i.trim()&&e(i.trim(),l.trim()||void 0)},children:[(0,Et.jsxs)("div",{className:"form-group",children:[(0,Et.jsx)("label",{htmlFor:"collection-name",children:"Collection Name:"}),(0,Et.jsx)("input",{id:"collection-name",type:"text",value:i,onChange:function(n){return a(n.target.value)},placeholder:"Enter collection name...",required:!0,autoFocus:!0})]}),(0,Et.jsxs)("div",{className:"form-group",children:[(0,Et.jsx)("label",{htmlFor:"collection-description",children:"Description (optional):"}),(0,Et.jsx)("textarea",{id:"collection-description",value:l,onChange:function(n){return c(n.target.value)},placeholder:"Describe what this collection is for...",rows:3})]}),(0,Et.jsxs)("div",{className:"modal-actions",children:[(0,Et.jsx)("button",{type:"button",onClick:t,className:"button-secondary",children:"Cancel"}),(0,Et.jsx)("button",{type:"submit",className:"button-primary",disabled:!i.trim(),children:"Create Collection"})]})]})})]})})},Pr=function(n){var e=n.tags,t=n.selectedTag,r=n.onTagSelect,o=n.loading,i=function(n){for(var e=["#3b82f6","#10b981","#f59e0b","#ef4444","#8b5cf6","#06b6d4","#84cc16","#f97316","#ec4899","#6366f1"],t=0,r=0;r<n.length;r++)t=n.charCodeAt(r)+((t<<5)-t);return e[Math.abs(t)%e.length]};return void 0!==o&&o?(0,Et.jsx)("div",{className:"tag-filters",children:(0,Et.jsx)("div",{className:"tag-filter-skeleton",children:"Loading tags..."})}):0===e.length?null:(0,Et.jsxs)("div",{className:"tag-filters",children:[t&&(0,Et.jsxs)("button",{onClick:function(){return r(null)},className:"tag-filter active",title:"Clear tag filter",children:[(0,Et.jsx)("span",{className:"tag-filter-color",style:{backgroundColor:i(t)}}),t,(0,Et.jsx)(A,{size:12})]}),e.filter(function(n){return n.name!==t}).sort(function(n,e){return e.usageCount-n.usageCount}).slice(0,10).map(function(n){return(0,Et.jsxs)("button",{onClick:function(){return r(n.name)},className:"tag-filter",title:"Filter by ".concat(n.name," tag"),children:[(0,Et.jsx)("span",{className:"tag-filter-color",style:{backgroundColor:i(n.name)}}),n.name,(0,Et.jsx)("span",{className:"tag-filter-count",children:n.usageCount})]},n.id)}),e.length>10&&!t&&(0,Et.jsxs)("span",{className:"tag-filter-more",children:["+",e.length-10," more"]})]})},Lr=a("User",[["path",{d:"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2",key:"975kel"}],["circle",{cx:"12",cy:"7",r:"4",key:"17ys0d"}]]),Rr=a("Palette",[["circle",{cx:"13.5",cy:"6.5",r:".5",key:"1xcu5"}],["circle",{cx:"17.5",cy:"10.5",r:".5",key:"736e4u"}],["circle",{cx:"8.5",cy:"7.5",r:".5",key:"clrty"}],["circle",{cx:"6.5",cy:"12.5",r:".5",key:"1s4xz9"}],["path",{d:"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z",key:"12rzf8"}]]),Mr=a("Database",[["ellipse",{cx:"12",cy:"5",rx:"9",ry:"3",key:"msslwz"}],["path",{d:"M3 5V19A9 3 0 0 0 21 19V5",key:"1wlel7"}],["path",{d:"M3 12A9 3 0 0 0 21 12",key:"mv7ke4"}]]),Dr=a("Info",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M12 16v-4",key:"1dtifu"}],["path",{d:"M12 8h.01",key:"e9boi3"}]]),Ur=a("Mail",[["rect",{width:"20",height:"16",x:"2",y:"4",rx:"2",key:"18n3k1"}],["path",{d:"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",key:"1ocrg3"}]]),Kr=a("Calendar",[["rect",{width:"18",height:"18",x:"3",y:"4",rx:"2",ry:"2",key:"eu3xkr"}],["line",{x1:"16",x2:"16",y1:"2",y2:"6",key:"m3sa8f"}],["line",{x1:"8",x2:"8",y1:"2",y2:"6",key:"18kwsl"}],["line",{x1:"3",x2:"21",y1:"10",y2:"10",key:"xt86sb"}]]),$r=a("Download",[["path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",key:"ih7n3h"}],["polyline",{points:"7 10 12 15 17 10",key:"2ggqvy"}],["line",{x1:"12",x2:"12",y1:"15",y2:"3",key:"1vk2je"}]]),Fr=a("FileText",[["path",{d:"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z",key:"1nnpy2"}],["polyline",{points:"14 2 14 8 20 8",key:"1ew0cm"}],["line",{x1:"16",x2:"8",y1:"13",y2:"13",key:"14keom"}],["line",{x1:"16",x2:"8",y1:"17",y2:"17",key:"17nazh"}],["line",{x1:"10",x2:"8",y1:"9",y2:"9",key:"1a5vjj"}]]),qr=a("BarChart3",[["path",{d:"M3 3v18h18",key:"1s2lah"}],["path",{d:"M18 17V9",key:"2bz60n"}],["path",{d:"M13 17V5",key:"1frdt8"}],["path",{d:"M8 17v-3",key:"17ska0"}]]),Yr=a("HelpCircle",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3",key:"1u773s"}],["path",{d:"M12 17h.01",key:"p32p05"}]]);function Wr(n){return Wr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Wr(n)}function Gr(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,r)}return t}function Qr(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?Gr(Object(t),!0).forEach(function(e){Vr(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):Gr(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}function Vr(n,e,t){return(e=function(n){var e=function(n){if("object"!=Wr(n)||!n)return n;var e=n[Symbol.toPrimitive];if(void 0!==e){var t=e.call(n,"string");if("object"!=Wr(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(n);return"symbol"==Wr(e)?e:e+""}(e))in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function Hr(){var n,e,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Zr(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,A={p:0,n:0,v:n,a:f,f:f.bind(n,4),d:function(e,t){return i=e,s=0,l=n,A.n=t,a}};function f(t,r){for(s=t,l=r,e=0;!d&&c&&!o&&e<u.length;e++){var o,i=u[e],f=A.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=n):i[0]<=f&&((o=t<2&&f<i[1])?(s=0,A.v=r,A.n=i[1]):f<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,A.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(e=s<2?n:l)||!d;){i||(s?s<3?(s>1&&(A.n=-1),f(s,l)):A.n=l:A.v=l);try{if(c=2,i){if(s||(o="next"),e=i[o]){if(!(e=e.call(i,l)))throw TypeError("iterator result is not an object");if(!e.done)return e;l=e.value,s<2&&(s=0)}else 1===s&&(e=i.return)&&e.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=n}else if((e=(d=A.n<0)?l:t.call(r,A))!==a)break}catch(e){i=n,s=1,l=e}finally{c=1}}return{value:e,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}e=Object.getPrototypeOf;var u=[][r]?e(e([][r]())):(Zr(e={},r,function(){return this}),e),d=c.prototype=s.prototype=Object.create(u);function A(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,c):(n.__proto__=c,Zr(n,o,"GeneratorFunction")),n.prototype=Object.create(d),n}return l.prototype=c,Zr(d,"constructor",c),Zr(c,"constructor",l),l.displayName="GeneratorFunction",Zr(c,o,"GeneratorFunction"),Zr(d),Zr(d,o,"Generator"),Zr(d,r,function(){return this}),Zr(d,"toString",function(){return"[object Generator]"}),(Hr=function(){return{w:i,m:A}})()}function Zr(n,e,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(n){o=0}Zr=function(n,e,t,r){if(e)o?o(n,e,{value:t,enumerable:!r,configurable:!r,writable:!r}):n[e]=t;else{var i=function(e,t){Zr(n,e,function(n){return this._invoke(e,t,n)})};i("next",0),i("throw",1),i("return",2)}},Zr(n,e,t,r)}function Xr(n,e,t,r,o,i,a){try{var s=n[i](a),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,o)}function Jr(n){return function(){var e=this,t=arguments;return new Promise(function(r,o){var i=n.apply(e,t);function a(n){Xr(i,r,o,a,s,"next",n)}function s(n){Xr(i,r,o,a,s,"throw",n)}a(void 0)})}}function no(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||function(n,e){if(n){if("string"==typeof n)return eo(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?eo(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eo(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}const to=function(n){var e=n.onClose,t=no((0,r.useState)("account"),2),o=t[0],i=t[1],a=no((0,r.useState)(""),2),s=a[0],l=a[1],c=no((0,r.useState)({linkCount:0,collectionCount:0,tagCount:0,publicCollections:0,totalViews:0}),2),u=c[0],d=c[1],f=no((0,r.useState)({autoSummarize:!0,defaultCategory:"general",defaultPrivacy:!1,showTooltips:!0,compactView:!1,darkMode:!1}),2),h=f[0],g=f[1],m=no((0,r.useState)(!0),2),b=m[0],x=m[1],y=no((0,r.useState)(!1),2),C=y[0],v=y[1],B=no((0,r.useState)(""),2),E=B[0],k=B[1];(0,r.useEffect)(function(){w(),j(),S()},[]);var w=function(){var n=Jr(Hr().m(function n(){var e,t,r;return Hr().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,at.auth.getUser();case 1:e=n.v,(t=e.data.user)&&l(t.email||"Unknown"),n.n=3;break;case 2:n.p=2,r=n.v,console.error("Failed to load user data:",r);case 3:return n.a(2)}},n,null,[[0,2]])}));return function(){return n.apply(this,arguments)}}(),j=function(){var n=Jr(Hr().m(function n(){var e,t;return Hr().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.getData();case 1:e=n.v,g({autoSummarize:e.settings.autoSummarize,defaultCategory:e.settings.defaultCategory,defaultPrivacy:!1,showTooltips:!0,compactView:!1,darkMode:!1}),n.n=3;break;case 2:n.p=2,t=n.v,console.error("Failed to load settings:",t);case 3:return n.p=3,x(!1),n.f(3);case 4:return n.a(2)}},n,null,[[0,2,3,4]])}));return function(){return n.apply(this,arguments)}}(),S=function(){var n=Jr(Hr().m(function n(){var e,t,r,o,i,a,s;return Hr().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.getData();case 1:return e=n.v,n.n=2,xt.getUserTags();case 2:return t=n.v,n.n=3,at.from("collections").select("view_count").eq("is_public",!0);case 3:r=n.v,o=r.data,i=(null==o?void 0:o.length)||0,a=(null==o?void 0:o.reduce(function(n,e){return n+(e.view_count||0)},0))||0,d({linkCount:e.links.length,collectionCount:e.collections.length,tagCount:t.length,publicCollections:i,totalViews:a}),n.n=5;break;case 4:n.p=4,s=n.v,console.error("Failed to load user stats:",s);case 5:return n.a(2)}},n,null,[[0,4]])}));return function(){return n.apply(this,arguments)}}(),_=function(){var n=Jr(Hr().m(function n(e){return Hr().w(function(n){for(;;)switch(n.n){case 0:v(!0),k("");try{g(e),k("Settings saved successfully!"),setTimeout(function(){return k("")},3e3)}catch(n){k("Failed to save settings")}finally{v(!1)}case 1:return n.a(2)}},n)}));return function(e){return n.apply(this,arguments)}}(),N=function(){var n=Jr(Hr().m(function n(){var e,t,r,o,i,a;return Hr().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.getData();case 1:return e=n.v,n.n=2,xt.getUserTags();case 2:t=n.v,r={exported_at:(new Date).toISOString(),user_email:s,links:e.links,collections:e.collections,tags:t,stats:u},o=new Blob([JSON.stringify(r,null,2)],{type:"application/json"}),i=URL.createObjectURL(o),(a=document.createElement("a")).href=i,a.download="nest-export-".concat((new Date).toISOString().split("T")[0],".json"),document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(i),k("Data exported successfully!"),setTimeout(function(){return k("")},3e3),n.n=4;break;case 3:n.p=3,n.v,k("Failed to export data");case 4:return n.a(2)}},n,null,[[0,3]])}));return function(){return n.apply(this,arguments)}}(),I=function(){var n=Jr(Hr().m(function n(){var e;return Hr().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.cleanupUnusedTags();case 1:e=n.v,k("Cleaned up ".concat(e," unused tags")),S(),setTimeout(function(){return k("")},3e3),n.n=3;break;case 2:n.p=2,n.v,k("Failed to cleanup tags");case 3:return n.a(2)}},n,null,[[0,2]])}));return function(){return n.apply(this,arguments)}}(),z=function(){var n=Jr(Hr().m(function n(){return Hr().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,at.auth.signOut();case 1:e(),n.n=3;break;case 2:n.p=2,n.v,k("Failed to logout");case 3:return n.a(2)}},n,null,[[0,2]])}));return function(){return n.apply(this,arguments)}}(),T=[{id:"account",label:"Account",icon:Lr},{id:"preferences",label:"Preferences",icon:Rr},{id:"data",label:"Data",icon:Mr},{id:"sharing",label:"Sharing",icon:Wt},{id:"about",label:"About",icon:Dr}];return b?(0,Et.jsx)("div",{className:"modal-overlay",children:(0,Et.jsxs)("div",{className:"modal settings-modal",children:[(0,Et.jsxs)("div",{className:"modal-header",children:[(0,Et.jsx)("h2",{children:"Settings"}),(0,Et.jsx)("button",{onClick:e,className:"modal-close",title:"Close",children:(0,Et.jsx)(A,{size:20})})]}),(0,Et.jsx)("div",{className:"modal-content",children:(0,Et.jsx)("div",{className:"loading-spinner",children:"Loading settings..."})})]})}):(0,Et.jsx)("div",{className:"modal-overlay",children:(0,Et.jsxs)("div",{className:"modal settings-modal",children:[(0,Et.jsxs)("div",{className:"modal-header",children:[(0,Et.jsx)("h2",{children:"Settings"}),(0,Et.jsx)("button",{onClick:e,className:"modal-close",title:"Close",children:(0,Et.jsx)(A,{size:20})})]}),(0,Et.jsxs)("div",{className:"settings-content",children:[(0,Et.jsx)("div",{className:"settings-tabs",children:T.map(function(n){var e=n.icon;return(0,Et.jsxs)("button",{onClick:function(){return i(n.id)},className:"settings-tab ".concat(o===n.id?"active":""),children:[(0,Et.jsx)(e,{size:16}),(0,Et.jsx)("span",{children:n.label})]},n.id)})}),(0,Et.jsxs)("div",{className:"settings-panel",children:["account"===o&&(0,Et.jsxs)("div",{className:"settings-section",children:[(0,Et.jsx)("h3",{children:"Account Information"}),(0,Et.jsxs)("div",{className:"setting-group",children:[(0,Et.jsx)("div",{className:"setting-item",children:(0,Et.jsxs)("div",{className:"setting-info",children:[(0,Et.jsx)(Ur,{size:16}),(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"setting-label",children:"Email Address"}),(0,Et.jsx)("div",{className:"setting-description",children:s})]})]})}),(0,Et.jsx)("div",{className:"setting-item",children:(0,Et.jsxs)("div",{className:"setting-info",children:[(0,Et.jsx)(Kr,{size:16}),(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"setting-label",children:"Account Created"}),(0,Et.jsx)("div",{className:"setting-description",children:"Connected via Supabase"})]})]})})]}),(0,Et.jsxs)("div",{className:"stats-grid",children:[(0,Et.jsxs)("div",{className:"stat-card",children:[(0,Et.jsx)("div",{className:"stat-number",children:u.linkCount}),(0,Et.jsx)("div",{className:"stat-label",children:"Links Saved"})]}),(0,Et.jsxs)("div",{className:"stat-card",children:[(0,Et.jsx)("div",{className:"stat-number",children:u.collectionCount}),(0,Et.jsx)("div",{className:"stat-label",children:"Collections"})]}),(0,Et.jsxs)("div",{className:"stat-card",children:[(0,Et.jsx)("div",{className:"stat-number",children:u.tagCount}),(0,Et.jsx)("div",{className:"stat-label",children:"Tags Used"})]}),(0,Et.jsxs)("div",{className:"stat-card",children:[(0,Et.jsx)("div",{className:"stat-number",children:u.totalViews}),(0,Et.jsx)("div",{className:"stat-label",children:"Total Views"})]})]}),(0,Et.jsx)("div",{className:"setting-actions",children:(0,Et.jsx)("button",{onClick:z,className:"settings-button danger",children:"Logout"})})]}),"preferences"===o&&(0,Et.jsxs)("div",{className:"settings-section",children:[(0,Et.jsx)("h3",{children:"Application Preferences"}),(0,Et.jsxs)("div",{className:"setting-group",children:[(0,Et.jsxs)("div",{className:"setting-item",children:[(0,Et.jsx)("div",{className:"setting-info",children:(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"setting-label",children:"Auto-summarize Links"}),(0,Et.jsx)("div",{className:"setting-description",children:"Automatically generate AI summaries for saved links"})]})}),(0,Et.jsxs)("label",{className:"toggle-switch",title:"Toggle auto-summarize",children:[(0,Et.jsx)("input",{type:"checkbox",checked:h.autoSummarize,onChange:function(n){return _(Qr(Qr({},h),{},{autoSummarize:n.target.checked}))},disabled:C,"aria-label":"Auto-summarize links"}),(0,Et.jsx)("span",{className:"toggle-slider"})]})]}),(0,Et.jsxs)("div",{className:"setting-item",children:[(0,Et.jsx)("div",{className:"setting-info",children:(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"setting-label",children:"Default Category"}),(0,Et.jsx)("div",{className:"setting-description",children:"Default category for new links"})]})}),(0,Et.jsxs)("select",{value:h.defaultCategory,onChange:function(n){return _(Qr(Qr({},h),{},{defaultCategory:n.target.value}))},className:"settings-select",disabled:C,title:"Select default category","aria-label":"Default category",children:[(0,Et.jsx)("option",{value:"general",children:"General"}),(0,Et.jsx)("option",{value:"work",children:"Work"}),(0,Et.jsx)("option",{value:"personal",children:"Personal"}),(0,Et.jsx)("option",{value:"learning",children:"Learning"})]})]}),(0,Et.jsxs)("div",{className:"setting-item",children:[(0,Et.jsx)("div",{className:"setting-info",children:(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"setting-label",children:"Show Tooltips"}),(0,Et.jsx)("div",{className:"setting-description",children:"Display helpful tooltips throughout the interface"})]})}),(0,Et.jsxs)("label",{className:"toggle-switch",title:"Toggle show tooltips",children:[(0,Et.jsx)("input",{type:"checkbox",checked:h.showTooltips,onChange:function(n){return _(Qr(Qr({},h),{},{showTooltips:n.target.checked}))},disabled:C,"aria-label":"Show tooltips"}),(0,Et.jsx)("span",{className:"toggle-slider"})]})]}),(0,Et.jsxs)("div",{className:"setting-item",children:[(0,Et.jsx)("div",{className:"setting-info",children:(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"setting-label",children:"Compact View"}),(0,Et.jsx)("div",{className:"setting-description",children:"Use a more compact layout to show more content"})]})}),(0,Et.jsxs)("label",{className:"toggle-switch",title:"Toggle compact view",children:[(0,Et.jsx)("input",{type:"checkbox",checked:h.compactView,onChange:function(n){return _(Qr(Qr({},h),{},{compactView:n.target.checked}))},disabled:C,"aria-label":"Compact view"}),(0,Et.jsx)("span",{className:"toggle-slider"})]})]})]})]}),"data"===o&&(0,Et.jsxs)("div",{className:"settings-section",children:[(0,Et.jsx)("h3",{children:"Data Management"}),(0,Et.jsxs)("div",{className:"setting-group",children:[(0,Et.jsxs)("div",{className:"setting-item",children:[(0,Et.jsxs)("div",{className:"setting-info",children:[(0,Et.jsx)($r,{size:16}),(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"setting-label",children:"Export Data"}),(0,Et.jsx)("div",{className:"setting-description",children:"Download all your links, collections, and tags as JSON"})]})]}),(0,Et.jsx)("button",{onClick:N,className:"settings-button",children:"Export"})]}),(0,Et.jsxs)("div",{className:"setting-item",children:[(0,Et.jsxs)("div",{className:"setting-info",children:[(0,Et.jsx)(Bt,{size:16}),(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"setting-label",children:"Cleanup Unused Tags"}),(0,Et.jsx)("div",{className:"setting-description",children:"Remove tags that aren't used by any links"})]})]}),(0,Et.jsx)("button",{onClick:I,className:"settings-button",children:"Cleanup"})]})]}),(0,Et.jsxs)("div",{className:"data-usage",children:[(0,Et.jsx)("h4",{children:"Storage Usage"}),(0,Et.jsxs)("div",{className:"usage-items",children:[(0,Et.jsxs)("div",{className:"usage-item",children:[(0,Et.jsx)(Fr,{size:14}),(0,Et.jsxs)("span",{children:[u.linkCount," links"]})]}),(0,Et.jsxs)("div",{className:"usage-item",children:[(0,Et.jsx)(p,{size:14}),(0,Et.jsxs)("span",{children:[u.tagCount," tags"]})]}),(0,Et.jsxs)("div",{className:"usage-item",children:[(0,Et.jsx)(qr,{size:14}),(0,Et.jsxs)("span",{children:[u.collectionCount," collections"]})]})]})]})]}),"sharing"===o&&(0,Et.jsxs)("div",{className:"settings-section",children:[(0,Et.jsx)("h3",{children:"Sharing & Privacy"}),(0,Et.jsx)("div",{className:"setting-group",children:(0,Et.jsxs)("div",{className:"setting-item",children:[(0,Et.jsx)("div",{className:"setting-info",children:(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"setting-label",children:"Default Collection Privacy"}),(0,Et.jsx)("div",{className:"setting-description",children:"Make new collections public by default"})]})}),(0,Et.jsxs)("label",{className:"toggle-switch",title:"Toggle default privacy",children:[(0,Et.jsx)("input",{type:"checkbox",checked:h.defaultPrivacy,onChange:function(n){return _(Qr(Qr({},h),{},{defaultPrivacy:n.target.checked}))},disabled:C,"aria-label":"Default collection privacy"}),(0,Et.jsx)("span",{className:"toggle-slider"})]})]})}),(0,Et.jsxs)("div",{className:"sharing-stats",children:[(0,Et.jsx)("h4",{children:"Sharing Analytics"}),(0,Et.jsxs)("div",{className:"stats-row",children:[(0,Et.jsxs)("div",{className:"stat-item",children:[(0,Et.jsx)(Zt,{size:16}),(0,Et.jsxs)("span",{children:[u.publicCollections," public collections"]})]}),(0,Et.jsxs)("div",{className:"stat-item",children:[(0,Et.jsx)(qr,{size:16}),(0,Et.jsxs)("span",{children:[u.totalViews," total views"]})]})]})]})]}),"about"===o&&(0,Et.jsxs)("div",{className:"settings-section",children:[(0,Et.jsx)("h3",{children:"About Nest"}),(0,Et.jsxs)("div",{className:"about-info",children:[(0,Et.jsxs)("div",{className:"app-info",children:[(0,Et.jsx)("div",{className:"app-logo",children:"N"}),(0,Et.jsxs)("div",{children:[(0,Et.jsx)("div",{className:"app-name",children:"Nest - Smart Bookmarks & Notes"}),(0,Et.jsx)("div",{className:"app-version",children:"Version 1.0.0"})]})]}),(0,Et.jsx)("p",{className:"app-description",children:"Nest is a powerful browser extension that helps you save, organize, and share your bookmarks with AI-powered summaries, flexible tagging, and beautiful collections."})]}),(0,Et.jsxs)("div",{className:"support-links",children:[(0,Et.jsx)("h4",{children:"Support & Resources"}),(0,Et.jsxs)("div",{className:"link-grid",children:[(0,Et.jsxs)("a",{href:"https://github.com",target:"_blank",rel:"noopener",className:"support-link",children:[(0,Et.jsx)(yt,{size:16}),(0,Et.jsx)("span",{children:"Documentation"})]}),(0,Et.jsxs)("a",{href:"https://github.com/issues",target:"_blank",rel:"noopener",className:"support-link",children:[(0,Et.jsx)(Yr,{size:16}),(0,Et.jsx)("span",{children:"Report Issues"})]}),(0,Et.jsxs)("a",{href:"mailto:support@nest.dev",className:"support-link",children:[(0,Et.jsx)(Ur,{size:16}),(0,Et.jsx)("span",{children:"Contact Support"})]})]})]}),(0,Et.jsxs)("div",{className:"credits",children:[(0,Et.jsx)("p",{children:"Built with ❤️ by the Nest team"}),(0,Et.jsx)("p",{children:"Powered by Supabase, React, and Chrome Extensions API"})]})]})]})]}),E&&(0,Et.jsx)("div",{className:"settings-message ".concat(E.includes("Failed")?"error":"success"),children:E}),(0,Et.jsx)("div",{className:"modal-footer",children:(0,Et.jsx)("button",{onClick:e,className:"modal-button secondary",children:"Close"})})]})})};var ro=t(72),oo=t.n(ro),io=t(206),ao=t.n(io),so=t(659),lo=t.n(so),co=t(56),uo=t.n(co),Ao=t(159),fo=t.n(Ao),po=t(113),ho=t.n(po),go=t(182),mo={};function bo(n){return bo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},bo(n)}function xo(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,r)}return t}function yo(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?xo(Object(t),!0).forEach(function(e){Co(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):xo(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}function Co(n,e,t){return(e=function(n){var e=function(n){if("object"!=bo(n)||!n)return n;var e=n[Symbol.toPrimitive];if(void 0!==e){var t=e.call(n,"string");if("object"!=bo(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(n);return"symbol"==bo(e)?e:e+""}(e))in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function vo(){var n,e,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",o=t.toStringTag||"@@toStringTag";function i(t,r,o,i){var l=r&&r.prototype instanceof s?r:s,c=Object.create(l.prototype);return Bo(c,"_invoke",function(t,r,o){var i,s,l,c=0,u=o||[],d=!1,A={p:0,n:0,v:n,a:f,f:f.bind(n,4),d:function(e,t){return i=e,s=0,l=n,A.n=t,a}};function f(t,r){for(s=t,l=r,e=0;!d&&c&&!o&&e<u.length;e++){var o,i=u[e],f=A.p,p=i[2];t>3?(o=p===r)&&(l=i[(s=i[4])?5:(s=3,3)],i[4]=i[5]=n):i[0]<=f&&((o=t<2&&f<i[1])?(s=0,A.v=r,A.n=i[1]):f<p&&(o=t<3||i[0]>r||r>p)&&(i[4]=t,i[5]=r,A.n=p,s=0))}if(o||t>1)return a;throw d=!0,r}return function(o,u,p){if(c>1)throw TypeError("Generator is already running");for(d&&1===u&&f(u,p),s=u,l=p;(e=s<2?n:l)||!d;){i||(s?s<3?(s>1&&(A.n=-1),f(s,l)):A.n=l:A.v=l);try{if(c=2,i){if(s||(o="next"),e=i[o]){if(!(e=e.call(i,l)))throw TypeError("iterator result is not an object");if(!e.done)return e;l=e.value,s<2&&(s=0)}else 1===s&&(e=i.return)&&e.call(i),s<2&&(l=TypeError("The iterator does not provide a '"+o+"' method"),s=1);i=n}else if((e=(d=A.n<0)?l:t.call(r,A))!==a)break}catch(e){i=n,s=1,l=e}finally{c=1}}return{value:e,done:d}}}(t,o,i),!0),c}var a={};function s(){}function l(){}function c(){}e=Object.getPrototypeOf;var u=[][r]?e(e([][r]())):(Bo(e={},r,function(){return this}),e),d=c.prototype=s.prototype=Object.create(u);function A(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,c):(n.__proto__=c,Bo(n,o,"GeneratorFunction")),n.prototype=Object.create(d),n}return l.prototype=c,Bo(d,"constructor",c),Bo(c,"constructor",l),l.displayName="GeneratorFunction",Bo(c,o,"GeneratorFunction"),Bo(d),Bo(d,o,"Generator"),Bo(d,r,function(){return this}),Bo(d,"toString",function(){return"[object Generator]"}),(vo=function(){return{w:i,m:A}})()}function Bo(n,e,t,r){var o=Object.defineProperty;try{o({},"",{})}catch(n){o=0}Bo=function(n,e,t,r){if(e)o?o(n,e,{value:t,enumerable:!r,configurable:!r,writable:!r}):n[e]=t;else{var i=function(e,t){Bo(n,e,function(n){return this._invoke(e,t,n)})};i("next",0),i("throw",1),i("return",2)}},Bo(n,e,t,r)}function Eo(n,e,t,r,o,i,a){try{var s=n[i](a),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,o)}function ko(n){return function(){var e=this,t=arguments;return new Promise(function(r,o){var i=n.apply(e,t);function a(n){Eo(i,r,o,a,s,"next",n)}function s(n){Eo(i,r,o,a,s,"throw",n)}a(void 0)})}}function wo(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i,a,s=[],l=!0,c=!1;try{if(i=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=i.call(t)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(n){c=!0,o=n}finally{try{if(!l&&null!=t.return&&(a=t.return(),Object(a)!==a))return}finally{if(c)throw o}}return s}}(n,e)||jo(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jo(n,e){if(n){if("string"==typeof n)return So(n,e);var t={}.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?So(n,e):void 0}}function So(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=Array(e);t<e;t++)r[t]=n[t];return r}mo.styleTagTransform=ho(),mo.setAttributes=uo(),mo.insert=lo().bind(null,"head"),mo.domAPI=ao(),mo.insertStyleElement=fo(),oo()(go.A,mo),go.A&&go.A.locals&&go.A.locals;const _o=function(){var n=wo((0,r.useState)({links:[],collections:[],categories:[],settings:{defaultCategory:"general",autoSummarize:!0}}),2),e=n[0],t=n[1],o=wo((0,r.useState)(""),2),i=o[0],a=o[1],v=wo((0,r.useState)([]),2),B=v[0],E=v[1],k=wo((0,r.useState)(!1),2),w=k[0],j=k[1],S=wo((0,r.useState)(!1),2),_=S[0],N=S[1],I=wo((0,r.useState)(null),2),z=I[0],T=I[1],O=wo((0,r.useState)([]),2),P=O[0],L=O[1],R=wo((0,r.useState)([]),2),M=R[0],D=R[1],U=wo((0,r.useState)(!1),2),K=U[0],$=U[1],F=wo((0,r.useState)({inbox:!0,holdingArea:!0,collections:!0}),2),q=F[0],Y=F[1],W=wo((0,r.useState)(null),2),G=W[0],Q=W[1],V=wo((0,r.useState)(!1),2),H=V[0],Z=V[1],X=wo((0,r.useState)(!1),2),J=X[0],nn=X[1],en=wo((0,r.useState)(!1),2),tn=en[0],rn=en[1],on=wo((0,r.useState)(!0),2),an=on[0],sn=on[1],ln=wo((0,r.useState)(null),2),cn=ln[0],un=ln[1],dn=wo((0,r.useState)(""),2),An=dn[0],fn=dn[1],pn=wo((0,r.useState)(!1),2),hn=pn[0],gn=pn[1],mn=wo((0,r.useState)(""),2),bn=mn[0],xn=mn[1],yn=wo((0,r.useState)([]),2),Cn=yn[0],vn=yn[1],Bn=wo((0,r.useState)([]),2),En=Bn[0],kn=Bn[1],wn=wo((0,r.useState)(!1),2),jn=wn[0],Sn=wn[1],_n=wo((0,r.useState)(!1),2),Nn=_n[0],In=_n[1],zn=wo((0,r.useState)(!1),2),Tn=zn[0],On=zn[1];(0,r.useEffect)(function(){at.auth.getSession().then(function(n){var e=n.data.session;un(e),e&&(Rn(),Dn())});var n=at.auth.onAuthStateChange(function(n,e){console.log("Auth state changed:",n,e),un(e),e&&(Rn(),Dn())}),e=n.data.subscription,t=function(n,e,t){"refreshSidebar"===n.action&&(console.log("Sidebar: Received refresh request"),Rn(),Mn(),Dn(),t({success:!0}))};return chrome.runtime.onMessage.addListener(t),function(){e.unsubscribe(),chrome.runtime.onMessage.removeListener(t)}},[]),(0,r.useEffect)(function(){Rn()},[]),(0,r.useEffect)(function(){var n=function(n){(n.metaKey||n.ctrlKey)&&"k"===n.key&&(n.preventDefault(),In(!0))};return document.addEventListener("keydown",n),function(){return document.removeEventListener("keydown",n)}},[]);var Pn,Ln,Rn=function(){var n=ko(vo().m(function n(){var e,r;return vo().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.getData();case 1:return e=n.v,t(e),n.n=2,Mn();case 2:n.n=4;break;case 3:n.p=3,r=n.v,console.error("Failed to load data:",r);case 4:return n.p=4,sn(!1),n.f(4);case 5:return n.a(2)}},n,null,[[0,3,4,5]])}));return function(){return n.apply(this,arguments)}}(),Mn=function(){var n=ko(vo().m(function n(){var e,t;return vo().w(function(n){for(;;)switch(n.n){case 0:return Sn(!0),n.p=1,n.n=2,xt.getInboxLinks();case 2:e=n.v,vn(e),n.n=4;break;case 3:n.p=3,t=n.v,console.error("Failed to load inbox links:",t);case 4:return n.p=4,Sn(!1),n.f(4);case 5:return n.a(2)}},n,null,[[1,3,4,5]])}));return function(){return n.apply(this,arguments)}}(),Dn=function(){var n=ko(vo().m(function n(){var e,t;return vo().w(function(n){for(;;)switch(n.n){case 0:return $(!0),n.p=1,n.n=2,xt.getUserTags();case 2:e=n.v,D(e),n.n=4;break;case 3:n.p=3,t=n.v,console.error("Failed to load user tags:",t);case 4:return n.p=4,$(!1),n.f(4);case 5:return n.a(2)}},n,null,[[1,3,4,5]])}));return function(){return n.apply(this,arguments)}}(),Un=function(){var n=ko(vo().m(function n(e){var t,r;return vo().w(function(n){for(;;)switch(n.n){case 0:if(e!==z){n.n=1;break}return T(null),L([]),n.a(2);case 1:if(T(e),!e){n.n=6;break}return n.p=2,n.n=3,xt.getLinksByTag(e);case 3:t=n.v,L(t),n.n=5;break;case 4:n.p=4,r=n.v,console.error("Failed to load links by tag:",r),L([]);case 5:n.n=7;break;case 6:L([]);case 7:e&&_&&re();case 8:return n.a(2)}},n,null,[[2,4]])}));return function(e){return n.apply(this,arguments)}}(),Kn=function(){Dn(),z&&Un(z)},$n=function(n){Y(function(e){return yo(yo({},e),{},Co({},n,!e[n]))})},Fn=function(){var n=ko(vo().m(function n(){var e;return vo().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if(!n.v[0]){n.n=4;break}return n.n=2,chrome.runtime.sendMessage({action:"saveCurrentPage"});case 2:return n.n=3,Rn();case 3:return n.n=4,Dn();case 4:n.n=6;break;case 5:n.p=5,e=n.v,console.error("Failed to save page:",e);case 6:return n.a(2)}},n,null,[[0,5]])}));return function(){return n.apply(this,arguments)}}(),qn=function(){var n=ko(vo().m(function n(e,t){var r;return vo().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.updateLink(e,t);case 1:return n.n=2,Rn();case 2:n.n=4;break;case 3:n.p=3,r=n.v,console.error("Failed to update link:",r);case 4:return n.a(2)}},n,null,[[0,3]])}));return function(e,t){return n.apply(this,arguments)}}(),Yn=function(){var n=ko(vo().m(function n(e){var t;return vo().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.deleteLink(e);case 1:return n.n=2,Rn();case 2:return n.n=3,Dn();case 3:z&&Un(z),n.n=5;break;case 4:n.p=4,t=n.v,console.error("Failed to delete link:",t);case 5:return n.a(2)}},n,null,[[0,4]])}));return function(e){return n.apply(this,arguments)}}(),Wn=function(){var n=ko(vo().m(function n(e,t){var r;return vo().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.updateLink(e,{collectionId:t});case 1:return n.n=2,Rn();case 2:n.n=4;break;case 3:n.p=3,r=n.v,console.error("Failed to move link:",r);case 4:return n.a(2)}},n,null,[[0,3]])}));return function(e,t){return n.apply(this,arguments)}}(),Gn=function(n){Q(n),Z(!0)},Qn=function(){var n=ko(vo().m(function n(e){return vo().w(function(n){for(;;)switch(n.n){case 0:if(!G){n.n=1;break}return n.n=1,qn(G.id,{userNote:e});case 1:Z(!1),Q(null);case 2:return n.a(2)}},n)}));return function(e){return n.apply(this,arguments)}}(),Vn=function(){var n=ko(vo().m(function n(e,t){var r,o;return vo().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,r={id:Date.now().toString(),name:e,description:t,createdAt:new Date,updatedAt:new Date},n.n=1,xt.addCollection(r);case 1:return n.n=2,Rn();case 2:n.n=4;break;case 3:n.p=3,o=n.v,console.error("Failed to create collection:",o);case 4:nn(!1);case 5:return n.a(2)}},n,null,[[0,3]])}));return function(e,t){return n.apply(this,arguments)}}(),Hn=function(){var n=ko(vo().m(function n(e,t){var r;return vo().w(function(n){for(;;)switch(n.n){case 0:return n.p=0,n.n=1,xt.moveFromInbox(e,t);case 1:return n.n=2,Mn();case 2:return n.n=3,Rn();case 3:kn(function(n){return n.filter(function(n){return n!==e})}),n.n=5;break;case 4:n.p=4,r=n.v,console.error("Failed to move link from inbox:",r);case 5:return n.a(2)}},n,null,[[0,4]])}));return function(e,t){return n.apply(this,arguments)}}(),Zn=function(n){kn(function(e){return e.includes(n)?e.filter(function(e){return e!==n}):[].concat(function(n){if(Array.isArray(n))return So(n)}(t=e)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(t)||jo(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[n]);var t})},Xn=function(){var n=ko(vo().m(function n(e){var t;return vo().w(function(n){for(;;)switch(n.n){case 0:if(0!==En.length){n.n=1;break}return n.a(2);case 1:return n.p=1,n.n=2,xt.bulkMoveFromInbox(En,e);case 2:return n.n=3,Mn();case 3:return n.n=4,Rn();case 4:kn([]),n.n=6;break;case 5:n.p=5,t=n.v,console.error("Failed to bulk move links from inbox:",t);case 6:return n.a(2)}},n,null,[[1,5]])}));return function(e){return n.apply(this,arguments)}}(),Jn=function(){var n=ko(vo().m(function n(e,t,r){var o;return vo().w(function(n){for(;;)switch(n.n){case 0:return o=e.map(function(){var n=ko(vo().m(function n(e){var o;return vo().w(function(n){for(;;)switch(n.n){case 0:return o={url:e.url,title:e.title,favicon:e.favicon||"https://www.google.com/s2/favicons?domain=".concat(e.domain,"&sz=32"),userNote:"",aiSummary:"",category:"general",domain:e.domain,isInInbox:r||!1,collectionId:r?void 0:t},n.n=1,xt.addLink(o);case 1:return n.a(2,n.v)}},n)}));return function(e){return n.apply(this,arguments)}}()),n.n=1,Promise.all(o);case 1:return n.n=2,Rn();case 2:return n.n=3,Mn();case 3:chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Tabs Saved to Nest",message:"Saved ".concat(e.length," tab(s) ").concat(r?"to inbox":t?"to collection":"to holding area")});case 4:return n.a(2)}},n)}));return function(e,t,r){return n.apply(this,arguments)}}(),ne=function(){var n=ko(vo().m(function n(e){var t,r,o;return vo().w(function(n){for(;;)switch(n.n){case 0:return e.preventDefault(),gn(!0),xn(""),t=chrome.runtime.getURL("auth.html"),console.log("Redirecting to:",t),n.n=1,at.auth.signInWithOtp({email:An,options:{emailRedirectTo:t}});case 1:r=n.v,o=r.error,xn(o?o.message:"Check your email for the login link!"),gn(!1);case 2:return n.a(2)}},n)}));return function(e){return n.apply(this,arguments)}}(),ee=function(){var n=ko(vo().m(function n(){return vo().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,at.auth.signOut();case 1:return n.a(2)}},n)}));return function(){return n.apply(this,arguments)}}(),te=(0,r.useCallback)((Pn=function(){var n=ko(vo().m(function n(e){var t,r;return vo().w(function(n){for(;;)switch(n.n){case 0:if(e.trim()){n.n=1;break}return E([]),N(!1),j(!1),n.a(2);case 1:return j(!0),n.p=2,n.n=3,xt.searchLinks(e);case 3:t=n.v,E(t),N(!0),z&&(T(null),L([])),n.n=5;break;case 4:n.p=4,r=n.v,console.error("Search failed:",r),E([]);case 5:return n.p=5,j(!1),n.f(5);case 6:return n.a(2)}},n,null,[[2,4,5,6]])}));return function(e){return n.apply(this,arguments)}}(),function(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];clearTimeout(Ln),Ln=setTimeout(function(){return Pn.apply(void 0,e)},300)}),[z]),re=function(){a(""),E([]),N(!1),j(!1)},oe=function(){re(),T(null),L([])},ie=_||z?[]:e.links.filter(function(n){return!n.isInInbox}),ae=ie.filter(function(n){return!n.collectionId});return cn?an?(0,Et.jsx)("div",{className:"sidepanel loading",children:(0,Et.jsx)("div",{className:"loading-spinner",children:"Loading..."})}):(0,Et.jsxs)("div",{className:"sidepanel",children:[(0,Et.jsxs)("div",{className:"header",children:[(0,Et.jsxs)("div",{className:"header-title",children:[(0,Et.jsx)(s,{className:"header-icon"}),(0,Et.jsx)("h1",{children:"Nest"})]}),(0,Et.jsxs)("div",{className:"header-actions",children:[(0,Et.jsx)("button",{onClick:function(){return On(!0)},className:"tab-sync-button",title:"Tab Sync Mode",children:(0,Et.jsx)(l,{size:18})}),(0,Et.jsx)("button",{onClick:Fn,className:"save-button",title:"Save current page",children:(0,Et.jsx)(c,{size:18})}),(0,Et.jsx)("button",{onClick:ee,className:"logout-button",title:"Logout",children:(0,Et.jsx)(u,{size:18})})]})]}),(0,Et.jsxs)("div",{className:"search-container",children:[(0,Et.jsx)(d,{className:"search-icon",size:16}),(0,Et.jsx)("input",{type:"text",placeholder:"Search your links... (⌘K for power mode)",value:i,onChange:function(n){var e=n.target.value;a(e),te(e)},className:"search-input",onFocus:function(){}}),i&&(0,Et.jsx)("button",{onClick:re,className:"search-clear",title:"Clear search",children:(0,Et.jsx)(A,{size:16})}),w&&(0,Et.jsx)("div",{className:"search-spinner",children:"⟳"}),!i&&!w&&(0,Et.jsxs)("button",{onClick:function(){return In(!0)},className:"command-hint-button",title:"Open command palette (⌘K)",children:[(0,Et.jsx)(f,{size:14}),(0,Et.jsx)("span",{children:"Or press ⌘K for quick access"})]})]}),M.length>0&&(0,Et.jsx)(Pr,{tags:M,selectedTag:z,onTagSelect:Un,loading:K}),(0,Et.jsx)("div",{className:"content",children:_?(0,Et.jsxs)("div",{className:"search-results",children:[(0,Et.jsxs)("div",{className:"search-results-header",children:[(0,Et.jsxs)("h3",{children:["Search Results (",B.length,")"]}),(0,Et.jsx)("button",{onClick:oe,className:"clear-search-btn",children:"Show All Links"})]}),0!==B.length||w?B.map(function(n){return(0,Et.jsx)(dr,{link:n,collections:e.collections,onUpdate:qn,onDelete:Yn,onMoveToCollection:Wn,onAddNote:Gn,onTagsUpdated:Kn},n.id)}):(0,Et.jsx)("div",{className:"no-results",children:(0,Et.jsxs)("p",{children:['No links found for "',i,'"']})})]}):z?(0,Et.jsxs)("div",{className:"tag-results",children:[(0,Et.jsxs)("div",{className:"tag-results-header",children:[(0,Et.jsxs)("h3",{children:[(0,Et.jsx)(p,{size:16}),'Tagged with "',z,'" (',P.length,")"]}),(0,Et.jsx)("button",{onClick:oe,className:"clear-search-btn",children:"Show All Links"})]}),0===P.length?(0,Et.jsx)("div",{className:"no-results",children:(0,Et.jsxs)("p",{children:['No links found with tag "',z,'"']})}):P.map(function(n){return(0,Et.jsx)(Ft,{link:n,collections:e.collections,onUpdate:qn,onDelete:Yn,onMoveToCollection:Wn,onAddNote:Gn,onTagsUpdated:Kn},n.id)})]}):(0,Et.jsxs)(Et.Fragment,{children:[(0,Et.jsxs)("div",{className:"section inbox-section",children:[(0,Et.jsxs)("div",{className:"inbox-section-header",children:[(0,Et.jsxs)("div",{className:"inbox-section-title",children:[(0,Et.jsxs)("button",{onClick:function(){return $n("inbox")},className:"section-header",style:{padding:0,background:"none",border:"none"},children:[q.inbox?(0,Et.jsx)(h,{size:16}):(0,Et.jsx)(g,{size:16}),(0,Et.jsx)(m,{size:16}),(0,Et.jsx)("span",{children:"Inbox"})]}),(0,Et.jsx)("span",{className:"inbox-count",children:Cn.length})]}),Cn.length>0&&(0,Et.jsxs)("div",{className:"inbox-actions",children:[(0,Et.jsxs)("button",{onClick:function(){En.length===Cn.length?kn([]):kn(Cn.map(function(n){return n.id}))},className:"inbox-action-button",title:En.length===Cn.length?"Deselect all":"Select all",children:[(0,Et.jsx)(b,{size:14}),En.length===Cn.length?"Deselect All":"Select All"]}),En.length>0&&(0,Et.jsxs)(Et.Fragment,{children:[(0,Et.jsxs)("button",{onClick:function(){return Xn()},className:"inbox-action-button",title:"Move selected to holding area",children:[(0,Et.jsx)(x,{size:14}),"Move to Holding (",En.length,")"]}),(0,Et.jsxs)("select",{onChange:function(n){n.target.value&&(Xn(n.target.value),n.target.value="")},className:"inbox-action-button",style:{padding:"6px 8px"},title:"Move selected links to collection","aria-label":"Move selected links to collection",children:[(0,Et.jsx)("option",{value:"",children:"Move to Collection..."}),e.collections.map(function(n){return(0,Et.jsx)("option",{value:n.id,children:n.name},n.id)})]})]})]})]}),q.inbox&&(0,Et.jsx)("div",{className:"section-content",children:jn?(0,Et.jsx)("div",{className:"loading-spinner",children:"Loading inbox..."}):0===Cn.length?(0,Et.jsxs)("div",{className:"inbox-empty",children:[(0,Et.jsx)(m,{className:"inbox-empty-icon"}),(0,Et.jsx)("h3",{children:"Inbox is empty"}),(0,Et.jsx)("p",{children:"New saves will appear here for quick organization"})]}):Cn.map(function(n){return(0,Et.jsx)(hr,{link:n,collections:e.collections,onMoveFromInbox:Hn,onDelete:Yn,onUpdate:qn,onAddNote:Gn,onTagsUpdated:Kn,isSelected:En.includes(n.id),onSelect:Zn},n.id)})})]}),(0,Et.jsxs)("div",{className:"section",children:[(0,Et.jsxs)("button",{onClick:function(){return $n("holdingArea")},className:"section-header",children:[q.holdingArea?(0,Et.jsx)(h,{size:16}):(0,Et.jsx)(g,{size:16}),(0,Et.jsx)("span",{children:"Holding Area"}),(0,Et.jsx)("span",{className:"count",children:ae.length})]}),q.holdingArea&&(0,Et.jsx)("div",{className:"section-content",children:0===ae.length?(0,Et.jsxs)("div",{className:"empty-state",children:[(0,Et.jsx)("p",{children:"No links saved yet"}),(0,Et.jsx)("button",{onClick:Fn,className:"empty-action",children:"Save current page"})]}):ae.map(function(n){return(0,Et.jsx)(Ft,{link:n,collections:e.collections,onUpdate:qn,onDelete:Yn,onMoveToCollection:Wn,onAddNote:Gn,onTagsUpdated:Kn},n.id)})})]}),(0,Et.jsxs)("div",{className:"section",children:[(0,Et.jsxs)("button",{onClick:function(){return $n("collections")},className:"section-header",children:[q.collections?(0,Et.jsx)(h,{size:16}):(0,Et.jsx)(g,{size:16}),(0,Et.jsx)("span",{children:"Collections"}),(0,Et.jsx)("span",{className:"count",children:e.collections.length}),(0,Et.jsx)("button",{onClick:function(n){n.stopPropagation(),nn(!0)},className:"add-collection-button",title:"Create new collection",children:(0,Et.jsx)(y,{size:14})})]}),q.collections&&(0,Et.jsx)("div",{className:"section-content",children:0===e.collections.length?(0,Et.jsxs)("div",{className:"empty-state",children:[(0,Et.jsx)("p",{children:"No collections yet"}),(0,Et.jsx)("button",{onClick:function(){return nn(!0)},className:"empty-action",children:"Create collection"})]}):e.collections.map(function(n){var e,t=(e=n.id,ie.filter(function(n){return n.collectionId===e}));return(0,Et.jsx)(ur,{collection:n,links:t,onUpdateLink:qn,onDeleteLink:Yn,onAddNote:Gn,onTagsUpdated:Kn,onUpdate:Rn},n.id)})})]})]})}),(0,Et.jsxs)("div",{className:"footer",children:[(0,Et.jsx)("button",{onClick:function(){return rn(!0)},className:"footer-button",title:"Settings",children:(0,Et.jsx)(C,{size:16})}),(0,Et.jsxs)("span",{className:"footer-text",children:[e.links.length," links • ",M.length," tags"]})]}),H&&G&&(0,Et.jsx)(Ir,{link:G,onSave:Qn,onClose:function(){Z(!1),Q(null)}}),J&&(0,Et.jsx)(Or,{onSave:Vn,onClose:function(){return nn(!1)}}),tn&&(0,Et.jsx)(to,{onClose:function(){return rn(!1)}}),(0,Et.jsx)(xr,{isOpen:Nn,onClose:function(){return In(!1)},links:e.links,collections:e.collections,onOpenLink:function(n){window.open(n,"_blank")},onAddToCollection:Wn,onCreateCollection:function(){nn(!0)},onSaveCurrentPage:Fn,onAddNote:Gn,onOpenTabSync:function(){return On(!0)}}),(0,Et.jsx)(_r,{isOpen:Tn,onClose:function(){return On(!1)},collections:e.collections,onSaveTabs:Jn})]}):(0,Et.jsxs)("div",{className:"sidepanel auth-container",children:[(0,Et.jsx)("div",{className:"header",children:(0,Et.jsxs)("div",{className:"header-title",children:[(0,Et.jsx)(s,{className:"header-icon"}),(0,Et.jsx)("h1",{children:"Nest"})]})}),(0,Et.jsxs)("div",{className:"auth-form",children:[(0,Et.jsx)("h2",{children:"Sign In"}),(0,Et.jsx)("p",{children:"Enter your email to receive a magic login link."}),(0,Et.jsxs)("form",{onSubmit:ne,children:[(0,Et.jsx)("input",{type:"email",placeholder:"Your email",value:An,onChange:function(n){return fn(n.target.value)},className:"auth-input"}),(0,Et.jsx)("button",{type:"submit",className:"auth-button",disabled:hn,children:hn?"Sending...":"Send Magic Link"})]}),bn&&(0,Et.jsx)("p",{className:"auth-message",children:bn})]})]})};var No=document.getElementById("root");(0,o.H)(No).render((0,Et.jsx)(_o,{}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,