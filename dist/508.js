/*! For license information please see 508.js.LICENSE.txt */
"use strict";(self.webpackChunknest_chrome_extension=self.webpackChunknest_chrome_extension||[]).push([[508],{508:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach(function(t){c(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function a(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=l(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function c(e,t,n){return(t=b(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e){return function(e){if(Array.isArray(e))return d(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||l(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return c}}(e,t)||l(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){if(e){if("string"==typeof e)return d(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(e,t):void 0}}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function f(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function i(n,r,o,i){var s=r&&r.prototype instanceof c?r:c,u=Object.create(s.prototype);return p(u,"_invoke",function(n,r,o){var i,c,s,u=0,l=o||[],d=!1,f={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(t,n){return i=t,c=0,s=e,f.n=n,a}};function p(n,r){for(c=n,s=r,t=0;!d&&u&&!o&&t<l.length;t++){var o,i=l[t],p=f.p,h=i[2];n>3?(o=h===r)&&(s=i[(c=i[4])?5:(c=3,3)],i[4]=i[5]=e):i[0]<=p&&((o=n<2&&p<i[1])?(c=0,f.v=r,f.n=i[1]):p<h&&(o=n<3||i[0]>r||r>h)&&(i[4]=n,i[5]=r,f.n=h,c=0))}if(o||n>1)return a;throw d=!0,r}return function(o,l,h){if(u>1)throw TypeError("Generator is already running");for(d&&1===l&&p(l,h),c=l,s=h;(t=c<2?e:s)||!d;){i||(c?c<3?(c>1&&(f.n=-1),p(c,s)):f.n=s:f.v=s);try{if(u=2,i){if(c||(o="next"),t=i[o]){if(!(t=t.call(i,s)))throw TypeError("iterator result is not an object");if(!t.done)return t;s=t.value,c<2&&(c=0)}else 1===c&&(t=i.return)&&t.call(i),c<2&&(s=TypeError("The iterator does not provide a '"+o+"' method"),c=1);i=e}else if((t=(d=f.n<0)?s:n.call(r,f))!==a)break}catch(t){i=e,c=1,s=t}finally{u=1}}return{value:t,done:d}}}(n,o,i),!0),u}var a={};function c(){}function s(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(p(t={},r,function(){return this}),t),d=u.prototype=c.prototype=Object.create(l);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,p(e,o,"GeneratorFunction")),e.prototype=Object.create(d),e}return s.prototype=u,p(d,"constructor",u),p(u,"constructor",s),s.displayName="GeneratorFunction",p(u,o,"GeneratorFunction"),p(d),p(d,o,"Generator"),p(d,r,function(){return this}),p(d,"toString",function(){return"[object Generator]"}),(f=function(){return{w:i,m:h}})()}function p(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}p=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var i=function(t,n){p(e,t,function(e){return this._invoke(t,n,e)})};i("next",0),i("throw",1),i("return",2)}},p(e,t,n,r)}function h(e,t,n,r,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,o)}function m(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){h(i,r,o,a,c,"next",e)}function c(e){h(i,r,o,a,c,"throw",e)}a(void 0)})}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,b(r.key),r)}}function v(e,t,n){return t&&g(e.prototype,t),n&&g(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function b(e){var t=function(e){if("object"!=r(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==r(t)?t:t+""}n.r(t),n.d(t,{AIService:()=>w,aiService:()=>A,createAIService:()=>k});var w=function(){return v(function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};y(this,e),this.apiKey=t.apiKey||"",this.model=t.model||"gpt-3.5-turbo"},[{key:"analyzeContent",value:(i=m(f().m(function e(t,n,r){var o,i;return f().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generateRuleBasedAnalysis(t,n,r));case 1:return e.p=1,e.n=2,this.callOpenAIForAnalysis(t,n,r);case 2:return o=e.v,e.a(2,o);case 3:return e.p=3,i=e.v,console.error("AI analysis failed, falling back to rule-based:",i),e.a(2,this.generateRuleBasedAnalysis(t,n,r))}},e,this,[[1,3]])})),function(e,t,n){return i.apply(this,arguments)})},{key:"generateSummary",value:(o=m(f().m(function e(t,n,r){var o,i;return f().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generatePlaceholderSummary(t,n,r));case 1:return e.p=1,e.n=2,this.callOpenAI(t,n,r);case 2:return o=e.v,e.a(2,o);case 3:return e.p=3,i=e.v,console.error("AI summary generation failed:",i),e.a(2,this.generatePlaceholderSummary(t,n,r))}},e,this,[[1,3]])})),function(e,t,n){return o.apply(this,arguments)})},{key:"generateRuleBasedAnalysis",value:function(e,t,n){var r=new URL(n).hostname,o=e.toLowerCase(),i=t.toLowerCase(),a="".concat(i," ").concat(o),c=this.detectContentType(r,t,e),s=this.generateRuleBasedTags(a,r,c),u=this.generateRuleBasedCategories(a,r,c),l=this.extractTopics(a),d=this.estimateComplexity(e),f=this.estimateReadingTime(e);return{summary:this.generatePlaceholderSummary(e,t,n),tagSuggestions:s,categorySuggestions:u,contentType:c,topics:l,complexity:d,readingTime:f}}},{key:"detectContentType",value:function(e,t,n){var r=t.toLowerCase(),o=n.toLowerCase();return e.includes("youtube.com")||e.includes("vimeo.com")||e.includes("twitch.tv")?"video":e.includes("docs.")||r.includes("documentation")||o.includes("api reference")||o.includes("getting started")?"documentation":r.includes("tutorial")||r.includes("how to")||r.includes("guide")||o.includes("step by step")?"tutorial":e.includes("news")||e.includes("cnn.com")||e.includes("bbc.com")||e.includes("techcrunch.com")||e.includes("reuters.com")?"news":e.includes("medium.com")||e.includes("blog")||r.includes("thoughts on")||o.includes("published")?"blog":e.includes("arxiv.org")||e.includes("scholar.google")||r.includes("research")||o.includes("abstract")?"research":e.includes("github.com")||r.includes("tool")||r.includes("app")||o.includes("download")?"tool":r.includes("reference")||r.includes("cheat sheet")||o.includes("quick reference")?"reference":"article"}},{key:"generateRuleBasedTags",value:function(e,t,n){for(var r=[],o=0,i=Object.entries({"github.com":[{tag:"github",confidence:.9,reason:"GitHub repository"}],"stackoverflow.com":[{tag:"programming",confidence:.8,reason:"Stack Overflow content"}],"medium.com":[{tag:"blog",confidence:.7,reason:"Medium article"}],"youtube.com":[{tag:"video",confidence:.9,reason:"YouTube video"}],"linkedin.com":[{tag:"career",confidence:.7,reason:"LinkedIn content"}]});o<i.length;o++){var a=u(i[o],2),c=a[0],l=a[1];t.includes(c)&&r.push.apply(r,s(l))}for(var d=0,f=Object.entries({javascript:["javascript","js","node.js","react","vue","angular"],python:["python","django","flask","pandas","numpy"],"web-development":["html","css","frontend","backend","full-stack"],"machine-learning":["ml","ai","neural network","deep learning","tensorflow"],"data-science":["data science","analytics","visualization","statistics"],mobile:["android","ios","react native","flutter","mobile app"],devops:["docker","kubernetes","aws","cloud","deployment"],database:["sql","postgresql","mongodb","database design"],security:["cybersecurity","encryption","vulnerability","penetration testing"]});d<f.length;d++){var p=u(f[d],2),h=p[0],m=p[1].filter(function(t){return e.includes(t)}).length;if(m>0){var y=Math.min(.9,.4+.1*m);r.push({tag:h,confidence:y,reason:"Found ".concat(m," related keyword(s)")})}}r.push({tag:n||"general",confidence:.6,reason:"Detected as ".concat(n," content")}),(e.includes("beginner")||e.includes("getting started"))&&r.push({tag:"beginner",confidence:.7,reason:"Beginner-friendly content"}),(e.includes("advanced")||e.includes("expert"))&&r.push({tag:"advanced",confidence:.7,reason:"Advanced content"});for(var g=0,v=["productivity","business","startup","marketing","sales","finance"];g<v.length;g++){var b=v[g];e.includes(b)&&r.push({tag:b,confidence:.6,reason:"Content related to ".concat(b)})}return r.filter(function(e,t,n){return n.findIndex(function(t){return t.tag===e.tag})===t}).sort(function(e,t){return t.confidence-e.confidence}).slice(0,8)}},{key:"generateRuleBasedCategories",value:function(e,t,n){var r=[];return(e.includes("work")||e.includes("job")||e.includes("career")||e.includes("professional")||e.includes("business"))&&r.push({category:"work",confidence:.8,reason:"Contains work-related content"}),("tutorial"===n||"documentation"===n||e.includes("learn")||e.includes("education")||e.includes("course"))&&r.push({category:"learning",confidence:.9,reason:"Educational content detected"}),(e.includes("hobby")||e.includes("personal")||e.includes("lifestyle")||e.includes("entertainment"))&&r.push({category:"personal",confidence:.7,reason:"Personal interest content"}),(t.includes("github.com")||t.includes("stackoverflow.com")||e.includes("programming")||e.includes("development"))&&r.push({category:"work",confidence:.8,reason:"Technical/development content"}),("news"===n||e.includes("breaking")||e.includes("update"))&&r.push({category:"general",confidence:.7,reason:"News or current events"}),0===r.length&&r.push({category:"general",confidence:.5,reason:"General content"}),r.sort(function(e,t){return t.confidence-e.confidence})}},{key:"extractTopics",value:function(e){return["artificial intelligence","machine learning","web development","mobile development","data science","cybersecurity","cloud computing","blockchain","cryptocurrency","startup","productivity","leadership","design","marketing","sales","programming","software engineering","devops","database","frontend","backend","full-stack","api","microservices","architecture"].filter(function(t){return e.includes(t)}).slice(0,5)}},{key:"estimateComplexity",value:function(e){var t=e.toLowerCase(),n=["algorithm","architecture","optimization","scalability","performance"].filter(function(e){return t.includes(e)}).length,r=["introduction","basics","getting started","beginner","simple"].filter(function(e){return t.includes(e)}).length,o=["advanced","expert","complex","sophisticated","enterprise"].filter(function(e){return t.includes(e)}).length;return r>0||0===n?"beginner":o>1||n>3?"advanced":"intermediate"}},{key:"estimateReadingTime",value:function(e){var t=e.split(/\s+/).length;return Math.max(1,Math.round(t/200))}},{key:"callOpenAIForAnalysis",value:(r=m(f().m(function e(t,n,r){var o,i,a,c,s,u,l;return f().w(function(e){for(;;)switch(e.n){case 0:return i='Analyze this web content and provide a JSON response with the following structure:\n\n{\n  "summary": "1-2 sentence summary",\n  "tagSuggestions": [\n    {"tag": "tag-name", "confidence": 0.8, "reason": "why this tag fits"}\n  ],\n  "categorySuggestions": [\n    {"category": "work|learning|personal|general", "confidence": 0.9, "reason": "explanation"}\n  ],\n  "contentType": "article|tutorial|documentation|video|tool|reference|blog|news|research|other",\n  "topics": ["main", "topics", "covered"],\n  "complexity": "beginner|intermediate|advanced",\n  "readingTime": 5\n}\n\nContent to analyze:\nTitle: '.concat(n,"\nURL: ").concat(r,"\nContent: ").concat(t.substring(0,2e3),"...\n\nFocus on:\n- Relevant, specific tags (technology, skills, domains)\n- Appropriate category (work/learning/personal/general)\n- Content type and complexity\n- Main topics and themes"),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:i}],max_tokens:500,temperature:.3})});case 1:return a=e.v,e.n=2,a.json();case 2:if(c=e.v,!(s=null===(o=c.choices[0])||void 0===o||null===(o=o.message)||void 0===o?void 0:o.content)){e.n=5;break}return e.p=3,u=JSON.parse(s),e.a(2,{summary:u.summary,tagSuggestions:u.tagSuggestions||[],categorySuggestions:u.categorySuggestions||[],contentType:u.contentType,topics:u.topics||[],complexity:u.complexity,readingTime:u.readingTime});case 4:e.p=4,l=e.v,console.error("Failed to parse AI response:",l);case 5:return e.a(2,this.generateRuleBasedAnalysis(t,n,r))}},e,this,[[3,4]])})),function(e,t,n){return r.apply(this,arguments)})},{key:"callOpenAI",value:(n=m(f().m(function e(t,n,r){var o,i,a,c;return f().w(function(e){for(;;)switch(e.n){case 0:return i="Summarize this web page in 1-2 sentences:\nTitle: ".concat(n,"\nURL: ").concat(r,"\nContent: ").concat(t.substring(0,1e3),"..."),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:i}],max_tokens:100,temperature:.3})});case 1:return a=e.v,e.n=2,a.json();case 2:return c=e.v,e.a(2,(null===(o=c.choices[0])||void 0===o||null===(o=o.message)||void 0===o?void 0:o.content)||this.generatePlaceholderSummary(t,n,r))}},e,this)})),function(e,t,r){return n.apply(this,arguments)})},{key:"generatePlaceholderSummary",value:function(e,t,n){var r=new URL(n).hostname,o=e.length;return r.includes("github.com")?"GitHub repository or project page: ".concat(t):r.includes("stackoverflow.com")?"Stack Overflow discussion about programming or technical topics":r.includes("medium.com")||r.includes("blog")?"Blog article: ".concat(t.substring(0,50),"..."):r.includes("youtube.com")?"Video content: ".concat(t):r.includes("news")||r.includes("article")?"News article from ".concat(r):"Web page from ".concat(r," (").concat(Math.round(o/100)," paragraphs)")}},{key:"updateApiKey",value:function(e){this.apiKey=e}},{key:"generateSmartCollectionSuggestions",value:(t=m(f().m(function e(t){var n,r,o,i,a,c,s,l,d,p,h,m,y,g,v;return f().w(function(e){for(;;)if(0===e.n){for(n=this.analyzeDomains(t),r=this.analyzeTopics(t),o=this.analyzeTimePatterns(t),i=[],a=new Date,c=0,s=Object.entries(n);c<s.length;c++)l=u(s[c],2),d=l[0],(p=l[1])>=3&&i.push({id:"domain-".concat(d.replace(/\./g,"-")),name:"📌 ".concat(this.getDomainDisplayName(d)),description:"Links from ".concat(d," (").concat(p," links)"),query:"domain LIKE '%".concat(d,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getDomainIcon(d),color:this.getDomainColor(d),filters:{domains:[d]},createdAt:a,updatedAt:a});for(h=0,m=Object.entries(r);h<m.length;h++)y=u(m[h],2),g=y[0],(v=y[1])>=2&&i.push({id:"topic-".concat(g.toLowerCase().replace(/\s+/g,"-")),name:"🎯 ".concat(g),description:"Content related to ".concat(g.toLowerCase()," (").concat(v," links)"),query:"title ILIKE '%".concat(g,"%' OR user_note ILIKE '%").concat(g,"%' OR ai_summary ILIKE '%").concat(g,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getTopicIcon(g),color:this.getTopicColor(g),createdAt:a,updatedAt:a});return o.recentActivity>5&&i.push({id:"recent-activity",name:"🔥 Recent Activity",description:"Links saved in the last 3 days",query:"created_at >= now() - interval '3 days'",isSystem:!0,autoUpdate:!0,icon:"🔥",color:"#ef4444",filters:{dateRange:{start:new Date(Date.now()-2592e5)}},createdAt:a,updatedAt:a}),e.a(2,i.slice(0,8))}},e,this)})),function(e){return t.apply(this,arguments)})},{key:"analyzeDomains",value:function(e){var t={};return e.forEach(function(e){var n=e.domain;t[n]=(t[n]||0)+1}),Object.fromEntries(Object.entries(t).sort(function(e,t){var n=u(e,2)[1];return u(t,2)[1]-n}).slice(0,10))}},{key:"analyzeTopics",value:function(e){var t={},n=["React","JavaScript","TypeScript","Python","Node.js","API","Database","Machine Learning","AI","Design","UI/UX","CSS","HTML","Backend","Frontend","DevOps","Cloud","AWS","Docker","Kubernetes","Git","Testing","Security","Performance","Mobile","iOS","Android","Tutorial","Guide","Documentation","Tool","Framework","Library"];return e.forEach(function(e){var r="".concat(e.title," ").concat(e.userNote," ").concat(e.aiSummary||"").toLowerCase();n.forEach(function(e){r.includes(e.toLowerCase())&&(t[e]=(t[e]||0)+1)})}),Object.fromEntries(Object.entries(t).sort(function(e,t){var n=u(e,2)[1];return u(t,2)[1]-n}).slice(0,8))}},{key:"analyzeTimePatterns",value:function(e){var t=new Date,n=new Date(t.getTime()-2592e5),r=e.filter(function(e){return e.createdAt>=n}).length,o={};return e.forEach(function(e){var t=e.createdAt.toLocaleDateString("en-US",{weekday:"long"});o[t]=(o[t]||0)+1}),{recentActivity:r,weeklyPattern:o}}},{key:"getDomainDisplayName",value:function(e){return{"github.com":"GitHub","stackoverflow.com":"Stack Overflow","medium.com":"Medium","youtube.com":"YouTube","twitter.com":"Twitter","linkedin.com":"LinkedIn","reddit.com":"Reddit","dev.to":"Dev.to","hashnode.com":"Hashnode","docs.google.com":"Google Docs"}[e]||e.replace("www.","").split(".")[0]}},{key:"getDomainIcon",value:function(e){return{"github.com":"⭐","stackoverflow.com":"💬","medium.com":"✍️","youtube.com":"📺","twitter.com":"🐦","linkedin.com":"💼","reddit.com":"🤖","dev.to":"👨‍💻","hashnode.com":"📝","docs.google.com":"📄"}[e]||"🌐"}},{key:"getDomainColor",value:function(e){return{"github.com":"#24292e","stackoverflow.com":"#f48024","medium.com":"#00ab6c","youtube.com":"#ff0000","twitter.com":"#1da1f2","linkedin.com":"#0077b5","reddit.com":"#ff4500","dev.to":"#0a0a0a","hashnode.com":"#2962ff","docs.google.com":"#4285f4"}[e]||"#6b7280"}},{key:"getTopicIcon",value:function(e){return{React:"⚛️",JavaScript:"🟨",TypeScript:"🔷",Python:"🐍","Node.js":"🟢",API:"🔌",Database:"🗄️","Machine Learning":"🤖",AI:"🧠",Design:"🎨","UI/UX":"✨",CSS:"🎨",HTML:"📄",Backend:"⚙️",Frontend:"🖥️",DevOps:"🔧",Cloud:"☁️",AWS:"🟠",Docker:"🐳",Security:"🔒",Mobile:"📱",Tutorial:"📚",Tool:"🛠️"}[e]||"🏷️"}},{key:"getTopicColor",value:function(e){return{React:"#61dafb",JavaScript:"#f7df1e",TypeScript:"#3178c6",Python:"#3776ab","Node.js":"#339933",API:"#ff6b6b",Database:"#336791","Machine Learning":"#ff9500",AI:"#8b5cf6",Design:"#e91e63","UI/UX":"#9c27b0",CSS:"#1572b6",HTML:"#e34f26",Backend:"#4caf50",Frontend:"#2196f3",DevOps:"#ff5722",Cloud:"#607d8b",Security:"#795548",Mobile:"#00bcd4",Tutorial:"#ff9800",Tool:"#607d8b"}[e]||"#6b7280"}},{key:"analyzeForSmartCollections",value:(e=m(f().m(function e(t){var n,r,o,i,a,c,s,u;return f().w(function(e){for(;;)if(0===e.n)return n="".concat(t.title," ").concat(t.userNote," ").concat(t.aiSummary||"").toLowerCase(),r=t.domain,o=[],i=[],a={},(c=["ai","artificial intelligence","machine learning","ml","neural","deep learning"].filter(function(e){return n.includes(e)}).length)>0&&(o.push("ai-related"),i.push("AI"),a.ai=c),(s=["tutorial","how to","guide","walkthrough","step by step"].filter(function(e){return n.includes(e)}).length)>0&&(o.push("tutorials"),i.push("tutorial"),a.tutorial=s),r.includes("github.com")&&(o.push("github-repos"),i.push("github","repository"),a.github=1),(u=(Date.now()-t.createdAt.getTime())/864e5)<=7&&(o.push("recent-reads"),a.recent=Math.max(0,7-u)/7),t.userNote&&""!==t.userNote.trim()||(o.push("unread"),a.unread=1),e.a(2,{matchingCollections:o,suggestedTags:i,contentSignals:a})},e)})),function(t){return e.apply(this,arguments)})}]);var e,t,n,r,o,i}(),k=function(e){return e?new S(e):{generateInsights:function(){return m(f().m(function e(){return f().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateQuestions:function(){return m(f().m(function e(){return f().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateFlashcards:function(){return m(f().m(function e(){return f().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},findCrossReferences:function(){return m(f().m(function e(){return f().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateRecommendations:function(){return m(f().m(function e(){return f().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},updateKnowledgeGraph:function(e){return m(f().m(function e(){return f().w(function(e){for(;;)if(0===e.n)return e.a(2,{nodes:[],edges:[],lastUpdated:Date.now()})},e)}))()},extractKeyTopics:function(){return m(f().m(function e(){return f().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},calculateKnowledgeGrowth:function(){return 0}}},S=function(){return v(function e(t){y(this,e),c(this,"baseURL","https://api.openai.com/v1"),this.apiKey=t},[{key:"generateInsights",value:(d=m(f().m(function e(t){var n,r,o,i,a;return f().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n="text"in t?t.text:"".concat(t.title," - ").concat(t.description||""),r=t.url,o='Analyze this content and generate 3 types of insights:\n1. A thought-provoking question\n2. A key summary point\n3. A potential connection to other topics\n\nContent: "'.concat(n,'"\nURL: ').concat(r,"\n\nReturn as JSON array with objects containing: type, content, metadata"),e.n=2,this.callOpenAI(o);case 2:return i=e.v,e.a(2,this.parseInsights(i));case 3:return e.p=3,a=e.v,console.error("Error generating insights:",a),e.a(2,[])}},e,this,[[1,3]])})),function(e){return d.apply(this,arguments)})},{key:"generateQuestions",value:(l=m(f().m(function e(t){var n,r,o,i,a=arguments;return f().w(function(e){for(;;)switch(e.n){case 0:if(n=a.length>1&&void 0!==a[1]?a[1]:"medium",this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,r="Generate 3 ".concat(n,' level questions based on this content that would help with retention and understanding:\n\nContent: "').concat(t,'"\n\nQuestions should be:\n- ').concat("easy"===n?"Recall-based, asking for basic facts":"","\n- ").concat("medium"===n?"Application-based, asking how concepts apply":"","\n- ").concat("hard"===n?"Analysis-based, asking for evaluation and synthesis":"",'\n\nReturn as JSON array with type: "question", content: "the question", metadata: {difficulty, topic}'),e.n=2,this.callOpenAI(r);case 2:return o=e.v,e.a(2,this.parseInsights(o));case 3:return e.p=3,i=e.v,console.error("Error generating questions:",i),e.a(2,[])}},e,this,[[1,3]])})),function(e){return l.apply(this,arguments)})},{key:"generateFlashcards",value:(s=m(f().m(function e(t){var n,r,o;return f().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n='Create 3 flashcard pairs from this content. Each should have a question/prompt and answer:\n\nContent: "'.concat(t,'"\n\nReturn as JSON array with type: "flashcard", content: "Question: [question]\nAnswer: [answer]", metadata: {topic}'),e.n=2,this.callOpenAI(n);case 2:return r=e.v,e.a(2,this.parseInsights(r));case 3:return e.p=3,o=e.v,console.error("Error generating flashcards:",o),e.a(2,[])}},e,this,[[1,3]])})),function(e){return s.apply(this,arguments)})},{key:"findCrossReferences",value:(o=m(f().m(function e(t,n){var r,o,i,a,c;return f().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey&&0!==n.length){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,r="text"in t?t.text:"".concat(t.title," - ").concat(t.description||""),o=n.filter(function(e){return e.id!==t.id}).slice(0,10),i='Analyze the main item and find potential relationships with other items:\n\nMain item: "'.concat(r,'"\n\nOther items:\n').concat(o.map(function(e,t){return"".concat(t+1,". ").concat(e.id,": ").concat("text"in e?e.text:"".concat(e.title," - ").concat(e.description||""))}).join("\n"),'\n\nFor each relationship found, return JSON with:\n- targetId: the item ID\n- relationshipType: "related" | "contradicts" | "supports" | "cites" | "builds-on"\n- strength: 0-1 confidence score\n- note: brief explanation\n\nOnly return relationships with strength > 0.3'),e.n=2,this.callOpenAI(i);case 2:return a=e.v,e.a(2,this.parseCrossReferences(a,t.id));case 3:return e.p=3,c=e.v,console.error("Error finding cross references:",c),e.a(2,[])}},e,this,[[1,3]])})),function(e,t){return o.apply(this,arguments)})},{key:"generateRecommendations",value:(r=m(f().m(function e(t){var n,r,o,i,a;return f().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n=t.slice(-10),e.n=2,this.extractKeyTopics(n.map(function(e){return"text"in e?e.text:"".concat(e.title," - ").concat(e.description||"")}).join(" "));case 2:return r=e.v,o="Based on the user's reading history and interests, suggest 5 content recommendations:\n\nRecent reading topics: ".concat(r.join(", "),"\n\nRecent items:\n").concat(n.map(function(e){return"text"in e?'Highlight: "'.concat(e.text,'"'):'Link: "'.concat(e.title,'"')}).join("\n"),'\n\nSuggest:\n1. Specific topics to explore next\n2. Types of content that would complement their reading\n3. Areas for deeper study\n\nReturn as JSON array with type: "recommendation", content: suggestion, metadata: {topic, confidence}'),e.n=3,this.callOpenAI(o);case 3:return i=e.v,e.a(2,this.parseInsights(i));case 4:return e.p=4,a=e.v,console.error("Error generating recommendations:",a),e.a(2,[])}},e,this,[[1,4]])})),function(e){return r.apply(this,arguments)})},{key:"updateKnowledgeGraph",value:(n=m(f().m(function e(t){var n,r,o,i,c,s,u,l,d;return f().w(function(e){for(;;)switch(e.n){case 0:n=[],r=[],o=new Map,i=a(t),e.p=1,i.s();case 2:if((c=i.n()).done){e.n=5;break}return s=c.value,u="text"in s?s.text:"".concat(s.title," - ").concat(s.description||""),e.n=3,this.extractKeyTopics(u);case 3:l=e.v,n.push({id:s.id,type:"text"in s?"highlight":"link",label:"text"in s?s.text.slice(0,50)+"...":s.title,weight:1,metadata:{topics:l}}),l.forEach(function(e){o.set(e,(o.get(e)||0)+1)});case 4:e.n=2;break;case 5:e.n=7;break;case 6:e.p=6,d=e.v,i.e(d);case 7:return e.p=7,i.f(),e.f(7);case 8:return o.forEach(function(e,t){e>1&&n.push({id:"topic-".concat(t),type:"topic",label:t,weight:e,metadata:{frequency:e}})}),e.a(2,{nodes:n,edges:r,lastUpdated:Date.now()})}},e,this,[[1,6,7,8]])})),function(e){return n.apply(this,arguments)})},{key:"extractKeyTopics",value:(t=m(f().m(function e(t){var n,r,o,i,a;return f().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return n=t.toLowerCase().match(/\b\w+\b/g)||[],r=new Map,n.forEach(function(e){e.length>4&&r.set(e,(r.get(e)||0)+1)}),e.a(2,Array.from(r.entries()).sort(function(e,t){return t[1]-e[1]}).slice(0,5).map(function(e){return u(e,1)[0]}));case 1:return e.p=1,o='Extract 3-5 key topics/themes from this content. Return as comma-separated list:\n\nContent: "'.concat(t.slice(0,1e3),'"'),e.n=2,this.callOpenAI(o);case 2:return i=e.v,e.a(2,i.split(",").map(function(e){return e.trim()}).filter(function(e){return e.length>0}));case 3:return e.p=3,a=e.v,console.error("Error extracting topics:",a),e.a(2,[])}},e,this,[[1,3]])})),function(e){return t.apply(this,arguments)})},{key:"calculateKnowledgeGrowth",value:function(e){if(0===e.length)return 0;var t=e.slice(-7),n=e.slice(-14,-7),r=t.reduce(function(e,t){return e+(t.linksRead||0)+(t.highlightsMade||0)},0),o=n.reduce(function(e,t){return e+(t.linksRead||0)+(t.highlightsMade||0)},0);return 0===o?r>0?1:0:Math.max(0,Math.min(2,r/o))}},{key:"callOpenAI",value:(e=m(f().m(function e(t){var n,r,o;return f().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("".concat(this.baseURL,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"user",content:t}],temperature:.7,max_tokens:500})});case 1:if((r=e.v).ok){e.n=2;break}throw new Error("OpenAI API error: ".concat(r.statusText));case 2:return e.n=3,r.json();case 3:return o=e.v,e.a(2,(null===(n=o.choices[0])||void 0===n||null===(n=n.message)||void 0===n?void 0:n.content)||"")}},e,this)})),function(t){return e.apply(this,arguments)})},{key:"parseInsights",value:function(e){try{var t=JSON.parse(e);return Array.isArray(t)?t.map(function(e){return i(i({id:"insight-".concat(Date.now(),"-").concat(Math.random())},e),{},{createdAt:Date.now()})}):[]}catch(t){return[{id:"insight-".concat(Date.now()),type:"summary",content:e.slice(0,200),createdAt:Date.now()}]}}},{key:"parseCrossReferences",value:function(e,t){try{var n=JSON.parse(e);return Array.isArray(n)?n.map(function(e){return i(i({id:"ref-".concat(Date.now(),"-").concat(Math.random())},e),{},{createdAt:Date.now()})}):[]}catch(e){return[]}}}]);var e,t,n,r,o,s,l,d}(),A=new w({apiKey:""})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,