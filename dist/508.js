/*! For license information please see 508.js.LICENSE.txt */
"use strict";(self.webpackChunknest_chrome_extension=self.webpackChunknest_chrome_extension||[]).push([[508],{508:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return c}}(e,t)||a(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){if(e){if("string"==typeof e)return c(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function s(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function i(n,r,o,i){var s=r&&r.prototype instanceof c?r:c,l=Object.create(s.prototype);return u(l,"_invoke",function(n,r,o){var i,c,s,u=0,l=o||[],d=!1,f={p:0,n:0,v:e,a:m,f:m.bind(e,4),d:function(t,n){return i=t,c=0,s=e,f.n=n,a}};function m(n,r){for(c=n,s=r,t=0;!d&&u&&!o&&t<l.length;t++){var o,i=l[t],m=f.p,p=i[2];n>3?(o=p===r)&&(s=i[(c=i[4])?5:(c=3,3)],i[4]=i[5]=e):i[0]<=m&&((o=n<2&&m<i[1])?(c=0,f.v=r,f.n=i[1]):m<p&&(o=n<3||i[0]>r||r>p)&&(i[4]=n,i[5]=r,f.n=p,c=0))}if(o||n>1)return a;throw d=!0,r}return function(o,l,p){if(u>1)throw TypeError("Generator is already running");for(d&&1===l&&m(l,p),c=l,s=p;(t=c<2?e:s)||!d;){i||(c?c<3?(c>1&&(f.n=-1),m(c,s)):f.n=s:f.v=s);try{if(u=2,i){if(c||(o="next"),t=i[o]){if(!(t=t.call(i,s)))throw TypeError("iterator result is not an object");if(!t.done)return t;s=t.value,c<2&&(c=0)}else 1===c&&(t=i.return)&&t.call(i),c<2&&(s=TypeError("The iterator does not provide a '"+o+"' method"),c=1);i=e}else if((t=(d=f.n<0)?s:n.call(r,f))!==a)break}catch(t){i=e,c=1,s=t}finally{u=1}}return{value:t,done:d}}}(n,o,i),!0),l}var a={};function c(){}function l(){}function d(){}t=Object.getPrototypeOf;var f=[][r]?t(t([][r]())):(u(t={},r,function(){return this}),t),m=d.prototype=c.prototype=Object.create(f);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,u(e,o,"GeneratorFunction")),e.prototype=Object.create(m),e}return l.prototype=d,u(m,"constructor",d),u(d,"constructor",l),l.displayName="GeneratorFunction",u(d,o,"GeneratorFunction"),u(m),u(m,o,"Generator"),u(m,r,function(){return this}),u(m,"toString",function(){return"[object Generator]"}),(s=function(){return{w:i,m:p}})()}function u(e,t,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}u=function(e,t,n,r){if(t)o?o(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var i=function(t,n){u(e,t,function(e){return this._invoke(t,n,e)})};i("next",0),i("throw",1),i("return",2)}},u(e,t,n,r)}function l(e,t,n,r,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,o)}function d(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){l(i,r,o,a,c,"next",e)}function c(e){l(i,r,o,a,c,"throw",e)}a(void 0)})}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,m(r.key),r)}}function m(e){var t=function(e){if("object"!=r(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==r(t)?t:t+""}n.r(t),n.d(t,{AIService:()=>p,aiService:()=>g});var p=function(){return e=function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.apiKey=t.apiKey||"",this.model=t.model||"gpt-3.5-turbo"},t=[{key:"analyzeContent",value:(l=d(s().m(function e(t,n,r){var o,i;return s().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generateRuleBasedAnalysis(t,n,r));case 1:return e.p=1,e.n=2,this.callOpenAIForAnalysis(t,n,r);case 2:return o=e.v,e.a(2,o);case 3:return e.p=3,i=e.v,console.error("AI analysis failed, falling back to rule-based:",i),e.a(2,this.generateRuleBasedAnalysis(t,n,r))}},e,this,[[1,3]])})),function(e,t,n){return l.apply(this,arguments)})},{key:"generateSummary",value:(u=d(s().m(function e(t,n,r){var o,i;return s().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generatePlaceholderSummary(t,n,r));case 1:return e.p=1,e.n=2,this.callOpenAI(t,n,r);case 2:return o=e.v,e.a(2,o);case 3:return e.p=3,i=e.v,console.error("AI summary generation failed:",i),e.a(2,this.generatePlaceholderSummary(t,n,r))}},e,this,[[1,3]])})),function(e,t,n){return u.apply(this,arguments)})},{key:"generateRuleBasedAnalysis",value:function(e,t,n){var r=new URL(n).hostname,o=e.toLowerCase(),i=t.toLowerCase(),a="".concat(i," ").concat(o),c=this.detectContentType(r,t,e),s=this.generateRuleBasedTags(a,r,c),u=this.generateRuleBasedCategories(a,r,c),l=this.extractTopics(a),d=this.estimateComplexity(e),f=this.estimateReadingTime(e);return{summary:this.generatePlaceholderSummary(e,t,n),tagSuggestions:s,categorySuggestions:u,contentType:c,topics:l,complexity:d,readingTime:f}}},{key:"detectContentType",value:function(e,t,n){var r=t.toLowerCase(),o=n.toLowerCase();return e.includes("youtube.com")||e.includes("vimeo.com")||e.includes("twitch.tv")?"video":e.includes("docs.")||r.includes("documentation")||o.includes("api reference")||o.includes("getting started")?"documentation":r.includes("tutorial")||r.includes("how to")||r.includes("guide")||o.includes("step by step")?"tutorial":e.includes("news")||e.includes("cnn.com")||e.includes("bbc.com")||e.includes("techcrunch.com")||e.includes("reuters.com")?"news":e.includes("medium.com")||e.includes("blog")||r.includes("thoughts on")||o.includes("published")?"blog":e.includes("arxiv.org")||e.includes("scholar.google")||r.includes("research")||o.includes("abstract")?"research":e.includes("github.com")||r.includes("tool")||r.includes("app")||o.includes("download")?"tool":r.includes("reference")||r.includes("cheat sheet")||o.includes("quick reference")?"reference":"article"}},{key:"generateRuleBasedTags",value:function(e,t,n){for(var r=[],a=0,c=Object.entries({"github.com":[{tag:"github",confidence:.9,reason:"GitHub repository"}],"stackoverflow.com":[{tag:"programming",confidence:.8,reason:"Stack Overflow content"}],"medium.com":[{tag:"blog",confidence:.7,reason:"Medium article"}],"youtube.com":[{tag:"video",confidence:.9,reason:"YouTube video"}],"linkedin.com":[{tag:"career",confidence:.7,reason:"LinkedIn content"}]});a<c.length;a++){var s=i(c[a],2),u=s[0],l=s[1];t.includes(u)&&r.push.apply(r,o(l))}for(var d=0,f=Object.entries({javascript:["javascript","js","node.js","react","vue","angular"],python:["python","django","flask","pandas","numpy"],"web-development":["html","css","frontend","backend","full-stack"],"machine-learning":["ml","ai","neural network","deep learning","tensorflow"],"data-science":["data science","analytics","visualization","statistics"],mobile:["android","ios","react native","flutter","mobile app"],devops:["docker","kubernetes","aws","cloud","deployment"],database:["sql","postgresql","mongodb","database design"],security:["cybersecurity","encryption","vulnerability","penetration testing"]});d<f.length;d++){var m=i(f[d],2),p=m[0],g=m[1].filter(function(t){return e.includes(t)}).length;if(g>0){var y=Math.min(.9,.4+.1*g);r.push({tag:p,confidence:y,reason:"Found ".concat(g," related keyword(s)")})}}r.push({tag:n||"general",confidence:.6,reason:"Detected as ".concat(n," content")}),(e.includes("beginner")||e.includes("getting started"))&&r.push({tag:"beginner",confidence:.7,reason:"Beginner-friendly content"}),(e.includes("advanced")||e.includes("expert"))&&r.push({tag:"advanced",confidence:.7,reason:"Advanced content"});for(var h=0,v=["productivity","business","startup","marketing","sales","finance"];h<v.length;h++){var b=v[h];e.includes(b)&&r.push({tag:b,confidence:.6,reason:"Content related to ".concat(b)})}return r.filter(function(e,t,n){return n.findIndex(function(t){return t.tag===e.tag})===t}).sort(function(e,t){return t.confidence-e.confidence}).slice(0,8)}},{key:"generateRuleBasedCategories",value:function(e,t,n){var r=[];return(e.includes("work")||e.includes("job")||e.includes("career")||e.includes("professional")||e.includes("business"))&&r.push({category:"work",confidence:.8,reason:"Contains work-related content"}),("tutorial"===n||"documentation"===n||e.includes("learn")||e.includes("education")||e.includes("course"))&&r.push({category:"learning",confidence:.9,reason:"Educational content detected"}),(e.includes("hobby")||e.includes("personal")||e.includes("lifestyle")||e.includes("entertainment"))&&r.push({category:"personal",confidence:.7,reason:"Personal interest content"}),(t.includes("github.com")||t.includes("stackoverflow.com")||e.includes("programming")||e.includes("development"))&&r.push({category:"work",confidence:.8,reason:"Technical/development content"}),("news"===n||e.includes("breaking")||e.includes("update"))&&r.push({category:"general",confidence:.7,reason:"News or current events"}),0===r.length&&r.push({category:"general",confidence:.5,reason:"General content"}),r.sort(function(e,t){return t.confidence-e.confidence})}},{key:"extractTopics",value:function(e){return["artificial intelligence","machine learning","web development","mobile development","data science","cybersecurity","cloud computing","blockchain","cryptocurrency","startup","productivity","leadership","design","marketing","sales","programming","software engineering","devops","database","frontend","backend","full-stack","api","microservices","architecture"].filter(function(t){return e.includes(t)}).slice(0,5)}},{key:"estimateComplexity",value:function(e){var t=e.toLowerCase(),n=["algorithm","architecture","optimization","scalability","performance"].filter(function(e){return t.includes(e)}).length,r=["introduction","basics","getting started","beginner","simple"].filter(function(e){return t.includes(e)}).length,o=["advanced","expert","complex","sophisticated","enterprise"].filter(function(e){return t.includes(e)}).length;return r>0||0===n?"beginner":o>1||n>3?"advanced":"intermediate"}},{key:"estimateReadingTime",value:function(e){var t=e.split(/\s+/).length;return Math.max(1,Math.round(t/200))}},{key:"callOpenAIForAnalysis",value:(c=d(s().m(function e(t,n,r){var o,i,a,c,u,l,d;return s().w(function(e){for(;;)switch(e.n){case 0:return i='Analyze this web content and provide a JSON response with the following structure:\n\n{\n  "summary": "1-2 sentence summary",\n  "tagSuggestions": [\n    {"tag": "tag-name", "confidence": 0.8, "reason": "why this tag fits"}\n  ],\n  "categorySuggestions": [\n    {"category": "work|learning|personal|general", "confidence": 0.9, "reason": "explanation"}\n  ],\n  "contentType": "article|tutorial|documentation|video|tool|reference|blog|news|research|other",\n  "topics": ["main", "topics", "covered"],\n  "complexity": "beginner|intermediate|advanced",\n  "readingTime": 5\n}\n\nContent to analyze:\nTitle: '.concat(n,"\nURL: ").concat(r,"\nContent: ").concat(t.substring(0,2e3),"...\n\nFocus on:\n- Relevant, specific tags (technology, skills, domains)\n- Appropriate category (work/learning/personal/general)\n- Content type and complexity\n- Main topics and themes"),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:i}],max_tokens:500,temperature:.3})});case 1:return a=e.v,e.n=2,a.json();case 2:if(c=e.v,!(u=null===(o=c.choices[0])||void 0===o||null===(o=o.message)||void 0===o?void 0:o.content)){e.n=5;break}return e.p=3,l=JSON.parse(u),e.a(2,{summary:l.summary,tagSuggestions:l.tagSuggestions||[],categorySuggestions:l.categorySuggestions||[],contentType:l.contentType,topics:l.topics||[],complexity:l.complexity,readingTime:l.readingTime});case 4:e.p=4,d=e.v,console.error("Failed to parse AI response:",d);case 5:return e.a(2,this.generateRuleBasedAnalysis(t,n,r))}},e,this,[[3,4]])})),function(e,t,n){return c.apply(this,arguments)})},{key:"callOpenAI",value:(a=d(s().m(function e(t,n,r){var o,i,a,c;return s().w(function(e){for(;;)switch(e.n){case 0:return i="Summarize this web page in 1-2 sentences:\nTitle: ".concat(n,"\nURL: ").concat(r,"\nContent: ").concat(t.substring(0,1e3),"..."),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:i}],max_tokens:100,temperature:.3})});case 1:return a=e.v,e.n=2,a.json();case 2:return c=e.v,e.a(2,(null===(o=c.choices[0])||void 0===o||null===(o=o.message)||void 0===o?void 0:o.content)||this.generatePlaceholderSummary(t,n,r))}},e,this)})),function(e,t,n){return a.apply(this,arguments)})},{key:"generatePlaceholderSummary",value:function(e,t,n){var r=new URL(n).hostname,o=e.length;return r.includes("github.com")?"GitHub repository or project page: ".concat(t):r.includes("stackoverflow.com")?"Stack Overflow discussion about programming or technical topics":r.includes("medium.com")||r.includes("blog")?"Blog article: ".concat(t.substring(0,50),"..."):r.includes("youtube.com")?"Video content: ".concat(t):r.includes("news")||r.includes("article")?"News article from ".concat(r):"Web page from ".concat(r," (").concat(Math.round(o/100)," paragraphs)")}},{key:"updateApiKey",value:function(e){this.apiKey=e}},{key:"generateSmartCollectionSuggestions",value:(r=d(s().m(function e(t){var n,r,o,a,c,u,l,d,f,m,p,g,y,h,v;return s().w(function(e){for(;;)if(0===e.n){for(n=this.analyzeDomains(t),r=this.analyzeTopics(t),o=this.analyzeTimePatterns(t),a=[],c=new Date,u=0,l=Object.entries(n);u<l.length;u++)d=i(l[u],2),f=d[0],(m=d[1])>=3&&a.push({id:"domain-".concat(f.replace(/\./g,"-")),name:"📌 ".concat(this.getDomainDisplayName(f)),description:"Links from ".concat(f," (").concat(m," links)"),query:"domain LIKE '%".concat(f,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getDomainIcon(f),color:this.getDomainColor(f),filters:{domains:[f]},createdAt:c,updatedAt:c});for(p=0,g=Object.entries(r);p<g.length;p++)y=i(g[p],2),h=y[0],(v=y[1])>=2&&a.push({id:"topic-".concat(h.toLowerCase().replace(/\s+/g,"-")),name:"🎯 ".concat(h),description:"Content related to ".concat(h.toLowerCase()," (").concat(v," links)"),query:"title ILIKE '%".concat(h,"%' OR user_note ILIKE '%").concat(h,"%' OR ai_summary ILIKE '%").concat(h,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getTopicIcon(h),color:this.getTopicColor(h),createdAt:c,updatedAt:c});return o.recentActivity>5&&a.push({id:"recent-activity",name:"🔥 Recent Activity",description:"Links saved in the last 3 days",query:"created_at >= now() - interval '3 days'",isSystem:!0,autoUpdate:!0,icon:"🔥",color:"#ef4444",filters:{dateRange:{start:new Date(Date.now()-2592e5)}},createdAt:c,updatedAt:c}),e.a(2,a.slice(0,8))}},e,this)})),function(e){return r.apply(this,arguments)})},{key:"analyzeDomains",value:function(e){var t={};return e.forEach(function(e){var n=e.domain;t[n]=(t[n]||0)+1}),Object.fromEntries(Object.entries(t).sort(function(e,t){var n=i(e,2)[1];return i(t,2)[1]-n}).slice(0,10))}},{key:"analyzeTopics",value:function(e){var t={},n=["React","JavaScript","TypeScript","Python","Node.js","API","Database","Machine Learning","AI","Design","UI/UX","CSS","HTML","Backend","Frontend","DevOps","Cloud","AWS","Docker","Kubernetes","Git","Testing","Security","Performance","Mobile","iOS","Android","Tutorial","Guide","Documentation","Tool","Framework","Library"];return e.forEach(function(e){var r="".concat(e.title," ").concat(e.userNote," ").concat(e.aiSummary||"").toLowerCase();n.forEach(function(e){r.includes(e.toLowerCase())&&(t[e]=(t[e]||0)+1)})}),Object.fromEntries(Object.entries(t).sort(function(e,t){var n=i(e,2)[1];return i(t,2)[1]-n}).slice(0,8))}},{key:"analyzeTimePatterns",value:function(e){var t=new Date,n=new Date(t.getTime()-2592e5),r=e.filter(function(e){return e.createdAt>=n}).length,o={};return e.forEach(function(e){var t=e.createdAt.toLocaleDateString("en-US",{weekday:"long"});o[t]=(o[t]||0)+1}),{recentActivity:r,weeklyPattern:o}}},{key:"getDomainDisplayName",value:function(e){return{"github.com":"GitHub","stackoverflow.com":"Stack Overflow","medium.com":"Medium","youtube.com":"YouTube","twitter.com":"Twitter","linkedin.com":"LinkedIn","reddit.com":"Reddit","dev.to":"Dev.to","hashnode.com":"Hashnode","docs.google.com":"Google Docs"}[e]||e.replace("www.","").split(".")[0]}},{key:"getDomainIcon",value:function(e){return{"github.com":"⭐","stackoverflow.com":"💬","medium.com":"✍️","youtube.com":"📺","twitter.com":"🐦","linkedin.com":"💼","reddit.com":"🤖","dev.to":"👨‍💻","hashnode.com":"📝","docs.google.com":"📄"}[e]||"🌐"}},{key:"getDomainColor",value:function(e){return{"github.com":"#24292e","stackoverflow.com":"#f48024","medium.com":"#00ab6c","youtube.com":"#ff0000","twitter.com":"#1da1f2","linkedin.com":"#0077b5","reddit.com":"#ff4500","dev.to":"#0a0a0a","hashnode.com":"#2962ff","docs.google.com":"#4285f4"}[e]||"#6b7280"}},{key:"getTopicIcon",value:function(e){return{React:"⚛️",JavaScript:"🟨",TypeScript:"🔷",Python:"🐍","Node.js":"🟢",API:"🔌",Database:"🗄️","Machine Learning":"🤖",AI:"🧠",Design:"🎨","UI/UX":"✨",CSS:"🎨",HTML:"📄",Backend:"⚙️",Frontend:"🖥️",DevOps:"🔧",Cloud:"☁️",AWS:"🟠",Docker:"🐳",Security:"🔒",Mobile:"📱",Tutorial:"📚",Tool:"🛠️"}[e]||"🏷️"}},{key:"getTopicColor",value:function(e){return{React:"#61dafb",JavaScript:"#f7df1e",TypeScript:"#3178c6",Python:"#3776ab","Node.js":"#339933",API:"#ff6b6b",Database:"#336791","Machine Learning":"#ff9500",AI:"#8b5cf6",Design:"#e91e63","UI/UX":"#9c27b0",CSS:"#1572b6",HTML:"#e34f26",Backend:"#4caf50",Frontend:"#2196f3",DevOps:"#ff5722",Cloud:"#607d8b",Security:"#795548",Mobile:"#00bcd4",Tutorial:"#ff9800",Tool:"#607d8b"}[e]||"#6b7280"}},{key:"analyzeForSmartCollections",value:(n=d(s().m(function e(t){var n,r,o,i,a,c,u,l;return s().w(function(e){for(;;)if(0===e.n)return n="".concat(t.title," ").concat(t.userNote," ").concat(t.aiSummary||"").toLowerCase(),r=t.domain,o=[],i=[],a={},(c=["ai","artificial intelligence","machine learning","ml","neural","deep learning"].filter(function(e){return n.includes(e)}).length)>0&&(o.push("ai-related"),i.push("AI"),a.ai=c),(u=["tutorial","how to","guide","walkthrough","step by step"].filter(function(e){return n.includes(e)}).length)>0&&(o.push("tutorials"),i.push("tutorial"),a.tutorial=u),r.includes("github.com")&&(o.push("github-repos"),i.push("github","repository"),a.github=1),(l=(Date.now()-t.createdAt.getTime())/864e5)<=7&&(o.push("recent-reads"),a.recent=Math.max(0,7-l)/7),t.userNote&&""!==t.userNote.trim()||(o.push("unread"),a.unread=1),e.a(2,{matchingCollections:o,suggestedTags:i,contentSignals:a})},e)})),function(e){return n.apply(this,arguments)})}],t&&f(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,n,r,a,c,u,l}(),g=new p}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZW5zaW9uLy4vc3JjL3V0aWxzL2FpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFJIHV0aWxpdHkgZnVuY3Rpb25zIGZvciBzdW1tYXJpemF0aW9uLCB0YWdnaW5nLCBhbmQgY2F0ZWdvcml6YXRpb25cbmltcG9ydCB7IEFJVGFnU3VnZ2VzdGlvbiwgQUlDYXRlZ29yeVN1Z2dlc3Rpb24sIEFJQW5hbHlzaXNSZXN1bHQgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQUlDb25maWcge1xuICBhcGlLZXk/OiBzdHJpbmc7XG4gIG1vZGVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQUlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBhcGlLZXk6IHN0cmluZztcbiAgcHJpdmF0ZSBtb2RlbDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQUlDb25maWcgPSB7fSkge1xuICAgIHRoaXMuYXBpS2V5ID0gY29uZmlnLmFwaUtleSB8fCAnJztcbiAgICB0aGlzLm1vZGVsID0gY29uZmlnLm1vZGVsIHx8ICdncHQtMy41LXR1cmJvJztcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGNvbXByZWhlbnNpdmUgQUkgYW5hbHlzaXMgb2YgY29udGVudFxuICAgKi9cbiAgYXN5bmMgYW5hbHl6ZUNvbnRlbnQoY29udGVudDogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IFByb21pc2U8QUlBbmFseXNpc1Jlc3VsdD4ge1xuICAgIGlmICghdGhpcy5hcGlLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlUnVsZUJhc2VkQW5hbHlzaXMoY29udGVudCwgdGl0bGUsIHVybCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jYWxsT3BlbkFJRm9yQW5hbHlzaXMoY29udGVudCwgdGl0bGUsIHVybCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0FJIGFuYWx5c2lzIGZhaWxlZCwgZmFsbGluZyBiYWNrIHRvIHJ1bGUtYmFzZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVSdWxlQmFzZWRBbmFseXNpcyhjb250ZW50LCB0aXRsZSwgdXJsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgc3VtbWFyeSAoZXhpc3RpbmcgZnVuY3Rpb25hbGl0eSlcbiAgICovXG4gIGFzeW5jIGdlbmVyYXRlU3VtbWFyeShjb250ZW50OiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBpZiAoIXRoaXMuYXBpS2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZVBsYWNlaG9sZGVyU3VtbWFyeShjb250ZW50LCB0aXRsZSwgdXJsKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNhbGxPcGVuQUkoY29udGVudCwgdGl0bGUsIHVybCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0FJIHN1bW1hcnkgZ2VuZXJhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVQbGFjZWhvbGRlclN1bW1hcnkoY29udGVudCwgdGl0bGUsIHVybCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJ1bGUtYmFzZWQgY29udGVudCBhbmFseXNpcyB3aXRoIGludGVsbGlnZW50IHRhZyBhbmQgY2F0ZWdvcnkgc3VnZ2VzdGlvbnNcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVSdWxlQmFzZWRBbmFseXNpcyhjb250ZW50OiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogQUlBbmFseXNpc1Jlc3VsdCB7XG4gICAgY29uc3QgZG9tYWluID0gbmV3IFVSTCh1cmwpLmhvc3RuYW1lO1xuICAgIGNvbnN0IGNvbnRlbnRMb3dlciA9IGNvbnRlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCB0aXRsZUxvd2VyID0gdGl0bGUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBmdWxsVGV4dCA9IGAke3RpdGxlTG93ZXJ9ICR7Y29udGVudExvd2VyfWA7XG5cbiAgICAvLyBBbmFseXplIGNvbnRlbnQgdHlwZVxuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gdGhpcy5kZXRlY3RDb250ZW50VHlwZShkb21haW4sIHRpdGxlLCBjb250ZW50KTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSB0YWcgc3VnZ2VzdGlvbnMgYmFzZWQgb24gY29udGVudCBhbmFseXNpc1xuICAgIGNvbnN0IHRhZ1N1Z2dlc3Rpb25zID0gdGhpcy5nZW5lcmF0ZVJ1bGVCYXNlZFRhZ3MoZnVsbFRleHQsIGRvbWFpbiwgY29udGVudFR5cGUpO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIGNhdGVnb3J5IHN1Z2dlc3Rpb25zXG4gICAgY29uc3QgY2F0ZWdvcnlTdWdnZXN0aW9ucyA9IHRoaXMuZ2VuZXJhdGVSdWxlQmFzZWRDYXRlZ29yaWVzKGZ1bGxUZXh0LCBkb21haW4sIGNvbnRlbnRUeXBlKTtcbiAgICBcbiAgICAvLyBFeHRyYWN0IG1haW4gdG9waWNzXG4gICAgY29uc3QgdG9waWNzID0gdGhpcy5leHRyYWN0VG9waWNzKGZ1bGxUZXh0KTtcbiAgICBcbiAgICAvLyBFc3RpbWF0ZSBjb21wbGV4aXR5IGFuZCByZWFkaW5nIHRpbWVcbiAgICBjb25zdCBjb21wbGV4aXR5ID0gdGhpcy5lc3RpbWF0ZUNvbXBsZXhpdHkoY29udGVudCk7XG4gICAgY29uc3QgcmVhZGluZ1RpbWUgPSB0aGlzLmVzdGltYXRlUmVhZGluZ1RpbWUoY29udGVudCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VtbWFyeTogdGhpcy5nZW5lcmF0ZVBsYWNlaG9sZGVyU3VtbWFyeShjb250ZW50LCB0aXRsZSwgdXJsKSxcbiAgICAgIHRhZ1N1Z2dlc3Rpb25zLFxuICAgICAgY2F0ZWdvcnlTdWdnZXN0aW9ucyxcbiAgICAgIGNvbnRlbnRUeXBlLFxuICAgICAgdG9waWNzLFxuICAgICAgY29tcGxleGl0eSxcbiAgICAgIHJlYWRpbmdUaW1lXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlY3QgY29udGVudCB0eXBlIGJhc2VkIG9uIGRvbWFpbiBhbmQgY29udGVudFxuICAgKi9cbiAgcHJpdmF0ZSBkZXRlY3RDb250ZW50VHlwZShkb21haW46IHN0cmluZywgdGl0bGU6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogQUlBbmFseXNpc1Jlc3VsdFsnY29udGVudFR5cGUnXSB7XG4gICAgY29uc3QgdGl0bGVMb3dlciA9IHRpdGxlLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgY29udGVudExvd2VyID0gY29udGVudC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gVmlkZW8gcGxhdGZvcm1zXG4gICAgaWYgKGRvbWFpbi5pbmNsdWRlcygneW91dHViZS5jb20nKSB8fCBkb21haW4uaW5jbHVkZXMoJ3ZpbWVvLmNvbScpIHx8IGRvbWFpbi5pbmNsdWRlcygndHdpdGNoLnR2JykpIHtcbiAgICAgIHJldHVybiAndmlkZW8nO1xuICAgIH1cblxuICAgIC8vIERvY3VtZW50YXRpb24gc2l0ZXNcbiAgICBpZiAoZG9tYWluLmluY2x1ZGVzKCdkb2NzLicpIHx8IHRpdGxlTG93ZXIuaW5jbHVkZXMoJ2RvY3VtZW50YXRpb24nKSB8fCBcbiAgICAgICAgY29udGVudExvd2VyLmluY2x1ZGVzKCdhcGkgcmVmZXJlbmNlJykgfHwgY29udGVudExvd2VyLmluY2x1ZGVzKCdnZXR0aW5nIHN0YXJ0ZWQnKSkge1xuICAgICAgcmV0dXJuICdkb2N1bWVudGF0aW9uJztcbiAgICB9XG5cbiAgICAvLyBUdXRvcmlhbCBpbmRpY2F0b3JzXG4gICAgaWYgKHRpdGxlTG93ZXIuaW5jbHVkZXMoJ3R1dG9yaWFsJykgfHwgdGl0bGVMb3dlci5pbmNsdWRlcygnaG93IHRvJykgfHwgXG4gICAgICAgIHRpdGxlTG93ZXIuaW5jbHVkZXMoJ2d1aWRlJykgfHwgY29udGVudExvd2VyLmluY2x1ZGVzKCdzdGVwIGJ5IHN0ZXAnKSkge1xuICAgICAgcmV0dXJuICd0dXRvcmlhbCc7XG4gICAgfVxuXG4gICAgLy8gTmV3cyBzaXRlc1xuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ25ld3MnKSB8fCBkb21haW4uaW5jbHVkZXMoJ2Nubi5jb20nKSB8fCBkb21haW4uaW5jbHVkZXMoJ2JiYy5jb20nKSB8fFxuICAgICAgICBkb21haW4uaW5jbHVkZXMoJ3RlY2hjcnVuY2guY29tJykgfHwgZG9tYWluLmluY2x1ZGVzKCdyZXV0ZXJzLmNvbScpKSB7XG4gICAgICByZXR1cm4gJ25ld3MnO1xuICAgIH1cblxuICAgIC8vIEJsb2cgaW5kaWNhdG9yc1xuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ21lZGl1bS5jb20nKSB8fCBkb21haW4uaW5jbHVkZXMoJ2Jsb2cnKSB8fCBcbiAgICAgICAgdGl0bGVMb3dlci5pbmNsdWRlcygndGhvdWdodHMgb24nKSB8fCBjb250ZW50TG93ZXIuaW5jbHVkZXMoJ3B1Ymxpc2hlZCcpKSB7XG4gICAgICByZXR1cm4gJ2Jsb2cnO1xuICAgIH1cblxuICAgIC8vIFJlc2VhcmNoIHBhcGVyc1xuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ2FyeGl2Lm9yZycpIHx8IGRvbWFpbi5pbmNsdWRlcygnc2Nob2xhci5nb29nbGUnKSB8fFxuICAgICAgICB0aXRsZUxvd2VyLmluY2x1ZGVzKCdyZXNlYXJjaCcpIHx8IGNvbnRlbnRMb3dlci5pbmNsdWRlcygnYWJzdHJhY3QnKSkge1xuICAgICAgcmV0dXJuICdyZXNlYXJjaCc7XG4gICAgfVxuXG4gICAgLy8gVG9vbHMgYW5kIGFwcGxpY2F0aW9uc1xuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ2dpdGh1Yi5jb20nKSB8fCB0aXRsZUxvd2VyLmluY2x1ZGVzKCd0b29sJykgfHwgXG4gICAgICAgIHRpdGxlTG93ZXIuaW5jbHVkZXMoJ2FwcCcpIHx8IGNvbnRlbnRMb3dlci5pbmNsdWRlcygnZG93bmxvYWQnKSkge1xuICAgICAgcmV0dXJuICd0b29sJztcbiAgICB9XG5cbiAgICAvLyBSZWZlcmVuY2UgbWF0ZXJpYWxzXG4gICAgaWYgKHRpdGxlTG93ZXIuaW5jbHVkZXMoJ3JlZmVyZW5jZScpIHx8IHRpdGxlTG93ZXIuaW5jbHVkZXMoJ2NoZWF0IHNoZWV0JykgfHxcbiAgICAgICAgY29udGVudExvd2VyLmluY2x1ZGVzKCdxdWljayByZWZlcmVuY2UnKSkge1xuICAgICAgcmV0dXJuICdyZWZlcmVuY2UnO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgdG8gYXJ0aWNsZVxuICAgIHJldHVybiAnYXJ0aWNsZSc7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgaW50ZWxsaWdlbnQgdGFnIHN1Z2dlc3Rpb25zIHVzaW5nIHJ1bGUtYmFzZWQgYW5hbHlzaXNcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVSdWxlQmFzZWRUYWdzKGZ1bGxUZXh0OiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nLCBjb250ZW50VHlwZTogc3RyaW5nKTogQUlUYWdTdWdnZXN0aW9uW10ge1xuICAgIGNvbnN0IHN1Z2dlc3Rpb25zOiBBSVRhZ1N1Z2dlc3Rpb25bXSA9IFtdO1xuXG4gICAgLy8gVGVjaG5vbG9neSB0YWdzXG4gICAgY29uc3QgdGVjaEtleXdvcmRzID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiBbJ2phdmFzY3JpcHQnLCAnanMnLCAnbm9kZS5qcycsICdyZWFjdCcsICd2dWUnLCAnYW5ndWxhciddLFxuICAgICAgJ3B5dGhvbic6IFsncHl0aG9uJywgJ2RqYW5nbycsICdmbGFzaycsICdwYW5kYXMnLCAnbnVtcHknXSxcbiAgICAgICd3ZWItZGV2ZWxvcG1lbnQnOiBbJ2h0bWwnLCAnY3NzJywgJ2Zyb250ZW5kJywgJ2JhY2tlbmQnLCAnZnVsbC1zdGFjayddLFxuICAgICAgJ21hY2hpbmUtbGVhcm5pbmcnOiBbJ21sJywgJ2FpJywgJ25ldXJhbCBuZXR3b3JrJywgJ2RlZXAgbGVhcm5pbmcnLCAndGVuc29yZmxvdyddLFxuICAgICAgJ2RhdGEtc2NpZW5jZSc6IFsnZGF0YSBzY2llbmNlJywgJ2FuYWx5dGljcycsICd2aXN1YWxpemF0aW9uJywgJ3N0YXRpc3RpY3MnXSxcbiAgICAgICdtb2JpbGUnOiBbJ2FuZHJvaWQnLCAnaW9zJywgJ3JlYWN0IG5hdGl2ZScsICdmbHV0dGVyJywgJ21vYmlsZSBhcHAnXSxcbiAgICAgICdkZXZvcHMnOiBbJ2RvY2tlcicsICdrdWJlcm5ldGVzJywgJ2F3cycsICdjbG91ZCcsICdkZXBsb3ltZW50J10sXG4gICAgICAnZGF0YWJhc2UnOiBbJ3NxbCcsICdwb3N0Z3Jlc3FsJywgJ21vbmdvZGInLCAnZGF0YWJhc2UgZGVzaWduJ10sXG4gICAgICAnc2VjdXJpdHknOiBbJ2N5YmVyc2VjdXJpdHknLCAnZW5jcnlwdGlvbicsICd2dWxuZXJhYmlsaXR5JywgJ3BlbmV0cmF0aW9uIHRlc3RpbmcnXVxuICAgIH07XG5cbiAgICAvLyBJbmR1c3RyeS9kb21haW4gdGFnc1xuICAgIGNvbnN0IGRvbWFpblRhZ3MgPSB7XG4gICAgICAnZ2l0aHViLmNvbSc6IFt7IHRhZzogJ2dpdGh1YicsIGNvbmZpZGVuY2U6IDAuOSwgcmVhc29uOiAnR2l0SHViIHJlcG9zaXRvcnknIH1dLFxuICAgICAgJ3N0YWNrb3ZlcmZsb3cuY29tJzogW3sgdGFnOiAncHJvZ3JhbW1pbmcnLCBjb25maWRlbmNlOiAwLjgsIHJlYXNvbjogJ1N0YWNrIE92ZXJmbG93IGNvbnRlbnQnIH1dLFxuICAgICAgJ21lZGl1bS5jb20nOiBbeyB0YWc6ICdibG9nJywgY29uZmlkZW5jZTogMC43LCByZWFzb246ICdNZWRpdW0gYXJ0aWNsZScgfV0sXG4gICAgICAneW91dHViZS5jb20nOiBbeyB0YWc6ICd2aWRlbycsIGNvbmZpZGVuY2U6IDAuOSwgcmVhc29uOiAnWW91VHViZSB2aWRlbycgfV0sXG4gICAgICAnbGlua2VkaW4uY29tJzogW3sgdGFnOiAnY2FyZWVyJywgY29uZmlkZW5jZTogMC43LCByZWFzb246ICdMaW5rZWRJbiBjb250ZW50JyB9XVxuICAgIH07XG5cbiAgICAvLyBBZGQgZG9tYWluLXNwZWNpZmljIHRhZ3NcbiAgICBmb3IgKGNvbnN0IFtkb21haW5QYXR0ZXJuLCB0YWdzXSBvZiBPYmplY3QuZW50cmllcyhkb21haW5UYWdzKSkge1xuICAgICAgaWYgKGRvbWFpbi5pbmNsdWRlcyhkb21haW5QYXR0ZXJuKSkge1xuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKC4uLnRhZ3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCB0ZWNobm9sb2d5IHRhZ3MgYmFzZWQgb24gY29udGVudCBhbmFseXNpc1xuICAgIGZvciAoY29uc3QgW3RhZywga2V5d29yZHNdIG9mIE9iamVjdC5lbnRyaWVzKHRlY2hLZXl3b3JkcykpIHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBrZXl3b3Jkcy5maWx0ZXIoa2V5d29yZCA9PiBmdWxsVGV4dC5pbmNsdWRlcyhrZXl3b3JkKSkubGVuZ3RoO1xuICAgICAgaWYgKG1hdGNoZXMgPiAwKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZGVuY2UgPSBNYXRoLm1pbigwLjksIDAuNCArIChtYXRjaGVzICogMC4xKSk7XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICAgIHRhZyxcbiAgICAgICAgICBjb25maWRlbmNlLFxuICAgICAgICAgIHJlYXNvbjogYEZvdW5kICR7bWF0Y2hlc30gcmVsYXRlZCBrZXl3b3JkKHMpYFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb250ZW50LXR5cGUgc3BlY2lmaWMgdGFnc1xuICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgdGFnOiBjb250ZW50VHlwZSB8fCAnZ2VuZXJhbCcsXG4gICAgICBjb25maWRlbmNlOiAwLjYsXG4gICAgICByZWFzb246IGBEZXRlY3RlZCBhcyAke2NvbnRlbnRUeXBlfSBjb250ZW50YFxuICAgIH0pO1xuXG4gICAgLy8gTGVhcm5pbmcgYW5kIHNraWxsIGxldmVsIHRhZ3NcbiAgICBpZiAoZnVsbFRleHQuaW5jbHVkZXMoJ2JlZ2lubmVyJykgfHwgZnVsbFRleHQuaW5jbHVkZXMoJ2dldHRpbmcgc3RhcnRlZCcpKSB7XG4gICAgICBzdWdnZXN0aW9ucy5wdXNoKHsgdGFnOiAnYmVnaW5uZXInLCBjb25maWRlbmNlOiAwLjcsIHJlYXNvbjogJ0JlZ2lubmVyLWZyaWVuZGx5IGNvbnRlbnQnIH0pO1xuICAgIH1cbiAgICBpZiAoZnVsbFRleHQuaW5jbHVkZXMoJ2FkdmFuY2VkJykgfHwgZnVsbFRleHQuaW5jbHVkZXMoJ2V4cGVydCcpKSB7XG4gICAgICBzdWdnZXN0aW9ucy5wdXNoKHsgdGFnOiAnYWR2YW5jZWQnLCBjb25maWRlbmNlOiAwLjcsIHJlYXNvbjogJ0FkdmFuY2VkIGNvbnRlbnQnIH0pO1xuICAgIH1cblxuICAgIC8vIEJ1c2luZXNzIGFuZCBwcm9kdWN0aXZpdHkgdGFnc1xuICAgIGNvbnN0IGJ1c2luZXNzS2V5d29yZHMgPSBbJ3Byb2R1Y3Rpdml0eScsICdidXNpbmVzcycsICdzdGFydHVwJywgJ21hcmtldGluZycsICdzYWxlcycsICdmaW5hbmNlJ107XG4gICAgZm9yIChjb25zdCBrZXl3b3JkIG9mIGJ1c2luZXNzS2V5d29yZHMpIHtcbiAgICAgIGlmIChmdWxsVGV4dC5pbmNsdWRlcyhrZXl3b3JkKSkge1xuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgICB0YWc6IGtleXdvcmQsXG4gICAgICAgICAgY29uZmlkZW5jZTogMC42LFxuICAgICAgICAgIHJlYXNvbjogYENvbnRlbnQgcmVsYXRlZCB0byAke2tleXdvcmR9YFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBhbmQgc29ydCBieSBjb25maWRlbmNlXG4gICAgY29uc3QgdW5pcXVlU3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucy5maWx0ZXIoKGl0ZW0sIGluZGV4LCBhcnIpID0+IFxuICAgICAgYXJyLmZpbmRJbmRleCh0ID0+IHQudGFnID09PSBpdGVtLnRhZykgPT09IGluZGV4XG4gICAgKTtcblxuICAgIHJldHVybiB1bmlxdWVTdWdnZXN0aW9uc1xuICAgICAgLnNvcnQoKGEsIGIpID0+IGIuY29uZmlkZW5jZSAtIGEuY29uZmlkZW5jZSlcbiAgICAgIC5zbGljZSgwLCA4KTsgLy8gTGltaXQgdG8gdG9wIDggc3VnZ2VzdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBjYXRlZ29yeSBzdWdnZXN0aW9uc1xuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZVJ1bGVCYXNlZENhdGVnb3JpZXMoZnVsbFRleHQ6IHN0cmluZywgZG9tYWluOiBzdHJpbmcsIGNvbnRlbnRUeXBlOiBzdHJpbmcpOiBBSUNhdGVnb3J5U3VnZ2VzdGlvbltdIHtcbiAgICBjb25zdCBzdWdnZXN0aW9uczogQUlDYXRlZ29yeVN1Z2dlc3Rpb25bXSA9IFtdO1xuXG4gICAgLy8gV29yay1yZWxhdGVkIGtleXdvcmRzXG4gICAgaWYgKGZ1bGxUZXh0LmluY2x1ZGVzKCd3b3JrJykgfHwgZnVsbFRleHQuaW5jbHVkZXMoJ2pvYicpIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCdjYXJlZXInKSB8fFxuICAgICAgICBmdWxsVGV4dC5pbmNsdWRlcygncHJvZmVzc2lvbmFsJykgfHwgZnVsbFRleHQuaW5jbHVkZXMoJ2J1c2luZXNzJykpIHtcbiAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICBjYXRlZ29yeTogJ3dvcmsnLFxuICAgICAgICBjb25maWRlbmNlOiAwLjgsXG4gICAgICAgIHJlYXNvbjogJ0NvbnRhaW5zIHdvcmstcmVsYXRlZCBjb250ZW50J1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gTGVhcm5pbmcgYW5kIGVkdWNhdGlvblxuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ3R1dG9yaWFsJyB8fCBjb250ZW50VHlwZSA9PT0gJ2RvY3VtZW50YXRpb24nIHx8IFxuICAgICAgICBmdWxsVGV4dC5pbmNsdWRlcygnbGVhcm4nKSB8fCBmdWxsVGV4dC5pbmNsdWRlcygnZWR1Y2F0aW9uJykgfHwgZnVsbFRleHQuaW5jbHVkZXMoJ2NvdXJzZScpKSB7XG4gICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgY2F0ZWdvcnk6ICdsZWFybmluZycsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuOSxcbiAgICAgICAgcmVhc29uOiAnRWR1Y2F0aW9uYWwgY29udGVudCBkZXRlY3RlZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBlcnNvbmFsIGludGVyZXN0c1xuICAgIGlmIChmdWxsVGV4dC5pbmNsdWRlcygnaG9iYnknKSB8fCBmdWxsVGV4dC5pbmNsdWRlcygncGVyc29uYWwnKSB8fCBcbiAgICAgICAgZnVsbFRleHQuaW5jbHVkZXMoJ2xpZmVzdHlsZScpIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCdlbnRlcnRhaW5tZW50JykpIHtcbiAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICBjYXRlZ29yeTogJ3BlcnNvbmFsJyxcbiAgICAgICAgY29uZmlkZW5jZTogMC43LFxuICAgICAgICByZWFzb246ICdQZXJzb25hbCBpbnRlcmVzdCBjb250ZW50J1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVGVjaG5vbG9neSBhbmQgZGV2ZWxvcG1lbnRcbiAgICBpZiAoZG9tYWluLmluY2x1ZGVzKCdnaXRodWIuY29tJykgfHwgZG9tYWluLmluY2x1ZGVzKCdzdGFja292ZXJmbG93LmNvbScpIHx8XG4gICAgICAgIGZ1bGxUZXh0LmluY2x1ZGVzKCdwcm9ncmFtbWluZycpIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCdkZXZlbG9wbWVudCcpKSB7XG4gICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgY2F0ZWdvcnk6ICd3b3JrJyxcbiAgICAgICAgY29uZmlkZW5jZTogMC44LFxuICAgICAgICByZWFzb246ICdUZWNobmljYWwvZGV2ZWxvcG1lbnQgY29udGVudCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE5ld3MgYW5kIGN1cnJlbnQgZXZlbnRzXG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSAnbmV3cycgfHwgZnVsbFRleHQuaW5jbHVkZXMoJ2JyZWFraW5nJykgfHwgZnVsbFRleHQuaW5jbHVkZXMoJ3VwZGF0ZScpKSB7XG4gICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgY2F0ZWdvcnk6ICdnZW5lcmFsJyxcbiAgICAgICAgY29uZmlkZW5jZTogMC43LFxuICAgICAgICByZWFzb246ICdOZXdzIG9yIGN1cnJlbnQgZXZlbnRzJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBjYXRlZ29yeSBpZiBubyBzcGVjaWZpYyBtYXRjaGVzXG4gICAgaWYgKHN1Z2dlc3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaCh7XG4gICAgICAgIGNhdGVnb3J5OiAnZ2VuZXJhbCcsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuNSxcbiAgICAgICAgcmVhc29uOiAnR2VuZXJhbCBjb250ZW50J1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Z2dlc3Rpb25zLnNvcnQoKGEsIGIpID0+IGIuY29uZmlkZW5jZSAtIGEuY29uZmlkZW5jZSk7XG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdCBtYWluIHRvcGljcyBmcm9tIGNvbnRlbnRcbiAgICovXG4gIHByaXZhdGUgZXh0cmFjdFRvcGljcyhmdWxsVGV4dDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGNvbW1vblRvcGljcyA9IFtcbiAgICAgICdhcnRpZmljaWFsIGludGVsbGlnZW5jZScsICdtYWNoaW5lIGxlYXJuaW5nJywgJ3dlYiBkZXZlbG9wbWVudCcsICdtb2JpbGUgZGV2ZWxvcG1lbnQnLFxuICAgICAgJ2RhdGEgc2NpZW5jZScsICdjeWJlcnNlY3VyaXR5JywgJ2Nsb3VkIGNvbXB1dGluZycsICdibG9ja2NoYWluJywgJ2NyeXB0b2N1cnJlbmN5JyxcbiAgICAgICdzdGFydHVwJywgJ3Byb2R1Y3Rpdml0eScsICdsZWFkZXJzaGlwJywgJ2Rlc2lnbicsICdtYXJrZXRpbmcnLCAnc2FsZXMnLFxuICAgICAgJ3Byb2dyYW1taW5nJywgJ3NvZnR3YXJlIGVuZ2luZWVyaW5nJywgJ2Rldm9wcycsICdkYXRhYmFzZScsICdmcm9udGVuZCcsXG4gICAgICAnYmFja2VuZCcsICdmdWxsLXN0YWNrJywgJ2FwaScsICdtaWNyb3NlcnZpY2VzJywgJ2FyY2hpdGVjdHVyZSdcbiAgICBdO1xuXG4gICAgcmV0dXJuIGNvbW1vblRvcGljcy5maWx0ZXIodG9waWMgPT4gZnVsbFRleHQuaW5jbHVkZXModG9waWMpKS5zbGljZSgwLCA1KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFc3RpbWF0ZSBjb250ZW50IGNvbXBsZXhpdHlcbiAgICovXG4gIHByaXZhdGUgZXN0aW1hdGVDb21wbGV4aXR5KGNvbnRlbnQ6IHN0cmluZyk6ICdiZWdpbm5lcicgfCAnaW50ZXJtZWRpYXRlJyB8ICdhZHZhbmNlZCcge1xuICAgIGNvbnN0IHRlY2hUZXJtcyA9IFsnYWxnb3JpdGhtJywgJ2FyY2hpdGVjdHVyZScsICdvcHRpbWl6YXRpb24nLCAnc2NhbGFiaWxpdHknLCAncGVyZm9ybWFuY2UnXTtcbiAgICBjb25zdCBiZWdpbm5lclRlcm1zID0gWydpbnRyb2R1Y3Rpb24nLCAnYmFzaWNzJywgJ2dldHRpbmcgc3RhcnRlZCcsICdiZWdpbm5lcicsICdzaW1wbGUnXTtcbiAgICBjb25zdCBhZHZhbmNlZFRlcm1zID0gWydhZHZhbmNlZCcsICdleHBlcnQnLCAnY29tcGxleCcsICdzb3BoaXN0aWNhdGVkJywgJ2VudGVycHJpc2UnXTtcblxuICAgIGNvbnN0IGNvbnRlbnRMb3dlciA9IGNvbnRlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCB0ZWNoU2NvcmUgPSB0ZWNoVGVybXMuZmlsdGVyKHRlcm0gPT4gY29udGVudExvd2VyLmluY2x1ZGVzKHRlcm0pKS5sZW5ndGg7XG4gICAgY29uc3QgYmVnaW5uZXJTY29yZSA9IGJlZ2lubmVyVGVybXMuZmlsdGVyKHRlcm0gPT4gY29udGVudExvd2VyLmluY2x1ZGVzKHRlcm0pKS5sZW5ndGg7XG4gICAgY29uc3QgYWR2YW5jZWRTY29yZSA9IGFkdmFuY2VkVGVybXMuZmlsdGVyKHRlcm0gPT4gY29udGVudExvd2VyLmluY2x1ZGVzKHRlcm0pKS5sZW5ndGg7XG5cbiAgICBpZiAoYmVnaW5uZXJTY29yZSA+IDAgfHwgdGVjaFNjb3JlID09PSAwKSByZXR1cm4gJ2JlZ2lubmVyJztcbiAgICBpZiAoYWR2YW5jZWRTY29yZSA+IDEgfHwgdGVjaFNjb3JlID4gMykgcmV0dXJuICdhZHZhbmNlZCc7XG4gICAgcmV0dXJuICdpbnRlcm1lZGlhdGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIEVzdGltYXRlIHJlYWRpbmcgdGltZSBpbiBtaW51dGVzXG4gICAqL1xuICBwcml2YXRlIGVzdGltYXRlUmVhZGluZ1RpbWUoY29udGVudDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCB3b3Jkc1Blck1pbnV0ZSA9IDIwMDtcbiAgICBjb25zdCB3b3JkQ291bnQgPSBjb250ZW50LnNwbGl0KC9cXHMrLykubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLm1heCgxLCBNYXRoLnJvdW5kKHdvcmRDb3VudCAvIHdvcmRzUGVyTWludXRlKSk7XG4gIH1cblxuICAvKipcbiAgICogRW5oYW5jZWQgT3BlbkFJIGNhbGwgZm9yIGNvbXByZWhlbnNpdmUgYW5hbHlzaXNcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgY2FsbE9wZW5BSUZvckFuYWx5c2lzKGNvbnRlbnQ6IHN0cmluZywgdGl0bGU6IHN0cmluZywgdXJsOiBzdHJpbmcpOiBQcm9taXNlPEFJQW5hbHlzaXNSZXN1bHQ+IHtcbiAgICBjb25zdCBwcm9tcHQgPSBgQW5hbHl6ZSB0aGlzIHdlYiBjb250ZW50IGFuZCBwcm92aWRlIGEgSlNPTiByZXNwb25zZSB3aXRoIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuXG57XG4gIFwic3VtbWFyeVwiOiBcIjEtMiBzZW50ZW5jZSBzdW1tYXJ5XCIsXG4gIFwidGFnU3VnZ2VzdGlvbnNcIjogW1xuICAgIHtcInRhZ1wiOiBcInRhZy1uYW1lXCIsIFwiY29uZmlkZW5jZVwiOiAwLjgsIFwicmVhc29uXCI6IFwid2h5IHRoaXMgdGFnIGZpdHNcIn1cbiAgXSxcbiAgXCJjYXRlZ29yeVN1Z2dlc3Rpb25zXCI6IFtcbiAgICB7XCJjYXRlZ29yeVwiOiBcIndvcmt8bGVhcm5pbmd8cGVyc29uYWx8Z2VuZXJhbFwiLCBcImNvbmZpZGVuY2VcIjogMC45LCBcInJlYXNvblwiOiBcImV4cGxhbmF0aW9uXCJ9XG4gIF0sXG4gIFwiY29udGVudFR5cGVcIjogXCJhcnRpY2xlfHR1dG9yaWFsfGRvY3VtZW50YXRpb258dmlkZW98dG9vbHxyZWZlcmVuY2V8YmxvZ3xuZXdzfHJlc2VhcmNofG90aGVyXCIsXG4gIFwidG9waWNzXCI6IFtcIm1haW5cIiwgXCJ0b3BpY3NcIiwgXCJjb3ZlcmVkXCJdLFxuICBcImNvbXBsZXhpdHlcIjogXCJiZWdpbm5lcnxpbnRlcm1lZGlhdGV8YWR2YW5jZWRcIixcbiAgXCJyZWFkaW5nVGltZVwiOiA1XG59XG5cbkNvbnRlbnQgdG8gYW5hbHl6ZTpcblRpdGxlOiAke3RpdGxlfVxuVVJMOiAke3VybH1cbkNvbnRlbnQ6ICR7Y29udGVudC5zdWJzdHJpbmcoMCwgMjAwMCl9Li4uXG5cbkZvY3VzIG9uOlxuLSBSZWxldmFudCwgc3BlY2lmaWMgdGFncyAodGVjaG5vbG9neSwgc2tpbGxzLCBkb21haW5zKVxuLSBBcHByb3ByaWF0ZSBjYXRlZ29yeSAod29yay9sZWFybmluZy9wZXJzb25hbC9nZW5lcmFsKVxuLSBDb250ZW50IHR5cGUgYW5kIGNvbXBsZXhpdHlcbi0gTWFpbiB0b3BpY3MgYW5kIHRoZW1lc2A7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL2NoYXQvY29tcGxldGlvbnMnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5hcGlLZXl9YCxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxuICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHByb21wdFxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbWF4X3Rva2VuczogNTAwLFxuICAgICAgICB0ZW1wZXJhdHVyZTogMC4zXG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBjb25zdCBhaVJlc3BvbnNlID0gZGF0YS5jaG9pY2VzWzBdPy5tZXNzYWdlPy5jb250ZW50O1xuXG4gICAgaWYgKGFpUmVzcG9uc2UpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoYWlSZXNwb25zZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VtbWFyeTogcGFyc2VkLnN1bW1hcnksXG4gICAgICAgICAgdGFnU3VnZ2VzdGlvbnM6IHBhcnNlZC50YWdTdWdnZXN0aW9ucyB8fCBbXSxcbiAgICAgICAgICBjYXRlZ29yeVN1Z2dlc3Rpb25zOiBwYXJzZWQuY2F0ZWdvcnlTdWdnZXN0aW9ucyB8fCBbXSxcbiAgICAgICAgICBjb250ZW50VHlwZTogcGFyc2VkLmNvbnRlbnRUeXBlLFxuICAgICAgICAgIHRvcGljczogcGFyc2VkLnRvcGljcyB8fCBbXSxcbiAgICAgICAgICBjb21wbGV4aXR5OiBwYXJzZWQuY29tcGxleGl0eSxcbiAgICAgICAgICByZWFkaW5nVGltZTogcGFyc2VkLnJlYWRpbmdUaW1lXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcGFyc2UgQUkgcmVzcG9uc2U6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIHRvIHJ1bGUtYmFzZWQgYW5hbHlzaXNcbiAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZVJ1bGVCYXNlZEFuYWx5c2lzKGNvbnRlbnQsIHRpdGxlLCB1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9yaWdpbmFsIE9wZW5BSSBjYWxsIGZvciBzdW1tYXJ5IG9ubHkgKG1haW50YWluaW5nIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkpXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGNhbGxPcGVuQUkoY29udGVudDogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgcHJvbXB0ID0gYFN1bW1hcml6ZSB0aGlzIHdlYiBwYWdlIGluIDEtMiBzZW50ZW5jZXM6XG5UaXRsZTogJHt0aXRsZX1cblVSTDogJHt1cmx9XG5Db250ZW50OiAke2NvbnRlbnQuc3Vic3RyaW5nKDAsIDEwMDApfS4uLmA7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL2NoYXQvY29tcGxldGlvbnMnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5hcGlLZXl9YCxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxuICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHByb21wdFxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbWF4X3Rva2VuczogMTAwLFxuICAgICAgICB0ZW1wZXJhdHVyZTogMC4zXG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4gZGF0YS5jaG9pY2VzWzBdPy5tZXNzYWdlPy5jb250ZW50IHx8IHRoaXMuZ2VuZXJhdGVQbGFjZWhvbGRlclN1bW1hcnkoY29udGVudCwgdGl0bGUsIHVybCk7XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlUGxhY2Vob2xkZXJTdW1tYXJ5KGNvbnRlbnQ6IHN0cmluZywgdGl0bGU6IHN0cmluZywgdXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRvbWFpbiA9IG5ldyBVUkwodXJsKS5ob3N0bmFtZTtcbiAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gY29udGVudC5sZW5ndGg7XG4gICAgXG4gICAgLy8gR2VuZXJhdGUgYSBzaW1wbGUgcnVsZS1iYXNlZCBzdW1tYXJ5XG4gICAgaWYgKGRvbWFpbi5pbmNsdWRlcygnZ2l0aHViLmNvbScpKSB7XG4gICAgICByZXR1cm4gYEdpdEh1YiByZXBvc2l0b3J5IG9yIHByb2plY3QgcGFnZTogJHt0aXRsZX1gO1xuICAgIH0gZWxzZSBpZiAoZG9tYWluLmluY2x1ZGVzKCdzdGFja292ZXJmbG93LmNvbScpKSB7XG4gICAgICByZXR1cm4gYFN0YWNrIE92ZXJmbG93IGRpc2N1c3Npb24gYWJvdXQgcHJvZ3JhbW1pbmcgb3IgdGVjaG5pY2FsIHRvcGljc2A7XG4gICAgfSBlbHNlIGlmIChkb21haW4uaW5jbHVkZXMoJ21lZGl1bS5jb20nKSB8fCBkb21haW4uaW5jbHVkZXMoJ2Jsb2cnKSkge1xuICAgICAgcmV0dXJuIGBCbG9nIGFydGljbGU6ICR7dGl0bGUuc3Vic3RyaW5nKDAsIDUwKX0uLi5gO1xuICAgIH0gZWxzZSBpZiAoZG9tYWluLmluY2x1ZGVzKCd5b3V0dWJlLmNvbScpKSB7XG4gICAgICByZXR1cm4gYFZpZGVvIGNvbnRlbnQ6ICR7dGl0bGV9YDtcbiAgICB9IGVsc2UgaWYgKGRvbWFpbi5pbmNsdWRlcygnbmV3cycpIHx8IGRvbWFpbi5pbmNsdWRlcygnYXJ0aWNsZScpKSB7XG4gICAgICByZXR1cm4gYE5ld3MgYXJ0aWNsZSBmcm9tICR7ZG9tYWlufWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgV2ViIHBhZ2UgZnJvbSAke2RvbWFpbn0gKCR7TWF0aC5yb3VuZChjb250ZW50TGVuZ3RoIC8gMTAwKX0gcGFyYWdyYXBocylgO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUFwaUtleShhcGlLZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHNtYXJ0IGNvbGxlY3Rpb24gcXVlcmllcyBiYXNlZCBvbiB1c2VyJ3MgbGluayBwYXR0ZXJuc1xuICAgKi9cbiAgYXN5bmMgZ2VuZXJhdGVTbWFydENvbGxlY3Rpb25TdWdnZXN0aW9ucyhsaW5rczogU2F2ZWRMaW5rW10pOiBQcm9taXNlPFNtYXJ0Q29sbGVjdGlvbltdPiB7XG4gICAgLy8gQW5hbHl6ZSB1c2VyJ3MgbGluayBwYXR0ZXJucyB0byBzdWdnZXN0IHNtYXJ0IGNvbGxlY3Rpb25zXG4gICAgY29uc3QgZG9tYWluQW5hbHlzaXMgPSB0aGlzLmFuYWx5emVEb21haW5zKGxpbmtzKTtcbiAgICBjb25zdCB0b3BpY0FuYWx5c2lzID0gdGhpcy5hbmFseXplVG9waWNzKGxpbmtzKTtcbiAgICBjb25zdCB0aW1lQW5hbHlzaXMgPSB0aGlzLmFuYWx5emVUaW1lUGF0dGVybnMobGlua3MpO1xuICAgIFxuICAgIGNvbnN0IHN1Z2dlc3Rpb25zOiBTbWFydENvbGxlY3Rpb25bXSA9IFtdO1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cbiAgICAvLyBEb21haW4tYmFzZWQgY29sbGVjdGlvbnNcbiAgICBmb3IgKGNvbnN0IFtkb21haW4sIGNvdW50XSBvZiBPYmplY3QuZW50cmllcyhkb21haW5BbmFseXNpcykpIHtcbiAgICAgIGlmIChjb3VudCA+PSAzKSB7IC8vIE1pbmltdW0gdGhyZXNob2xkIGZvciBzdWdnZXN0aW5nIGRvbWFpbiBjb2xsZWN0aW9uXG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICAgIGlkOiBgZG9tYWluLSR7ZG9tYWluLnJlcGxhY2UoL1xcLi9nLCAnLScpfWAsXG4gICAgICAgICAgbmFtZTogYPCfk4wgJHt0aGlzLmdldERvbWFpbkRpc3BsYXlOYW1lKGRvbWFpbil9YCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYExpbmtzIGZyb20gJHtkb21haW59ICgke2NvdW50fSBsaW5rcylgLFxuICAgICAgICAgIHF1ZXJ5OiBgZG9tYWluIExJS0UgJyUke2RvbWFpbn0lJ2AsXG4gICAgICAgICAgaXNTeXN0ZW06IHRydWUsXG4gICAgICAgICAgYXV0b1VwZGF0ZTogdHJ1ZSxcbiAgICAgICAgICBpY29uOiB0aGlzLmdldERvbWFpbkljb24oZG9tYWluKSxcbiAgICAgICAgICBjb2xvcjogdGhpcy5nZXREb21haW5Db2xvcihkb21haW4pLFxuICAgICAgICAgIGZpbHRlcnM6IHtcbiAgICAgICAgICAgIGRvbWFpbnM6IFtkb21haW5dXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjcmVhdGVkQXQ6IG5vdyxcbiAgICAgICAgICB1cGRhdGVkQXQ6IG5vd1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUb3BpYy1iYXNlZCBjb2xsZWN0aW9uc1xuICAgIGZvciAoY29uc3QgW3RvcGljLCBjb3VudF0gb2YgT2JqZWN0LmVudHJpZXModG9waWNBbmFseXNpcykpIHtcbiAgICAgIGlmIChjb3VudCA+PSAyKSB7XG4gICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICAgIGlkOiBgdG9waWMtJHt0b3BpYy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJy0nKX1gLFxuICAgICAgICAgIG5hbWU6IGDwn46vICR7dG9waWN9YCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYENvbnRlbnQgcmVsYXRlZCB0byAke3RvcGljLnRvTG93ZXJDYXNlKCl9ICgke2NvdW50fSBsaW5rcylgLFxuICAgICAgICAgIHF1ZXJ5OiBgdGl0bGUgSUxJS0UgJyUke3RvcGljfSUnIE9SIHVzZXJfbm90ZSBJTElLRSAnJSR7dG9waWN9JScgT1IgYWlfc3VtbWFyeSBJTElLRSAnJSR7dG9waWN9JSdgLFxuICAgICAgICAgIGlzU3lzdGVtOiB0cnVlLFxuICAgICAgICAgIGF1dG9VcGRhdGU6IHRydWUsXG4gICAgICAgICAgaWNvbjogdGhpcy5nZXRUb3BpY0ljb24odG9waWMpLFxuICAgICAgICAgIGNvbG9yOiB0aGlzLmdldFRvcGljQ29sb3IodG9waWMpLFxuICAgICAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgICAgIHVwZGF0ZWRBdDogbm93XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRpbWUtYmFzZWQgY29sbGVjdGlvbnNcbiAgICBpZiAodGltZUFuYWx5c2lzLnJlY2VudEFjdGl2aXR5ID4gNSkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaCh7XG4gICAgICAgIGlkOiAncmVjZW50LWFjdGl2aXR5JyxcbiAgICAgICAgbmFtZTogJ/CflKUgUmVjZW50IEFjdGl2aXR5JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMaW5rcyBzYXZlZCBpbiB0aGUgbGFzdCAzIGRheXMnLFxuICAgICAgICBxdWVyeTogJ2NyZWF0ZWRfYXQgPj0gbm93KCkgLSBpbnRlcnZhbCBcXCczIGRheXNcXCcnLFxuICAgICAgICBpc1N5c3RlbTogdHJ1ZSxcbiAgICAgICAgYXV0b1VwZGF0ZTogdHJ1ZSxcbiAgICAgICAgaWNvbjogJ/CflKUnLFxuICAgICAgICBjb2xvcjogJyNlZjQ0NDQnLFxuICAgICAgICBmaWx0ZXJzOiB7XG4gICAgICAgICAgZGF0ZVJhbmdlOiB7XG4gICAgICAgICAgICBzdGFydDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDMgKiAyNCAqIDYwICogNjAgKiAxMDAwKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICAgIHVwZGF0ZWRBdDogbm93XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VnZ2VzdGlvbnMuc2xpY2UoMCwgOCk7IC8vIExpbWl0IHN1Z2dlc3Rpb25zXG4gIH1cblxuICAvKipcbiAgICogQW5hbHl6ZSBkb21haW5zIGluIHVzZXIncyBsaW5rc1xuICAgKi9cbiAgcHJpdmF0ZSBhbmFseXplRG9tYWlucyhsaW5rczogU2F2ZWRMaW5rW10pOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHtcbiAgICBjb25zdCBkb21haW5Db3VudHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICBcbiAgICBsaW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgY29uc3QgZG9tYWluID0gbGluay5kb21haW47XG4gICAgICBkb21haW5Db3VudHNbZG9tYWluXSA9IChkb21haW5Db3VudHNbZG9tYWluXSB8fCAwKSArIDE7XG4gICAgfSk7XG5cbiAgICAvLyBTb3J0IGJ5IGNvdW50IGFuZCByZXR1cm4gdG9wIGRvbWFpbnNcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgT2JqZWN0LmVudHJpZXMoZG9tYWluQ291bnRzKVxuICAgICAgICAuc29ydCgoWyxhXSwgWyxiXSkgPT4gYiAtIGEpXG4gICAgICAgIC5zbGljZSgwLCAxMClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuYWx5emUgdG9waWNzIGluIHVzZXIncyBsaW5rc1xuICAgKi9cbiAgcHJpdmF0ZSBhbmFseXplVG9waWNzKGxpbmtzOiBTYXZlZExpbmtbXSk6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4ge1xuICAgIGNvbnN0IHRvcGljQ291bnRzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gICAgY29uc3QgY29tbW9uVG9waWNzID0gW1xuICAgICAgJ1JlYWN0JywgJ0phdmFTY3JpcHQnLCAnVHlwZVNjcmlwdCcsICdQeXRob24nLCAnTm9kZS5qcycsICdBUEknLCAnRGF0YWJhc2UnLFxuICAgICAgJ01hY2hpbmUgTGVhcm5pbmcnLCAnQUknLCAnRGVzaWduJywgJ1VJL1VYJywgJ0NTUycsICdIVE1MJywgJ0JhY2tlbmQnLFxuICAgICAgJ0Zyb250ZW5kJywgJ0Rldk9wcycsICdDbG91ZCcsICdBV1MnLCAnRG9ja2VyJywgJ0t1YmVybmV0ZXMnLCAnR2l0JyxcbiAgICAgICdUZXN0aW5nJywgJ1NlY3VyaXR5JywgJ1BlcmZvcm1hbmNlJywgJ01vYmlsZScsICdpT1MnLCAnQW5kcm9pZCcsXG4gICAgICAnVHV0b3JpYWwnLCAnR3VpZGUnLCAnRG9jdW1lbnRhdGlvbicsICdUb29sJywgJ0ZyYW1ld29yaycsICdMaWJyYXJ5J1xuICAgIF07XG5cbiAgICBsaW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IGAke2xpbmsudGl0bGV9ICR7bGluay51c2VyTm90ZX0gJHtsaW5rLmFpU3VtbWFyeSB8fCAnJ31gLnRvTG93ZXJDYXNlKCk7XG4gICAgICBcbiAgICAgIGNvbW1vblRvcGljcy5mb3JFYWNoKHRvcGljID0+IHtcbiAgICAgICAgaWYgKGNvbnRlbnQuaW5jbHVkZXModG9waWMudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICB0b3BpY0NvdW50c1t0b3BpY10gPSAodG9waWNDb3VudHNbdG9waWNdIHx8IDApICsgMTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgT2JqZWN0LmVudHJpZXModG9waWNDb3VudHMpXG4gICAgICAgIC5zb3J0KChbLGFdLCBbLGJdKSA9PiBiIC0gYSlcbiAgICAgICAgLnNsaWNlKDAsIDgpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIHRpbWUgcGF0dGVybnMgaW4gdXNlcidzIGxpbmtzXG4gICAqL1xuICBwcml2YXRlIGFuYWx5emVUaW1lUGF0dGVybnMobGlua3M6IFNhdmVkTGlua1tdKTogeyByZWNlbnRBY3Rpdml0eTogbnVtYmVyOyB3ZWVrbHlQYXR0ZXJuOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IH0ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgdGhyZWVEYXlzQWdvID0gbmV3IERhdGUobm93LmdldFRpbWUoKSAtIDMgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICBcbiAgICBjb25zdCByZWNlbnRBY3Rpdml0eSA9IGxpbmtzLmZpbHRlcihsaW5rID0+IGxpbmsuY3JlYXRlZEF0ID49IHRocmVlRGF5c0FnbykubGVuZ3RoO1xuICAgIFxuICAgIGNvbnN0IHdlZWtseVBhdHRlcm46IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICBsaW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgY29uc3QgZGF5T2ZXZWVrID0gbGluay5jcmVhdGVkQXQudG9Mb2NhbGVEYXRlU3RyaW5nKCdlbi1VUycsIHsgd2Vla2RheTogJ2xvbmcnIH0pO1xuICAgICAgd2Vla2x5UGF0dGVybltkYXlPZldlZWtdID0gKHdlZWtseVBhdHRlcm5bZGF5T2ZXZWVrXSB8fCAwKSArIDE7XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyByZWNlbnRBY3Rpdml0eSwgd2Vla2x5UGF0dGVybiB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkaXNwbGF5IG5hbWUgZm9yIGRvbWFpblxuICAgKi9cbiAgcHJpdmF0ZSBnZXREb21haW5EaXNwbGF5TmFtZShkb21haW46IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZGlzcGxheU5hbWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgJ2dpdGh1Yi5jb20nOiAnR2l0SHViJyxcbiAgICAgICdzdGFja292ZXJmbG93LmNvbSc6ICdTdGFjayBPdmVyZmxvdycsXG4gICAgICAnbWVkaXVtLmNvbSc6ICdNZWRpdW0nLFxuICAgICAgJ3lvdXR1YmUuY29tJzogJ1lvdVR1YmUnLFxuICAgICAgJ3R3aXR0ZXIuY29tJzogJ1R3aXR0ZXInLFxuICAgICAgJ2xpbmtlZGluLmNvbSc6ICdMaW5rZWRJbicsXG4gICAgICAncmVkZGl0LmNvbSc6ICdSZWRkaXQnLFxuICAgICAgJ2Rldi50byc6ICdEZXYudG8nLFxuICAgICAgJ2hhc2hub2RlLmNvbSc6ICdIYXNobm9kZScsXG4gICAgICAnZG9jcy5nb29nbGUuY29tJzogJ0dvb2dsZSBEb2NzJ1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIGRpc3BsYXlOYW1lc1tkb21haW5dIHx8IGRvbWFpbi5yZXBsYWNlKCd3d3cuJywgJycpLnNwbGl0KCcuJylbMF07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGljb24gZm9yIGRvbWFpblxuICAgKi9cbiAgcHJpdmF0ZSBnZXREb21haW5JY29uKGRvbWFpbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBpY29uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICdnaXRodWIuY29tJzogJ+KtkCcsXG4gICAgICAnc3RhY2tvdmVyZmxvdy5jb20nOiAn8J+SrCcsXG4gICAgICAnbWVkaXVtLmNvbSc6ICfinI3vuI8nLFxuICAgICAgJ3lvdXR1YmUuY29tJzogJ/Cfk7onLFxuICAgICAgJ3R3aXR0ZXIuY29tJzogJ/CfkKYnLFxuICAgICAgJ2xpbmtlZGluLmNvbSc6ICfwn5K8JyxcbiAgICAgICdyZWRkaXQuY29tJzogJ/CfpJYnLFxuICAgICAgJ2Rldi50byc6ICfwn5Go4oCN8J+SuycsXG4gICAgICAnaGFzaG5vZGUuY29tJzogJ/Cfk50nLFxuICAgICAgJ2RvY3MuZ29vZ2xlLmNvbSc6ICfwn5OEJ1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIGljb25zW2RvbWFpbl0gfHwgJ/CfjJAnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb2xvciBmb3IgZG9tYWluXG4gICAqL1xuICBwcml2YXRlIGdldERvbWFpbkNvbG9yKGRvbWFpbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb2xvcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnZ2l0aHViLmNvbSc6ICcjMjQyOTJlJyxcbiAgICAgICdzdGFja292ZXJmbG93LmNvbSc6ICcjZjQ4MDI0JyxcbiAgICAgICdtZWRpdW0uY29tJzogJyMwMGFiNmMnLFxuICAgICAgJ3lvdXR1YmUuY29tJzogJyNmZjAwMDAnLFxuICAgICAgJ3R3aXR0ZXIuY29tJzogJyMxZGExZjInLFxuICAgICAgJ2xpbmtlZGluLmNvbSc6ICcjMDA3N2I1JyxcbiAgICAgICdyZWRkaXQuY29tJzogJyNmZjQ1MDAnLFxuICAgICAgJ2Rldi50byc6ICcjMGEwYTBhJyxcbiAgICAgICdoYXNobm9kZS5jb20nOiAnIzI5NjJmZicsXG4gICAgICAnZG9jcy5nb29nbGUuY29tJzogJyM0Mjg1ZjQnXG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gY29sb3JzW2RvbWFpbl0gfHwgJyM2YjcyODAnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBpY29uIGZvciB0b3BpY1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRUb3BpY0ljb24odG9waWM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgaWNvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnUmVhY3QnOiAn4pqb77iPJyxcbiAgICAgICdKYXZhU2NyaXB0JzogJ/Cfn6gnLFxuICAgICAgJ1R5cGVTY3JpcHQnOiAn8J+UtycsXG4gICAgICAnUHl0aG9uJzogJ/CfkI0nLFxuICAgICAgJ05vZGUuanMnOiAn8J+foicsXG4gICAgICAnQVBJJzogJ/CflIwnLFxuICAgICAgJ0RhdGFiYXNlJzogJ/Cfl4TvuI8nLFxuICAgICAgJ01hY2hpbmUgTGVhcm5pbmcnOiAn8J+klicsXG4gICAgICAnQUknOiAn8J+noCcsXG4gICAgICAnRGVzaWduJzogJ/CfjqgnLFxuICAgICAgJ1VJL1VYJzogJ+KcqCcsXG4gICAgICAnQ1NTJzogJ/CfjqgnLFxuICAgICAgJ0hUTUwnOiAn8J+ThCcsXG4gICAgICAnQmFja2VuZCc6ICfimpnvuI8nLFxuICAgICAgJ0Zyb250ZW5kJzogJ/CflqXvuI8nLFxuICAgICAgJ0Rldk9wcyc6ICfwn5SnJyxcbiAgICAgICdDbG91ZCc6ICfimIHvuI8nLFxuICAgICAgJ0FXUyc6ICfwn5+gJyxcbiAgICAgICdEb2NrZXInOiAn8J+QsycsXG4gICAgICAnU2VjdXJpdHknOiAn8J+UkicsXG4gICAgICAnTW9iaWxlJzogJ/Cfk7EnLFxuICAgICAgJ1R1dG9yaWFsJzogJ/Cfk5onLFxuICAgICAgJ1Rvb2wnOiAn8J+boO+4jydcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBpY29uc1t0b3BpY10gfHwgJ/Cfj7fvuI8nO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb2xvciBmb3IgdG9waWNcbiAgICovXG4gIHByaXZhdGUgZ2V0VG9waWNDb2xvcih0b3BpYzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb2xvcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnUmVhY3QnOiAnIzYxZGFmYicsXG4gICAgICAnSmF2YVNjcmlwdCc6ICcjZjdkZjFlJyxcbiAgICAgICdUeXBlU2NyaXB0JzogJyMzMTc4YzYnLFxuICAgICAgJ1B5dGhvbic6ICcjMzc3NmFiJyxcbiAgICAgICdOb2RlLmpzJzogJyMzMzk5MzMnLFxuICAgICAgJ0FQSSc6ICcjZmY2YjZiJyxcbiAgICAgICdEYXRhYmFzZSc6ICcjMzM2NzkxJyxcbiAgICAgICdNYWNoaW5lIExlYXJuaW5nJzogJyNmZjk1MDAnLFxuICAgICAgJ0FJJzogJyM4YjVjZjYnLFxuICAgICAgJ0Rlc2lnbic6ICcjZTkxZTYzJyxcbiAgICAgICdVSS9VWCc6ICcjOWMyN2IwJyxcbiAgICAgICdDU1MnOiAnIzE1NzJiNicsXG4gICAgICAnSFRNTCc6ICcjZTM0ZjI2JyxcbiAgICAgICdCYWNrZW5kJzogJyM0Y2FmNTAnLFxuICAgICAgJ0Zyb250ZW5kJzogJyMyMTk2ZjMnLFxuICAgICAgJ0Rldk9wcyc6ICcjZmY1NzIyJyxcbiAgICAgICdDbG91ZCc6ICcjNjA3ZDhiJyxcbiAgICAgICdTZWN1cml0eSc6ICcjNzk1NTQ4JyxcbiAgICAgICdNb2JpbGUnOiAnIzAwYmNkNCcsXG4gICAgICAnVHV0b3JpYWwnOiAnI2ZmOTgwMCcsXG4gICAgICAnVG9vbCc6ICcjNjA3ZDhiJ1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIGNvbG9yc1t0b3BpY10gfHwgJyM2YjcyODAnO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuaGFuY2VkIGNvbnRlbnQgYW5hbHlzaXMgZm9yIHNtYXJ0IGNvbGxlY3Rpb24gbWF0Y2hpbmdcbiAgICovXG4gIGFzeW5jIGFuYWx5emVGb3JTbWFydENvbGxlY3Rpb25zKGxpbms6IFNhdmVkTGluayk6IFByb21pc2U8e1xuICAgIG1hdGNoaW5nQ29sbGVjdGlvbnM6IHN0cmluZ1tdO1xuICAgIHN1Z2dlc3RlZFRhZ3M6IHN0cmluZ1tdO1xuICAgIGNvbnRlbnRTaWduYWxzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICB9PiB7XG4gICAgY29uc3QgY29udGVudCA9IGAke2xpbmsudGl0bGV9ICR7bGluay51c2VyTm90ZX0gJHtsaW5rLmFpU3VtbWFyeSB8fCAnJ31gLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgZG9tYWluID0gbGluay5kb21haW47XG4gICAgXG4gICAgY29uc3QgbWF0Y2hpbmdDb2xsZWN0aW9uczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBzdWdnZXN0ZWRUYWdzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IGNvbnRlbnRTaWduYWxzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG5cbiAgICAvLyBDaGVjayBmb3IgQUkvTUwgY29udGVudFxuICAgIGNvbnN0IGFpS2V5d29yZHMgPSBbJ2FpJywgJ2FydGlmaWNpYWwgaW50ZWxsaWdlbmNlJywgJ21hY2hpbmUgbGVhcm5pbmcnLCAnbWwnLCAnbmV1cmFsJywgJ2RlZXAgbGVhcm5pbmcnXTtcbiAgICBjb25zdCBhaVNjb3JlID0gYWlLZXl3b3Jkcy5maWx0ZXIoa2V5d29yZCA9PiBjb250ZW50LmluY2x1ZGVzKGtleXdvcmQpKS5sZW5ndGg7XG4gICAgaWYgKGFpU2NvcmUgPiAwKSB7XG4gICAgICBtYXRjaGluZ0NvbGxlY3Rpb25zLnB1c2goJ2FpLXJlbGF0ZWQnKTtcbiAgICAgIHN1Z2dlc3RlZFRhZ3MucHVzaCgnQUknKTtcbiAgICAgIGNvbnRlbnRTaWduYWxzLmFpID0gYWlTY29yZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgdHV0b3JpYWwgY29udGVudFxuICAgIGNvbnN0IHR1dG9yaWFsS2V5d29yZHMgPSBbJ3R1dG9yaWFsJywgJ2hvdyB0bycsICdndWlkZScsICd3YWxrdGhyb3VnaCcsICdzdGVwIGJ5IHN0ZXAnXTtcbiAgICBjb25zdCB0dXRvcmlhbFNjb3JlID0gdHV0b3JpYWxLZXl3b3Jkcy5maWx0ZXIoa2V5d29yZCA9PiBjb250ZW50LmluY2x1ZGVzKGtleXdvcmQpKS5sZW5ndGg7XG4gICAgaWYgKHR1dG9yaWFsU2NvcmUgPiAwKSB7XG4gICAgICBtYXRjaGluZ0NvbGxlY3Rpb25zLnB1c2goJ3R1dG9yaWFscycpO1xuICAgICAgc3VnZ2VzdGVkVGFncy5wdXNoKCd0dXRvcmlhbCcpO1xuICAgICAgY29udGVudFNpZ25hbHMudHV0b3JpYWwgPSB0dXRvcmlhbFNjb3JlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBHaXRIdWIgcmVwb3NpdG9yaWVzXG4gICAgaWYgKGRvbWFpbi5pbmNsdWRlcygnZ2l0aHViLmNvbScpKSB7XG4gICAgICBtYXRjaGluZ0NvbGxlY3Rpb25zLnB1c2goJ2dpdGh1Yi1yZXBvcycpO1xuICAgICAgc3VnZ2VzdGVkVGFncy5wdXNoKCdnaXRodWInLCAncmVwb3NpdG9yeScpO1xuICAgICAgY29udGVudFNpZ25hbHMuZ2l0aHViID0gMTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgcmVjZW50IGNvbnRlbnQgKGxhc3QgNyBkYXlzKVxuICAgIGNvbnN0IGRheXNTaW5jZUNyZWF0ZWQgPSAoRGF0ZS5ub3coKSAtIGxpbmsuY3JlYXRlZEF0LmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCk7XG4gICAgaWYgKGRheXNTaW5jZUNyZWF0ZWQgPD0gNykge1xuICAgICAgbWF0Y2hpbmdDb2xsZWN0aW9ucy5wdXNoKCdyZWNlbnQtcmVhZHMnKTtcbiAgICAgIGNvbnRlbnRTaWduYWxzLnJlY2VudCA9IE1hdGgubWF4KDAsIDcgLSBkYXlzU2luY2VDcmVhdGVkKSAvIDc7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIHVucmVhZCBjb250ZW50IChubyB1c2VyIG5vdGVzKVxuICAgIGlmICghbGluay51c2VyTm90ZSB8fCBsaW5rLnVzZXJOb3RlLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgIG1hdGNoaW5nQ29sbGVjdGlvbnMucHVzaCgndW5yZWFkJyk7XG4gICAgICBjb250ZW50U2lnbmFscy51bnJlYWQgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGluZ0NvbGxlY3Rpb25zLFxuICAgICAgc3VnZ2VzdGVkVGFncyxcbiAgICAgIGNvbnRlbnRTaWduYWxzXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYWlTZXJ2aWNlID0gbmV3IEFJU2VydmljZSgpOyAiXSwibmFtZXMiOlsiZSIsInQiLCJyIiwiU3ltYm9sIiwibiIsIml0ZXJhdG9yIiwibyIsInRvU3RyaW5nVGFnIiwiaSIsImMiLCJwcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJ1IiwiT2JqZWN0IiwiY3JlYXRlIiwiX3JlZ2VuZXJhdG9yRGVmaW5lMiIsImYiLCJwIiwieSIsIkciLCJ2IiwiYSIsImQiLCJiaW5kIiwibGVuZ3RoIiwibCIsIlR5cGVFcnJvciIsImNhbGwiLCJkb25lIiwidmFsdWUiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImRpc3BsYXlOYW1lIiwiX3JlZ2VuZXJhdG9yIiwidyIsIm0iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9pbnZva2UiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJfZGVmaW5lUHJvcGVydGllcyIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX3R5cGVvZiIsInRvUHJpbWl0aXZlIiwiU3RyaW5nIiwiX3RvUHJpbWl0aXZlIiwiQUlTZXJ2aWNlIiwiY29uZmlnIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImFwaUtleSIsIm1vZGVsIiwiX2FuYWx5emVDb250ZW50IiwiX2NhbGxlZSIsImNvbnRlbnQiLCJ0aXRsZSIsInVybCIsInJlc3BvbnNlIiwiX3QiLCJfY29udGV4dCIsImdlbmVyYXRlUnVsZUJhc2VkQW5hbHlzaXMiLCJjYWxsT3BlbkFJRm9yQW5hbHlzaXMiLCJjb25zb2xlIiwiZXJyb3IiLCJfeCIsIl94MiIsIl94MyIsIl9nZW5lcmF0ZVN1bW1hcnkiLCJfY2FsbGVlMiIsIl90MiIsIl9jb250ZXh0MiIsImdlbmVyYXRlUGxhY2Vob2xkZXJTdW1tYXJ5IiwiY2FsbE9wZW5BSSIsIl94NCIsIl94NSIsIl94NiIsImRvbWFpbiIsIlVSTCIsImhvc3RuYW1lIiwiY29udGVudExvd2VyIiwidG9Mb3dlckNhc2UiLCJ0aXRsZUxvd2VyIiwiZnVsbFRleHQiLCJjb25jYXQiLCJjb250ZW50VHlwZSIsImRldGVjdENvbnRlbnRUeXBlIiwidGFnU3VnZ2VzdGlvbnMiLCJnZW5lcmF0ZVJ1bGVCYXNlZFRhZ3MiLCJjYXRlZ29yeVN1Z2dlc3Rpb25zIiwiZ2VuZXJhdGVSdWxlQmFzZWRDYXRlZ29yaWVzIiwidG9waWNzIiwiZXh0cmFjdFRvcGljcyIsImNvbXBsZXhpdHkiLCJlc3RpbWF0ZUNvbXBsZXhpdHkiLCJyZWFkaW5nVGltZSIsImVzdGltYXRlUmVhZGluZ1RpbWUiLCJzdW1tYXJ5IiwiaW5jbHVkZXMiLCJzdWdnZXN0aW9ucyIsIl9pIiwiX09iamVjdCRlbnRyaWVzIiwiZW50cmllcyIsInRhZyIsImNvbmZpZGVuY2UiLCJyZWFzb24iLCJfT2JqZWN0JGVudHJpZXMkX2kiLCJfc2xpY2VkVG9BcnJheSIsImRvbWFpblBhdHRlcm4iLCJ0YWdzIiwicHVzaCIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9pMiIsIl9PYmplY3QkZW50cmllczIiLCJfT2JqZWN0JGVudHJpZXMyJF9pIiwibWF0Y2hlcyIsImZpbHRlciIsImtleXdvcmQiLCJNYXRoIiwibWluIiwiX2kzIiwiX2J1c2luZXNzS2V5d29yZHMiLCJpdGVtIiwiaW5kZXgiLCJhcnIiLCJmaW5kSW5kZXgiLCJzb3J0IiwiYiIsInNsaWNlIiwiY2F0ZWdvcnkiLCJ0b3BpYyIsInRlY2hTY29yZSIsInRlcm0iLCJiZWdpbm5lclNjb3JlIiwiYWR2YW5jZWRTY29yZSIsIndvcmRDb3VudCIsInNwbGl0IiwibWF4Iiwicm91bmQiLCJfY2FsbE9wZW5BSUZvckFuYWx5c2lzIiwiX2NhbGxlZTMiLCJfZGF0YSRjaG9pY2VzJCIsInByb21wdCIsImRhdGEiLCJhaVJlc3BvbnNlIiwicGFyc2VkIiwiX3QzIiwiX2NvbnRleHQzIiwic3Vic3RyaW5nIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXNzYWdlcyIsInJvbGUiLCJtYXhfdG9rZW5zIiwidGVtcGVyYXR1cmUiLCJqc29uIiwiY2hvaWNlcyIsIm1lc3NhZ2UiLCJwYXJzZSIsIl94NyIsIl94OCIsIl94OSIsIl9jYWxsT3BlbkFJIiwiX2NhbGxlZTQiLCJfZGF0YSRjaG9pY2VzJDIiLCJfY29udGV4dDQiLCJfeDAiLCJfeDEiLCJfeDEwIiwiY29udGVudExlbmd0aCIsIl9nZW5lcmF0ZVNtYXJ0Q29sbGVjdGlvblN1Z2dlc3Rpb25zIiwiX2NhbGxlZTUiLCJsaW5rcyIsImRvbWFpbkFuYWx5c2lzIiwidG9waWNBbmFseXNpcyIsInRpbWVBbmFseXNpcyIsIm5vdyIsIl9pNCIsIl9PYmplY3QkZW50cmllczMiLCJfT2JqZWN0JGVudHJpZXMzJF9pIiwiY291bnQiLCJfaTUiLCJfT2JqZWN0JGVudHJpZXM0IiwiX09iamVjdCRlbnRyaWVzNCRfaSIsIl9jb3VudCIsIl9jb250ZXh0NSIsImFuYWx5emVEb21haW5zIiwiYW5hbHl6ZVRvcGljcyIsImFuYWx5emVUaW1lUGF0dGVybnMiLCJEYXRlIiwiaWQiLCJyZXBsYWNlIiwibmFtZSIsImdldERvbWFpbkRpc3BsYXlOYW1lIiwiZGVzY3JpcHRpb24iLCJxdWVyeSIsImlzU3lzdGVtIiwiYXV0b1VwZGF0ZSIsImljb24iLCJnZXREb21haW5JY29uIiwiY29sb3IiLCJnZXREb21haW5Db2xvciIsImZpbHRlcnMiLCJkb21haW5zIiwiY3JlYXRlZEF0IiwidXBkYXRlZEF0IiwiZ2V0VG9waWNJY29uIiwiZ2V0VG9waWNDb2xvciIsInJlY2VudEFjdGl2aXR5IiwiZGF0ZVJhbmdlIiwic3RhcnQiLCJfeDExIiwiZG9tYWluQ291bnRzIiwiZm9yRWFjaCIsImxpbmsiLCJmcm9tRW50cmllcyIsIl9yZWYiLCJfcmVmMiIsInRvcGljQ291bnRzIiwiY29tbW9uVG9waWNzIiwidXNlck5vdGUiLCJhaVN1bW1hcnkiLCJfcmVmNSIsIl9yZWY2IiwidGhyZWVEYXlzQWdvIiwiZ2V0VGltZSIsIndlZWtseVBhdHRlcm4iLCJkYXlPZldlZWsiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ3ZWVrZGF5IiwiX2FuYWx5emVGb3JTbWFydENvbGxlY3Rpb25zIiwiX2NhbGxlZTYiLCJtYXRjaGluZ0NvbGxlY3Rpb25zIiwic3VnZ2VzdGVkVGFncyIsImNvbnRlbnRTaWduYWxzIiwiYWlTY29yZSIsInR1dG9yaWFsU2NvcmUiLCJkYXlzU2luY2VDcmVhdGVkIiwiX2NvbnRleHQ2IiwiYWkiLCJ0dXRvcmlhbCIsImdpdGh1YiIsInJlY2VudCIsInRyaW0iLCJ1bnJlYWQiLCJfeDEyIiwiYWlTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==