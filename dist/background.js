/*! For license information please see background.js.LICENSE.txt */
(()=>{"use strict";var e,t={45:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=n(r(825));t.default=class{constructor(e,{headers:t={},schema:r,fetch:n}){this.url=e,this.headers=t,this.schema=r,this.fetch=n}select(e,{head:t=!1,count:r}={}){const n=t?"HEAD":"GET";let i=!1;const o=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!i?"":('"'===e&&(i=!i),e)).join("");return this.url.searchParams.set("select",o),r&&(this.headers.Prefer=`count=${r}`),new s.default({method:n,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(e,{count:t,defaultToNull:r=!0}={}){const n=[];if(this.headers.Prefer&&n.push(this.headers.Prefer),t&&n.push(`count=${t}`),r||n.push("missing=default"),this.headers.Prefer=n.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new s.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}upsert(e,{onConflict:t,ignoreDuplicates:r=!1,count:n,defaultToNull:i=!0}={}){const o=[`resolution=${r?"ignore":"merge"}-duplicates`];if(void 0!==t&&this.url.searchParams.set("on_conflict",t),this.headers.Prefer&&o.push(this.headers.Prefer),n&&o.push(`count=${n}`),i||o.push("missing=default"),this.headers.Prefer=o.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new s.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}update(e,{count:t}={}){const r=[];return this.headers.Prefer&&r.push(this.headers.Prefer),t&&r.push(`count=${t}`),this.headers.Prefer=r.join(","),new s.default({method:"PATCH",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}delete({count:e}={}){const t=[];return e&&t.push(`count=${e}`),this.headers.Prefer&&t.unshift(this.headers.Prefer),this.headers.Prefer=t.join(","),new s.default({method:"DELETE",url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}}},261:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=n(r(660));class i extends s.default{select(e){let t=!1;const r=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!t?"":('"'===e&&(t=!t),e)).join("");return this.url.searchParams.set("select",r),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(e,{ascending:t=!0,nullsFirst:r,foreignTable:n,referencedTable:s=n}={}){const i=s?`${s}.order`:"order",o=this.url.searchParams.get(i);return this.url.searchParams.set(i,`${o?`${o},`:""}${e}.${t?"asc":"desc"}${void 0===r?"":r?".nullsfirst":".nullslast"}`),this}limit(e,{foreignTable:t,referencedTable:r=t}={}){const n=void 0===r?"limit":`${r}.limit`;return this.url.searchParams.set(n,`${e}`),this}range(e,t,{foreignTable:r,referencedTable:n=r}={}){const s=void 0===n?"offset":`${n}.offset`,i=void 0===n?"limit":`${n}.limit`;return this.url.searchParams.set(s,`${e}`),this.url.searchParams.set(i,""+(t-e+1)),this}abortSignal(e){return this.signal=e,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return"GET"===this.method?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:e=!1,verbose:t=!1,settings:r=!1,buffers:n=!1,wal:s=!1,format:i="text"}={}){var o;const a=[e?"analyze":null,t?"verbose":null,r?"settings":null,n?"buffers":null,s?"wal":null].filter(Boolean).join("|"),c=null!==(o=this.headers.Accept)&&void 0!==o?o:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${i}; for="${c}"; options=${a};`,this}rollback(){var e;return(null!==(e=this.headers.Prefer)&&void 0!==e?e:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}}t.default=i},279:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PostgrestError=t.PostgrestBuilder=t.PostgrestTransformBuilder=t.PostgrestFilterBuilder=t.PostgrestQueryBuilder=t.PostgrestClient=void 0;const s=n(r(342));t.PostgrestClient=s.default;const i=n(r(45));t.PostgrestQueryBuilder=i.default;const o=n(r(825));t.PostgrestFilterBuilder=o.default;const a=n(r(261));t.PostgrestTransformBuilder=a.default;const c=n(r(660));t.PostgrestBuilder=c.default;const l=n(r(818));t.PostgrestError=l.default,t.default={PostgrestClient:s.default,PostgrestQueryBuilder:i.default,PostgrestFilterBuilder:o.default,PostgrestTransformBuilder:a.default,PostgrestBuilder:c.default,PostgrestError:l.default}},342:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=n(r(45)),i=n(r(825)),o=r(530);class a{constructor(e,{headers:t={},schema:r,fetch:n}={}){this.url=e,this.headers=Object.assign(Object.assign({},o.DEFAULT_HEADERS),t),this.schemaName=r,this.fetch=n}from(e){const t=new URL(`${this.url}/${e}`);return new s.default(t,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(e){return new a(this.url,{headers:this.headers,schema:e,fetch:this.fetch})}rpc(e,t={},{head:r=!1,get:n=!1,count:s}={}){let o;const a=new URL(`${this.url}/rpc/${e}`);let c;r||n?(o=r?"HEAD":"GET",Object.entries(t).filter(([e,t])=>void 0!==t).map(([e,t])=>[e,Array.isArray(t)?`{${t.join(",")}}`:`${t}`]).forEach(([e,t])=>{a.searchParams.append(e,t)})):(o="POST",c=t);const l=Object.assign({},this.headers);return s&&(l.Prefer=`count=${s}`),new i.default({method:o,url:a,headers:l,schema:this.schemaName,body:c,fetch:this.fetch,allowEmpty:!1})}}t.default=a},519:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="0.0.0-automated"},530:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_HEADERS=void 0;const n=r(519);t.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${n.version}`}},660:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=n(r(907)),i=n(r(818));t.default=class{constructor(e){this.shouldThrowOnError=!1,this.method=e.method,this.url=e.url,this.headers=e.headers,this.schema=e.schema,this.body=e.body,this.shouldThrowOnError=e.shouldThrowOnError,this.signal=e.signal,this.isMaybeSingle=e.isMaybeSingle,e.fetch?this.fetch=e.fetch:"undefined"==typeof fetch?this.fetch=s.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(e,t){return this.headers=Object.assign({},this.headers),this.headers[e]=t,this}then(e,t){void 0===this.schema||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),"GET"!==this.method&&"HEAD"!==this.method&&(this.headers["Content-Type"]="application/json");let r=(0,this.fetch)(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async e=>{var t,r,n;let s=null,o=null,a=null,c=e.status,l=e.statusText;if(e.ok){if("HEAD"!==this.method){const t=await e.text();""===t||(o="text/csv"===this.headers.Accept||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?t:JSON.parse(t))}const n=null===(t=this.headers.Prefer)||void 0===t?void 0:t.match(/count=(exact|planned|estimated)/),i=null===(r=e.headers.get("content-range"))||void 0===r?void 0:r.split("/");n&&i&&i.length>1&&(a=parseInt(i[1])),this.isMaybeSingle&&"GET"===this.method&&Array.isArray(o)&&(o.length>1?(s={code:"PGRST116",details:`Results contain ${o.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},o=null,a=null,c=406,l="Not Acceptable"):o=1===o.length?o[0]:null)}else{const t=await e.text();try{s=JSON.parse(t),Array.isArray(s)&&404===e.status&&(o=[],s=null,c=200,l="OK")}catch(r){404===e.status&&""===t?(c=204,l="No Content"):s={message:t}}if(s&&this.isMaybeSingle&&(null===(n=null==s?void 0:s.details)||void 0===n?void 0:n.includes("0 rows"))&&(s=null,c=200,l="OK"),s&&this.shouldThrowOnError)throw new i.default(s)}return{error:s,data:o,count:a,status:c,statusText:l}});return this.shouldThrowOnError||(r=r.catch(e=>{var t,r,n;return{error:{message:`${null!==(t=null==e?void 0:e.name)&&void 0!==t?t:"FetchError"}: ${null==e?void 0:e.message}`,details:`${null!==(r=null==e?void 0:e.stack)&&void 0!==r?r:""}`,hint:"",code:`${null!==(n=null==e?void 0:e.code)&&void 0!==n?n:""}`},data:null,count:null,status:0,statusText:""}})),r.then(e,t)}returns(){return this}overrideTypes(){return this}}},818:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class r extends Error{constructor(e){super(e.message),this.name="PostgrestError",this.details=e.details,this.hint=e.hint,this.code=e.code}}t.default=r},825:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=n(r(261));class i extends s.default{eq(e,t){return this.url.searchParams.append(e,`eq.${t}`),this}neq(e,t){return this.url.searchParams.append(e,`neq.${t}`),this}gt(e,t){return this.url.searchParams.append(e,`gt.${t}`),this}gte(e,t){return this.url.searchParams.append(e,`gte.${t}`),this}lt(e,t){return this.url.searchParams.append(e,`lt.${t}`),this}lte(e,t){return this.url.searchParams.append(e,`lte.${t}`),this}like(e,t){return this.url.searchParams.append(e,`like.${t}`),this}likeAllOf(e,t){return this.url.searchParams.append(e,`like(all).{${t.join(",")}}`),this}likeAnyOf(e,t){return this.url.searchParams.append(e,`like(any).{${t.join(",")}}`),this}ilike(e,t){return this.url.searchParams.append(e,`ilike.${t}`),this}ilikeAllOf(e,t){return this.url.searchParams.append(e,`ilike(all).{${t.join(",")}}`),this}ilikeAnyOf(e,t){return this.url.searchParams.append(e,`ilike(any).{${t.join(",")}}`),this}is(e,t){return this.url.searchParams.append(e,`is.${t}`),this}in(e,t){const r=Array.from(new Set(t)).map(e=>"string"==typeof e&&new RegExp("[,()]").test(e)?`"${e}"`:`${e}`).join(",");return this.url.searchParams.append(e,`in.(${r})`),this}contains(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cs.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cs.{${t.join(",")}}`):this.url.searchParams.append(e,`cs.${JSON.stringify(t)}`),this}containedBy(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cd.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cd.{${t.join(",")}}`):this.url.searchParams.append(e,`cd.${JSON.stringify(t)}`),this}rangeGt(e,t){return this.url.searchParams.append(e,`sr.${t}`),this}rangeGte(e,t){return this.url.searchParams.append(e,`nxl.${t}`),this}rangeLt(e,t){return this.url.searchParams.append(e,`sl.${t}`),this}rangeLte(e,t){return this.url.searchParams.append(e,`nxr.${t}`),this}rangeAdjacent(e,t){return this.url.searchParams.append(e,`adj.${t}`),this}overlaps(e,t){return"string"==typeof t?this.url.searchParams.append(e,`ov.${t}`):this.url.searchParams.append(e,`ov.{${t.join(",")}}`),this}textSearch(e,t,{config:r,type:n}={}){let s="";"plain"===n?s="pl":"phrase"===n?s="ph":"websearch"===n&&(s="w");const i=void 0===r?"":`(${r})`;return this.url.searchParams.append(e,`${s}fts${i}.${t}`),this}match(e){return Object.entries(e).forEach(([e,t])=>{this.url.searchParams.append(e,`eq.${t}`)}),this}not(e,t,r){return this.url.searchParams.append(e,`not.${t}.${r}`),this}or(e,{foreignTable:t,referencedTable:r=t}={}){const n=r?`${r}.or`:"or";return this.url.searchParams.append(n,`(${e})`),this}filter(e,t,r){return this.url.searchParams.append(e,`${t}.${r}`),this}}t.default=i},907:(e,t,r)=>{r.r(t),r.d(t,{Headers:()=>o,Request:()=>a,Response:()=>c,default:()=>i,fetch:()=>s});var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw new Error("unable to locate global object")}();const s=n.fetch,i=n.fetch.bind(n),o=n.Headers,a=n.Request,c=n.Response}},r={};function n(e){var s=r[e];if(void 0!==s)return s.exports;var i=r[e]={exports:{}};return t[e].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};class s extends Error{constructor(e,t="FunctionsError",r){super(e),this.name=t,this.context=r}}class i extends s{constructor(e){super("Failed to send a request to the Edge Function","FunctionsFetchError",e)}}class o extends s{constructor(e){super("Relay Error invoking the Edge Function","FunctionsRelayError",e)}}class a extends s{constructor(e){super("Edge Function returned a non-2xx status code","FunctionsHttpError",e)}}!function(e){e.Any="any",e.ApNortheast1="ap-northeast-1",e.ApNortheast2="ap-northeast-2",e.ApSouth1="ap-south-1",e.ApSoutheast1="ap-southeast-1",e.ApSoutheast2="ap-southeast-2",e.CaCentral1="ca-central-1",e.EuCentral1="eu-central-1",e.EuWest1="eu-west-1",e.EuWest2="eu-west-2",e.EuWest3="eu-west-3",e.SaEast1="sa-east-1",e.UsEast1="us-east-1",e.UsWest1="us-west-1",e.UsWest2="us-west-2"}(e||(e={}));class c{constructor(t,{headers:r={},customFetch:s,region:i=e.Any}={}){this.url=t,this.headers=r,this.region=i,this.fetch=(e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(n.bind(n,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)})(s)}setAuth(e){this.headers.Authorization=`Bearer ${e}`}invoke(e,t={}){var r,n,s,c,l;return n=this,s=void 0,l=function*(){try{const{headers:n,method:s,body:c}=t;let l={},{region:u}=t;u||(u=this.region);const h=new URL(`${this.url}/${e}`);let d;u&&"any"!==u&&(l["x-region"]=u,h.searchParams.set("forceFunctionRegion",u)),c&&(n&&!Object.prototype.hasOwnProperty.call(n,"Content-Type")||!n)&&("undefined"!=typeof Blob&&c instanceof Blob||c instanceof ArrayBuffer?(l["Content-Type"]="application/octet-stream",d=c):"string"==typeof c?(l["Content-Type"]="text/plain",d=c):"undefined"!=typeof FormData&&c instanceof FormData?d=c:(l["Content-Type"]="application/json",d=JSON.stringify(c)));const f=yield this.fetch(h.toString(),{method:s||"POST",headers:Object.assign(Object.assign(Object.assign({},l),this.headers),n),body:d}).catch(e=>{throw new i(e)}),p=f.headers.get("x-relay-error");if(p&&"true"===p)throw new o(f);if(!f.ok)throw new a(f);let g,v=(null!==(r=f.headers.get("Content-Type"))&&void 0!==r?r:"text/plain").split(";")[0].trim();return g="application/json"===v?yield f.json():"application/octet-stream"===v?yield f.blob():"text/event-stream"===v?f:"multipart/form-data"===v?yield f.formData():yield f.text(),{data:g,error:null,response:f}}catch(e){return{data:null,error:e,response:e instanceof a||e instanceof o?e.context:void 0}}},new((c=void 0)||(c=Promise))(function(e,t){function r(e){try{o(l.next(e))}catch(e){t(e)}}function i(e){try{o(l.throw(e))}catch(e){t(e)}}function o(t){var n;t.done?e(t.value):(n=t.value,n instanceof c?n:new c(function(e){e(n)})).then(r,i)}o((l=l.apply(n,s||[])).next())})}}var l=n(279);const{PostgrestClient:u,PostgrestQueryBuilder:h,PostgrestFilterBuilder:d,PostgrestTransformBuilder:f,PostgrestBuilder:p,PostgrestError:g}=l,v=function(){if("undefined"!=typeof WebSocket)return WebSocket;if(void 0!==global.WebSocket)return global.WebSocket;if(void 0!==window.WebSocket)return window.WebSocket;if(void 0!==self.WebSocket)return self.WebSocket;throw new Error("`WebSocket` is not supported in this environment")}();var y,m,b,w,_,k,S;!function(e){e[e.connecting=0]="connecting",e[e.open=1]="open",e[e.closing=2]="closing",e[e.closed=3]="closed"}(y||(y={})),(S=m||(m={})).closed="closed",S.errored="errored",S.joined="joined",S.joining="joining",S.leaving="leaving",function(e){e.close="phx_close",e.error="phx_error",e.join="phx_join",e.reply="phx_reply",e.leave="phx_leave",e.access_token="access_token"}(b||(b={})),function(e){e.websocket="websocket"}(w||(w={})),function(e){e.Connecting="connecting",e.Open="open",e.Closing="closing",e.Closed="closed"}(_||(_={}));class T{constructor(){this.HEADER_LENGTH=1}decode(e,t){return e.constructor===ArrayBuffer?t(this._binaryDecode(e)):t("string"==typeof e?JSON.parse(e):{})}_binaryDecode(e){const t=new DataView(e),r=new TextDecoder;return this._decodeBroadcast(e,t,r)}_decodeBroadcast(e,t,r){const n=t.getUint8(1),s=t.getUint8(2);let i=this.HEADER_LENGTH+2;const o=r.decode(e.slice(i,i+n));i+=n;const a=r.decode(e.slice(i,i+s));return i+=s,{ref:null,topic:o,event:a,payload:JSON.parse(r.decode(e.slice(i,e.byteLength)))}}}class j{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=void 0,this.tries=0,this.callback=e,this.timerCalc=t}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}!function(e){e.abstime="abstime",e.bool="bool",e.date="date",e.daterange="daterange",e.float4="float4",e.float8="float8",e.int2="int2",e.int4="int4",e.int4range="int4range",e.int8="int8",e.int8range="int8range",e.json="json",e.jsonb="jsonb",e.money="money",e.numeric="numeric",e.oid="oid",e.reltime="reltime",e.text="text",e.time="time",e.timestamp="timestamp",e.timestamptz="timestamptz",e.timetz="timetz",e.tsrange="tsrange",e.tstzrange="tstzrange"}(k||(k={}));const O=(e,t,r={})=>{var n;const s=null!==(n=r.skipTypes)&&void 0!==n?n:[];return Object.keys(t).reduce((r,n)=>(r[n]=E(n,e,t,s),r),{})},E=(e,t,r,n)=>{const s=t.find(t=>t.name===e),i=null==s?void 0:s.type,o=r[e];return i&&!n.includes(i)?P(i,o):I(o)},P=(e,t)=>{if("_"===e.charAt(0)){const r=e.slice(1,e.length);return $(t,r)}switch(e){case k.bool:return A(t);case k.float4:case k.float8:case k.int2:case k.int4:case k.int8:case k.numeric:case k.oid:return x(t);case k.json:case k.jsonb:return C(t);case k.timestamp:return R(t);case k.abstime:case k.date:case k.daterange:case k.int4range:case k.int8range:case k.money:case k.reltime:case k.text:case k.time:case k.timestamptz:case k.timetz:case k.tsrange:case k.tstzrange:default:return I(t)}},I=e=>e,A=e=>{switch(e){case"t":return!0;case"f":return!1;default:return e}},x=e=>{if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return t}return e},C=e=>{if("string"==typeof e)try{return JSON.parse(e)}catch(t){return console.log(`JSON parse error: ${t}`),e}return e},$=(e,t)=>{if("string"!=typeof e)return e;const r=e.length-1,n=e[r];if("{"===e[0]&&"}"===n){let n;const s=e.slice(1,r);try{n=JSON.parse("["+s+"]")}catch(e){n=s?s.split(","):[]}return n.map(e=>P(t,e))}return e},R=e=>"string"==typeof e?e.replace(" ","T"):e,U=e=>{let t=e;return t=t.replace(/^ws/i,"http"),t=t.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),t.replace(/\/+$/,"")};class L{constructor(e,t,r={},n=1e4){this.channel=e,this.event=t,this.payload=r,this.timeout=n,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(e){this.timeout=e,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(e){this.payload=Object.assign(Object.assign({},this.payload),e)}receive(e,t){var r;return this._hasReceived(e)&&t(null===(r=this.receivedResp)||void 0===r?void 0:r.response),this.recHooks.push({status:e,callback:t}),this}startTimeout(){this.timeoutTimer||(this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref),this.channel._on(this.refEvent,{},e=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=e,this._matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout))}trigger(e,t){this.refEvent&&this.channel._trigger(this.refEvent,{status:e,response:t})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:e,response:t}){this.recHooks.filter(t=>t.status===e).forEach(e=>e.callback(t))}_hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}}var D,N,q,B;!function(e){e.SYNC="sync",e.JOIN="join",e.LEAVE="leave"}(D||(D={}));class F{constructor(e,t){this.channel=e,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const r=(null==t?void 0:t.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(r.state,{},e=>{const{onJoin:t,onLeave:r,onSync:n}=this.caller;this.joinRef=this.channel._joinRef(),this.state=F.syncState(this.state,e,t,r),this.pendingDiffs.forEach(e=>{this.state=F.syncDiff(this.state,e,t,r)}),this.pendingDiffs=[],n()}),this.channel._on(r.diff,{},e=>{const{onJoin:t,onLeave:r,onSync:n}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(e):(this.state=F.syncDiff(this.state,e,t,r),n())}),this.onJoin((e,t,r)=>{this.channel._trigger("presence",{event:"join",key:e,currentPresences:t,newPresences:r})}),this.onLeave((e,t,r)=>{this.channel._trigger("presence",{event:"leave",key:e,currentPresences:t,leftPresences:r})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(e,t,r,n){const s=this.cloneDeep(e),i=this.transformState(t),o={},a={};return this.map(s,(e,t)=>{i[e]||(a[e]=t)}),this.map(i,(e,t)=>{const r=s[e];if(r){const n=t.map(e=>e.presence_ref),s=r.map(e=>e.presence_ref),i=t.filter(e=>s.indexOf(e.presence_ref)<0),c=r.filter(e=>n.indexOf(e.presence_ref)<0);i.length>0&&(o[e]=i),c.length>0&&(a[e]=c)}else o[e]=t}),this.syncDiff(s,{joins:o,leaves:a},r,n)}static syncDiff(e,t,r,n){const{joins:s,leaves:i}={joins:this.transformState(t.joins),leaves:this.transformState(t.leaves)};return r||(r=()=>{}),n||(n=()=>{}),this.map(s,(t,n)=>{var s;const i=null!==(s=e[t])&&void 0!==s?s:[];if(e[t]=this.cloneDeep(n),i.length>0){const r=e[t].map(e=>e.presence_ref),n=i.filter(e=>r.indexOf(e.presence_ref)<0);e[t].unshift(...n)}r(t,i,n)}),this.map(i,(t,r)=>{let s=e[t];if(!s)return;const i=r.map(e=>e.presence_ref);s=s.filter(e=>i.indexOf(e.presence_ref)<0),e[t]=s,n(t,s,r),0===s.length&&delete e[t]}),e}static map(e,t){return Object.getOwnPropertyNames(e).map(r=>t(r,e[r]))}static transformState(e){return e=this.cloneDeep(e),Object.getOwnPropertyNames(e).reduce((t,r)=>{const n=e[r];return t[r]="metas"in n?n.metas.map(e=>(e.presence_ref=e.phx_ref,delete e.phx_ref,delete e.phx_ref_prev,e)):n,t},{})}static cloneDeep(e){return JSON.parse(JSON.stringify(e))}onJoin(e){this.caller.onJoin=e}onLeave(e){this.caller.onLeave=e}onSync(e){this.caller.onSync=e}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}!function(e){e.ALL="*",e.INSERT="INSERT",e.UPDATE="UPDATE",e.DELETE="DELETE"}(N||(N={})),function(e){e.BROADCAST="broadcast",e.PRESENCE="presence",e.POSTGRES_CHANGES="postgres_changes",e.SYSTEM="system"}(q||(q={})),function(e){e.SUBSCRIBED="SUBSCRIBED",e.TIMED_OUT="TIMED_OUT",e.CLOSED="CLOSED",e.CHANNEL_ERROR="CHANNEL_ERROR"}(B||(B={}));class M{constructor(e,t={config:{}},r){this.topic=e,this.params=t,this.socket=r,this.bindings={},this.state=m.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=e.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},t.config),this.timeout=this.socket.timeout,this.joinPush=new L(this,b.join,this.params,this.timeout),this.rejoinTimer=new j(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=m.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(e=>e.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=m.closed,this.socket._remove(this)}),this._onError(e=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,e),this.state=m.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=m.errored,this.rejoinTimer.scheduleTimeout())}),this._on(b.reply,{},(e,t)=>{this._trigger(this._replyEventName(t),e)}),this.presence=new F(this),this.broadcastEndpointURL=U(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(e,t=this.timeout){var r,n;if(this.socket.isConnected()||this.socket.connect(),this.state==m.closed){const{config:{broadcast:s,presence:i,private:o}}=this.params;this._onError(t=>null==e?void 0:e(B.CHANNEL_ERROR,t)),this._onClose(()=>null==e?void 0:e(B.CLOSED));const a={},c={broadcast:s,presence:i,postgres_changes:null!==(n=null===(r=this.bindings.postgres_changes)||void 0===r?void 0:r.map(e=>e.filter))&&void 0!==n?n:[],private:o};this.socket.accessTokenValue&&(a.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:c},a)),this.joinedOnce=!0,this._rejoin(t),this.joinPush.receive("ok",async({postgres_changes:t})=>{var r;if(this.socket.setAuth(),void 0!==t){const n=this.bindings.postgres_changes,s=null!==(r=null==n?void 0:n.length)&&void 0!==r?r:0,i=[];for(let r=0;r<s;r++){const s=n[r],{filter:{event:o,schema:a,table:c,filter:l}}=s,u=t&&t[r];if(!u||u.event!==o||u.schema!==a||u.table!==c||u.filter!==l)return this.unsubscribe(),this.state=m.errored,void(null==e||e(B.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes")));i.push(Object.assign(Object.assign({},s),{id:u.id}))}return this.bindings.postgres_changes=i,void(e&&e(B.SUBSCRIBED))}null==e||e(B.SUBSCRIBED)}).receive("error",t=>{this.state=m.errored,null==e||e(B.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(t).join(", ")||"error")))}).receive("timeout",()=>{null==e||e(B.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(e,t={}){return await this.send({type:"presence",event:"track",payload:e},t.timeout||this.timeout)}async untrack(e={}){return await this.send({type:"presence",event:"untrack"},e)}on(e,t,r){return this._on(e,t,r)}async send(e,t={}){var r,n;if(this._canPush()||"broadcast"!==e.type)return new Promise(r=>{var n,s,i;const o=this._push(e.type,e,t.timeout||this.timeout);"broadcast"!==e.type||(null===(i=null===(s=null===(n=this.params)||void 0===n?void 0:n.config)||void 0===s?void 0:s.broadcast)||void 0===i?void 0:i.ack)||r("ok"),o.receive("ok",()=>r("ok")),o.receive("error",()=>r("error")),o.receive("timeout",()=>r("timed out"))});{const{event:s,payload:i}=e,o={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:s,payload:i,private:this.private}]})};try{const e=await this._fetchWithTimeout(this.broadcastEndpointURL,o,null!==(r=t.timeout)&&void 0!==r?r:this.timeout);return await(null===(n=e.body)||void 0===n?void 0:n.cancel()),e.ok?"ok":"error"}catch(e){return"AbortError"===e.name?"timed out":"error"}}}updateJoinPayload(e){this.joinPush.updatePayload(e)}unsubscribe(e=this.timeout){this.state=m.leaving;const t=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(b.close,"leave",this._joinRef())};this.joinPush.destroy();let r=null;return new Promise(n=>{r=new L(this,b.leave,{},e),r.receive("ok",()=>{t(),n("ok")}).receive("timeout",()=>{t(),n("timed out")}).receive("error",()=>{n("error")}),r.send(),this._canPush()||r.trigger("ok",{})}).finally(()=>{null==r||r.destroy()})}teardown(){this.pushBuffer.forEach(e=>e.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}async _fetchWithTimeout(e,t,r){const n=new AbortController,s=setTimeout(()=>n.abort(),r),i=await this.socket.fetch(e,Object.assign(Object.assign({},t),{signal:n.signal}));return clearTimeout(s),i}_push(e,t,r=this.timeout){if(!this.joinedOnce)throw`tried to push '${e}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let n=new L(this,e,t,r);return this._canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}_onMessage(e,t,r){return t}_isMember(e){return this.topic===e}_joinRef(){return this.joinPush.ref}_trigger(e,t,r){var n,s;const i=e.toLocaleLowerCase(),{close:o,error:a,leave:c,join:l}=b;if(r&&[o,a,c,l].indexOf(i)>=0&&r!==this._joinRef())return;let u=this._onMessage(i,t,r);if(t&&!u)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(i)?null===(n=this.bindings.postgres_changes)||void 0===n||n.filter(e=>{var t,r,n;return"*"===(null===(t=e.filter)||void 0===t?void 0:t.event)||(null===(n=null===(r=e.filter)||void 0===r?void 0:r.event)||void 0===n?void 0:n.toLocaleLowerCase())===i}).map(e=>e.callback(u,r)):null===(s=this.bindings[i])||void 0===s||s.filter(e=>{var r,n,s,o,a,c;if(["broadcast","presence","postgres_changes"].includes(i)){if("id"in e){const i=e.id,o=null===(r=e.filter)||void 0===r?void 0:r.event;return i&&(null===(n=t.ids)||void 0===n?void 0:n.includes(i))&&("*"===o||(null==o?void 0:o.toLocaleLowerCase())===(null===(s=t.data)||void 0===s?void 0:s.type.toLocaleLowerCase()))}{const r=null===(a=null===(o=null==e?void 0:e.filter)||void 0===o?void 0:o.event)||void 0===a?void 0:a.toLocaleLowerCase();return"*"===r||r===(null===(c=null==t?void 0:t.event)||void 0===c?void 0:c.toLocaleLowerCase())}}return e.type.toLocaleLowerCase()===i}).map(e=>{if("object"==typeof u&&"ids"in u){const e=u.data,{schema:t,table:r,commit_timestamp:n,type:s,errors:i}=e,o={schema:t,table:r,commit_timestamp:n,eventType:s,new:{},old:{},errors:i};u=Object.assign(Object.assign({},o),this._getPayloadRecords(e))}e.callback(u,r)})}_isClosed(){return this.state===m.closed}_isJoined(){return this.state===m.joined}_isJoining(){return this.state===m.joining}_isLeaving(){return this.state===m.leaving}_replyEventName(e){return`chan_reply_${e}`}_on(e,t,r){const n=e.toLocaleLowerCase(),s={type:n,filter:t,callback:r};return this.bindings[n]?this.bindings[n].push(s):this.bindings[n]=[s],this}_off(e,t){const r=e.toLocaleLowerCase();return this.bindings[r]=this.bindings[r].filter(e=>{var n;return!((null===(n=e.type)||void 0===n?void 0:n.toLocaleLowerCase())===r&&M.isEqual(e.filter,t))}),this}static isEqual(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const r in e)if(e[r]!==t[r])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(e){this._on(b.close,{},e)}_onError(e){this._on(b.error,{},t=>e(t))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(e=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=m.joining,this.joinPush.resend(e))}_getPayloadRecords(e){const t={new:{},old:{}};return"INSERT"!==e.type&&"UPDATE"!==e.type||(t.new=O(e.columns,e.record)),"UPDATE"!==e.type&&"DELETE"!==e.type||(t.old=O(e.columns,e.old_record)),t}}const J=()=>{};class z{constructor(e,t){var r;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers={},this.params={},this.timeout=1e4,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=J,this.ref=0,this.logger=J,this.conn=null,this.sendBuffer=[],this.serializer=new T,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(n.bind(n,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},this.endPoint=`${e}/${w.websocket}`,this.httpEndpoint=U(e),(null==t?void 0:t.transport)?this.transport=t.transport:this.transport=null,(null==t?void 0:t.params)&&(this.params=t.params),(null==t?void 0:t.timeout)&&(this.timeout=t.timeout),(null==t?void 0:t.logger)&&(this.logger=t.logger),((null==t?void 0:t.logLevel)||(null==t?void 0:t.log_level))&&(this.logLevel=t.logLevel||t.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),(null==t?void 0:t.heartbeatIntervalMs)&&(this.heartbeatIntervalMs=t.heartbeatIntervalMs);const s=null===(r=null==t?void 0:t.params)||void 0===r?void 0:r.apikey;if(s&&(this.accessTokenValue=s,this.apiKey=s),this.reconnectAfterMs=(null==t?void 0:t.reconnectAfterMs)?t.reconnectAfterMs:e=>[1e3,2e3,5e3,1e4][e-1]||1e4,this.encode=(null==t?void 0:t.encode)?t.encode:(e,t)=>t(JSON.stringify(e)),this.decode=(null==t?void 0:t.decode)?t.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new j(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(null==t?void 0:t.fetch),null==t?void 0:t.worker){if("undefined"!=typeof window&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(null==t?void 0:t.worker)||!1,this.workerUrl=null==t?void 0:t.workerUrl}this.accessToken=(null==t?void 0:t.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=v),!this.transport)throw new Error("No transport provided");this.conn=new this.transport(this.endpointURL()),this.setupConnection()}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:"1.0.0"}))}disconnect(e,t){this.conn&&(this.conn.onclose=function(){},e?this.conn.close(e,null!=t?t:""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(e=>e.teardown()))}getChannels(){return this.channels}async removeChannel(e){const t=await e.unsubscribe();return 0===this.channels.length&&this.disconnect(),t}async removeAllChannels(){const e=await Promise.all(this.channels.map(e=>e.unsubscribe()));return this.channels=[],this.disconnect(),e}log(e,t,r){this.logger(e,t,r)}connectionState(){switch(this.conn&&this.conn.readyState){case y.connecting:return _.Connecting;case y.open:return _.Open;case y.closing:return _.Closing;default:return _.Closed}}isConnected(){return this.connectionState()===_.Open}channel(e,t={config:{}}){const r=`realtime:${e}`,n=this.getChannels().find(e=>e.topic===r);if(n)return n;{const r=new M(`realtime:${e}`,t,this);return this.channels.push(r),r}}push(e){const{topic:t,event:r,payload:n,ref:s}=e,i=()=>{this.encode(e,e=>{var t;null===(t=this.conn)||void 0===t||t.send(e)})};this.log("push",`${t} ${r} (${s})`,n),this.isConnected()?i():this.sendBuffer.push(i)}async setAuth(e=null){let t=e||this.accessToken&&await this.accessToken()||this.accessTokenValue;this.accessTokenValue!=t&&(this.accessTokenValue=t,this.channels.forEach(e=>{const r={access_token:t,version:"realtime-js/2.11.15"};t&&e.updateJoinPayload(r),e.joinedOnce&&e._isJoined()&&e._push(b.access_token,{access_token:t})}))}async sendHeartbeat(){var e;if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),void(null===(e=this.conn)||void 0===e||e.close(1e3,"hearbeat timeout"));this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),await this.setAuth()}else this.heartbeatCallback("disconnected")}onHeartbeat(e){this.heartbeatCallback=e}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}_makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}_leaveOpenTopic(e){let t=this.channels.find(t=>t.topic===e&&(t._isJoined()||t._isJoining()));t&&(this.log("transport",`leaving duplicate topic "${e}"`),t.unsubscribe())}_remove(e){this.channels=this.channels.filter(t=>t.topic!==e.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=e=>this._onConnError(e),this.conn.onmessage=e=>this._onConnMessage(e),this.conn.onclose=e=>this._onConnClose(e))}_onConnMessage(e){this.decode(e.data,e=>{let{topic:t,event:r,payload:n,ref:s}=e;"phoenix"===t&&"phx_reply"===r&&this.heartbeatCallback("ok"==e.payload.status?"ok":"error"),s&&s===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${n.status||""} ${t} ${r} ${s&&"("+s+")"||""}`,n),Array.from(this.channels).filter(e=>e._isMember(t)).forEach(e=>e._trigger(r,n,s)),this.stateChangeCallbacks.message.forEach(t=>t(e))})}_onConnOpen(){this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker?this.workerRef||this._startWorkerHeartbeat():this._startHeartbeat(),this.stateChangeCallbacks.open.forEach(e=>e())}_startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)}_startWorkerHeartbeat(){this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const e=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(e),this.workerRef.onerror=e=>{this.log("worker","worker error",e.message),this.workerRef.terminate()},this.workerRef.onmessage=e=>{"keepAlive"===e.data.event&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}_onConnClose(e){this.log("transport","close",e),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(t=>t(e))}_onConnError(e){this.log("transport",`${e}`),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(t=>t(e))}_triggerChanError(){this.channels.forEach(e=>e._trigger(b.error))}_appendParams(e,t){if(0===Object.keys(t).length)return e;const r=e.match(/\?/)?"&":"?";return`${e}${r}${new URLSearchParams(t)}`}_workerObjectUrl(e){let t;if(e)t=e;else{const e=new Blob(['\n  addEventListener("message", (e) => {\n    if (e.data.event === "start") {\n      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);\n    }\n  });'],{type:"application/javascript"});t=URL.createObjectURL(e)}return t}}class G extends Error{constructor(e){super(e),this.__isStorageError=!0,this.name="StorageError"}}function H(e){return"object"==typeof e&&null!==e&&"__isStorageError"in e}class W extends G{constructor(e,t){super(e),this.name="StorageApiError",this.status=t}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class K extends G{constructor(e,t){super(e),this.name="StorageUnknownError",this.originalError=t}}const V=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(n.bind(n,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},Y=e=>{if(Array.isArray(e))return e.map(e=>Y(e));if("function"==typeof e||e!==Object(e))return e;const t={};return Object.entries(e).forEach(([e,r])=>{const n=e.replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace(/[-_]/g,""));t[n]=Y(r)}),t};var Q=function(e,t,r,n){return new(r||(r=Promise))(function(s,i){function o(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(o,a)}c((n=n.apply(e,t||[])).next())})};const X=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),Z=(e,t,r)=>Q(void 0,void 0,void 0,function*(){const s=yield(i=void 0,o=void 0,a=void 0,c=function*(){return"undefined"==typeof Response?(yield Promise.resolve().then(n.bind(n,907))).Response:Response},new(a||(a=Promise))(function(e,t){function r(e){try{s(c.next(e))}catch(e){t(e)}}function n(e){try{s(c.throw(e))}catch(e){t(e)}}function s(t){var s;t.done?e(t.value):(s=t.value,s instanceof a?s:new a(function(e){e(s)})).then(r,n)}s((c=c.apply(i,o||[])).next())}));var i,o,a,c;e instanceof s&&!(null==r?void 0:r.noResolveJson)?e.json().then(r=>{t(new W(X(r),e.status||500))}).catch(e=>{t(new K(X(e),e))}):t(new K(X(e),e))});function ee(e,t,r,n,s,i){return Q(this,void 0,void 0,function*(){return new Promise((o,a)=>{e(r,((e,t,r,n)=>{const s={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?s:(s.headers=Object.assign({"Content-Type":"application/json"},null==t?void 0:t.headers),n&&(s.body=JSON.stringify(n)),Object.assign(Object.assign({},s),r))})(t,n,s,i)).then(e=>{if(!e.ok)throw e;return(null==n?void 0:n.noResolveJson)?e:e.json()}).then(e=>o(e)).catch(e=>Z(e,a,n))})})}function te(e,t,r,n){return Q(this,void 0,void 0,function*(){return ee(e,"GET",t,r,n)})}function re(e,t,r,n,s){return Q(this,void 0,void 0,function*(){return ee(e,"POST",t,n,s,r)})}function ne(e,t,r,n,s){return Q(this,void 0,void 0,function*(){return ee(e,"DELETE",t,n,s,r)})}var se=function(e,t,r,n){return new(r||(r=Promise))(function(s,i){function o(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(o,a)}c((n=n.apply(e,t||[])).next())})};const ie={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},oe={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class ae{constructor(e,t={},r,n){this.url=e,this.headers=t,this.bucketId=r,this.fetch=V(n)}uploadOrUpdate(e,t,r,n){return se(this,void 0,void 0,function*(){try{let s;const i=Object.assign(Object.assign({},oe),n);let o=Object.assign(Object.assign({},this.headers),"POST"===e&&{"x-upsert":String(i.upsert)});const a=i.metadata;"undefined"!=typeof Blob&&r instanceof Blob?(s=new FormData,s.append("cacheControl",i.cacheControl),a&&s.append("metadata",this.encodeMetadata(a)),s.append("",r)):"undefined"!=typeof FormData&&r instanceof FormData?(s=r,s.append("cacheControl",i.cacheControl),a&&s.append("metadata",this.encodeMetadata(a))):(s=r,o["cache-control"]=`max-age=${i.cacheControl}`,o["content-type"]=i.contentType,a&&(o["x-metadata"]=this.toBase64(this.encodeMetadata(a)))),(null==n?void 0:n.headers)&&(o=Object.assign(Object.assign({},o),n.headers));const c=this._removeEmptyFolders(t),l=this._getFinalPath(c),u=yield this.fetch(`${this.url}/object/${l}`,Object.assign({method:e,body:s,headers:o},(null==i?void 0:i.duplex)?{duplex:i.duplex}:{})),h=yield u.json();return u.ok?{data:{path:c,id:h.Id,fullPath:h.Key},error:null}:{data:null,error:h}}catch(e){if(H(e))return{data:null,error:e};throw e}})}upload(e,t,r){return se(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",e,t,r)})}uploadToSignedUrl(e,t,r,n){return se(this,void 0,void 0,function*(){const s=this._removeEmptyFolders(e),i=this._getFinalPath(s),o=new URL(this.url+`/object/upload/sign/${i}`);o.searchParams.set("token",t);try{let e;const t=Object.assign({upsert:oe.upsert},n),i=Object.assign(Object.assign({},this.headers),{"x-upsert":String(t.upsert)});"undefined"!=typeof Blob&&r instanceof Blob?(e=new FormData,e.append("cacheControl",t.cacheControl),e.append("",r)):"undefined"!=typeof FormData&&r instanceof FormData?(e=r,e.append("cacheControl",t.cacheControl)):(e=r,i["cache-control"]=`max-age=${t.cacheControl}`,i["content-type"]=t.contentType);const a=yield this.fetch(o.toString(),{method:"PUT",body:e,headers:i}),c=yield a.json();return a.ok?{data:{path:s,fullPath:c.Key},error:null}:{data:null,error:c}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createSignedUploadUrl(e,t){return se(this,void 0,void 0,function*(){try{let r=this._getFinalPath(e);const n=Object.assign({},this.headers);(null==t?void 0:t.upsert)&&(n["x-upsert"]="true");const s=yield re(this.fetch,`${this.url}/object/upload/sign/${r}`,{},{headers:n}),i=new URL(this.url+s.url),o=i.searchParams.get("token");if(!o)throw new G("No token returned by API");return{data:{signedUrl:i.toString(),path:e,token:o},error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}update(e,t,r){return se(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",e,t,r)})}move(e,t,r){return se(this,void 0,void 0,function*(){try{return{data:yield re(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==r?void 0:r.destinationBucket},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}copy(e,t,r){return se(this,void 0,void 0,function*(){try{return{data:{path:(yield re(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==r?void 0:r.destinationBucket},{headers:this.headers})).Key},error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createSignedUrl(e,t,r){return se(this,void 0,void 0,function*(){try{let n=this._getFinalPath(e),s=yield re(this.fetch,`${this.url}/object/sign/${n}`,Object.assign({expiresIn:t},(null==r?void 0:r.transform)?{transform:r.transform}:{}),{headers:this.headers});const i=(null==r?void 0:r.download)?`&download=${!0===r.download?"":r.download}`:"";return s={signedUrl:encodeURI(`${this.url}${s.signedURL}${i}`)},{data:s,error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createSignedUrls(e,t,r){return se(this,void 0,void 0,function*(){try{const n=yield re(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:t,paths:e},{headers:this.headers}),s=(null==r?void 0:r.download)?`&download=${!0===r.download?"":r.download}`:"";return{data:n.map(e=>Object.assign(Object.assign({},e),{signedUrl:e.signedURL?encodeURI(`${this.url}${e.signedURL}${s}`):null})),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}download(e,t){return se(this,void 0,void 0,function*(){const r=void 0!==(null==t?void 0:t.transform)?"render/image/authenticated":"object",n=this.transformOptsToQueryString((null==t?void 0:t.transform)||{}),s=n?`?${n}`:"";try{const t=this._getFinalPath(e),n=yield te(this.fetch,`${this.url}/${r}/${t}${s}`,{headers:this.headers,noResolveJson:!0});return{data:yield n.blob(),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}info(e){return se(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{const e=yield te(this.fetch,`${this.url}/object/info/${t}`,{headers:this.headers});return{data:Y(e),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}exists(e){return se(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{return yield function(e,t,r){return Q(this,void 0,void 0,function*(){return ee(e,"HEAD",t,Object.assign(Object.assign({},r),{noResolveJson:!0}),undefined)})}(this.fetch,`${this.url}/object/${t}`,{headers:this.headers}),{data:!0,error:null}}catch(e){if(H(e)&&e instanceof K){const t=e.originalError;if([400,404].includes(null==t?void 0:t.status))return{data:!1,error:e}}throw e}})}getPublicUrl(e,t){const r=this._getFinalPath(e),n=[],s=(null==t?void 0:t.download)?`download=${!0===t.download?"":t.download}`:"";""!==s&&n.push(s);const i=void 0!==(null==t?void 0:t.transform)?"render/image":"object",o=this.transformOptsToQueryString((null==t?void 0:t.transform)||{});""!==o&&n.push(o);let a=n.join("&");return""!==a&&(a=`?${a}`),{data:{publicUrl:encodeURI(`${this.url}/${i}/public/${r}${a}`)}}}remove(e){return se(this,void 0,void 0,function*(){try{return{data:yield ne(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:e},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}list(e,t,r){return se(this,void 0,void 0,function*(){try{const n=Object.assign(Object.assign(Object.assign({},ie),t),{prefix:e||""});return{data:yield re(this.fetch,`${this.url}/object/list/${this.bucketId}`,n,{headers:this.headers},r),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}encodeMetadata(e){return JSON.stringify(e)}toBase64(e){return"undefined"!=typeof Buffer?Buffer.from(e).toString("base64"):btoa(e)}_getFinalPath(e){return`${this.bucketId}/${e}`}_removeEmptyFolders(e){return e.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(e){const t=[];return e.width&&t.push(`width=${e.width}`),e.height&&t.push(`height=${e.height}`),e.resize&&t.push(`resize=${e.resize}`),e.format&&t.push(`format=${e.format}`),e.quality&&t.push(`quality=${e.quality}`),t.join("&")}}const ce={"X-Client-Info":"storage-js/2.7.1"};var le=function(e,t,r,n){return new(r||(r=Promise))(function(s,i){function o(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(o,a)}c((n=n.apply(e,t||[])).next())})};class ue{constructor(e,t={},r){this.url=e,this.headers=Object.assign(Object.assign({},ce),t),this.fetch=V(r)}listBuckets(){return le(this,void 0,void 0,function*(){try{return{data:yield te(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}getBucket(e){return le(this,void 0,void 0,function*(){try{return{data:yield te(this.fetch,`${this.url}/bucket/${e}`,{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createBucket(e,t={public:!1}){return le(this,void 0,void 0,function*(){try{return{data:yield re(this.fetch,`${this.url}/bucket`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}updateBucket(e,t){return le(this,void 0,void 0,function*(){try{const r=yield function(e,t,r,n){return Q(this,void 0,void 0,function*(){return ee(e,"PUT",t,n,undefined,r)})}(this.fetch,`${this.url}/bucket/${e}`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers});return{data:r,error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}emptyBucket(e){return le(this,void 0,void 0,function*(){try{return{data:yield re(this.fetch,`${this.url}/bucket/${e}/empty`,{},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}deleteBucket(e){return le(this,void 0,void 0,function*(){try{return{data:yield ne(this.fetch,`${this.url}/bucket/${e}`,{},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}}class he extends ue{constructor(e,t={},r){super(e,t,r)}from(e){return new ae(this.url,this.headers,e,this.fetch)}}let de="";de="undefined"!=typeof Deno?"deno":"undefined"!=typeof document?"web":"undefined"!=typeof navigator&&"ReactNative"===navigator.product?"react-native":"node";const fe={headers:{"X-Client-Info":`supabase-js-${de}/2.50.3`}},pe={schema:"public"},ge={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},ve={};var ye=n(907);const me=e=>{let t;return t=e||("undefined"==typeof fetch?ye.default:fetch),(...e)=>t(...e)},be=(e,t,r)=>{const n=me(r),s="undefined"==typeof Headers?ye.Headers:Headers;return(r,i)=>{return o=void 0,a=void 0,l=function*(){var o;const a=null!==(o=yield t())&&void 0!==o?o:e;let c=new s(null==i?void 0:i.headers);return c.has("apikey")||c.set("apikey",e),c.has("Authorization")||c.set("Authorization",`Bearer ${a}`),n(r,Object.assign(Object.assign({},i),{headers:c}))},new((c=void 0)||(c=Promise))(function(e,t){function r(e){try{s(l.next(e))}catch(e){t(e)}}function n(e){try{s(l.throw(e))}catch(e){t(e)}}function s(t){var s;t.done?e(t.value):(s=t.value,s instanceof c?s:new c(function(e){e(s)})).then(r,n)}s((l=l.apply(o,a||[])).next())});var o,a,c,l}};const we="2.70.0",_e=3e4,ke={"X-Client-Info":`gotrue-js/${we}`},Se="X-Supabase-Api-Version",Te=Date.parse("2024-01-01T00:00:00.0Z"),je="2024-01-01",Oe=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;class Ee extends Error{constructor(e,t,r){super(e),this.__isAuthError=!0,this.name="AuthError",this.status=t,this.code=r}}function Pe(e){return"object"==typeof e&&null!==e&&"__isAuthError"in e}class Ie extends Ee{constructor(e,t,r){super(e,t,r),this.name="AuthApiError",this.status=t,this.code=r}}class Ae extends Ee{constructor(e,t){super(e),this.name="AuthUnknownError",this.originalError=t}}class xe extends Ee{constructor(e,t,r,n){super(e,r,n),this.name=t,this.status=r}}class Ce extends xe{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}class $e extends xe{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class Re extends xe{constructor(e){super(e,"AuthInvalidCredentialsError",400,void 0)}}class Ue extends xe{constructor(e,t=null){super(e,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Le extends xe{constructor(e,t=null){super(e,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class De extends xe{constructor(e,t){super(e,"AuthRetryableFetchError",t,void 0)}}function Ne(e){return Pe(e)&&"AuthRetryableFetchError"===e.name}class qe extends xe{constructor(e,t,r){super(e,"AuthWeakPasswordError",t,"weak_password"),this.reasons=r}}class Be extends xe{constructor(e){super(e,"AuthInvalidJwtError",400,"invalid_jwt")}}const Fe="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),Me=" \t\n\r=".split(""),Je=(()=>{const e=new Array(128);for(let t=0;t<e.length;t+=1)e[t]=-1;for(let t=0;t<Me.length;t+=1)e[Me[t].charCodeAt(0)]=-2;for(let t=0;t<Fe.length;t+=1)e[Fe[t].charCodeAt(0)]=t;return e})();function ze(e,t,r){if(null!==e)for(t.queue=t.queue<<8|e,t.queuedBits+=8;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;r(Fe[e]),t.queuedBits-=6}else if(t.queuedBits>0)for(t.queue=t.queue<<6-t.queuedBits,t.queuedBits=6;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;r(Fe[e]),t.queuedBits-=6}}function Ge(e,t,r){const n=Je[e];if(!(n>-1)){if(-2===n)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(e)}"`)}for(t.queue=t.queue<<6|n,t.queuedBits+=6;t.queuedBits>=8;)r(t.queue>>t.queuedBits-8&255),t.queuedBits-=8}function He(e){const t=[],r=e=>{t.push(String.fromCodePoint(e))},n={utf8seq:0,codepoint:0},s={queue:0,queuedBits:0},i=e=>{!function(e,t,r){if(0===t.utf8seq){if(e<=127)return void r(e);for(let r=1;r<6;r+=1)if(!(e>>7-r&1)){t.utf8seq=r;break}if(2===t.utf8seq)t.codepoint=31&e;else if(3===t.utf8seq)t.codepoint=15&e;else{if(4!==t.utf8seq)throw new Error("Invalid UTF-8 sequence");t.codepoint=7&e}t.utf8seq-=1}else if(t.utf8seq>0){if(e<=127)throw new Error("Invalid UTF-8 sequence");t.codepoint=t.codepoint<<6|63&e,t.utf8seq-=1,0===t.utf8seq&&r(t.codepoint)}}(e,n,r)};for(let t=0;t<e.length;t+=1)Ge(e.charCodeAt(t),s,i);return t.join("")}function We(e,t){if(!(e<=127)){if(e<=2047)return t(192|e>>6),void t(128|63&e);if(e<=65535)return t(224|e>>12),t(128|e>>6&63),void t(128|63&e);if(e<=1114111)return t(240|e>>18),t(128|e>>12&63),t(128|e>>6&63),void t(128|63&e);throw new Error(`Unrecognized Unicode codepoint: ${e.toString(16)}`)}t(e)}function Ke(e){const t=[],r={queue:0,queuedBits:0},n=e=>{t.push(e)};for(let t=0;t<e.length;t+=1)Ge(e.charCodeAt(t),r,n);return new Uint8Array(t)}function Ve(e){const t=[],r={queue:0,queuedBits:0},n=e=>{t.push(e)};return e.forEach(e=>ze(e,r,n)),ze(null,r,n),t.join("")}const Ye=()=>"undefined"!=typeof window&&"undefined"!=typeof document,Qe={tested:!1,writable:!1},Xe=()=>{if(!Ye())return!1;try{if("object"!=typeof globalThis.localStorage)return!1}catch(e){return!1}if(Qe.tested)return Qe.writable;const e=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(e,e),globalThis.localStorage.removeItem(e),Qe.tested=!0,Qe.writable=!0}catch(e){Qe.tested=!0,Qe.writable=!1}return Qe.writable},Ze=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(n.bind(n,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},et=async(e,t,r)=>{await e.setItem(t,JSON.stringify(r))},tt=async(e,t)=>{const r=await e.getItem(t);if(!r)return null;try{return JSON.parse(r)}catch(e){return r}},rt=async(e,t)=>{await e.removeItem(t)};class nt{constructor(){this.promise=new nt.promiseConstructor((e,t)=>{this.resolve=e,this.reject=t})}}function st(e){const t=e.split(".");if(3!==t.length)throw new Be("Invalid JWT structure");for(let e=0;e<t.length;e++)if(!Oe.test(t[e]))throw new Be("JWT not in base64url format");return{header:JSON.parse(He(t[0])),payload:JSON.parse(He(t[1])),signature:Ke(t[2]),raw:{header:t[0],payload:t[1]}}}function it(e){return("0"+e.toString(16)).substr(-2)}async function ot(e,t,r=!1){const n=function(){const e=new Uint32Array(56);if("undefined"==typeof crypto){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",t=e.length;let r="";for(let n=0;n<56;n++)r+=e.charAt(Math.floor(Math.random()*t));return r}return crypto.getRandomValues(e),Array.from(e,it).join("")}();let s=n;r&&(s+="/PASSWORD_RECOVERY"),await et(e,`${t}-code-verifier`,s);const i=await async function(e){if("undefined"==typeof crypto||void 0===crypto.subtle||"undefined"==typeof TextEncoder)return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),e;const t=await async function(e){const t=(new TextEncoder).encode(e),r=await crypto.subtle.digest("SHA-256",t),n=new Uint8Array(r);return Array.from(n).map(e=>String.fromCharCode(e)).join("")}(e);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}(n);return[i,n===i?"plain":"s256"]}nt.promiseConstructor=Promise;const at=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i,ct=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function lt(e){if(!ct.test(e))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}const ut=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),ht=[502,503,504];async function dt(e){var t,r;if(!("object"==typeof(r=e)&&null!==r&&"status"in r&&"ok"in r&&"json"in r&&"function"==typeof r.json))throw new De(ut(e),0);if(ht.includes(e.status))throw new De(ut(e),e.status);let n,s;try{n=await e.json()}catch(e){throw new Ae(ut(e),e)}const i=function(e){const t=e.headers.get(Se);if(!t)return null;if(!t.match(at))return null;try{return new Date(`${t}T00:00:00.0Z`)}catch(e){return null}}(e);if(i&&i.getTime()>=Te&&"object"==typeof n&&n&&"string"==typeof n.code?s=n.code:"object"==typeof n&&n&&"string"==typeof n.error_code&&(s=n.error_code),s){if("weak_password"===s)throw new qe(ut(n),e.status,(null===(t=n.weak_password)||void 0===t?void 0:t.reasons)||[]);if("session_not_found"===s)throw new Ce}else if("object"==typeof n&&n&&"object"==typeof n.weak_password&&n.weak_password&&Array.isArray(n.weak_password.reasons)&&n.weak_password.reasons.length&&n.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0))throw new qe(ut(n),e.status,n.weak_password.reasons);throw new Ie(ut(n),e.status||500,s)}async function ft(e,t,r,n){var s;const i=Object.assign({},null==n?void 0:n.headers);i[Se]||(i[Se]=je),(null==n?void 0:n.jwt)&&(i.Authorization=`Bearer ${n.jwt}`);const o=null!==(s=null==n?void 0:n.query)&&void 0!==s?s:{};(null==n?void 0:n.redirectTo)&&(o.redirect_to=n.redirectTo);const a=Object.keys(o).length?"?"+new URLSearchParams(o).toString():"",c=await async function(e,t,r,n,s,i){const o=((e,t,r,n)=>{const s={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?s:(s.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},null==t?void 0:t.headers),s.body=JSON.stringify(n),Object.assign(Object.assign({},s),r))})(t,n,{},i);let a;try{a=await e(r,Object.assign({},o))}catch(e){throw console.error(e),new De(ut(e),0)}if(a.ok||await dt(a),null==n?void 0:n.noResolveJson)return a;try{return await a.json()}catch(e){await dt(e)}}(e,t,r+a,{headers:i,noResolveJson:null==n?void 0:n.noResolveJson},0,null==n?void 0:n.body);return(null==n?void 0:n.xform)?null==n?void 0:n.xform(c):{data:Object.assign({},c),error:null}}function pt(e){var t;let r=null;var n;return function(e){return e.access_token&&e.refresh_token&&e.expires_in}(e)&&(r=Object.assign({},e),e.expires_at||(r.expires_at=(n=e.expires_in,Math.round(Date.now()/1e3)+n))),{data:{session:r,user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function gt(e){const t=pt(e);return!t.error&&e.weak_password&&"object"==typeof e.weak_password&&Array.isArray(e.weak_password.reasons)&&e.weak_password.reasons.length&&e.weak_password.message&&"string"==typeof e.weak_password.message&&e.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0)&&(t.data.weak_password=e.weak_password),t}function vt(e){var t;return{data:{user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function yt(e){return{data:e,error:null}}function mt(e){const{action_link:t,email_otp:r,hashed_token:n,redirect_to:s,verification_type:i}=e,o=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(r[n[s]]=e[n[s]])}return r}(e,["action_link","email_otp","hashed_token","redirect_to","verification_type"]);return{data:{properties:{action_link:t,email_otp:r,hashed_token:n,redirect_to:s,verification_type:i},user:Object.assign({},o)},error:null}}function bt(e){return e}const wt=["global","local","others"];class _t{constructor({url:e="",headers:t={},fetch:r}){this.url=e,this.headers=t,this.fetch=Ze(r),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(e,t=wt[0]){if(wt.indexOf(t)<0)throw new Error(`@supabase/auth-js: Parameter scope must be one of ${wt.join(", ")}`);try{return await ft(this.fetch,"POST",`${this.url}/logout?scope=${t}`,{headers:this.headers,jwt:e,noResolveJson:!0}),{data:null,error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async inviteUserByEmail(e,t={}){try{return await ft(this.fetch,"POST",`${this.url}/invite`,{body:{email:e,data:t.data},headers:this.headers,redirectTo:t.redirectTo,xform:vt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async generateLink(e){try{const{options:t}=e,r=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(r[n[s]]=e[n[s]])}return r}(e,["options"]),n=Object.assign(Object.assign({},r),t);return"newEmail"in r&&(n.new_email=null==r?void 0:r.newEmail,delete n.newEmail),await ft(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:n,headers:this.headers,xform:mt,redirectTo:null==t?void 0:t.redirectTo})}catch(e){if(Pe(e))return{data:{properties:null,user:null},error:e};throw e}}async createUser(e){try{return await ft(this.fetch,"POST",`${this.url}/admin/users`,{body:e,headers:this.headers,xform:vt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async listUsers(e){var t,r,n,s,i,o,a;try{const c={nextPage:null,lastPage:0,total:0},l=await ft(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:null!==(r=null===(t=null==e?void 0:e.page)||void 0===t?void 0:t.toString())&&void 0!==r?r:"",per_page:null!==(s=null===(n=null==e?void 0:e.perPage)||void 0===n?void 0:n.toString())&&void 0!==s?s:""},xform:bt});if(l.error)throw l.error;const u=await l.json(),h=null!==(i=l.headers.get("x-total-count"))&&void 0!==i?i:0,d=null!==(a=null===(o=l.headers.get("link"))||void 0===o?void 0:o.split(","))&&void 0!==a?a:[];return d.length>0&&(d.forEach(e=>{const t=parseInt(e.split(";")[0].split("=")[1].substring(0,1)),r=JSON.parse(e.split(";")[1].split("=")[1]);c[`${r}Page`]=t}),c.total=parseInt(h)),{data:Object.assign(Object.assign({},u),c),error:null}}catch(e){if(Pe(e))return{data:{users:[]},error:e};throw e}}async getUserById(e){lt(e);try{return await ft(this.fetch,"GET",`${this.url}/admin/users/${e}`,{headers:this.headers,xform:vt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async updateUserById(e,t){lt(e);try{return await ft(this.fetch,"PUT",`${this.url}/admin/users/${e}`,{body:t,headers:this.headers,xform:vt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async deleteUser(e,t=!1){lt(e);try{return await ft(this.fetch,"DELETE",`${this.url}/admin/users/${e}`,{headers:this.headers,body:{should_soft_delete:t},xform:vt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async _listFactors(e){lt(e.userId);try{const{data:t,error:r}=await ft(this.fetch,"GET",`${this.url}/admin/users/${e.userId}/factors`,{headers:this.headers,xform:e=>({data:{factors:e},error:null})});return{data:t,error:r}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _deleteFactor(e){lt(e.userId),lt(e.id);try{return{data:await ft(this.fetch,"DELETE",`${this.url}/admin/users/${e.userId}/factors/${e.id}`,{headers:this.headers}),error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}}const kt={getItem:e=>Xe()?globalThis.localStorage.getItem(e):null,setItem:(e,t)=>{Xe()&&globalThis.localStorage.setItem(e,t)},removeItem:e=>{Xe()&&globalThis.localStorage.removeItem(e)}};function St(e={}){return{getItem:t=>e[t]||null,setItem:(t,r)=>{e[t]=r},removeItem:t=>{delete e[t]}}}const Tt=!!(globalThis&&Xe()&&globalThis.localStorage&&"true"===globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug"));class jt extends Error{constructor(e){super(e),this.isAcquireTimeout=!0}}class Ot extends jt{}async function Et(e,t,r){Tt&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",e,t);const n=new globalThis.AbortController;return t>0&&setTimeout(()=>{n.abort(),Tt&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",e)},t),await Promise.resolve().then(()=>globalThis.navigator.locks.request(e,0===t?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:n.signal},async n=>{if(!n){if(0===t)throw Tt&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",e),new Ot(`Acquiring an exclusive Navigator LockManager lock "${e}" immediately failed`);if(Tt)try{const e=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(e,null,"  "))}catch(e){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",e)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await r()}Tt&&console.log("@supabase/gotrue-js: navigatorLock: acquired",e,n.name);try{return await r()}finally{Tt&&console.log("@supabase/gotrue-js: navigatorLock: released",e,n.name)}}))}!function(){if("object"!=typeof globalThis)try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch(e){"undefined"!=typeof self&&(self.globalThis=self)}}();const Pt={url:"http://localhost:9999",storageKey:"supabase.auth.token",autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:ke,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function It(e,t,r){return await r()}class At{constructor(e){var t,r;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=At.nextInstanceID,At.nextInstanceID+=1,this.instanceID>0&&Ye()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const n=Object.assign(Object.assign({},Pt),e);if(this.logDebugMessages=!!n.debug,"function"==typeof n.debug&&(this.logger=n.debug),this.persistSession=n.persistSession,this.storageKey=n.storageKey,this.autoRefreshToken=n.autoRefreshToken,this.admin=new _t({url:n.url,headers:n.headers,fetch:n.fetch}),this.url=n.url,this.headers=n.headers,this.fetch=Ze(n.fetch),this.lock=n.lock||It,this.detectSessionInUrl=n.detectSessionInUrl,this.flowType=n.flowType,this.hasCustomAuthorizationHeader=n.hasCustomAuthorizationHeader,n.lock?this.lock=n.lock:Ye()&&(null===(t=null===globalThis||void 0===globalThis?void 0:globalThis.navigator)||void 0===t?void 0:t.locks)?this.lock=Et:this.lock=It,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?n.storage?this.storage=n.storage:Xe()?this.storage=kt:(this.memoryStorage={},this.storage=St(this.memoryStorage)):(this.memoryStorage={},this.storage=St(this.memoryStorage)),Ye()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(e){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",e)}null===(r=this.broadcastChannel)||void 0===r||r.addEventListener("message",async e=>{this._debug("received broadcast notification from other tab or client",e),await this._notifyAllSubscribers(e.data.event,e.data.session,!1)})}this.initialize()}_debug(...e){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${we}) ${(new Date).toISOString()}`,...e),this}async initialize(){return this.initializePromise||(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))()),await this.initializePromise}async _initialize(){var e;try{const t=function(e){const t={},r=new URL(e);if(r.hash&&"#"===r.hash[0])try{new URLSearchParams(r.hash.substring(1)).forEach((e,r)=>{t[r]=e})}catch(e){}return r.searchParams.forEach((e,r)=>{t[r]=e}),t}(window.location.href);let r="none";if(this._isImplicitGrantCallback(t)?r="implicit":await this._isPKCECallback(t)&&(r="pkce"),Ye()&&this.detectSessionInUrl&&"none"!==r){const{data:n,error:s}=await this._getSessionFromURL(t,r);if(s){if(this._debug("#_initialize()","error detecting session from URL",s),function(e){return Pe(e)&&"AuthImplicitGrantRedirectError"===e.name}(s)){const t=null===(e=s.details)||void 0===e?void 0:e.code;if("identity_already_exists"===t||"identity_not_found"===t||"single_identity_not_deletable"===t)return{error:s}}return await this._removeSession(),{error:s}}const{session:i,redirectType:o}=n;return this._debug("#_initialize()","detected session in URL",i,"redirect type",o),await this._saveSession(i),setTimeout(async()=>{"recovery"===o?await this._notifyAllSubscribers("PASSWORD_RECOVERY",i):await this._notifyAllSubscribers("SIGNED_IN",i)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(e){return Pe(e)?{error:e}:{error:new Ae("Unexpected error during initialization",e)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(e){var t,r,n;try{const s=await ft(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:null!==(r=null===(t=null==e?void 0:e.options)||void 0===t?void 0:t.data)&&void 0!==r?r:{},gotrue_meta_security:{captcha_token:null===(n=null==e?void 0:e.options)||void 0===n?void 0:n.captchaToken}},xform:pt}),{data:i,error:o}=s;if(o||!i)return{data:{user:null,session:null},error:o};const a=i.session,c=i.user;return i.session&&(await this._saveSession(i.session),await this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:c,session:a},error:null}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signUp(e){var t,r,n;try{let s;if("email"in e){const{email:r,password:n,options:i}=e;let o=null,a=null;"pkce"===this.flowType&&([o,a]=await ot(this.storage,this.storageKey)),s=await ft(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:null==i?void 0:i.emailRedirectTo,body:{email:r,password:n,data:null!==(t=null==i?void 0:i.data)&&void 0!==t?t:{},gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken},code_challenge:o,code_challenge_method:a},xform:pt})}else{if(!("phone"in e))throw new Re("You must provide either an email or phone number and a password");{const{phone:t,password:i,options:o}=e;s=await ft(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:t,password:i,data:null!==(r=null==o?void 0:o.data)&&void 0!==r?r:{},channel:null!==(n=null==o?void 0:o.channel)&&void 0!==n?n:"sms",gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:pt})}}const{data:i,error:o}=s;if(o||!i)return{data:{user:null,session:null},error:o};const a=i.session,c=i.user;return i.session&&(await this._saveSession(i.session),await this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:c,session:a},error:null}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithPassword(e){try{let t;if("email"in e){const{email:r,password:n,options:s}=e;t=await ft(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:r,password:n,gotrue_meta_security:{captcha_token:null==s?void 0:s.captchaToken}},xform:gt})}else{if(!("phone"in e))throw new Re("You must provide either an email or phone number and a password");{const{phone:r,password:n,options:s}=e;t=await ft(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:r,password:n,gotrue_meta_security:{captcha_token:null==s?void 0:s.captchaToken}},xform:gt})}}const{data:r,error:n}=t;return n?{data:{user:null,session:null},error:n}:r&&r.session&&r.user?(r.session&&(await this._saveSession(r.session),await this._notifyAllSubscribers("SIGNED_IN",r.session)),{data:Object.assign({user:r.user,session:r.session},r.weak_password?{weakPassword:r.weak_password}:null),error:n}):{data:{user:null,session:null},error:new $e}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOAuth(e){var t,r,n,s;return await this._handleProviderSignIn(e.provider,{redirectTo:null===(t=e.options)||void 0===t?void 0:t.redirectTo,scopes:null===(r=e.options)||void 0===r?void 0:r.scopes,queryParams:null===(n=e.options)||void 0===n?void 0:n.queryParams,skipBrowserRedirect:null===(s=e.options)||void 0===s?void 0:s.skipBrowserRedirect})}async exchangeCodeForSession(e){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(e))}async signInWithWeb3(e){const{chain:t}=e;if("solana"===t)return await this.signInWithSolana(e);throw new Error(`@supabase/auth-js: Unsupported chain "${t}"`)}async signInWithSolana(e){var t,r,n,s,i,o,a,c,l,u,h,d;let f,p;if("message"in e)f=e.message,p=e.signature;else{const{chain:h,wallet:d,statement:g,options:v}=e;let y;if(Ye())if("object"==typeof d)y=d;else{const e=window;if(!("solana"in e)||"object"!=typeof e.solana||!("signIn"in e.solana&&"function"==typeof e.solana.signIn||"signMessage"in e.solana&&"function"==typeof e.solana.signMessage))throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");y=e.solana}else{if("object"!=typeof d||!(null==v?void 0:v.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");y=d}const m=new URL(null!==(t=null==v?void 0:v.url)&&void 0!==t?t:window.location.href);if("signIn"in y&&y.signIn){const e=await y.signIn(Object.assign(Object.assign(Object.assign({issuedAt:(new Date).toISOString()},null==v?void 0:v.signInWithSolana),{version:"1",domain:m.host,uri:m.href}),g?{statement:g}:null));let t;if(Array.isArray(e)&&e[0]&&"object"==typeof e[0])t=e[0];else{if(!(e&&"object"==typeof e&&"signedMessage"in e&&"signature"in e))throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");t=e}if(!("signedMessage"in t&&"signature"in t&&("string"==typeof t.signedMessage||t.signedMessage instanceof Uint8Array)&&t.signature instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");f="string"==typeof t.signedMessage?t.signedMessage:(new TextDecoder).decode(t.signedMessage),p=t.signature}else{if(!("signMessage"in y&&"function"==typeof y.signMessage&&"publicKey"in y&&"object"==typeof y&&y.publicKey&&"toBase58"in y.publicKey&&"function"==typeof y.publicKey.toBase58))throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");f=[`${m.host} wants you to sign in with your Solana account:`,y.publicKey.toBase58(),...g?["",g,""]:[""],"Version: 1",`URI: ${m.href}`,`Issued At: ${null!==(n=null===(r=null==v?void 0:v.signInWithSolana)||void 0===r?void 0:r.issuedAt)&&void 0!==n?n:(new Date).toISOString()}`,...(null===(s=null==v?void 0:v.signInWithSolana)||void 0===s?void 0:s.notBefore)?[`Not Before: ${v.signInWithSolana.notBefore}`]:[],...(null===(i=null==v?void 0:v.signInWithSolana)||void 0===i?void 0:i.expirationTime)?[`Expiration Time: ${v.signInWithSolana.expirationTime}`]:[],...(null===(o=null==v?void 0:v.signInWithSolana)||void 0===o?void 0:o.chainId)?[`Chain ID: ${v.signInWithSolana.chainId}`]:[],...(null===(a=null==v?void 0:v.signInWithSolana)||void 0===a?void 0:a.nonce)?[`Nonce: ${v.signInWithSolana.nonce}`]:[],...(null===(c=null==v?void 0:v.signInWithSolana)||void 0===c?void 0:c.requestId)?[`Request ID: ${v.signInWithSolana.requestId}`]:[],...(null===(u=null===(l=null==v?void 0:v.signInWithSolana)||void 0===l?void 0:l.resources)||void 0===u?void 0:u.length)?["Resources",...v.signInWithSolana.resources.map(e=>`- ${e}`)]:[]].join("\n");const e=await y.signMessage((new TextEncoder).encode(f),"utf8");if(!(e&&e instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");p=e}}try{const{data:t,error:r}=await ft(this.fetch,"POST",`${this.url}/token?grant_type=web3`,{headers:this.headers,body:Object.assign({chain:"solana",message:f,signature:Ve(p)},(null===(h=e.options)||void 0===h?void 0:h.captchaToken)?{gotrue_meta_security:{captcha_token:null===(d=e.options)||void 0===d?void 0:d.captchaToken}}:null),xform:pt});if(r)throw r;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign({},t),error:r}):{data:{user:null,session:null},error:new $e}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async _exchangeCodeForSession(e){const t=await tt(this.storage,`${this.storageKey}-code-verifier`),[r,n]=(null!=t?t:"").split("/");try{const{data:t,error:s}=await ft(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:e,code_verifier:r},xform:pt});if(await rt(this.storage,`${this.storageKey}-code-verifier`),s)throw s;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign(Object.assign({},t),{redirectType:null!=n?n:null}),error:s}):{data:{user:null,session:null,redirectType:null},error:new $e}}catch(e){if(Pe(e))return{data:{user:null,session:null,redirectType:null},error:e};throw e}}async signInWithIdToken(e){try{const{options:t,provider:r,token:n,access_token:s,nonce:i}=e,o=await ft(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:r,id_token:n,access_token:s,nonce:i,gotrue_meta_security:{captcha_token:null==t?void 0:t.captchaToken}},xform:pt}),{data:a,error:c}=o;return c?{data:{user:null,session:null},error:c}:a&&a.session&&a.user?(a.session&&(await this._saveSession(a.session),await this._notifyAllSubscribers("SIGNED_IN",a.session)),{data:a,error:c}):{data:{user:null,session:null},error:new $e}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOtp(e){var t,r,n,s,i;try{if("email"in e){const{email:n,options:s}=e;let i=null,o=null;"pkce"===this.flowType&&([i,o]=await ot(this.storage,this.storageKey));const{error:a}=await ft(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:n,data:null!==(t=null==s?void 0:s.data)&&void 0!==t?t:{},create_user:null===(r=null==s?void 0:s.shouldCreateUser)||void 0===r||r,gotrue_meta_security:{captcha_token:null==s?void 0:s.captchaToken},code_challenge:i,code_challenge_method:o},redirectTo:null==s?void 0:s.emailRedirectTo});return{data:{user:null,session:null},error:a}}if("phone"in e){const{phone:t,options:r}=e,{data:o,error:a}=await ft(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:t,data:null!==(n=null==r?void 0:r.data)&&void 0!==n?n:{},create_user:null===(s=null==r?void 0:r.shouldCreateUser)||void 0===s||s,gotrue_meta_security:{captcha_token:null==r?void 0:r.captchaToken},channel:null!==(i=null==r?void 0:r.channel)&&void 0!==i?i:"sms"}});return{data:{user:null,session:null,messageId:null==o?void 0:o.message_id},error:a}}throw new Re("You must provide either an email or phone number.")}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async verifyOtp(e){var t,r;try{let n,s;"options"in e&&(n=null===(t=e.options)||void 0===t?void 0:t.redirectTo,s=null===(r=e.options)||void 0===r?void 0:r.captchaToken);const{data:i,error:o}=await ft(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},e),{gotrue_meta_security:{captcha_token:s}}),redirectTo:n,xform:pt});if(o)throw o;if(!i)throw new Error("An error occurred on token verification.");const a=i.session,c=i.user;return(null==a?void 0:a.access_token)&&(await this._saveSession(a),await this._notifyAllSubscribers("recovery"==e.type?"PASSWORD_RECOVERY":"SIGNED_IN",a)),{data:{user:c,session:a},error:null}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithSSO(e){var t,r,n;try{let s=null,i=null;return"pkce"===this.flowType&&([s,i]=await ot(this.storage,this.storageKey)),await ft(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in e?{provider_id:e.providerId}:null),"domain"in e?{domain:e.domain}:null),{redirect_to:null!==(r=null===(t=e.options)||void 0===t?void 0:t.redirectTo)&&void 0!==r?r:void 0}),(null===(n=null==e?void 0:e.options)||void 0===n?void 0:n.captchaToken)?{gotrue_meta_security:{captcha_token:e.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:s,code_challenge_method:i}),headers:this.headers,xform:yt})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async e=>{const{data:{session:t},error:r}=e;if(r)throw r;if(!t)throw new Ce;const{error:n}=await ft(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:t.access_token});return{data:{user:null,session:null},error:n}})}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async resend(e){try{const t=`${this.url}/resend`;if("email"in e){const{email:r,type:n,options:s}=e,{error:i}=await ft(this.fetch,"POST",t,{headers:this.headers,body:{email:r,type:n,gotrue_meta_security:{captcha_token:null==s?void 0:s.captchaToken}},redirectTo:null==s?void 0:s.emailRedirectTo});return{data:{user:null,session:null},error:i}}if("phone"in e){const{phone:r,type:n,options:s}=e,{data:i,error:o}=await ft(this.fetch,"POST",t,{headers:this.headers,body:{phone:r,type:n,gotrue_meta_security:{captcha_token:null==s?void 0:s.captchaToken}}});return{data:{user:null,session:null,messageId:null==i?void 0:i.message_id},error:o}}throw new Re("You must provide either an email or phone number and a type")}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async e=>e))}async _acquireLock(e,t){this._debug("#_acquireLock","begin",e);try{if(this.lockAcquired){const e=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),r=(async()=>(await e,await t()))();return this.pendingInLock.push((async()=>{try{await r}catch(e){}})()),r}return await this.lock(`lock:${this.storageKey}`,e,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const e=t();for(this.pendingInLock.push((async()=>{try{await e}catch(e){}})()),await e;this.pendingInLock.length;){const e=[...this.pendingInLock];await Promise.all(e),this.pendingInLock.splice(0,e.length)}return await e}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(e){this._debug("#_useSession","begin");try{const t=await this.__loadSession();return await e(t)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",(new Error).stack);try{let e=null;const t=await tt(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",t),null!==t&&(this._isValidSession(t)?e=t:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!e)return{data:{session:null},error:null};const r=!!e.expires_at&&1e3*e.expires_at-Date.now()<9e4;if(this._debug("#__loadSession()",`session has${r?"":" not"} expired`,"expires_at",e.expires_at),!r){if(this.storage.isServer){let t=this.suppressGetSessionWarning;e=new Proxy(e,{get:(e,r,n)=>(t||"user"!==r||(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),t=!0,this.suppressGetSessionWarning=!0),Reflect.get(e,r,n))})}return{data:{session:e},error:null}}const{session:n,error:s}=await this._callRefreshToken(e.refresh_token);return s?{data:{session:null},error:s}:{data:{session:n},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(e){return e?await this._getUser(e):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(e){try{return e?await ft(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:e,xform:vt}):await this._useSession(async e=>{var t,r,n;const{data:s,error:i}=e;if(i)throw i;return(null===(t=s.session)||void 0===t?void 0:t.access_token)||this.hasCustomAuthorizationHeader?await ft(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:null!==(n=null===(r=s.session)||void 0===r?void 0:r.access_token)&&void 0!==n?n:void 0,xform:vt}):{data:{user:null},error:new Ce}})}catch(e){if(Pe(e))return function(e){return Pe(e)&&"AuthSessionMissingError"===e.name}(e)&&(await this._removeSession(),await rt(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:e};throw e}}async updateUser(e,t={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(e,t))}async _updateUser(e,t={}){try{return await this._useSession(async r=>{const{data:n,error:s}=r;if(s)throw s;if(!n.session)throw new Ce;const i=n.session;let o=null,a=null;"pkce"===this.flowType&&null!=e.email&&([o,a]=await ot(this.storage,this.storageKey));const{data:c,error:l}=await ft(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:null==t?void 0:t.emailRedirectTo,body:Object.assign(Object.assign({},e),{code_challenge:o,code_challenge_method:a}),jwt:i.access_token,xform:vt});if(l)throw l;return i.user=c.user,await this._saveSession(i),await this._notifyAllSubscribers("USER_UPDATED",i),{data:{user:i.user},error:null}})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async setSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(e))}async _setSession(e){try{if(!e.access_token||!e.refresh_token)throw new Ce;const t=Date.now()/1e3;let r=t,n=!0,s=null;const{payload:i}=st(e.access_token);if(i.exp&&(r=i.exp,n=r<=t),n){const{session:t,error:r}=await this._callRefreshToken(e.refresh_token);if(r)return{data:{user:null,session:null},error:r};if(!t)return{data:{user:null,session:null},error:null};s=t}else{const{data:n,error:i}=await this._getUser(e.access_token);if(i)throw i;s={access_token:e.access_token,refresh_token:e.refresh_token,user:n.user,token_type:"bearer",expires_in:r-t,expires_at:r},await this._saveSession(s),await this._notifyAllSubscribers("SIGNED_IN",s)}return{data:{user:s.user,session:s},error:null}}catch(e){if(Pe(e))return{data:{session:null,user:null},error:e};throw e}}async refreshSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(e))}async _refreshSession(e){try{return await this._useSession(async t=>{var r;if(!e){const{data:n,error:s}=t;if(s)throw s;e=null!==(r=n.session)&&void 0!==r?r:void 0}if(!(null==e?void 0:e.refresh_token))throw new Ce;const{session:n,error:s}=await this._callRefreshToken(e.refresh_token);return s?{data:{user:null,session:null},error:s}:n?{data:{user:n.user,session:n},error:null}:{data:{user:null,session:null},error:null}})}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async _getSessionFromURL(e,t){try{if(!Ye())throw new Ue("No browser detected.");if(e.error||e.error_description||e.error_code)throw new Ue(e.error_description||"Error in URL with unspecified error_description",{error:e.error||"unspecified_error",code:e.error_code||"unspecified_code"});switch(t){case"implicit":if("pkce"===this.flowType)throw new Le("Not a valid PKCE flow url.");break;case"pkce":if("implicit"===this.flowType)throw new Ue("Not a valid implicit grant flow url.")}if("pkce"===t){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!e.code)throw new Le("No code detected.");const{data:t,error:r}=await this._exchangeCodeForSession(e.code);if(r)throw r;const n=new URL(window.location.href);return n.searchParams.delete("code"),window.history.replaceState(window.history.state,"",n.toString()),{data:{session:t.session,redirectType:null},error:null}}const{provider_token:r,provider_refresh_token:n,access_token:s,refresh_token:i,expires_in:o,expires_at:a,token_type:c}=e;if(!(s&&o&&i&&c))throw new Ue("No session defined in URL");const l=Math.round(Date.now()/1e3),u=parseInt(o);let h=l+u;a&&(h=parseInt(a));const d=h-l;1e3*d<=_e&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${d}s, should have been closer to ${u}s`);const f=h-u;l-f>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",f,h,l):l-f<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",f,h,l);const{data:p,error:g}=await this._getUser(s);if(g)throw g;const v={provider_token:r,provider_refresh_token:n,access_token:s,expires_in:u,expires_at:h,refresh_token:i,token_type:c,user:p.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:v,redirectType:e.type},error:null}}catch(e){if(Pe(e))return{data:{session:null,redirectType:null},error:e};throw e}}_isImplicitGrantCallback(e){return Boolean(e.access_token||e.error_description)}async _isPKCECallback(e){const t=await tt(this.storage,`${this.storageKey}-code-verifier`);return!(!e.code||!t)}async signOut(e={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(e))}async _signOut({scope:e}={scope:"global"}){return await this._useSession(async t=>{var r;const{data:n,error:s}=t;if(s)return{error:s};const i=null===(r=n.session)||void 0===r?void 0:r.access_token;if(i){const{error:t}=await this.admin.signOut(i,e);if(t&&(!function(e){return Pe(e)&&"AuthApiError"===e.name}(t)||404!==t.status&&401!==t.status&&403!==t.status))return{error:t}}return"others"!==e&&(await this._removeSession(),await rt(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(e){const t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}),r={id:t,callback:e,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",t),this.stateChangeEmitters.delete(t)}};return this._debug("#onAuthStateChange()","registered callback with id",t),this.stateChangeEmitters.set(t,r),(async()=>{await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(t)})})(),{data:{subscription:r}}}async _emitInitialSession(e){return await this._useSession(async t=>{var r,n;try{const{data:{session:n},error:s}=t;if(s)throw s;await(null===(r=this.stateChangeEmitters.get(e))||void 0===r?void 0:r.callback("INITIAL_SESSION",n)),this._debug("INITIAL_SESSION","callback id",e,"session",n)}catch(t){await(null===(n=this.stateChangeEmitters.get(e))||void 0===n?void 0:n.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",e,"error",t),console.error(t)}})}async resetPasswordForEmail(e,t={}){let r=null,n=null;"pkce"===this.flowType&&([r,n]=await ot(this.storage,this.storageKey,!0));try{return await ft(this.fetch,"POST",`${this.url}/recover`,{body:{email:e,code_challenge:r,code_challenge_method:n,gotrue_meta_security:{captcha_token:t.captchaToken}},headers:this.headers,redirectTo:t.redirectTo})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async getUserIdentities(){var e;try{const{data:t,error:r}=await this.getUser();if(r)throw r;return{data:{identities:null!==(e=t.user.identities)&&void 0!==e?e:[]},error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async linkIdentity(e){var t;try{const{data:r,error:n}=await this._useSession(async t=>{var r,n,s,i,o;const{data:a,error:c}=t;if(c)throw c;const l=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,e.provider,{redirectTo:null===(r=e.options)||void 0===r?void 0:r.redirectTo,scopes:null===(n=e.options)||void 0===n?void 0:n.scopes,queryParams:null===(s=e.options)||void 0===s?void 0:s.queryParams,skipBrowserRedirect:!0});return await ft(this.fetch,"GET",l,{headers:this.headers,jwt:null!==(o=null===(i=a.session)||void 0===i?void 0:i.access_token)&&void 0!==o?o:void 0})});if(n)throw n;return Ye()&&!(null===(t=e.options)||void 0===t?void 0:t.skipBrowserRedirect)&&window.location.assign(null==r?void 0:r.url),{data:{provider:e.provider,url:null==r?void 0:r.url},error:null}}catch(t){if(Pe(t))return{data:{provider:e.provider,url:null},error:t};throw t}}async unlinkIdentity(e){try{return await this._useSession(async t=>{var r,n;const{data:s,error:i}=t;if(i)throw i;return await ft(this.fetch,"DELETE",`${this.url}/user/identities/${e.identity_id}`,{headers:this.headers,jwt:null!==(n=null===(r=s.session)||void 0===r?void 0:r.access_token)&&void 0!==n?n:void 0})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _refreshAccessToken(e){const t=`#_refreshAccessToken(${e.substring(0,5)}...)`;this._debug(t,"begin");try{const s=Date.now();return await(r=async r=>(r>0&&await async function(e){return await new Promise(t=>{setTimeout(()=>t(null),e)})}(200*Math.pow(2,r-1)),this._debug(t,"refreshing attempt",r),await ft(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:e},headers:this.headers,xform:pt})),n=(e,t)=>{const r=200*Math.pow(2,e);return t&&Ne(t)&&Date.now()+r-s<_e},new Promise((e,t)=>{(async()=>{for(let s=0;s<1/0;s++)try{const t=await r(s);if(!n(s,null))return void e(t)}catch(e){if(!n(s,e))return void t(e)}})()}))}catch(e){if(this._debug(t,"error",e),Pe(e))return{data:{session:null,user:null},error:e};throw e}finally{this._debug(t,"end")}var r,n}_isValidSession(e){return"object"==typeof e&&null!==e&&"access_token"in e&&"refresh_token"in e&&"expires_at"in e}async _handleProviderSignIn(e,t){const r=await this._getUrlForProvider(`${this.url}/authorize`,e,{redirectTo:t.redirectTo,scopes:t.scopes,queryParams:t.queryParams});return this._debug("#_handleProviderSignIn()","provider",e,"options",t,"url",r),Ye()&&!t.skipBrowserRedirect&&window.location.assign(r),{data:{provider:e,url:r},error:null}}async _recoverAndRefresh(){var e;const t="#_recoverAndRefresh()";this._debug(t,"begin");try{const r=await tt(this.storage,this.storageKey);if(this._debug(t,"session from storage",r),!this._isValidSession(r))return this._debug(t,"session is not valid"),void(null!==r&&await this._removeSession());const n=1e3*(null!==(e=r.expires_at)&&void 0!==e?e:1/0)-Date.now()<9e4;if(this._debug(t,`session has${n?"":" not"} expired with margin of 90000s`),n){if(this.autoRefreshToken&&r.refresh_token){const{error:e}=await this._callRefreshToken(r.refresh_token);e&&(console.error(e),Ne(e)||(this._debug(t,"refresh failed with a non-retryable error, removing the session",e),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",r)}catch(e){return this._debug(t,"error",e),void console.error(e)}finally{this._debug(t,"end")}}async _callRefreshToken(e){var t,r;if(!e)throw new Ce;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const n=`#_callRefreshToken(${e.substring(0,5)}...)`;this._debug(n,"begin");try{this.refreshingDeferred=new nt;const{data:t,error:r}=await this._refreshAccessToken(e);if(r)throw r;if(!t.session)throw new Ce;await this._saveSession(t.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",t.session);const n={session:t.session,error:null};return this.refreshingDeferred.resolve(n),n}catch(e){if(this._debug(n,"error",e),Pe(e)){const r={session:null,error:e};return Ne(e)||await this._removeSession(),null===(t=this.refreshingDeferred)||void 0===t||t.resolve(r),r}throw null===(r=this.refreshingDeferred)||void 0===r||r.reject(e),e}finally{this.refreshingDeferred=null,this._debug(n,"end")}}async _notifyAllSubscribers(e,t,r=!0){const n=`#_notifyAllSubscribers(${e})`;this._debug(n,"begin",t,`broadcast = ${r}`);try{this.broadcastChannel&&r&&this.broadcastChannel.postMessage({event:e,session:t});const n=[],s=Array.from(this.stateChangeEmitters.values()).map(async r=>{try{await r.callback(e,t)}catch(e){n.push(e)}});if(await Promise.all(s),n.length>0){for(let e=0;e<n.length;e+=1)console.error(n[e]);throw n[0]}}finally{this._debug(n,"end")}}async _saveSession(e){this._debug("#_saveSession()",e),this.suppressGetSessionWarning=!0,await et(this.storage,this.storageKey,e)}async _removeSession(){this._debug("#_removeSession()"),await rt(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const e=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{e&&Ye()&&(null===window||void 0===window?void 0:window.removeEventListener)&&window.removeEventListener("visibilitychange",e)}catch(e){console.error("removing visibilitychange callback failed",e)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const e=setInterval(()=>this._autoRefreshTokenTick(),_e);this.autoRefreshTicker=e,e&&"object"==typeof e&&"function"==typeof e.unref?e.unref():"undefined"!=typeof Deno&&"function"==typeof Deno.unrefTimer&&Deno.unrefTimer(e),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const e=this.autoRefreshTicker;this.autoRefreshTicker=null,e&&clearInterval(e)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const e=Date.now();try{return await this._useSession(async t=>{const{data:{session:r}}=t;if(!r||!r.refresh_token||!r.expires_at)return void this._debug("#_autoRefreshTokenTick()","no session");const n=Math.floor((1e3*r.expires_at-e)/_e);this._debug("#_autoRefreshTokenTick()",`access token expires in ${n} ticks, a tick lasts 30000ms, refresh threshold is 3 ticks`),n<=3&&await this._callRefreshToken(r.refresh_token)})}catch(e){console.error("Auto refresh tick failed with error. This is likely a transient error.",e)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(e){if(!(e.isAcquireTimeout||e instanceof jt))throw e;this._debug("auto refresh token tick lock not available")}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!Ye()||!(null===window||void 0===window?void 0:window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),null===window||void 0===window||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(e){console.error("_handleVisibilityChange",e)}}async _onVisibilityChanged(e){const t=`#_onVisibilityChanged(${e})`;this._debug(t,"visibilityState",document.visibilityState),"visible"===document.visibilityState?(this.autoRefreshToken&&this._startAutoRefresh(),e||(await this.initializePromise,await this._acquireLock(-1,async()=>{"visible"===document.visibilityState?await this._recoverAndRefresh():this._debug(t,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting")}))):"hidden"===document.visibilityState&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(e,t,r){const n=[`provider=${encodeURIComponent(t)}`];if((null==r?void 0:r.redirectTo)&&n.push(`redirect_to=${encodeURIComponent(r.redirectTo)}`),(null==r?void 0:r.scopes)&&n.push(`scopes=${encodeURIComponent(r.scopes)}`),"pkce"===this.flowType){const[e,t]=await ot(this.storage,this.storageKey),r=new URLSearchParams({code_challenge:`${encodeURIComponent(e)}`,code_challenge_method:`${encodeURIComponent(t)}`});n.push(r.toString())}if(null==r?void 0:r.queryParams){const e=new URLSearchParams(r.queryParams);n.push(e.toString())}return(null==r?void 0:r.skipBrowserRedirect)&&n.push(`skip_http_redirect=${r.skipBrowserRedirect}`),`${e}?${n.join("&")}`}async _unenroll(e){try{return await this._useSession(async t=>{var r;const{data:n,error:s}=t;return s?{data:null,error:s}:await ft(this.fetch,"DELETE",`${this.url}/factors/${e.factorId}`,{headers:this.headers,jwt:null===(r=null==n?void 0:n.session)||void 0===r?void 0:r.access_token})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _enroll(e){try{return await this._useSession(async t=>{var r,n;const{data:s,error:i}=t;if(i)return{data:null,error:i};const o=Object.assign({friendly_name:e.friendlyName,factor_type:e.factorType},"phone"===e.factorType?{phone:e.phone}:{issuer:e.issuer}),{data:a,error:c}=await ft(this.fetch,"POST",`${this.url}/factors`,{body:o,headers:this.headers,jwt:null===(r=null==s?void 0:s.session)||void 0===r?void 0:r.access_token});return c?{data:null,error:c}:("totp"===e.factorType&&(null===(n=null==a?void 0:a.totp)||void 0===n?void 0:n.qr_code)&&(a.totp.qr_code=`data:image/svg+xml;utf-8,${a.totp.qr_code}`),{data:a,error:null})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _verify(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var r;const{data:n,error:s}=t;if(s)return{data:null,error:s};const{data:i,error:o}=await ft(this.fetch,"POST",`${this.url}/factors/${e.factorId}/verify`,{body:{code:e.code,challenge_id:e.challengeId},headers:this.headers,jwt:null===(r=null==n?void 0:n.session)||void 0===r?void 0:r.access_token});return o?{data:null,error:o}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+i.expires_in},i)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",i),{data:i,error:o})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}})}async _challenge(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var r;const{data:n,error:s}=t;return s?{data:null,error:s}:await ft(this.fetch,"POST",`${this.url}/factors/${e.factorId}/challenge`,{body:{channel:e.channel},headers:this.headers,jwt:null===(r=null==n?void 0:n.session)||void 0===r?void 0:r.access_token})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}})}async _challengeAndVerify(e){const{data:t,error:r}=await this._challenge({factorId:e.factorId});return r?{data:null,error:r}:await this._verify({factorId:e.factorId,challengeId:t.id,code:e.code})}async _listFactors(){const{data:{user:e},error:t}=await this.getUser();if(t)return{data:null,error:t};const r=(null==e?void 0:e.factors)||[],n=r.filter(e=>"totp"===e.factor_type&&"verified"===e.status),s=r.filter(e=>"phone"===e.factor_type&&"verified"===e.status);return{data:{all:r,totp:n,phone:s},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async e=>{var t,r;const{data:{session:n},error:s}=e;if(s)return{data:null,error:s};if(!n)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:i}=st(n.access_token);let o=null;i.aal&&(o=i.aal);let a=o;return(null!==(r=null===(t=n.user.factors)||void 0===t?void 0:t.filter(e=>"verified"===e.status))&&void 0!==r?r:[]).length>0&&(a="aal2"),{data:{currentLevel:o,nextLevel:a,currentAuthenticationMethods:i.amr||[]},error:null}}))}async fetchJwk(e,t={keys:[]}){let r=t.keys.find(t=>t.kid===e);if(r)return r;if(r=this.jwks.keys.find(t=>t.kid===e),r&&this.jwks_cached_at+6e5>Date.now())return r;const{data:n,error:s}=await ft(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(s)throw s;if(!n.keys||0===n.keys.length)throw new Be("JWKS is empty");if(this.jwks=n,this.jwks_cached_at=Date.now(),r=n.keys.find(t=>t.kid===e),!r)throw new Be("No matching signing key found in JWKS");return r}async getClaims(e,t={keys:[]}){try{let r=e;if(!r){const{data:e,error:t}=await this.getSession();if(t||!e.session)return{data:null,error:t};r=e.session.access_token}const{header:n,payload:s,signature:i,raw:{header:o,payload:a}}=st(r);if(function(e){if(!e)throw new Error("Missing exp claim");if(e<=Math.floor(Date.now()/1e3))throw new Error("JWT has expired")}(s.exp),!n.kid||"HS256"===n.alg||!("crypto"in globalThis)||!("subtle"in globalThis.crypto)){const{error:e}=await this.getUser(r);if(e)throw e;return{data:{claims:s,header:n,signature:i},error:null}}const c=function(e){switch(e){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}(n.alg),l=await this.fetchJwk(n.kid,t),u=await crypto.subtle.importKey("jwk",l,c,!0,["verify"]);if(!await crypto.subtle.verify(c,u,i,function(e){const t=[];return function(e,t){for(let r=0;r<e.length;r+=1){let n=e.charCodeAt(r);if(n>55295&&n<=56319){const t=1024*(n-55296)&65535;n=65536+(e.charCodeAt(r+1)-56320&65535|t),r+=1}We(n,t)}}(e,e=>t.push(e)),new Uint8Array(t)}(`${o}.${a}`)))throw new Be("Invalid JWT signature");return{data:{claims:s,header:n,signature:i},error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}}At.nextInstanceID=0;const xt=At;class Ct extends xt{constructor(e){super(e)}}class $t{constructor(e,t,r){var n,s,i;if(this.supabaseUrl=e,this.supabaseKey=t,!e)throw new Error("supabaseUrl is required.");if(!t)throw new Error("supabaseKey is required.");const o=(a=e).endsWith("/")?a:a+"/";var a;const c=new URL(o);this.realtimeUrl=new URL("realtime/v1",c),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",c),this.storageUrl=new URL("storage/v1",c),this.functionsUrl=new URL("functions/v1",c);const l=`sb-${c.hostname.split(".")[0]}-auth-token`,h=function(e,t){var r,n;const{db:s,auth:i,realtime:o,global:a}=e,{db:c,auth:l,realtime:u,global:h}=t,d={db:Object.assign(Object.assign({},c),s),auth:Object.assign(Object.assign({},l),i),realtime:Object.assign(Object.assign({},u),o),global:Object.assign(Object.assign(Object.assign({},h),a),{headers:Object.assign(Object.assign({},null!==(r=null==h?void 0:h.headers)&&void 0!==r?r:{}),null!==(n=null==a?void 0:a.headers)&&void 0!==n?n:{})}),accessToken:()=>{return e=this,t=void 0,n=function*(){return""},new((r=void 0)||(r=Promise))(function(s,i){function o(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(o,a)}c((n=n.apply(e,t||[])).next())});var e,t,r,n}};return e.accessToken?d.accessToken=e.accessToken:delete d.accessToken,d}(null!=r?r:{},{db:pe,realtime:ve,auth:Object.assign(Object.assign({},ge),{storageKey:l}),global:fe});this.storageKey=null!==(n=h.auth.storageKey)&&void 0!==n?n:"",this.headers=null!==(s=h.global.headers)&&void 0!==s?s:{},h.accessToken?(this.accessToken=h.accessToken,this.auth=new Proxy({},{get:(e,t)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(t)} is not possible`)}})):this.auth=this._initSupabaseAuthClient(null!==(i=h.auth)&&void 0!==i?i:{},this.headers,h.global.fetch),this.fetch=be(t,this._getAccessToken.bind(this),h.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},h.realtime)),this.rest=new u(new URL("rest/v1",c).href,{headers:this.headers,schema:h.db.schema,fetch:this.fetch}),h.accessToken||this._listenForAuthEvents()}get functions(){return new c(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}get storage(){return new he(this.storageUrl.href,this.headers,this.fetch)}from(e){return this.rest.from(e)}schema(e){return this.rest.schema(e)}rpc(e,t={},r={}){return this.rest.rpc(e,t,r)}channel(e,t={config:{}}){return this.realtime.channel(e,t)}getChannels(){return this.realtime.getChannels()}removeChannel(e){return this.realtime.removeChannel(e)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var e,t,r,n,s,i;return r=this,n=void 0,i=function*(){if(this.accessToken)return yield this.accessToken();const{data:r}=yield this.auth.getSession();return null!==(t=null===(e=r.session)||void 0===e?void 0:e.access_token)&&void 0!==t?t:null},new((s=void 0)||(s=Promise))(function(e,t){function o(e){try{c(i.next(e))}catch(e){t(e)}}function a(e){try{c(i.throw(e))}catch(e){t(e)}}function c(t){var r;t.done?e(t.value):(r=t.value,r instanceof s?r:new s(function(e){e(r)})).then(o,a)}c((i=i.apply(r,n||[])).next())})}_initSupabaseAuthClient({autoRefreshToken:e,persistSession:t,detectSessionInUrl:r,storage:n,storageKey:s,flowType:i,lock:o,debug:a},c,l){const u={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new Ct({url:this.authUrl.href,headers:Object.assign(Object.assign({},u),c),storageKey:s,autoRefreshToken:e,persistSession:t,detectSessionInUrl:r,storage:n,flowType:i,lock:o,debug:a,fetch:l,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(e){return new z(this.realtimeUrl.href,Object.assign(Object.assign({},e),{params:Object.assign({apikey:this.supabaseKey},null==e?void 0:e.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((e,t)=>{this._handleTokenChanged(e,"CLIENT",null==t?void 0:t.access_token)})}_handleTokenChanged(e,t,r){"TOKEN_REFRESHED"!==e&&"SIGNED_IN"!==e||this.changedAccessToken===r?"SIGNED_OUT"===e&&(this.realtime.setAuth(),"STORAGE"==t&&this.auth.signOut(),this.changedAccessToken=void 0):this.changedAccessToken=r}}function Rt(e){return Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rt(e)}function Ut(e,t,r){return(t=function(e){var t=function(e){if("object"!=Rt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=Rt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Rt(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Lt(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",s=r.toStringTag||"@@toStringTag";function i(r,n,s,i){var c=n&&n.prototype instanceof a?n:a,l=Object.create(c.prototype);return Dt(l,"_invoke",function(r,n,s){var i,a,c,l=0,u=s||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,r){return i=t,a=0,c=e,d.n=r,o}};function f(r,n){for(a=r,c=n,t=0;!h&&l&&!s&&t<u.length;t++){var s,i=u[t],f=d.p,p=i[2];r>3?(s=p===n)&&(c=i[(a=i[4])?5:(a=3,3)],i[4]=i[5]=e):i[0]<=f&&((s=r<2&&f<i[1])?(a=0,d.v=n,d.n=i[1]):f<p&&(s=r<3||i[0]>n||n>p)&&(i[4]=r,i[5]=n,d.n=p,a=0))}if(s||r>1)return o;throw h=!0,n}return function(s,u,p){if(l>1)throw TypeError("Generator is already running");for(h&&1===u&&f(u,p),a=u,c=p;(t=a<2?e:c)||!h;){i||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(l=2,i){if(a||(s="next"),t=i[s]){if(!(t=t.call(i,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=i.return)&&t.call(i),a<2&&(c=TypeError("The iterator does not provide a '"+s+"' method"),a=1);i=e}else if((t=(h=d.n<0)?c:r.call(n,d))!==o)break}catch(t){i=e,a=1,c=t}finally{l=1}}return{value:t,done:h}}}(r,s,i),!0),l}var o={};function a(){}function c(){}function l(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(Dt(t={},n,function(){return this}),t),h=l.prototype=a.prototype=Object.create(u);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,l):(e.__proto__=l,Dt(e,s,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=l,Dt(h,"constructor",l),Dt(l,"constructor",c),c.displayName="GeneratorFunction",Dt(l,s,"GeneratorFunction"),Dt(h),Dt(h,s,"Generator"),Dt(h,n,function(){return this}),Dt(h,"toString",function(){return"[object Generator]"}),(Lt=function(){return{w:i,m:d}})()}function Dt(e,t,r,n){var s=Object.defineProperty;try{s({},"",{})}catch(e){s=0}Dt=function(e,t,r,n){if(t)s?s(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r;else{var i=function(t,r){Dt(e,t,function(e){return this._invoke(t,r,e)})};i("next",0),i("throw",1),i("return",2)}},Dt(e,t,r,n)}function Nt(e,t,r,n,s,i,o){try{var a=e[i](o),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,s)}function qt(e){return function(){var t=this,r=arguments;return new Promise(function(n,s){var i=e.apply(t,r);function o(e){Nt(i,n,s,o,a,"next",e)}function a(e){Nt(i,n,s,o,a,"throw",e)}o(void 0)})}}var Bt=new $t("https://tpjnyiyvpyzzbzhajbjh.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRwam55aXl2cHl6emJ6aGFqYmpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NDA1NTQsImV4cCI6MjA2NzIxNjU1NH0.cflFdHytlTUA_H_AP7E3Kry9-S-xw45pIRoJQtfk4AE",{auth:{storage:{getItem:function(e){return qt(Lt().m(function t(){var r;return Lt().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.get(e);case 1:return r=t.v,t.a(2,r[e]||null)}},t)}))()},setItem:function(e,t){return qt(Lt().m(function r(){return Lt().w(function(r){for(;;)switch(r.n){case 0:return r.n=1,chrome.storage.local.set(Ut({},e,t));case 1:return r.a(2)}},r)}))()},removeItem:function(e){return qt(Lt().m(function t(){return Lt().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.remove(e);case 1:return t.a(2)}},t)}))()}},autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0}});function Ft(e){return Ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ft(e)}function Mt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function Jt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Mt(Object(r),!0).forEach(function(t){zt(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Mt(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function zt(e,t,r){return(t=Xt(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Gt(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",s=r.toStringTag||"@@toStringTag";function i(r,n,s,i){var c=n&&n.prototype instanceof a?n:a,l=Object.create(c.prototype);return Ht(l,"_invoke",function(r,n,s){var i,a,c,l=0,u=s||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,r){return i=t,a=0,c=e,d.n=r,o}};function f(r,n){for(a=r,c=n,t=0;!h&&l&&!s&&t<u.length;t++){var s,i=u[t],f=d.p,p=i[2];r>3?(s=p===n)&&(c=i[(a=i[4])?5:(a=3,3)],i[4]=i[5]=e):i[0]<=f&&((s=r<2&&f<i[1])?(a=0,d.v=n,d.n=i[1]):f<p&&(s=r<3||i[0]>n||n>p)&&(i[4]=r,i[5]=n,d.n=p,a=0))}if(s||r>1)return o;throw h=!0,n}return function(s,u,p){if(l>1)throw TypeError("Generator is already running");for(h&&1===u&&f(u,p),a=u,c=p;(t=a<2?e:c)||!h;){i||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(l=2,i){if(a||(s="next"),t=i[s]){if(!(t=t.call(i,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=i.return)&&t.call(i),a<2&&(c=TypeError("The iterator does not provide a '"+s+"' method"),a=1);i=e}else if((t=(h=d.n<0)?c:r.call(n,d))!==o)break}catch(t){i=e,a=1,c=t}finally{l=1}}return{value:t,done:h}}}(r,s,i),!0),l}var o={};function a(){}function c(){}function l(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(Ht(t={},n,function(){return this}),t),h=l.prototype=a.prototype=Object.create(u);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,l):(e.__proto__=l,Ht(e,s,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=l,Ht(h,"constructor",l),Ht(l,"constructor",c),c.displayName="GeneratorFunction",Ht(l,s,"GeneratorFunction"),Ht(h),Ht(h,s,"Generator"),Ht(h,n,function(){return this}),Ht(h,"toString",function(){return"[object Generator]"}),(Gt=function(){return{w:i,m:d}})()}function Ht(e,t,r,n){var s=Object.defineProperty;try{s({},"",{})}catch(e){s=0}Ht=function(e,t,r,n){if(t)s?s(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r;else{var i=function(t,r){Ht(e,t,function(e){return this._invoke(t,r,e)})};i("next",0),i("throw",1),i("return",2)}},Ht(e,t,r,n)}function Wt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,s,i,o,a=[],c=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(a.push(n.value),a.length!==t);c=!0);}catch(e){l=!0,s=e}finally{try{if(!c&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(l)throw s}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kt(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Kt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kt(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function Vt(e,t,r,n,s,i,o){try{var a=e[i](o),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,s)}function Yt(e){return function(){var t=this,r=arguments;return new Promise(function(n,s){var i=e.apply(t,r);function o(e){Vt(i,n,s,o,a,"next",e)}function a(e){Vt(i,n,s,o,a,"throw",e)}o(void 0)})}}function Qt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Xt(n.key),n)}}function Xt(e){var t=function(e){if("object"!=Ft(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=Ft(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Ft(t)?t:t+""}var Zt=new(function(){return e=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)},t=[{key:"getData",value:(j=Yt(Gt().m(function e(){var t,r,n,s,i,o,a,c,l,u,h=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(t=e.v,r=t.data,!t.error&&r.session){e.n=2;break}return e.a(2,this.getDefaultData());case 2:return n=r.session.user,console.log("Fetching data for user:",n.id),e.n=3,Promise.all([Bt.from("links").select("*").eq("user_id",n.id),Bt.from("collections").select("*").eq("user_id",n.id)]);case 3:return s=e.v,i=Wt(s,2),o=i[0],a=i[1],o.error&&console.error("Error fetching links:",o.error),a.error&&console.error("Error fetching collections:",a.error),c=(o.data||[]).map(function(e){return console.log("Storage: getData highlights for link",e.id,e.highlights),{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:h.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}),l=(a.data||[]).map(function(e){return{id:e.id,name:e.name,description:e.description,color:e.color,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}}),u={links:c,collections:l,categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0}},console.log("Data fetched from Supabase:",u),e.a(2,u)}},e,this)})),function(){return j.apply(this,arguments)})},{key:"addLink",value:(T=Yt(Gt().m(function e(t){var r,n,s,i,o,a,c,l;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(n=e.v,s=n.data,i=null===(r=s.session)||void 0===r?void 0:r.user){e.n=2;break}return console.error("User not logged in"),e.a(2,{success:!1,error:"User not logged in."});case 2:return o={user_id:i.id,collection_id:t.collectionId||null,url:t.url,title:t.title,favicon:t.favicon,domain:t.domain,user_note:t.userNote,ai_summary:t.aiSummary,category:t.category,is_in_inbox:t.isInInbox||!1,highlights:t.highlights?JSON.stringify(t.highlights):null},console.log("Storage: addLink dbLink.highlights:",o.highlights),e.n=3,Bt.from("links").insert(o).select("id").single();case 3:if(a=e.v,c=a.data,!(l=a.error)){e.n=4;break}return console.error("Supabase addLink error:",l),e.a(2,{success:!1,error:l.message||"Database error occurred."});case 4:return e.a(2,{success:!0,linkId:c.id})}},e)})),function(e){return T.apply(this,arguments)})},{key:"updateLink",value:(S=Yt(Gt().m(function e(t,r){var n,s,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return n=Jt(Jt({},r),{},{updated_at:new Date}),void 0!==r.highlights&&(n.highlights=r.highlights?JSON.stringify(r.highlights):null),delete n.collectionId,delete n.userNote,delete n.aiSummary,delete n.isInInbox,delete n.createdAt,delete n.updatedAt,void 0!==r.collectionId&&(n.collection_id=r.collectionId),void 0!==r.userNote&&(n.user_note=r.userNote),void 0!==r.aiSummary&&(n.ai_summary=r.aiSummary),void 0!==r.isInInbox&&(n.is_in_inbox=r.isInInbox),console.log("Storage: updateLink dbUpdates.highlights:",n.highlights),e.n=1,Bt.from("links").update(n).eq("id",t);case 1:if(s=e.v,!(i=s.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return S.apply(this,arguments)})},{key:"deleteLink",value:(k=Yt(Gt().m(function e(t){var r,n;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("links").delete().eq("id",t);case 1:if(r=e.v,!(n=r.error)){e.n=2;break}throw n;case 2:return e.a(2)}},e)})),function(e){return k.apply(this,arguments)})},{key:"addCollection",value:(_=Yt(Gt().m(function e(t){var r,n,s,i,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(n=e.v,s=n.data,i=null===(r=s.session)||void 0===r?void 0:r.user){e.n=2;break}throw new Error("User not logged in.");case 2:return o={user_id:i.id,name:t.name,description:t.description,color:t.color},e.n=3,Bt.from("collections").insert(o);case 3:if(a=e.v,!(c=a.error)){e.n=4;break}throw c;case 4:return e.a(2)}},e)})),function(e){return _.apply(this,arguments)})},{key:"updateCollection",value:(w=Yt(Gt().m(function e(t,r){var n,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("collections").update(Jt(Jt({},r),{},{updatedAt:new Date})).eq("id",t);case 1:if(n=e.v,!(s=n.error)){e.n=2;break}throw s;case 2:return e.a(2)}},e)})),function(e,t){return w.apply(this,arguments)})},{key:"deleteCollection",value:(b=Yt(Gt().m(function e(t){var r,n;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("collections").delete().eq("id",t);case 1:if(r=e.v,!(n=r.error)){e.n=2;break}throw n;case 2:return e.a(2)}},e)})),function(e){return b.apply(this,arguments)})},{key:"searchLinks",value:(m=Yt(Gt().m(function e(t){var r,n,s,i,o,a,c,l,u=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(n=e.v,s=n.data,i=null===(r=s.session)||void 0===r?void 0:r.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:if(t.trim()){e.n=3;break}return e.a(2,[]);case 3:return e.p=3,e.n=4,Bt.rpc("search_user_links",{search_query:t.trim(),user_uuid:i.id,result_limit:50});case 4:if(o=e.v,a=o.data,!(c=o.error)){e.n=5;break}return console.error("Search error:",c),e.a(2,[]);case 5:return e.a(2,(a||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:u.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain,searchRank:e.rank,searchHeadline:e.headline}}));case 6:return e.p=6,l=e.v,console.error("Search failed:",l),e.a(2,[])}},e,null,[[3,6]])})),function(e){return m.apply(this,arguments)})},{key:"getUserTags",value:(y=Yt(Gt().m(function e(){var t,r,n,s,i,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(r=e.v,n=r.data,s=null===(t=n.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,Bt.rpc("get_user_tags_with_counts",{user_uuid:s.id});case 3:if(i=e.v,o=i.data,!(a=i.error)){e.n=4;break}return console.error("Error fetching user tags:",a),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,name:e.name,usageCount:e.usage_count||0}}));case 5:return e.p=5,c=e.v,console.error("Failed to get user tags:",c),e.a(2,[])}},e,null,[[2,5]])})),function(){return y.apply(this,arguments)})},{key:"getLinkTags",value:(v=Yt(Gt().m(function e(t){var r,n,s,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Bt.rpc("get_link_tags",{link_uuid:t});case 1:if(r=e.v,n=r.data,!(s=r.error)){e.n=2;break}return console.error("Error fetching link tags:",s),e.a(2,[]);case 2:return e.a(2,n||[]);case 3:return e.p=3,i=e.v,console.error("Failed to get link tags:",i),e.a(2,[])}},e,null,[[0,3]])})),function(e){return v.apply(this,arguments)})},{key:"addTagsToLink",value:(g=Yt(Gt().m(function e(t,r){var n,s,i,o,a,c,l;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(s=e.v,i=s.data,o=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,{success:!1,error:"User not logged in."});case 2:return e.p=2,e.n=3,Bt.rpc("add_tags_to_link",{link_uuid:t,tag_names:r,user_uuid:o.id});case 3:if(a=e.v,!(c=a.error)){e.n=4;break}return console.error("Error adding tags to link:",c),e.a(2,{success:!1,error:c.message||"Failed to add tags."});case 4:return e.a(2,{success:!0});case 5:return e.p=5,l=e.v,console.error("Failed to add tags to link:",l),e.a(2,{success:!1,error:l.message})}},e,null,[[2,5]])})),function(e,t){return g.apply(this,arguments)})},{key:"getLinksByTag",value:(p=Yt(Gt().m(function e(t){var r,n,s,i,o,a,c,l,u=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(n=e.v,s=n.data,i=null===(r=s.session)||void 0===r?void 0:r.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,Bt.rpc("get_links_by_tag",{user_uuid:i.id,tag_name:t});case 3:if(o=e.v,a=o.data,!(c=o.error)){e.n=4;break}return console.error("Error fetching links by tag:",c),e.a(2,[]);case 4:return e.a(2,(a||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:u.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}));case 5:return e.p=5,l=e.v,console.error("Failed to get links by tag:",l),e.a(2,[])}},e,null,[[2,5]])})),function(e){return p.apply(this,arguments)})},{key:"cleanupUnusedTags",value:(f=Yt(Gt().m(function e(){var t,r,n,s,i,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(r=e.v,n=r.data,s=null===(t=n.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,0);case 2:return e.p=2,e.n=3,Bt.rpc("cleanup_unused_tags",{user_uuid:s.id});case 3:if(i=e.v,o=i.data,!(a=i.error)){e.n=4;break}return console.error("Error cleaning up unused tags:",a),e.a(2,0);case 4:return e.a(2,o||0);case 5:return e.p=5,c=e.v,console.error("Failed to cleanup unused tags:",c),e.a(2,0)}},e,null,[[2,5]])})),function(){return f.apply(this,arguments)})},{key:"moveToInbox",value:(d=Yt(Gt().m(function e(t){var r,n;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("links").update({is_in_inbox:!0,collection_id:null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(r=e.v,!(n=r.error)){e.n=2;break}throw n;case 2:return e.a(2)}},e)})),function(e){return d.apply(this,arguments)})},{key:"moveFromInbox",value:(h=Yt(Gt().m(function e(t,r){var n,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("links").update({is_in_inbox:!1,collection_id:r||null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(n=e.v,!(s=n.error)){e.n=2;break}throw s;case 2:return e.a(2)}},e)})),function(e,t){return h.apply(this,arguments)})},{key:"getInboxLinks",value:(u=Yt(Gt().m(function e(){var t,r,n,s,i,o,a,c=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(r=e.v,n=r.data,s=null===(t=n.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,Bt.from("links").select("*").eq("user_id",s.id).eq("is_in_inbox",!0).order("created_at",{ascending:!1});case 3:if(i=e.v,o=i.data,!(a=i.error)){e.n=4;break}return console.error("Error fetching inbox links:",a),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:c.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}))}},e)})),function(){return u.apply(this,arguments)})},{key:"bulkMoveFromInbox",value:(l=Yt(Gt().m(function e(t,r){var n,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("links").update({is_in_inbox:!1,collection_id:r||null,updated_at:(new Date).toISOString()}).in("id",t);case 1:if(n=e.v,!(s=n.error)){e.n=2;break}throw s;case 2:return e.a(2)}},e)})),function(e,t){return l.apply(this,arguments)})},{key:"toggleCollectionSharing",value:(c=Yt(Gt().m(function e(t,r){var n,s,i,o,a,c,l,u,h;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(s=e.v,i=s.data,o=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,{success:!1,message:"User not logged in."});case 2:return e.p=2,e.n=3,Bt.rpc("toggle_collection_sharing",{collection_uuid:t,user_uuid:o.id,make_public:r});case 3:if(a=e.v,c=a.data,!(l=a.error)){e.n=4;break}return console.error("Error toggling collection sharing:",l),e.a(2,{success:!1,message:l.message||"Failed to update sharing settings."});case 4:return u=null==c?void 0:c[0],e.a(2,{success:(null==u?void 0:u.success)||!1,shareToken:null==u?void 0:u.share_token,message:(null==u?void 0:u.message)||"Sharing settings updated."});case 5:return e.p=5,h=e.v,console.error("Failed to toggle collection sharing:",h),e.a(2,{success:!1,message:h.message})}},e,null,[[2,5]])})),function(e,t){return c.apply(this,arguments)})},{key:"getCollectionSharingInfo",value:(a=Yt(Gt().m(function e(t){var r,n,s,i,o,a,c,l;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(n=e.v,s=n.data,i=null===(r=s.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,null);case 2:return e.p=2,e.n=3,Bt.from("collections").select("is_public, share_token, view_count").eq("id",t).eq("user_id",i.id).single();case 3:if(o=e.v,a=o.data,!(c=o.error)){e.n=4;break}return console.error("Error fetching collection sharing info:",c),e.a(2,null);case 4:return e.a(2,{isPublic:a.is_public||!1,shareToken:a.share_token,viewCount:a.view_count||0});case 5:return e.p=5,l=e.v,console.error("Failed to get collection sharing info:",l),e.a(2,null)}},e,null,[[2,5]])})),function(e){return a.apply(this,arguments)})},{key:"getDefaultCategories",value:function(){return[{id:"general",name:"General",color:"#6b7280",isDefault:!0},{id:"work",name:"Work",color:"#3b82f6"},{id:"personal",name:"Personal",color:"#10b981"},{id:"learning",name:"Learning",color:"#f59e0b"}]}},{key:"getDefaultData",value:function(){return{links:[],collections:[],categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0}}}},{key:"getLinkByUrl",value:(o=Yt(Gt().m(function e(t){var r,n,s,i,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(n=e.v,s=n.data,i=null===(r=s.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,null);case 2:return e.n=3,Bt.from("links").select("*").eq("user_id",i.id).eq("url",t).single();case 3:if(o=e.v,a=o.data,!(c=o.error)){e.n=5;break}if("PGRST116"!==c.code){e.n=4;break}return e.a(2,null);case 4:throw c;case 5:return e.a(2,{id:a.id,url:a.url,title:a.title,favicon:a.favicon,userNote:a.user_note||"",aiSummary:a.ai_summary,category:a.category,collectionId:a.collection_id,isInInbox:a.is_in_inbox||!1,highlights:this.parseHighlights(a.highlights),createdAt:new Date(a.created_at),updatedAt:new Date(a.updated_at),domain:a.domain})}},e,this)})),function(e){return o.apply(this,arguments)})},{key:"parseHighlights",value:function(e){if(!e)return console.log("Storage: No highlights data found"),[];if("string"==typeof e)try{var t=JSON.parse(e),r=Array.isArray(t)?t:[];return console.log("Storage: Parsed highlights from JSON:",r.length,"highlights",r),r}catch(e){return console.warn("Failed to parse highlights JSON:",e),[]}return Array.isArray(e)?(console.log("Storage: Found highlights array:",e.length,"highlights",e),e):(console.log("Storage: Highlights data in unexpected format:",Ft(e),e),[])}}],r=[{key:"getPublicCollection",value:(i=Yt(Gt().m(function e(t){var r,n,s,i,o;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Bt.rpc("get_public_collection",{token:t});case 1:if(r=e.v,n=r.data,!(s=r.error)){e.n=2;break}return console.error("Error fetching public collection:",s),e.a(2,null);case 2:if(i=null==n?void 0:n[0]){e.n=3;break}return e.a(2,null);case 3:return e.a(2,{id:i.id,name:i.name,description:i.description,viewCount:i.view_count||0,createdAt:new Date(i.created_at),ownerEmail:i.owner_email});case 4:return e.p=4,o=e.v,console.error("Failed to get public collection:",o),e.a(2,null)}},e,null,[[0,4]])})),function(e){return i.apply(this,arguments)})},{key:"getPublicCollectionLinks",value:(s=Yt(Gt().m(function e(t){var r,n,s,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Bt.rpc("get_public_collection_links",{token:t});case 1:if(r=e.v,n=r.data,!(s=r.error)){e.n=2;break}return console.error("Error fetching public collection links:",s),e.a(2,[]);case 2:return e.a(2,(n||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,domain:e.domain,userNote:e.user_note,aiSummary:e.ai_summary,category:e.category,createdAt:new Date(e.created_at),tags:e.tag_names||[]}}));case 3:return e.p=3,i=e.v,console.error("Failed to get public collection links:",i),e.a(2,[])}},e,null,[[0,3]])})),function(e){return s.apply(this,arguments)})},{key:"incrementViewCount",value:(n=Yt(Gt().m(function e(t){var r,n,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Bt.rpc("increment_collection_views",{token:t});case 1:r=e.v,(n=r.error)&&console.error("Error incrementing view count:",n),e.n=3;break;case 2:e.p=2,s=e.v,console.error("Failed to increment view count:",s);case 3:return e.a(2)}},e,null,[[0,2]])})),function(e){return n.apply(this,arguments)})}],t&&Qt(e.prototype,t),r&&Qt(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,r,n,s,i,o,a,c,l,u,h,d,f,p,g,v,y,m,b,w,_,k,S,T,j}());function er(e){return er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},er(e)}function tr(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",s=r.toStringTag||"@@toStringTag";function i(r,n,s,i){var c=n&&n.prototype instanceof a?n:a,l=Object.create(c.prototype);return rr(l,"_invoke",function(r,n,s){var i,a,c,l=0,u=s||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,r){return i=t,a=0,c=e,d.n=r,o}};function f(r,n){for(a=r,c=n,t=0;!h&&l&&!s&&t<u.length;t++){var s,i=u[t],f=d.p,p=i[2];r>3?(s=p===n)&&(c=i[(a=i[4])?5:(a=3,3)],i[4]=i[5]=e):i[0]<=f&&((s=r<2&&f<i[1])?(a=0,d.v=n,d.n=i[1]):f<p&&(s=r<3||i[0]>n||n>p)&&(i[4]=r,i[5]=n,d.n=p,a=0))}if(s||r>1)return o;throw h=!0,n}return function(s,u,p){if(l>1)throw TypeError("Generator is already running");for(h&&1===u&&f(u,p),a=u,c=p;(t=a<2?e:c)||!h;){i||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(l=2,i){if(a||(s="next"),t=i[s]){if(!(t=t.call(i,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=i.return)&&t.call(i),a<2&&(c=TypeError("The iterator does not provide a '"+s+"' method"),a=1);i=e}else if((t=(h=d.n<0)?c:r.call(n,d))!==o)break}catch(t){i=e,a=1,c=t}finally{l=1}}return{value:t,done:h}}}(r,s,i),!0),l}var o={};function a(){}function c(){}function l(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(rr(t={},n,function(){return this}),t),h=l.prototype=a.prototype=Object.create(u);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,l):(e.__proto__=l,rr(e,s,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=l,rr(h,"constructor",l),rr(l,"constructor",c),c.displayName="GeneratorFunction",rr(l,s,"GeneratorFunction"),rr(h),rr(h,s,"Generator"),rr(h,n,function(){return this}),rr(h,"toString",function(){return"[object Generator]"}),(tr=function(){return{w:i,m:d}})()}function rr(e,t,r,n){var s=Object.defineProperty;try{s({},"",{})}catch(e){s=0}rr=function(e,t,r,n){if(t)s?s(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r;else{var i=function(t,r){rr(e,t,function(e){return this._invoke(t,r,e)})};i("next",0),i("throw",1),i("return",2)}},rr(e,t,r,n)}function nr(e,t,r,n,s,i,o){try{var a=e[i](o),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,s)}function sr(e){return function(){var t=this,r=arguments;return new Promise(function(n,s){var i=e.apply(t,r);function o(e){nr(i,n,s,o,a,"next",e)}function a(e){nr(i,n,s,o,a,"throw",e)}o(void 0)})}}function ir(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,or(n.key),n)}}function or(e){var t=function(e){if("object"!=er(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=er(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==er(t)?t:t+""}var ar=new(function(){return e=function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.apiKey=t.apiKey||"",this.model=t.model||"gpt-3.5-turbo"},t=[{key:"generateSummary",value:(n=sr(tr().m(function e(t,r,n){var s,i;return tr().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generatePlaceholderSummary(t,r,n));case 1:return e.p=1,e.n=2,this.callOpenAI(t,r,n);case 2:return s=e.v,e.a(2,s);case 3:return e.p=3,i=e.v,console.error("AI summary generation failed:",i),e.a(2,this.generatePlaceholderSummary(t,r,n))}},e,this,[[1,3]])})),function(e,t,r){return n.apply(this,arguments)})},{key:"generatePlaceholderSummary",value:function(e,t,r){var n=new URL(r).hostname,s=e.length;return n.includes("github.com")?"GitHub repository or project page: ".concat(t):n.includes("stackoverflow.com")?"Stack Overflow discussion about programming or technical topics":n.includes("medium.com")||n.includes("blog")?"Blog article: ".concat(t.substring(0,50),"..."):n.includes("youtube.com")?"Video content: ".concat(t):n.includes("news")||n.includes("article")?"News article from ".concat(n):"Web page from ".concat(n," (").concat(Math.round(s/100)," paragraphs)")}},{key:"callOpenAI",value:(r=sr(tr().m(function e(t,r,n){var s,i,o,a;return tr().w(function(e){for(;;)switch(e.n){case 0:return i="Summarize this web page in 1-2 sentences:\nTitle: ".concat(r,"\nURL: ").concat(n,"\nContent: ").concat(t.substring(0,1e3),"..."),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:i}],max_tokens:100,temperature:.3})});case 1:return o=e.v,e.n=2,o.json();case 2:return a=e.v,e.a(2,(null===(s=a.choices[0])||void 0===s||null===(s=s.message)||void 0===s?void 0:s.content)||this.generatePlaceholderSummary(t,r,n))}},e,this)})),function(e,t,n){return r.apply(this,arguments)})},{key:"updateApiKey",value:function(e){this.apiKey=e}}],t&&ir(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,r,n}());function cr(e){return function(e){if(Array.isArray(e))return lr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return lr(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?lr(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function lr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function ur(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",s=r.toStringTag||"@@toStringTag";function i(r,n,s,i){var c=n&&n.prototype instanceof a?n:a,l=Object.create(c.prototype);return hr(l,"_invoke",function(r,n,s){var i,a,c,l=0,u=s||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,r){return i=t,a=0,c=e,d.n=r,o}};function f(r,n){for(a=r,c=n,t=0;!h&&l&&!s&&t<u.length;t++){var s,i=u[t],f=d.p,p=i[2];r>3?(s=p===n)&&(c=i[(a=i[4])?5:(a=3,3)],i[4]=i[5]=e):i[0]<=f&&((s=r<2&&f<i[1])?(a=0,d.v=n,d.n=i[1]):f<p&&(s=r<3||i[0]>n||n>p)&&(i[4]=r,i[5]=n,d.n=p,a=0))}if(s||r>1)return o;throw h=!0,n}return function(s,u,p){if(l>1)throw TypeError("Generator is already running");for(h&&1===u&&f(u,p),a=u,c=p;(t=a<2?e:c)||!h;){i||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(l=2,i){if(a||(s="next"),t=i[s]){if(!(t=t.call(i,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=i.return)&&t.call(i),a<2&&(c=TypeError("The iterator does not provide a '"+s+"' method"),a=1);i=e}else if((t=(h=d.n<0)?c:r.call(n,d))!==o)break}catch(t){i=e,a=1,c=t}finally{l=1}}return{value:t,done:h}}}(r,s,i),!0),l}var o={};function a(){}function c(){}function l(){}t=Object.getPrototypeOf;var u=[][n]?t(t([][n]())):(hr(t={},n,function(){return this}),t),h=l.prototype=a.prototype=Object.create(u);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,l):(e.__proto__=l,hr(e,s,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=l,hr(h,"constructor",l),hr(l,"constructor",c),c.displayName="GeneratorFunction",hr(l,s,"GeneratorFunction"),hr(h),hr(h,s,"Generator"),hr(h,n,function(){return this}),hr(h,"toString",function(){return"[object Generator]"}),(ur=function(){return{w:i,m:d}})()}function hr(e,t,r,n){var s=Object.defineProperty;try{s({},"",{})}catch(e){s=0}hr=function(e,t,r,n){if(t)s?s(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r;else{var i=function(t,r){hr(e,t,function(e){return this._invoke(t,r,e)})};i("next",0),i("throw",1),i("return",2)}},hr(e,t,r,n)}function dr(e,t,r,n,s,i,o){try{var a=e[i](o),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,s)}function fr(e){return function(){var t=this,r=arguments;return new Promise(function(n,s){var i=e.apply(t,r);function o(e){dr(i,n,s,o,a,"next",e)}function a(e){dr(i,n,s,o,a,"throw",e)}o(void 0)})}}function pr(e,t){return gr.apply(this,arguments)}function gr(){return(gr=fr(ur().m(function e(t,r){var n,s,i,o,a,c,l,u,h,d,f,p;return ur().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,n=r||t.url,s=t.title||"Untitled",n&&!n.startsWith("chrome://")&&!n.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot save this type of page."});case 1:if(i="",!t.id){e.n=5;break}return e.p=2,e.n=3,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 3:o=e.v,i=(null==o?void 0:o.content)||"",e.n=5;break;case 4:e.p=4,d=e.v,console.log("Could not extract page content:",d);case 5:return a=new URL(n).hostname,e.n=6,ar.generateSummary(i,s,n);case 6:return c=e.v,l={url:n,title:s,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(a,"&sz=32"),userNote:"",aiSummary:c,category:"general",domain:a,isInInbox:!0},console.log("Background: saveCurrentPage newLink:",JSON.stringify(l)),e.n=7,Zt.addLink(l);case 7:if(u=e.v,console.log("Background: saveCurrentPage result:",u),u.success){e.n=8;break}throw new Error(u.error||"Failed to save link to database.");case 8:return chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Saved to Nest",message:'"'.concat(s,'" has been saved.')}),e.p=9,e.n=10,chrome.runtime.sendMessage({action:"refreshSidebar"});case 10:e.n=12;break;case 11:e.p=11,f=e.v,console.log("Could not send refresh message to sidebar:",f);case 12:return e.a(2,{success:!0});case 13:return e.p=13,p=e.v,console.error("Failed to save page:",p),h=p.message||"An unknown error occurred.",chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Nest Error",message:"Failed to save page: ".concat(h)}),e.a(2,{success:!1,error:h})}},e,null,[[9,11],[2,4],[0,13]])}))).apply(this,arguments)}function vr(e){return yr.apply(this,arguments)}function yr(){return(yr=fr(ur().m(function e(t){var r,n;return ur().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.tabs.sendMessage(t,{action:"getPageContent"});case 1:return r=e.v,e.a(2,r);case 2:return e.p=2,n=e.v,console.error("Failed to get page content:",n),e.a(2,{content:""})}},e,null,[[0,2]])}))).apply(this,arguments)}function mr(e,t,r,n){return br.apply(this,arguments)}function br(){return(br=fr(ur().m(function e(t,r,n,s){var i,o,a,c,l,u,h,d,f,p,g,v,y;return ur().w(function(e){for(;;)switch(e.n){case 0:if(console.log("Background: saveHighlight called with:",{selectedText:r,context:n,position:s}),e.p=1,i=t.url,o=t.title||"Untitled",i&&!i.startsWith("chrome://")&&!i.startsWith("chrome-extension://")){e.n=2;break}return e.a(2,{success:!1,error:"Cannot save highlights on this type of page."});case 2:return a=new URL(i).hostname,e.n=3,Zt.getLinkByUrl(i);case 3:if(c=e.v,console.log("Background: Existing link found:",!!c),l={id:"highlight_".concat(Date.now(),"_").concat(Math.random().toString(36).substr(2,9)),selectedText:r,context:n||r,position:s,createdAt:new Date,updatedAt:new Date},console.log("Background: Created highlight:",JSON.stringify(l)),!c){e.n=5;break}return h=[].concat(cr(c.highlights||[]),[l]),console.log("Background: Adding highlight to existing link, total highlights:",h.length),e.n=4,Zt.updateLink(c.id,{highlights:h});case 4:d=e.v,console.log("Background: updateLink result:",d),u=c.id,e.n=8;break;case 5:return console.log("Background: Creating new link with highlight"),f={url:i,title:o,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(a,"&sz=32"),userNote:"",category:"general",domain:a,isInInbox:!0,highlights:[l]},console.log("Background: newLink with highlight:",JSON.stringify(f)),e.n=6,Zt.addLink(f);case 6:if(p=e.v,console.log("Background: addLink result:",p),p.success){e.n=7;break}throw new Error(p.error||"Failed to save link to database.");case 7:u=p.linkId;case 8:if(console.log("Background: Highlight saved successfully, linkId:",u),chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Highlight Saved",message:'Highlight saved from "'.concat(o,'"')}),t.id)try{chrome.tabs.sendMessage(t.id,{action:"showHighlightConfirmation"})}catch(e){console.log("Could not send confirmation to content script:",e)}return e.p=9,e.n=10,chrome.runtime.sendMessage({action:"refreshSidebar"});case 10:e.n=12;break;case 11:e.p=11,v=e.v,console.log("Could not send refresh message to sidebar:",v);case 12:return e.a(2,{success:!0,linkId:u});case 13:return e.p=13,y=e.v,console.error("Failed to save highlight:",y),g=y.message||"An unknown error occurred.",chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Nest Error",message:"Failed to save highlight: ".concat(g)}),e.a(2,{success:!1,error:g})}},e,null,[[9,11],[1,13]])}))).apply(this,arguments)}chrome.runtime.onInstalled.addListener(function(){chrome.contextMenus.create({id:"saveToNest",title:"Save to Nest",contexts:["page","link"]}),chrome.contextMenus.create({id:"saveHighlight",title:"Save highlight to Nest",contexts:["selection"]}),console.log("Nest extension installed")}),chrome.contextMenus.onClicked.addListener(function(){var e=fr(ur().m(function e(t,r){return ur().w(function(e){for(;;)switch(e.n){case 0:if(console.log("Background: Context menu clicked:",t.menuItemId,"Selection:",t.selectionText),"saveToNest"!==t.menuItemId||!r){e.n=2;break}return e.n=1,pr(r,t.linkUrl);case 1:e.n=3;break;case 2:if("saveHighlight"!==t.menuItemId||!r||!t.selectionText){e.n=3;break}return console.log("Background: Calling saveHighlight from context menu"),e.n=3,mr(r,t.selectionText,t.selectionText,void 0);case 3:return e.a(2)}},e)}));return function(t,r){return e.apply(this,arguments)}}()),chrome.action.onClicked.addListener(function(){var e=fr(ur().m(function e(t){return ur().w(function(e){for(;;)switch(e.n){case 0:console.log("Action clicked, but popup should handle this");case 1:return e.a(2)}},e)}));return function(t){return e.apply(this,arguments)}}()),chrome.runtime.onMessage.addListener(function(e,t,r){return console.log("Background: Message received:",e),fr(ur().m(function n(){var s,i,o,a,c,l;return ur().w(function(n){for(;;)switch(n.n){case 0:if(n.p=0,"saveCurrentPage"!==e.action){n.n=5;break}return n.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if(!(s=n.v)[0]){n.n=3;break}return n.n=2,pr(s[0]);case 2:i=n.v,r(i),n.n=4;break;case 3:r({success:!1,error:"No active tab found."});case 4:n.n=15;break;case 5:if("saveHighlight"!==e.action){n.n=10;break}return n.n=6,chrome.tabs.query({active:!0,currentWindow:!0});case 6:if(!(o=n.v)[0]){n.n=8;break}return n.n=7,mr(o[0],e.selectedText,e.context,e.position);case 7:a=n.v,r(a),n.n=9;break;case 8:r({success:!1,error:"No active tab found."});case 9:n.n=15;break;case 10:if("getPageContent"!==e.action){n.n=14;break}if(!t.tab||!t.tab.id){n.n=12;break}return n.n=11,vr(t.tab.id);case 11:c=n.v,r(c),n.n=13;break;case 12:r({content:""});case 13:n.n=15;break;case 14:r({success:!1,error:"Unknown action"});case 15:n.n=17;break;case 16:n.p=16,l=n.v,console.error("Background script error:",l),r({success:!1,error:l.message});case 17:return n.a(2)}},n,null,[[0,16]])}))(),!0}),chrome.commands.onCommand.addListener(function(){var e=fr(ur().m(function e(t){var r,n;return ur().w(function(e){for(;;)switch(e.n){case 0:if("save-page"!==t){e.n=3;break}return e.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if(!(r=e.v)[0]){e.n=2;break}return e.n=2,pr(r[0]);case 2:e.n=5;break;case 3:if("open-command-palette"!==t){e.n=5;break}return e.n=4,chrome.tabs.query({active:!0,currentWindow:!0});case 4:if(!(n=e.v)[0]){e.n=5;break}return e.n=5,chrome.sidePanel.open({tabId:n[0].id});case 5:return e.a(2)}},e)}));return function(t){return e.apply(this,arguments)}}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsIm1hcHBpbmdzIjoiO3VCQXVCV0EsRSxzQkN0QlgsSUFBSUMsRUFBbUJDLE1BQVFBLEtBQUtELGlCQUFvQixTQUFVRSxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJQyxXQUFjRCxFQUFNLENBQUUsUUFBV0EsRUFDeEQsRUFDQUUsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsTUFBTUMsRUFBMkJSLEVBQWdCLEVBQVEsTUF3UXpETSxFQUFBLFFBdlFBLE1BQ0ksV0FBQUcsQ0FBWUMsR0FBSyxRQUFFQyxFQUFVLENBQUMsRUFBQyxPQUFFQyxFQUFNLE1BQUVDLElBQ3JDWixLQUFLUyxJQUFNQSxFQUNYVCxLQUFLVSxRQUFVQSxFQUNmVixLQUFLVyxPQUFTQSxFQUNkWCxLQUFLWSxNQUFRQSxDQUNqQixDQXNCQSxNQUFBQyxDQUFPQyxHQUFTLEtBQUVDLEdBQU8sRUFBSyxNQUFFQyxHQUFXLENBQUMsR0FDeEMsTUFBTUMsRUFBU0YsRUFBTyxPQUFTLE1BRS9CLElBQUlHLEdBQVMsRUFDYixNQUFNQyxHQUFrQkwsUUFBeUNBLEVBQVUsS0FDdEVNLE1BQU0sSUFDTkMsSUFBS0MsR0FDRixLQUFLQyxLQUFLRCxLQUFPSixFQUNWLElBRUQsTUFBTkksSUFDQUosR0FBVUEsR0FFUEksSUFFTkUsS0FBSyxJQUtWLE9BSkF4QixLQUFLUyxJQUFJZ0IsYUFBYUMsSUFBSSxTQUFVUCxHQUNoQ0gsSUFDQWhCLEtBQUtVLFFBQWdCLE9BQUksU0FBU00sS0FFL0IsSUFBSVQsRUFBeUJvQixRQUFRLENBQ3hDVixTQUNBUixJQUFLVCxLQUFLUyxJQUNWQyxRQUFTVixLQUFLVSxRQUNkQyxPQUFRWCxLQUFLVyxPQUNiQyxNQUFPWixLQUFLWSxNQUNaZ0IsWUFBWSxHQUVwQixDQTJCQSxNQUFBQyxDQUFPQyxHQUFRLE1BQUVkLEVBQUssY0FBRWUsR0FBZ0IsR0FBVSxDQUFDLEdBQy9DLE1BQ01DLEVBQWlCLEdBV3ZCLEdBVkloQyxLQUFLVSxRQUFnQixRQUNyQnNCLEVBQWVDLEtBQUtqQyxLQUFLVSxRQUFnQixRQUV6Q00sR0FDQWdCLEVBQWVDLEtBQUssU0FBU2pCLEtBRTVCZSxHQUNEQyxFQUFlQyxLQUFLLG1CQUV4QmpDLEtBQUtVLFFBQWdCLE9BQUlzQixFQUFlUixLQUFLLEtBQ3pDVSxNQUFNQyxRQUFRTCxHQUFTLENBQ3ZCLE1BQU1oQixFQUFVZ0IsRUFBT00sT0FBTyxDQUFDQyxFQUFLQyxJQUFNRCxFQUFJRSxPQUFPcEMsT0FBT3FDLEtBQUtGLElBQUssSUFDdEUsR0FBSXhCLEVBQVEyQixPQUFTLEVBQUcsQ0FDcEIsTUFBTUMsRUFBZ0IsSUFBSSxJQUFJQyxJQUFJN0IsSUFBVU8sSUFBS3VCLEdBQVcsSUFBSUEsTUFDaEU1QyxLQUFLUyxJQUFJZ0IsYUFBYUMsSUFBSSxVQUFXZ0IsRUFBY2xCLEtBQUssS0FDNUQsQ0FDSixDQUNBLE9BQU8sSUFBSWpCLEVBQXlCb0IsUUFBUSxDQUN4Q1YsT0FwQlcsT0FxQlhSLElBQUtULEtBQUtTLElBQ1ZDLFFBQVNWLEtBQUtVLFFBQ2RDLE9BQVFYLEtBQUtXLE9BQ2JrQyxLQUFNZixFQUNObEIsTUFBT1osS0FBS1ksTUFDWmdCLFlBQVksR0FFcEIsQ0F1Q0EsTUFBQWtCLENBQU9oQixHQUFRLFdBQUVpQixFQUFVLGlCQUFFQyxHQUFtQixFQUFLLE1BQUVoQyxFQUFLLGNBQUVlLEdBQWdCLEdBQVUsQ0FBQyxHQUNyRixNQUNNQyxFQUFpQixDQUFDLGNBQWNnQixFQUFtQixTQUFXLHNCQWFwRSxRQVptQkMsSUFBZkYsR0FDQS9DLEtBQUtTLElBQUlnQixhQUFhQyxJQUFJLGNBQWVxQixHQUN6Qy9DLEtBQUtVLFFBQWdCLFFBQ3JCc0IsRUFBZUMsS0FBS2pDLEtBQUtVLFFBQWdCLFFBRXpDTSxHQUNBZ0IsRUFBZUMsS0FBSyxTQUFTakIsS0FFNUJlLEdBQ0RDLEVBQWVDLEtBQUssbUJBRXhCakMsS0FBS1UsUUFBZ0IsT0FBSXNCLEVBQWVSLEtBQUssS0FDekNVLE1BQU1DLFFBQVFMLEdBQVMsQ0FDdkIsTUFBTWhCLEVBQVVnQixFQUFPTSxPQUFPLENBQUNDLEVBQUtDLElBQU1ELEVBQUlFLE9BQU9wQyxPQUFPcUMsS0FBS0YsSUFBSyxJQUN0RSxHQUFJeEIsRUFBUTJCLE9BQVMsRUFBRyxDQUNwQixNQUFNQyxFQUFnQixJQUFJLElBQUlDLElBQUk3QixJQUFVTyxJQUFLdUIsR0FBVyxJQUFJQSxNQUNoRTVDLEtBQUtTLElBQUlnQixhQUFhQyxJQUFJLFVBQVdnQixFQUFjbEIsS0FBSyxLQUM1RCxDQUNKLENBQ0EsT0FBTyxJQUFJakIsRUFBeUJvQixRQUFRLENBQ3hDVixPQXRCVyxPQXVCWFIsSUFBS1QsS0FBS1MsSUFDVkMsUUFBU1YsS0FBS1UsUUFDZEMsT0FBUVgsS0FBS1csT0FDYmtDLEtBQU1mLEVBQ05sQixNQUFPWixLQUFLWSxNQUNaZ0IsWUFBWSxHQUVwQixDQXNCQSxNQUFBc0IsQ0FBT3BCLEdBQVEsTUFBRWQsR0FBVyxDQUFDLEdBQ3pCLE1BQ01nQixFQUFpQixHQVF2QixPQVBJaEMsS0FBS1UsUUFBZ0IsUUFDckJzQixFQUFlQyxLQUFLakMsS0FBS1UsUUFBZ0IsUUFFekNNLEdBQ0FnQixFQUFlQyxLQUFLLFNBQVNqQixLQUVqQ2hCLEtBQUtVLFFBQWdCLE9BQUlzQixFQUFlUixLQUFLLEtBQ3RDLElBQUlqQixFQUF5Qm9CLFFBQVEsQ0FDeENWLE9BVlcsUUFXWFIsSUFBS1QsS0FBS1MsSUFDVkMsUUFBU1YsS0FBS1UsUUFDZEMsT0FBUVgsS0FBS1csT0FDYmtDLEtBQU1mLEVBQ05sQixNQUFPWixLQUFLWSxNQUNaZ0IsWUFBWSxHQUVwQixDQW9CQSxRQUFPLE1BQUVaLEdBQVcsQ0FBQyxHQUNqQixNQUNNZ0IsRUFBaUIsR0FRdkIsT0FQSWhCLEdBQ0FnQixFQUFlQyxLQUFLLFNBQVNqQixLQUU3QmhCLEtBQUtVLFFBQWdCLFFBQ3JCc0IsRUFBZW1CLFFBQVFuRCxLQUFLVSxRQUFnQixRQUVoRFYsS0FBS1UsUUFBZ0IsT0FBSXNCLEVBQWVSLEtBQUssS0FDdEMsSUFBSWpCLEVBQXlCb0IsUUFBUSxDQUN4Q1YsT0FWVyxTQVdYUixJQUFLVCxLQUFLUyxJQUNWQyxRQUFTVixLQUFLVSxRQUNkQyxPQUFRWCxLQUFLVyxPQUNiQyxNQUFPWixLQUFLWSxNQUNaZ0IsWUFBWSxHQUVwQixFLHNCQzFRSixJQUFJN0IsRUFBbUJDLE1BQVFBLEtBQUtELGlCQUFvQixTQUFVRSxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJQyxXQUFjRCxFQUFNLENBQUUsUUFBV0EsRUFDeEQsRUFDQUUsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsTUFBTThDLEVBQXFCckQsRUFBZ0IsRUFBUSxNQUNuRCxNQUFNc0QsVUFBa0NELEVBQW1CekIsUUFVdkQsTUFBQWQsQ0FBT0MsR0FFSCxJQUFJSSxHQUFTLEVBQ2IsTUFBTUMsR0FBa0JMLFFBQXlDQSxFQUFVLEtBQ3RFTSxNQUFNLElBQ05DLElBQUtDLEdBQ0YsS0FBS0MsS0FBS0QsS0FBT0osRUFDVixJQUVELE1BQU5JLElBQ0FKLEdBQVVBLEdBRVBJLElBRU5FLEtBQUssSUFNVixPQUxBeEIsS0FBS1MsSUFBSWdCLGFBQWFDLElBQUksU0FBVVAsR0FDaENuQixLQUFLVSxRQUFnQixTQUNyQlYsS0FBS1UsUUFBZ0IsUUFBSyxLQUU5QlYsS0FBS1UsUUFBZ0IsUUFBSyx3QkFDbkJWLElBQ1gsQ0FtQkEsS0FBQXNELENBQU1WLEdBQVEsVUFBRVcsR0FBWSxFQUFJLFdBQUVDLEVBQVUsYUFBRUMsRUFBWSxnQkFBRUMsRUFBa0JELEdBQWtCLENBQUMsR0FDN0YsTUFBTUUsRUFBTUQsRUFBa0IsR0FBR0EsVUFBMEIsUUFDckRFLEVBQWdCNUQsS0FBS1MsSUFBSWdCLGFBQWFvQyxJQUFJRixHQUVoRCxPQURBM0QsS0FBS1MsSUFBSWdCLGFBQWFDLElBQUlpQyxFQUFLLEdBQUdDLEVBQWdCLEdBQUdBLEtBQW1CLEtBQUtoQixLQUFVVyxFQUFZLE1BQVEsY0FBd0JOLElBQWZPLEVBQTJCLEdBQUtBLEVBQWEsY0FBZ0IsZ0JBQzFLeEQsSUFDWCxDQVdBLEtBQUE4RCxDQUFNOUMsR0FBTyxhQUFFeUMsRUFBWSxnQkFBRUMsRUFBa0JELEdBQWtCLENBQUMsR0FDOUQsTUFBTUUsT0FBaUMsSUFBcEJELEVBQWtDLFFBQVUsR0FBR0EsVUFFbEUsT0FEQTFELEtBQUtTLElBQUlnQixhQUFhQyxJQUFJaUMsRUFBSyxHQUFHM0MsS0FDM0JoQixJQUNYLENBZ0JBLEtBQUErRCxDQUFNQyxFQUFNQyxHQUFJLGFBQUVSLEVBQVksZ0JBQUVDLEVBQWtCRCxHQUFrQixDQUFDLEdBQ2pFLE1BQU1TLE9BQXVDLElBQXBCUixFQUFrQyxTQUFXLEdBQUdBLFdBQ25FUyxPQUFzQyxJQUFwQlQsRUFBa0MsUUFBVSxHQUFHQSxVQUl2RSxPQUhBMUQsS0FBS1MsSUFBSWdCLGFBQWFDLElBQUl3QyxFQUFXLEdBQUdGLEtBRXhDaEUsS0FBS1MsSUFBSWdCLGFBQWFDLElBQUl5QyxFQUFVLElBQUdGLEVBQUtELEVBQU8sSUFDNUNoRSxJQUNYLENBTUEsV0FBQW9FLENBQVlDLEdBRVIsT0FEQXJFLEtBQUtxRSxPQUFTQSxFQUNQckUsSUFDWCxDQU9BLE1BQUFzRSxHQUVJLE9BREF0RSxLQUFLVSxRQUFnQixPQUFJLG9DQUNsQlYsSUFDWCxDQU9BLFdBQUF1RSxHQVVJLE1BUG9CLFFBQWhCdkUsS0FBS2lCLE9BQ0xqQixLQUFLVSxRQUFnQixPQUFJLG1CQUd6QlYsS0FBS1UsUUFBZ0IsT0FBSSxvQ0FFN0JWLEtBQUt3RSxlQUFnQixFQUNkeEUsSUFDWCxDQUlBLEdBQUF5RSxHQUVJLE9BREF6RSxLQUFLVSxRQUFnQixPQUFJLFdBQ2xCVixJQUNYLENBSUEsT0FBQTBFLEdBRUksT0FEQTFFLEtBQUtVLFFBQWdCLE9BQUksdUJBQ2xCVixJQUNYLENBMEJBLE9BQUEyRSxFQUFRLFFBQUVDLEdBQVUsRUFBSyxRQUFFQyxHQUFVLEVBQUssU0FBRUMsR0FBVyxFQUFLLFFBQUVDLEdBQVUsRUFBSyxJQUFFQyxHQUFNLEVBQUssT0FBRUMsRUFBUyxRQUFZLENBQUMsR0FDOUcsSUFBSUMsRUFDSixNQUFNQyxFQUFVLENBQ1pQLEVBQVUsVUFBWSxLQUN0QkMsRUFBVSxVQUFZLEtBQ3RCQyxFQUFXLFdBQWEsS0FDeEJDLEVBQVUsVUFBWSxLQUN0QkMsRUFBTSxNQUFRLE1BRWJJLE9BQU9DLFNBQ1A3RCxLQUFLLEtBRUo4RCxFQUFpRCxRQUFqQ0osRUFBS2xGLEtBQUtVLFFBQWdCLGNBQXNCLElBQVB3RSxFQUFnQkEsRUFBSyxtQkFFcEYsT0FEQWxGLEtBQUtVLFFBQWdCLE9BQUksOEJBQThCdUUsV0FBZ0JLLGVBQTBCSCxLQUV0Rm5GLElBR2YsQ0FNQSxRQUFBdUYsR0FDSSxJQUFJTCxFQU9KLE9BTnVDLFFBQWpDQSxFQUFLbEYsS0FBS1UsUUFBZ0IsY0FBc0IsSUFBUHdFLEVBQWdCQSxFQUFLLElBQUlNLE9BQU8vQyxPQUFTLEVBQ3BGekMsS0FBS1UsUUFBZ0IsUUFBSyxlQUcxQlYsS0FBS1UsUUFBZ0IsT0FBSSxjQUV0QlYsSUFDWCxDQU9BLE9BQUF5RixHQUNJLE9BQU96RixJQUNYLEVBRUpLLEVBQUEsUUFBa0JnRCxDLHNCQzNObEIsSUFBSXRELEVBQW1CQyxNQUFRQSxLQUFLRCxpQkFBb0IsU0FBVUUsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSUMsV0FBY0QsRUFBTSxDQUFFLFFBQVdBLEVBQ3hELEVBQ0FFLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRcUYsZUFBaUJyRixFQUFRc0YsaUJBQW1CdEYsRUFBUWdELDBCQUE0QmhELEVBQVF1Rix1QkFBeUJ2RixFQUFRd0Ysc0JBQXdCeEYsRUFBUXlGLHFCQUFrQixFQUVuTCxNQUFNQyxFQUFvQmhHLEVBQWdCLEVBQVEsTUFDbERNLEVBQVF5RixnQkFBa0JDLEVBQWtCcEUsUUFDNUMsTUFBTXFFLEVBQTBCakcsRUFBZ0IsRUFBUSxLQUN4RE0sRUFBUXdGLHNCQUF3QkcsRUFBd0JyRSxRQUN4RCxNQUFNcEIsRUFBMkJSLEVBQWdCLEVBQVEsTUFDekRNLEVBQVF1Rix1QkFBeUJyRixFQUF5Qm9CLFFBQzFELE1BQU1zRSxFQUE4QmxHLEVBQWdCLEVBQVEsTUFDNURNLEVBQVFnRCwwQkFBNEI0QyxFQUE0QnRFLFFBQ2hFLE1BQU15QixFQUFxQnJELEVBQWdCLEVBQVEsTUFDbkRNLEVBQVFzRixpQkFBbUJ2QyxFQUFtQnpCLFFBQzlDLE1BQU11RSxFQUFtQm5HLEVBQWdCLEVBQVEsTUFDakRNLEVBQVFxRixlQUFpQlEsRUFBaUJ2RSxRQUMxQ3RCLEVBQUEsUUFBa0IsQ0FDZHlGLGdCQUFpQkMsRUFBa0JwRSxRQUNuQ2tFLHNCQUF1QkcsRUFBd0JyRSxRQUMvQ2lFLHVCQUF3QnJGLEVBQXlCb0IsUUFDakQwQiwwQkFBMkI0QyxFQUE0QnRFLFFBQ3ZEZ0UsaUJBQWtCdkMsRUFBbUJ6QixRQUNyQytELGVBQWdCUSxFQUFpQnZFLFEsc0JDeEJyQyxJQUFJNUIsRUFBbUJDLE1BQVFBLEtBQUtELGlCQUFvQixTQUFVRSxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJQyxXQUFjRCxFQUFNLENBQUUsUUFBV0EsRUFDeEQsRUFDQUUsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsTUFBTTBGLEVBQTBCakcsRUFBZ0IsRUFBUSxLQUNsRFEsRUFBMkJSLEVBQWdCLEVBQVEsTUFDbkRvRyxFQUFjLEVBQVEsS0FXNUIsTUFBTUwsRUFXRixXQUFBdEYsQ0FBWUMsR0FBSyxRQUFFQyxFQUFVLENBQUMsRUFBQyxPQUFFQyxFQUFNLE1BQUVDLEdBQVcsQ0FBQyxHQUNqRFosS0FBS1MsSUFBTUEsRUFDWFQsS0FBS1UsUUFBVVAsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUdELEVBQVlFLGlCQUFrQjNGLEdBQzdFVixLQUFLc0csV0FBYTNGLEVBQ2xCWCxLQUFLWSxNQUFRQSxDQUNqQixDQU1BLElBQUFvRCxDQUFLdUMsR0FDRCxNQUFNOUYsRUFBTSxJQUFJK0YsSUFBSSxHQUFHeEcsS0FBS1MsT0FBTzhGLEtBQ25DLE9BQU8sSUFBSVAsRUFBd0JyRSxRQUFRbEIsRUFBSyxDQUM1Q0MsUUFBU1AsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHcEcsS0FBS1UsU0FDaENDLE9BQVFYLEtBQUtzRyxXQUNiMUYsTUFBT1osS0FBS1ksT0FFcEIsQ0FRQSxNQUFBRCxDQUFPQSxHQUNILE9BQU8sSUFBSW1GLEVBQWdCOUYsS0FBS1MsSUFBSyxDQUNqQ0MsUUFBU1YsS0FBS1UsUUFDZEMsU0FDQUMsTUFBT1osS0FBS1ksT0FFcEIsQ0F3QkEsR0FBQTZGLENBQUlDLEVBQUlDLEVBQU8sQ0FBQyxHQUFHLEtBQUU1RixHQUFPLEVBQUssSUFBRThDLEdBQU0sRUFBSyxNQUFFN0MsR0FBVyxDQUFDLEdBQ3hELElBQUlDLEVBQ0osTUFBTVIsRUFBTSxJQUFJK0YsSUFBSSxHQUFHeEcsS0FBS1MsV0FBV2lHLEtBQ3ZDLElBQUk3RCxFQUNBOUIsR0FBUThDLEdBQ1I1QyxFQUFTRixFQUFPLE9BQVMsTUFDekJaLE9BQU95RyxRQUFRRCxHQUdWdkIsT0FBTyxFQUFFeUIsRUFBR3ZHLFVBQXFCMkMsSUFBVjNDLEdBRXZCZSxJQUFJLEVBQUV5RixFQUFNeEcsS0FBVyxDQUFDd0csRUFBTTVFLE1BQU1DLFFBQVE3QixHQUFTLElBQUlBLEVBQU1rQixLQUFLLFFBQVUsR0FBR2xCLE1BQ2pGeUcsUUFBUSxFQUFFRCxFQUFNeEcsTUFDakJHLEVBQUlnQixhQUFhdUYsT0FBT0YsRUFBTXhHLE9BSWxDVyxFQUFTLE9BQ1Q0QixFQUFPOEQsR0FFWCxNQUFNakcsRUFBVVAsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHcEcsS0FBS1UsU0FJdkMsT0FISU0sSUFDQU4sRUFBZ0IsT0FBSSxTQUFTTSxLQUUxQixJQUFJVCxFQUF5Qm9CLFFBQVEsQ0FDeENWLFNBQ0FSLE1BQ0FDLFVBQ0FDLE9BQVFYLEtBQUtzRyxXQUNiekQsT0FDQWpDLE1BQU9aLEtBQUtZLE1BQ1pnQixZQUFZLEdBRXBCLEVBRUp2QixFQUFBLFFBQWtCeUYsQyxjQ3ZIbEIzRixPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUTRHLGFBQVUsRUFDbEI1RyxFQUFRNEcsUUFBVSxpQixnQkNGbEI5RyxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUWdHLHFCQUFrQixFQUMxQixNQUFNYSxFQUFZLEVBQVEsS0FDMUI3RyxFQUFRZ0csZ0JBQWtCLENBQUUsZ0JBQWlCLGdCQUFnQmEsRUFBVUQsVSxzQkNIdkUsSUFBSWxILEVBQW1CQyxNQUFRQSxLQUFLRCxpQkFBb0IsU0FBVUUsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSUMsV0FBY0QsRUFBTSxDQUFFLFFBQVdBLEVBQ3hELEVBQ0FFLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBRXRELE1BQU02RyxFQUFlcEgsRUFBZ0IsRUFBUSxNQUN2Q21HLEVBQW1CbkcsRUFBZ0IsRUFBUSxNQW9OakRNLEVBQUEsUUFuTkEsTUFDSSxXQUFBRyxDQUFZNEcsR0FDUnBILEtBQUtxSCxvQkFBcUIsRUFDMUJySCxLQUFLaUIsT0FBU21HLEVBQVFuRyxPQUN0QmpCLEtBQUtTLElBQU0yRyxFQUFRM0csSUFDbkJULEtBQUtVLFFBQVUwRyxFQUFRMUcsUUFDdkJWLEtBQUtXLE9BQVN5RyxFQUFRekcsT0FDdEJYLEtBQUs2QyxLQUFPdUUsRUFBUXZFLEtBQ3BCN0MsS0FBS3FILG1CQUFxQkQsRUFBUUMsbUJBQ2xDckgsS0FBS3FFLE9BQVMrQyxFQUFRL0MsT0FDdEJyRSxLQUFLd0UsY0FBZ0I0QyxFQUFRNUMsY0FDekI0QyxFQUFReEcsTUFDUlosS0FBS1ksTUFBUXdHLEVBQVF4RyxNQUVDLG9CQUFWQSxNQUNaWixLQUFLWSxNQUFRdUcsRUFBYXhGLFFBRzFCM0IsS0FBS1ksTUFBUUEsS0FFckIsQ0FPQSxZQUFBMEcsR0FFSSxPQURBdEgsS0FBS3FILG9CQUFxQixFQUNuQnJILElBQ1gsQ0FJQSxTQUFBdUgsQ0FBVVQsRUFBTXhHLEdBR1osT0FGQU4sS0FBS1UsUUFBVVAsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHcEcsS0FBS1UsU0FDdENWLEtBQUtVLFFBQVFvRyxHQUFReEcsRUFDZE4sSUFDWCxDQUNBLElBQUF3SCxDQUFLQyxFQUFhQyxRQUVNekUsSUFBaEJqRCxLQUFLVyxTQUdBLENBQUMsTUFBTyxRQUFRZ0gsU0FBUzNILEtBQUtpQixRQUNuQ2pCLEtBQUtVLFFBQVEsa0JBQW9CVixLQUFLVyxPQUd0Q1gsS0FBS1UsUUFBUSxtQkFBcUJWLEtBQUtXLFFBRXZCLFFBQWhCWCxLQUFLaUIsUUFBb0MsU0FBaEJqQixLQUFLaUIsU0FDOUJqQixLQUFLVSxRQUFRLGdCQUFrQixvQkFLbkMsSUFBSWtILEdBQU1DLEVBREs3SCxLQUFLWSxPQUNIWixLQUFLUyxJQUFJcUgsV0FBWSxDQUNsQzdHLE9BQVFqQixLQUFLaUIsT0FDYlAsUUFBU1YsS0FBS1UsUUFDZG1DLEtBQU1rRixLQUFLQyxVQUFVaEksS0FBSzZDLE1BQzFCd0IsT0FBUXJFLEtBQUtxRSxTQUNkbUQsS0FBS1MsTUFBT0wsSUFDWCxJQUFJMUMsRUFBSWdELEVBQUlDLEVBQ1osSUFBSUMsRUFBUSxLQUNSQyxFQUFPLEtBQ1BySCxFQUFRLEtBQ1JzSCxFQUFTVixFQUFJVSxPQUNiQyxFQUFhWCxFQUFJVyxXQUNyQixHQUFJWCxFQUFJWSxHQUFJLENBQ1IsR0FBb0IsU0FBaEJ4SSxLQUFLaUIsT0FBbUIsQ0FDeEIsTUFBTTRCLFFBQWErRSxFQUFJYSxPQUNWLEtBQVQ1RixJQUlBd0YsRUFEZ0MsYUFBM0JySSxLQUFLVSxRQUFnQixRQUdyQlYsS0FBS1UsUUFBZ0IsUUFDMUJWLEtBQUtVLFFBQWdCLE9BQUVpSCxTQUFTLG1DQUh6QjlFLEVBT0FrRixLQUFLVyxNQUFNN0YsR0FFMUIsQ0FDQSxNQUFNOEYsRUFBZ0QsUUFBakN6RCxFQUFLbEYsS0FBS1UsUUFBZ0IsY0FBc0IsSUFBUHdFLE9BQWdCLEVBQVNBLEVBQUcwRCxNQUFNLG1DQUMxRkMsRUFBMkQsUUFBM0NYLEVBQUtOLEVBQUlsSCxRQUFRbUQsSUFBSSx3QkFBcUMsSUFBUHFFLE9BQWdCLEVBQVNBLEVBQUc5RyxNQUFNLEtBQ3ZHdUgsR0FBZUUsR0FBZ0JBLEVBQWFwRyxPQUFTLElBQ3JEekIsRUFBUThILFNBQVNELEVBQWEsS0FJOUI3SSxLQUFLd0UsZUFBaUMsUUFBaEJ4RSxLQUFLaUIsUUFBb0JpQixNQUFNQyxRQUFRa0csS0FDekRBLEVBQUs1RixPQUFTLEdBQ2QyRixFQUFRLENBRUpXLEtBQU0sV0FDTkMsUUFBUyxtQkFBbUJYLEVBQUs1RixnRUFDakN3RyxLQUFNLEtBQ05DLFFBQVMseURBRWJiLEVBQU8sS0FDUHJILEVBQVEsS0FDUnNILEVBQVMsSUFDVEMsRUFBYSxrQkFHYkYsRUFEcUIsSUFBaEJBLEVBQUs1RixPQUNINEYsRUFBSyxHQUdMLEtBR25CLEtBQ0ssQ0FDRCxNQUFNeEYsUUFBYStFLEVBQUlhLE9BQ3ZCLElBQ0lMLEVBQVFMLEtBQUtXLE1BQU03RixHQUVmWCxNQUFNQyxRQUFRaUcsSUFBeUIsTUFBZlIsRUFBSVUsU0FDNUJELEVBQU8sR0FDUEQsRUFBUSxLQUNSRSxFQUFTLElBQ1RDLEVBQWEsS0FFckIsQ0FDQSxNQUFPWSxHQUVnQixNQUFmdkIsRUFBSVUsUUFBMkIsS0FBVHpGLEdBQ3RCeUYsRUFBUyxJQUNUQyxFQUFhLGNBR2JILEVBQVEsQ0FDSmMsUUFBU3JHLEVBR3JCLENBTUEsR0FMSXVGLEdBQVNwSSxLQUFLd0UsZ0JBQXlGLFFBQXRFMkQsRUFBS0MsYUFBcUMsRUFBU0EsRUFBTVksZUFBNEIsSUFBUGIsT0FBZ0IsRUFBU0EsRUFBR1IsU0FBUyxhQUNwSlMsRUFBUSxLQUNSRSxFQUFTLElBQ1RDLEVBQWEsTUFFYkgsR0FBU3BJLEtBQUtxSCxtQkFDZCxNQUFNLElBQUluQixFQUFpQnZFLFFBQVF5RyxFQUUzQyxDQVFBLE1BUDBCLENBQ3RCQSxRQUNBQyxPQUNBckgsUUFDQXNILFNBQ0FDLGdCQXFCUixPQWpCS3ZJLEtBQUtxSCxxQkFDTk8sRUFBTUEsRUFBSXdCLE1BQU9DLElBQ2IsSUFBSW5FLEVBQUlnRCxFQUFJQyxFQUNaLE1BQU8sQ0FDSEMsTUFBTyxDQUNIYyxRQUFTLEdBQXNGLFFBQWxGaEUsRUFBS21FLGFBQStDLEVBQVNBLEVBQVd2QyxZQUF5QixJQUFQNUIsRUFBZ0JBLEVBQUssaUJBQWlCbUUsYUFBK0MsRUFBU0EsRUFBV0gsVUFDaE5GLFFBQVMsR0FBdUYsUUFBbkZkLEVBQUttQixhQUErQyxFQUFTQSxFQUFXQyxhQUEwQixJQUFQcEIsRUFBZ0JBLEVBQUssS0FDN0hlLEtBQU0sR0FDTkYsS0FBTSxHQUFzRixRQUFsRlosRUFBS2tCLGFBQStDLEVBQVNBLEVBQVdOLFlBQXlCLElBQVBaLEVBQWdCQSxFQUFLLE1BRTdIRSxLQUFNLEtBQ05ySCxNQUFPLEtBQ1BzSCxPQUFRLEVBQ1JDLFdBQVksT0FJakJYLEVBQUlKLEtBQUtDLEVBQWFDLEVBQ2pDLENBT0EsT0FBQWpDLEdBRUksT0FBT3pGLElBQ1gsQ0F1QkEsYUFBQXVKLEdBQ0ksT0FBT3ZKLElBQ1gsRSxjQ3hOSkcsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFNdEQsTUFBTW9GLFVBQXVCOEQsTUFDekIsV0FBQWhKLENBQVlpSixHQUNSQyxNQUFNRCxFQUFRUCxTQUNkbEosS0FBSzhHLEtBQU8saUJBQ1o5RyxLQUFLZ0osUUFBVVMsRUFBUVQsUUFDdkJoSixLQUFLaUosS0FBT1EsRUFBUVIsS0FDcEJqSixLQUFLK0ksS0FBT1UsRUFBUVYsSUFDeEIsRUFFSjFJLEVBQUEsUUFBa0JxRixDLHNCQ2ZsQixJQUFJM0YsRUFBbUJDLE1BQVFBLEtBQUtELGlCQUFvQixTQUFVRSxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJQyxXQUFjRCxFQUFNLENBQUUsUUFBV0EsRUFDeEQsRUFDQUUsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsTUFBTTJGLEVBQThCbEcsRUFBZ0IsRUFBUSxNQUM1RCxNQUFNNkYsVUFBK0JLLEVBQTRCdEUsUUFTN0QsRUFBQWdJLENBQUcvRyxFQUFRdEMsR0FFUCxPQURBTixLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE1BQU10QyxLQUNwQ04sSUFDWCxDQU9BLEdBQUE0SixDQUFJaEgsRUFBUXRDLEdBRVIsT0FEQU4sS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxPQUFPdEMsS0FDckNOLElBQ1gsQ0FPQSxFQUFBNkosQ0FBR2pILEVBQVF0QyxHQUVQLE9BREFOLEtBQUtTLElBQUlnQixhQUFhdUYsT0FBT3BFLEVBQVEsTUFBTXRDLEtBQ3BDTixJQUNYLENBT0EsR0FBQThKLENBQUlsSCxFQUFRdEMsR0FFUixPQURBTixLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE9BQU90QyxLQUNyQ04sSUFDWCxDQU9BLEVBQUErSixDQUFHbkgsRUFBUXRDLEdBRVAsT0FEQU4sS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxNQUFNdEMsS0FDcENOLElBQ1gsQ0FPQSxHQUFBZ0ssQ0FBSXBILEVBQVF0QyxHQUVSLE9BREFOLEtBQUtTLElBQUlnQixhQUFhdUYsT0FBT3BFLEVBQVEsT0FBT3RDLEtBQ3JDTixJQUNYLENBT0EsSUFBQWlLLENBQUtySCxFQUFRc0gsR0FFVCxPQURBbEssS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxRQUFRc0gsS0FDdENsSyxJQUNYLENBT0EsU0FBQW1LLENBQVV2SCxFQUFRd0gsR0FFZCxPQURBcEssS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxjQUFjd0gsRUFBUzVJLEtBQUssU0FDMUR4QixJQUNYLENBT0EsU0FBQXFLLENBQVV6SCxFQUFRd0gsR0FFZCxPQURBcEssS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxjQUFjd0gsRUFBUzVJLEtBQUssU0FDMUR4QixJQUNYLENBT0EsS0FBQXNLLENBQU0xSCxFQUFRc0gsR0FFVixPQURBbEssS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxTQUFTc0gsS0FDdkNsSyxJQUNYLENBT0EsVUFBQXVLLENBQVczSCxFQUFRd0gsR0FFZixPQURBcEssS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxlQUFld0gsRUFBUzVJLEtBQUssU0FDM0R4QixJQUNYLENBT0EsVUFBQXdLLENBQVc1SCxFQUFRd0gsR0FFZixPQURBcEssS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxlQUFld0gsRUFBUzVJLEtBQUssU0FDM0R4QixJQUNYLENBYUEsRUFBQXlLLENBQUc3SCxFQUFRdEMsR0FFUCxPQURBTixLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE1BQU10QyxLQUNwQ04sSUFDWCxDQU9BLEdBQUc0QyxFQUFRZCxHQUNQLE1BQU00SSxFQUFnQnhJLE1BQU04QixLQUFLLElBQUlyQixJQUFJYixJQUNwQ1QsSUFBS3NKLEdBR1csaUJBQU5BLEdBQWtCLElBQUlDLE9BQU8sU0FBU3JKLEtBQUtvSixHQUMzQyxJQUFJQSxLQUVKLEdBQUdBLEtBRWJuSixLQUFLLEtBRVYsT0FEQXhCLEtBQUtTLElBQUlnQixhQUFhdUYsT0FBT3BFLEVBQVEsT0FBTzhILE1BQ3JDMUssSUFDWCxDQVFBLFFBQUE2SyxDQUFTakksRUFBUXRDLEdBY2IsTUFicUIsaUJBQVZBLEVBR1BOLEtBQUtTLElBQUlnQixhQUFhdUYsT0FBT3BFLEVBQVEsTUFBTXRDLEtBRXRDNEIsTUFBTUMsUUFBUTdCLEdBRW5CTixLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE9BQU90QyxFQUFNa0IsS0FBSyxTQUl2RHhCLEtBQUtTLElBQUlnQixhQUFhdUYsT0FBT3BFLEVBQVEsTUFBTW1GLEtBQUtDLFVBQVUxSCxNQUV2RE4sSUFDWCxDQVFBLFdBQUE4SyxDQUFZbEksRUFBUXRDLEdBYWhCLE1BWnFCLGlCQUFWQSxFQUVQTixLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE1BQU10QyxLQUV0QzRCLE1BQU1DLFFBQVE3QixHQUVuQk4sS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxPQUFPdEMsRUFBTWtCLEtBQUssU0FJdkR4QixLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE1BQU1tRixLQUFLQyxVQUFVMUgsTUFFdkROLElBQ1gsQ0FRQSxPQUFBK0ssQ0FBUW5JLEVBQVFtQixHQUVaLE9BREEvRCxLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE1BQU1tQixLQUNwQy9ELElBQ1gsQ0FTQSxRQUFBZ0wsQ0FBU3BJLEVBQVFtQixHQUViLE9BREEvRCxLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE9BQU9tQixLQUNyQy9ELElBQ1gsQ0FRQSxPQUFBaUwsQ0FBUXJJLEVBQVFtQixHQUVaLE9BREEvRCxLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE1BQU1tQixLQUNwQy9ELElBQ1gsQ0FTQSxRQUFBa0wsQ0FBU3RJLEVBQVFtQixHQUViLE9BREEvRCxLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE9BQU9tQixLQUNyQy9ELElBQ1gsQ0FTQSxhQUFBbUwsQ0FBY3ZJLEVBQVFtQixHQUVsQixPQURBL0QsS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxPQUFPbUIsS0FDckMvRCxJQUNYLENBUUEsUUFBQW9MLENBQVN4SSxFQUFRdEMsR0FTYixNQVJxQixpQkFBVkEsRUFFUE4sS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxNQUFNdEMsS0FJM0NOLEtBQUtTLElBQUlnQixhQUFhdUYsT0FBT3BFLEVBQVEsT0FBT3RDLEVBQU1rQixLQUFLLFNBRXBEeEIsSUFDWCxDQVdBLFVBQUFxTCxDQUFXekksRUFBUTBJLEdBQU8sT0FBRUMsRUFBTSxLQUFFQyxHQUFTLENBQUMsR0FDMUMsSUFBSUMsRUFBVyxHQUNGLFVBQVRELEVBQ0FDLEVBQVcsS0FFRyxXQUFURCxFQUNMQyxFQUFXLEtBRUcsY0FBVEQsSUFDTEMsRUFBVyxLQUVmLE1BQU1DLE9BQXdCekksSUFBWHNJLEVBQXVCLEdBQUssSUFBSUEsS0FFbkQsT0FEQXZMLEtBQUtTLElBQUlnQixhQUFhdUYsT0FBT3BFLEVBQVEsR0FBRzZJLE9BQWNDLEtBQWNKLEtBQzdEdEwsSUFDWCxDQVFBLEtBQUE0SSxDQUFNMEMsR0FJRixPQUhBbkwsT0FBT3lHLFFBQVEwRSxHQUFPdkUsUUFBUSxFQUFFbkUsRUFBUXRDLE1BQ3BDTixLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE1BQU10QyxPQUV4Q04sSUFDWCxDQWNBLEdBQUEyTCxDQUFJL0ksRUFBUWdKLEVBQVV0TCxHQUVsQixPQURBTixLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9wRSxFQUFRLE9BQU9nSixLQUFZdEwsS0FDakROLElBQ1gsQ0FnQkEsRUFBQTZMLENBQUdDLEdBQVMsYUFBRXJJLEVBQVksZ0JBQUVDLEVBQWtCRCxHQUFrQixDQUFDLEdBQzdELE1BQU1FLEVBQU1ELEVBQWtCLEdBQUdBLE9BQXVCLEtBRXhELE9BREExRCxLQUFLUyxJQUFJZ0IsYUFBYXVGLE9BQU9yRCxFQUFLLElBQUltSSxNQUMvQjlMLElBQ1gsQ0FjQSxNQUFBb0YsQ0FBT3hDLEVBQVFnSixFQUFVdEwsR0FFckIsT0FEQU4sS0FBS1MsSUFBSWdCLGFBQWF1RixPQUFPcEUsRUFBUSxHQUFHZ0osS0FBWXRMLEtBQzdDTixJQUNYLEVBRUpLLEVBQUEsUUFBa0J1RixDLHFHQ3hYbEIsSUFVSW1HLEVBVlksV0FJWixHQUFvQixvQkFBVEMsS0FBd0IsT0FBT0EsS0FDMUMsR0FBc0Isb0JBQVhDLE9BQTBCLE9BQU9BLE9BQzVDLFFBQXNCLElBQVgsRUFBQUMsRUFBMEIsT0FBTyxFQUFBQSxFQUM1QyxNQUFNLElBQUkxQyxNQUFNLGlDQUNwQixDQUVtQjJDLEdBRVosTUFBTXZMLEVBQVFtTCxFQUFhbkwsTUFFbEMsRUFBZW1MLEVBQWFuTCxNQUFNd0wsS0FBS0wsR0FFMUJNLEVBQVVOLEVBQWFNLFFBQ3ZCQyxFQUFVUCxFQUFhTyxRQUN2QkMsRUFBV1IsRUFBYVEsUSxHQ3BCakNDLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQnpKLElBQWpCMEosRUFDSCxPQUFPQSxFQUFhdE0sUUFHckIsSUFBSXVNLEVBQVNKLEVBQXlCRSxHQUFZLENBR2pEck0sUUFBUyxDQUFDLEdBT1gsT0FIQXdNLEVBQW9CSCxHQUFVSSxLQUFLRixFQUFPdk0sUUFBU3VNLEVBQVFBLEVBQU92TSxRQUFTb00sR0FHcEVHLEVBQU92TSxPQUNmLENDckJBb00sRUFBb0JNLEVBQUksQ0FBQzFNLEVBQVMyTSxLQUNqQyxJQUFJLElBQUlySixLQUFPcUosRUFDWFAsRUFBb0JRLEVBQUVELEVBQVlySixLQUFTOEksRUFBb0JRLEVBQUU1TSxFQUFTc0QsSUFDNUV4RCxPQUFPQyxlQUFlQyxFQUFTc0QsRUFBSyxDQUFFdUosWUFBWSxFQUFNckosSUFBS21KLEVBQVdySixNQ0ozRThJLEVBQW9CUCxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmaUIsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPbk4sTUFBUSxJQUFJb04sU0FBUyxjQUFiLEVBQ2hCLENBQUUsTUFBT0MsR0FDUixHQUFzQixpQkFBWHBCLE9BQXFCLE9BQU9BLE1BQ3hDLENBQ0EsQ0FQdUIsR0NBeEJRLEVBQW9CUSxFQUFJLENBQUNLLEVBQUtDLElBQVVwTixPQUFPcU4sVUFBVUMsZUFBZVgsS0FBS1EsRUFBS0MsR0NDbEZkLEVBQW9CaUIsRUFBS3JOLElBQ0gsb0JBQVhzTixRQUEwQkEsT0FBT0MsYUFDMUN6TixPQUFPQyxlQUFlQyxFQUFTc04sT0FBT0MsWUFBYSxDQUFFdE4sTUFBTyxXQUU3REgsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sS2ZMaEQsTUFBTXVOLFVBQXVCckUsTUFDaEMsV0FBQWhKLENBQVkwSSxFQUFTcEMsRUFBTyxpQkFBa0IyQyxHQUMxQ0MsTUFBTVIsR0FDTmxKLEtBQUs4RyxLQUFPQSxFQUNaOUcsS0FBS3lKLFFBQVVBLENBQ25CLEVBRUcsTUFBTXFFLFVBQTRCRCxFQUNyQyxXQUFBck4sQ0FBWWlKLEdBQ1JDLE1BQU0sZ0RBQWlELHNCQUF1QkQsRUFDbEYsRUFFRyxNQUFNc0UsVUFBNEJGLEVBQ3JDLFdBQUFyTixDQUFZaUosR0FDUkMsTUFBTSx5Q0FBMEMsc0JBQXVCRCxFQUMzRSxFQUVHLE1BQU11RSxVQUEyQkgsRUFDcEMsV0FBQXJOLENBQVlpSixHQUNSQyxNQUFNLCtDQUFnRCxxQkFBc0JELEVBQ2hGLEdBSUosU0FBVzNKLEdBQ1BBLEVBQW9CLElBQUksTUFDeEJBLEVBQTZCLGFBQUksaUJBQ2pDQSxFQUE2QixhQUFJLGlCQUNqQ0EsRUFBeUIsU0FBSSxhQUM3QkEsRUFBNkIsYUFBSSxpQkFDakNBLEVBQTZCLGFBQUksaUJBQ2pDQSxFQUEyQixXQUFJLGVBQy9CQSxFQUEyQixXQUFJLGVBQy9CQSxFQUF3QixRQUFJLFlBQzVCQSxFQUF3QixRQUFJLFlBQzVCQSxFQUF3QixRQUFJLFlBQzVCQSxFQUF3QixRQUFJLFlBQzVCQSxFQUF3QixRQUFJLFlBQzVCQSxFQUF3QixRQUFJLFlBQzVCQSxFQUF3QixRQUFJLFdBQy9CLENBaEJELENBZ0JHQSxJQUFtQkEsRUFBaUIsQ0FBQyxJZ0I3QmpDLE1BQU1tTyxFQUNULFdBQUF6TixDQUFZQyxHQUFLLFFBQUVDLEVBQVUsQ0FBQyxFQUFDLFlBQUV3TixFQUFXLE9BQUVDLEVBQVNyTyxFQUFlc08sS0FBUyxDQUFDLEdBQzVFcE8sS0FBS1MsSUFBTUEsRUFDWFQsS0FBS1UsUUFBVUEsRUFDZlYsS0FBS21PLE9BQVNBLEVBQ2RuTyxLQUFLWSxNQ2hCZSxDQUFDc04sSUFDekIsSUFBSXJHLEVBVUosT0FSSUEsRUFEQXFHLElBR3NCLG9CQUFWdE4sTUFDSCxJQUFJK0YsSUFBUyxzQ0FBK0JhLEtBQUssRUFBRzdGLFFBQVNmLEtBQVlBLEtBQVMrRixJQUdsRi9GLE9BRU4sSUFBSStGLElBQVNrQixLQUFVbEIsSURLYjBILENBQWFILEVBQzlCLENBS0EsT0FBQUksQ0FBUUMsR0FDSnZPLEtBQUtVLFFBQVE4TixjQUFnQixVQUFVRCxHQUMzQyxDQU1BLE1BQUFFLENBQU9DLEVBQWN2SixFQUFVLENBQUMsR0FDNUIsSUFBSUQsRUEvQjBDeUosRUFBU0MsRUFBWUMsRUFBR0MsRUFnQ3RFLE9BaEM4Q0gsRUFnQzdCM08sS0FoQ3NDNE8sT0FnQ2hDLEVBaEMrQ0UsRUFnQy9CLFlBQ25DLElBQ0ksTUFBTSxRQUFFcE8sRUFBTyxPQUFFTyxFQUFRNEIsS0FBTWtNLEdBQWlCNUosRUFDaEQsSUFBSTZKLEVBQVcsQ0FBQyxHQUNaLE9BQUViLEdBQVdoSixFQUNaZ0osSUFDREEsRUFBU25PLEtBQUttTyxRQUdsQixNQUFNMU4sRUFBTSxJQUFJK0YsSUFBSSxHQUFHeEcsS0FBS1MsT0FBT2lPLEtBS25DLElBQUk3TCxFQUpBc0wsR0FBcUIsUUFBWEEsSUFDVmEsRUFBUyxZQUFjYixFQUN2QjFOLEVBQUlnQixhQUFhQyxJQUFJLHNCQUF1QnlNLElBRzVDWSxJQUNFck8sSUFBWVAsT0FBT3FOLFVBQVVDLGVBQWVYLEtBQUtwTSxFQUFTLGtCQUFxQkEsS0FDNUQsb0JBQVR1TyxNQUF3QkYsYUFBd0JFLE1BQ3hERixhQUF3QkcsYUFHeEJGLEVBQVMsZ0JBQWtCLDJCQUMzQm5NLEVBQU9rTSxHQUVzQixpQkFBakJBLEdBRVpDLEVBQVMsZ0JBQWtCLGFBQzNCbk0sRUFBT2tNLEdBRWtCLG9CQUFiSSxVQUE0QkosYUFBd0JJLFNBR2hFdE0sRUFBT2tNLEdBSVBDLEVBQVMsZ0JBQWtCLG1CQUMzQm5NLEVBQU9rRixLQUFLQyxVQUFVK0csS0FHOUIsTUFBTUssUUFBaUJwUCxLQUFLWSxNQUFNSCxFQUFJcUgsV0FBWSxDQUM5QzdHLE9BQVFBLEdBQVUsT0FLbEJQLFFBQVNQLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUc0SSxHQUFXaFAsS0FBS1UsU0FBVUEsR0FDakZtQyxTQUNEdUcsTUFBT0MsSUFDTixNQUFNLElBQUl5RSxFQUFvQnpFLEtBRTVCZ0csRUFBZUQsRUFBUzFPLFFBQVFtRCxJQUFJLGlCQUMxQyxHQUFJd0wsR0FBaUMsU0FBakJBLEVBQ2hCLE1BQU0sSUFBSXRCLEVBQW9CcUIsR0FFbEMsSUFBS0EsRUFBUzVHLEdBQ1YsTUFBTSxJQUFJd0YsRUFBbUJvQixHQUVqQyxJQUNJL0csRUFEQWlILEdBQWdFLFFBQS9DcEssRUFBS2tLLEVBQVMxTyxRQUFRbUQsSUFBSSx1QkFBb0MsSUFBUHFCLEVBQWdCQSxFQUFLLGNBQWM5RCxNQUFNLEtBQUssR0FBR29FLE9Ba0I3SCxPQWZJNkMsRUFEaUIscUJBQWpCaUgsUUFDYUYsRUFBU0csT0FFQSw2QkFBakJELFFBQ1FGLEVBQVNJLE9BRUEsc0JBQWpCRixFQUNFRixFQUVlLHdCQUFqQkUsUUFDUUYsRUFBU0ssaUJBSVRMLEVBQVMzRyxPQUVuQixDQUFFSixPQUFNRCxNQUFPLEtBQU1nSCxXQUNoQyxDQUNBLE1BQU9oSCxHQUNILE1BQU8sQ0FDSEMsS0FBTSxLQUNORCxRQUNBZ0gsU0FBVWhILGFBQWlCNEYsR0FBc0I1RixhQUFpQjJGLEVBQzVEM0YsRUFBTXFCLGFBQ054RyxFQUVkLENBQ0osRUFySEcsS0FGZ0U0TCxPQWdDcEMsS0E5QmpCQSxFQUFJYSxVQUFVLFNBQVVDLEVBQVNDLEdBQy9DLFNBQVNDLEVBQVV2UCxHQUFTLElBQU13UCxFQUFLaEIsRUFBVWlCLEtBQUt6UCxHQUFTLENBQUUsTUFBTytNLEdBQUt1QyxFQUFPdkMsRUFBSSxDQUFFLENBQzFGLFNBQVMyQyxFQUFTMVAsR0FBUyxJQUFNd1AsRUFBS2hCLEVBQWlCLE1BQUV4TyxHQUFTLENBQUUsTUFBTytNLEdBQUt1QyxFQUFPdkMsRUFBSSxDQUFFLENBQzdGLFNBQVN5QyxFQUFLRyxHQUpsQixJQUFlM1AsRUFJYTJQLEVBQU9DLEtBQU9QLEVBQVFNLEVBQU8zUCxRQUoxQ0EsRUFJeUQyUCxFQUFPM1AsTUFKaERBLGFBQWlCdU8sRUFBSXZPLEVBQVEsSUFBSXVPLEVBQUUsU0FBVWMsR0FBV0EsRUFBUXJQLEVBQVEsSUFJakJrSCxLQUFLcUksRUFBV0csRUFBVyxDQUM3R0YsR0FBTWhCLEVBQVlBLEVBQVVxQixNQUFNeEIsRUFBU0MsR0FBYyxLQUFLbUIsT0FDbEUsRUFpSEEsRSxhRXZISixNQUFNLGdCQUNKakssRUFBZSxzQkFDZkQsRUFBcUIsdUJBQ3JCRCxFQUFzQiwwQkFDdEJ2QyxFQUF5QixpQkFDekJzQyxFQUFnQixlQUNoQkQsR0FDRSxFQ1BTLEVDRE4sV0FDSCxHQUF5QixvQkFBZDBLLFVBQ1AsT0FBT0EsVUFDWCxRQUFnQyxJQUFyQkMsT0FBT0QsVUFDZCxPQUFPQyxPQUFPRCxVQUNsQixRQUFnQyxJQUFyQm5FLE9BQU9tRSxVQUNkLE9BQU9uRSxPQUFPbUUsVUFDbEIsUUFBOEIsSUFBbkJwRSxLQUFLb0UsVUFDWixPQUFPcEUsS0FBS29FLFVBQ2hCLE1BQU0sSUFBSTVHLE1BQU0sbURBQ3BCLENEVHlCOEcsR0VLbEIsSUFBSUMsRUFPQSxFQVFBQyxFQVNBQyxFQUlBQyxFQzdCQUMsRURTQUMsR0FQWCxTQUFXTCxHQUNQQSxFQUFjQSxFQUEwQixXQUFJLEdBQUssYUFDakRBLEVBQWNBLEVBQW9CLEtBQUksR0FBSyxPQUMzQ0EsRUFBY0EsRUFBdUIsUUFBSSxHQUFLLFVBQzlDQSxFQUFjQSxFQUFzQixPQUFJLEdBQUssUUFDaEQsQ0FMRCxDQUtHQSxJQUFrQkEsRUFBZ0IsQ0FBQyxLQUUzQkssRUFNUixJQUFtQixFQUFpQixDQUFDLElBTGIsT0FBSSxTQUMzQkEsRUFBd0IsUUFBSSxVQUM1QkEsRUFBdUIsT0FBSSxTQUMzQkEsRUFBd0IsUUFBSSxVQUM1QkEsRUFBd0IsUUFBSSxVQUdoQyxTQUFXSixHQUNQQSxFQUFzQixNQUFJLFlBQzFCQSxFQUFzQixNQUFJLFlBQzFCQSxFQUFxQixLQUFJLFdBQ3pCQSxFQUFzQixNQUFJLFlBQzFCQSxFQUFzQixNQUFJLFlBQzFCQSxFQUE2QixhQUFJLGNBQ3BDLENBUEQsQ0FPR0EsSUFBbUJBLEVBQWlCLENBQUMsSUFFeEMsU0FBV0MsR0FDUEEsRUFBc0IsVUFBSSxXQUM3QixDQUZELENBRUdBLElBQWVBLEVBQWEsQ0FBQyxJQUVoQyxTQUFXQyxHQUNQQSxFQUE2QixXQUFJLGFBQ2pDQSxFQUF1QixLQUFJLE9BQzNCQSxFQUEwQixRQUFJLFVBQzlCQSxFQUF5QixPQUFJLFFBQ2hDLENBTEQsQ0FLR0EsSUFBcUJBLEVBQW1CLENBQUMsSUV0QzdCLE1BQU1HLEVBQ2pCLFdBQUFyUSxHQUNJUixLQUFLOFEsY0FBZ0IsQ0FDekIsQ0FDQSxNQUFBQyxDQUFPQyxFQUFZQyxHQUNmLE9BQUlELEVBQVd4USxjQUFnQjBPLFlBQ3BCK0IsRUFBU2pSLEtBQUtrUixjQUFjRixJQUc1QkMsRUFEZSxpQkFBZkQsRUFDU2pKLEtBQUtXLE1BQU1zSSxHQUVmLENBQUMsRUFDckIsQ0FDQSxhQUFBRSxDQUFjQyxHQUNWLE1BQU1DLEVBQU8sSUFBSUMsU0FBU0YsR0FDcEJHLEVBQVUsSUFBSUMsWUFDcEIsT0FBT3ZSLEtBQUt3UixpQkFBaUJMLEVBQVFDLEVBQU1FLEVBQy9DLENBQ0EsZ0JBQUFFLENBQWlCTCxFQUFRQyxFQUFNRSxHQUMzQixNQUFNRyxFQUFZTCxFQUFLTSxTQUFTLEdBQzFCQyxFQUFZUCxFQUFLTSxTQUFTLEdBQ2hDLElBQUlFLEVBQVM1UixLQUFLOFEsY0FBZ0IsRUFDbEMsTUFBTWUsRUFBUVAsRUFBUVAsT0FBT0ksRUFBT1csTUFBTUYsRUFBUUEsRUFBU0gsSUFDM0RHLEdBQWtCSCxFQUNsQixNQUFNTSxFQUFRVCxFQUFRUCxPQUFPSSxFQUFPVyxNQUFNRixFQUFRQSxFQUFTRCxJQUczRCxPQUZBQyxHQUFrQkQsRUFFWCxDQUFFSyxJQUFLLEtBQU1ILE1BQU9BLEVBQU9FLE1BQU9BLEVBQU9FLFFBRG5DbEssS0FBS1csTUFBTTRJLEVBQVFQLE9BQU9JLEVBQU9XLE1BQU1GLEVBQVFULEVBQU9lLGNBRXZFLEVDbEJXLE1BQU1DLEVBQ2pCLFdBQUEzUixDQUFZeVEsRUFBVW1CLEdBQ2xCcFMsS0FBS2lSLFNBQVdBLEVBQ2hCalIsS0FBS29TLFVBQVlBLEVBQ2pCcFMsS0FBS3FTLFdBQVFwUCxFQUNiakQsS0FBS3NTLE1BQVEsRUFDYnRTLEtBQUtpUixTQUFXQSxFQUNoQmpSLEtBQUtvUyxVQUFZQSxDQUNyQixDQUNBLEtBQUFHLEdBQ0l2UyxLQUFLc1MsTUFBUSxFQUNiRSxhQUFheFMsS0FBS3FTLE1BQ3RCLENBRUEsZUFBQUksR0FDSUQsYUFBYXhTLEtBQUtxUyxPQUNsQnJTLEtBQUtxUyxNQUFRSyxXQUFXLEtBQ3BCMVMsS0FBS3NTLE1BQVF0UyxLQUFLc1MsTUFBUSxFQUMxQnRTLEtBQUtpUixZQUNOalIsS0FBS29TLFVBQVVwUyxLQUFLc1MsTUFBUSxHQUNuQyxHRjFCSixTQUFXM0IsR0FDUEEsRUFBdUIsUUFBSSxVQUMzQkEsRUFBb0IsS0FBSSxPQUN4QkEsRUFBb0IsS0FBSSxPQUN4QkEsRUFBeUIsVUFBSSxZQUM3QkEsRUFBc0IsT0FBSSxTQUMxQkEsRUFBc0IsT0FBSSxTQUMxQkEsRUFBb0IsS0FBSSxPQUN4QkEsRUFBb0IsS0FBSSxPQUN4QkEsRUFBeUIsVUFBSSxZQUM3QkEsRUFBb0IsS0FBSSxPQUN4QkEsRUFBeUIsVUFBSSxZQUM3QkEsRUFBb0IsS0FBSSxPQUN4QkEsRUFBcUIsTUFBSSxRQUN6QkEsRUFBcUIsTUFBSSxRQUN6QkEsRUFBdUIsUUFBSSxVQUMzQkEsRUFBbUIsSUFBSSxNQUN2QkEsRUFBdUIsUUFBSSxVQUMzQkEsRUFBb0IsS0FBSSxPQUN4QkEsRUFBb0IsS0FBSSxPQUN4QkEsRUFBeUIsVUFBSSxZQUM3QkEsRUFBMkIsWUFBSSxjQUMvQkEsRUFBc0IsT0FBSSxTQUMxQkEsRUFBdUIsUUFBSSxVQUMzQkEsRUFBeUIsVUFBSSxXQUNoQyxDQXpCRCxDQXlCR0EsSUFBa0JBLEVBQWdCLENBQUMsSUFhL0IsTUFBTWdDLEVBQW9CLENBQUM3UixFQUFTOFIsRUFBUXpOLEVBQVUsQ0FBQyxLQUMxRCxJQUFJRCxFQUNKLE1BQU0yTixFQUF5QyxRQUE1QjNOLEVBQUtDLEVBQVEwTixpQkFBOEIsSUFBUDNOLEVBQWdCQSxFQUFLLEdBQzVFLE9BQU8vRSxPQUFPcUMsS0FBS29RLEdBQVF4USxPQUFPLENBQUNDLEVBQUt5USxLQUNwQ3pRLEVBQUl5USxHQUFXQyxFQUFjRCxFQUFTaFMsRUFBUzhSLEVBQVFDLEdBQ2hEeFEsR0FDUixDQUFDLElBZ0JLMFEsRUFBZ0IsQ0FBQ0MsRUFBWWxTLEVBQVM4UixFQUFRQyxLQUN2RCxNQUFNalEsRUFBUzlCLEVBQVFtUyxLQUFNM1EsR0FBTUEsRUFBRXdFLE9BQVNrTSxHQUN4Q0UsRUFBVXRRLGFBQXVDLEVBQVNBLEVBQU80SSxLQUNqRWxMLEVBQVFzUyxFQUFPSSxHQUNyQixPQUFJRSxJQUFZTCxFQUFVbEwsU0FBU3VMLEdBQ3hCQyxFQUFZRCxFQUFTNVMsR0FFekI4UyxFQUFLOVMsSUFlSDZTLEVBQWMsQ0FBQzNILEVBQU1sTCxLQUU5QixHQUF1QixNQUFuQmtMLEVBQUs2SCxPQUFPLEdBQVksQ0FDeEIsTUFBTUMsRUFBVzlILEVBQUtzRyxNQUFNLEVBQUd0RyxFQUFLL0ksUUFDcEMsT0FBTzhRLEVBQVFqVCxFQUFPZ1QsRUFDMUIsQ0FFQSxPQUFROUgsR0FDSixLQUFLbUYsRUFBYzZDLEtBQ2YsT0FBT0MsRUFBVW5ULEdBQ3JCLEtBQUtxUSxFQUFjK0MsT0FDbkIsS0FBSy9DLEVBQWNnRCxPQUNuQixLQUFLaEQsRUFBY2lELEtBQ25CLEtBQUtqRCxFQUFja0QsS0FDbkIsS0FBS2xELEVBQWNtRCxLQUNuQixLQUFLbkQsRUFBY29ELFFBQ25CLEtBQUtwRCxFQUFjcUQsSUFDZixPQUFPQyxFQUFTM1QsR0FDcEIsS0FBS3FRLEVBQWNwQixLQUNuQixLQUFLb0IsRUFBY3VELE1BQ2YsT0FBT0MsRUFBTzdULEdBQ2xCLEtBQUtxUSxFQUFjeUQsVUFDZixPQUFPQyxFQUFrQi9ULEdBQzdCLEtBQUtxUSxFQUFjMkQsUUFDbkIsS0FBSzNELEVBQWM0RCxLQUNuQixLQUFLNUQsRUFBYzZELFVBQ25CLEtBQUs3RCxFQUFjOEQsVUFDbkIsS0FBSzlELEVBQWMrRCxVQUNuQixLQUFLL0QsRUFBY2dFLE1BQ25CLEtBQUtoRSxFQUFjaUUsUUFDbkIsS0FBS2pFLEVBQWNsSSxLQUNuQixLQUFLa0ksRUFBY2tFLEtBQ25CLEtBQUtsRSxFQUFjbUUsWUFDbkIsS0FBS25FLEVBQWNvRSxPQUNuQixLQUFLcEUsRUFBY3FFLFFBQ25CLEtBQUtyRSxFQUFjc0UsVUFFbkIsUUFFSSxPQUFPN0IsRUFBSzlTLEtBR2xCOFMsRUFBUTlTLEdBQ0hBLEVBRUVtVCxFQUFhblQsSUFDdEIsT0FBUUEsR0FDSixJQUFLLElBQ0QsT0FBTyxFQUNYLElBQUssSUFDRCxPQUFPLEVBQ1gsUUFDSSxPQUFPQSxJQUdOMlQsRUFBWTNULElBQ3JCLEdBQXFCLGlCQUFWQSxFQUFvQixDQUMzQixNQUFNNFUsRUFBY0MsV0FBVzdVLEdBQy9CLElBQUs4VSxPQUFPQyxNQUFNSCxHQUNkLE9BQU9BLENBRWYsQ0FDQSxPQUFPNVUsR0FFRTZULEVBQVU3VCxJQUNuQixHQUFxQixpQkFBVkEsRUFDUCxJQUNJLE9BQU95SCxLQUFLVyxNQUFNcEksRUFDdEIsQ0FDQSxNQUFPOEgsR0FFSCxPQURBa04sUUFBUUMsSUFBSSxxQkFBcUJuTixLQUMxQjlILENBQ1gsQ0FFSixPQUFPQSxHQVlFaVQsRUFBVSxDQUFDalQsRUFBT2tMLEtBQzNCLEdBQXFCLGlCQUFWbEwsRUFDUCxPQUFPQSxFQUVYLE1BQU1rVixFQUFVbFYsRUFBTW1DLE9BQVMsRUFDekJnVCxFQUFhblYsRUFBTWtWLEdBR3pCLEdBQWtCLE1BRkFsVixFQUFNLElBRWdCLE1BQWZtVixFQUFvQixDQUN6QyxJQUFJQyxFQUNKLE1BQU1DLEVBQVVyVixFQUFNd1IsTUFBTSxFQUFHMEQsR0FFL0IsSUFDSUUsRUFBTTNOLEtBQUtXLE1BQU0sSUFBTWlOLEVBQVUsSUFDckMsQ0FDQSxNQUFPOU8sR0FFSDZPLEVBQU1DLEVBQVVBLEVBQVF2VSxNQUFNLEtBQU8sRUFDekMsQ0FDQSxPQUFPc1UsRUFBSXJVLElBQUt1VSxHQUFRekMsRUFBWTNILEVBQU1vSyxHQUM5QyxDQUNBLE9BQU90VixHQVNFK1QsRUFBcUIvVCxHQUNULGlCQUFWQSxFQUNBQSxFQUFNdVYsUUFBUSxJQUFLLEtBRXZCdlYsRUFFRXdWLEVBQW1CQyxJQUM1QixJQUFJdFYsRUFBTXNWLEVBR1YsT0FGQXRWLEVBQU1BLEVBQUlvVixRQUFRLE9BQVEsUUFDMUJwVixFQUFNQSxFQUFJb1YsUUFBUSxrREFBbUQsSUFDOURwVixFQUFJb1YsUUFBUSxPQUFRLEtHck5oQixNQUFNRyxFQVNqQixXQUFBeFYsQ0FBWXlWLEVBQVNsRSxFQUFPRSxFQUFVLENBQUMsRUFBR2lFLEVKTmYsS0lPdkJsVyxLQUFLaVcsUUFBVUEsRUFDZmpXLEtBQUsrUixNQUFRQSxFQUNiL1IsS0FBS2lTLFFBQVVBLEVBQ2ZqUyxLQUFLa1csUUFBVUEsRUFDZmxXLEtBQUttVyxNQUFPLEVBQ1puVyxLQUFLb1csa0JBQWVuVCxFQUNwQmpELEtBQUtnUyxJQUFNLEdBQ1hoUyxLQUFLcVcsYUFBZSxLQUNwQnJXLEtBQUtzVyxTQUFXLEdBQ2hCdFcsS0FBS3VXLFNBQVcsSUFDcEIsQ0FDQSxNQUFBQyxDQUFPTixHQUNIbFcsS0FBS2tXLFFBQVVBLEVBQ2ZsVyxLQUFLeVcsa0JBQ0x6VyxLQUFLZ1MsSUFBTSxHQUNYaFMsS0FBS3VXLFNBQVcsS0FDaEJ2VyxLQUFLcVcsYUFBZSxLQUNwQnJXLEtBQUttVyxNQUFPLEVBQ1puVyxLQUFLMFcsTUFDVCxDQUNBLElBQUFBLEdBQ1ExVyxLQUFLMlcsYUFBYSxhQUd0QjNXLEtBQUs0VyxlQUNMNVcsS0FBS21XLE1BQU8sRUFDWm5XLEtBQUtpVyxRQUFRWSxPQUFPNVUsS0FBSyxDQUNyQjRQLE1BQU83UixLQUFLaVcsUUFBUXBFLE1BQ3BCRSxNQUFPL1IsS0FBSytSLE1BQ1pFLFFBQVNqUyxLQUFLaVMsUUFDZEQsSUFBS2hTLEtBQUtnUyxJQUNWOEUsU0FBVTlXLEtBQUtpVyxRQUFRYyxhQUUvQixDQUNBLGFBQUFDLENBQWMvRSxHQUNWalMsS0FBS2lTLFFBQVU5UixPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBR3BHLEtBQUtpUyxTQUFVQSxFQUNsRSxDQUNBLE9BQUFnRixDQUFRM08sRUFBUTJJLEdBQ1osSUFBSS9MLEVBS0osT0FKSWxGLEtBQUsyVyxhQUFhck8sSUFDbEIySSxFQUFzQyxRQUE1Qi9MLEVBQUtsRixLQUFLcVcsb0JBQWlDLElBQVBuUixPQUFnQixFQUFTQSxFQUFHa0ssVUFFOUVwUCxLQUFLc1csU0FBU3JVLEtBQUssQ0FBRXFHLFNBQVEySSxhQUN0QmpSLElBQ1gsQ0FDQSxZQUFBNFcsR0FDUTVXLEtBQUtvVyxlQUdUcFcsS0FBS2dTLElBQU1oUyxLQUFLaVcsUUFBUVksT0FBT0ssV0FDL0JsWCxLQUFLdVcsU0FBV3ZXLEtBQUtpVyxRQUFRa0IsZ0JBQWdCblgsS0FBS2dTLEtBT2xEaFMsS0FBS2lXLFFBQVFtQixJQUFJcFgsS0FBS3VXLFNBQVUsQ0FBQyxFQU5mdEUsSUFDZGpTLEtBQUt5VyxrQkFDTHpXLEtBQUtxWCxpQkFDTHJYLEtBQUtxVyxhQUFlcEUsRUFDcEJqUyxLQUFLc1gsY0FBY3JGLEtBR3ZCalMsS0FBS29XLGFBQWUxRCxXQUFXLEtBQzNCMVMsS0FBS3VYLFFBQVEsVUFBVyxDQUFDLElBQzFCdlgsS0FBS2tXLFNBQ1osQ0FDQSxPQUFBcUIsQ0FBUWpQLEVBQVE4RyxHQUNScFAsS0FBS3VXLFVBQ0x2VyxLQUFLaVcsUUFBUXVCLFNBQVN4WCxLQUFLdVcsU0FBVSxDQUFFak8sU0FBUThHLFlBQ3ZELENBQ0EsT0FBQXFJLEdBQ0l6WCxLQUFLeVcsa0JBQ0x6VyxLQUFLcVgsZ0JBQ1QsQ0FDQSxlQUFBWixHQUNTelcsS0FBS3VXLFVBR1Z2VyxLQUFLaVcsUUFBUXlCLEtBQUsxWCxLQUFLdVcsU0FBVSxDQUFDLEVBQ3RDLENBQ0EsY0FBQWMsR0FDSTdFLGFBQWF4UyxLQUFLb1csY0FDbEJwVyxLQUFLb1csa0JBQWVuVCxDQUN4QixDQUNBLGFBQUFxVSxFQUFjLE9BQUVoUCxFQUFNLFNBQUU4RyxJQUNwQnBQLEtBQUtzVyxTQUNBbFIsT0FBUXVTLEdBQU1BLEVBQUVyUCxTQUFXQSxHQUMzQnZCLFFBQVM0USxHQUFNQSxFQUFFMUcsU0FBUzdCLEdBQ25DLENBQ0EsWUFBQXVILENBQWFyTyxHQUNULE9BQU90SSxLQUFLcVcsY0FBZ0JyVyxLQUFLcVcsYUFBYS9OLFNBQVdBLENBQzdELEVDOUZHLElBQUlzUCxFQ0VBQyxFQU9BQyxFQU9BQyxHRGZYLFNBQVdILEdBQ1BBLEVBQXNDLEtBQUksT0FDMUNBLEVBQXNDLEtBQUksT0FDMUNBLEVBQXVDLE1BQUksT0FDOUMsQ0FKRCxDQUlHQSxJQUFvQ0EsRUFBa0MsQ0FBQyxJQUMzRCxNQUFNSSxFQVFqQixXQUFBeFgsQ0FBWXlWLEVBQVNnQyxHQUNqQmpZLEtBQUtpVyxRQUFVQSxFQUNmalcsS0FBS2tZLE1BQVEsQ0FBQyxFQUNkbFksS0FBS21ZLGFBQWUsR0FDcEJuWSxLQUFLb1ksUUFBVSxLQUNmcFksS0FBS3FZLE9BQVMsQ0FDVkMsT0FBUSxPQUNSQyxRQUFTLE9BQ1RDLE9BQVEsUUFFWixNQUFNQyxHQUFVUixhQUFtQyxFQUFTQSxFQUFLUSxTQUFXLENBQ3hFUCxNQUFPLGlCQUNQUSxLQUFNLGlCQUVWMVksS0FBS2lXLFFBQVFtQixJQUFJcUIsRUFBT1AsTUFBTyxDQUFDLEVBQUlTLElBQ2hDLE1BQU0sT0FBRUwsRUFBTSxRQUFFQyxFQUFPLE9BQUVDLEdBQVd4WSxLQUFLcVksT0FDekNyWSxLQUFLb1ksUUFBVXBZLEtBQUtpVyxRQUFRYyxXQUM1Qi9XLEtBQUtrWSxNQUFRRixFQUFpQlksVUFBVTVZLEtBQUtrWSxNQUFPUyxFQUFVTCxFQUFRQyxHQUN0RXZZLEtBQUttWSxhQUFhcFIsUUFBUzJSLElBQ3ZCMVksS0FBS2tZLE1BQVFGLEVBQWlCYSxTQUFTN1ksS0FBS2tZLE1BQU9RLEVBQU1KLEVBQVFDLEtBRXJFdlksS0FBS21ZLGFBQWUsR0FDcEJLLE1BRUp4WSxLQUFLaVcsUUFBUW1CLElBQUlxQixFQUFPQyxLQUFNLENBQUMsRUFBSUEsSUFDL0IsTUFBTSxPQUFFSixFQUFNLFFBQUVDLEVBQU8sT0FBRUMsR0FBV3hZLEtBQUtxWSxPQUNyQ3JZLEtBQUs4WSxxQkFDTDlZLEtBQUttWSxhQUFhbFcsS0FBS3lXLElBR3ZCMVksS0FBS2tZLE1BQVFGLEVBQWlCYSxTQUFTN1ksS0FBS2tZLE1BQU9RLEVBQU1KLEVBQVFDLEdBQ2pFQyxPQUdSeFksS0FBS3NZLE9BQU8sQ0FBQzNVLEVBQUtvVixFQUFrQkMsS0FDaENoWixLQUFLaVcsUUFBUXVCLFNBQVMsV0FBWSxDQUM5QnpGLE1BQU8sT0FDUHBPLE1BQ0FvVixtQkFDQUMsbUJBR1JoWixLQUFLdVksUUFBUSxDQUFDNVUsRUFBS29WLEVBQWtCRSxLQUNqQ2paLEtBQUtpVyxRQUFRdUIsU0FBUyxXQUFZLENBQzlCekYsTUFBTyxRQUNQcE8sTUFDQW9WLG1CQUNBRSxvQkFHUmpaLEtBQUt3WSxPQUFPLEtBQ1J4WSxLQUFLaVcsUUFBUXVCLFNBQVMsV0FBWSxDQUFFekYsTUFBTyxVQUVuRCxDQVdBLGdCQUFPNkcsQ0FBVU0sRUFBY1AsRUFBVUwsRUFBUUMsR0FDN0MsTUFBTUwsRUFBUWxZLEtBQUttWixVQUFVRCxHQUN2QkUsRUFBbUJwWixLQUFLcVosZUFBZVYsR0FDdkNXLEVBQVEsQ0FBQyxFQUNUQyxFQUFTLENBQUMsRUF3QmhCLE9BdkJBdlosS0FBS3FCLElBQUk2VyxFQUFPLENBQUN2VSxFQUFLNlYsS0FDYkosRUFBaUJ6VixLQUNsQjRWLEVBQU81VixHQUFPNlYsS0FHdEJ4WixLQUFLcUIsSUFBSStYLEVBQWtCLENBQUN6VixFQUFLcVYsS0FDN0IsTUFBTUQsRUFBbUJiLEVBQU12VSxHQUMvQixHQUFJb1YsRUFBa0IsQ0FDbEIsTUFBTVUsRUFBa0JULEVBQWEzWCxJQUFLcVksR0FBTUEsRUFBRUMsY0FDNUNDLEVBQWtCYixFQUFpQjFYLElBQUtxWSxHQUFNQSxFQUFFQyxjQUNoREUsRUFBa0JiLEVBQWE1VCxPQUFRc1UsR0FBTUUsRUFBZ0JFLFFBQVFKLEVBQUVDLGNBQWdCLEdBQ3ZGVixFQUFnQkYsRUFBaUIzVCxPQUFRc1UsR0FBTUQsRUFBZ0JLLFFBQVFKLEVBQUVDLGNBQWdCLEdBQzNGRSxFQUFnQnBYLE9BQVMsSUFDekI2VyxFQUFNM1YsR0FBT2tXLEdBRWJaLEVBQWN4VyxPQUFTLElBQ3ZCOFcsRUFBTzVWLEdBQU9zVixFQUV0QixNQUVJSyxFQUFNM1YsR0FBT3FWLElBR2RoWixLQUFLNlksU0FBU1gsRUFBTyxDQUFFb0IsUUFBT0MsVUFBVWpCLEVBQVFDLEVBQzNELENBV0EsZUFBT00sQ0FBU1gsRUFBT1EsRUFBTUosRUFBUUMsR0FDakMsTUFBTSxNQUFFZSxFQUFLLE9BQUVDLEdBQVcsQ0FDdEJELE1BQU90WixLQUFLcVosZUFBZVgsRUFBS1ksT0FDaENDLE9BQVF2WixLQUFLcVosZUFBZVgsRUFBS2EsU0E4QnJDLE9BNUJLakIsSUFDREEsRUFBUyxRQUVSQyxJQUNEQSxFQUFVLFFBRWR2WSxLQUFLcUIsSUFBSWlZLEVBQU8sQ0FBQzNWLEVBQUtxVixLQUNsQixJQUFJOVQsRUFDSixNQUFNNlQsRUFBeUMsUUFBckI3VCxFQUFLZ1QsRUFBTXZVLFVBQXlCLElBQVB1QixFQUFnQkEsRUFBSyxHQUU1RSxHQURBZ1QsRUFBTXZVLEdBQU8zRCxLQUFLbVosVUFBVUgsR0FDeEJELEVBQWlCdFcsT0FBUyxFQUFHLENBQzdCLE1BQU1zWCxFQUFxQjdCLEVBQU12VSxHQUFLdEMsSUFBS3FZLEdBQU1BLEVBQUVDLGNBQzdDSyxFQUFlakIsRUFBaUIzVCxPQUFRc1UsR0FBTUssRUFBbUJELFFBQVFKLEVBQUVDLGNBQWdCLEdBQ2pHekIsRUFBTXZVLEdBQUtSLFdBQVc2VyxFQUMxQixDQUNBMUIsRUFBTzNVLEVBQUtvVixFQUFrQkMsS0FFbENoWixLQUFLcUIsSUFBSWtZLEVBQVEsQ0FBQzVWLEVBQUtzVixLQUNuQixJQUFJRixFQUFtQmIsRUFBTXZVLEdBQzdCLElBQUtvVixFQUNELE9BQ0osTUFBTWtCLEVBQXVCaEIsRUFBYzVYLElBQUtxWSxHQUFNQSxFQUFFQyxjQUN4RFosRUFBbUJBLEVBQWlCM1QsT0FBUXNVLEdBQU1PLEVBQXFCSCxRQUFRSixFQUFFQyxjQUFnQixHQUNqR3pCLEVBQU12VSxHQUFPb1YsRUFDYlIsRUFBUTVVLEVBQUtvVixFQUFrQkUsR0FDQyxJQUE1QkYsRUFBaUJ0VyxlQUNWeVYsRUFBTXZVLEtBRWR1VSxDQUNYLENBRUEsVUFBTzdXLENBQUlpTSxFQUFLNE0sR0FDWixPQUFPL1osT0FBT2dhLG9CQUFvQjdNLEdBQUtqTSxJQUFLc0MsR0FBUXVXLEVBQUt2VyxFQUFLMkosRUFBSTNKLElBQ3RFLENBd0JBLHFCQUFPMFYsQ0FBZW5CLEdBRWxCLE9BREFBLEVBQVFsWSxLQUFLbVosVUFBVWpCLEdBQ2hCL1gsT0FBT2dhLG9CQUFvQmpDLEdBQU85VixPQUFPLENBQUN1VyxFQUFVaFYsS0FDdkQsTUFBTTZWLEVBQVl0QixFQUFNdlUsR0FZeEIsT0FWSWdWLEVBQVNoVixHQURULFVBQVc2VixFQUNLQSxFQUFVWSxNQUFNL1ksSUFBS2daLElBQ2pDQSxFQUF1QixhQUFJQSxFQUFrQixlQUN0Q0EsRUFBa0IsZUFDbEJBLEVBQXVCLGFBQ3ZCQSxJQUlLYixFQUViYixHQUNSLENBQUMsRUFDUixDQUVBLGdCQUFPUSxDQUFVN0wsR0FDYixPQUFPdkYsS0FBS1csTUFBTVgsS0FBS0MsVUFBVXNGLEdBQ3JDLENBRUEsTUFBQWdMLENBQU9ySCxHQUNIalIsS0FBS3FZLE9BQU9DLE9BQVNySCxDQUN6QixDQUVBLE9BQUFzSCxDQUFRdEgsR0FDSmpSLEtBQUtxWSxPQUFPRSxRQUFVdEgsQ0FDMUIsQ0FFQSxNQUFBdUgsQ0FBT3ZILEdBQ0hqUixLQUFLcVksT0FBT0csT0FBU3ZILENBQ3pCLENBRUEsa0JBQUE2SCxHQUNJLE9BQVE5WSxLQUFLb1ksU0FBV3BZLEtBQUtvWSxVQUFZcFksS0FBS2lXLFFBQVFjLFVBQzFELEdDdE5KLFNBQVdjLEdBQ1BBLEVBQTRDLElBQUksSUFDaERBLEVBQStDLE9BQUksU0FDbkRBLEVBQStDLE9BQUksU0FDbkRBLEVBQStDLE9BQUksUUFDdEQsQ0FMRCxDQUtHQSxJQUEyQ0EsRUFBeUMsQ0FBQyxJQUV4RixTQUFXQyxHQUNQQSxFQUFpQyxVQUFJLFlBQ3JDQSxFQUFnQyxTQUFJLFdBQ3BDQSxFQUF3QyxpQkFBSSxtQkFDNUNBLEVBQThCLE9BQUksUUFDckMsQ0FMRCxDQUtHQSxJQUEwQkEsRUFBd0IsQ0FBQyxJQUV0RCxTQUFXQyxHQUNQQSxFQUFzQyxXQUFJLGFBQzFDQSxFQUFxQyxVQUFJLFlBQ3pDQSxFQUFrQyxPQUFJLFNBQ3RDQSxFQUF5QyxjQUFJLGVBQ2hELENBTEQsQ0FLR0EsSUFBOEJBLEVBQTRCLENBQUMsSUFPL0MsTUFBTXVDLEVBQ2pCLFdBQUE5WixDQUVBcVIsRUFBTzBJLEVBQVMsQ0FBRWhQLE9BQVEsQ0FBQyxHQUFLc0wsR0FDNUI3VyxLQUFLNlIsTUFBUUEsRUFDYjdSLEtBQUt1YSxPQUFTQSxFQUNkdmEsS0FBSzZXLE9BQVNBLEVBQ2Q3VyxLQUFLd2EsU0FBVyxDQUFDLEVBQ2pCeGEsS0FBS2tZLE1BQVEsRUFBZXVDLE9BQzVCemEsS0FBSzBhLFlBQWEsRUFDbEIxYSxLQUFLMmEsV0FBYSxHQUNsQjNhLEtBQUs0YSxTQUFXL0ksRUFBTWdFLFFBQVEsY0FBZSxJQUM3QzdWLEtBQUt1YSxPQUFPaFAsT0FBU3BMLE9BQU9pRyxPQUFPLENBQy9CeVUsVUFBVyxDQUFFQyxLQUFLLEVBQU85TyxNQUFNLEdBQy9CcU8sU0FBVSxDQUFFMVcsSUFBSyxJQUNqQm9YLFNBQVMsR0FDVlIsRUFBT2hQLFFBQ1Z2TCxLQUFLa1csUUFBVWxXLEtBQUs2VyxPQUFPWCxRQUMzQmxXLEtBQUtnYixTQUFXLElBQUloRixFQUFLaFcsS0FBTXdRLEVBQWVoUCxLQUFNeEIsS0FBS3VhLE9BQVF2YSxLQUFLa1csU0FDdEVsVyxLQUFLaWIsWUFBYyxJQUFJOUksRUFBTSxJQUFNblMsS0FBS2tiLHdCQUF5QmxiLEtBQUs2VyxPQUFPc0Usa0JBQzdFbmIsS0FBS2diLFNBQVMvRCxRQUFRLEtBQU0sS0FDeEJqWCxLQUFLa1ksTUFBUSxFQUFla0QsT0FDNUJwYixLQUFLaWIsWUFBWTFJLFFBQ2pCdlMsS0FBSzJhLFdBQVc1VCxRQUFTc1UsR0FBY0EsRUFBVTNFLFFBQ2pEMVcsS0FBSzJhLFdBQWEsS0FFdEIzYSxLQUFLc2IsU0FBUyxLQUNWdGIsS0FBS2liLFlBQVkxSSxRQUNqQnZTLEtBQUs2VyxPQUFPdEIsSUFBSSxVQUFXLFNBQVN2VixLQUFLNlIsU0FBUzdSLEtBQUsrVyxjQUN2RC9XLEtBQUtrWSxNQUFRLEVBQWV1QyxPQUM1QnphLEtBQUs2VyxPQUFPMEUsUUFBUXZiLFFBRXhCQSxLQUFLd2IsU0FBVUMsSUFDUHpiLEtBQUswYixjQUFnQjFiLEtBQUsyYixjQUc5QjNiLEtBQUs2VyxPQUFPdEIsSUFBSSxVQUFXLFNBQVN2VixLQUFLNlIsUUFBUzRKLEdBQ2xEemIsS0FBS2tZLE1BQVEsRUFBZTBELFFBQzVCNWIsS0FBS2liLFlBQVl4SSxxQkFFckJ6UyxLQUFLZ2IsU0FBUy9ELFFBQVEsVUFBVyxLQUN4QmpYLEtBQUs2YixlQUdWN2IsS0FBSzZXLE9BQU90QixJQUFJLFVBQVcsV0FBV3ZWLEtBQUs2UixRQUFTN1IsS0FBS2diLFNBQVM5RSxTQUNsRWxXLEtBQUtrWSxNQUFRLEVBQWUwRCxRQUM1QjViLEtBQUtpYixZQUFZeEkscUJBRXJCelMsS0FBS29YLElBQUk1RyxFQUFlc0wsTUFBTyxDQUFDLEVBQUcsQ0FBQzdKLEVBQVNELEtBQ3pDaFMsS0FBS3dYLFNBQVN4WCxLQUFLbVgsZ0JBQWdCbkYsR0FBTUMsS0FFN0NqUyxLQUFLcWEsU0FBVyxJQUFJckMsRUFBaUJoWSxNQUNyQ0EsS0FBSytiLHFCQUNEakcsRUFBZ0I5VixLQUFLNlcsT0FBT21GLFVBQVksaUJBQzVDaGMsS0FBSythLFFBQVUvYSxLQUFLdWEsT0FBT2hQLE9BQU93UCxVQUFXLENBQ2pELENBRUEsU0FBQWtCLENBQVVoTCxFQUFVaUYsRUFBVWxXLEtBQUtrVyxTQUMvQixJQUFJaFIsRUFBSWdELEVBSVIsR0FIS2xJLEtBQUs2VyxPQUFPcUYsZUFDYmxjLEtBQUs2VyxPQUFPc0YsVUFFWm5jLEtBQUtrWSxPQUFTLEVBQWV1QyxPQUFRLENBQ3JDLE1BQVFsUCxRQUFRLFVBQUVzUCxFQUFTLFNBQUVSLEVBQVVVLFFBQVNxQixJQUFpQnBjLEtBQUt1YSxPQUN0RXZhLEtBQUt3YixTQUFVbk8sR0FBTTRELGFBQTJDLEVBQVNBLEVBQVM4RyxFQUEwQnNFLGNBQWVoUCxJQUMzSHJOLEtBQUtzYixTQUFTLElBQU1ySyxhQUEyQyxFQUFTQSxFQUFTOEcsRUFBMEJ1RSxTQUMzRyxNQUFNQyxFQUFxQixDQUFDLEVBQ3RCaFIsRUFBUyxDQUNYc1AsWUFDQVIsV0FDQW1DLGlCQUFnSSxRQUE3R3RVLEVBQStDLFFBQXpDaEQsRUFBS2xGLEtBQUt3YSxTQUFTZ0Msd0JBQXFDLElBQVB0WCxPQUFnQixFQUFTQSxFQUFHN0QsSUFBS3FNLEdBQU1BLEVBQUV0SSxlQUE0QixJQUFQOEMsRUFBZ0JBLEVBQUssR0FDN0o2UyxRQUFTcUIsR0FFVHBjLEtBQUs2VyxPQUFPNEYsbUJBQ1pGLEVBQW1CRyxhQUFlMWMsS0FBSzZXLE9BQU80RixrQkFFbER6YyxLQUFLMmMsa0JBQWtCeGMsT0FBT2lHLE9BQU8sQ0FBRW1GLFVBQVVnUixJQUNqRHZjLEtBQUswYSxZQUFhLEVBQ2xCMWEsS0FBSzRjLFFBQVExRyxHQUNibFcsS0FBS2diLFNBQ0EvRCxRQUFRLEtBQU1oUCxPQUFTdVUsdUJBQ3hCLElBQUl0WCxFQUVKLEdBREFsRixLQUFLNlcsT0FBT3ZJLGVBQ2FyTCxJQUFyQnVaLEVBSUMsQ0FDRCxNQUFNSyxFQUF5QjdjLEtBQUt3YSxTQUFTZ0MsaUJBQ3ZDTSxFQUF1SSxRQUF4SDVYLEVBQUsyWCxhQUF1RSxFQUFTQSxFQUF1QnBhLGNBQTJCLElBQVB5QyxFQUFnQkEsRUFBSyxFQUNwSzZYLEVBQXNCLEdBQzVCLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRixFQUFhRSxJQUFLLENBQ2xDLE1BQU1DLEVBQXdCSixFQUF1QkcsSUFDN0M1WCxRQUFRLE1BQUUyTSxFQUFLLE9BQUVwUixFQUFNLE1BQUV1YyxFQUFLLE9BQUU5WCxJQUFjNlgsRUFDaERFLEVBQXVCWCxHQUFvQkEsRUFBaUJRLEdBQ2xFLElBQUlHLEdBQ0FBLEVBQXFCcEwsUUFBVUEsR0FDL0JvTCxFQUFxQnhjLFNBQVdBLEdBQ2hDd2MsRUFBcUJELFFBQVVBLEdBQy9CQyxFQUFxQi9YLFNBQVdBLEVBT2hDLE9BSEFwRixLQUFLb2QsY0FDTHBkLEtBQUtrWSxNQUFRLEVBQWUwRCxhQUM1QjNLLFNBQW9EQSxFQUFTOEcsRUFBMEJzRSxjQUFlLElBQUk3UyxNQUFNLHNFQUxoSHVULEVBQW9COWEsS0FBSzlCLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHNlcsR0FBd0IsQ0FBRUksR0FBSUYsRUFBcUJFLEtBUXBILENBR0EsT0FGQXJkLEtBQUt3YSxTQUFTZ0MsaUJBQW1CTyxPQUNqQzlMLEdBQVlBLEVBQVM4RyxFQUEwQnVGLFlBRW5ELENBNUJJck0sU0FBb0RBLEVBQVM4RyxFQUEwQnVGLGNBOEIxRnJHLFFBQVEsUUFBVTdPLElBQ25CcEksS0FBS2tZLE1BQVEsRUFBZTBELFFBQzVCM0ssU0FBb0RBLEVBQVM4RyxFQUEwQnNFLGNBQWUsSUFBSTdTLE1BQU16QixLQUFLQyxVQUFVN0gsT0FBTzJCLE9BQU9zRyxHQUFPNUcsS0FBSyxPQUFTLGFBR2pLeVYsUUFBUSxVQUFXLEtBQ3BCaEcsU0FBb0RBLEVBQVM4RyxFQUEwQndGLFlBRy9GLENBQ0EsT0FBT3ZkLElBQ1gsQ0FDQSxhQUFBd2QsR0FDSSxPQUFPeGQsS0FBS3FhLFNBQVNuQyxLQUN6QixDQUNBLFdBQU11RixDQUFNeEwsRUFBU2dHLEVBQU8sQ0FBQyxHQUN6QixhQUFhalksS0FBSzBXLEtBQUssQ0FDbkJsTCxLQUFNLFdBQ051RyxNQUFPLFFBQ1BFLFdBQ0RnRyxFQUFLL0IsU0FBV2xXLEtBQUtrVyxRQUM1QixDQUNBLGFBQU13SCxDQUFRekYsRUFBTyxDQUFDLEdBQ2xCLGFBQWFqWSxLQUFLMFcsS0FBSyxDQUNuQmxMLEtBQU0sV0FDTnVHLE1BQU8sV0FDUmtHLEVBQ1AsQ0FDQSxFQUFBMEYsQ0FBR25TLEVBQU1wRyxFQUFRNkwsR0FDYixPQUFPalIsS0FBS29YLElBQUk1TCxFQUFNcEcsRUFBUTZMLEVBQ2xDLENBVUEsVUFBTXlGLENBQUsvUCxFQUFNc1IsRUFBTyxDQUFDLEdBQ3JCLElBQUkvUyxFQUFJZ0QsRUFDUixHQUFLbEksS0FBSzRkLFlBQTRCLGNBQWRqWCxFQUFLNkUsS0FzQ3pCLE9BQU8sSUFBSWtFLFFBQVNDLElBQ2hCLElBQUl6SyxFQUFJZ0QsRUFBSUMsRUFDWixNQUFNbEcsRUFBT2pDLEtBQUs2ZCxNQUFNbFgsRUFBSzZFLEtBQU03RSxFQUFNc1IsRUFBSy9CLFNBQVdsVyxLQUFLa1csU0FDNUMsY0FBZHZQLEVBQUs2RSxPQUFnSyxRQUFySXJELEVBQWtGLFFBQTVFRCxFQUE0QixRQUF0QmhELEVBQUtsRixLQUFLdWEsY0FBMkIsSUFBUHJWLE9BQWdCLEVBQVNBLEVBQUdxRyxjQUEyQixJQUFQckQsT0FBZ0IsRUFBU0EsRUFBRzJTLGlCQUE4QixJQUFQMVMsT0FBZ0IsRUFBU0EsRUFBRzJTLE1BQ3pNbkwsRUFBUSxNQUVaMU4sRUFBS2dWLFFBQVEsS0FBTSxJQUFNdEgsRUFBUSxPQUNqQzFOLEVBQUtnVixRQUFRLFFBQVMsSUFBTXRILEVBQVEsVUFDcEMxTixFQUFLZ1YsUUFBUSxVQUFXLElBQU10SCxFQUFRLGdCQTlDSyxDQUMvQyxNQUFNLE1BQUVvQyxFQUFPRSxRQUFTNkwsR0FBcUJuWCxFQUl2Q3hCLEVBQVUsQ0FDWmxFLE9BQVEsT0FDUlAsUUFBUyxDQUNMOE4sY0FOY3hPLEtBQUs2VyxPQUFPNEYsaUJBQzVCLFVBQVV6YyxLQUFLNlcsT0FBTzRGLG1CQUN0QixHQUtFc0IsT0FBUS9kLEtBQUs2VyxPQUFPbUgsT0FBU2hlLEtBQUs2VyxPQUFPbUgsT0FBUyxHQUNsRCxlQUFnQixvQkFFcEJuYixLQUFNa0YsS0FBS0MsVUFBVSxDQUNqQmlXLFNBQVUsQ0FDTixDQUNJcE0sTUFBTzdSLEtBQUs0YSxTQUNaN0ksUUFDQUUsUUFBUzZMLEVBQ1QvQyxRQUFTL2EsS0FBSythLGFBSzlCLElBQ0ksTUFBTTNMLFFBQWlCcFAsS0FBS2tlLGtCQUFrQmxlLEtBQUsrYixxQkFBc0I1VyxFQUFpQyxRQUF2QkQsRUFBSytTLEVBQUsvQixlQUE0QixJQUFQaFIsRUFBZ0JBLEVBQUtsRixLQUFLa1csU0FFNUksYUFEZ0MsUUFBeEJoTyxFQUFLa0gsRUFBU3ZNLFlBQXlCLElBQVBxRixPQUFnQixFQUFTQSxFQUFHaVcsVUFDN0QvTyxFQUFTNUcsR0FBSyxLQUFPLE9BQ2hDLENBQ0EsTUFBT0osR0FDSCxNQUFtQixlQUFmQSxFQUFNdEIsS0FDQyxZQUdBLE9BRWYsQ0FDSixDQWFKLENBQ0EsaUJBQUE2VixDQUFrQjFLLEdBQ2RqUyxLQUFLZ2IsU0FBU2hFLGNBQWMvRSxFQUNoQyxDQVVBLFdBQUFtTCxDQUFZbEgsRUFBVWxXLEtBQUtrVyxTQUN2QmxXLEtBQUtrWSxNQUFRLEVBQWVrRyxRQUM1QixNQUFNQyxFQUFVLEtBQ1pyZSxLQUFLNlcsT0FBT3RCLElBQUksVUFBVyxTQUFTdlYsS0FBSzZSLFNBQ3pDN1IsS0FBS3dYLFNBQVNoSCxFQUFlOE4sTUFBTyxRQUFTdGUsS0FBSytXLGFBRXREL1csS0FBS2diLFNBQVN2RCxVQUNkLElBQUk4RyxFQUFZLEtBQ2hCLE9BQU8sSUFBSTdPLFFBQVNDLElBQ2hCNE8sRUFBWSxJQUFJdkksRUFBS2hXLEtBQU13USxFQUFlZ08sTUFBTyxDQUFDLEVBQUd0SSxHQUNyRHFJLEVBQ0t0SCxRQUFRLEtBQU0sS0FDZm9ILElBQ0ExTyxFQUFRLFFBRVBzSCxRQUFRLFVBQVcsS0FDcEJvSCxJQUNBMU8sRUFBUSxlQUVQc0gsUUFBUSxRQUFTLEtBQ2xCdEgsRUFBUSxXQUVaNE8sRUFBVTdILE9BQ0wxVyxLQUFLNGQsWUFDTlcsRUFBVWhILFFBQVEsS0FBTSxDQUFDLEtBRTlCa0gsUUFBUSxLQUNQRixTQUFzREEsRUFBVTlHLFdBRXhFLENBTUEsUUFBQWlILEdBQ0kxZSxLQUFLMmEsV0FBVzVULFFBQVM5RSxHQUFTQSxFQUFLd1YsV0FDdkN6WCxLQUFLaWIsYUFBZXpJLGFBQWF4UyxLQUFLaWIsWUFBWTVJLE9BQ2xEclMsS0FBS2diLFNBQVN2RCxTQUNsQixDQUVBLHVCQUFNeUcsQ0FBa0J6ZCxFQUFLMEUsRUFBUytRLEdBQ2xDLE1BQU15SSxFQUFhLElBQUlDLGdCQUNqQnZCLEVBQUszSyxXQUFXLElBQU1pTSxFQUFXRSxRQUFTM0ksR0FDMUM5RyxRQUFpQnBQLEtBQUs2VyxPQUFPalcsTUFBTUgsRUFBS04sT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUdqQixHQUFVLENBQUVkLE9BQVFzYSxFQUFXdGEsVUFFN0csT0FEQW1PLGFBQWE2SyxHQUNOak8sQ0FDWCxDQUVBLEtBQUF5TyxDQUFNOUwsRUFBT0UsRUFBU2lFLEVBQVVsVyxLQUFLa1csU0FDakMsSUFBS2xXLEtBQUswYSxXQUNOLEtBQU0sa0JBQWtCM0ksVUFBYy9SLEtBQUs2Uix1RUFFL0MsSUFBSXdKLEVBQVksSUFBSXJGLEVBQUtoVyxLQUFNK1IsRUFBT0UsRUFBU2lFLEdBUS9DLE9BUElsVyxLQUFLNGQsV0FDTHZDLEVBQVUzRSxRQUdWMkUsRUFBVXpFLGVBQ1Y1VyxLQUFLMmEsV0FBVzFZLEtBQUtvWixJQUVsQkEsQ0FDWCxDQVNBLFVBQUF5RCxDQUFXQyxFQUFROU0sRUFBUytNLEdBQ3hCLE9BQU8vTSxDQUNYLENBRUEsU0FBQWdOLENBQVVwTixHQUNOLE9BQU83UixLQUFLNlIsUUFBVUEsQ0FDMUIsQ0FFQSxRQUFBa0YsR0FDSSxPQUFPL1csS0FBS2diLFNBQVNoSixHQUN6QixDQUVBLFFBQUF3RixDQUFTaE0sRUFBTXlHLEVBQVNELEdBQ3BCLElBQUk5TSxFQUFJZ0QsRUFDUixNQUFNZ1gsRUFBWTFULEVBQUsyVCxxQkFDakIsTUFBRWIsRUFBSyxNQUFFbFcsRUFBSyxNQUFFb1csRUFBSyxLQUFFaGQsR0FBU2dQLEVBRXRDLEdBQUl3QixHQURXLENBQUNzTSxFQUFPbFcsRUFBT29XLEVBQU9oZCxHQUNuQnNZLFFBQVFvRixJQUFjLEdBQUtsTixJQUFRaFMsS0FBSytXLFdBQ3RELE9BRUosSUFBSXFJLEVBQWlCcGYsS0FBSzhlLFdBQVdJLEVBQVdqTixFQUFTRCxHQUN6RCxHQUFJQyxJQUFZbU4sRUFDWixLQUFNLDhFQUVOLENBQUMsU0FBVSxTQUFVLFVBQVV6WCxTQUFTdVgsR0FDRSxRQUF6Q2hhLEVBQUtsRixLQUFLd2EsU0FBU2dDLHdCQUFxQyxJQUFQdFgsR0FBeUJBLEVBQUdFLE9BQVFnSCxJQUNsRixJQUFJbEgsRUFBSWdELEVBQUlDLEVBQ1osTUFBK0UsT0FBL0MsUUFBdEJqRCxFQUFLa0gsRUFBS2hILGNBQTJCLElBQVBGLE9BQWdCLEVBQVNBLEVBQUc2TSxTQUNhLFFBQTNFNUosRUFBNEIsUUFBdEJELEVBQUtrRSxFQUFLaEgsY0FBMkIsSUFBUDhDLE9BQWdCLEVBQVNBLEVBQUc2SixhQUEwQixJQUFQNUosT0FBZ0IsRUFBU0EsRUFBR2dYLHVCQUF5QkQsSUFDL0k3ZCxJQUFLK0ssR0FBU0EsRUFBSzZFLFNBQVNtTyxFQUFnQnBOLElBR1gsUUFBbkM5SixFQUFLbEksS0FBS3dhLFNBQVMwRSxVQUErQixJQUFQaFgsR0FBeUJBLEVBQUc5QyxPQUFRZ0gsSUFDNUUsSUFBSWxILEVBQUlnRCxFQUFJQyxFQUFJZ0IsRUFBSWtXLEVBQUlDLEVBQ3hCLEdBQUksQ0FBQyxZQUFhLFdBQVksb0JBQW9CM1gsU0FBU3VYLEdBQVksQ0FDbkUsR0FBSSxPQUFROVMsRUFBTSxDQUNkLE1BQU1tVCxFQUFTblQsRUFBS2lSLEdBQ2RtQyxFQUFtQyxRQUF0QnRhLEVBQUtrSCxFQUFLaEgsY0FBMkIsSUFBUEYsT0FBZ0IsRUFBU0EsRUFBRzZNLE1BQzdFLE9BQVF3TixJQUNvQixRQUF0QnJYLEVBQUsrSixFQUFRd04sV0FBd0IsSUFBUHZYLE9BQWdCLEVBQVNBLEVBQUdQLFNBQVM0WCxNQUN0RCxNQUFkQyxJQUNJQSxhQUE2QyxFQUFTQSxFQUFVTCx3QkFDcEMsUUFBdkJoWCxFQUFLOEosRUFBUTVKLFlBQXlCLElBQVBGLE9BQWdCLEVBQVNBLEVBQUdxRCxLQUFLMlQscUJBQ2xGLENBQ0ssQ0FDRCxNQUFNSyxFQUFvSSxRQUF2SEgsRUFBd0UsUUFBbEVsVyxFQUFLaUQsYUFBbUMsRUFBU0EsRUFBS2hILGNBQTJCLElBQVArRCxPQUFnQixFQUFTQSxFQUFHNEksYUFBMEIsSUFBUHNOLE9BQWdCLEVBQVNBLEVBQUdGLG9CQUM5SyxNQUFzQixNQUFkSyxHQUNKQSxLQUEwRixRQUExRUYsRUFBS3JOLGFBQXlDLEVBQVNBLEVBQVFGLGFBQTBCLElBQVB1TixPQUFnQixFQUFTQSxFQUFHSCxvQkFDdEksQ0FDSixDQUVJLE9BQU8vUyxFQUFLWixLQUFLMlQsc0JBQXdCRCxJQUU5QzdkLElBQUsrSyxJQUNKLEdBQThCLGlCQUFuQmdULEdBQStCLFFBQVNBLEVBQWdCLENBQy9ELE1BQU1NLEVBQWtCTixFQUFlL1csTUFDakMsT0FBRTFILEVBQU0sTUFBRXVjLEVBQUssaUJBQUV5QyxFQUFnQixLQUFFblUsRUFBSSxPQUFFb1UsR0FBV0YsRUFDcERHLEVBQWtCLENBQ3BCbGYsT0FBUUEsRUFDUnVjLE1BQU9BLEVBQ1B5QyxpQkFBa0JBLEVBQ2xCRyxVQUFXdFUsRUFDWHVVLElBQUssQ0FBQyxFQUNOQyxJQUFLLENBQUMsRUFDTkosT0FBUUEsR0FFWlIsRUFBaUJqZixPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBR3laLEdBQWtCN2YsS0FBS2lnQixtQkFBbUJQLEdBQy9GLENBQ0F0VCxFQUFLNkUsU0FBU21PLEVBQWdCcE4sSUFHMUMsQ0FFQSxTQUFBMkosR0FDSSxPQUFPM2IsS0FBS2tZLFFBQVUsRUFBZXVDLE1BQ3pDLENBRUEsU0FBQXlGLEdBQ0ksT0FBT2xnQixLQUFLa1ksUUFBVSxFQUFla0QsTUFDekMsQ0FFQSxVQUFBUyxHQUNJLE9BQU83YixLQUFLa1ksUUFBVSxFQUFlaUksT0FDekMsQ0FFQSxVQUFBekUsR0FDSSxPQUFPMWIsS0FBS2tZLFFBQVUsRUFBZWtHLE9BQ3pDLENBRUEsZUFBQWpILENBQWdCbkYsR0FDWixNQUFPLGNBQWNBLEdBQ3pCLENBRUEsR0FBQW9GLENBQUk1TCxFQUFNcEcsRUFBUTZMLEdBQ2QsTUFBTWlPLEVBQVkxVCxFQUFLMlQsb0JBQ2pCaUIsRUFBVSxDQUNaNVUsS0FBTTBULEVBQ045WixPQUFRQSxFQUNSNkwsU0FBVUEsR0FRZCxPQU5JalIsS0FBS3dhLFNBQVMwRSxHQUNkbGYsS0FBS3dhLFNBQVMwRSxHQUFXamQsS0FBS21lLEdBRzlCcGdCLEtBQUt3YSxTQUFTMEUsR0FBYSxDQUFDa0IsR0FFekJwZ0IsSUFDWCxDQUVBLElBQUEwWCxDQUFLbE0sRUFBTXBHLEdBQ1AsTUFBTThaLEVBQVkxVCxFQUFLMlQsb0JBTXZCLE9BTEFuZixLQUFLd2EsU0FBUzBFLEdBQWFsZixLQUFLd2EsU0FBUzBFLEdBQVc5WixPQUFRZ0gsSUFDeEQsSUFBSWxILEVBQ0osU0FBK0IsUUFBcEJBLEVBQUtrSCxFQUFLWixZQUF5QixJQUFQdEcsT0FBZ0IsRUFBU0EsRUFBR2lhLHVCQUF5QkQsR0FDeEY1RSxFQUFnQitGLFFBQVFqVSxFQUFLaEgsT0FBUUEsTUFFdENwRixJQUNYLENBRUEsY0FBT3FnQixDQUFRQyxFQUFNQyxHQUNqQixHQUFJcGdCLE9BQU9xQyxLQUFLOGQsR0FBTTdkLFNBQVd0QyxPQUFPcUMsS0FBSytkLEdBQU05ZCxPQUMvQyxPQUFPLEVBRVgsSUFBSyxNQUFNK2QsS0FBS0YsRUFDWixHQUFJQSxFQUFLRSxLQUFPRCxFQUFLQyxHQUNqQixPQUFPLEVBR2YsT0FBTyxDQUNYLENBRUEscUJBQUF0RixHQUNJbGIsS0FBS2liLFlBQVl4SSxrQkFDYnpTLEtBQUs2VyxPQUFPcUYsZUFDWmxjLEtBQUs0YyxTQUViLENBTUEsUUFBQXRCLENBQVNySyxHQUNMalIsS0FBS29YLElBQUk1RyxFQUFlOE4sTUFBTyxDQUFDLEVBQUdyTixFQUN2QyxDQU1BLFFBQUF1SyxDQUFTdkssR0FDTGpSLEtBQUtvWCxJQUFJNUcsRUFBZXBJLE1BQU8sQ0FBQyxFQUFJcVQsR0FBV3hLLEVBQVN3SyxHQUM1RCxDQU1BLFFBQUFtQyxHQUNJLE9BQU81ZCxLQUFLNlcsT0FBT3FGLGVBQWlCbGMsS0FBS2tnQixXQUM3QyxDQUVBLE9BQUF0RCxDQUFRMUcsRUFBVWxXLEtBQUtrVyxTQUNmbFcsS0FBSzBiLGVBR1QxYixLQUFLNlcsT0FBTzRKLGdCQUFnQnpnQixLQUFLNlIsT0FDakM3UixLQUFLa1ksTUFBUSxFQUFlaUksUUFDNUJuZ0IsS0FBS2diLFNBQVN4RSxPQUFPTixHQUN6QixDQUVBLGtCQUFBK0osQ0FBbUJoTyxHQUNmLE1BQU15TyxFQUFVLENBQ1pYLElBQUssQ0FBQyxFQUNOQyxJQUFLLENBQUMsR0FRVixNQU5xQixXQUFqQi9OLEVBQVF6RyxNQUFzQyxXQUFqQnlHLEVBQVF6RyxPQUNyQ2tWLEVBQVFYLElBQU0sRUFBK0I5TixFQUFRblIsUUFBU21SLEVBQVFXLFNBRXJELFdBQWpCWCxFQUFRekcsTUFBc0MsV0FBakJ5RyxFQUFRekcsT0FDckNrVixFQUFRVixJQUFNLEVBQStCL04sRUFBUW5SLFFBQVNtUixFQUFRME8sYUFFbkVELENBQ1gsRUNuZkosTUFBTSxFQUFPLE9BT0UsTUFBTUUsRUFtQmpCLFdBQUFwZ0IsQ0FBWXdiLEVBQVU3VyxHQUNsQixJQUFJRCxFQUNKbEYsS0FBS3ljLGlCQUFtQixLQUN4QnpjLEtBQUtnZSxPQUFTLEtBQ2RoZSxLQUFLNmdCLFNBQVcsSUFBSTNlLE1BQ3BCbEMsS0FBS2djLFNBQVcsR0FDaEJoYyxLQUFLOGdCLGFBQWUsR0FFcEI5Z0IsS0FBS1UsUUFBVSxDQUFDLEVBQ2hCVixLQUFLdWEsT0FBUyxDQUFDLEVBQ2Z2YSxLQUFLa1csUVB0Q2tCLElPdUN2QmxXLEtBQUsrZ0Isb0JBQXNCLEtBQzNCL2dCLEtBQUtnaEIsb0JBQWlCL2QsRUFDdEJqRCxLQUFLaWhCLG9CQUFzQixLQUMzQmpoQixLQUFLa2hCLGtCQUFvQixFQUN6QmxoQixLQUFLZ1MsSUFBTSxFQUNYaFMsS0FBS21oQixPQUFTLEVBQ2RuaEIsS0FBS29oQixLQUFPLEtBQ1pwaEIsS0FBS3FoQixXQUFhLEdBQ2xCcmhCLEtBQUtzaEIsV0FBYSxJQUFJelEsRUFDdEI3USxLQUFLdWhCLHFCQUF1QixDQUN4QkMsS0FBTSxHQUNObEQsTUFBTyxHQUNQbFcsTUFBTyxHQUNQYyxRQUFTLElBRWJsSixLQUFLeWhCLFlBQWMsS0FNbkJ6aEIsS0FBSzBoQixjQUFpQnhULElBQ2xCLElBQUlyRyxFQVVKLE9BUklBLEVBREFxRyxJQUdzQixvQkFBVnROLE1BQ0gsSUFBSStGLElBQVMsc0NBQStCYSxLQUFLLEVBQUc3RixRQUFTZixLQUFZQSxLQUFTK0YsSUFHbEYvRixPQUVOLElBQUkrRixJQUFTa0IsS0FBVWxCLElBRWxDM0csS0FBS2djLFNBQVcsR0FBR0EsS0FBWXZMLEVBQVdrUixZQUMxQzNoQixLQUFLOGdCLGFBQWVoTCxFQUFnQmtHLElBQ2hDN1csYUFBeUMsRUFBU0EsRUFBUXljLFdBQzFENWhCLEtBQUs0aEIsVUFBWXpjLEVBQVF5YyxVQUd6QjVoQixLQUFLNGhCLFVBQVksTUFFakJ6YyxhQUF5QyxFQUFTQSxFQUFRb1YsVUFDMUR2YSxLQUFLdWEsT0FBU3BWLEVBQVFvVixTQUN0QnBWLGFBQXlDLEVBQVNBLEVBQVErUSxXQUMxRGxXLEtBQUtrVyxRQUFVL1EsRUFBUStRLFVBQ3ZCL1EsYUFBeUMsRUFBU0EsRUFBUWdjLFVBQzFEbmhCLEtBQUttaEIsT0FBU2hjLEVBQVFnYyxVQUNyQmhjLGFBQXlDLEVBQVNBLEVBQVEwYyxZQUFjMWMsYUFBeUMsRUFBU0EsRUFBUTJjLGNBQ25JOWhCLEtBQUs2aEIsU0FBVzFjLEVBQVEwYyxVQUFZMWMsRUFBUTJjLFVBQzVDOWhCLEtBQUt1YSxPQUFTcGEsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUdwRyxLQUFLdWEsUUFBUyxDQUFFdUgsVUFBVzloQixLQUFLNmhCLGFBRTlFMWMsYUFBeUMsRUFBU0EsRUFBUTRiLHVCQUMxRC9nQixLQUFLK2dCLG9CQUFzQjViLEVBQVE0YixxQkFDdkMsTUFBTXRFLEVBQStGLFFBQTNFdlgsRUFBS0MsYUFBeUMsRUFBU0EsRUFBUW9WLGNBQTJCLElBQVByVixPQUFnQixFQUFTQSxFQUFHNlksT0F1QnpJLEdBdEJJdEIsSUFDQXpjLEtBQUt5YyxpQkFBbUJBLEVBQ3hCemMsS0FBS2dlLE9BQVN2QixHQUVsQnpjLEtBQUttYixrQkFBb0JoVyxhQUF5QyxFQUFTQSxFQUFRZ1csa0JBQzdFaFcsRUFBUWdXLGlCQUNQN0ksR0FDUSxDQUFDLElBQU0sSUFBTSxJQUFNLEtBQU9BLEVBQVEsSUFBTSxJQUV2RHRTLEtBQUsraEIsUUFBVTVjLGFBQXlDLEVBQVNBLEVBQVE0YyxRQUNuRTVjLEVBQVE0YyxPQUNSLENBQUM5UCxFQUFTaEIsSUFDREEsRUFBU2xKLEtBQUtDLFVBQVVpSyxJQUV2Q2pTLEtBQUsrUSxRQUFVNUwsYUFBeUMsRUFBU0EsRUFBUTRMLFFBQ25FNUwsRUFBUTRMLE9BQ1IvUSxLQUFLc2hCLFdBQVd2USxPQUFPM0UsS0FBS3BNLEtBQUtzaEIsWUFDdkN0aEIsS0FBS2dpQixlQUFpQixJQUFJN1AsRUFBTWxLLFVBQzVCakksS0FBS2lpQixhQUNMamlCLEtBQUttYyxXQUNObmMsS0FBS21iLGtCQUNSbmIsS0FBS1ksTUFBUVosS0FBSzBoQixjQUFjdmMsYUFBeUMsRUFBU0EsRUFBUXZFLE9BQ3RGdUUsYUFBeUMsRUFBU0EsRUFBUStjLE9BQVEsQ0FDbEUsR0FBc0Isb0JBQVhqVyxTQUEyQkEsT0FBT2tXLE9BQ3pDLE1BQU0sSUFBSTNZLE1BQU0sK0JBRXBCeEosS0FBS2tpQixRQUFVL2MsYUFBeUMsRUFBU0EsRUFBUStjLFVBQVcsRUFDcEZsaUIsS0FBS29pQixVQUFZamQsYUFBeUMsRUFBU0EsRUFBUWlkLFNBQy9FLENBQ0FwaUIsS0FBS3loQixhQUFldGMsYUFBeUMsRUFBU0EsRUFBUXNjLGNBQWdCLElBQ2xHLENBSUEsT0FBQXRGLEdBQ0ksSUFBSW5jLEtBQUtvaEIsS0FBVCxDQU1BLEdBSEtwaEIsS0FBSzRoQixZQUNONWhCLEtBQUs0aEIsVUFBWSxJQUVoQjVoQixLQUFLNGhCLFVBQ04sTUFBTSxJQUFJcFksTUFBTSx5QkFFcEJ4SixLQUFLb2hCLEtBQU8sSUFBSXBoQixLQUFLNGhCLFVBQVU1aEIsS0FBS3FpQixlQUNwQ3JpQixLQUFLc2lCLGlCQVJMLENBU0osQ0FLQSxXQUFBRCxHQUNJLE9BQU9yaUIsS0FBS3VpQixjQUFjdmlCLEtBQUtnYyxTQUFVN2IsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHcEcsS0FBS3VhLE9BQVEsQ0FBRWlJLElQcEovRCxVT3FKZixDQU9BLFVBQUFQLENBQVdsWixFQUFNMFMsR0FDVHpiLEtBQUtvaEIsT0FDTHBoQixLQUFLb2hCLEtBQUtxQixRQUFVLFdBQWMsRUFDOUIxWixFQUNBL0ksS0FBS29oQixLQUFLOUMsTUFBTXZWLEVBQU0wUyxRQUF1Q0EsRUFBUyxJQUd0RXpiLEtBQUtvaEIsS0FBSzlDLFFBRWR0ZSxLQUFLb2hCLEtBQU8sS0FFWnBoQixLQUFLZ2hCLGdCQUFrQjBCLGNBQWMxaUIsS0FBS2doQixnQkFDMUNoaEIsS0FBS2dpQixlQUFlelAsUUFDcEJ2UyxLQUFLNmdCLFNBQVM5WixRQUFTa1AsR0FBWUEsRUFBUXlJLFlBRW5ELENBSUEsV0FBQWlFLEdBQ0ksT0FBTzNpQixLQUFLNmdCLFFBQ2hCLENBS0EsbUJBQU0rQixDQUFjM00sR0FDaEIsTUFBTTNOLFFBQWUyTixFQUFRbUgsY0FJN0IsT0FINkIsSUFBekJwZCxLQUFLNmdCLFNBQVNwZSxRQUNkekMsS0FBS2lpQixhQUVGM1osQ0FDWCxDQUlBLHVCQUFNdWEsR0FDRixNQUFNQyxRQUFpQnBULFFBQVFxVCxJQUFJL2lCLEtBQUs2Z0IsU0FBU3hmLElBQUs0VSxHQUFZQSxFQUFRbUgsZ0JBRzFFLE9BRkFwZCxLQUFLNmdCLFNBQVcsR0FDaEI3Z0IsS0FBS2lpQixhQUNFYSxDQUNYLENBTUEsR0FBQXZOLENBQUl5TixFQUFNQyxFQUFLNWEsR0FDWHJJLEtBQUttaEIsT0FBTzZCLEVBQU1DLEVBQUs1YSxFQUMzQixDQUlBLGVBQUE2YSxHQUNJLE9BQVFsakIsS0FBS29oQixNQUFRcGhCLEtBQUtvaEIsS0FBSytCLFlBQzNCLEtBQUs1UyxFQUFjNlMsV0FDZixPQUFPMVMsRUFBaUIyUyxXQUM1QixLQUFLOVMsRUFBY2lSLEtBQ2YsT0FBTzlRLEVBQWlCNFMsS0FDNUIsS0FBSy9TLEVBQWNnVCxRQUNmLE9BQU83UyxFQUFpQjhTLFFBQzVCLFFBQ0ksT0FBTzlTLEVBQWlCK1MsT0FFcEMsQ0FJQSxXQUFBdkgsR0FDSSxPQUFPbGMsS0FBS2tqQixvQkFBc0J4UyxFQUFpQjRTLElBQ3ZELENBQ0EsT0FBQXJOLENBQVFwRSxFQUFPMEksRUFBUyxDQUFFaFAsT0FBUSxDQUFDLElBQy9CLE1BQU1tWSxFQUFnQixZQUFZN1IsSUFDNUI4UixFQUFTM2pCLEtBQUsyaUIsY0FBYzFQLEtBQU0zUixHQUFNQSxFQUFFdVEsUUFBVTZSLEdBQzFELEdBQUtDLEVBTUQsT0FBT0EsRUFORSxDQUNULE1BQU1DLEVBQU8sSUFBSXRKLEVBQWdCLFlBQVl6SSxJQUFTMEksRUFBUXZhLE1BRTlELE9BREFBLEtBQUs2Z0IsU0FBUzVlLEtBQUsyaEIsR0FDWkEsQ0FDWCxDQUlKLENBTUEsSUFBQTNoQixDQUFLb0csR0FDRCxNQUFNLE1BQUV3SixFQUFLLE1BQUVFLEVBQUssUUFBRUUsRUFBTyxJQUFFRCxHQUFRM0osRUFDakM0SSxFQUFXLEtBQ2JqUixLQUFLK2hCLE9BQU8xWixFQUFPNEgsSUFDZixJQUFJL0ssRUFDaUIsUUFBcEJBLEVBQUtsRixLQUFLb2hCLFlBQXlCLElBQVBsYyxHQUF5QkEsRUFBR3dSLEtBQUt6RyxNQUd0RWpRLEtBQUt1VixJQUFJLE9BQVEsR0FBRzFELEtBQVNFLE1BQVVDLEtBQVFDLEdBQzNDalMsS0FBS2tjLGNBQ0xqTCxJQUdBalIsS0FBS3FoQixXQUFXcGYsS0FBS2dQLEVBRTdCLENBVUEsYUFBTTNDLENBQVFDLEVBQVEsTUFDbEIsSUFBSXNWLEVBQWN0VixHQUNidk8sS0FBS3loQixtQkFBc0J6aEIsS0FBS3loQixlQUNqQ3poQixLQUFLeWMsaUJBQ0x6YyxLQUFLeWMsa0JBQW9Cb0gsSUFDekI3akIsS0FBS3ljLGlCQUFtQm9ILEVBQ3hCN2pCLEtBQUs2Z0IsU0FBUzlaLFFBQVNrUCxJQUNuQixNQUFNaEUsRUFBVSxDQUNaeUssYUFBY21ILEVBQ2Q1YyxRUHZSVyx1Qk95UmY0YyxHQUFlNU4sRUFBUTBHLGtCQUFrQjFLLEdBQ3JDZ0UsRUFBUXlFLFlBQWN6RSxFQUFRaUssYUFDOUJqSyxFQUFRNEgsTUFBTXJOLEVBQWVrTSxhQUFjLENBQ3ZDQSxhQUFjbUgsTUFLbEMsQ0FJQSxtQkFBTUMsR0FDRixJQUFJNWUsRUFDSixHQUFLbEYsS0FBS2tjLGNBQVYsQ0FJQSxHQUFJbGMsS0FBS2loQixvQkFLTCxPQUpBamhCLEtBQUtpaEIsb0JBQXNCLEtBQzNCamhCLEtBQUt1VixJQUFJLFlBQWEsNERBQ3RCdlYsS0FBS2toQixrQkFBa0IsZ0JBQ0YsUUFBcEJoYyxFQUFLbEYsS0FBS29oQixZQUF5QixJQUFQbGMsR0FBeUJBLEVBQUdvWixNUDNTdEMsSU8yUzZELHFCQUdwRnRlLEtBQUtpaEIsb0JBQXNCamhCLEtBQUtrWCxXQUNoQ2xYLEtBQUtpQyxLQUFLLENBQ040UCxNQUFPLFVBQ1BFLE1BQU8sWUFDUEUsUUFBUyxDQUFDLEVBQ1ZELElBQUtoUyxLQUFLaWhCLHNCQUVkamhCLEtBQUtraEIsa0JBQWtCLGNBQ2pCbGhCLEtBQUtzTyxTQWhCWCxNQUZJdE8sS0FBS2toQixrQkFBa0IsZUFtQi9CLENBQ0EsV0FBQTZDLENBQVk5UyxHQUNSalIsS0FBS2toQixrQkFBb0JqUSxDQUM3QixDQUlBLGVBQUErUyxHQUNRaGtCLEtBQUtrYyxlQUFpQmxjLEtBQUtxaEIsV0FBVzVlLE9BQVMsSUFDL0N6QyxLQUFLcWhCLFdBQVd0YSxRQUFTa0ssR0FBYUEsS0FDdENqUixLQUFLcWhCLFdBQWEsR0FFMUIsQ0FNQSxRQUFBbkssR0FDSSxJQUFJK00sRUFBU2prQixLQUFLZ1MsSUFBTSxFQU94QixPQU5JaVMsSUFBV2prQixLQUFLZ1MsSUFDaEJoUyxLQUFLZ1MsSUFBTSxFQUdYaFMsS0FBS2dTLElBQU1pUyxFQUVSamtCLEtBQUtnUyxJQUFJbEssVUFDcEIsQ0FNQSxlQUFBMlksQ0FBZ0I1TyxHQUNaLElBQUlxUyxFQUFhbGtCLEtBQUs2Z0IsU0FBUzVOLEtBQU0zUixHQUFNQSxFQUFFdVEsUUFBVUEsSUFBVXZRLEVBQUU0ZSxhQUFlNWUsRUFBRXVhLGVBQ2hGcUksSUFDQWxrQixLQUFLdVYsSUFBSSxZQUFhLDRCQUE0QjFELE1BQ2xEcVMsRUFBVzlHLGNBRW5CLENBUUEsT0FBQTdCLENBQVF0RixHQUNKalcsS0FBSzZnQixTQUFXN2dCLEtBQUs2Z0IsU0FBU3piLE9BQVE5RCxHQUFNQSxFQUFFdVEsUUFBVW9FLEVBQVFwRSxNQUNwRSxDQU1BLGVBQUF5USxHQUNRdGlCLEtBQUtvaEIsT0FDTHBoQixLQUFLb2hCLEtBQUsrQyxXQUFhLGNBQ3ZCbmtCLEtBQUtvaEIsS0FBS2dELE9BQVMsSUFBTXBrQixLQUFLcWtCLGNBQzlCcmtCLEtBQUtvaEIsS0FBS2tELFFBQVdsYyxHQUFVcEksS0FBS3VrQixhQUFhbmMsR0FDakRwSSxLQUFLb2hCLEtBQUtvRCxVQUFhelMsR0FBVS9SLEtBQUt5a0IsZUFBZTFTLEdBQ3JEL1IsS0FBS29oQixLQUFLcUIsUUFBVzFRLEdBQVUvUixLQUFLMGtCLGFBQWEzUyxHQUV6RCxDQUVBLGNBQUEwUyxDQUFlRSxHQUNYM2tCLEtBQUsrUSxPQUFPNFQsRUFBV3RjLEtBQU80YSxJQUMxQixJQUFJLE1BQUVwUixFQUFLLE1BQUVFLEVBQUssUUFBRUUsRUFBTyxJQUFFRCxHQUFRaVIsRUFDdkIsWUFBVnBSLEdBQWlDLGNBQVZFLEdBQ3ZCL1IsS0FBS2toQixrQkFBd0MsTUFBdEIrQixFQUFJaFIsUUFBUTNKLE9BQWlCLEtBQU8sU0FFM0QwSixHQUFPQSxJQUFRaFMsS0FBS2loQixzQkFDcEJqaEIsS0FBS2loQixvQkFBc0IsTUFFL0JqaEIsS0FBS3VWLElBQUksVUFBVyxHQUFHdEQsRUFBUTNKLFFBQVUsTUFBTXVKLEtBQVNFLEtBQVVDLEdBQU8sSUFBTUEsRUFBTSxLQUFRLEtBQU1DLEdBQ25HL1AsTUFBTThCLEtBQUtoRSxLQUFLNmdCLFVBQ1h6YixPQUFRNlEsR0FBWUEsRUFBUWdKLFVBQVVwTixJQUN0QzlLLFFBQVNrUCxHQUFZQSxFQUFRdUIsU0FBU3pGLEVBQU9FLEVBQVNELElBQzNEaFMsS0FBS3VoQixxQkFBcUJyWSxRQUFRbkMsUUFBU2tLLEdBQWFBLEVBQVNnUyxLQUV6RSxDQUVBLFdBQUFvQixHQUNJcmtCLEtBQUt1VixJQUFJLFlBQWEsZ0JBQWdCdlYsS0FBS3FpQixpQkFDM0NyaUIsS0FBS2drQixrQkFDTGhrQixLQUFLZ2lCLGVBQWV6UCxRQUNmdlMsS0FBS2tpQixPQUlEbGlCLEtBQUs0a0IsV0FDTjVrQixLQUFLNmtCLHdCQUpUN2tCLEtBQUs4a0Isa0JBT1Q5a0IsS0FBS3VoQixxQkFBcUJDLEtBQUt6YSxRQUFTa0ssR0FBYUEsSUFDekQsQ0FFQSxlQUFBNlQsR0FDSTlrQixLQUFLZ2hCLGdCQUFrQjBCLGNBQWMxaUIsS0FBS2doQixnQkFDMUNoaEIsS0FBS2doQixlQUFpQitELFlBQVksSUFBTS9rQixLQUFLOGpCLGdCQUFpQjlqQixLQUFLK2dCLG9CQUN2RSxDQUVBLHFCQUFBOEQsR0FDUTdrQixLQUFLb2lCLFVBQ0xwaUIsS0FBS3VWLElBQUksU0FBVSw0QkFBNEJ2VixLQUFLb2lCLGFBR3BEcGlCLEtBQUt1VixJQUFJLFNBQVUsMkJBRXZCLE1BQU15UCxFQUFZaGxCLEtBQUtpbEIsaUJBQWlCamxCLEtBQUtvaUIsV0FDN0NwaUIsS0FBSzRrQixVQUFZLElBQUl6QyxPQUFPNkMsR0FDNUJobEIsS0FBSzRrQixVQUFVTixRQUFXbGMsSUFDdEJwSSxLQUFLdVYsSUFBSSxTQUFVLGVBQWdCbk4sRUFBTWMsU0FDekNsSixLQUFLNGtCLFVBQVVNLGFBRW5CbGxCLEtBQUs0a0IsVUFBVUosVUFBYXpTLElBQ0MsY0FBckJBLEVBQU0xSixLQUFLMEosT0FDWC9SLEtBQUs4akIsaUJBR2I5akIsS0FBSzRrQixVQUFVTyxZQUFZLENBQ3ZCcFQsTUFBTyxRQUNQcVQsU0FBVXBsQixLQUFLK2dCLHFCQUV2QixDQUVBLFlBQUEyRCxDQUFhM1MsR0FDVC9SLEtBQUt1VixJQUFJLFlBQWEsUUFBU3hELEdBQy9CL1IsS0FBS3FsQixvQkFDTHJsQixLQUFLZ2hCLGdCQUFrQjBCLGNBQWMxaUIsS0FBS2doQixnQkFDMUNoaEIsS0FBS2dpQixlQUFldlAsa0JBQ3BCelMsS0FBS3VoQixxQkFBcUJqRCxNQUFNdlgsUUFBU2tLLEdBQWFBLEVBQVNjLEdBQ25FLENBRUEsWUFBQXdTLENBQWFuYyxHQUNUcEksS0FBS3VWLElBQUksWUFBYSxHQUFHbk4sS0FDekJwSSxLQUFLcWxCLG9CQUNMcmxCLEtBQUt1aEIscUJBQXFCblosTUFBTXJCLFFBQVNrSyxHQUFhQSxFQUFTN0ksR0FDbkUsQ0FFQSxpQkFBQWlkLEdBQ0lybEIsS0FBSzZnQixTQUFTOVosUUFBU2tQLEdBQVlBLEVBQVF1QixTQUFTaEgsRUFBZXBJLE9BQ3ZFLENBRUEsYUFBQW1hLENBQWM5aEIsRUFBSzhaLEdBQ2YsR0FBbUMsSUFBL0JwYSxPQUFPcUMsS0FBSytYLEdBQVE5WCxPQUNwQixPQUFPaEMsRUFFWCxNQUFNNmtCLEVBQVM3a0IsRUFBSW1JLE1BQU0sTUFBUSxJQUFNLElBRXZDLE1BQU8sR0FBR25JLElBQU02a0IsSUFERixJQUFJQyxnQkFBZ0JoTCxJQUV0QyxDQUNBLGdCQUFBMEssQ0FBaUJ4a0IsR0FDYixJQUFJK2tCLEVBQ0osR0FBSS9rQixFQUNBK2tCLEVBQWEva0IsTUFFWixDQUNELE1BQU0rTyxFQUFPLElBQUlQLEtBQUssQ0FuZFosK0tBbWQ2QixDQUFFekQsS0FBTSwyQkFDL0NnYSxFQUFhaGYsSUFBSWlmLGdCQUFnQmpXLEVBQ3JDLENBQ0EsT0FBT2dXLENBQ1gsRUM5ZEcsTUFBTUUsVUFBcUJsYyxNQUM5QixXQUFBaEosQ0FBWTBJLEdBQ1JRLE1BQU1SLEdBQ05sSixLQUFLMmxCLGtCQUFtQixFQUN4QjNsQixLQUFLOEcsS0FBTyxjQUNoQixFQUVHLFNBQVM4ZSxFQUFleGQsR0FDM0IsTUFBd0IsaUJBQVZBLEdBQWdDLE9BQVZBLEdBQWtCLHFCQUFzQkEsQ0FDaEYsQ0FDTyxNQUFNeWQsVUFBd0JILEVBQ2pDLFdBQUFsbEIsQ0FBWTBJLEVBQVNaLEdBQ2pCb0IsTUFBTVIsR0FDTmxKLEtBQUs4RyxLQUFPLGtCQUNaOUcsS0FBS3NJLE9BQVNBLENBQ2xCLENBQ0EsTUFBQXdkLEdBQ0ksTUFBTyxDQUNIaGYsS0FBTTlHLEtBQUs4RyxLQUNYb0MsUUFBU2xKLEtBQUtrSixRQUNkWixPQUFRdEksS0FBS3NJLE9BRXJCLEVBRUcsTUFBTXlkLFVBQTRCTCxFQUNyQyxXQUFBbGxCLENBQVkwSSxFQUFTOGMsR0FDakJ0YyxNQUFNUixHQUNObEosS0FBSzhHLEtBQU8sc0JBQ1o5RyxLQUFLZ21CLGNBQWdCQSxDQUN6QixFQ3BCRyxNQUFNLEVBQWdCOVgsSUFDekIsSUFBSXJHLEVBVUosT0FSSUEsRUFEQXFHLElBR3NCLG9CQUFWdE4sTUFDSCxJQUFJK0YsSUFBUyxzQ0FBK0JhLEtBQUssRUFBRzdGLFFBQVNmLEtBQVlBLEtBQVMrRixJQUdsRi9GLE9BRU4sSUFBSStGLElBQVNrQixLQUFVbEIsSUFTckJzZixFQUFvQkMsSUFDN0IsR0FBSWhrQixNQUFNQyxRQUFRK2pCLEdBQ2QsT0FBT0EsRUFBSzdrQixJQUFLOGtCLEdBQU9GLEVBQWlCRSxJQUV4QyxHQUFvQixtQkFBVEQsR0FBdUJBLElBQVMvbEIsT0FBTytsQixHQUNuRCxPQUFPQSxFQUVYLE1BQU1qVyxFQUFTLENBQUMsRUFLaEIsT0FKQTlQLE9BQU95RyxRQUFRc2YsR0FBTW5mLFFBQVEsRUFBRXBELEVBQUtyRCxNQUNoQyxNQUFNOGxCLEVBQVN6aUIsRUFBSWtTLFFBQVEsZ0JBQWtCdlUsR0FBTUEsRUFBRStrQixjQUFjeFEsUUFBUSxRQUFTLEtBQ3BGNUYsRUFBT21XLEdBQVVILEVBQWlCM2xCLEtBRS9CMlAsR0N6Q1gsSUFBSSxFQUF3QyxTQUFVdEIsRUFBU0MsRUFBWUMsRUFBR0MsR0FFMUUsT0FBTyxJQUFLRCxJQUFNQSxFQUFJYSxVQUFVLFNBQVVDLEVBQVNDLEdBQy9DLFNBQVNDLEVBQVV2UCxHQUFTLElBQU13UCxFQUFLaEIsRUFBVWlCLEtBQUt6UCxHQUFTLENBQUUsTUFBTytNLEdBQUt1QyxFQUFPdkMsRUFBSSxDQUFFLENBQzFGLFNBQVMyQyxFQUFTMVAsR0FBUyxJQUFNd1AsRUFBS2hCLEVBQWlCLE1BQUV4TyxHQUFTLENBQUUsTUFBTytNLEdBQUt1QyxFQUFPdkMsRUFBSSxDQUFFLENBQzdGLFNBQVN5QyxFQUFLRyxHQUpsQixJQUFlM1AsRUFJYTJQLEVBQU9DLEtBQU9QLEVBQVFNLEVBQU8zUCxRQUoxQ0EsRUFJeUQyUCxFQUFPM1AsTUFKaERBLGFBQWlCdU8sRUFBSXZPLEVBQVEsSUFBSXVPLEVBQUUsU0FBVWMsR0FBV0EsRUFBUXJQLEVBQVEsSUFJakJrSCxLQUFLcUksRUFBV0csRUFBVyxDQUM3R0YsR0FBTWhCLEVBQVlBLEVBQVVxQixNQUFNeEIsRUFBU0MsR0FBYyxLQUFLbUIsT0FDbEUsRUFDSixFQUdBLE1BQU11VyxFQUFvQkMsR0FBUUEsRUFBSXRELEtBQU9zRCxFQUFJcmQsU0FBV3FkLEVBQUlDLG1CQUFxQkQsRUFBSW5lLE9BQVNMLEtBQUtDLFVBQVV1ZSxHQUMzR0UsRUFBYyxDQUFDcmUsRUFBT3dILEVBQVF6SyxJQUFZLE9BQVUsT0FBUSxPQUFRLEVBQVEsWUFDOUUsTUFBTXVoQixRRGI0Qy9YLE9Bc0JQLEVBdEJnQkMsT0FzQlIsRUF0Qm9CQyxPQXNCWixFQXRCZUMsRUFzQlAsWUFDbkUsTUFBd0Isb0JBQWJ2QyxnQkFFTyx1Q0FBZ0NBLFNBRTNDQSxRQUNYLEVBMUJXLElBQUtzQyxJQUFNQSxFQUFJYSxVQUFVLFNBQVVDLEVBQVNDLEdBQy9DLFNBQVNDLEVBQVV2UCxHQUFTLElBQU13UCxFQUFLaEIsRUFBVWlCLEtBQUt6UCxHQUFTLENBQUUsTUFBTytNLEdBQUt1QyxFQUFPdkMsRUFBSSxDQUFFLENBQzFGLFNBQVMyQyxFQUFTMVAsR0FBUyxJQUFNd1AsRUFBS2hCLEVBQWlCLE1BQUV4TyxHQUFTLENBQUUsTUFBTytNLEdBQUt1QyxFQUFPdkMsRUFBSSxDQUFFLENBQzdGLFNBQVN5QyxFQUFLRyxHQUpsQixJQUFlM1AsRUFJYTJQLEVBQU9DLEtBQU9QLEVBQVFNLEVBQU8zUCxRQUoxQ0EsRUFJeUQyUCxFQUFPM1AsTUFKaERBLGFBQWlCdU8sRUFBSXZPLEVBQVEsSUFBSXVPLEVBQUUsU0FBVWMsR0FBV0EsRUFBUXJQLEVBQVEsSUFJakJrSCxLQUFLcUksRUFBV0csRUFBVyxDQUM3R0YsR0FBTWhCLEVBQVlBLEVBQVVxQixNQUFNeEIsRUFBU0MsR0FBYyxLQUFLbUIsT0FDbEUsSUFQd0MsSUFBVXBCLEVBQVNDLEVBQVlDLEVBQUdDLEVDY3RFMUcsYUFBaUJzZSxLQUFTdmhCLGFBQXlDLEVBQVNBLEVBQVF3aEIsZUFDcEZ2ZSxFQUNLbUgsT0FDQS9ILEtBQU0rZSxJQUNQM1csRUFBTyxJQUFJaVcsRUFBZ0JTLEVBQWlCQyxHQUFNbmUsRUFBTUUsUUFBVSxRQUVqRWMsTUFBT21kLElBQ1IzVyxFQUFPLElBQUltVyxFQUFvQk8sRUFBaUJDLEdBQU1BLE1BSTFEM1csRUFBTyxJQUFJbVcsRUFBb0JPLEVBQWlCbGUsR0FBUUEsR0FFaEUsR0FZQSxTQUFTd2UsR0FBZUMsRUFBUzVsQixFQUFRUixFQUFLMEUsRUFBUzJoQixFQUFZamtCLEdBQy9ELE9BQU8sRUFBVTdDLFVBQU0sT0FBUSxFQUFRLFlBQ25DLE9BQU8sSUFBSTBQLFFBQVEsQ0FBQ0MsRUFBU0MsS0FDekJpWCxFQUFRcG1CLEVBZE0sRUFBQ1EsRUFBUWtFLEVBQVMyaEIsRUFBWWprQixLQUNwRCxNQUFNMFgsRUFBUyxDQUFFdFosU0FBUVAsU0FBVXlFLGFBQXlDLEVBQVNBLEVBQVF6RSxVQUFZLENBQUMsR0FDMUcsTUFBZSxRQUFYTyxFQUNPc1osR0FFWEEsRUFBTzdaLFFBQVVQLE9BQU9pRyxPQUFPLENBQUUsZUFBZ0Isb0JBQXNCakIsYUFBeUMsRUFBU0EsRUFBUXpFLFNBQzdIbUMsSUFDQTBYLEVBQU8xWCxLQUFPa0YsS0FBS0MsVUFBVW5GLElBRTFCMUMsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUdtVSxHQUFTdU0sS0FLM0JDLENBQWtCOWxCLEVBQVFrRSxFQUFTMmhCLEVBQVlqa0IsSUFDdkQyRSxLQUFNeUksSUFDUCxJQUFLQSxFQUFPekgsR0FDUixNQUFNeUgsRUFDVixPQUFJOUssYUFBeUMsRUFBU0EsRUFBUXdoQixlQUNuRDFXLEVBQ0pBLEVBQU9WLFNBRWIvSCxLQUFNYSxHQUFTc0gsRUFBUXRILElBQ3ZCZSxNQUFPaEIsR0FBVXFlLEVBQVlyZSxFQUFPd0gsRUFBUXpLLEtBRXpELEVBQ0osQ0FDTyxTQUFTdEIsR0FBSWdqQixFQUFTcG1CLEVBQUswRSxFQUFTMmhCLEdBQ3ZDLE9BQU8sRUFBVTltQixVQUFNLE9BQVEsRUFBUSxZQUNuQyxPQUFPNG1CLEdBQWVDLEVBQVMsTUFBT3BtQixFQUFLMEUsRUFBUzJoQixFQUN4RCxFQUNKLENBQ08sU0FBU0UsR0FBS0gsRUFBU3BtQixFQUFLb0MsRUFBTXNDLEVBQVMyaEIsR0FDOUMsT0FBTyxFQUFVOW1CLFVBQU0sT0FBUSxFQUFRLFlBQ25DLE9BQU80bUIsR0FBZUMsRUFBUyxPQUFRcG1CLEVBQUswRSxFQUFTMmhCLEVBQVlqa0IsRUFDckUsRUFDSixDQVdPLFNBQVNva0IsR0FBT0osRUFBU3BtQixFQUFLb0MsRUFBTXNDLEVBQVMyaEIsR0FDaEQsT0FBTyxFQUFVOW1CLFVBQU0sT0FBUSxFQUFRLFlBQ25DLE9BQU80bUIsR0FBZUMsRUFBUyxTQUFVcG1CLEVBQUswRSxFQUFTMmhCLEVBQVlqa0IsRUFDdkUsRUFDSixDQy9FQSxJQUFJLEdBQXdDLFNBQVU4TCxFQUFTQyxFQUFZQyxFQUFHQyxHQUUxRSxPQUFPLElBQUtELElBQU1BLEVBQUlhLFVBQVUsU0FBVUMsRUFBU0MsR0FDL0MsU0FBU0MsRUFBVXZQLEdBQVMsSUFBTXdQLEVBQUtoQixFQUFVaUIsS0FBS3pQLEdBQVMsQ0FBRSxNQUFPK00sR0FBS3VDLEVBQU92QyxFQUFJLENBQUUsQ0FDMUYsU0FBUzJDLEVBQVMxUCxHQUFTLElBQU13UCxFQUFLaEIsRUFBaUIsTUFBRXhPLEdBQVMsQ0FBRSxNQUFPK00sR0FBS3VDLEVBQU92QyxFQUFJLENBQUUsQ0FDN0YsU0FBU3lDLEVBQUtHLEdBSmxCLElBQWUzUCxFQUlhMlAsRUFBT0MsS0FBT1AsRUFBUU0sRUFBTzNQLFFBSjFDQSxFQUl5RDJQLEVBQU8zUCxNQUpoREEsYUFBaUJ1TyxFQUFJdk8sRUFBUSxJQUFJdU8sRUFBRSxTQUFVYyxHQUFXQSxFQUFRclAsRUFBUSxJQUlqQmtILEtBQUtxSSxFQUFXRyxFQUFXLENBQzdHRixHQUFNaEIsRUFBWUEsRUFBVXFCLE1BQU14QixFQUFTQyxHQUFjLEtBQUttQixPQUNsRSxFQUNKLEVBSUEsTUFBTW1YLEdBQXlCLENBQzNCcGpCLE1BQU8sSUFDUDhOLE9BQVEsRUFDUnVWLE9BQVEsQ0FDSnZrQixPQUFRLE9BQ1JVLE1BQU8sUUFHVDhqQixHQUF1QixDQUN6QkMsYUFBYyxPQUNkQyxZQUFhLDJCQUNieGtCLFFBQVEsR0FFRyxNQUFNeWtCLEdBQ2pCLFdBQUEvbUIsQ0FBWUMsRUFBS0MsRUFBVSxDQUFDLEVBQUc4bUIsRUFBVTVtQixHQUNyQ1osS0FBS1MsSUFBTUEsRUFDWFQsS0FBS1UsUUFBVUEsRUFDZlYsS0FBS3duQixTQUFXQSxFQUNoQnhuQixLQUFLWSxNQUFRLEVBQWFBLEVBQzlCLENBUUEsY0FBQTZtQixDQUFleG1CLEVBQVF5bUIsRUFBTUMsRUFBVUMsR0FDbkMsT0FBTyxHQUFVNW5CLFVBQU0sT0FBUSxFQUFRLFlBQ25DLElBQ0ksSUFBSTZDLEVBQ0osTUFBTXNDLEVBQVVoRixPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBR2doQixJQUF1QlEsR0FDdkUsSUFBSWxuQixFQUFVUCxPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBR3BHLEtBQUtVLFNBQXNCLFNBQVhPLEdBQXFCLENBQUUsV0FBWTRtQixPQUFPMWlCLEVBQVFyQyxVQUNoSCxNQUFNZ2xCLEVBQVczaUIsRUFBUTJpQixTQUNMLG9CQUFUN1ksTUFBd0IwWSxhQUFvQjFZLE1BQ25EcE0sRUFBTyxJQUFJc00sU0FDWHRNLEVBQUttRSxPQUFPLGVBQWdCN0IsRUFBUWtpQixjQUNoQ1MsR0FDQWpsQixFQUFLbUUsT0FBTyxXQUFZaEgsS0FBSytuQixlQUFlRCxJQUVoRGpsQixFQUFLbUUsT0FBTyxHQUFJMmdCLElBRVMsb0JBQWJ4WSxVQUE0QndZLGFBQW9CeFksVUFDNUR0TSxFQUFPOGtCLEVBQ1A5a0IsRUFBS21FLE9BQU8sZUFBZ0I3QixFQUFRa2lCLGNBQ2hDUyxHQUNBamxCLEVBQUttRSxPQUFPLFdBQVloSCxLQUFLK25CLGVBQWVELE1BSWhEamxCLEVBQU84a0IsRUFDUGpuQixFQUFRLGlCQUFtQixXQUFXeUUsRUFBUWtpQixlQUM5QzNtQixFQUFRLGdCQUFrQnlFLEVBQVFtaUIsWUFDOUJRLElBQ0FwbkIsRUFBUSxjQUFnQlYsS0FBS2dvQixTQUFTaG9CLEtBQUsrbkIsZUFBZUQsT0FHOURGLGFBQWlELEVBQVNBLEVBQVlsbkIsV0FDdEVBLEVBQVVQLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHMUYsR0FBVWtuQixFQUFZbG5CLFVBRXBFLE1BQU11bkIsRUFBWWpvQixLQUFLa29CLG9CQUFvQlIsR0FDckNTLEVBQVFub0IsS0FBS29vQixjQUFjSCxHQUMzQnJnQixRQUFZNUgsS0FBS1ksTUFBTSxHQUFHWixLQUFLUyxjQUFjMG5CLElBQVNob0IsT0FBT2lHLE9BQU8sQ0FBRW5GLFNBQVE0QixLQUFNQSxFQUFNbkMsWUFBYXlFLGFBQXlDLEVBQVNBLEVBQVFrakIsUUFBVSxDQUFFQSxPQUFRbGpCLEVBQVFrakIsUUFBVyxDQUFDLElBQ3pNaGdCLFFBQWFULEVBQUkySCxPQUN2QixPQUFJM0gsRUFBSVksR0FDRyxDQUNISCxLQUFNLENBQUVxZixLQUFNTyxFQUFXNUssR0FBSWhWLEVBQUtpZ0IsR0FBSUMsU0FBVWxnQixFQUFLbWdCLEtBQ3JEcGdCLE1BQU8sTUFLSixDQUFFQyxLQUFNLEtBQU1ELE1BRFBDLEVBR3RCLENBQ0EsTUFBT0QsR0FDSCxHQUFJd2QsRUFBZXhkLEdBQ2YsTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixFQUNKLENBT0EsTUFBQXFnQixDQUFPZixFQUFNQyxFQUFVQyxHQUNuQixPQUFPLEdBQVU1bkIsVUFBTSxPQUFRLEVBQVEsWUFDbkMsT0FBT0EsS0FBS3luQixlQUFlLE9BQVFDLEVBQU1DLEVBQVVDLEVBQ3ZELEVBQ0osQ0FPQSxpQkFBQWMsQ0FBa0JoQixFQUFNblosRUFBT29aLEVBQVVDLEdBQ3JDLE9BQU8sR0FBVTVuQixVQUFNLE9BQVEsRUFBUSxZQUNuQyxNQUFNaW9CLEVBQVlqb0IsS0FBS2tvQixvQkFBb0JSLEdBQ3JDUyxFQUFRbm9CLEtBQUtvb0IsY0FBY0gsR0FDM0J4bkIsRUFBTSxJQUFJK0YsSUFBSXhHLEtBQUtTLElBQU0sdUJBQXVCMG5CLEtBQ3REMW5CLEVBQUlnQixhQUFhQyxJQUFJLFFBQVM2TSxHQUM5QixJQUNJLElBQUkxTCxFQUNKLE1BQU1zQyxFQUFVaEYsT0FBT2lHLE9BQU8sQ0FBRXRELE9BQVFza0IsR0FBcUJ0a0IsUUFBVThrQixHQUNqRWxuQixFQUFVUCxPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBR3BHLEtBQUtVLFNBQVUsQ0FBRSxXQUFZbW5CLE9BQU8xaUIsRUFBUXJDLFVBQ3hFLG9CQUFUbU0sTUFBd0IwWSxhQUFvQjFZLE1BQ25EcE0sRUFBTyxJQUFJc00sU0FDWHRNLEVBQUttRSxPQUFPLGVBQWdCN0IsRUFBUWtpQixjQUNwQ3hrQixFQUFLbUUsT0FBTyxHQUFJMmdCLElBRVMsb0JBQWJ4WSxVQUE0QndZLGFBQW9CeFksVUFDNUR0TSxFQUFPOGtCLEVBQ1A5a0IsRUFBS21FLE9BQU8sZUFBZ0I3QixFQUFRa2lCLGdCQUdwQ3hrQixFQUFPOGtCLEVBQ1BqbkIsRUFBUSxpQkFBbUIsV0FBV3lFLEVBQVFraUIsZUFDOUMzbUIsRUFBUSxnQkFBa0J5RSxFQUFRbWlCLGFBRXRDLE1BQU0xZixRQUFZNUgsS0FBS1ksTUFBTUgsRUFBSXFILFdBQVksQ0FDekM3RyxPQUFRLE1BQ1I0QixLQUFNQSxFQUNObkMsWUFFRTJILFFBQWFULEVBQUkySCxPQUN2QixPQUFJM0gsRUFBSVksR0FDRyxDQUNISCxLQUFNLENBQUVxZixLQUFNTyxFQUFXTSxTQUFVbGdCLEVBQUttZ0IsS0FDeENwZ0IsTUFBTyxNQUtKLENBQUVDLEtBQU0sS0FBTUQsTUFEUEMsRUFHdEIsQ0FDQSxNQUFPRCxHQUNILEdBQUl3ZCxFQUFleGQsR0FDZixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLEVBQ0osQ0FRQSxxQkFBQXVnQixDQUFzQmpCLEVBQU12aUIsR0FDeEIsT0FBTyxHQUFVbkYsVUFBTSxPQUFRLEVBQVEsWUFDbkMsSUFDSSxJQUFJbW9CLEVBQVFub0IsS0FBS29vQixjQUFjVixHQUMvQixNQUFNaG5CLEVBQVVQLE9BQU9pRyxPQUFPLENBQUMsRUFBR3BHLEtBQUtVLFVBQ25DeUUsYUFBeUMsRUFBU0EsRUFBUXJDLFVBQzFEcEMsRUFBUSxZQUFjLFFBRTFCLE1BQU0ySCxRQUFhMmUsR0FBS2huQixLQUFLWSxNQUFPLEdBQUdaLEtBQUtTLDBCQUEwQjBuQixJQUFTLENBQUMsRUFBRyxDQUFFem5CLFlBQy9FRCxFQUFNLElBQUkrRixJQUFJeEcsS0FBS1MsSUFBTTRILEVBQUs1SCxLQUM5QjhOLEVBQVE5TixFQUFJZ0IsYUFBYW9DLElBQUksU0FDbkMsSUFBSzBLLEVBQ0QsTUFBTSxJQUFJbVgsRUFBYSw0QkFFM0IsTUFBTyxDQUFFcmQsS0FBTSxDQUFFdWdCLFVBQVdub0IsRUFBSXFILFdBQVk0ZixPQUFNblosU0FBU25HLE1BQU8sS0FDdEUsQ0FDQSxNQUFPQSxHQUNILEdBQUl3ZCxFQUFleGQsR0FDZixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLEVBQ0osQ0FPQSxNQUFBbEYsQ0FBT3drQixFQUFNQyxFQUFVQyxHQUNuQixPQUFPLEdBQVU1bkIsVUFBTSxPQUFRLEVBQVEsWUFDbkMsT0FBT0EsS0FBS3luQixlQUFlLE1BQU9DLEVBQU1DLEVBQVVDLEVBQ3RELEVBQ0osQ0FRQSxJQUFBaUIsQ0FBS0MsRUFBVUMsRUFBUTVqQixHQUNuQixPQUFPLEdBQVVuRixVQUFNLE9BQVEsRUFBUSxZQUNuQyxJQU9JLE1BQU8sQ0FBRXFJLFdBTlUyZSxHQUFLaG5CLEtBQUtZLE1BQU8sR0FBR1osS0FBS1Msa0JBQW1CLENBQzNEK21CLFNBQVV4bkIsS0FBS3duQixTQUNmd0IsVUFBV0YsRUFDWEcsZUFBZ0JGLEVBQ2hCRyxrQkFBbUIvakIsYUFBeUMsRUFBU0EsRUFBUStqQixtQkFDOUUsQ0FBRXhvQixRQUFTVixLQUFLVSxVQUNKMEgsTUFBTyxLQUMxQixDQUNBLE1BQU9BLEdBQ0gsR0FBSXdkLEVBQWV4ZCxHQUNmLE1BQU8sQ0FBRUMsS0FBTSxLQUFNRCxTQUV6QixNQUFNQSxDQUNWLENBQ0osRUFDSixDQVFBLElBQUErZ0IsQ0FBS0wsRUFBVUMsRUFBUTVqQixHQUNuQixPQUFPLEdBQVVuRixVQUFNLE9BQVEsRUFBUSxZQUNuQyxJQU9JLE1BQU8sQ0FBRXFJLEtBQU0sQ0FBRXFmLFlBTkVWLEdBQUtobkIsS0FBS1ksTUFBTyxHQUFHWixLQUFLUyxrQkFBbUIsQ0FDM0QrbUIsU0FBVXhuQixLQUFLd25CLFNBQ2Z3QixVQUFXRixFQUNYRyxlQUFnQkYsRUFDaEJHLGtCQUFtQi9qQixhQUF5QyxFQUFTQSxFQUFRK2pCLG1CQUM5RSxDQUFFeG9CLFFBQVNWLEtBQUtVLFdBQ1M4bkIsS0FBT3BnQixNQUFPLEtBQzlDLENBQ0EsTUFBT0EsR0FDSCxHQUFJd2QsRUFBZXhkLEdBQ2YsTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixFQUNKLENBU0EsZUFBQWdoQixDQUFnQjFCLEVBQU0yQixFQUFXbGtCLEdBQzdCLE9BQU8sR0FBVW5GLFVBQU0sT0FBUSxFQUFRLFlBQ25DLElBQ0ksSUFBSW1vQixFQUFRbm9CLEtBQUtvb0IsY0FBY1YsR0FDM0JyZixRQUFhMmUsR0FBS2huQixLQUFLWSxNQUFPLEdBQUdaLEtBQUtTLG1CQUFtQjBuQixJQUFTaG9CLE9BQU9pRyxPQUFPLENBQUVpakIsY0FBZWxrQixhQUF5QyxFQUFTQSxFQUFRbWtCLFdBQWEsQ0FBRUEsVUFBV25rQixFQUFRbWtCLFdBQWMsQ0FBQyxHQUFLLENBQUU1b0IsUUFBU1YsS0FBS1UsVUFDck8sTUFBTTZvQixHQUFzQnBrQixhQUF5QyxFQUFTQSxFQUFRcWtCLFVBQ2hGLGNBQWtDLElBQXJCcmtCLEVBQVFxa0IsU0FBb0IsR0FBS3JrQixFQUFRcWtCLFdBQ3RELEdBR04sT0FEQW5oQixFQUFPLENBQUV1Z0IsVUFEU2EsVUFBVSxHQUFHenBCLEtBQUtTLE1BQU00SCxFQUFLcWhCLFlBQVlILE1BRXBELENBQUVsaEIsT0FBTUQsTUFBTyxLQUMxQixDQUNBLE1BQU9BLEdBQ0gsR0FBSXdkLEVBQWV4ZCxHQUNmLE1BQU8sQ0FBRUMsS0FBTSxLQUFNRCxTQUV6QixNQUFNQSxDQUNWLENBQ0osRUFDSixDQVFBLGdCQUFBdWhCLENBQWlCQyxFQUFPUCxFQUFXbGtCLEdBQy9CLE9BQU8sR0FBVW5GLFVBQU0sT0FBUSxFQUFRLFlBQ25DLElBQ0ksTUFBTXFJLFFBQWEyZSxHQUFLaG5CLEtBQUtZLE1BQU8sR0FBR1osS0FBS1MsbUJBQW1CVCxLQUFLd25CLFdBQVksQ0FBRTZCLFlBQVdPLFNBQVMsQ0FBRWxwQixRQUFTVixLQUFLVSxVQUNoSDZvQixHQUFzQnBrQixhQUF5QyxFQUFTQSxFQUFRcWtCLFVBQ2hGLGNBQWtDLElBQXJCcmtCLEVBQVFxa0IsU0FBb0IsR0FBS3JrQixFQUFRcWtCLFdBQ3RELEdBQ04sTUFBTyxDQUNIbmhCLEtBQU1BLEVBQUtoSCxJQUFLd29CLEdBQVcxcEIsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUd5akIsR0FBUSxDQUFFakIsVUFBV2lCLEVBQU1ILFVBQzVFRCxVQUFVLEdBQUd6cEIsS0FBS1MsTUFBTW9wQixFQUFNSCxZQUFZSCxLQUMxQyxRQUNWbmhCLE1BQU8sS0FFZixDQUNBLE1BQU9BLEdBQ0gsR0FBSXdkLEVBQWV4ZCxHQUNmLE1BQU8sQ0FBRUMsS0FBTSxLQUFNRCxTQUV6QixNQUFNQSxDQUNWLENBQ0osRUFDSixDQU9BLFFBQUFvaEIsQ0FBUzlCLEVBQU12aUIsR0FDWCxPQUFPLEdBQVVuRixVQUFNLE9BQVEsRUFBUSxZQUNuQyxNQUNNOHBCLE9BRHVHLEtBQXpFM2tCLGFBQXlDLEVBQVNBLEVBQVFta0IsV0FDckQsNkJBQStCLFNBQ2xFUyxFQUFzQi9wQixLQUFLZ3FCLDRCQUE0QjdrQixhQUF5QyxFQUFTQSxFQUFRbWtCLFlBQWMsQ0FBQyxHQUNoSVcsRUFBY0YsRUFBc0IsSUFBSUEsSUFBd0IsR0FDdEUsSUFDSSxNQUFNNUIsRUFBUW5vQixLQUFLb29CLGNBQWNWLEdBQzNCOWYsUUFBWS9ELEdBQUk3RCxLQUFLWSxNQUFPLEdBQUdaLEtBQUtTLE9BQU9xcEIsS0FBYzNCLElBQVE4QixJQUFlLENBQ2xGdnBCLFFBQVNWLEtBQUtVLFFBQ2RpbUIsZUFBZSxJQUduQixNQUFPLENBQUV0ZSxXQURVVCxFQUFJNEgsT0FDUnBILE1BQU8sS0FDMUIsQ0FDQSxNQUFPQSxHQUNILEdBQUl3ZCxFQUFleGQsR0FDZixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLEVBQ0osQ0FLQSxJQUFBOGhCLENBQUt4QyxHQUNELE9BQU8sR0FBVTFuQixVQUFNLE9BQVEsRUFBUSxZQUNuQyxNQUFNbW9CLEVBQVFub0IsS0FBS29vQixjQUFjVixHQUNqQyxJQUNJLE1BQU1yZixRQUFheEUsR0FBSTdELEtBQUtZLE1BQU8sR0FBR1osS0FBS1MsbUJBQW1CMG5CLElBQVMsQ0FDbkV6bkIsUUFBU1YsS0FBS1UsVUFFbEIsTUFBTyxDQUFFMkgsS0FBTTRkLEVBQWlCNWQsR0FBT0QsTUFBTyxLQUNsRCxDQUNBLE1BQU9BLEdBQ0gsR0FBSXdkLEVBQWV4ZCxHQUNmLE1BQU8sQ0FBRUMsS0FBTSxLQUFNRCxTQUV6QixNQUFNQSxDQUNWLENBQ0osRUFDSixDQUtBLE1BQUF1YixDQUFPK0QsR0FDSCxPQUFPLEdBQVUxbkIsVUFBTSxPQUFRLEVBQVEsWUFDbkMsTUFBTW1vQixFQUFRbm9CLEtBQUtvb0IsY0FBY1YsR0FDakMsSUFJSSxhRC9TVCxTQUFjYixFQUFTcG1CLEVBQUswRSxHQUMvQixPQUFPLEVBQVVuRixVQUFNLE9BQVEsRUFBUSxZQUNuQyxPQUFPNG1CLEdBQWVDLEVBQVMsT0FBUXBtQixFQUFLTixPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBR2pCLEdBQVUsQ0FBRXdoQixlQUFlLElDMFN6RjVsQixVRHpTbEIsRUFDSixDQ3dTc0JBLENBQUtmLEtBQUtZLE1BQU8sR0FBR1osS0FBS1MsY0FBYzBuQixJQUFTLENBQ2xEem5CLFFBQVNWLEtBQUtVLFVBRVgsQ0FBRTJILE1BQU0sRUFBTUQsTUFBTyxLQUNoQyxDQUNBLE1BQU9BLEdBQ0gsR0FBSXdkLEVBQWV4ZCxJQUFVQSxhQUFpQjJkLEVBQXFCLENBQy9ELE1BQU1DLEVBQWdCNWQsRUFBTTRkLGNBQzVCLEdBQUksQ0FBQyxJQUFLLEtBQUtyZSxTQUFTcWUsYUFBcUQsRUFBU0EsRUFBYzFkLFFBQ2hHLE1BQU8sQ0FBRUQsTUFBTSxFQUFPRCxRQUU5QixDQUNBLE1BQU1BLENBQ1YsQ0FDSixFQUNKLENBU0EsWUFBQStoQixDQUFhekMsRUFBTXZpQixHQUNmLE1BQU1nakIsRUFBUW5vQixLQUFLb29CLGNBQWNWLEdBQzNCMEMsRUFBZSxHQUNmYixHQUFzQnBrQixhQUF5QyxFQUFTQSxFQUFRcWtCLFVBQ2hGLGFBQWlDLElBQXJCcmtCLEVBQVFxa0IsU0FBb0IsR0FBS3JrQixFQUFRcWtCLFdBQ3JELEdBQ3FCLEtBQXZCRCxHQUNBYSxFQUFhbm9CLEtBQUtzbkIsR0FFdEIsTUFDTU8sT0FEdUcsS0FBekUza0IsYUFBeUMsRUFBU0EsRUFBUW1rQixXQUNyRCxlQUFpQixTQUNwRFMsRUFBc0IvcEIsS0FBS2dxQiw0QkFBNEI3a0IsYUFBeUMsRUFBU0EsRUFBUW1rQixZQUFjLENBQUMsR0FDMUcsS0FBeEJTLEdBQ0FLLEVBQWFub0IsS0FBSzhuQixHQUV0QixJQUFJRSxFQUFjRyxFQUFhNW9CLEtBQUssS0FJcEMsTUFIb0IsS0FBaEJ5b0IsSUFDQUEsRUFBYyxJQUFJQSxLQUVmLENBQ0g1aEIsS0FBTSxDQUFFZ2lCLFVBQVdaLFVBQVUsR0FBR3pwQixLQUFLUyxPQUFPcXBCLFlBQXFCM0IsSUFBUThCLE1BRWpGLENBTUEsTUFBQWhELENBQU8yQyxHQUNILE9BQU8sR0FBVTVwQixVQUFNLE9BQVEsRUFBUSxZQUNuQyxJQUVJLE1BQU8sQ0FBRXFJLFdBRFU0ZSxHQUFPam5CLEtBQUtZLE1BQU8sR0FBR1osS0FBS1MsY0FBY1QsS0FBS3duQixXQUFZLENBQUU4QyxTQUFVVixHQUFTLENBQUVscEIsUUFBU1YsS0FBS1UsVUFDbkcwSCxNQUFPLEtBQzFCLENBQ0EsTUFBT0EsR0FDSCxHQUFJd2QsRUFBZXhkLEdBQ2YsTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixFQUNKLENBZ0VBLElBQUFtaUIsQ0FBSzdDLEVBQU12aUIsRUFBUzJoQixHQUNoQixPQUFPLEdBQVU5bUIsVUFBTSxPQUFRLEVBQVEsWUFDbkMsSUFDSSxNQUFNNkMsRUFBTzFDLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUc4Z0IsSUFBeUIvaEIsR0FBVSxDQUFFbWdCLE9BQVFvQyxHQUFRLEtBRWhILE1BQU8sQ0FBRXJmLFdBRFUyZSxHQUFLaG5CLEtBQUtZLE1BQU8sR0FBR1osS0FBS1MsbUJBQW1CVCxLQUFLd25CLFdBQVkza0IsRUFBTSxDQUFFbkMsUUFBU1YsS0FBS1UsU0FBV29tQixHQUNsRzFlLE1BQU8sS0FDMUIsQ0FDQSxNQUFPQSxHQUNILEdBQUl3ZCxFQUFleGQsR0FDZixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLEVBQ0osQ0FDQSxjQUFBMmYsQ0FBZUQsR0FDWCxPQUFPL2YsS0FBS0MsVUFBVThmLEVBQzFCLENBQ0EsUUFBQUUsQ0FBUzNmLEdBQ0wsTUFBc0Isb0JBQVhtaUIsT0FDQUEsT0FBT3htQixLQUFLcUUsR0FBTVAsU0FBUyxVQUUvQjJpQixLQUFLcGlCLEVBQ2hCLENBQ0EsYUFBQStmLENBQWNWLEdBQ1YsTUFBTyxHQUFHMW5CLEtBQUt3bkIsWUFBWUUsR0FDL0IsQ0FDQSxtQkFBQVEsQ0FBb0JSLEdBQ2hCLE9BQU9BLEVBQUs3UixRQUFRLFdBQVksSUFBSUEsUUFBUSxPQUFRLElBQ3hELENBQ0EsMEJBQUFtVSxDQUEyQlYsR0FDdkIsTUFBTS9PLEVBQVMsR0FnQmYsT0FmSStPLEVBQVVvQixPQUNWblEsRUFBT3RZLEtBQUssU0FBU3FuQixFQUFVb0IsU0FFL0JwQixFQUFVcUIsUUFDVnBRLEVBQU90WSxLQUFLLFVBQVVxbkIsRUFBVXFCLFVBRWhDckIsRUFBVXNCLFFBQ1ZyUSxFQUFPdFksS0FBSyxVQUFVcW5CLEVBQVVzQixVQUVoQ3RCLEVBQVVya0IsUUFDVnNWLEVBQU90WSxLQUFLLFVBQVVxbkIsRUFBVXJrQixVQUVoQ3FrQixFQUFVdUIsU0FDVnRRLEVBQU90WSxLQUFLLFdBQVdxbkIsRUFBVXVCLFdBRTlCdFEsRUFBTy9ZLEtBQUssSUFDdkIsRUNsaUJHLE1DQU02RSxHQUFrQixDQUFFLGdCQUFpQixvQkNEbEQsSUFBSSxHQUF3QyxTQUFVc0ksRUFBU0MsRUFBWUMsRUFBR0MsR0FFMUUsT0FBTyxJQUFLRCxJQUFNQSxFQUFJYSxVQUFVLFNBQVVDLEVBQVNDLEdBQy9DLFNBQVNDLEVBQVV2UCxHQUFTLElBQU13UCxFQUFLaEIsRUFBVWlCLEtBQUt6UCxHQUFTLENBQUUsTUFBTytNLEdBQUt1QyxFQUFPdkMsRUFBSSxDQUFFLENBQzFGLFNBQVMyQyxFQUFTMVAsR0FBUyxJQUFNd1AsRUFBS2hCLEVBQWlCLE1BQUV4TyxHQUFTLENBQUUsTUFBTytNLEdBQUt1QyxFQUFPdkMsRUFBSSxDQUFFLENBQzdGLFNBQVN5QyxFQUFLRyxHQUpsQixJQUFlM1AsRUFJYTJQLEVBQU9DLEtBQU9QLEVBQVFNLEVBQU8zUCxRQUoxQ0EsRUFJeUQyUCxFQUFPM1AsTUFKaERBLGFBQWlCdU8sRUFBSXZPLEVBQVEsSUFBSXVPLEVBQUUsU0FBVWMsR0FBV0EsRUFBUXJQLEVBQVEsSUFJakJrSCxLQUFLcUksRUFBV0csRUFBVyxDQUM3R0YsR0FBTWhCLEVBQVlBLEVBQVVxQixNQUFNeEIsRUFBU0MsR0FBYyxLQUFLbUIsT0FDbEUsRUFDSixFQUtlLE1BQU0rYSxHQUNqQixXQUFBdHFCLENBQVlDLEVBQUtDLEVBQVUsQ0FBQyxFQUFHRSxHQUMzQlosS0FBS1MsSUFBTUEsRUFDWFQsS0FBS1UsUUFBVVAsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUdDLElBQWtCM0YsR0FDakVWLEtBQUtZLE1BQVEsRUFBYUEsRUFDOUIsQ0FJQSxXQUFBbXFCLEdBQ0ksT0FBTyxHQUFVL3FCLFVBQU0sT0FBUSxFQUFRLFlBQ25DLElBRUksTUFBTyxDQUFFcUksV0FEVXhFLEdBQUk3RCxLQUFLWSxNQUFPLEdBQUdaLEtBQUtTLGFBQWMsQ0FBRUMsUUFBU1YsS0FBS1UsVUFDMUQwSCxNQUFPLEtBQzFCLENBQ0EsTUFBT0EsR0FDSCxHQUFJd2QsRUFBZXhkLEdBQ2YsTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixFQUNKLENBTUEsU0FBQTRpQixDQUFVM04sR0FDTixPQUFPLEdBQVVyZCxVQUFNLE9BQVEsRUFBUSxZQUNuQyxJQUVJLE1BQU8sQ0FBRXFJLFdBRFV4RSxHQUFJN0QsS0FBS1ksTUFBTyxHQUFHWixLQUFLUyxjQUFjNGMsSUFBTSxDQUFFM2MsUUFBU1YsS0FBS1UsVUFDaEUwSCxNQUFPLEtBQzFCLENBQ0EsTUFBT0EsR0FDSCxHQUFJd2QsRUFBZXhkLEdBQ2YsTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixFQUNKLENBY0EsWUFBQTZpQixDQUFhNU4sRUFBSWxZLEVBQVUsQ0FDdkIrbEIsUUFBUSxJQUVSLE9BQU8sR0FBVWxyQixVQUFNLE9BQVEsRUFBUSxZQUNuQyxJQVFJLE1BQU8sQ0FBRXFJLFdBUFUyZSxHQUFLaG5CLEtBQUtZLE1BQU8sR0FBR1osS0FBS1MsYUFBYyxDQUN0RDRjLEtBQ0F2VyxLQUFNdVcsRUFDTjZOLE9BQVEvbEIsRUFBUStsQixPQUNoQkMsZ0JBQWlCaG1CLEVBQVFpbUIsY0FDekJDLG1CQUFvQmxtQixFQUFRbW1CLGtCQUM3QixDQUFFNXFCLFFBQVNWLEtBQUtVLFVBQ0owSCxNQUFPLEtBQzFCLENBQ0EsTUFBT0EsR0FDSCxHQUFJd2QsRUFBZXhkLEdBQ2YsTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixFQUNKLENBYUEsWUFBQW1qQixDQUFhbE8sRUFBSWxZLEdBQ2IsT0FBTyxHQUFVbkYsVUFBTSxPQUFRLEVBQVEsWUFDbkMsSUFDSSxNQUFNcUksUUp4Q2YsU0FBYXdlLEVBQVNwbUIsRUFBS29DLEVBQU1zQyxHQUNwQyxPQUFPLEVBQVVuRixVQUFNLE9BQVEsRUFBUSxZQUNuQyxPQUFPNG1CLEdBQWVDLEVBQVMsTUFBT3BtQixFQUFLMEUsRUlzQ2hCcW1CLFVKdENxQzNvQixFQUNwRSxFQUNKLENJb0NtQzJvQixDQUFJeHJCLEtBQUtZLE1BQU8sR0FBR1osS0FBS1MsY0FBYzRjLElBQU0sQ0FDM0RBLEtBQ0F2VyxLQUFNdVcsRUFDTjZOLE9BQVEvbEIsRUFBUStsQixPQUNoQkMsZ0JBQWlCaG1CLEVBQVFpbUIsY0FDekJDLG1CQUFvQmxtQixFQUFRbW1CLGtCQUM3QixDQUFFNXFCLFFBQVNWLEtBQUtVLFVBQ25CLE1BQU8sQ0FBRTJILE9BQU1ELE1BQU8sS0FDMUIsQ0FDQSxNQUFPQSxHQUNILEdBQUl3ZCxFQUFleGQsR0FDZixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLEVBQ0osQ0FNQSxXQUFBcWpCLENBQVlwTyxHQUNSLE9BQU8sR0FBVXJkLFVBQU0sT0FBUSxFQUFRLFlBQ25DLElBRUksTUFBTyxDQUFFcUksV0FEVTJlLEdBQUtobkIsS0FBS1ksTUFBTyxHQUFHWixLQUFLUyxjQUFjNGMsVUFBWSxDQUFDLEVBQUcsQ0FBRTNjLFFBQVNWLEtBQUtVLFVBQzNFMEgsTUFBTyxLQUMxQixDQUNBLE1BQU9BLEdBQ0gsR0FBSXdkLEVBQWV4ZCxHQUNmLE1BQU8sQ0FBRUMsS0FBTSxLQUFNRCxTQUV6QixNQUFNQSxDQUNWLENBQ0osRUFDSixDQU9BLFlBQUFzakIsQ0FBYXJPLEdBQ1QsT0FBTyxHQUFVcmQsVUFBTSxPQUFRLEVBQVEsWUFDbkMsSUFFSSxNQUFPLENBQUVxSSxXQURVNGUsR0FBT2puQixLQUFLWSxNQUFPLEdBQUdaLEtBQUtTLGNBQWM0YyxJQUFNLENBQUMsRUFBRyxDQUFFM2MsUUFBU1YsS0FBS1UsVUFDdkUwSCxNQUFPLEtBQzFCLENBQ0EsTUFBT0EsR0FDSCxHQUFJd2QsRUFBZXhkLEdBQ2YsTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixFQUNKLEVDOUpHLE1BQU11akIsV0FBc0JiLEdBQy9CLFdBQUF0cUIsQ0FBWUMsRUFBS0MsRUFBVSxDQUFDLEVBQUdFLEdBQzNCOEksTUFBTWpKLEVBQUtDLEVBQVNFLEVBQ3hCLENBTUEsSUFBQW9ELENBQUtxWixHQUNELE9BQU8sSUFBSWtLLEdBQWV2bkIsS0FBS1MsSUFBS1QsS0FBS1UsUUFBUzJjLEVBQUlyZCxLQUFLWSxNQUMvRCxFQ1pKLElBQUlnckIsR0FBUyxHQUdUQSxHQURnQixvQkFBVEMsS0FDRSxPQUVnQixvQkFBYkMsU0FDSCxNQUVpQixvQkFBZEMsV0FBbUQsZ0JBQXRCQSxVQUFVQyxRQUMxQyxlQUdBLE9BRU4sTUFDTUMsR0FBeUIsQ0FDbEN2ckIsUUFGMkIsQ0FBRSxnQkFBaUIsZUFBZWtyQixjQUlwRE0sR0FBcUIsQ0FDOUJ2ckIsT0FBUSxVQUVDd3JCLEdBQXVCLENBQ2hDQyxrQkFBa0IsRUFDbEJDLGdCQUFnQixFQUNoQkMsb0JBQW9CLEVBQ3BCQyxTQUFVLFlBRURDLEdBQTJCLENBQUMsRSxjQ2pCbEMsTUFBTSxHQUFnQnRlLElBQ3pCLElBQUlyRyxFQVVKLE9BUklBLEVBREFxRyxJQUdzQixvQkFBVnROLE1BQ0gsV0FHQUEsT0FFTixJQUFJK0YsSUFBU2tCLEtBQVVsQixJQVFyQjhsQixHQUFnQixDQUFDQyxFQUFhQyxFQUFnQnplLEtBQ3ZELE1BQU10TixFQUFRLEdBQWFzTixHQUNyQjBlLEVBUGlCLG9CQUFadmdCLFFBQ0EsV0FFSkEsUUFLUCxNQUFPLENBQUN3Z0IsRUFBT0MsS0FBUyxPQWpDMEJuZSxPQWlDaEIsRUFqQ3lCQyxPQWlDakIsRUFqQ2dDRSxFQWlDaEIsWUFDdEQsSUFBSTVKLEVBQ0osTUFBTXVjLEVBQWtELFFBQW5DdmMsUUFBWXluQixXQUFzQyxJQUFQem5CLEVBQWdCQSxFQUFLd25CLEVBQ3JGLElBQUloc0IsRUFBVSxJQUFJa3NCLEVBQW1CRSxhQUFtQyxFQUFTQSxFQUFLcHNCLFNBT3RGLE9BTktBLEVBQVFxc0IsSUFBSSxXQUNicnNCLEVBQVFnQixJQUFJLFNBQVVnckIsR0FFckJoc0IsRUFBUXFzQixJQUFJLGtCQUNicnNCLEVBQVFnQixJQUFJLGdCQUFpQixVQUFVK2YsS0FFcEM3Z0IsRUFBTWlzQixFQUFPMXNCLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHMG1CLEdBQU8sQ0FBRXBzQixZQUNqRSxFQTFDTyxLQUZnRW1PLE9BaUNyQixLQS9CaENBLEVBQUlhLFVBQVUsU0FBVUMsRUFBU0MsR0FDL0MsU0FBU0MsRUFBVXZQLEdBQVMsSUFBTXdQLEVBQUtoQixFQUFVaUIsS0FBS3pQLEdBQVMsQ0FBRSxNQUFPK00sR0FBS3VDLEVBQU92QyxFQUFJLENBQUUsQ0FDMUYsU0FBUzJDLEVBQVMxUCxHQUFTLElBQU13UCxFQUFLaEIsRUFBaUIsTUFBRXhPLEdBQVMsQ0FBRSxNQUFPK00sR0FBS3VDLEVBQU92QyxFQUFJLENBQUUsQ0FDN0YsU0FBU3lDLEVBQUtHLEdBSmxCLElBQWUzUCxFQUlhMlAsRUFBT0MsS0FBT1AsRUFBUU0sRUFBTzNQLFFBSjFDQSxFQUl5RDJQLEVBQU8zUCxNQUpoREEsYUFBaUJ1TyxFQUFJdk8sRUFBUSxJQUFJdU8sRUFBRSxTQUFVYyxHQUFXQSxFQUFRclAsRUFBUSxJQUlqQmtILEtBQUtxSSxFQUFXRyxFQUFXLENBQzdHRixHQUFNaEIsRUFBWUEsRUFBVXFCLE1BQU14QixFQUFTQyxHQUFjLEtBQUttQixPQUNsRSxHQVB3QyxJQUFVcEIsRUFBU0MsRUFBWUMsRUFBR0MsSUNBdkUsTUFBTSxHQUFVLFNDRVZrZSxHQUFnQyxJQVdoQyxHQUFrQixDQUFFLGdCQUFpQixhQUFhLE1BS2xEQyxHQUEwQix5QkFDMUJDLEdBRU1DLEtBQUt6a0IsTUFBTSwwQkFGakJ3a0IsR0FHQyxhQUdERSxHQUFrQix1REN6QnhCLE1BQU1DLFdBQWtCN2pCLE1BQzNCLFdBQUFoSixDQUFZMEksRUFBU1osRUFBUVMsR0FDekJXLE1BQU1SLEdBQ05sSixLQUFLc3RCLGVBQWdCLEVBQ3JCdHRCLEtBQUs4RyxLQUFPLFlBQ1o5RyxLQUFLc0ksT0FBU0EsRUFDZHRJLEtBQUsrSSxLQUFPQSxDQUNoQixFQUVHLFNBQVN3a0IsR0FBWW5sQixHQUN4QixNQUF3QixpQkFBVkEsR0FBZ0MsT0FBVkEsR0FBa0Isa0JBQW1CQSxDQUM3RSxDQUNPLE1BQU1vbEIsV0FBcUJILEdBQzlCLFdBQUE3c0IsQ0FBWTBJLEVBQVNaLEVBQVFTLEdBQ3pCVyxNQUFNUixFQUFTWixFQUFRUyxHQUN2Qi9JLEtBQUs4RyxLQUFPLGVBQ1o5RyxLQUFLc0ksT0FBU0EsRUFDZHRJLEtBQUsrSSxLQUFPQSxDQUNoQixFQUtHLE1BQU0wa0IsV0FBeUJKLEdBQ2xDLFdBQUE3c0IsQ0FBWTBJLEVBQVM4YyxHQUNqQnRjLE1BQU1SLEdBQ05sSixLQUFLOEcsS0FBTyxtQkFDWjlHLEtBQUtnbUIsY0FBZ0JBLENBQ3pCLEVBRUcsTUFBTTBILFdBQXdCTCxHQUNqQyxXQUFBN3NCLENBQVkwSSxFQUFTcEMsRUFBTXdCLEVBQVFTLEdBQy9CVyxNQUFNUixFQUFTWixFQUFRUyxHQUN2Qi9JLEtBQUs4RyxLQUFPQSxFQUNaOUcsS0FBS3NJLE9BQVNBLENBQ2xCLEVBRUcsTUFBTXFsQixXQUFnQ0QsR0FDekMsV0FBQWx0QixHQUNJa0osTUFBTSx3QkFBeUIsMEJBQTJCLFNBQUt6RyxFQUNuRSxFQUtHLE1BQU0ycUIsV0FBc0NGLEdBQy9DLFdBQUFsdEIsR0FDSWtKLE1BQU0sK0JBQWdDLGdDQUFpQyxTQUFLekcsRUFDaEYsRUFFRyxNQUFNNHFCLFdBQW9DSCxHQUM3QyxXQUFBbHRCLENBQVkwSSxHQUNSUSxNQUFNUixFQUFTLDhCQUErQixTQUFLakcsRUFDdkQsRUFFRyxNQUFNNnFCLFdBQXVDSixHQUNoRCxXQUFBbHRCLENBQVkwSSxFQUFTRixFQUFVLE1BQzNCVSxNQUFNUixFQUFTLGlDQUFrQyxTQUFLakcsR0FDdERqRCxLQUFLZ0osUUFBVSxLQUNmaEosS0FBS2dKLFFBQVVBLENBQ25CLENBQ0EsTUFBQThjLEdBQ0ksTUFBTyxDQUNIaGYsS0FBTTlHLEtBQUs4RyxLQUNYb0MsUUFBU2xKLEtBQUtrSixRQUNkWixPQUFRdEksS0FBS3NJLE9BQ2JVLFFBQVNoSixLQUFLZ0osUUFFdEIsRUFLRyxNQUFNK2tCLFdBQXVDTCxHQUNoRCxXQUFBbHRCLENBQVkwSSxFQUFTRixFQUFVLE1BQzNCVSxNQUFNUixFQUFTLGlDQUFrQyxTQUFLakcsR0FDdERqRCxLQUFLZ0osUUFBVSxLQUNmaEosS0FBS2dKLFFBQVVBLENBQ25CLENBQ0EsTUFBQThjLEdBQ0ksTUFBTyxDQUNIaGYsS0FBTTlHLEtBQUs4RyxLQUNYb0MsUUFBU2xKLEtBQUtrSixRQUNkWixPQUFRdEksS0FBS3NJLE9BQ2JVLFFBQVNoSixLQUFLZ0osUUFFdEIsRUFFRyxNQUFNZ2xCLFdBQWdDTixHQUN6QyxXQUFBbHRCLENBQVkwSSxFQUFTWixHQUNqQm9CLE1BQU1SLEVBQVMsMEJBQTJCWixPQUFRckYsRUFDdEQsRUFFRyxTQUFTZ3JCLEdBQTBCN2xCLEdBQ3RDLE9BQU9tbEIsR0FBWW5sQixJQUF5Qiw0QkFBZkEsRUFBTXRCLElBQ3ZDLENBTU8sTUFBTW9uQixXQUE4QlIsR0FDdkMsV0FBQWx0QixDQUFZMEksRUFBU1osRUFBUTZsQixHQUN6QnprQixNQUFNUixFQUFTLHdCQUF5QlosRUFBUSxpQkFDaER0SSxLQUFLbXVCLFFBQVVBLENBQ25CLEVBS0csTUFBTUMsV0FBNEJWLEdBQ3JDLFdBQUFsdEIsQ0FBWTBJLEdBQ1JRLE1BQU1SLEVBQVMsc0JBQXVCLElBQUssY0FDL0MsRUN4R0osTUFBTW1sQixHQUFlLG1FQUFtRWp0QixNQUFNLElBS3hGa3RCLEdBQW1CLFdBQVdsdEIsTUFBTSxJQUtwQ210QixHQUFpQixNQUNuQixNQUFNQyxFQUFVLElBQUl0c0IsTUFBTSxLQUMxQixJQUFLLElBQUk4YSxFQUFJLEVBQUdBLEVBQUl3UixFQUFRL3JCLE9BQVF1YSxHQUFLLEVBQ3JDd1IsRUFBUXhSLElBQU0sRUFFbEIsSUFBSyxJQUFJQSxFQUFJLEVBQUdBLEVBQUlzUixHQUFpQjdyQixPQUFRdWEsR0FBSyxFQUM5Q3dSLEVBQVFGLEdBQWlCdFIsR0FBR3lSLFdBQVcsS0FBTyxFQUVsRCxJQUFLLElBQUl6UixFQUFJLEVBQUdBLEVBQUlxUixHQUFhNXJCLE9BQVF1YSxHQUFLLEVBQzFDd1IsRUFBUUgsR0FBYXJSLEdBQUd5UixXQUFXLElBQU16UixFQUU3QyxPQUFPd1IsQ0FDVixFQVpzQixHQW9CaEIsU0FBU0UsR0FBZ0JDLEVBQU16VyxFQUFPMFcsR0FDekMsR0FBYSxPQUFURCxFQUdBLElBRkF6VyxFQUFNMlcsTUFBUzNXLEVBQU0yVyxPQUFTLEVBQUtGLEVBQ25DelcsRUFBTTRXLFlBQWMsRUFDYjVXLEVBQU00VyxZQUFjLEdBQUcsQ0FDMUIsTUFBTUMsRUFBTzdXLEVBQU0yVyxPQUFVM1csRUFBTTRXLFdBQWEsRUFBTSxHQUN0REYsRUFBS1AsR0FBYVUsSUFDbEI3VyxFQUFNNFcsWUFBYyxDQUN4QixNQUVDLEdBQUk1VyxFQUFNNFcsV0FBYSxFQUd4QixJQUZBNVcsRUFBTTJXLE1BQVEzVyxFQUFNMlcsT0FBVSxFQUFJM1csRUFBTTRXLFdBQ3hDNVcsRUFBTTRXLFdBQWEsRUFDWjVXLEVBQU00VyxZQUFjLEdBQUcsQ0FDMUIsTUFBTUMsRUFBTzdXLEVBQU0yVyxPQUFVM1csRUFBTTRXLFdBQWEsRUFBTSxHQUN0REYsRUFBS1AsR0FBYVUsSUFDbEI3VyxFQUFNNFcsWUFBYyxDQUN4QixDQUVSLENBUU8sU0FBU0UsR0FBa0JDLEVBQVUvVyxFQUFPMFcsR0FDL0MsTUFBTU0sRUFBT1gsR0FBZVUsR0FDNUIsS0FBSUMsR0FBUSxHQVNQLEtBQWMsSUFBVkEsRUFFTCxPQUdBLE1BQU0sSUFBSTFsQixNQUFNLGlDQUFpQ3FlLE9BQU9zSCxhQUFhRixNQUN6RSxDQVhJLElBRkEvVyxFQUFNMlcsTUFBUzNXLEVBQU0yVyxPQUFTLEVBQUtLLEVBQ25DaFgsRUFBTTRXLFlBQWMsRUFDYjVXLEVBQU00VyxZQUFjLEdBQ3ZCRixFQUFNMVcsRUFBTTJXLE9BQVUzVyxFQUFNNFcsV0FBYSxFQUFNLEtBQy9DNVcsRUFBTTRXLFlBQWMsQ0FVaEMsQ0EwQk8sU0FBU00sR0FBb0JDLEdBQ2hDLE1BQU1DLEVBQU8sR0FDUEMsRUFBWUMsSUFDZEYsRUFBS3J0QixLQUFLNGxCLE9BQU80SCxjQUFjRCxLQUU3QkUsRUFBWSxDQUNkQyxRQUFTLEVBQ1RILFVBQVcsR0FFVEksRUFBVyxDQUFFZixNQUFPLEVBQUdDLFdBQVksR0FDbkNlLEVBQVlsQixLQW9FZixTQUF3QkEsRUFBTXpXLEVBQU8wVyxHQUN4QyxHQUFzQixJQUFsQjFXLEVBQU15WCxRQUFlLENBQ3JCLEdBQUloQixHQUFRLElBRVIsWUFEQUMsRUFBS0QsR0FJVCxJQUFLLElBQUltQixFQUFhLEVBQUdBLEVBQWEsRUFBR0EsR0FBYyxFQUNuRCxLQUFNbkIsR0FBUyxFQUFJbUIsRUFBZSxHQUFVLENBQ3hDNVgsRUFBTXlYLFFBQVVHLEVBQ2hCLEtBQ0osQ0FFSixHQUFzQixJQUFsQjVYLEVBQU15WCxRQUNOelgsRUFBTXNYLFVBQW1CLEdBQVBiLE9BRWpCLEdBQXNCLElBQWxCelcsRUFBTXlYLFFBQ1h6WCxFQUFNc1gsVUFBbUIsR0FBUGIsTUFFakIsSUFBc0IsSUFBbEJ6VyxFQUFNeVgsUUFJWCxNQUFNLElBQUlubUIsTUFBTSwwQkFIaEIwTyxFQUFNc1gsVUFBbUIsRUFBUGIsQ0FJdEIsQ0FDQXpXLEVBQU15WCxTQUFXLENBQ3JCLE1BQ0ssR0FBSXpYLEVBQU15WCxRQUFVLEVBQUcsQ0FDeEIsR0FBSWhCLEdBQVEsSUFDUixNQUFNLElBQUlubEIsTUFBTSwwQkFFcEIwTyxFQUFNc1gsVUFBYXRYLEVBQU1zWCxXQUFhLEVBQWEsR0FBUGIsRUFDNUN6VyxFQUFNeVgsU0FBVyxFQUNLLElBQWxCelgsRUFBTXlYLFNBQ05mLEVBQUsxVyxFQUFNc1gsVUFFbkIsQ0FDSixDQXhHUU8sQ0FBZXBCLEVBQU1lLEVBQVdILElBRXBDLElBQUssSUFBSXZTLEVBQUksRUFBR0EsRUFBSXFTLEVBQUk1c0IsT0FBUXVhLEdBQUssRUFDakNnUyxHQUFrQkssRUFBSVosV0FBV3pSLEdBQUk0UyxFQUFVQyxHQUVuRCxPQUFPUCxFQUFLOXRCLEtBQUssR0FDckIsQ0FPTyxTQUFTd3VCLEdBQWdCUixFQUFXWixHQUN2QyxLQUFJWSxHQUFhLEtBQWpCLENBSUssR0FBSUEsR0FBYSxLQUdsQixPQUZBWixFQUFLLElBQVFZLEdBQWEsUUFDMUJaLEVBQUssSUFBb0IsR0FBWlksR0FHWixHQUFJQSxHQUFhLE1BSWxCLE9BSEFaLEVBQUssSUFBUVksR0FBYSxJQUMxQlosRUFBSyxJQUFTWSxHQUFhLEVBQUssU0FDaENaLEVBQUssSUFBb0IsR0FBWlksR0FHWixHQUFJQSxHQUFhLFFBS2xCLE9BSkFaLEVBQUssSUFBUVksR0FBYSxJQUMxQlosRUFBSyxJQUFTWSxHQUFhLEdBQU0sSUFDakNaLEVBQUssSUFBU1ksR0FBYSxFQUFLLFNBQ2hDWixFQUFLLElBQW9CLEdBQVpZLEdBR2pCLE1BQU0sSUFBSWhtQixNQUFNLG1DQUFtQ2dtQixFQUFVMW5CLFNBQVMsTUFEdEUsQ0FwQkk4bUIsRUFBS1ksRUFzQmIsQ0F1RU8sU0FBU1MsR0FBc0JaLEdBQ2xDLE1BQU1wZixFQUFTLEdBQ1RpSSxFQUFRLENBQUUyVyxNQUFPLEVBQUdDLFdBQVksR0FDaENvQixFQUFVdkIsSUFDWjFlLEVBQU9oTyxLQUFLMHNCLElBRWhCLElBQUssSUFBSTNSLEVBQUksRUFBR0EsRUFBSXFTLEVBQUk1c0IsT0FBUXVhLEdBQUssRUFDakNnUyxHQUFrQkssRUFBSVosV0FBV3pSLEdBQUk5RSxFQUFPZ1ksR0FFaEQsT0FBTyxJQUFJQyxXQUFXbGdCLEVBQzFCLENBTU8sU0FBU21nQixHQUFpQkMsR0FDN0IsTUFBTXBnQixFQUFTLEdBQ1RpSSxFQUFRLENBQUUyVyxNQUFPLEVBQUdDLFdBQVksR0FDaEN3QixFQUFVQyxJQUNadGdCLEVBQU9oTyxLQUFLc3VCLElBS2hCLE9BSEFGLEVBQU10cEIsUUFBUzRuQixHQUFTRCxHQUFnQkMsRUFBTXpXLEVBQU9vWSxJQUVyRDVCLEdBQWdCLEtBQU14VyxFQUFPb1ksR0FDdEJyZ0IsRUFBT3pPLEtBQUssR0FDdkIsQ0NsUE8sTUFBTSxHQUFZLElBQXdCLG9CQUFYeUssUUFBOEMsb0JBQWI2ZixTQUNqRTBFLEdBQXlCLENBQzNCQyxRQUFRLEVBQ1JDLFVBQVUsR0FLREMsR0FBdUIsS0FDaEMsSUFBSyxLQUNELE9BQU8sRUFFWCxJQUNJLEdBQXVDLGlCQUE1QnhqQixXQUFXeWpCLGFBQ2xCLE9BQU8sQ0FFZixDQUNBLE1BQU92akIsR0FFSCxPQUFPLENBQ1gsQ0FDQSxHQUFJbWpCLEdBQXVCQyxPQUN2QixPQUFPRCxHQUF1QkUsU0FFbEMsTUFBTUcsRUFBWSxRQUFRQyxLQUFLQyxXQUFXRCxLQUFLQyxXQUMvQyxJQUNJNWpCLFdBQVd5akIsYUFBYUksUUFBUUgsRUFBV0EsR0FDM0MxakIsV0FBV3lqQixhQUFhSyxXQUFXSixHQUNuQ0wsR0FBdUJDLFFBQVMsRUFDaENELEdBQXVCRSxVQUFXLENBQ3RDLENBQ0EsTUFBT3JqQixHQUdIbWpCLEdBQXVCQyxRQUFTLEVBQ2hDRCxHQUF1QkUsVUFBVyxDQUN0QyxDQUNBLE9BQU9GLEdBQXVCRSxVQXlCckIsR0FBZ0J4aUIsSUFDekIsSUFBSXJHLEVBVUosT0FSSUEsRUFEQXFHLElBR3NCLG9CQUFWdE4sTUFDSCxJQUFJK0YsSUFBUyxzQ0FBK0JhLEtBQUssRUFBRzdGLFFBQVNmLEtBQVlBLEtBQVMrRixJQUdsRi9GLE9BRU4sSUFBSStGLElBQVNrQixLQUFVbEIsSUFXckJ1cUIsR0FBZWpwQixNQUFPa3BCLEVBQVN4dEIsRUFBSzBFLFdBQ3ZDOG9CLEVBQVFILFFBQVFydEIsRUFBS29FLEtBQUtDLFVBQVVLLEtBRWpDK29CLEdBQWVucEIsTUFBT2twQixFQUFTeHRCLEtBQ3hDLE1BQU1yRCxRQUFjNndCLEVBQVFFLFFBQVExdEIsR0FDcEMsSUFBS3JELEVBQ0QsT0FBTyxLQUVYLElBQ0ksT0FBT3lILEtBQUtXLE1BQU1wSSxFQUN0QixDQUNBLE1BQU80RSxHQUNILE9BQU81RSxDQUNYLEdBRVNneEIsR0FBa0JycEIsTUFBT2twQixFQUFTeHRCLFdBQ3JDd3RCLEVBQVFGLFdBQVd0dEIsSUFPdEIsTUFBTTR0QixHQUNULFdBQUEvd0IsR0FHSVIsS0FBS3d4QixRQUFVLElBQUlELEdBQVNFLG1CQUFtQixDQUFDN3BCLEVBQUs4cEIsS0FHakQxeEIsS0FBSzJQLFFBQVUvSCxFQUNmNUgsS0FBSzRQLE9BQVM4aEIsR0FFdEIsRUFHRyxTQUFTQyxHQUFVcGpCLEdBQ3RCLE1BQU1xakIsRUFBUXJqQixFQUFNbk4sTUFBTSxLQUMxQixHQUFxQixJQUFqQnd3QixFQUFNbnZCLE9BQ04sTUFBTSxJQUFJMnJCLEdBQW9CLHlCQUdsQyxJQUFLLElBQUlwUixFQUFJLEVBQUdBLEVBQUk0VSxFQUFNbnZCLE9BQVF1YSxJQUM5QixJQUFLb1EsR0FBZ0I3ckIsS0FBS3F3QixFQUFNNVUsSUFDNUIsTUFBTSxJQUFJb1IsR0FBb0IsK0JBYXRDLE1BVmEsQ0FFVHlELE9BQVE5cEIsS0FBS1csTUFBTTBtQixHQUFvQndDLEVBQU0sS0FDN0MzZixRQUFTbEssS0FBS1csTUFBTTBtQixHQUFvQndDLEVBQU0sS0FDOUNFLFVBQVc3QixHQUFzQjJCLEVBQU0sSUFDdkNHLElBQUssQ0FDREYsT0FBUUQsRUFBTSxHQUNkM2YsUUFBUzJmLEVBQU0sSUFJM0IsQ0FzQ0EsU0FBU0ksR0FBUUMsR0FDYixPQUFRLElBQU1BLEVBQUlucUIsU0FBUyxLQUFLb3FCLFFBQVEsRUFDNUMsQ0FxQ09qcUIsZUFBZWtxQixHQUEwQmhCLEVBQVNpQixFQUFZQyxHQUFxQixHQUN0RixNQUFNQyxFQXBDSCxXQUNILE1BQ01DLEVBQVEsSUFBSUMsWUFESyxJQUV2QixHQUFzQixvQkFBWEMsT0FBd0IsQ0FDL0IsTUFBTUMsRUFBVSxxRUFDVkMsRUFBYUQsRUFBUWp3QixPQUMzQixJQUFJbXdCLEVBQVcsR0FDZixJQUFLLElBQUk1VixFQUFJLEVBQUdBLEVBTkcsR0FNaUJBLElBQ2hDNFYsR0FBWUYsRUFBUXJmLE9BQU95ZCxLQUFLK0IsTUFBTS9CLEtBQUtDLFNBQVc0QixJQUUxRCxPQUFPQyxDQUNYLENBRUEsT0FEQUgsT0FBT0ssZ0JBQWdCUCxHQUNoQnJ3QixNQUFNOEIsS0FBS3V1QixFQUFPUCxJQUFTeHdCLEtBQUssR0FDM0MsQ0FzQnlCdXhCLEdBQ3JCLElBQUlDLEVBQXFCVixFQUNyQkQsSUFDQVcsR0FBc0IsNEJBRXBCOUIsR0FBYUMsRUFBUyxHQUFHaUIsa0JBQTRCWSxHQUMzRCxNQUFNQyxRQWxCSGhyQixlQUFxQzJxQixHQUl4QyxHQUgyQyxvQkFBWEgsYUFDSCxJQUFsQkEsT0FBT1MsUUFDUyxvQkFBaEJDLFlBR1AsT0FEQTdkLFFBQVE4ZCxLQUFLLHNHQUNOUixFQUVYLE1BQU1TLFFBakJWcHJCLGVBQXNCcXJCLEdBQ2xCLE1BQ01DLEdBRFUsSUFBSUosYUFDUXBSLE9BQU91UixHQUM3QkUsUUFBYWYsT0FBT1MsT0FBT08sT0FBTyxVQUFXRixHQUM3Q2xELEVBQVEsSUFBSUYsV0FBV3FELEdBQzdCLE9BQU90eEIsTUFBTThCLEtBQUtxc0IsR0FDYmh2QixJQUFLQyxHQUFNdW1CLE9BQU9zSCxhQUFhN3RCLElBQy9CRSxLQUFLLEdBQ2QsQ0FTeUJreUIsQ0FBT2QsR0FDNUIsT0FBT25JLEtBQUs0SSxHQUFReGQsUUFBUSxNQUFPLEtBQUtBLFFBQVEsTUFBTyxLQUFLQSxRQUFRLE1BQU8sR0FDL0UsQ0FRZ0M4ZCxDQUFzQnJCLEdBRWxELE1BQU8sQ0FBQ1csRUFEb0JYLElBQWlCVyxFQUFnQixRQUFVLE9BRTNFLENBOUdBMUIsR0FBU0UsbUJBQXFCL2hCLFFBZ0g5QixNQUFNa2tCLEdBQW9CLDZEQTJDcEJDLEdBQWEsaUVBQ1osU0FBU0MsR0FBYXpFLEdBQ3pCLElBQUt3RSxHQUFXdHlCLEtBQUs4dEIsR0FDakIsTUFBTSxJQUFJN2xCLE1BQU0sOERBRXhCLENDdFJBLE1BQU0sR0FBb0IrYyxHQUFRQSxFQUFJdEQsS0FBT3NELEVBQUlyZCxTQUFXcWQsRUFBSUMsbUJBQXFCRCxFQUFJbmUsT0FBU0wsS0FBS0MsVUFBVXVlLEdBQzNHd04sR0FBc0IsQ0FBQyxJQUFLLElBQUssS0FDaEM5ckIsZUFBZSxHQUFZRyxHQUM5QixJQUFJbEQsRUR1RStCOHVCLEVDdEVuQyxLRHVFaUMsaUJBREVBLEVDdEVQNXJCLElEd0VOLE9BQWxCNHJCLEdBQ0EsV0FBWUEsR0FDWixPQUFRQSxHQUNSLFNBQVVBLEdBQ29CLG1CQUF2QkEsRUFBY3prQixNQzNFckIsTUFBTSxJQUFJeWUsR0FBd0IsR0FBaUI1bEIsR0FBUSxHQUUvRCxHQUFJMnJCLEdBQW9CcHNCLFNBQVNTLEVBQU1FLFFBRW5DLE1BQU0sSUFBSTBsQixHQUF3QixHQUFpQjVsQixHQUFRQSxFQUFNRSxRQUVyRSxJQUFJRCxFQU9BNHJCLEVBTkosSUFDSTVyQixRQUFhRCxFQUFNbUgsTUFDdkIsQ0FDQSxNQUFPbEMsR0FDSCxNQUFNLElBQUlvZ0IsR0FBaUIsR0FBaUJwZ0IsR0FBSUEsRUFDcEQsQ0FFQSxNQUFNNm1CLEVEb05ILFNBQWlDOWtCLEdBQ3BDLE1BQU0ra0IsRUFBYS9rQixFQUFTMU8sUUFBUW1ELElBQUlvcEIsSUFDeEMsSUFBS2tILEVBQ0QsT0FBTyxLQUVYLElBQUtBLEVBQVd2ckIsTUFBTWdyQixJQUNsQixPQUFPLEtBRVgsSUFFSSxPQURhLElBQUl6RyxLQUFLLEdBQUdnSCxnQkFFN0IsQ0FDQSxNQUFPOW1CLEdBQ0gsT0FBTyxJQUNYLENBQ0osQ0NuTytCK21CLENBQXdCaHNCLEdBV25ELEdBVkk4ckIsR0FDQUEsRUFBbUJHLFdBQWFuSCxJQUNoQixpQkFBVDdrQixHQUNQQSxHQUNxQixpQkFBZEEsRUFBS1UsS0FDWmtyQixFQUFZNXJCLEVBQUtVLEtBRUksaUJBQVRWLEdBQXFCQSxHQUFtQyxpQkFBcEJBLEVBQUtpc0IsYUFDckRMLEVBQVk1ckIsRUFBS2lzQixZQUVoQkwsRUFZQSxJQUFrQixrQkFBZEEsRUFDTCxNQUFNLElBQUkvRixHQUFzQixHQUFpQjdsQixHQUFPRCxFQUFNRSxRQUF1QyxRQUE3QnBELEVBQUttRCxFQUFLa3NCLHFCQUFrQyxJQUFQcnZCLE9BQWdCLEVBQVNBLEVBQUdpcEIsVUFBWSxJQUVwSixHQUFrQixzQkFBZDhGLEVBSUwsTUFBTSxJQUFJdEcsRUFDZCxNQWxCSSxHQUFvQixpQkFBVHRsQixHQUNQQSxHQUM4QixpQkFBdkJBLEVBQUtrc0IsZUFDWmxzQixFQUFLa3NCLGVBQ0xyeUIsTUFBTUMsUUFBUWtHLEVBQUtrc0IsY0FBY3BHLFVBQ2pDOWxCLEVBQUtrc0IsY0FBY3BHLFFBQVExckIsUUFDM0I0RixFQUFLa3NCLGNBQWNwRyxRQUFRL3JCLE9BQU8sQ0FBQ295QixFQUFHeFgsSUFBTXdYLEdBQWtCLGlCQUFOeFgsR0FBZ0IsR0FDeEUsTUFBTSxJQUFJa1IsR0FBc0IsR0FBaUI3bEIsR0FBT0QsRUFBTUUsT0FBUUQsRUFBS2tzQixjQUFjcEcsU0FZakcsTUFBTSxJQUFJWCxHQUFhLEdBQWlCbmxCLEdBQU9ELEVBQU1FLFFBQVUsSUFBSzJyQixFQUN4RSxDQVVPaHNCLGVBQWV3c0IsR0FBUzVOLEVBQVM1bEIsRUFBUVIsRUFBSzBFLEdBQ2pELElBQUlELEVBQ0osTUFBTXhFLEVBQVVQLE9BQU9pRyxPQUFPLENBQUMsRUFBR2pCLGFBQXlDLEVBQVNBLEVBQVF6RSxTQUN2RkEsRUFBUXVzQixNQUNUdnNCLEVBQVF1c0IsSUFBMkJDLEtBRW5DL25CLGFBQXlDLEVBQVNBLEVBQVF1dkIsT0FDMURoMEIsRUFBdUIsY0FBSSxVQUFVeUUsRUFBUXV2QixPQUVqRCxNQUFNQyxFQUFnRixRQUExRXp2QixFQUFLQyxhQUF5QyxFQUFTQSxFQUFRbUcsYUFBMEIsSUFBUHBHLEVBQWdCQSxFQUFLLENBQUMsR0FDaEhDLGFBQXlDLEVBQVNBLEVBQVF5dkIsY0FDMURELEVBQWdCLFlBQUl4dkIsRUFBUXl2QixZQUVoQyxNQUFNM0ssRUFBYzlwQixPQUFPcUMsS0FBS215QixHQUFJbHlCLE9BQVMsSUFBTSxJQUFJOGlCLGdCQUFnQm9QLEdBQUk3c0IsV0FBYSxHQUNsRk8sUUFNVkosZUFBOEI0ZSxFQUFTNWxCLEVBQVFSLEVBQUswRSxFQUFTMmhCLEVBQVlqa0IsR0FDckUsTUFBTWd5QixFQTlCZ0IsRUFBQzV6QixFQUFRa0UsRUFBUzJoQixFQUFZamtCLEtBQ3BELE1BQU0wWCxFQUFTLENBQUV0WixTQUFRUCxTQUFVeUUsYUFBeUMsRUFBU0EsRUFBUXpFLFVBQVksQ0FBQyxHQUMxRyxNQUFlLFFBQVhPLEVBQ09zWixHQUVYQSxFQUFPN1osUUFBVVAsT0FBT2lHLE9BQU8sQ0FBRSxlQUFnQixrQ0FBb0NqQixhQUF5QyxFQUFTQSxFQUFRekUsU0FDL0k2WixFQUFPMVgsS0FBT2tGLEtBQUtDLFVBQVVuRixHQUN0QjFDLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHbVUsR0FBU3VNLEtBdUIxQixDQUFrQjdsQixFQUFRa0UsRUFKN0MsQ0FBQyxFQUlpRXRDLEdBQ3JFLElBQUlvTixFQUNKLElBQ0lBLFFBQWU0VyxFQUFRcG1CLEVBQUtOLE9BQU9pRyxPQUFPLENBQUMsRUFBR3l1QixHQUNsRCxDQUNBLE1BQU94bkIsR0FHSCxNQUZBaUksUUFBUWxOLE1BQU1pRixHQUVSLElBQUkyZ0IsR0FBd0IsR0FBaUIzZ0IsR0FBSSxFQUMzRCxDQUlBLEdBSEs0QyxFQUFPekgsVUFDRixHQUFZeUgsR0FFbEI5SyxhQUF5QyxFQUFTQSxFQUFRd2hCLGNBQzFELE9BQU8xVyxFQUVYLElBQ0ksYUFBYUEsRUFBT1YsTUFDeEIsQ0FDQSxNQUFPbEMsU0FDRyxHQUFZQSxFQUN0QixDQUNKLENBN0J1QixDQUFld1osRUFBUzVsQixFQUFRUixFQUFNd3BCLEVBQWEsQ0FDbEV2cEIsVUFDQWltQixjQUFleGhCLGFBQXlDLEVBQVNBLEVBQVF3aEIsZUFDMUUsRUFBSXhoQixhQUF5QyxFQUFTQSxFQUFRdEMsTUFDakUsT0FBUXNDLGFBQXlDLEVBQVNBLEVBQVEydkIsT0FBUzN2QixhQUF5QyxFQUFTQSxFQUFRMnZCLE1BQU16c0IsR0FBUSxDQUFFQSxLQUFNbEksT0FBT2lHLE9BQU8sQ0FBQyxFQUFHaUMsR0FBT0QsTUFBTyxLQUMvTCxDQXlCTyxTQUFTMnNCLEdBQWlCMXNCLEdBQzdCLElBQUluRCxFQUNKLElBQUk4dkIsRUFBVSxLRHZIWCxJQUFtQjNMLEVDK0h0QixPQWtESixTQUFvQmhoQixHQUNoQixPQUFPQSxFQUFLcVUsY0FBZ0JyVSxFQUFLNHNCLGVBQWlCNXNCLEVBQUs2c0IsVUFDM0QsQ0EzRFFDLENBQVc5c0IsS0FDWDJzQixFQUFVNzBCLE9BQU9pRyxPQUFPLENBQUMsRUFBR2lDLEdBQ3ZCQSxFQUFLK3NCLGFBQ05KLEVBQVFJLFlEM0hNL0wsRUMySGlCaGhCLEVBQUs2c0IsV0QxSDVCcEUsS0FBS3VFLE1BQU1sSSxLQUFLbUksTUFBUSxLQUN2QmpNLEtDNkhWLENBQUVoaEIsS0FBTSxDQUFFMnNCLFVBQVNPLEtBRFEsUUFBcEJyd0IsRUFBS21ELEVBQUtrdEIsWUFBeUIsSUFBUHJ3QixFQUFnQkEsRUFBS21ELEdBQzdCRCxNQUFPLEtBQzdDLENBQ08sU0FBU290QixHQUF5Qm50QixHQUNyQyxNQUFNK0csRUFBVzJsQixHQUFpQjFzQixHQVdsQyxPQVZLK0csRUFBU2hILE9BQ1ZDLEVBQUtrc0IsZUFDeUIsaUJBQXZCbHNCLEVBQUtrc0IsZUFDWnJ5QixNQUFNQyxRQUFRa0csRUFBS2tzQixjQUFjcEcsVUFDakM5bEIsRUFBS2tzQixjQUFjcEcsUUFBUTFyQixRQUMzQjRGLEVBQUtrc0IsY0FBY3JyQixTQUNtQixpQkFBL0JiLEVBQUtrc0IsY0FBY3JyQixTQUMxQmIsRUFBS2tzQixjQUFjcEcsUUFBUS9yQixPQUFPLENBQUNveUIsRUFBR3hYLElBQU13WCxHQUFrQixpQkFBTnhYLEdBQWdCLEtBQ3hFNU4sRUFBUy9HLEtBQUtrc0IsY0FBZ0Jsc0IsRUFBS2tzQixlQUVoQ25sQixDQUNYLENBQ08sU0FBU3FtQixHQUFjcHRCLEdBQzFCLElBQUluRCxFQUVKLE1BQU8sQ0FBRW1ELEtBQU0sQ0FBRWt0QixLQURpQixRQUFwQnJ3QixFQUFLbUQsRUFBS2t0QixZQUF5QixJQUFQcndCLEVBQWdCQSxFQUFLbUQsR0FDdENELE1BQU8sS0FDcEMsQ0FDTyxTQUFTc3RCLEdBQWFydEIsR0FDekIsTUFBTyxDQUFFQSxPQUFNRCxNQUFPLEtBQzFCLENBQ08sU0FBU3V0QixHQUFzQnR0QixHQUNsQyxNQUFNLFlBQUV1dEIsRUFBVyxVQUFFQyxFQUFTLGFBQUVDLEVBQVksWUFBRUMsRUFBVyxrQkFBRUMsR0FBc0IzdEIsRUFBTTR0QixFQTNKckQsU0FBVXRyQixFQUFHMEMsR0FDL0MsSUFBSTZvQixFQUFJLENBQUMsRUFDVCxJQUFLLElBQUlDLEtBQUt4ckIsRUFBT3hLLE9BQU9xTixVQUFVQyxlQUFlWCxLQUFLbkMsRUFBR3dyQixJQUFNOW9CLEVBQUV5TSxRQUFRcWMsR0FBSyxJQUM5RUQsRUFBRUMsR0FBS3hyQixFQUFFd3JCLElBQ2IsR0FBUyxNQUFMeHJCLEdBQXFELG1CQUFqQ3hLLE9BQU9pMkIsc0JBQ3RCLEtBQUlwWixFQUFJLEVBQWIsSUFBZ0JtWixFQUFJaDJCLE9BQU9pMkIsc0JBQXNCenJCLEdBQUlxUyxFQUFJbVosRUFBRTF6QixPQUFRdWEsSUFDM0QzUCxFQUFFeU0sUUFBUXFjLEVBQUVuWixJQUFNLEdBQUs3YyxPQUFPcU4sVUFBVTZvQixxQkFBcUJ2cEIsS0FBS25DLEVBQUd3ckIsRUFBRW5aLE1BQ3ZFa1osRUFBRUMsRUFBRW5aLElBQU1yUyxFQUFFd3JCLEVBQUVuWixJQUY0QixDQUl0RCxPQUFPa1osQ0FDWCxDQWlKa0dJLENBQU9qdUIsRUFBTSxDQUFDLGNBQWUsWUFBYSxlQUFnQixjQUFlLHNCQVN2SyxNQUFPLENBQ0hBLEtBQU0sQ0FDRmt1QixXQVZXLENBQ2ZYLGNBQ0FDLFlBQ0FDLGVBQ0FDLGNBQ0FDLHFCQU1JVCxLQUpLcDFCLE9BQU9pRyxPQUFPLENBQUMsRUFBRzZ2QixJQU0zQjd0QixNQUFPLEtBRWYsQ0FDTyxTQUFTb3VCLEdBQXVCbnVCLEdBQ25DLE9BQU9BLENBQ1gsQ0M5S08sTUFBTW91QixHQUFrQixDQUFDLFNBQVUsUUFBUyxVQ2VwQyxNQUFNLEdBQ2pCLFdBQUFqMkIsRUFBWSxJQUFFQyxFQUFNLEdBQUUsUUFBRUMsRUFBVSxDQUFDLEVBQUMsTUFBRUUsSUFDbENaLEtBQUtTLElBQU1BLEVBQ1hULEtBQUtVLFFBQVVBLEVBQ2ZWLEtBQUtZLE1BQVEsR0FBYUEsR0FDMUJaLEtBQUswMkIsSUFBTSxDQUNQQyxZQUFhMzJCLEtBQUs0MkIsYUFBYXhxQixLQUFLcE0sTUFDcEM2MkIsYUFBYzcyQixLQUFLODJCLGNBQWMxcUIsS0FBS3BNLE1BRTlDLENBTUEsYUFBTSsyQixDQUFRckMsRUFBS3NDLEVBQVFQLEdBQWdCLElBQ3ZDLEdBQUlBLEdBQWdCM2MsUUFBUWtkLEdBQVMsRUFDakMsTUFBTSxJQUFJeHRCLE1BQU0scURBQXFEaXRCLEdBQWdCajFCLEtBQUssU0FFOUYsSUFNSSxhQUxNaXpCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRLEdBQUdaLEtBQUtTLG9CQUFvQnUyQixJQUFTLENBQ3BFdDJCLFFBQVNWLEtBQUtVLFFBQ2RnMEIsTUFDQS9OLGVBQWUsSUFFWixDQUFFdGUsS0FBTSxLQUFNRCxNQUFPLEtBQ2hDLENBQ0EsTUFBT0EsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLENBTUEsdUJBQU02dUIsQ0FBa0JDLEVBQU8veEIsRUFBVSxDQUFDLEdBQ3RDLElBQ0ksYUFBYXN2QixHQUFTejBCLEtBQUtZLE1BQU8sT0FBUSxHQUFHWixLQUFLUyxhQUFjLENBQzVEb0MsS0FBTSxDQUFFcTBCLFFBQU83dUIsS0FBTWxELEVBQVFrRCxNQUM3QjNILFFBQVNWLEtBQUtVLFFBQ2RrMEIsV0FBWXp2QixFQUFReXZCLFdBQ3BCRSxNQUFPVyxJQUVmLENBQ0EsTUFBT3J0QixHQUNILEdBQUltbEIsR0FBWW5sQixHQUNaLE1BQU8sQ0FBRUMsS0FBTSxDQUFFa3RCLEtBQU0sTUFBUW50QixTQUVuQyxNQUFNQSxDQUNWLENBQ0osQ0FRQSxrQkFBTSt1QixDQUFhNWMsR0FDZixJQUNJLE1BQU0sUUFBRXBWLEdBQVlvVixFQUFRMGIsRUEvRUYsU0FBVXRyQixFQUFHMEMsR0FDL0MsSUFBSTZvQixFQUFJLENBQUMsRUFDVCxJQUFLLElBQUlDLEtBQUt4ckIsRUFBT3hLLE9BQU9xTixVQUFVQyxlQUFlWCxLQUFLbkMsRUFBR3dyQixJQUFNOW9CLEVBQUV5TSxRQUFRcWMsR0FBSyxJQUM5RUQsRUFBRUMsR0FBS3hyQixFQUFFd3JCLElBQ2IsR0FBUyxNQUFMeHJCLEdBQXFELG1CQUFqQ3hLLE9BQU9pMkIsc0JBQ3RCLEtBQUlwWixFQUFJLEVBQWIsSUFBZ0JtWixFQUFJaDJCLE9BQU9pMkIsc0JBQXNCenJCLEdBQUlxUyxFQUFJbVosRUFBRTF6QixPQUFRdWEsSUFDM0QzUCxFQUFFeU0sUUFBUXFjLEVBQUVuWixJQUFNLEdBQUs3YyxPQUFPcU4sVUFBVTZvQixxQkFBcUJ2cEIsS0FBS25DLEVBQUd3ckIsRUFBRW5aLE1BQ3ZFa1osRUFBRUMsRUFBRW5aLElBQU1yUyxFQUFFd3JCLEVBQUVuWixJQUY0QixDQUl0RCxPQUFPa1osQ0FDWCxDQXFFK0MsQ0FBTzNiLEVBQVEsQ0FBQyxZQUM3QzFYLEVBQU8xQyxPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBRzZ2QixHQUFPOXdCLEdBTXBELE1BTEksYUFBYzh3QixJQUVkcHpCLEVBQUt1MEIsVUFBWW5CLGFBQW1DLEVBQVNBLEVBQUtvQixnQkFDM0R4MEIsRUFBZSxnQkFFYjR4QixHQUFTejBCLEtBQUtZLE1BQU8sT0FBUSxHQUFHWixLQUFLUywwQkFBMkIsQ0FDekVvQyxLQUFNQSxFQUNObkMsUUFBU1YsS0FBS1UsUUFDZG8wQixNQUFPYSxHQUNQZixXQUFZenZCLGFBQXlDLEVBQVNBLEVBQVF5dkIsWUFFOUUsQ0FDQSxNQUFPeHNCLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUNIQyxLQUFNLENBQ0ZrdUIsV0FBWSxLQUNaaEIsS0FBTSxNQUVWbnRCLFNBR1IsTUFBTUEsQ0FDVixDQUNKLENBTUEsZ0JBQU1rdkIsQ0FBV0MsR0FDYixJQUNJLGFBQWE5QyxHQUFTejBCLEtBQUtZLE1BQU8sT0FBUSxHQUFHWixLQUFLUyxrQkFBbUIsQ0FDakVvQyxLQUFNMDBCLEVBQ043MkIsUUFBU1YsS0FBS1UsUUFDZG8wQixNQUFPVyxJQUVmLENBQ0EsTUFBT3J0QixHQUNILEdBQUltbEIsR0FBWW5sQixHQUNaLE1BQU8sQ0FBRUMsS0FBTSxDQUFFa3RCLEtBQU0sTUFBUW50QixTQUVuQyxNQUFNQSxDQUNWLENBQ0osQ0FPQSxlQUFNb3ZCLENBQVVqZCxHQUNaLElBQUlyVixFQUFJZ0QsRUFBSUMsRUFBSWdCLEVBQUlrVyxFQUFJQyxFQUFJbVksRUFDNUIsSUFDSSxNQUFNQyxFQUFhLENBQUVDLFNBQVUsS0FBTUMsU0FBVSxFQUFHQyxNQUFPLEdBQ25Eem9CLFFBQWlCcWxCLEdBQVN6MEIsS0FBS1ksTUFBTyxNQUFPLEdBQUdaLEtBQUtTLGtCQUFtQixDQUMxRUMsUUFBU1YsS0FBS1UsUUFDZGltQixlQUFlLEVBQ2ZyYixNQUFPLENBQ0h3c0IsS0FBdUksUUFBaEk1dkIsRUFBNEUsUUFBdEVoRCxFQUFLcVYsYUFBdUMsRUFBU0EsRUFBT3VkLFlBQXlCLElBQVA1eUIsT0FBZ0IsRUFBU0EsRUFBRzRDLGtCQUErQixJQUFQSSxFQUFnQkEsRUFBSyxHQUNwSzZ2QixTQUE4SSxRQUFuSTV1QixFQUErRSxRQUF6RWhCLEVBQUtvUyxhQUF1QyxFQUFTQSxFQUFPeWQsZUFBNEIsSUFBUDd2QixPQUFnQixFQUFTQSxFQUFHTCxrQkFBK0IsSUFBUHFCLEVBQWdCQSxFQUFLLElBRS9LMnJCLE1BQU8wQixLQUVYLEdBQUlwbkIsRUFBU2hILE1BQ1QsTUFBTWdILEVBQVNoSCxNQUNuQixNQUFNNnZCLFFBQWM3b0IsRUFBU0csT0FDdkJzb0IsRUFBeUQsUUFBaER4WSxFQUFLalEsRUFBUzFPLFFBQVFtRCxJQUFJLHdCQUFxQyxJQUFQd2IsRUFBZ0JBLEVBQUssRUFDdEY2WSxFQUEwRyxRQUFqR1QsRUFBNkMsUUFBdkNuWSxFQUFLbFEsRUFBUzFPLFFBQVFtRCxJQUFJLGVBQTRCLElBQVB5YixPQUFnQixFQUFTQSxFQUFHbGUsTUFBTSxZQUF5QixJQUFQcTJCLEVBQWdCQSxFQUFLLEdBUzdJLE9BUklTLEVBQU16MUIsT0FBUyxJQUNmeTFCLEVBQU1ueEIsUUFBU294QixJQUNYLE1BQU1MLEVBQU9odkIsU0FBU3F2QixFQUFLLzJCLE1BQU0sS0FBSyxHQUFHQSxNQUFNLEtBQUssR0FBR2czQixVQUFVLEVBQUcsSUFDOURDLEVBQU10d0IsS0FBS1csTUFBTXl2QixFQUFLLzJCLE1BQU0sS0FBSyxHQUFHQSxNQUFNLEtBQUssSUFDckRzMkIsRUFBVyxHQUFHVyxTQUFhUCxJQUUvQkosRUFBV0csTUFBUS91QixTQUFTK3VCLElBRXpCLENBQUV4dkIsS0FBTWxJLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHNnhCLEdBQVFQLEdBQWF0dkIsTUFBTyxLQUMvRSxDQUNBLE1BQU9BLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLENBQUU0dkIsTUFBTyxJQUFNN3ZCLFNBRWxDLE1BQU1BLENBQ1YsQ0FDSixDQVFBLGlCQUFNa3dCLENBQVlDLEdBQ2R6RSxHQUFheUUsR0FDYixJQUNJLGFBQWE5RCxHQUFTejBCLEtBQUtZLE1BQU8sTUFBTyxHQUFHWixLQUFLUyxtQkFBbUI4M0IsSUFBTyxDQUN2RTczQixRQUFTVixLQUFLVSxRQUNkbzBCLE1BQU9XLElBRWYsQ0FDQSxNQUFPcnRCLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLENBQUVrdEIsS0FBTSxNQUFRbnRCLFNBRW5DLE1BQU1BLENBQ1YsQ0FDSixDQVFBLG9CQUFNb3dCLENBQWVELEVBQUtoQixHQUN0QnpELEdBQWF5RSxHQUNiLElBQ0ksYUFBYTlELEdBQVN6MEIsS0FBS1ksTUFBTyxNQUFPLEdBQUdaLEtBQUtTLG1CQUFtQjgzQixJQUFPLENBQ3ZFMTFCLEtBQU0wMEIsRUFDTjcyQixRQUFTVixLQUFLVSxRQUNkbzBCLE1BQU9XLElBRWYsQ0FDQSxNQUFPcnRCLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLENBQUVrdEIsS0FBTSxNQUFRbnRCLFNBRW5DLE1BQU1BLENBQ1YsQ0FDSixDQVVBLGdCQUFNcXdCLENBQVdwYixFQUFJcWIsR0FBbUIsR0FDcEM1RSxHQUFhelcsR0FDYixJQUNJLGFBQWFvWCxHQUFTejBCLEtBQUtZLE1BQU8sU0FBVSxHQUFHWixLQUFLUyxtQkFBbUI0YyxJQUFNLENBQ3pFM2MsUUFBU1YsS0FBS1UsUUFDZG1DLEtBQU0sQ0FDRjgxQixtQkFBb0JELEdBRXhCNUQsTUFBT1csSUFFZixDQUNBLE1BQU9ydEIsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLE1BQVFudEIsU0FFbkMsTUFBTUEsQ0FDVixDQUNKLENBQ0Esa0JBQU13dUIsQ0FBYXJjLEdBQ2Z1WixHQUFhdlosRUFBT3FlLFFBQ3BCLElBQ0ksTUFBTSxLQUFFdndCLEVBQUksTUFBRUQsU0FBZ0Jxc0IsR0FBU3owQixLQUFLWSxNQUFPLE1BQU8sR0FBR1osS0FBS1MsbUJBQW1COFosRUFBT3FlLGlCQUFrQixDQUMxR2w0QixRQUFTVixLQUFLVSxRQUNkbzBCLE1BQVErRCxJQUNHLENBQUV4d0IsS0FBTSxDQUFFd3dCLFdBQVd6d0IsTUFBTyxTQUczQyxNQUFPLENBQUVDLE9BQU1ELFFBQ25CLENBQ0EsTUFBT0EsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLENBQ0EsbUJBQU0wdUIsQ0FBY3ZjLEdBQ2hCdVosR0FBYXZaLEVBQU9xZSxRQUNwQjlFLEdBQWF2WixFQUFPOEMsSUFDcEIsSUFJSSxNQUFPLENBQUVoVixXQUhVb3NCLEdBQVN6MEIsS0FBS1ksTUFBTyxTQUFVLEdBQUdaLEtBQUtTLG1CQUFtQjhaLEVBQU9xZSxrQkFBa0JyZSxFQUFPOEMsS0FBTSxDQUMvRzNjLFFBQVNWLEtBQUtVLFVBRUgwSCxNQUFPLEtBQzFCLENBQ0EsTUFBT0EsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLEVDNVFHLE1BQU0wd0IsR0FBc0IsQ0FDL0J6SCxRQUFVMXRCLEdBQ0RndEIsS0FHRXhqQixXQUFXeWpCLGFBQWFTLFFBQVExdEIsR0FGNUIsS0FJZnF0QixRQUFTLENBQUNydEIsRUFBS3JELEtBQ05xd0IsTUFHTHhqQixXQUFXeWpCLGFBQWFJLFFBQVFydEIsRUFBS3JELElBRXpDMndCLFdBQWF0dEIsSUFDSmd0QixNQUdMeGpCLFdBQVd5akIsYUFBYUssV0FBV3R0QixLQU9wQyxTQUFTbzFCLEdBQTBCQyxFQUFRLENBQUMsR0FDL0MsTUFBTyxDQUNIM0gsUUFBVTF0QixHQUNDcTFCLEVBQU1yMUIsSUFBUSxLQUV6QnF0QixRQUFTLENBQUNydEIsRUFBS3JELEtBQ1gwNEIsRUFBTXIxQixHQUFPckQsR0FFakIyd0IsV0FBYXR0QixXQUNGcTFCLEVBQU1yMUIsSUFHekIsQ0NwQ08sTUFBTXMxQixNQUlDOXJCLFlBQ053akIsTUFDQXhqQixXQUFXeWpCLGNBQzJELFNBQXRFempCLFdBQVd5akIsYUFBYVMsUUFBUSxtQ0FPakMsTUFBTTZILFdBQWdDMXZCLE1BQ3pDLFdBQUFoSixDQUFZMEksR0FDUlEsTUFBTVIsR0FDTmxKLEtBQUttNUIsa0JBQW1CLENBQzVCLEVBRUcsTUFBTUMsV0FBeUNGLElBNkIvQ2p4QixlQUFlb3hCLEdBQWN2eUIsRUFBTXd5QixFQUFnQjV5QixHQUNsRHV5QixJQUNBM2pCLFFBQVFDLElBQUksbURBQW9Eek8sRUFBTXd5QixHQUUxRSxNQUFNQyxFQUFrQixJQUFJcHNCLFdBQVd5UixnQkFpQnZDLE9BaEJJMGEsRUFBaUIsR0FDakI1bUIsV0FBVyxLQUNQNm1CLEVBQWdCMWEsUUFDWm9hLElBQ0EzakIsUUFBUUMsSUFBSSx1REFBd0R6TyxJQUV6RXd5QixTQVVNNXBCLFFBQVFDLFVBQVVuSSxLQUFLLElBQU0yRixXQUFXNGUsVUFBVXlOLE1BQU1DLFFBQVEzeUIsRUFBeUIsSUFBbkJ3eUIsRUFDN0UsQ0FDRUksS0FBTSxZQUNOQyxhQUFhLEdBRWYsQ0FDRUQsS0FBTSxZQUNOcjFCLE9BQVFrMUIsRUFBZ0JsMUIsUUFDekI0RCxNQUFPMnhCLElBQ1YsSUFBSUEsRUFhQyxDQUNELEdBQXVCLElBQW5CTixFQUlBLE1BSElMLElBQ0EzakIsUUFBUUMsSUFBSSxnRUFBaUV6TyxHQUUzRSxJQUFJc3lCLEdBQWlDLHNEQUFzRHR5Qix5QkFHakcsR0FBSW15QixHQUNBLElBQ0ksTUFBTWhwQixRQUFlOUMsV0FBVzRlLFVBQVV5TixNQUFNbHVCLFFBQ2hEZ0ssUUFBUUMsSUFBSSxtREFBb0R4TixLQUFLQyxVQUFVaUksRUFBUSxLQUFNLE1BQ2pHLENBQ0EsTUFBTzVDLEdBQ0hpSSxRQUFROGQsS0FBSyx1RUFBd0UvbEIsRUFDekYsQ0FPSixPQURBaUksUUFBUThkLEtBQUssaVFBQ0Exc0IsR0FFckIsQ0FwQ1F1eUIsSUFDQTNqQixRQUFRQyxJQUFJLCtDQUFnRHpPLEVBQU04eUIsRUFBSzl5QixNQUUzRSxJQUNJLGFBQWFKLEdBQ2pCLENBQ0EsUUFDUXV5QixJQUNBM2pCLFFBQVFDLElBQUksK0NBQWdEek8sRUFBTTh5QixFQUFLOXlCLEtBRS9FLElBNEJaLEVDdkhPLFdBQ0gsR0FBMEIsaUJBQWZxRyxXQUVYLElBQ0loTixPQUFPQyxlQUFlRCxPQUFPcU4sVUFBVyxZQUFhLENBQ2pEM0osSUFBSyxXQUNELE9BQU83RCxJQUNYLEVBQ0E2NUIsY0FBYyxJQUdsQkMsVUFBVTNzQixXQUFhMnNCLGlCQUVoQjM1QixPQUFPcU4sVUFBVXNzQixTQUM1QixDQUNBLE1BQU96c0IsR0FDaUIsb0JBQVRyQixPQUVQQSxLQUFLbUIsV0FBYW5CLEtBRTFCLENBQ0osQ0NkQSt0QixHQUNBLE1BQU1DLEdBQWtCLENBQ3BCdjVCLElWRnNCLHdCVUd0QjJ4QixXVkZ1QixzQlVHdkJoRyxrQkFBa0IsRUFDbEJDLGdCQUFnQixFQUNoQkMsb0JBQW9CLEVBQ3BCNXJCLFFBQVMsR0FDVDZyQixTQUFVLFdBQ1YwTixPQUFPLEVBQ1BDLDhCQUE4QixHQUVsQ2p5QixlQUFla3lCLEdBQVNyekIsRUFBTXd5QixFQUFnQjV5QixHQUMxQyxhQUFhQSxHQUNqQixDQUNlLE1BQU0wekIsR0FJakIsV0FBQTU1QixDQUFZMkUsR0FDUixJQUFJRCxFQUFJZ0QsRUFDUmxJLEtBQUtxNkIsY0FBZ0IsS0FDckJyNkIsS0FBS3M2QixvQkFBc0IsSUFBSUMsSUFDL0J2NkIsS0FBS3c2QixrQkFBb0IsS0FDekJ4NkIsS0FBS3k2QiwwQkFBNEIsS0FDakN6NkIsS0FBSzA2QixtQkFBcUIsS0FPMUIxNkIsS0FBSzI2QixrQkFBb0IsS0FDekIzNkIsS0FBS3NzQixvQkFBcUIsRUFDMUJ0c0IsS0FBS2s2Qiw4QkFBK0IsRUFDcENsNkIsS0FBSzQ2QiwyQkFBNEIsRUFDakM1NkIsS0FBSzY2QixjQUFlLEVBQ3BCNzZCLEtBQUs4NkIsY0FBZ0IsR0FJckI5NkIsS0FBSys2QixpQkFBbUIsS0FDeEIvNkIsS0FBS21oQixPQUFTN0wsUUFBUUMsSUFDdEJ2VixLQUFLZzdCLFdBQWFaLEdBQWFhLGVBQy9CYixHQUFhYSxnQkFBa0IsRUFDM0JqN0IsS0FBS2c3QixXQUFhLEdBQUssTUFDdkIxbEIsUUFBUThkLEtBQUssZ05BRWpCLE1BQU10dUIsRUFBVzNFLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHNHpCLElBQWtCNzBCLEdBMERuRSxHQXpEQW5GLEtBQUtrN0IsbUJBQXFCcDJCLEVBQVNtMUIsTUFDTCxtQkFBbkJuMUIsRUFBU20xQixRQUNoQmo2QixLQUFLbWhCLE9BQVNyYyxFQUFTbTFCLE9BRTNCajZCLEtBQUtxc0IsZUFBaUJ2bkIsRUFBU3VuQixlQUMvQnJzQixLQUFLb3lCLFdBQWF0dEIsRUFBU3N0QixXQUMzQnB5QixLQUFLb3NCLGlCQUFtQnRuQixFQUFTc25CLGlCQUNqQ3BzQixLQUFLbTdCLE1BQVEsSUFBSSxHQUFlLENBQzVCMTZCLElBQUtxRSxFQUFTckUsSUFDZEMsUUFBU29FLEVBQVNwRSxRQUNsQkUsTUFBT2tFLEVBQVNsRSxRQUVwQlosS0FBS1MsSUFBTXFFLEVBQVNyRSxJQUNwQlQsS0FBS1UsUUFBVW9FLEVBQVNwRSxRQUN4QlYsS0FBS1ksTUFBUSxHQUFha0UsRUFBU2xFLE9BQ25DWixLQUFLNDVCLEtBQU85MEIsRUFBUzgwQixNQUFRTyxHQUM3Qm42QixLQUFLc3NCLG1CQUFxQnhuQixFQUFTd25CLG1CQUNuQ3RzQixLQUFLdXNCLFNBQVd6bkIsRUFBU3luQixTQUN6QnZzQixLQUFLazZCLDZCQUErQnAxQixFQUFTbzFCLDZCQUN6Q3AxQixFQUFTODBCLEtBQ1Q1NUIsS0FBSzQ1QixLQUFPOTBCLEVBQVM4MEIsS0FFaEIsT0FBd0csUUFBdkYxMEIsRUFBb0IsT0FBZmlJLGlCQUFzQyxJQUFmQSxnQkFBd0IsRUFBU0EsV0FBVzRlLGlCQUE4QixJQUFQN21CLE9BQWdCLEVBQVNBLEVBQUdzMEIsT0FDakp4NUIsS0FBSzQ1QixLQUFPUCxHQUdacjVCLEtBQUs0NUIsS0FBT08sR0FFaEJuNkIsS0FBS283QixLQUFPLENBQUU1NEIsS0FBTSxJQUNwQnhDLEtBQUtxN0IsZUFBaUJqbUIsT0FBT2ttQixpQkFDN0J0N0IsS0FBSzAyQixJQUFNLENBQ1A2RSxPQUFRdjdCLEtBQUt3N0IsUUFBUXB2QixLQUFLcE0sTUFDMUJ5N0IsT0FBUXo3QixLQUFLMDdCLFFBQVF0dkIsS0FBS3BNLE1BQzFCMjdCLFNBQVUzN0IsS0FBSzQ3QixVQUFVeHZCLEtBQUtwTSxNQUM5QjY3QixVQUFXNzdCLEtBQUs4N0IsV0FBVzF2QixLQUFLcE0sTUFDaEMyMkIsWUFBYTMyQixLQUFLNDJCLGFBQWF4cUIsS0FBS3BNLE1BQ3BDKzdCLG1CQUFvQi83QixLQUFLZzhCLG9CQUFvQjV2QixLQUFLcE0sTUFDbERpOEIsK0JBQWdDajhCLEtBQUtrOEIsZ0NBQWdDOXZCLEtBQUtwTSxPQUUxRUEsS0FBS3FzQixlQUNEdm5CLEVBQVNxc0IsUUFDVG54QixLQUFLbXhCLFFBQVVyc0IsRUFBU3FzQixRQUdwQlIsS0FDQTN3QixLQUFLbXhCLFFBQVUySCxJQUdmOTRCLEtBQUtxNkIsY0FBZ0IsQ0FBQyxFQUN0QnI2QixLQUFLbXhCLFFBQVU0SCxHQUEwQi80QixLQUFLcTZCLGlCQUt0RHI2QixLQUFLcTZCLGNBQWdCLENBQUMsRUFDdEJyNkIsS0FBS214QixRQUFVNEgsR0FBMEIvNEIsS0FBS3E2QixnQkFFOUMsTUFBZWx0QixXQUFXZ3ZCLGtCQUFvQm44QixLQUFLcXNCLGdCQUFrQnJzQixLQUFLb3lCLFdBQVksQ0FDdEYsSUFDSXB5QixLQUFLKzZCLGlCQUFtQixJQUFJNXRCLFdBQVdndkIsaUJBQWlCbjhCLEtBQUtveUIsV0FDakUsQ0FDQSxNQUFPL2tCLEdBQ0hpSSxRQUFRbE4sTUFBTSx5RkFBMEZpRixFQUM1RyxDQUNpQyxRQUFoQ25GLEVBQUtsSSxLQUFLKzZCLHdCQUFxQyxJQUFQN3lCLEdBQXlCQSxFQUFHazBCLGlCQUFpQixVQUFXbjBCLE1BQU84SixJQUNwRy9SLEtBQUtxOEIsT0FBTywyREFBNER0cUIsU0FDbEUvUixLQUFLczhCLHNCQUFzQnZxQixFQUFNMUosS0FBSzBKLE1BQU9BLEVBQU0xSixLQUFLMnNCLFNBQVMsSUFFL0UsQ0FDQWgxQixLQUFLdThCLFlBQ1QsQ0FDQSxNQUFBRixJQUFVMTFCLEdBSU4sT0FISTNHLEtBQUtrN0Isa0JBQ0xsN0IsS0FBS21oQixPQUFPLGdCQUFnQm5oQixLQUFLZzdCLGVBQWUsUUFBWSxJQUFJN04sTUFBT3FQLG1CQUFvQjcxQixHQUV4RjNHLElBQ1gsQ0FNQSxnQkFBTXU4QixHQUNGLE9BQUl2OEIsS0FBSzI2QixvQkFHVDM2QixLQUFLMjZCLGtCQUFvQixnQkFDUjM2QixLQUFLeThCLGNBQWMsRUFBR3gwQixlQUNsQmpJLEtBQUswOEIsZUFGRCxVQUZSMThCLEtBQUsyNkIsaUJBUTFCLENBT0EsaUJBQU0rQixHQUNGLElBQUl4M0IsRUFDSixJQUNJLE1BQU1xVixFUDFHWCxTQUFnQ29pQixHQUNuQyxNQUFNMXNCLEVBQVMsQ0FBQyxFQUNWeFAsRUFBTSxJQUFJK0YsSUFBSW0yQixHQUNwQixHQUFJbDhCLEVBQUkreUIsTUFBd0IsTUFBaEIveUIsRUFBSSt5QixLQUFLLEdBQ3JCLElBQzZCLElBQUlqTyxnQkFBZ0I5a0IsRUFBSSt5QixLQUFLNEUsVUFBVSxJQUMvQ3J4QixRQUFRLENBQUN6RyxFQUFPcUQsS0FDN0JzTSxFQUFPdE0sR0FBT3JELEdBRXRCLENBQ0EsTUFBTytNLEdBRVAsQ0FNSixPQUhBNU0sRUFBSWdCLGFBQWFzRixRQUFRLENBQUN6RyxFQUFPcUQsS0FDN0JzTSxFQUFPdE0sR0FBT3JELElBRVgyUCxDQUNYLENPdUYyQjJzQixDQUF1QjN3QixPQUFPNHdCLFNBQVNGLE1BQ3RELElBQUlHLEVBQWtCLE9BYXRCLEdBWkk5OEIsS0FBSys4Qix5QkFBeUJ4aUIsR0FDOUJ1aUIsRUFBa0IsaUJBRVA5OEIsS0FBS2c5QixnQkFBZ0J6aUIsS0FDaEN1aUIsRUFBa0IsUUFRbEIsTUFBZTk4QixLQUFLc3NCLG9CQUEwQyxTQUFwQndRLEVBQTRCLENBQ3RFLE1BQU0sS0FBRXowQixFQUFJLE1BQUVELFNBQWdCcEksS0FBS2k5QixtQkFBbUIxaUIsRUFBUXVpQixHQUM5RCxHQUFJMTBCLEVBQU8sQ0FFUCxHQURBcEksS0FBS3E4QixPQUFPLGlCQUFrQixtQ0FBb0NqMEIsR1Q1Ry9FLFNBQTBDQSxHQUM3QyxPQUFPbWxCLEdBQVlubEIsSUFBeUIsbUNBQWZBLEVBQU10QixJQUN2QyxDUzJHd0JvMkIsQ0FBaUM5MEIsR0FBUSxDQUN6QyxNQUFNNnJCLEVBQXFDLFFBQXhCL3VCLEVBQUtrRCxFQUFNWSxlQUE0QixJQUFQOUQsT0FBZ0IsRUFBU0EsRUFBRzZELEtBQy9FLEdBQWtCLDRCQUFka3JCLEdBQ2MsdUJBQWRBLEdBQ2Msa0NBQWRBLEVBQ0EsTUFBTyxDQUFFN3JCLFFBRWpCLENBSUEsYUFETXBJLEtBQUttOUIsaUJBQ0osQ0FBRS8wQixRQUNiLENBQ0EsTUFBTSxRQUFFNHNCLEVBQU8sYUFBRW9JLEdBQWlCLzBCLEVBV2xDLE9BVkFySSxLQUFLcThCLE9BQU8saUJBQWtCLDBCQUEyQnJILEVBQVMsZ0JBQWlCb0ksU0FDN0VwOUIsS0FBS3E5QixhQUFhckksR0FDeEJ0aUIsV0FBV3pLLFVBQ2MsYUFBakJtMUIsUUFDTXA5QixLQUFLczhCLHNCQUFzQixvQkFBcUJ0SCxTQUdoRGgxQixLQUFLczhCLHNCQUFzQixZQUFhdEgsSUFFbkQsR0FDSSxDQUFFNXNCLE1BQU8sS0FDcEIsQ0FHQSxhQURNcEksS0FBS3M5QixxQkFDSixDQUFFbDFCLE1BQU8sS0FDcEIsQ0FDQSxNQUFPQSxHQUNILE9BQUltbEIsR0FBWW5sQixHQUNMLENBQUVBLFNBRU4sQ0FDSEEsTUFBTyxJQUFJcWxCLEdBQWlCLHlDQUEwQ3JsQixHQUU5RSxDQUNBLGNBQ1VwSSxLQUFLdTlCLDBCQUNYdjlCLEtBQUtxOEIsT0FBTyxpQkFBa0IsTUFDbEMsQ0FDSixDQU1BLHVCQUFNbUIsQ0FBa0JDLEdBQ3BCLElBQUl2NEIsRUFBSWdELEVBQUlDLEVBQ1osSUFDSSxNQUFNUCxRQUFZNnNCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRLEdBQUdaLEtBQUtTLGFBQWMsQ0FDakVDLFFBQVNWLEtBQUtVLFFBQ2RtQyxLQUFNLENBQ0Z3RixLQUFtSixRQUE1SUgsRUFBOEYsUUFBeEZoRCxFQUFLdTRCLGFBQWlELEVBQVNBLEVBQVl0NEIsZUFBNEIsSUFBUEQsT0FBZ0IsRUFBU0EsRUFBR21ELFlBQXlCLElBQVBILEVBQWdCQSxFQUFLLENBQUMsRUFDakx3MUIscUJBQXNCLENBQUVDLGNBQXdHLFFBQXhGeDFCLEVBQUtzMUIsYUFBaUQsRUFBU0EsRUFBWXQ0QixlQUE0QixJQUFQZ0QsT0FBZ0IsRUFBU0EsRUFBR3kxQixlQUV4SzlJLE1BQU9DLE1BRUwsS0FBRTFzQixFQUFJLE1BQUVELEdBQVVSLEVBQ3hCLEdBQUlRLElBQVVDLEVBQ1YsTUFBTyxDQUFFQSxLQUFNLENBQUVrdEIsS0FBTSxLQUFNUCxRQUFTLE1BQVE1c0IsTUFBT0EsR0FFekQsTUFBTTRzQixFQUFVM3NCLEVBQUsyc0IsUUFDZk8sRUFBT2x0QixFQUFLa3RCLEtBS2xCLE9BSklsdEIsRUFBSzJzQixnQkFDQ2gxQixLQUFLcTlCLGFBQWFoMUIsRUFBSzJzQixlQUN2QmgxQixLQUFLczhCLHNCQUFzQixZQUFhdEgsSUFFM0MsQ0FBRTNzQixLQUFNLENBQUVrdEIsT0FBTVAsV0FBVzVzQixNQUFPLEtBQzdDLENBQ0EsTUFBT0EsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixTQUVsRCxNQUFNQSxDQUNWLENBQ0osQ0FXQSxZQUFNeTFCLENBQU9KLEdBQ1QsSUFBSXY0QixFQUFJZ0QsRUFBSUMsRUFDWixJQUNJLElBQUlQLEVBQ0osR0FBSSxVQUFXNjFCLEVBQWEsQ0FDeEIsTUFBTSxNQUFFdkcsRUFBSyxTQUFFNEcsRUFBUSxRQUFFMzRCLEdBQVlzNEIsRUFDckMsSUFBSXhLLEVBQWdCLEtBQ2hCOEssRUFBc0IsS0FDSixTQUFsQi85QixLQUFLdXNCLFlBRUowRyxFQUFlOEssU0FBNkI1TCxHQUEwQm55QixLQUFLbXhCLFFBQVNueEIsS0FBS295QixhQUU5RnhxQixRQUFZNnNCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRLEdBQUdaLEtBQUtTLGFBQWMsQ0FDM0RDLFFBQVNWLEtBQUtVLFFBQ2RrMEIsV0FBWXp2QixhQUF5QyxFQUFTQSxFQUFRNjRCLGdCQUN0RW43QixLQUFNLENBQ0ZxMEIsUUFDQTRHLFdBQ0F6MUIsS0FBZ0YsUUFBekVuRCxFQUFLQyxhQUF5QyxFQUFTQSxFQUFRa0QsWUFBeUIsSUFBUG5ELEVBQWdCQSxFQUFLLENBQUMsRUFDOUd3NEIscUJBQXNCLENBQUVDLGNBQWV4NEIsYUFBeUMsRUFBU0EsRUFBUXk0QixjQUNqR0ssZUFBZ0JoTCxFQUNoQmlMLHNCQUF1QkgsR0FFM0JqSixNQUFPQyxJQUVmLEtBQ0ssTUFBSSxVQUFXMEksR0FlaEIsTUFBTSxJQUFJNVAsR0FBNEIsbUVBZlQsQ0FDN0IsTUFBTSxNQUFFc1EsRUFBSyxTQUFFTCxFQUFRLFFBQUUzNEIsR0FBWXM0QixFQUNyQzcxQixRQUFZNnNCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRLEdBQUdaLEtBQUtTLGFBQWMsQ0FDM0RDLFFBQVNWLEtBQUtVLFFBQ2RtQyxLQUFNLENBQ0ZzN0IsUUFDQUwsV0FDQXoxQixLQUFnRixRQUF6RUgsRUFBSy9DLGFBQXlDLEVBQVNBLEVBQVFrRCxZQUF5QixJQUFQSCxFQUFnQkEsRUFBSyxDQUFDLEVBQzlHK04sUUFBc0YsUUFBNUU5TixFQUFLaEQsYUFBeUMsRUFBU0EsRUFBUThRLGVBQTRCLElBQVA5TixFQUFnQkEsRUFBSyxNQUNuSHUxQixxQkFBc0IsQ0FBRUMsY0FBZXg0QixhQUF5QyxFQUFTQSxFQUFReTRCLGVBRXJHOUksTUFBT0MsSUFFZixDQUdBLENBQ0EsTUFBTSxLQUFFMXNCLEVBQUksTUFBRUQsR0FBVVIsRUFDeEIsR0FBSVEsSUFBVUMsRUFDVixNQUFPLENBQUVBLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixNQUFPQSxHQUV6RCxNQUFNNHNCLEVBQVUzc0IsRUFBSzJzQixRQUNmTyxFQUFPbHRCLEVBQUtrdEIsS0FLbEIsT0FKSWx0QixFQUFLMnNCLGdCQUNDaDFCLEtBQUtxOUIsYUFBYWgxQixFQUFLMnNCLGVBQ3ZCaDFCLEtBQUtzOEIsc0JBQXNCLFlBQWF0SCxJQUUzQyxDQUFFM3NCLEtBQU0sQ0FBRWt0QixPQUFNUCxXQUFXNXNCLE1BQU8sS0FDN0MsQ0FDQSxNQUFPQSxHQUNILEdBQUltbEIsR0FBWW5sQixHQUNaLE1BQU8sQ0FBRUMsS0FBTSxDQUFFa3RCLEtBQU0sS0FBTVAsUUFBUyxNQUFRNXNCLFNBRWxELE1BQU1BLENBQ1YsQ0FDSixDQVNBLHdCQUFNZzJCLENBQW1CWCxHQUNyQixJQUNJLElBQUk3MUIsRUFDSixHQUFJLFVBQVc2MUIsRUFBYSxDQUN4QixNQUFNLE1BQUV2RyxFQUFLLFNBQUU0RyxFQUFRLFFBQUUzNEIsR0FBWXM0QixFQUNyQzcxQixRQUFZNnNCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRLEdBQUdaLEtBQUtTLGdDQUFpQyxDQUM5RUMsUUFBU1YsS0FBS1UsUUFDZG1DLEtBQU0sQ0FDRnEwQixRQUNBNEcsV0FDQUoscUJBQXNCLENBQUVDLGNBQWV4NEIsYUFBeUMsRUFBU0EsRUFBUXk0QixlQUVyRzlJLE1BQU9VLElBRWYsS0FDSyxNQUFJLFVBQVdpSSxHQWFoQixNQUFNLElBQUk1UCxHQUE0QixtRUFiVCxDQUM3QixNQUFNLE1BQUVzUSxFQUFLLFNBQUVMLEVBQVEsUUFBRTM0QixHQUFZczRCLEVBQ3JDNzFCLFFBQVk2c0IsR0FBU3owQixLQUFLWSxNQUFPLE9BQVEsR0FBR1osS0FBS1MsZ0NBQWlDLENBQzlFQyxRQUFTVixLQUFLVSxRQUNkbUMsS0FBTSxDQUNGczdCLFFBQ0FMLFdBQ0FKLHFCQUFzQixDQUFFQyxjQUFleDRCLGFBQXlDLEVBQVNBLEVBQVF5NEIsZUFFckc5SSxNQUFPVSxJQUVmLENBR0EsQ0FDQSxNQUFNLEtBQUVudEIsRUFBSSxNQUFFRCxHQUFVUixFQUN4QixPQUFJUSxFQUNPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixTQUV4Q0MsR0FBU0EsRUFBSzJzQixTQUFZM3NCLEVBQUtrdEIsTUFHckNsdEIsRUFBSzJzQixnQkFDQ2gxQixLQUFLcTlCLGFBQWFoMUIsRUFBSzJzQixlQUN2QmgxQixLQUFLczhCLHNCQUFzQixZQUFhajBCLEVBQUsyc0IsVUFFaEQsQ0FDSDNzQixLQUFNbEksT0FBT2lHLE9BQU8sQ0FBRW12QixLQUFNbHRCLEVBQUtrdEIsS0FBTVAsUUFBUzNzQixFQUFLMnNCLFNBQVkzc0IsRUFBS2tzQixjQUFnQixDQUFFOEosYUFBY2gyQixFQUFLa3NCLGVBQWtCLE1BQzdIbnNCLFVBUk8sQ0FBRUMsS0FBTSxDQUFFa3RCLEtBQU0sS0FBTVAsUUFBUyxNQUFRNXNCLE1BQU8sSUFBSXdsQixHQVVqRSxDQUNBLE1BQU94bEIsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixTQUVsRCxNQUFNQSxDQUNWLENBQ0osQ0FLQSxxQkFBTWsyQixDQUFnQmIsR0FDbEIsSUFBSXY0QixFQUFJZ0QsRUFBSUMsRUFBSWdCLEVBQ2hCLGFBQWFuSixLQUFLdStCLHNCQUFzQmQsRUFBWWUsU0FBVSxDQUMxRDVKLFdBQTJDLFFBQTlCMXZCLEVBQUt1NEIsRUFBWXQ0QixlQUE0QixJQUFQRCxPQUFnQixFQUFTQSxFQUFHMHZCLFdBQy9FNkosT0FBdUMsUUFBOUJ2MkIsRUFBS3UxQixFQUFZdDRCLGVBQTRCLElBQVArQyxPQUFnQixFQUFTQSxFQUFHdTJCLE9BQzNFQyxZQUE0QyxRQUE5QnYyQixFQUFLczFCLEVBQVl0NEIsZUFBNEIsSUFBUGdELE9BQWdCLEVBQVNBLEVBQUd1MkIsWUFDaEZDLG9CQUFvRCxRQUE5QngxQixFQUFLczBCLEVBQVl0NEIsZUFBNEIsSUFBUGdFLE9BQWdCLEVBQVNBLEVBQUd3MUIscUJBRWhHLENBSUEsNEJBQU1DLENBQXVCQyxHQUV6QixhQURNNytCLEtBQUsyNkIsa0JBQ0ozNkIsS0FBS3k4QixjQUFjLEVBQUd4MEIsU0FDbEJqSSxLQUFLOCtCLHdCQUF3QkQsR0FFNUMsQ0FLQSxvQkFBTUUsQ0FBZXRCLEdBQ2pCLE1BQU0sTUFBRXVCLEdBQVV2QixFQUNsQixHQUFjLFdBQVZ1QixFQUNBLGFBQWFoL0IsS0FBS2kvQixpQkFBaUJ4QixHQUV2QyxNQUFNLElBQUlqMEIsTUFBTSx5Q0FBeUN3MUIsS0FDN0QsQ0FDQSxzQkFBTUMsQ0FBaUJ4QixHQUNuQixJQUFJdjRCLEVBQUlnRCxFQUFJQyxFQUFJZ0IsRUFBSWtXLEVBQUlDLEVBQUltWSxFQUFJeUgsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSUMsRUFDaEQsSUFBSXAyQixFQUNBNG9CLEVBQ0osR0FBSSxZQUFhMkwsRUFDYnYwQixFQUFVdTBCLEVBQVl2MEIsUUFDdEI0b0IsRUFBWTJMLEVBQVkzTCxjQUV2QixDQUNELE1BQU0sTUFBRWtOLEVBQUssT0FBRU8sRUFBTSxVQUFFQyxFQUFTLFFBQUVyNkIsR0FBWXM0QixFQUM5QyxJQUFJZ0MsRUFDSixHQUFLLEtBTUEsR0FBc0IsaUJBQVhGLEVBQ1pFLEVBQWlCRixNQUVoQixDQUNELE1BQU1HLEVBQVl6ekIsT0FDbEIsS0FBSSxXQUFZeXpCLElBQ2dCLGlCQUFyQkEsRUFBVUMsVUFDZixXQUFZRCxFQUFVQyxRQUE2QyxtQkFBNUJELEVBQVVDLE9BQU9DLFFBQ3JELGdCQUFpQkYsRUFBVUMsUUFDZ0IsbUJBQWpDRCxFQUFVQyxPQUFPRSxhQUloQyxNQUFNLElBQUlyMkIsTUFBTSx5VEFIaEJpMkIsRUFBaUJDLEVBQVVDLE1BS25DLEtBckJrQixDQUNkLEdBQXNCLGlCQUFYSixLQUF5QnA2QixhQUF5QyxFQUFTQSxFQUFRMUUsS0FDMUYsTUFBTSxJQUFJK0ksTUFBTSx5RkFFcEJpMkIsRUFBaUJGLENBQ3JCLENBaUJBLE1BQU05K0IsRUFBTSxJQUFJK0YsSUFBNkUsUUFBeEV0QixFQUFLQyxhQUF5QyxFQUFTQSxFQUFRMUUsV0FBd0IsSUFBUHlFLEVBQWdCQSxFQUFLK0csT0FBTzR3QixTQUFTRixNQUMxSSxHQUFJLFdBQVk4QyxHQUFrQkEsRUFBZUcsT0FBUSxDQUNyRCxNQUFNRSxRQUFlTCxFQUFlRyxPQUFPei9CLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFFMjVCLFVBQVUsSUFBSTVTLE1BQU9xUCxlQUFpQnIzQixhQUF5QyxFQUFTQSxFQUFRODVCLGtCQUFtQixDQUV0TWg0QixRQUFTLElBQUsrNEIsT0FBUXYvQixFQUFJdy9CLEtBQU1DLElBQUt6L0IsRUFBSWs4QixPQUFVNkMsRUFBWSxDQUFFQSxhQUFjLE9BQ25GLElBQUlXLEVBQ0osR0FBSWorQixNQUFNQyxRQUFRMjlCLElBQVdBLEVBQU8sSUFBMkIsaUJBQWRBLEVBQU8sR0FDcERLLEVBQWtCTCxFQUFPLE9BRXhCLE1BQUlBLEdBQ2EsaUJBQVhBLEdBQ1Asa0JBQW1CQSxHQUNuQixjQUFlQSxHQUlmLE1BQU0sSUFBSXQyQixNQUFNLHlFQUhoQjIyQixFQUFrQkwsQ0FJdEIsQ0FDQSxLQUFJLGtCQUFtQkssR0FDbkIsY0FBZUEsSUFDMkIsaUJBQWxDQSxFQUFnQkMsZUFDcEJELEVBQWdCQyx5QkFBeUJqUSxhQUM3Q2dRLEVBQWdCck8scUJBQXFCM0IsWUFRckMsTUFBTSxJQUFJM21CLE1BQU0sNEdBUGhCTixFQUM2QyxpQkFBbENpM0IsRUFBZ0JDLGNBQ2pCRCxFQUFnQkMsZUFDaEIsSUFBSTd1QixhQUFjUixPQUFPb3ZCLEVBQWdCQyxlQUNuRHRPLEVBQVlxTyxFQUFnQnJPLFNBS3BDLEtBQ0ssQ0FDRCxLQUFNLGdCQUFpQjJOLEdBQ21CLG1CQUEvQkEsRUFBZUksYUFDcEIsY0FBZUosR0FDUyxpQkFBbkJBLEdBQ05BLEVBQWVZLFdBQ2QsYUFBY1osRUFBZVksV0FDYyxtQkFBdENaLEVBQWVZLFVBQVVDLFVBQ2hDLE1BQU0sSUFBSTkyQixNQUFNLG1HQUVwQk4sRUFBVSxDQUNOLEdBQUd6SSxFQUFJdy9CLHNEQUNQUixFQUFlWSxVQUFVQyxjQUNyQmQsRUFBWSxDQUFDLEdBQUlBLEVBQVcsSUFBTSxDQUFDLElBQ3ZDLGFBQ0EsUUFBUS8rQixFQUFJazhCLE9BQ1osY0FBNEosUUFBN0l4MEIsRUFBMkYsUUFBckZELEVBQUsvQyxhQUF5QyxFQUFTQSxFQUFRODVCLHdCQUFxQyxJQUFQLzJCLE9BQWdCLEVBQVNBLEVBQUc2M0IsZ0JBQTZCLElBQVA1M0IsRUFBZ0JBLEdBQUssSUFBSWdsQixNQUFPcVAsb0JBQ3pHLFFBQXJGcnpCLEVBQUtoRSxhQUF5QyxFQUFTQSxFQUFRODVCLHdCQUFxQyxJQUFQOTFCLE9BQWdCLEVBQVNBLEVBQUdvM0IsV0FDekgsQ0FBQyxlQUFlcDdCLEVBQVE4NUIsaUJBQWlCc0IsYUFDekMsT0FDcUYsUUFBckZsaEIsRUFBS2xhLGFBQXlDLEVBQVNBLEVBQVE4NUIsd0JBQXFDLElBQVA1ZixPQUFnQixFQUFTQSxFQUFHbWhCLGdCQUN6SCxDQUFDLG9CQUFvQnI3QixFQUFRODVCLGlCQUFpQnVCLGtCQUM5QyxPQUNxRixRQUFyRmxoQixFQUFLbmEsYUFBeUMsRUFBU0EsRUFBUTg1Qix3QkFBcUMsSUFBUDNmLE9BQWdCLEVBQVNBLEVBQUdtaEIsU0FDekgsQ0FBQyxhQUFhdDdCLEVBQVE4NUIsaUJBQWlCd0IsV0FDdkMsT0FDcUYsUUFBckZoSixFQUFLdHlCLGFBQXlDLEVBQVNBLEVBQVE4NUIsd0JBQXFDLElBQVB4SCxPQUFnQixFQUFTQSxFQUFHaUosT0FBUyxDQUFDLFVBQVV2N0IsRUFBUTg1QixpQkFBaUJ5QixTQUFXLE9BQzVGLFFBQXJGeEIsRUFBSy81QixhQUF5QyxFQUFTQSxFQUFRODVCLHdCQUFxQyxJQUFQQyxPQUFnQixFQUFTQSxFQUFHeUIsV0FDekgsQ0FBQyxlQUFleDdCLEVBQVE4NUIsaUJBQWlCMEIsYUFDekMsT0FDOEksUUFBOUl2QixFQUEyRixRQUFyRkQsRUFBS2g2QixhQUF5QyxFQUFTQSxFQUFRODVCLHdCQUFxQyxJQUFQRSxPQUFnQixFQUFTQSxFQUFHeUIsaUJBQThCLElBQVB4QixPQUFnQixFQUFTQSxFQUFHMzhCLFFBQ2xMLENBQ0UsZUFDRzBDLEVBQVE4NUIsaUJBQWlCMkIsVUFBVXYvQixJQUFLdy9CLEdBQWEsS0FBS0EsTUFFL0QsSUFDUnIvQixLQUFLLE1BQ1AsTUFBTXMvQixRQUF1QnJCLEVBQWVJLGFBQVksSUFBSTFNLGFBQWNwUixPQUFPN1ksR0FBVSxRQUMzRixLQUFLNDNCLEdBQW9CQSxhQUEwQjNRLFlBQy9DLE1BQU0sSUFBSTNtQixNQUFNLDRFQUVwQnNvQixFQUFZZ1AsQ0FDaEIsQ0FDSixDQUNBLElBQ0ksTUFBTSxLQUFFejRCLEVBQUksTUFBRUQsU0FBZ0Jxc0IsR0FBU3owQixLQUFLWSxNQUFPLE9BQVEsR0FBR1osS0FBS1MsNEJBQTZCLENBQzVGQyxRQUFTVixLQUFLVSxRQUNkbUMsS0FBTTFDLE9BQU9pRyxPQUFPLENBQUU0NEIsTUFBTyxTQUFVOTFCLFVBQVM0b0IsVUFBVzFCLEdBQWlCMEIsS0FBK0MsUUFBOUJ1TixFQUFLNUIsRUFBWXQ0QixlQUE0QixJQUFQazZCLE9BQWdCLEVBQVNBLEVBQUd6QixjQUN6SixDQUFFRixxQkFBc0IsQ0FBRUMsY0FBOEMsUUFBOUIyQixFQUFLN0IsRUFBWXQ0QixlQUE0QixJQUFQbTZCLE9BQWdCLEVBQVNBLEVBQUcxQixlQUM1RyxNQUNOOUksTUFBT0MsS0FFWCxHQUFJM3NCLEVBQ0EsTUFBTUEsRUFFVixPQUFLQyxHQUFTQSxFQUFLMnNCLFNBQVkzc0IsRUFBS2t0QixNQU1oQ2x0QixFQUFLMnNCLGdCQUNDaDFCLEtBQUtxOUIsYUFBYWgxQixFQUFLMnNCLGVBQ3ZCaDFCLEtBQUtzOEIsc0JBQXNCLFlBQWFqMEIsRUFBSzJzQixVQUVoRCxDQUFFM3NCLEtBQU1sSSxPQUFPaUcsT0FBTyxDQUFDLEVBQUdpQyxHQUFPRCxVQVQ3QixDQUNIQyxLQUFNLENBQUVrdEIsS0FBTSxLQUFNUCxRQUFTLE1BQzdCNXNCLE1BQU8sSUFBSXdsQixHQVF2QixDQUNBLE1BQU94bEIsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixTQUVsRCxNQUFNQSxDQUNWLENBQ0osQ0FDQSw2QkFBTTAyQixDQUF3QkQsR0FDMUIsTUFBTWtDLFFBQW9CM1AsR0FBYXB4QixLQUFLbXhCLFFBQVMsR0FBR254QixLQUFLb3lCLDZCQUN0REUsRUFBYzhLLElBQWlCMkQsUUFBaURBLEVBQWMsSUFBSTMvQixNQUFNLEtBQy9HLElBQ0ksTUFBTSxLQUFFaUgsRUFBSSxNQUFFRCxTQUFnQnFzQixHQUFTejBCLEtBQUtZLE1BQU8sT0FBUSxHQUFHWixLQUFLUyw0QkFBNkIsQ0FDNUZDLFFBQVNWLEtBQUtVLFFBQ2RtQyxLQUFNLENBQ0ZtK0IsVUFBV25DLEVBQ1hvQyxjQUFlM08sR0FFbkJ3QyxNQUFPQyxLQUdYLFNBRE16RCxHQUFnQnR4QixLQUFLbXhCLFFBQVMsR0FBR254QixLQUFLb3lCLDRCQUN4Q2hxQixFQUNBLE1BQU1BLEVBRVYsT0FBS0MsR0FBU0EsRUFBSzJzQixTQUFZM3NCLEVBQUtrdEIsTUFNaENsdEIsRUFBSzJzQixnQkFDQ2gxQixLQUFLcTlCLGFBQWFoMUIsRUFBSzJzQixlQUN2QmgxQixLQUFLczhCLHNCQUFzQixZQUFhajBCLEVBQUsyc0IsVUFFaEQsQ0FBRTNzQixLQUFNbEksT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUdpQyxHQUFPLENBQUUrMEIsYUFBY0EsUUFBbURBLEVBQWUsT0FBU2gxQixVQVR0SSxDQUNIQyxLQUFNLENBQUVrdEIsS0FBTSxLQUFNUCxRQUFTLEtBQU1vSSxhQUFjLE1BQ2pEaDFCLE1BQU8sSUFBSXdsQixHQVF2QixDQUNBLE1BQU94bEIsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsS0FBTW9JLGFBQWMsTUFBUWgxQixTQUV0RSxNQUFNQSxDQUNWLENBQ0osQ0FLQSx1QkFBTTg0QixDQUFrQnpELEdBQ3BCLElBQ0ksTUFBTSxRQUFFdDRCLEVBQU8sU0FBRXE1QixFQUFRLE1BQUVqd0IsRUFBSyxhQUFFbU8sRUFBWSxNQUFFZ2tCLEdBQVVqRCxFQUNwRDcxQixRQUFZNnNCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRLEdBQUdaLEtBQUtTLGdDQUFpQyxDQUNwRkMsUUFBU1YsS0FBS1UsUUFDZG1DLEtBQU0sQ0FDRjI3QixXQUNBMkMsU0FBVTV5QixFQUNWbU8sZUFDQWdrQixRQUNBaEQscUJBQXNCLENBQUVDLGNBQWV4NEIsYUFBeUMsRUFBU0EsRUFBUXk0QixlQUVyRzlJLE1BQU9DLE1BRUwsS0FBRTFzQixFQUFJLE1BQUVELEdBQVVSLEVBQ3hCLE9BQUlRLEVBQ08sQ0FBRUMsS0FBTSxDQUFFa3RCLEtBQU0sS0FBTVAsUUFBUyxNQUFRNXNCLFNBRXhDQyxHQUFTQSxFQUFLMnNCLFNBQVkzc0IsRUFBS2t0QixNQU1yQ2x0QixFQUFLMnNCLGdCQUNDaDFCLEtBQUtxOUIsYUFBYWgxQixFQUFLMnNCLGVBQ3ZCaDFCLEtBQUtzOEIsc0JBQXNCLFlBQWFqMEIsRUFBSzJzQixVQUVoRCxDQUFFM3NCLE9BQU1ELFVBVEosQ0FDSEMsS0FBTSxDQUFFa3RCLEtBQU0sS0FBTVAsUUFBUyxNQUM3QjVzQixNQUFPLElBQUl3bEIsR0FRdkIsQ0FDQSxNQUFPeGxCLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLENBQUVrdEIsS0FBTSxLQUFNUCxRQUFTLE1BQVE1c0IsU0FFbEQsTUFBTUEsQ0FDVixDQUNKLENBa0JBLG1CQUFNZzVCLENBQWMzRCxHQUNoQixJQUFJdjRCLEVBQUlnRCxFQUFJQyxFQUFJZ0IsRUFBSWtXLEVBQ3BCLElBQ0ksR0FBSSxVQUFXb2UsRUFBYSxDQUN4QixNQUFNLE1BQUV2RyxFQUFLLFFBQUUveEIsR0FBWXM0QixFQUMzQixJQUFJeEssRUFBZ0IsS0FDaEI4SyxFQUFzQixLQUNKLFNBQWxCLzlCLEtBQUt1c0IsWUFFSjBHLEVBQWU4SyxTQUE2QjVMLEdBQTBCbnlCLEtBQUtteEIsUUFBU254QixLQUFLb3lCLGFBRTlGLE1BQU0sTUFBRWhxQixTQUFnQnFzQixHQUFTejBCLEtBQUtZLE1BQU8sT0FBUSxHQUFHWixLQUFLUyxVQUFXLENBQ3BFQyxRQUFTVixLQUFLVSxRQUNkbUMsS0FBTSxDQUNGcTBCLFFBQ0E3dUIsS0FBZ0YsUUFBekVuRCxFQUFLQyxhQUF5QyxFQUFTQSxFQUFRa0QsWUFBeUIsSUFBUG5ELEVBQWdCQSxFQUFLLENBQUMsRUFDOUdtOEIsWUFBbUcsUUFBckZuNUIsRUFBSy9DLGFBQXlDLEVBQVNBLEVBQVFtOEIsd0JBQXFDLElBQVBwNUIsR0FBZ0JBLEVBQzNIdzFCLHFCQUFzQixDQUFFQyxjQUFleDRCLGFBQXlDLEVBQVNBLEVBQVF5NEIsY0FDakdLLGVBQWdCaEwsRUFDaEJpTCxzQkFBdUJILEdBRTNCbkosV0FBWXp2QixhQUF5QyxFQUFTQSxFQUFRNjRCLGtCQUUxRSxNQUFPLENBQUUzMUIsS0FBTSxDQUFFa3RCLEtBQU0sS0FBTVAsUUFBUyxNQUFRNXNCLFFBQ2xELENBQ0EsR0FBSSxVQUFXcTFCLEVBQWEsQ0FDeEIsTUFBTSxNQUFFVSxFQUFLLFFBQUVoNUIsR0FBWXM0QixHQUNyQixLQUFFcDFCLEVBQUksTUFBRUQsU0FBZ0Jxc0IsR0FBU3owQixLQUFLWSxNQUFPLE9BQVEsR0FBR1osS0FBS1MsVUFBVyxDQUMxRUMsUUFBU1YsS0FBS1UsUUFDZG1DLEtBQU0sQ0FDRnM3QixRQUNBOTFCLEtBQWdGLFFBQXpFRixFQUFLaEQsYUFBeUMsRUFBU0EsRUFBUWtELFlBQXlCLElBQVBGLEVBQWdCQSxFQUFLLENBQUMsRUFDOUdrNUIsWUFBbUcsUUFBckZsNEIsRUFBS2hFLGFBQXlDLEVBQVNBLEVBQVFtOEIsd0JBQXFDLElBQVBuNEIsR0FBZ0JBLEVBQzNIdTBCLHFCQUFzQixDQUFFQyxjQUFleDRCLGFBQXlDLEVBQVNBLEVBQVF5NEIsY0FDakczbkIsUUFBc0YsUUFBNUVvSixFQUFLbGEsYUFBeUMsRUFBU0EsRUFBUThRLGVBQTRCLElBQVBvSixFQUFnQkEsRUFBSyxTQUczSCxNQUFPLENBQUVoWCxLQUFNLENBQUVrdEIsS0FBTSxLQUFNUCxRQUFTLEtBQU11TSxVQUFXbDVCLGFBQW1DLEVBQVNBLEVBQUttNUIsWUFBY3A1QixRQUMxSCxDQUNBLE1BQU0sSUFBSXlsQixHQUE0QixvREFDMUMsQ0FDQSxNQUFPemxCLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLENBQUVrdEIsS0FBTSxLQUFNUCxRQUFTLE1BQVE1c0IsU0FFbEQsTUFBTUEsQ0FDVixDQUNKLENBSUEsZUFBTXE1QixDQUFVbG5CLEdBQ1osSUFBSXJWLEVBQUlnRCxFQUNSLElBQ0ksSUFBSTBzQixFQUNBZ0osRUFDQSxZQUFhcmpCLElBQ2JxYSxFQUF1QyxRQUF6QjF2QixFQUFLcVYsRUFBT3BWLGVBQTRCLElBQVBELE9BQWdCLEVBQVNBLEVBQUcwdkIsV0FDM0VnSixFQUF5QyxRQUF6QjExQixFQUFLcVMsRUFBT3BWLGVBQTRCLElBQVArQyxPQUFnQixFQUFTQSxFQUFHMDFCLGNBRWpGLE1BQU0sS0FBRXYxQixFQUFJLE1BQUVELFNBQWdCcXNCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRLEdBQUdaLEtBQUtTLGFBQWMsQ0FDN0VDLFFBQVNWLEtBQUtVLFFBQ2RtQyxLQUFNMUMsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUdtVSxHQUFTLENBQUVtakIscUJBQXNCLENBQUVDLGNBQWVDLEtBQ3hGaEosYUFDQUUsTUFBT0MsS0FFWCxHQUFJM3NCLEVBQ0EsTUFBTUEsRUFFVixJQUFLQyxFQUNELE1BQU0sSUFBSW1CLE1BQU0sNENBRXBCLE1BQU13ckIsRUFBVTNzQixFQUFLMnNCLFFBQ2ZPLEVBQU9sdEIsRUFBS2t0QixLQUtsQixPQUpJUCxhQUF5QyxFQUFTQSxFQUFRdFksc0JBQ3BEMWMsS0FBS3E5QixhQUFhckksU0FDbEJoMUIsS0FBS3M4QixzQkFBcUMsWUFBZi9oQixFQUFPL08sS0FBcUIsb0JBQXNCLFlBQWF3cEIsSUFFN0YsQ0FBRTNzQixLQUFNLENBQUVrdEIsT0FBTVAsV0FBVzVzQixNQUFPLEtBQzdDLENBQ0EsTUFBT0EsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixTQUVsRCxNQUFNQSxDQUNWLENBQ0osQ0FlQSxtQkFBTXM1QixDQUFjbm5CLEdBQ2hCLElBQUlyVixFQUFJZ0QsRUFBSUMsRUFDWixJQUNJLElBQUk4cUIsRUFBZ0IsS0FDaEI4SyxFQUFzQixLQUsxQixNQUpzQixTQUFsQi85QixLQUFLdXNCLFlBRUowRyxFQUFlOEssU0FBNkI1TCxHQUEwQm55QixLQUFLbXhCLFFBQVNueEIsS0FBS295QixtQkFFakZxQyxHQUFTejBCLEtBQUtZLE1BQU8sT0FBUSxHQUFHWixLQUFLUyxVQUFXLENBQ3pEb0MsS0FBTTFDLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFJLGVBQWdCbVUsRUFBUyxDQUFFb25CLFlBQWFwbkIsRUFBT3FuQixZQUFlLE1BQVMsV0FBWXJuQixFQUFTLENBQUV5bEIsT0FBUXpsQixFQUFPeWxCLFFBQVcsTUFBUSxDQUFFakssWUFBaUcsUUFBbkY3dEIsRUFBK0IsUUFBekJoRCxFQUFLcVYsRUFBT3BWLGVBQTRCLElBQVBELE9BQWdCLEVBQVNBLEVBQUcwdkIsa0JBQStCLElBQVAxc0IsRUFBZ0JBLE9BQUtqRixLQUEwRixRQUF6RWtGLEVBQUtvUyxhQUF1QyxFQUFTQSxFQUFPcFYsZUFBNEIsSUFBUGdELE9BQWdCLEVBQVNBLEVBQUd5MUIsY0FDemMsQ0FBRUYscUJBQXNCLENBQUVDLGNBQWVwakIsRUFBT3BWLFFBQVF5NEIsZUFDeEQsTUFBUSxDQUFFaUUsb0JBQW9CLEVBQU01RCxlQUFnQmhMLEVBQWVpTCxzQkFBdUJILElBQ2hHcjlCLFFBQVNWLEtBQUtVLFFBQ2RvMEIsTUFBT1ksSUFFZixDQUNBLE1BQU90dEIsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLENBS0Esb0JBQU0wNUIsR0FFRixhQURNOWhDLEtBQUsyNkIsd0JBQ0UzNkIsS0FBS3k4QixjQUFjLEVBQUd4MEIsZUFDbEJqSSxLQUFLK2hDLGtCQUUxQixDQUNBLHFCQUFNQSxHQUNGLElBQ0ksYUFBYS9oQyxLQUFLZ2lDLFlBQVkvNUIsTUFBT2dJLElBQ2pDLE1BQVE1SCxNQUFNLFFBQUUyc0IsR0FBVzVzQixNQUFPNjVCLEdBQWtCaHlCLEVBQ3BELEdBQUlneUIsRUFDQSxNQUFNQSxFQUNWLElBQUtqTixFQUNELE1BQU0sSUFBSXJILEdBQ2QsTUFBTSxNQUFFdmxCLFNBQWdCcXNCLEdBQVN6MEIsS0FBS1ksTUFBTyxNQUFPLEdBQUdaLEtBQUtTLHFCQUFzQixDQUM5RUMsUUFBU1YsS0FBS1UsUUFDZGcwQixJQUFLTSxFQUFRdFksZUFFakIsTUFBTyxDQUFFclUsS0FBTSxDQUFFa3RCLEtBQU0sS0FBTVAsUUFBUyxNQUFRNXNCLFVBRXRELENBQ0EsTUFBT0EsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixTQUVsRCxNQUFNQSxDQUNWLENBQ0osQ0FJQSxZQUFNb08sQ0FBT2luQixHQUNULElBQ0ksTUFBTXlFLEVBQVcsR0FBR2xpQyxLQUFLUyxhQUN6QixHQUFJLFVBQVdnOUIsRUFBYSxDQUN4QixNQUFNLE1BQUV2RyxFQUFLLEtBQUUxckIsRUFBSSxRQUFFckcsR0FBWXM0QixHQUMzQixNQUFFcjFCLFNBQWdCcXNCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRc2hDLEVBQVUsQ0FDM0R4aEMsUUFBU1YsS0FBS1UsUUFDZG1DLEtBQU0sQ0FDRnEwQixRQUNBMXJCLE9BQ0FreUIscUJBQXNCLENBQUVDLGNBQWV4NEIsYUFBeUMsRUFBU0EsRUFBUXk0QixlQUVyR2hKLFdBQVl6dkIsYUFBeUMsRUFBU0EsRUFBUTY0QixrQkFFMUUsTUFBTyxDQUFFMzFCLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixRQUNsRCxDQUNLLEdBQUksVUFBV3ExQixFQUFhLENBQzdCLE1BQU0sTUFBRVUsRUFBSyxLQUFFM3lCLEVBQUksUUFBRXJHLEdBQVlzNEIsR0FDM0IsS0FBRXAxQixFQUFJLE1BQUVELFNBQWdCcXNCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRc2hDLEVBQVUsQ0FDakV4aEMsUUFBU1YsS0FBS1UsUUFDZG1DLEtBQU0sQ0FDRnM3QixRQUNBM3lCLE9BQ0FreUIscUJBQXNCLENBQUVDLGNBQWV4NEIsYUFBeUMsRUFBU0EsRUFBUXk0QixpQkFHekcsTUFBTyxDQUFFdjFCLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsS0FBTXVNLFVBQVdsNUIsYUFBbUMsRUFBU0EsRUFBS201QixZQUFjcDVCLFFBQzFILENBQ0EsTUFBTSxJQUFJeWxCLEdBQTRCLDhEQUMxQyxDQUNBLE1BQU96bEIsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixTQUVsRCxNQUFNQSxDQUNWLENBQ0osQ0FZQSxnQkFBTSs1QixHQU9GLGFBTk1uaUMsS0FBSzI2Qix3QkFDVTM2QixLQUFLeThCLGNBQWMsRUFBR3gwQixTQUNoQ2pJLEtBQUtnaUMsWUFBWS81QixNQUFPZ0ksR0FDcEJBLEdBSW5CLENBSUEsa0JBQU13c0IsQ0FBYW5ELEVBQWdCNXlCLEdBQy9CMUcsS0FBS3E4QixPQUFPLGdCQUFpQixRQUFTL0MsR0FDdEMsSUFDSSxHQUFJdDVCLEtBQUs2NkIsYUFBYyxDQUNuQixNQUFNdUgsRUFBT3BpQyxLQUFLODZCLGNBQWNyNEIsT0FDMUJ6QyxLQUFLODZCLGNBQWM5NkIsS0FBSzg2QixjQUFjcjRCLE9BQVMsR0FDL0NpTixRQUFRQyxVQUNSTSxFQUFTLGlCQUNMbXlCLFFBQ08xN0IsS0FGRixHQVlmLE9BUkExRyxLQUFLODZCLGNBQWM3NEIsS0FBSyxXQUNwQixVQUNVZ08sQ0FDVixDQUNBLE1BQU81QyxHQUVQLENBQ0gsRUFQdUIsSUFRakI0QyxDQUNYLENBQ0EsYUFBYWpRLEtBQUs0NUIsS0FBSyxRQUFRNTVCLEtBQUtveUIsYUFBY2tILEVBQWdCcnhCLFVBQzlEakksS0FBS3E4QixPQUFPLGdCQUFpQixnQ0FBaUNyOEIsS0FBS295QixZQUNuRSxJQUNJcHlCLEtBQUs2NkIsY0FBZSxFQUNwQixNQUFNNXFCLEVBQVN2SixJQVdmLElBVkExRyxLQUFLODZCLGNBQWM3NEIsS0FBSyxXQUNwQixVQUNVZ08sQ0FDVixDQUNBLE1BQU81QyxHQUVQLENBQ0gsRUFQdUIsVUFRbEI0QyxFQUVDalEsS0FBSzg2QixjQUFjcjRCLFFBQVEsQ0FDOUIsTUFBTTQvQixFQUFTLElBQUlyaUMsS0FBSzg2QixxQkFDbEJwckIsUUFBUXFULElBQUlzZixHQUNsQnJpQyxLQUFLODZCLGNBQWN3SCxPQUFPLEVBQUdELEVBQU81L0IsT0FDeEMsQ0FDQSxhQUFhd04sQ0FDakIsQ0FDQSxRQUNJalEsS0FBS3E4QixPQUFPLGdCQUFpQixnQ0FBaUNyOEIsS0FBS295QixZQUNuRXB5QixLQUFLNjZCLGNBQWUsQ0FDeEIsR0FFUixDQUNBLFFBQ0k3NkIsS0FBS3E4QixPQUFPLGdCQUFpQixNQUNqQyxDQUNKLENBT0EsaUJBQU0yRixDQUFZdDdCLEdBQ2QxRyxLQUFLcThCLE9BQU8sZUFBZ0IsU0FDNUIsSUFFSSxNQUFNcHNCLFFBQWVqUSxLQUFLdWlDLGdCQUMxQixhQUFhNzdCLEVBQUd1SixFQUNwQixDQUNBLFFBQ0lqUSxLQUFLcThCLE9BQU8sZUFBZ0IsTUFDaEMsQ0FDSixDQU1BLG1CQUFNa0csR0FDRnZpQyxLQUFLcThCLE9BQU8sbUJBQW9CLFNBQzNCcjhCLEtBQUs2NkIsY0FDTjc2QixLQUFLcThCLE9BQU8sbUJBQW9CLHFDQUFxQyxJQUFJN3lCLE9BQVFGLE9BRXJGLElBQ0ksSUFBSWs1QixFQUFpQixLQUNyQixNQUFNQyxRQUFxQnJSLEdBQWFweEIsS0FBS214QixRQUFTbnhCLEtBQUtveUIsWUFXM0QsR0FWQXB5QixLQUFLcThCLE9BQU8sZ0JBQWlCLHVCQUF3Qm9HLEdBQ2hDLE9BQWpCQSxJQUNJemlDLEtBQUswaUMsZ0JBQWdCRCxHQUNyQkQsRUFBaUJDLEdBR2pCemlDLEtBQUtxOEIsT0FBTyxnQkFBaUIsMkNBQ3ZCcjhCLEtBQUttOUIsb0JBR2RxRixFQUNELE1BQU8sQ0FBRW42QixLQUFNLENBQUUyc0IsUUFBUyxNQUFRNXNCLE1BQU8sTUFPN0MsTUFBTXU2QixJQUFhSCxFQUFlcE4sWUFDQSxJQUE1Qm9OLEVBQWVwTixXQUFvQmpJLEtBQUttSSxNVno4QjFCc04sSVU0OEJwQixHQURBNWlDLEtBQUtxOEIsT0FBTyxtQkFBb0IsY0FBY3NHLEVBQWEsR0FBSyxpQkFBa0IsYUFBY0gsRUFBZXBOLGFBQzFHdU4sRUFBWSxDQUNiLEdBQUkzaUMsS0FBS214QixRQUFRMFIsU0FBVSxDQUN2QixJQUFJQyxFQUFrQjlpQyxLQUFLNDZCLDBCQVkzQjRILEVBWHFCLElBQUlPLE1BQU1QLEVBQWdCLENBQzNDMytCLElBQUssQ0FBQ20vQixFQUFRejFCLEVBQU0wMUIsS0FDWEgsR0FBNEIsU0FBVHYxQixJQUVwQitILFFBQVE4ZCxLQUFLLG1XQUNiMFAsR0FBa0IsRUFDbEI5aUMsS0FBSzQ2QiwyQkFBNEIsR0FFOUJzSSxRQUFRci9CLElBQUltL0IsRUFBUXoxQixFQUFNMDFCLEtBSTdDLENBQ0EsTUFBTyxDQUFFNTZCLEtBQU0sQ0FBRTJzQixRQUFTd04sR0FBa0JwNkIsTUFBTyxLQUN2RCxDQUNBLE1BQU0sUUFBRTRzQixFQUFPLE1BQUU1c0IsU0FBZ0JwSSxLQUFLbWpDLGtCQUFrQlgsRUFBZXZOLGVBQ3ZFLE9BQUk3c0IsRUFDTyxDQUFFQyxLQUFNLENBQUUyc0IsUUFBUyxNQUFRNXNCLFNBRS9CLENBQUVDLEtBQU0sQ0FBRTJzQixXQUFXNXNCLE1BQU8sS0FDdkMsQ0FDQSxRQUNJcEksS0FBS3E4QixPQUFPLG1CQUFvQixNQUNwQyxDQUNKLENBUUEsYUFBTStHLENBQVExTyxHQUNWLE9BQUlBLFFBQ2ExMEIsS0FBS3FqQyxTQUFTM08sVUFFekIxMEIsS0FBSzI2Qix3QkFDVTM2QixLQUFLeThCLGNBQWMsRUFBR3gwQixlQUMxQmpJLEtBQUtxakMsWUFHMUIsQ0FDQSxjQUFNQSxDQUFTM08sR0FDWCxJQUNJLE9BQUlBLFFBQ2FELEdBQVN6MEIsS0FBS1ksTUFBTyxNQUFPLEdBQUdaLEtBQUtTLFdBQVksQ0FDekRDLFFBQVNWLEtBQUtVLFFBQ2RnMEIsSUFBS0EsRUFDTEksTUFBT1csV0FHRnoxQixLQUFLZ2lDLFlBQVkvNUIsTUFBT2dJLElBQ2pDLElBQUkvSyxFQUFJZ0QsRUFBSUMsRUFDWixNQUFNLEtBQUVFLEVBQUksTUFBRUQsR0FBVTZILEVBQ3hCLEdBQUk3SCxFQUNBLE1BQU1BLEVBR1YsT0FBOEIsUUFBdkJsRCxFQUFLbUQsRUFBSzJzQixlQUE0QixJQUFQOXZCLE9BQWdCLEVBQVNBLEVBQUd3WCxlQUFrQjFjLEtBQUtrNkIsbUNBRzVFekYsR0FBU3owQixLQUFLWSxNQUFPLE1BQU8sR0FBR1osS0FBS1MsV0FBWSxDQUN6REMsUUFBU1YsS0FBS1UsUUFDZGcwQixJQUF5RixRQUFuRnZzQixFQUE2QixRQUF2QkQsRUFBS0csRUFBSzJzQixlQUE0QixJQUFQOXNCLE9BQWdCLEVBQVNBLEVBQUd3VSxvQkFBaUMsSUFBUHZVLEVBQWdCQSxPQUFLbEYsRUFDdEg2eEIsTUFBT1csS0FMQSxDQUFFcHRCLEtBQU0sQ0FBRWt0QixLQUFNLE1BQVFudEIsTUFBTyxJQUFJdWxCLEtBUXRELENBQ0EsTUFBT3ZsQixHQUNILEdBQUltbEIsR0FBWW5sQixHQU9aLE9UMS9CVCxTQUFtQ0EsR0FDdEMsT0FBT21sQixHQUFZbmxCLElBQXlCLDRCQUFmQSxFQUFNdEIsSUFDdkMsQ1NrL0JvQnc4QixDQUEwQmw3QixXQUdwQnBJLEtBQUttOUIsdUJBQ0w3TCxHQUFnQnR4QixLQUFLbXhCLFFBQVMsR0FBR254QixLQUFLb3lCLDZCQUV6QyxDQUFFL3BCLEtBQU0sQ0FBRWt0QixLQUFNLE1BQVFudEIsU0FFbkMsTUFBTUEsQ0FDVixDQUNKLENBSUEsZ0JBQU1tN0IsQ0FBV2hNLEVBQVlweUIsRUFBVSxDQUFDLEdBRXBDLGFBRE1uRixLQUFLMjZCLHdCQUNFMzZCLEtBQUt5OEIsY0FBYyxFQUFHeDBCLGVBQ2xCakksS0FBS3dqQyxZQUFZak0sRUFBWXB5QixHQUVsRCxDQUNBLGlCQUFNcStCLENBQVlqTSxFQUFZcHlCLEVBQVUsQ0FBQyxHQUNyQyxJQUNJLGFBQWFuRixLQUFLZ2lDLFlBQVkvNUIsTUFBT2dJLElBQ2pDLE1BQVE1SCxLQUFNbzdCLEVBQWFyN0IsTUFBTzY1QixHQUFpQmh5QixFQUNuRCxHQUFJZ3lCLEVBQ0EsTUFBTUEsRUFFVixJQUFLd0IsRUFBWXpPLFFBQ2IsTUFBTSxJQUFJckgsR0FFZCxNQUFNcUgsRUFBVXlPLEVBQVl6TyxRQUM1QixJQUFJL0IsRUFBZ0IsS0FDaEI4SyxFQUFzQixLQUNKLFNBQWxCLzlCLEtBQUt1c0IsVUFBMkMsTUFBcEJnTCxFQUFXTCxTQUV0Q2pFLEVBQWU4SyxTQUE2QjVMLEdBQTBCbnlCLEtBQUtteEIsUUFBU254QixLQUFLb3lCLGFBRTlGLE1BQU0sS0FBRS9wQixFQUFNRCxNQUFPczdCLFNBQW9CalAsR0FBU3owQixLQUFLWSxNQUFPLE1BQU8sR0FBR1osS0FBS1MsV0FBWSxDQUNyRkMsUUFBU1YsS0FBS1UsUUFDZGswQixXQUFZenZCLGFBQXlDLEVBQVNBLEVBQVE2NEIsZ0JBQ3RFbjdCLEtBQU0xQyxPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBR214QixHQUFhLENBQUUwRyxlQUFnQmhMLEVBQWVpTCxzQkFBdUJILElBQzNHckosSUFBS00sRUFBUXRZLGFBQ2JvWSxNQUFPVyxLQUVYLEdBQUlpTyxFQUNBLE1BQU1BLEVBSVYsT0FIQTFPLEVBQVFPLEtBQU9sdEIsRUFBS2t0QixXQUNkdjFCLEtBQUtxOUIsYUFBYXJJLFNBQ2xCaDFCLEtBQUtzOEIsc0JBQXNCLGVBQWdCdEgsR0FDMUMsQ0FBRTNzQixLQUFNLENBQUVrdEIsS0FBTVAsRUFBUU8sTUFBUW50QixNQUFPLE9BRXRELENBQ0EsTUFBT0EsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLE1BQVFudEIsU0FFbkMsTUFBTUEsQ0FDVixDQUNKLENBTUEsZ0JBQU11N0IsQ0FBV25CLEdBRWIsYUFETXhpQyxLQUFLMjZCLHdCQUNFMzZCLEtBQUt5OEIsY0FBYyxFQUFHeDBCLGVBQ2xCakksS0FBSzRqQyxZQUFZcEIsR0FFdEMsQ0FDQSxpQkFBTW9CLENBQVlwQixHQUNkLElBQ0ksSUFBS0EsRUFBZTlsQixlQUFpQjhsQixFQUFldk4sY0FDaEQsTUFBTSxJQUFJdEgsR0FFZCxNQUFNa1csRUFBVTFXLEtBQUttSSxNQUFRLElBQzdCLElBQUl3TyxFQUFZRCxFQUNabEIsR0FBYSxFQUNiM04sRUFBVSxLQUNkLE1BQU0sUUFBRS9pQixHQUFZMGYsR0FBVTZRLEVBQWU5bEIsY0FLN0MsR0FKSXpLLEVBQVE4eEIsTUFDUkQsRUFBWTd4QixFQUFROHhCLElBQ3BCcEIsRUFBYW1CLEdBQWFELEdBRTFCbEIsRUFBWSxDQUNaLE1BQVEzTixRQUFTZ1AsRUFBZ0IsTUFBRTU3QixTQUFnQnBJLEtBQUttakMsa0JBQWtCWCxFQUFldk4sZUFDekYsR0FBSTdzQixFQUNBLE1BQU8sQ0FBRUMsS0FBTSxDQUFFa3RCLEtBQU0sS0FBTVAsUUFBUyxNQUFRNXNCLE1BQU9BLEdBRXpELElBQUs0N0IsRUFDRCxNQUFPLENBQUUzN0IsS0FBTSxDQUFFa3RCLEtBQU0sS0FBTVAsUUFBUyxNQUFRNXNCLE1BQU8sTUFFekQ0c0IsRUFBVWdQLENBQ2QsS0FDSyxDQUNELE1BQU0sS0FBRTM3QixFQUFJLE1BQUVELFNBQWdCcEksS0FBS3FqQyxTQUFTYixFQUFlOWxCLGNBQzNELEdBQUl0VSxFQUNBLE1BQU1BLEVBRVY0c0IsRUFBVSxDQUNOdFksYUFBYzhsQixFQUFlOWxCLGFBQzdCdVksY0FBZXVOLEVBQWV2TixjQUM5Qk0sS0FBTWx0QixFQUFLa3RCLEtBQ1gwTyxXQUFZLFNBQ1ovTyxXQUFZNE8sRUFBWUQsRUFDeEJ6TyxXQUFZME8sU0FFVjlqQyxLQUFLcTlCLGFBQWFySSxTQUNsQmgxQixLQUFLczhCLHNCQUFzQixZQUFhdEgsRUFDbEQsQ0FDQSxNQUFPLENBQUUzc0IsS0FBTSxDQUFFa3RCLEtBQU1QLEVBQVFPLEtBQU1QLFdBQVc1c0IsTUFBTyxLQUMzRCxDQUNBLE1BQU9BLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLENBQUUyc0IsUUFBUyxLQUFNTyxLQUFNLE1BQVFudEIsU0FFbEQsTUFBTUEsQ0FDVixDQUNKLENBT0Esb0JBQU04N0IsQ0FBZTFCLEdBRWpCLGFBRE14aUMsS0FBSzI2Qix3QkFDRTM2QixLQUFLeThCLGNBQWMsRUFBR3gwQixlQUNsQmpJLEtBQUtta0MsZ0JBQWdCM0IsR0FFMUMsQ0FDQSxxQkFBTTJCLENBQWdCM0IsR0FDbEIsSUFDSSxhQUFheGlDLEtBQUtnaUMsWUFBWS81QixNQUFPZ0ksSUFDakMsSUFBSS9LLEVBQ0osSUFBS3M5QixFQUFnQixDQUNqQixNQUFNLEtBQUVuNkIsRUFBSSxNQUFFRCxHQUFVNkgsRUFDeEIsR0FBSTdILEVBQ0EsTUFBTUEsRUFFVm82QixFQUF5QyxRQUF2QnQ5QixFQUFLbUQsRUFBSzJzQixlQUE0QixJQUFQOXZCLEVBQWdCQSxPQUFLakMsQ0FDMUUsQ0FDQSxLQUFNdS9CLGFBQXVELEVBQVNBLEVBQWV2TixlQUNqRixNQUFNLElBQUl0SCxHQUVkLE1BQU0sUUFBRXFILEVBQU8sTUFBRTVzQixTQUFnQnBJLEtBQUttakMsa0JBQWtCWCxFQUFldk4sZUFDdkUsT0FBSTdzQixFQUNPLENBQUVDLEtBQU0sQ0FBRWt0QixLQUFNLEtBQU1QLFFBQVMsTUFBUTVzQixNQUFPQSxHQUVwRDRzQixFQUdFLENBQUUzc0IsS0FBTSxDQUFFa3RCLEtBQU1QLEVBQVFPLEtBQU1QLFdBQVc1c0IsTUFBTyxNQUY1QyxDQUFFQyxLQUFNLENBQUVrdEIsS0FBTSxLQUFNUCxRQUFTLE1BQVE1c0IsTUFBTyxPQUlqRSxDQUNBLE1BQU9BLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLENBQUVrdEIsS0FBTSxLQUFNUCxRQUFTLE1BQVE1c0IsU0FFbEQsTUFBTUEsQ0FDVixDQUNKLENBSUEsd0JBQU02MEIsQ0FBbUIxaUIsRUFBUXVpQixHQUM3QixJQUNJLElBQUssS0FDRCxNQUFNLElBQUloUCxHQUErQix3QkFFN0MsR0FBSXZULEVBQU9uUyxPQUFTbVMsRUFBT2lNLG1CQUFxQmpNLEVBQU8rWixXQUduRCxNQUFNLElBQUl4RyxHQUErQnZULEVBQU9pTSxtQkFBcUIsa0RBQW1ELENBQ3BIcGUsTUFBT21TLEVBQU9uUyxPQUFTLG9CQUN2QlcsS0FBTXdSLEVBQU8rWixZQUFjLHFCQUluQyxPQUFRd0ksR0FDSixJQUFLLFdBQ0QsR0FBc0IsU0FBbEI5OEIsS0FBS3VzQixTQUNMLE1BQU0sSUFBSXdCLEdBQStCLDhCQUU3QyxNQUNKLElBQUssT0FDRCxHQUFzQixhQUFsQi90QixLQUFLdXNCLFNBQ0wsTUFBTSxJQUFJdUIsR0FBK0Isd0NBT3JELEdBQXdCLFNBQXBCZ1AsRUFBNEIsQ0FFNUIsR0FEQTk4QixLQUFLcThCLE9BQU8saUJBQWtCLFFBQVMsZ0JBQWdCLElBQ2xEOWhCLEVBQU94UixLQUNSLE1BQU0sSUFBSWdsQixHQUErQixxQkFDN0MsTUFBTSxLQUFFMWxCLEVBQUksTUFBRUQsU0FBZ0JwSSxLQUFLOCtCLHdCQUF3QnZrQixFQUFPeFIsTUFDbEUsR0FBSVgsRUFDQSxNQUFNQSxFQUNWLE1BQU0zSCxFQUFNLElBQUkrRixJQUFJeUYsT0FBTzR3QixTQUFTRixNQUdwQyxPQUZBbDhCLEVBQUlnQixhQUFhMmlDLE9BQU8sUUFDeEJuNEIsT0FBT280QixRQUFRQyxhQUFhcjRCLE9BQU9vNEIsUUFBUW5zQixNQUFPLEdBQUl6WCxFQUFJcUgsWUFDbkQsQ0FBRU8sS0FBTSxDQUFFMnNCLFFBQVMzc0IsRUFBSzJzQixRQUFTb0ksYUFBYyxNQUFRaDFCLE1BQU8sS0FDekUsQ0FDQSxNQUFNLGVBQUVtOEIsRUFBYyx1QkFBRUMsRUFBc0IsYUFBRTluQixFQUFZLGNBQUV1WSxFQUFhLFdBQUVDLEVBQVUsV0FBRUUsRUFBVSxXQUFFNk8sR0FBZ0IxcEIsRUFDckgsS0FBS21DLEdBQWlCd1ksR0FBZUQsR0FBa0JnUCxHQUNuRCxNQUFNLElBQUluVyxHQUErQiw2QkFFN0MsTUFBTStWLEVBQVUvUyxLQUFLdUUsTUFBTWxJLEtBQUttSSxNQUFRLEtBQ2xDak0sRUFBWXZnQixTQUFTb3NCLEdBQzNCLElBQUk0TyxFQUFZRCxFQUFVeGEsRUFDdEIrTCxJQUNBME8sRUFBWWg3QixTQUFTc3NCLElBRXpCLE1BQU1xUCxFQUFvQlgsRUFBWUQsRUFDZCxJQUFwQlksR0FBNEJ6WCxJQUM1QjFYLFFBQVE4ZCxLQUFLLGlFQUFpRXFSLGtDQUFrRHBiLE1BRXBJLE1BQU0wVyxFQUFXK0QsRUFBWXphLEVBQ3pCd2EsRUFBVTlELEdBQVksSUFDdEJ6cUIsUUFBUThkLEtBQUssa0dBQW1HMk0sRUFBVStELEVBQVdELEdBRWhJQSxFQUFVOUQsRUFBVyxHQUMxQnpxQixRQUFROGQsS0FBSywrR0FBZ0gyTSxFQUFVK0QsRUFBV0QsR0FFdEosTUFBTSxLQUFFeDdCLEVBQUksTUFBRUQsU0FBZ0JwSSxLQUFLcWpDLFNBQVMzbUIsR0FDNUMsR0FBSXRVLEVBQ0EsTUFBTUEsRUFDVixNQUFNNHNCLEVBQVUsQ0FDWnVQLGlCQUNBQyx5QkFDQTluQixlQUNBd1ksV0FBWTdMLEVBQ1orTCxXQUFZME8sRUFDWjdPLGdCQUNBZ1AsYUFDQTFPLEtBQU1sdEIsRUFBS2t0QixNQUtmLE9BRkF0cEIsT0FBTzR3QixTQUFTckosS0FBTyxHQUN2Qnh6QixLQUFLcThCLE9BQU8sd0JBQXlCLGlDQUM5QixDQUFFaDBCLEtBQU0sQ0FBRTJzQixVQUFTb0ksYUFBYzdpQixFQUFPL08sTUFBUXBELE1BQU8sS0FDbEUsQ0FDQSxNQUFPQSxHQUNILEdBQUltbEIsR0FBWW5sQixHQUNaLE1BQU8sQ0FBRUMsS0FBTSxDQUFFMnNCLFFBQVMsS0FBTW9JLGFBQWMsTUFBUWgxQixTQUUxRCxNQUFNQSxDQUNWLENBQ0osQ0FJQSx3QkFBQTIwQixDQUF5QnhpQixHQUNyQixPQUFPbFYsUUFBUWtWLEVBQU9tQyxjQUFnQm5DLEVBQU9pTSxrQkFDakQsQ0FJQSxxQkFBTXdXLENBQWdCemlCLEdBQ2xCLE1BQU1tcUIsUUFBOEJ0VCxHQUFhcHhCLEtBQUtteEIsUUFBUyxHQUFHbnhCLEtBQUtveUIsNEJBQ3ZFLFNBQVU3WCxFQUFPeFIsT0FBUTI3QixFQUM3QixDQVNBLGFBQU0zTixDQUFRNXhCLEVBQVUsQ0FBRTZ4QixNQUFPLFdBRTdCLGFBRE1oM0IsS0FBSzI2Qix3QkFDRTM2QixLQUFLeThCLGNBQWMsRUFBR3gwQixlQUNsQmpJLEtBQUsya0MsU0FBU3gvQixHQUVuQyxDQUNBLGNBQU13L0IsRUFBUyxNQUFFM04sR0FBVSxDQUFFQSxNQUFPLFdBQ2hDLGFBQWFoM0IsS0FBS2dpQyxZQUFZLzVCLE1BQU9nSSxJQUNqQyxJQUFJL0ssRUFDSixNQUFNLEtBQUVtRCxFQUFNRCxNQUFPNjVCLEdBQWlCaHlCLEVBQ3RDLEdBQUlneUIsRUFDQSxNQUFPLENBQUU3NUIsTUFBTzY1QixHQUVwQixNQUFNeGdCLEVBQXNDLFFBQXZCdmMsRUFBS21ELEVBQUsyc0IsZUFBNEIsSUFBUDl2QixPQUFnQixFQUFTQSxFQUFHd1gsYUFDaEYsR0FBSStFLEVBQWEsQ0FDYixNQUFNLE1BQUVyWixTQUFnQnBJLEtBQUttN0IsTUFBTXBFLFFBQVF0VixFQUFhdVYsR0FDeEQsR0FBSTV1QixLVDN5Q2IsU0FBd0JBLEdBQzNCLE9BQU9tbEIsR0FBWW5sQixJQUF5QixpQkFBZkEsRUFBTXRCLElBQ3ZDLENTNHlDMEI4OUIsQ0FBZXg4QixJQUNDLE1BQWpCQSxFQUFNRSxRQUFtQyxNQUFqQkYsRUFBTUUsUUFBbUMsTUFBakJGLEVBQU1FLFFBQ3ZELE1BQU8sQ0FBRUYsUUFHckIsQ0FLQSxNQUpjLFdBQVY0dUIsVUFDTWgzQixLQUFLbTlCLHVCQUNMN0wsR0FBZ0J0eEIsS0FBS214QixRQUFTLEdBQUdueEIsS0FBS295Qiw2QkFFekMsQ0FBRWhxQixNQUFPLE9BRXhCLENBS0EsaUJBQUF5OEIsQ0FBa0I1ekIsR0FDZCxNQUFNb00sRVA1MENILHVDQUF1Q3hILFFBQVEsUUFBUyxTQUFVdlUsR0FDckUsTUFBTW9NLEVBQXFCLEdBQWhCb2pCLEtBQUtDLFNBQWlCLEVBQ2pDLE9BRDZDLEtBQUx6dkIsRUFBV29NLEVBQVMsRUFBSkEsRUFBVyxHQUMxRDVGLFNBQVMsR0FDdEIsR08wMENVZzlCLEVBQWUsQ0FDakJ6bkIsS0FDQXBNLFdBQ0FtTSxZQUFhLEtBQ1RwZCxLQUFLcThCLE9BQU8saUJBQWtCLHdDQUF5Q2hmLEdBQ3ZFcmQsS0FBS3M2QixvQkFBb0I4SixPQUFPL21CLEtBV3hDLE9BUkFyZCxLQUFLcThCLE9BQU8sdUJBQXdCLDhCQUErQmhmLEdBQ25FcmQsS0FBS3M2QixvQkFBb0I1NEIsSUFBSTJiLEVBQUl5bkIsR0FDakMsaUJBQ1U5a0MsS0FBSzI2Qix3QkFDTDM2QixLQUFLeThCLGNBQWMsRUFBR3gwQixVQUN4QmpJLEtBQUsra0Msb0JBQW9CMW5CLElBRWhDLEVBTEQsR0FNTyxDQUFFaFYsS0FBTSxDQUFFeThCLGdCQUNyQixDQUNBLHlCQUFNQyxDQUFvQjFuQixHQUN0QixhQUFhcmQsS0FBS2dpQyxZQUFZLzVCLE1BQU9nSSxJQUNqQyxJQUFJL0ssRUFBSWdELEVBQ1IsSUFDSSxNQUFRRyxNQUFNLFFBQUUyc0IsR0FBUyxNQUFFNXNCLEdBQVc2SCxFQUN0QyxHQUFJN0gsRUFDQSxNQUFNQSxRQUN5QyxRQUEzQ2xELEVBQUtsRixLQUFLczZCLG9CQUFvQnoyQixJQUFJd1osVUFBd0IsSUFBUG5ZLE9BQWdCLEVBQVNBLEVBQUcrTCxTQUFTLGtCQUFtQitqQixJQUNuSGgxQixLQUFLcThCLE9BQU8sa0JBQW1CLGNBQWVoZixFQUFJLFVBQVcyWCxFQUNqRSxDQUNBLE1BQU96TyxTQUNnRCxRQUEzQ3JlLEVBQUtsSSxLQUFLczZCLG9CQUFvQnoyQixJQUFJd1osVUFBd0IsSUFBUG5WLE9BQWdCLEVBQVNBLEVBQUcrSSxTQUFTLGtCQUFtQixPQUNuSGpSLEtBQUtxOEIsT0FBTyxrQkFBbUIsY0FBZWhmLEVBQUksUUFBU2tKLEdBQzNEalIsUUFBUWxOLE1BQU1tZSxFQUNsQixHQUVSLENBUUEsMkJBQU15ZSxDQUFzQjlOLEVBQU8veEIsRUFBVSxDQUFDLEdBQzFDLElBQUk4dEIsRUFBZ0IsS0FDaEI4SyxFQUFzQixLQUNKLFNBQWxCLzlCLEtBQUt1c0IsWUFFSjBHLEVBQWU4SyxTQUE2QjVMLEdBQTBCbnlCLEtBQUtteEIsUUFBU254QixLQUFLb3lCLFlBQVksSUFHMUcsSUFDSSxhQUFhcUMsR0FBU3owQixLQUFLWSxNQUFPLE9BQVEsR0FBR1osS0FBS1MsY0FBZSxDQUM3RG9DLEtBQU0sQ0FDRnEwQixRQUNBK0csZUFBZ0JoTCxFQUNoQmlMLHNCQUF1QkgsRUFDdkJMLHFCQUFzQixDQUFFQyxjQUFleDRCLEVBQVF5NEIsZUFFbkRsOUIsUUFBU1YsS0FBS1UsUUFDZGswQixXQUFZenZCLEVBQVF5dkIsWUFFNUIsQ0FDQSxNQUFPeHNCLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixDQUlBLHVCQUFNNjhCLEdBQ0YsSUFBSS8vQixFQUNKLElBQ0ksTUFBTSxLQUFFbUQsRUFBSSxNQUFFRCxTQUFnQnBJLEtBQUtvakMsVUFDbkMsR0FBSWg3QixFQUNBLE1BQU1BLEVBQ1YsTUFBTyxDQUFFQyxLQUFNLENBQUU2OEIsV0FBNEMsUUFBL0JoZ0MsRUFBS21ELEVBQUtrdEIsS0FBSzJQLGtCQUErQixJQUFQaGdDLEVBQWdCQSxFQUFLLElBQU1rRCxNQUFPLEtBQzNHLENBQ0EsTUFBT0EsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLENBS0Esa0JBQU0rOEIsQ0FBYTFILEdBQ2YsSUFBSXY0QixFQUNKLElBQ0ksTUFBTSxLQUFFbUQsRUFBSSxNQUFFRCxTQUFnQnBJLEtBQUtnaUMsWUFBWS81QixNQUFPZ0ksSUFDbEQsSUFBSS9LLEVBQUlnRCxFQUFJQyxFQUFJZ0IsRUFBSWtXLEVBQ3BCLE1BQU0sS0FBRWhYLEVBQUksTUFBRUQsR0FBVTZILEVBQ3hCLEdBQUk3SCxFQUNBLE1BQU1BLEVBQ1YsTUFBTTNILFFBQVlULEtBQUtvbEMsbUJBQW1CLEdBQUdwbEMsS0FBS1MsZ0NBQWlDZzlCLEVBQVllLFNBQVUsQ0FDckc1SixXQUEyQyxRQUE5QjF2QixFQUFLdTRCLEVBQVl0NEIsZUFBNEIsSUFBUEQsT0FBZ0IsRUFBU0EsRUFBRzB2QixXQUMvRTZKLE9BQXVDLFFBQTlCdjJCLEVBQUt1MUIsRUFBWXQ0QixlQUE0QixJQUFQK0MsT0FBZ0IsRUFBU0EsRUFBR3UyQixPQUMzRUMsWUFBNEMsUUFBOUJ2MkIsRUFBS3MxQixFQUFZdDRCLGVBQTRCLElBQVBnRCxPQUFnQixFQUFTQSxFQUFHdTJCLFlBQ2hGQyxxQkFBcUIsSUFFekIsYUFBYWxLLEdBQVN6MEIsS0FBS1ksTUFBTyxNQUFPSCxFQUFLLENBQzFDQyxRQUFTVixLQUFLVSxRQUNkZzBCLElBQXlGLFFBQW5GclYsRUFBNkIsUUFBdkJsVyxFQUFLZCxFQUFLMnNCLGVBQTRCLElBQVA3ckIsT0FBZ0IsRUFBU0EsRUFBR3VULG9CQUFpQyxJQUFQMkMsRUFBZ0JBLE9BQUtwYyxNQUc5SCxHQUFJbUYsRUFDQSxNQUFNQSxFQUlWLE9BSEksUUFBZ0QsUUFBOUJsRCxFQUFLdTRCLEVBQVl0NEIsZUFBNEIsSUFBUEQsT0FBZ0IsRUFBU0EsRUFBR3k1QixzQkFDcEYxeUIsT0FBTzR3QixTQUFTejJCLE9BQU9pQyxhQUFtQyxFQUFTQSxFQUFLNUgsS0FFckUsQ0FBRTRILEtBQU0sQ0FBRW0yQixTQUFVZixFQUFZZSxTQUFVLzlCLElBQUs0SCxhQUFtQyxFQUFTQSxFQUFLNUgsS0FBTzJILE1BQU8sS0FDekgsQ0FDQSxNQUFPQSxHQUNILEdBQUltbEIsR0FBWW5sQixHQUNaLE1BQU8sQ0FBRUMsS0FBTSxDQUFFbTJCLFNBQVVmLEVBQVllLFNBQVUvOUIsSUFBSyxNQUFRMkgsU0FFbEUsTUFBTUEsQ0FDVixDQUNKLENBSUEsb0JBQU1pOUIsQ0FBZUMsR0FDakIsSUFDSSxhQUFhdGxDLEtBQUtnaUMsWUFBWS81QixNQUFPZ0ksSUFDakMsSUFBSS9LLEVBQUlnRCxFQUNSLE1BQU0sS0FBRUcsRUFBSSxNQUFFRCxHQUFVNkgsRUFDeEIsR0FBSTdILEVBQ0EsTUFBTUEsRUFFVixhQUFhcXNCLEdBQVN6MEIsS0FBS1ksTUFBTyxTQUFVLEdBQUdaLEtBQUtTLHVCQUF1QjZrQyxFQUFTQyxjQUFlLENBQy9GN2tDLFFBQVNWLEtBQUtVLFFBQ2RnMEIsSUFBeUYsUUFBbkZ4c0IsRUFBNkIsUUFBdkJoRCxFQUFLbUQsRUFBSzJzQixlQUE0QixJQUFQOXZCLE9BQWdCLEVBQVNBLEVBQUd3WCxvQkFBaUMsSUFBUHhVLEVBQWdCQSxPQUFLakYsS0FHbEksQ0FDQSxNQUFPbUYsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLENBS0EseUJBQU1vOUIsQ0FBb0JDLEdBQ3RCLE1BQU1DLEVBQVksd0JBQXdCRCxFQUFhck4sVUFBVSxFQUFHLFNBQ3BFcDRCLEtBQUtxOEIsT0FBT3FKLEVBQVcsU0FDdkIsSUFDSSxNQUFNQyxFQUFZeFksS0FBS21JLE1BRXZCLGFQMTBDYzV1QixFTzAwQ1N1QixNQUFPMjlCLElBQ3RCQSxFQUFVLFNQcjFDdkIzOUIsZUFBcUI0TSxHQUN4QixhQUFhLElBQUluRixRQUFTbTJCLElBQ3RCbnpCLFdBQVcsSUFBTW16QixFQUFPLE1BQU9oeEIsSUFFdkMsQ09rMUMwQml4QixDQUFNLElBQU1oVixLQUFLaVYsSUFBSSxFQUFHSCxFQUFVLElBRTVDNWxDLEtBQUtxOEIsT0FBT3FKLEVBQVcscUJBQXNCRSxTQUNoQ25SLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRLEdBQUdaLEtBQUtTLHFDQUFzQyxDQUNwRm9DLEtBQU0sQ0FBRW95QixjQUFld1EsR0FDdkIva0MsUUFBU1YsS0FBS1UsUUFDZG8wQixNQUFPQyxNUGwxQ0dpUixFT28xQ2YsQ0FBQ0osRUFBU3g5QixLQUNULE1BQU02OUIsRUFBc0IsSUFBTW5WLEtBQUtpVixJQUFJLEVBQUdILEdBQzlDLE9BQVF4OUIsR0FDSjZsQixHQUEwQjdsQixJQUUxQitrQixLQUFLbUksTUFBUTJRLEVBQXNCTixFQUFZM1ksSVB4MUMvQyxJQUFJdGQsUUFBUSxDQUFDbTJCLEVBQVFqMkIsS0FHakMsV0FDSSxJQUFLLElBQUlnMkIsRUFBVSxFQUFHQSxFQUFVTSxJQUFVTixJQUN0QyxJQUNJLE1BQU0zMUIsUUFBZXZKLEVBQUdrL0IsR0FDeEIsSUFBS0ksRUFBWUosRUFBUyxNQUV0QixZQURBQyxFQUFPNTFCLEVBR2YsQ0FDQSxNQUFPNUMsR0FDSCxJQUFLMjRCLEVBQVlKLEVBQVN2NEIsR0FFdEIsWUFEQXVDLEVBQU92QyxFQUdmLENBRVAsRUFoQkQsS091MUNBLENBQ0EsTUFBT2pGLEdBRUgsR0FEQXBJLEtBQUtxOEIsT0FBT3FKLEVBQVcsUUFBU3Q5QixHQUM1Qm1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLENBQUUyc0IsUUFBUyxLQUFNTyxLQUFNLE1BQVFudEIsU0FFbEQsTUFBTUEsQ0FDVixDQUNBLFFBQ0lwSSxLQUFLcThCLE9BQU9xSixFQUFXLE1BQzNCLENQcjJDRCxJQUFtQmgvQixFQUFJcy9CLENPczJDMUIsQ0FDQSxlQUFBdEQsQ0FBZ0JELEdBTVosTUFMK0MsaUJBQWpCQSxHQUNULE9BQWpCQSxHQUNBLGlCQUFrQkEsR0FDbEIsa0JBQW1CQSxHQUNuQixlQUFnQkEsQ0FFeEIsQ0FDQSwyQkFBTWxFLENBQXNCQyxFQUFVcjVCLEdBQ2xDLE1BQU0xRSxRQUFZVCxLQUFLb2xDLG1CQUFtQixHQUFHcGxDLEtBQUtTLGdCQUFpQis5QixFQUFVLENBQ3pFNUosV0FBWXp2QixFQUFReXZCLFdBQ3BCNkosT0FBUXQ1QixFQUFRczVCLE9BQ2hCQyxZQUFhdjVCLEVBQVF1NUIsY0FPekIsT0FMQTErQixLQUFLcThCLE9BQU8sMkJBQTRCLFdBQVltQyxFQUFVLFVBQVdyNUIsRUFBUyxNQUFPMUUsR0FFckYsT0FBZ0IwRSxFQUFRdzVCLHFCQUN4QjF5QixPQUFPNHdCLFNBQVN6MkIsT0FBTzNGLEdBRXBCLENBQUU0SCxLQUFNLENBQUVtMkIsV0FBVS85QixPQUFPMkgsTUFBTyxLQUM3QyxDQUtBLHdCQUFNazFCLEdBQ0YsSUFBSXA0QixFQUNKLE1BQU13Z0MsRUFBWSx3QkFDbEIxbEMsS0FBS3E4QixPQUFPcUosRUFBVyxTQUN2QixJQUNJLE1BQU1sRCxRQUF1QnBSLEdBQWFweEIsS0FBS214QixRQUFTbnhCLEtBQUtveUIsWUFFN0QsR0FEQXB5QixLQUFLcThCLE9BQU9xSixFQUFXLHVCQUF3QmxELElBQzFDeGlDLEtBQUswaUMsZ0JBQWdCRixHQUt0QixPQUpBeGlDLEtBQUtxOEIsT0FBT3FKLEVBQVcsNkJBQ0EsT0FBbkJsRCxTQUNNeGlDLEtBQUttOUIsa0JBSW5CLE1BQU1nSixFQUFtRyxLQUF6QyxRQUFwQ2poQyxFQUFLczlCLEVBQWVwTixrQkFBK0IsSUFBUGx3QixFQUFnQkEsRUFBS2doQyxLQUFtQi9ZLEtBQUttSSxNVjlpRGpHc04sSVVnakRwQixHQURBNWlDLEtBQUtxOEIsT0FBT3FKLEVBQVcsY0FBY1MsRUFBb0IsR0FBSyx3Q0FDMURBLEdBQ0EsR0FBSW5tQyxLQUFLb3NCLGtCQUFvQm9XLEVBQWV2TixjQUFlLENBQ3ZELE1BQU0sTUFBRTdzQixTQUFnQnBJLEtBQUttakMsa0JBQWtCWCxFQUFldk4sZUFDMUQ3c0IsSUFDQWtOLFFBQVFsTixNQUFNQSxHQUNUNmxCLEdBQTBCN2xCLEtBQzNCcEksS0FBS3E4QixPQUFPcUosRUFBVyxrRUFBbUV0OUIsU0FDcEZwSSxLQUFLbTlCLGtCQUd2QixhQU1NbjlCLEtBQUtzOEIsc0JBQXNCLFlBQWFrRyxFQUV0RCxDQUNBLE1BQU9qYyxHQUdILE9BRkF2bUIsS0FBS3E4QixPQUFPcUosRUFBVyxRQUFTbmYsUUFDaENqUixRQUFRbE4sTUFBTW1lLEVBRWxCLENBQ0EsUUFDSXZtQixLQUFLcThCLE9BQU9xSixFQUFXLE1BQzNCLENBQ0osQ0FDQSx1QkFBTXZDLENBQWtCc0MsR0FDcEIsSUFBSXZnQyxFQUFJZ0QsRUFDUixJQUFLdTlCLEVBQ0QsTUFBTSxJQUFJOVgsR0FHZCxHQUFJM3RCLEtBQUswNkIsbUJBQ0wsT0FBTzE2QixLQUFLMDZCLG1CQUFtQmxKLFFBRW5DLE1BQU1rVSxFQUFZLHNCQUFzQkQsRUFBYXJOLFVBQVUsRUFBRyxTQUNsRXA0QixLQUFLcThCLE9BQU9xSixFQUFXLFNBQ3ZCLElBQ0kxbEMsS0FBSzA2QixtQkFBcUIsSUFBSW5KLEdBQzlCLE1BQU0sS0FBRWxwQixFQUFJLE1BQUVELFNBQWdCcEksS0FBS3dsQyxvQkFBb0JDLEdBQ3ZELEdBQUlyOUIsRUFDQSxNQUFNQSxFQUNWLElBQUtDLEVBQUsyc0IsUUFDTixNQUFNLElBQUlySCxTQUNSM3RCLEtBQUtxOUIsYUFBYWgxQixFQUFLMnNCLGVBQ3ZCaDFCLEtBQUtzOEIsc0JBQXNCLGtCQUFtQmowQixFQUFLMnNCLFNBQ3pELE1BQU0va0IsRUFBUyxDQUFFK2tCLFFBQVMzc0IsRUFBSzJzQixRQUFTNXNCLE1BQU8sTUFFL0MsT0FEQXBJLEtBQUswNkIsbUJBQW1CL3FCLFFBQVFNLEdBQ3pCQSxDQUNYLENBQ0EsTUFBTzdILEdBRUgsR0FEQXBJLEtBQUtxOEIsT0FBT3FKLEVBQVcsUUFBU3Q5QixHQUM1Qm1sQixHQUFZbmxCLEdBQVEsQ0FDcEIsTUFBTTZILEVBQVMsQ0FBRStrQixRQUFTLEtBQU01c0IsU0FLaEMsT0FKSzZsQixHQUEwQjdsQixVQUNyQnBJLEtBQUttOUIsaUJBRW9CLFFBQWxDajRCLEVBQUtsRixLQUFLMDZCLDBCQUF1QyxJQUFQeDFCLEdBQXlCQSxFQUFHeUssUUFBUU0sR0FDeEVBLENBQ1gsQ0FFQSxNQURtQyxRQUFsQy9ILEVBQUtsSSxLQUFLMDZCLDBCQUF1QyxJQUFQeHlCLEdBQXlCQSxFQUFHMEgsT0FBT3hILEdBQ3hFQSxDQUNWLENBQ0EsUUFDSXBJLEtBQUswNkIsbUJBQXFCLEtBQzFCMTZCLEtBQUtxOEIsT0FBT3FKLEVBQVcsTUFDM0IsQ0FDSixDQUNBLDJCQUFNcEosQ0FBc0J2cUIsRUFBT2lqQixFQUFTbmEsR0FBWSxHQUNwRCxNQUFNNnFCLEVBQVksMEJBQTBCM3pCLEtBQzVDL1IsS0FBS3E4QixPQUFPcUosRUFBVyxRQUFTMVEsRUFBUyxlQUFlbmEsS0FDeEQsSUFDUTdhLEtBQUsrNkIsa0JBQW9CbGdCLEdBQ3pCN2EsS0FBSys2QixpQkFBaUI1VixZQUFZLENBQUVwVCxRQUFPaWpCLFlBRS9DLE1BQU1wVixFQUFTLEdBQ1R3bUIsRUFBV2xrQyxNQUFNOEIsS0FBS2hFLEtBQUtzNkIsb0JBQW9CeDRCLFVBQVVULElBQUk0RyxNQUFPM0YsSUFDdEUsVUFDVUEsRUFBRTJPLFNBQVNjLEVBQU9pakIsRUFDNUIsQ0FDQSxNQUFPM25CLEdBQ0h1UyxFQUFPM2QsS0FBS29MLEVBQ2hCLElBR0osU0FETXFDLFFBQVFxVCxJQUFJcWpCLEdBQ2R4bUIsRUFBT25kLE9BQVMsRUFBRyxDQUNuQixJQUFLLElBQUl1YSxFQUFJLEVBQUdBLEVBQUk0QyxFQUFPbmQsT0FBUXVhLEdBQUssRUFDcEMxSCxRQUFRbE4sTUFBTXdYLEVBQU81QyxJQUV6QixNQUFNNEMsRUFBTyxFQUNqQixDQUNKLENBQ0EsUUFDSTVmLEtBQUtxOEIsT0FBT3FKLEVBQVcsTUFDM0IsQ0FDSixDQUtBLGtCQUFNckksQ0FBYXJJLEdBQ2ZoMUIsS0FBS3E4QixPQUFPLGtCQUFtQnJILEdBRy9CaDFCLEtBQUs0NkIsMkJBQTRCLFFBQzNCMUosR0FBYWx4QixLQUFLbXhCLFFBQVNueEIsS0FBS295QixXQUFZNEMsRUFDdEQsQ0FDQSxvQkFBTW1JLEdBQ0ZuOUIsS0FBS3E4QixPQUFPLDJCQUNOL0ssR0FBZ0J0eEIsS0FBS214QixRQUFTbnhCLEtBQUtveUIsa0JBQ25DcHlCLEtBQUtzOEIsc0JBQXNCLGFBQWMsS0FDbkQsQ0FPQSxnQ0FBQStKLEdBQ0lybUMsS0FBS3E4QixPQUFPLHVDQUNaLE1BQU1wckIsRUFBV2pSLEtBQUt5NkIsMEJBQ3RCejZCLEtBQUt5NkIsMEJBQTRCLEtBQ2pDLElBQ1F4cEIsR0FBWSxPQUEyQixPQUFYaEYsYUFBOEIsSUFBWEEsWUFBb0IsRUFBU0EsT0FBT3E2QixzQkFDbkZyNkIsT0FBT3E2QixvQkFBb0IsbUJBQW9CcjFCLEVBRXZELENBQ0EsTUFBTzVELEdBQ0hpSSxRQUFRbE4sTUFBTSw0Q0FBNkNpRixFQUMvRCxDQUNKLENBS0EsdUJBQU1rNUIsU0FDSXZtQyxLQUFLd21DLG1CQUNYeG1DLEtBQUtxOEIsT0FBTyx3QkFDWixNQUFNb0ssRUFBUzFoQixZQUFZLElBQU0va0IsS0FBSzBtQyx3QkFBeUIxWixJQUMvRGh0QixLQUFLdzZCLGtCQUFvQmlNLEVBQ3JCQSxHQUE0QixpQkFBWEEsR0FBK0MsbUJBQWpCQSxFQUFPRSxNQU90REYsRUFBT0UsUUFHYyxvQkFBVDlhLE1BQW1ELG1CQUFwQkEsS0FBSythLFlBSWhEL2EsS0FBSythLFdBQVdILEdBS3BCL3pCLFdBQVd6SyxnQkFDRGpJLEtBQUsyNkIsd0JBQ0wzNkIsS0FBSzBtQyx5QkFDWixFQUNQLENBS0Esc0JBQU1GLEdBQ0Z4bUMsS0FBS3E4QixPQUFPLHVCQUNaLE1BQU1vSyxFQUFTem1DLEtBQUt3NkIsa0JBQ3BCeDZCLEtBQUt3NkIsa0JBQW9CLEtBQ3JCaU0sR0FDQS9qQixjQUFjK2pCLEVBRXRCLENBdUJBLHNCQUFNSSxHQUNGN21DLEtBQUtxbUMseUNBQ0NybUMsS0FBS3VtQyxtQkFDZixDQVNBLHFCQUFNTyxHQUNGOW1DLEtBQUtxbUMseUNBQ0NybUMsS0FBS3dtQyxrQkFDZixDQUlBLDJCQUFNRSxHQUNGMW1DLEtBQUtxOEIsT0FBTywyQkFBNEIsU0FDeEMsVUFDVXI4QixLQUFLeThCLGFBQWEsRUFBR3gwQixVQUN2QixJQUNJLE1BQU1xdEIsRUFBTW5JLEtBQUttSSxNQUNqQixJQUNJLGFBQWF0MUIsS0FBS2dpQyxZQUFZLzVCLE1BQU9nSSxJQUNqQyxNQUFRNUgsTUFBTSxRQUFFMnNCLElBQWUva0IsRUFDL0IsSUFBSytrQixJQUFZQSxFQUFRQyxnQkFBa0JELEVBQVFJLFdBRS9DLFlBREFwMUIsS0FBS3E4QixPQUFPLDJCQUE0QixjQUk1QyxNQUFNMEssRUFBaUJqVyxLQUFLK0IsT0FBNEIsSUFBckJtQyxFQUFRSSxXQUFvQkUsR0FBT3RJLElBQ3RFaHRCLEtBQUtxOEIsT0FBTywyQkFBNEIsMkJBQTJCMEssK0RBQy9EQSxHVi94RFcsU1VneURML21DLEtBQUttakMsa0JBQWtCbk8sRUFBUUMsZ0JBR2pELENBQ0EsTUFBTzVuQixHQUNIaUksUUFBUWxOLE1BQU0seUVBQTBFaUYsRUFDNUYsQ0FDSixDQUNBLFFBQ0lyTixLQUFLcThCLE9BQU8sMkJBQTRCLE1BQzVDLEdBRVIsQ0FDQSxNQUFPaHZCLEdBQ0gsS0FBSUEsRUFBRThyQixrQkFBb0I5ckIsYUFBYTZyQixJQUluQyxNQUFNN3JCLEVBSE5yTixLQUFLcThCLE9BQU8sNkNBS3BCLENBQ0osQ0FNQSw2QkFBTWtCLEdBRUYsR0FEQXY5QixLQUFLcThCLE9BQU8sK0JBQ1AsUUFBNEIsT0FBWHB3QixhQUE4QixJQUFYQSxZQUFvQixFQUFTQSxPQUFPbXdCLGtCQUt6RSxPQUpJcDhCLEtBQUtvc0Isa0JBRUxwc0IsS0FBSzZtQyxvQkFFRixFQUVYLElBQ0k3bUMsS0FBS3k2QiwwQkFBNEJ4eUIsZUFBa0JqSSxLQUFLZ25DLHNCQUFxQixHQUNsRSxPQUFYLzZCLGFBQThCLElBQVhBLFFBQTZCQSxPQUFPbXdCLGlCQUFpQixtQkFBb0JwOEIsS0FBS3k2QixpQ0FHM0Z6NkIsS0FBS2duQyxzQkFBcUIsRUFDcEMsQ0FDQSxNQUFPNStCLEdBQ0hrTixRQUFRbE4sTUFBTSwwQkFBMkJBLEVBQzdDLENBQ0osQ0FJQSwwQkFBTTQrQixDQUFxQkMsR0FDdkIsTUFBTUMsRUFBYSx5QkFBeUJELEtBQzVDam5DLEtBQUtxOEIsT0FBTzZLLEVBQVksa0JBQW1CcGIsU0FBU3FiLGlCQUNuQixZQUE3QnJiLFNBQVNxYixpQkFDTG5uQyxLQUFLb3NCLGtCQUdMcHNCLEtBQUt1bUMsb0JBRUpVLFVBS0tqbkMsS0FBSzI2Qix3QkFDTDM2QixLQUFLeThCLGNBQWMsRUFBR3gwQixVQUNTLFlBQTdCNmpCLFNBQVNxYixzQkFNUG5uQyxLQUFLczlCLHFCQUxQdDlCLEtBQUtxOEIsT0FBTzZLLEVBQVksZ0hBU0YsV0FBN0JwYixTQUFTcWIsaUJBQ1ZubkMsS0FBS29zQixrQkFDTHBzQixLQUFLd21DLGtCQUdqQixDQU9BLHdCQUFNcEIsQ0FBbUIza0MsRUFBSys5QixFQUFVcjVCLEdBQ3BDLE1BQU1paUMsRUFBWSxDQUFDLFlBQVlDLG1CQUFtQjdJLE1BT2xELElBTklyNUIsYUFBeUMsRUFBU0EsRUFBUXl2QixhQUMxRHdTLEVBQVVubEMsS0FBSyxlQUFlb2xDLG1CQUFtQmxpQyxFQUFReXZCLGdCQUV6RHp2QixhQUF5QyxFQUFTQSxFQUFRczVCLFNBQzFEMkksRUFBVW5sQyxLQUFLLFVBQVVvbEMsbUJBQW1CbGlDLEVBQVFzNUIsV0FFbEMsU0FBbEJ6K0IsS0FBS3VzQixTQUFxQixDQUMxQixNQUFPMEcsRUFBZThLLFNBQTZCNUwsR0FBMEJueUIsS0FBS214QixRQUFTbnhCLEtBQUtveUIsWUFDMUZrVixFQUFhLElBQUkvaEIsZ0JBQWdCLENBQ25DMFksZUFBZ0IsR0FBR29KLG1CQUFtQnBVLEtBQ3RDaUwsc0JBQXVCLEdBQUdtSixtQkFBbUJ0SixPQUVqRHFKLEVBQVVubEMsS0FBS3FsQyxFQUFXeC9CLFdBQzlCLENBQ0EsR0FBSTNDLGFBQXlDLEVBQVNBLEVBQVF1NUIsWUFBYSxDQUN2RSxNQUFNcHpCLEVBQVEsSUFBSWlhLGdCQUFnQnBnQixFQUFRdTVCLGFBQzFDMEksRUFBVW5sQyxLQUFLcUosRUFBTXhELFdBQ3pCLENBSUEsT0FISTNDLGFBQXlDLEVBQVNBLEVBQVF3NUIsc0JBQzFEeUksRUFBVW5sQyxLQUFLLHNCQUFzQmtELEVBQVF3NUIsdUJBRTFDLEdBQUdsK0IsS0FBTzJtQyxFQUFVNWxDLEtBQUssTUFDcEMsQ0FDQSxlQUFNbzZCLENBQVVyaEIsR0FDWixJQUNJLGFBQWF2YSxLQUFLZ2lDLFlBQVkvNUIsTUFBT2dJLElBQ2pDLElBQUkvSyxFQUNKLE1BQVFtRCxLQUFNbzdCLEVBQWFyN0IsTUFBTzY1QixHQUFpQmh5QixFQUNuRCxPQUFJZ3lCLEVBQ08sQ0FBRTU1QixLQUFNLEtBQU1ELE1BQU82NUIsU0FFbkJ4TixHQUFTejBCLEtBQUtZLE1BQU8sU0FBVSxHQUFHWixLQUFLUyxlQUFlOFosRUFBT2d0QixXQUFZLENBQ2xGN21DLFFBQVNWLEtBQUtVLFFBQ2RnMEIsSUFBOEYsUUFBeEZ4dkIsRUFBS3UrQixhQUFpRCxFQUFTQSxFQUFZek8sZUFBNEIsSUFBUDl2QixPQUFnQixFQUFTQSxFQUFHd1gsZ0JBRzlJLENBQ0EsTUFBT3RVLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixDQUNBLGFBQU1zekIsQ0FBUW5oQixHQUNWLElBQ0ksYUFBYXZhLEtBQUtnaUMsWUFBWS81QixNQUFPZ0ksSUFDakMsSUFBSS9LLEVBQUlnRCxFQUNSLE1BQVFHLEtBQU1vN0IsRUFBYXI3QixNQUFPNjVCLEdBQWlCaHlCLEVBQ25ELEdBQUlneUIsRUFDQSxNQUFPLENBQUU1NUIsS0FBTSxLQUFNRCxNQUFPNjVCLEdBRWhDLE1BQU1wL0IsRUFBTzFDLE9BQU9pRyxPQUFPLENBQUVvaEMsY0FBZWp0QixFQUFPa3RCLGFBQWNDLFlBQWFudEIsRUFBT290QixZQUFxQyxVQUF0QnB0QixFQUFPb3RCLFdBQXlCLENBQUV4SixNQUFPNWpCLEVBQU80akIsT0FBVSxDQUFFeUosT0FBUXJ0QixFQUFPcXRCLFVBQ3pLLEtBQUV2L0IsRUFBSSxNQUFFRCxTQUFnQnFzQixHQUFTejBCLEtBQUtZLE1BQU8sT0FBUSxHQUFHWixLQUFLUyxjQUFlLENBQzlFb0MsT0FDQW5DLFFBQVNWLEtBQUtVLFFBQ2RnMEIsSUFBOEYsUUFBeEZ4dkIsRUFBS3UrQixhQUFpRCxFQUFTQSxFQUFZek8sZUFBNEIsSUFBUDl2QixPQUFnQixFQUFTQSxFQUFHd1gsZUFFdEksT0FBSXRVLEVBQ08sQ0FBRUMsS0FBTSxLQUFNRCxVQUVDLFNBQXRCbVMsRUFBT290QixhQUEyRixRQUFoRXovQixFQUFLRyxhQUFtQyxFQUFTQSxFQUFLdy9CLFlBQXlCLElBQVAzL0IsT0FBZ0IsRUFBU0EsRUFBRzQvQixXQUN0SXovQixFQUFLdy9CLEtBQUtDLFFBQVUsNEJBQTRCei9CLEVBQUt3L0IsS0FBS0MsV0FFdkQsQ0FBRXovQixPQUFNRCxNQUFPLFFBRTlCLENBQ0EsTUFBT0EsR0FDSCxHQUFJbWxCLEdBQVlubEIsR0FDWixNQUFPLENBQUVDLEtBQU0sS0FBTUQsU0FFekIsTUFBTUEsQ0FDVixDQUNKLENBSUEsYUFBTW96QixDQUFRamhCLEdBQ1YsT0FBT3ZhLEtBQUt5OEIsY0FBYyxFQUFHeDBCLFVBQ3pCLElBQ0ksYUFBYWpJLEtBQUtnaUMsWUFBWS81QixNQUFPZ0ksSUFDakMsSUFBSS9LLEVBQ0osTUFBUW1ELEtBQU1vN0IsRUFBYXI3QixNQUFPNjVCLEdBQWlCaHlCLEVBQ25ELEdBQUlneUIsRUFDQSxNQUFPLENBQUU1NUIsS0FBTSxLQUFNRCxNQUFPNjVCLEdBRWhDLE1BQU0sS0FBRTU1QixFQUFJLE1BQUVELFNBQWdCcXNCLEdBQVN6MEIsS0FBS1ksTUFBTyxPQUFRLEdBQUdaLEtBQUtTLGVBQWU4WixFQUFPZ3RCLGtCQUFtQixDQUN4RzFrQyxLQUFNLENBQUVrRyxLQUFNd1IsRUFBT3hSLEtBQU1nL0IsYUFBY3h0QixFQUFPeXRCLGFBQ2hEdG5DLFFBQVNWLEtBQUtVLFFBQ2RnMEIsSUFBOEYsUUFBeEZ4dkIsRUFBS3UrQixhQUFpRCxFQUFTQSxFQUFZek8sZUFBNEIsSUFBUDl2QixPQUFnQixFQUFTQSxFQUFHd1gsZUFFdEksT0FBSXRVLEVBQ08sQ0FBRUMsS0FBTSxLQUFNRCxnQkFFbkJwSSxLQUFLcTlCLGFBQWFsOUIsT0FBT2lHLE9BQU8sQ0FBRWd2QixXQUFZdEUsS0FBS3VFLE1BQU1sSSxLQUFLbUksTUFBUSxLQUFRanRCLEVBQUs2c0IsWUFBYzdzQixVQUNqR3JJLEtBQUtzOEIsc0JBQXNCLHlCQUEwQmowQixHQUNwRCxDQUFFQSxPQUFNRCxXQUV2QixDQUNBLE1BQU9BLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsR0FFUixDQUlBLGdCQUFNMHpCLENBQVd2aEIsR0FDYixPQUFPdmEsS0FBS3k4QixjQUFjLEVBQUd4MEIsVUFDekIsSUFDSSxhQUFhakksS0FBS2dpQyxZQUFZLzVCLE1BQU9nSSxJQUNqQyxJQUFJL0ssRUFDSixNQUFRbUQsS0FBTW83QixFQUFhcjdCLE1BQU82NUIsR0FBaUJoeUIsRUFDbkQsT0FBSWd5QixFQUNPLENBQUU1NUIsS0FBTSxLQUFNRCxNQUFPNjVCLFNBRW5CeE4sR0FBU3owQixLQUFLWSxNQUFPLE9BQVEsR0FBR1osS0FBS1MsZUFBZThaLEVBQU9ndEIscUJBQXNCLENBQzFGMWtDLEtBQU0sQ0FBRW9ULFFBQVNzRSxFQUFPdEUsU0FDeEJ2VixRQUFTVixLQUFLVSxRQUNkZzBCLElBQThGLFFBQXhGeHZCLEVBQUt1K0IsYUFBaUQsRUFBU0EsRUFBWXpPLGVBQTRCLElBQVA5dkIsT0FBZ0IsRUFBU0EsRUFBR3dYLGdCQUc5SSxDQUNBLE1BQU90VSxHQUNILEdBQUltbEIsR0FBWW5sQixHQUNaLE1BQU8sQ0FBRUMsS0FBTSxLQUFNRCxTQUV6QixNQUFNQSxDQUNWLEdBRVIsQ0FJQSx5QkFBTTR6QixDQUFvQnpoQixHQUd0QixNQUFRbFMsS0FBTTQvQixFQUFlNy9CLE1BQU84L0IsU0FBeUJsb0MsS0FBSzg3QixXQUFXLENBQ3pFeUwsU0FBVWh0QixFQUFPZ3RCLFdBRXJCLE9BQUlXLEVBQ08sQ0FBRTcvQixLQUFNLEtBQU1ELE1BQU84L0IsU0FFbkJsb0MsS0FBS3c3QixRQUFRLENBQ3RCK0wsU0FBVWh0QixFQUFPZ3RCLFNBQ2pCUyxZQUFhQyxFQUFjNXFCLEdBQzNCdFUsS0FBTXdSLEVBQU94UixNQUVyQixDQUlBLGtCQUFNNnRCLEdBRUYsTUFBUXZ1QixNQUFNLEtBQUVrdEIsR0FBUW50QixNQUFPczdCLFNBQXFCMWpDLEtBQUtvakMsVUFDekQsR0FBSU0sRUFDQSxNQUFPLENBQUVyN0IsS0FBTSxLQUFNRCxNQUFPczdCLEdBRWhDLE1BQU03SyxHQUFXdEQsYUFBbUMsRUFBU0EsRUFBS3NELFVBQVksR0FDeEVnUCxFQUFPaFAsRUFBUXp6QixPQUFRK2lDLEdBQWtDLFNBQXZCQSxFQUFPVCxhQUE0QyxhQUFsQlMsRUFBTzcvQixRQUMxRTYxQixFQUFRdEYsRUFBUXp6QixPQUFRK2lDLEdBQWtDLFVBQXZCQSxFQUFPVCxhQUE2QyxhQUFsQlMsRUFBTzcvQixRQUNsRixNQUFPLENBQ0hELEtBQU0sQ0FDRjBhLElBQUs4VixFQUNMZ1AsT0FDQTFKLFNBRUovMUIsTUFBTyxLQUVmLENBSUEscUNBQU04ekIsR0FDRixPQUFPbDhCLEtBQUt5OEIsY0FBYyxFQUFHeDBCLGVBQ1pqSSxLQUFLZ2lDLFlBQVkvNUIsTUFBT2dJLElBQ2pDLElBQUkvSyxFQUFJZ0QsRUFDUixNQUFRRyxNQUFNLFFBQUUyc0IsR0FBVzVzQixNQUFPNjVCLEdBQWtCaHlCLEVBQ3BELEdBQUlneUIsRUFDQSxNQUFPLENBQUU1NUIsS0FBTSxLQUFNRCxNQUFPNjVCLEdBRWhDLElBQUtqTixFQUNELE1BQU8sQ0FDSDNzQixLQUFNLENBQUUrL0IsYUFBYyxLQUFNQyxVQUFXLEtBQU1DLDZCQUE4QixJQUMzRWxnQyxNQUFPLE1BR2YsTUFBTSxRQUFFNkosR0FBWTBmLEdBQVVxRCxFQUFRdFksY0FDdEMsSUFBSTByQixFQUFlLEtBQ2ZuMkIsRUFBUXMyQixNQUNSSCxFQUFlbjJCLEVBQVFzMkIsS0FFM0IsSUFBSUYsRUFBWUQsRUFNaEIsT0FMd0osUUFBL0hsZ0MsRUFBcUMsUUFBL0JoRCxFQUFLOHZCLEVBQVFPLEtBQUtzRCxlQUE0QixJQUFQM3pCLE9BQWdCLEVBQVNBLEVBQUdFLE9BQVEraUMsR0FBNkIsYUFBbEJBLEVBQU83L0IsZUFBMkMsSUFBUEosRUFBZ0JBLEVBQUssSUFDakt6RixPQUFTLElBQ3pCNGxDLEVBQVksUUFHVCxDQUFFaGdDLEtBQU0sQ0FBRSsvQixlQUFjQyxZQUFXQyw2QkFETHIyQixFQUFRdTJCLEtBQU8sSUFDc0JwZ0MsTUFBTyxRQUc3RixDQUNBLGNBQU1xZ0MsQ0FBU0MsRUFBS3ROLEVBQU8sQ0FBRTU0QixLQUFNLEtBRS9CLElBQUltbUMsRUFBTXZOLEVBQUs1NEIsS0FBS3lRLEtBQU10UCxHQUFRQSxFQUFJK2tDLE1BQVFBLEdBQzlDLEdBQUlDLEVBQ0EsT0FBT0EsRUFLWCxHQUZBQSxFQUFNM29DLEtBQUtvN0IsS0FBSzU0QixLQUFLeVEsS0FBTXRQLEdBQVFBLEVBQUkra0MsTUFBUUEsR0FFM0NDLEdBQU8zb0MsS0FBS3E3QixlVjNqRUEsSVUyakU0QmxPLEtBQUttSSxNQUM3QyxPQUFPcVQsRUFHWCxNQUFNLEtBQUV0Z0MsRUFBSSxNQUFFRCxTQUFnQnFzQixHQUFTejBCLEtBQUtZLE1BQU8sTUFBTyxHQUFHWixLQUFLUyw0QkFBNkIsQ0FDM0ZDLFFBQVNWLEtBQUtVLFVBRWxCLEdBQUkwSCxFQUNBLE1BQU1BLEVBRVYsSUFBS0MsRUFBSzdGLE1BQTZCLElBQXJCNkYsRUFBSzdGLEtBQUtDLE9BQ3hCLE1BQU0sSUFBSTJyQixHQUFvQixpQkFNbEMsR0FKQXB1QixLQUFLbzdCLEtBQU8veUIsRUFDWnJJLEtBQUtxN0IsZUFBaUJsTyxLQUFLbUksTUFFM0JxVCxFQUFNdGdDLEVBQUs3RixLQUFLeVEsS0FBTXRQLEdBQVFBLEVBQUkra0MsTUFBUUEsSUFDckNDLEVBQ0QsTUFBTSxJQUFJdmEsR0FBb0IseUNBRWxDLE9BQU91YSxDQUNYLENBS0EsZUFBTUMsQ0FBVWxVLEVBQUswRyxFQUFPLENBQUU1NEIsS0FBTSxLQUNoQyxJQUNJLElBQUkrTCxFQUFRbW1CLEVBQ1osSUFBS25tQixFQUFPLENBQ1IsTUFBTSxLQUFFbEcsRUFBSSxNQUFFRCxTQUFnQnBJLEtBQUttaUMsYUFDbkMsR0FBSS81QixJQUFVQyxFQUFLMnNCLFFBQ2YsTUFBTyxDQUFFM3NCLEtBQU0sS0FBTUQsU0FFekJtRyxFQUFRbEcsRUFBSzJzQixRQUFRdFksWUFDekIsQ0FDQSxNQUFNLE9BQUVtVixFQUFNLFFBQUU1ZixFQUFPLFVBQUU2ZixFQUFXQyxLQUFPRixPQUFRZ1gsRUFBVzUyQixRQUFTakIsSUFBa0IyZ0IsR0FBVXBqQixHQUluRyxHUHgzREwsU0FBcUJ3MUIsR0FDeEIsSUFBS0EsRUFDRCxNQUFNLElBQUl2NkIsTUFBTSxxQkFHcEIsR0FBSXU2QixHQURZalQsS0FBSytCLE1BQU0xRixLQUFLbUksTUFBUSxLQUVwQyxNQUFNLElBQUk5ckIsTUFBTSxrQkFFeEIsQ084MkRZcy9CLENBQVk3MkIsRUFBUTh4QixNQUVmbFMsRUFBTzZXLEtBQ08sVUFBZjdXLEVBQU9rWCxPQUNMLFdBQVk1N0IsZUFBYyxXQUFZQSxXQUFXc2xCLFFBQVMsQ0FDNUQsTUFBTSxNQUFFcnFCLFNBQWdCcEksS0FBS29qQyxRQUFRNzBCLEdBQ3JDLEdBQUluRyxFQUNBLE1BQU1BLEVBR1YsTUFBTyxDQUNIQyxLQUFNLENBQ0YyZ0MsT0FBUS8yQixFQUNSNGYsU0FDQUMsYUFFSjFwQixNQUFPLEtBRWYsQ0FDQSxNQUFNNmdDLEVQaDREWCxTQUFzQkYsR0FDekIsT0FBUUEsR0FDSixJQUFLLFFBQ0QsTUFBTyxDQUNIamlDLEtBQU0sb0JBQ04wc0IsS0FBTSxDQUFFMXNCLEtBQU0sWUFFdEIsSUFBSyxRQUNELE1BQU8sQ0FDSEEsS0FBTSxRQUNOb2lDLFdBQVksUUFDWjFWLEtBQU0sQ0FBRTFzQixLQUFNLFlBRXRCLFFBQ0ksTUFBTSxJQUFJMEMsTUFBTSxxQkFFNUIsQ09nM0Q4QjIvQixDQUFhdFgsRUFBT2tYLEtBQ2hDSyxRQUFtQnBwQyxLQUFLeW9DLFNBQVM1VyxFQUFPNlcsSUFBS3ROLEdBRTdDaUYsUUFBa0I1TixPQUFPUyxPQUFPbVcsVUFBVSxNQUFPRCxFQUFZSCxHQUFXLEVBQU0sQ0FDaEYsV0FJSixVQURzQnhXLE9BQU9TLE9BQU9xSSxPQUFPME4sRUFBVzVJLEVBQVd2TyxFUnI2RHRFLFNBQTRCekMsR0FDL0IsTUFBTXBmLEVBQVMsR0FFZixPQTlFRyxTQUFzQm9mLEVBQUtULEdBQzlCLElBQUssSUFBSTVSLEVBQUksRUFBR0EsRUFBSXFTLEVBQUk1c0IsT0FBUXVhLEdBQUssRUFBRyxDQUNwQyxJQUFJd1MsRUFBWUgsRUFBSVosV0FBV3pSLEdBQy9CLEdBQUl3UyxFQUFZLE9BQVVBLEdBQWEsTUFBUSxDQUkzQyxNQUFNOFosRUFBd0MsTUFBdEI5WixFQUFZLE9BQW1CLE1BRXZEQSxFQUE2QyxPQUR2QkgsRUFBSVosV0FBV3pSLEVBQUksR0FBSyxNQUFVLE1BQzVCc3NCLEdBQzVCdHNCLEdBQUssQ0FDVCxDQUNBZ1QsR0FBZ0JSLEVBQVdaLEVBQy9CLENBQ0osQ0ErREkyYSxDQUFhbGEsRUFBTVYsR0FBUzFlLEVBQU9oTyxLQUFLMHNCLElBQ2pDLElBQUl3QixXQUFXbGdCLEVBQzFCLENRaTZEd0Z1NUIsQ0FBbUIsR0FBR1gsS0FBYTczQixNQUUzRyxNQUFNLElBQUlvZCxHQUFvQix5QkFHbEMsTUFBTyxDQUNIL2xCLEtBQU0sQ0FDRjJnQyxPQUFRLzJCLEVBQ1I0ZixTQUNBQyxhQUVKMXBCLE1BQU8sS0FFZixDQUNBLE1BQU9BLEdBQ0gsR0FBSW1sQixHQUFZbmxCLEdBQ1osTUFBTyxDQUFFQyxLQUFNLEtBQU1ELFNBRXpCLE1BQU1BLENBQ1YsQ0FDSixFQUVKZ3lCLEdBQWFhLGVBQWlCLEVDMXFFOUIsTUNDQSxHQURtQmIsR0NBWixNQUFNcVAsV0FBMkIsR0FDcEMsV0FBQWpwQyxDQUFZMkUsR0FDUnVFLE1BQU12RSxFQUNWLEVDa0JXLE1BQU11a0MsR0FhakIsV0FBQWxwQyxDQUFZbXBDLEVBQWFqZCxFQUFhdm5CLEdBQ2xDLElBQUlELEVBQUlnRCxFQUFJQyxFQUdaLEdBRkFuSSxLQUFLMnBDLFlBQWNBLEVBQ25CM3BDLEtBQUswc0IsWUFBY0EsR0FDZGlkLEVBQ0QsTUFBTSxJQUFJbmdDLE1BQU0sNEJBQ3BCLElBQUtrakIsRUFDRCxNQUFNLElBQUlsakIsTUFBTSw0QkFDcEIsTUFBTW9nQyxHQzVCc0JucEMsRUQ0QmFrcEMsR0MzQmxDRSxTQUFTLEtBQU9wcEMsRUFBTUEsRUFBTSxJQURwQyxJQUE2QkEsRUQ2QjVCLE1BQU1xcEMsRUFBVSxJQUFJdGpDLElBQUlvakMsR0FDeEI1cEMsS0FBSytwQyxZQUFjLElBQUl2akMsSUFBSSxjQUFlc2pDLEdBQzFDOXBDLEtBQUsrcEMsWUFBWUMsU0FBV2hxQyxLQUFLK3BDLFlBQVlDLFNBQVNuMEIsUUFBUSxPQUFRLE1BQ3RFN1YsS0FBS2lxQyxRQUFVLElBQUl6akMsSUFBSSxVQUFXc2pDLEdBQ2xDOXBDLEtBQUtrcUMsV0FBYSxJQUFJMWpDLElBQUksYUFBY3NqQyxHQUN4QzlwQyxLQUFLbXFDLGFBQWUsSUFBSTNqQyxJQUFJLGVBQWdCc2pDLEdBRTVDLE1BQU1NLEVBQW9CLE1BQU1OLEVBQVFPLFNBQVNqcEMsTUFBTSxLQUFLLGdCQU90RDBELEVDdkNQLFNBQThCSyxFQUFTbWxDLEdBQzFDLElBQUlwbEMsRUFBSWdELEVBQ1IsTUFBUXFpQyxHQUFJQyxFQUFXQyxLQUFNQyxFQUFhQyxTQUFVQyxFQUFpQnY2QixPQUFRdzZCLEdBQW1CMWxDLEdBQ3hGb2xDLEdBQUlyZSxFQUFvQnVlLEtBQU10ZSxFQUFzQndlLFNBQVVuZSxFQUEwQm5jLE9BQVE0YixHQUE0QnFlLEVBQzlIcjZCLEVBQVMsQ0FDWHM2QixHQUFJcHFDLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHOGxCLEdBQXFCc2UsR0FDekRDLEtBQU10cUMsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUcrbEIsR0FBdUJ1ZSxHQUM3REMsU0FBVXhxQyxPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBR29tQixHQUEyQm9lLEdBQ3JFdjZCLE9BQVFsUSxPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHNmxCLEdBQXlCNGUsR0FBZ0IsQ0FBRW5xQyxRQUFTUCxPQUFPaUcsT0FBT2pHLE9BQU9pRyxPQUFPLENBQUMsRUFBOEgsUUFBekhsQixFQUFLK21CLGFBQXVFLEVBQVNBLEVBQXVCdnJCLGVBQTRCLElBQVB3RSxFQUFnQkEsRUFBSyxDQUFDLEdBQXFHLFFBQTlGZ0QsRUFBSzJpQyxhQUFxRCxFQUFTQSxFQUFjbnFDLGVBQTRCLElBQVB3SCxFQUFnQkEsRUFBSyxDQUFDLEtBQ3RhdVosWUFBYSxLQUFNLE9BNUIyQjlTLEVBNEJqQjNPLEtBNUIwQjRPLE9BNEJwQixFQTVCbUNFLEVBNEJuQixZQUFlLE1BQU8sRUFBSSxFQTFCMUUsS0FGZ0VELE9BNEJ4QixLQTFCN0JBLEVBQUlhLFVBQVUsU0FBVUMsRUFBU0MsR0FDL0MsU0FBU0MsRUFBVXZQLEdBQVMsSUFBTXdQLEVBQUtoQixFQUFVaUIsS0FBS3pQLEdBQVMsQ0FBRSxNQUFPK00sR0FBS3VDLEVBQU92QyxFQUFJLENBQUUsQ0FDMUYsU0FBUzJDLEVBQVMxUCxHQUFTLElBQU13UCxFQUFLaEIsRUFBaUIsTUFBRXhPLEdBQVMsQ0FBRSxNQUFPK00sR0FBS3VDLEVBQU92QyxFQUFJLENBQUUsQ0FDN0YsU0FBU3lDLEVBQUtHLEdBSmxCLElBQWUzUCxFQUlhMlAsRUFBT0MsS0FBT1AsRUFBUU0sRUFBTzNQLFFBSjFDQSxFQUl5RDJQLEVBQU8zUCxNQUpoREEsYUFBaUJ1TyxFQUFJdk8sRUFBUSxJQUFJdU8sRUFBRSxTQUFVYyxHQUFXQSxFQUFRclAsRUFBUSxJQUlqQmtILEtBQUtxSSxFQUFXRyxFQUFXLENBQzdHRixHQUFNaEIsRUFBWUEsRUFBVXFCLE1BQU14QixFQUFTQyxHQUFjLEtBQUttQixPQUNsRSxHQVB3QyxJQUFVcEIsRUFBU0MsRUFBWUMsRUFBR0MsSUFxQzFFLE9BUEkzSixFQUFRc2MsWUFDUnhSLEVBQU93UixZQUFjdGMsRUFBUXNjLG1CQUl0QnhSLEVBQU93UixZQUVYeFIsQ0FDWCxDRG9CeUI2NkIsQ0FBcUIzbEMsUUFBeUNBLEVBQVUsQ0FBQyxFQU56RSxDQUNib2xDLEdBQUlyZSxHQUNKeWUsU0FBVW5lLEdBQ1ZpZSxLQUFNdHFDLE9BQU9pRyxPQUFPakcsT0FBT2lHLE9BQU8sQ0FBQyxFQUFHK2xCLElBQXVCLENBQUVpRyxXQUFZZ1ksSUFDM0UvNUIsT0FBUTRiLEtBR1pqc0IsS0FBS295QixXQUFpRCxRQUFuQ2x0QixFQUFLSixFQUFTMmxDLEtBQUtyWSxrQkFBK0IsSUFBUGx0QixFQUFnQkEsRUFBSyxHQUNuRmxGLEtBQUtVLFFBQTZDLFFBQWxDd0gsRUFBS3BELEVBQVN1TCxPQUFPM1AsZUFBNEIsSUFBUHdILEVBQWdCQSxFQUFLLENBQUMsRUFDM0VwRCxFQUFTMmMsYUFJVnpoQixLQUFLeWhCLFlBQWMzYyxFQUFTMmMsWUFDNUJ6aEIsS0FBS3lxQyxLQUFPLElBQUkxSCxNQUFNLENBQUMsRUFBRyxDQUN0QmwvQixJQUFLLENBQUNnRCxFQUFHMEcsS0FDTCxNQUFNLElBQUkvRCxNQUFNLDZHQUE2R3FlLE9BQU90YSwwQkFONUl2TixLQUFLeXFDLEtBQU96cUMsS0FBSytxQyx3QkFBaUQsUUFBeEI1aUMsRUFBS3JELEVBQVMybEMsWUFBeUIsSUFBUHRpQyxFQUFnQkEsRUFBSyxDQUFDLEVBQUduSSxLQUFLVSxRQUFTb0UsRUFBU3VMLE9BQU96UCxPQVVySVosS0FBS1ksTUFBUTZyQixHQUFjQyxFQUFhMXNCLEtBQUtnckMsZ0JBQWdCNStCLEtBQUtwTSxNQUFPOEUsRUFBU3VMLE9BQU96UCxPQUN6RlosS0FBSzJxQyxTQUFXM3FDLEtBQUtpckMsb0JBQW9COXFDLE9BQU9pRyxPQUFPLENBQUUxRixRQUFTVixLQUFLVSxRQUFTK2dCLFlBQWF6aEIsS0FBS2dyQyxnQkFBZ0I1K0IsS0FBS3BNLE9BQVM4RSxFQUFTNmxDLFdBQ3pJM3FDLEtBQUtpMkIsS0FBTyxJQUFJbndCLEVBQWdCLElBQUlVLElBQUksVUFBV3NqQyxHQUFTbk4sS0FBTSxDQUM5RGo4QixRQUFTVixLQUFLVSxRQUNkQyxPQUFRbUUsRUFBU3lsQyxHQUFHNXBDLE9BQ3BCQyxNQUFPWixLQUFLWSxRQUVYa0UsRUFBUzJjLGFBQ1Z6aEIsS0FBS2tyQyxzQkFFYixDQUlBLGFBQUlDLEdBQ0EsT0FBTyxJQUFJbDlCLEVBQWdCak8sS0FBS21xQyxhQUFheE4sS0FBTSxDQUMvQ2o4QixRQUFTVixLQUFLVSxRQUNkd04sWUFBYWxPLEtBQUtZLE9BRTFCLENBSUEsV0FBSXV3QixHQUNBLE9BQU8sSUFBSSxHQUFzQm54QixLQUFLa3FDLFdBQVd2TixLQUFNMzhCLEtBQUtVLFFBQVNWLEtBQUtZLE1BQzlFLENBTUEsSUFBQW9ELENBQUt1QyxHQUNELE9BQU92RyxLQUFLaTJCLEtBQUtqeUIsS0FBS3VDLEVBQzFCLENBU0EsTUFBQTVGLENBQU9BLEdBQ0gsT0FBT1gsS0FBS2kyQixLQUFLdDFCLE9BQU9BLEVBQzVCLENBeUJBLEdBQUE4RixDQUFJQyxFQUFJQyxFQUFPLENBQUMsRUFBR3hCLEVBQVUsQ0FBQyxHQUMxQixPQUFPbkYsS0FBS2kyQixLQUFLeHZCLElBQUlDLEVBQUlDLEVBQU14QixFQUNuQyxDQVFBLE9BQUE4USxDQUFRblAsRUFBTW1SLEVBQU8sQ0FBRTFNLE9BQVEsQ0FBQyxJQUM1QixPQUFPdkwsS0FBSzJxQyxTQUFTMTBCLFFBQVFuUCxFQUFNbVIsRUFDdkMsQ0FJQSxXQUFBMEssR0FDSSxPQUFPM2lCLEtBQUsycUMsU0FBU2hvQixhQUN6QixDQU9BLGFBQUFDLENBQWMzTSxHQUNWLE9BQU9qVyxLQUFLMnFDLFNBQVMvbkIsY0FBYzNNLEVBQ3ZDLENBSUEsaUJBQUE0TSxHQUNJLE9BQU83aUIsS0FBSzJxQyxTQUFTOW5CLG1CQUN6QixDQUNBLGVBQUFtb0IsR0FDSSxJQUFJOWxDLEVBQUlnRCxFQWhMc0N5RyxFQUFTQyxFQUFZQyxFQUFHQyxFQWlMdEUsT0FqTDhDSCxFQWlMN0IzTyxLQWpMc0M0TyxPQWlMaEMsRUFqTCtDRSxFQWlML0IsWUFDbkMsR0FBSTlPLEtBQUt5aEIsWUFDTCxhQUFhemhCLEtBQUt5aEIsY0FFdEIsTUFBTSxLQUFFcFosU0FBZXJJLEtBQUt5cUMsS0FBS3RJLGFBQ2pDLE9BQTJGLFFBQW5GajZCLEVBQTZCLFFBQXZCaEQsRUFBS21ELEVBQUsyc0IsZUFBNEIsSUFBUDl2QixPQUFnQixFQUFTQSxFQUFHd1gsb0JBQWlDLElBQVB4VSxFQUFnQkEsRUFBSyxJQUM1SCxFQXJMRyxLQUZnRTJHLE9BaUxwQyxLQS9LakJBLEVBQUlhLFVBQVUsU0FBVUMsRUFBU0MsR0FDL0MsU0FBU0MsRUFBVXZQLEdBQVMsSUFBTXdQLEVBQUtoQixFQUFVaUIsS0FBS3pQLEdBQVMsQ0FBRSxNQUFPK00sR0FBS3VDLEVBQU92QyxFQUFJLENBQUUsQ0FDMUYsU0FBUzJDLEVBQVMxUCxHQUFTLElBQU13UCxFQUFLaEIsRUFBaUIsTUFBRXhPLEdBQVMsQ0FBRSxNQUFPK00sR0FBS3VDLEVBQU92QyxFQUFJLENBQUUsQ0FDN0YsU0FBU3lDLEVBQUtHLEdBSmxCLElBQWUzUCxFQUlhMlAsRUFBT0MsS0FBT1AsRUFBUU0sRUFBTzNQLFFBSjFDQSxFQUl5RDJQLEVBQU8zUCxNQUpoREEsYUFBaUJ1TyxFQUFJdk8sRUFBUSxJQUFJdU8sRUFBRSxTQUFVYyxHQUFXQSxFQUFRclAsRUFBUSxJQUlqQmtILEtBQUtxSSxFQUFXRyxFQUFXLENBQzdHRixHQUFNaEIsRUFBWUEsRUFBVXFCLE1BQU14QixFQUFTQyxHQUFjLEtBQUttQixPQUNsRSxFQWlMQSxDQUNBLHVCQUFBZzdCLEVBQXdCLGlCQUFFM2UsRUFBZ0IsZUFBRUMsRUFBYyxtQkFBRUMsRUFBa0IsUUFBRTZFLEVBQU8sV0FBRWlCLEVBQVUsU0FBRTdGLEVBQVEsS0FBRXFOLEVBQUksTUFBRUssR0FBVXY1QixFQUFTRSxHQUNwSSxNQUFNd3FDLEVBQWMsQ0FDaEI1OEIsY0FBZSxVQUFVeE8sS0FBSzBzQixjQUM5QjNPLE9BQVEsR0FBRy9kLEtBQUswc0IsZUFFcEIsT0FBTyxJQUFJK2MsR0FBbUIsQ0FDMUJocEMsSUFBS1QsS0FBS2lxQyxRQUFRdE4sS0FDbEJqOEIsUUFBU1AsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUdnbEMsR0FBYzFxQyxHQUN2RDB4QixXQUFZQSxFQUNaaEcsbUJBQ0FDLGlCQUNBQyxxQkFDQTZFLFVBQ0E1RSxXQUNBcU4sT0FDQUssUUFDQXI1QixRQUdBczVCLDZCQUE4QixrQkFBbUJsNkIsS0FBS1UsU0FFOUQsQ0FDQSxtQkFBQXVxQyxDQUFvQjlsQyxHQUNoQixPQUFPLElBQUl5YixFQUFlNWdCLEtBQUsrcEMsWUFBWXBOLEtBQU14OEIsT0FBT2lHLE9BQU9qRyxPQUFPaUcsT0FBTyxDQUFDLEVBQUdqQixHQUFVLENBQUVvVixPQUFRcGEsT0FBT2lHLE9BQU8sQ0FBRTJYLE9BQVEvZCxLQUFLMHNCLGFBQWV2bkIsYUFBeUMsRUFBU0EsRUFBUW9WLFVBQy9NLENBQ0Esb0JBQUEyd0IsR0FJSSxPQUhXbHJDLEtBQUt5cUMsS0FBSzVGLGtCQUFrQixDQUFDOXlCLEVBQU9pakIsS0FDM0NoMUIsS0FBS3FyQyxvQkFBb0J0NUIsRUFBTyxTQUFVaWpCLGFBQXlDLEVBQVNBLEVBQVF0WSxlQUc1RyxDQUNBLG1CQUFBMnVCLENBQW9CdDVCLEVBQU91NUIsRUFBUS84QixHQUNoQixvQkFBVndELEdBQXlDLGNBQVZBLEdBQ2hDL1IsS0FBS3VyQyxxQkFBdUJoOUIsRUFHYixlQUFWd0QsSUFDTC9SLEtBQUsycUMsU0FBU3I4QixVQUNBLFdBQVZnOUIsR0FDQXRyQyxLQUFLeXFDLEtBQUsxVCxVQUNkLzJCLEtBQUt1ckMsd0JBQXFCdG9DLEdBTjFCakQsS0FBS3VyQyxtQkFBcUJoOUIsQ0FRbEMsRSx3b0JFbE9KLElBQUFsQixFQUFBNm9CLEVBQUF4b0IsRUFBQSxtQkFBQUMsT0FBQUEsT0FBQSxHQUFBNjlCLEVBQUE5OUIsRUFBQSs5QixVQUFBLGFBQUF4K0IsRUFBQVMsRUFBQUUsYUFBQSx5QkFBQW9QLEVBQUF0UCxFQUFBODlCLEVBQUF2K0IsRUFBQStQLEdBQUEsSUFBQTFiLEVBQUFrcUMsR0FBQUEsRUFBQWgrQixxQkFBQWsrQixFQUFBRixFQUFBRSxFQUFBQyxFQUFBeHJDLE9BQUF5ckMsT0FBQXRxQyxFQUFBa00sV0FBQSxPQUFBcStCLEdBQUFGLEVBQUEsbUJBQUFqK0IsRUFBQTg5QixFQUFBditCLEdBQUEsSUFBQStQLEVBQUExYixFQUFBcXFDLEVBQUFHLEVBQUEsRUFBQTNWLEVBQUFscEIsR0FBQSxHQUFBOCtCLEdBQUEsRUFBQUMsRUFBQSxDQUFBN1YsRUFBQSxFQUFBcVYsRUFBQSxFQUFBUyxFQUFBNStCLEVBQUFtbkIsRUFBQXpuQixFQUFBKytCLEVBQUEvK0IsRUFBQVgsS0FBQWlCLEVBQUEsR0FBQU4sRUFBQSxTQUFBbXBCLEVBQUF4b0IsR0FBQSxPQUFBc1AsRUFBQWtaLEVBQUE1MEIsRUFBQSxFQUFBcXFDLEVBQUF0K0IsRUFBQTIrQixFQUFBUixFQUFBOTlCLEVBQUE4bUIsQ0FBQSxZQUFBem5CLEVBQUFXLEVBQUE4OUIsR0FBQSxJQUFBbHFDLEVBQUFvTSxFQUFBaStCLEVBQUFILEVBQUF0VixFQUFBLEdBQUE2VixHQUFBRCxJQUFBNytCLEdBQUFpcEIsRUFBQUMsRUFBQTF6QixPQUFBeXpCLElBQUEsS0FBQWpwQixFQUFBK1AsRUFBQW1aLEVBQUFELEdBQUFucEIsRUFBQWkvQixFQUFBN1YsRUFBQStWLEVBQUFsdkIsRUFBQSxHQUFBdFAsRUFBQSxHQUFBVCxFQUFBaS9CLElBQUFWLEtBQUFHLEVBQUEzdUIsR0FBQTFiLEVBQUEwYixFQUFBLE9BQUExYixFQUFBLE1BQUEwYixFQUFBLEdBQUFBLEVBQUEsR0FBQTNQLEdBQUEyUCxFQUFBLElBQUFqUSxLQUFBRSxFQUFBUyxFQUFBLEdBQUFYLEVBQUFpUSxFQUFBLEtBQUExYixFQUFBLEVBQUEwcUMsRUFBQUMsRUFBQVQsRUFBQVEsRUFBQVIsRUFBQXh1QixFQUFBLElBQUFqUSxFQUFBbS9CLElBQUFqL0IsRUFBQVMsRUFBQSxHQUFBc1AsRUFBQSxHQUFBd3VCLEdBQUFBLEVBQUFVLEtBQUFsdkIsRUFBQSxHQUFBdFAsRUFBQXNQLEVBQUEsR0FBQXd1QixFQUFBUSxFQUFBUixFQUFBVSxFQUFBNXFDLEVBQUEsT0FBQTJMLEdBQUFTLEVBQUEsU0FBQThtQixFQUFBLE1BQUF1WCxHQUFBLEVBQUFQLENBQUEsaUJBQUF2K0IsRUFBQWtwQixFQUFBK1YsR0FBQSxHQUFBSixFQUFBLFFBQUFLLFVBQUEsb0NBQUFKLEdBQUEsSUFBQTVWLEdBQUFwcEIsRUFBQW9wQixFQUFBK1YsR0FBQTVxQyxFQUFBNjBCLEVBQUF3VixFQUFBTyxHQUFBaFcsRUFBQTUwQixFQUFBLEVBQUErTCxFQUFBcytCLEtBQUFJLEdBQUEsQ0FBQS91QixJQUFBMWIsRUFBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUEwcUMsRUFBQVIsR0FBQSxHQUFBeitCLEVBQUF6TCxFQUFBcXFDLElBQUFLLEVBQUFSLEVBQUFHLEVBQUFLLEVBQUFDLEVBQUFOLEdBQUEsT0FBQUcsRUFBQSxFQUFBOXVCLEVBQUEsSUFBQTFiLElBQUEyTCxFQUFBLFFBQUFpcEIsRUFBQWxaLEVBQUEvUCxHQUFBLE1BQUFpcEIsRUFBQUEsRUFBQXBwQixLQUFBa1EsRUFBQTJ1QixJQUFBLE1BQUFRLFVBQUEsd0NBQUFqVyxFQUFBaG1CLEtBQUEsT0FBQWdtQixFQUFBeVYsRUFBQXpWLEVBQUE1MUIsTUFBQWdCLEVBQUEsSUFBQUEsRUFBQSxZQUFBQSxJQUFBNDBCLEVBQUFsWixFQUFBLFNBQUFrWixFQUFBcHBCLEtBQUFrUSxHQUFBMWIsRUFBQSxJQUFBcXFDLEVBQUFRLFVBQUEsb0NBQUFsL0IsRUFBQSxZQUFBM0wsRUFBQSxHQUFBMGIsRUFBQTNQLENBQUEsVUFBQTZvQixHQUFBNlYsRUFBQUMsRUFBQVIsRUFBQSxHQUFBRyxFQUFBaitCLEVBQUFaLEtBQUEwK0IsRUFBQVEsTUFBQXhYLEVBQUEsWUFBQTBCLEdBQUFsWixFQUFBM1AsRUFBQS9MLEVBQUEsRUFBQXFxQyxFQUFBelYsQ0FBQSxTQUFBNFYsRUFBQSxVQUFBeHJDLE1BQUE0MUIsRUFBQWhtQixLQUFBNjdCLEVBQUEsR0FBQXIrQixFQUFBVCxFQUFBK1AsSUFBQSxHQUFBMnVCLENBQUEsS0FBQW5YLEVBQUEsWUFBQWtYLElBQUEsVUFBQVUsSUFBQSxVQUFBQyxJQUFBLENBQUFuVyxFQUFBLzFCLE9BQUFtc0MsZUFBQSxJQUFBaHJDLEVBQUEsR0FBQWtxQyxHQUFBdFYsRUFBQUEsRUFBQSxHQUFBc1YsUUFBQUssR0FBQTNWLEVBQUEsR0FBQXNWLEVBQUEseUJBQUF0VixHQUFBeVYsRUFBQVUsRUFBQTcrQixVQUFBaytCLEVBQUFsK0IsVUFBQXJOLE9BQUF5ckMsT0FBQXRxQyxHQUFBLFNBQUF3cUMsRUFBQXorQixHQUFBLE9BQUFsTixPQUFBb3NDLGVBQUFwc0MsT0FBQW9zQyxlQUFBbC9CLEVBQUFnL0IsSUFBQWgvQixFQUFBbS9CLFVBQUFILEVBQUFSLEdBQUF4K0IsRUFBQUosRUFBQSxzQkFBQUksRUFBQUcsVUFBQXJOLE9BQUF5ckMsT0FBQUQsR0FBQXQrQixDQUFBLFFBQUErK0IsRUFBQTUrQixVQUFBNitCLEVBQUFSLEdBQUFGLEVBQUEsY0FBQVUsR0FBQVIsR0FBQVEsRUFBQSxjQUFBRCxHQUFBQSxFQUFBSyxZQUFBLG9CQUFBWixHQUFBUSxFQUFBcC9CLEVBQUEscUJBQUE0K0IsR0FBQUYsR0FBQUUsR0FBQUYsRUFBQTErQixFQUFBLGFBQUE0K0IsR0FBQUYsRUFBQUgsRUFBQSx5QkFBQUssR0FBQUYsRUFBQSxvREFBQWUsR0FBQSxrQkFBQUMsRUFBQTN2QixFQUFBdEQsRUFBQW95QixFQUFBLGNBQUFELEdBQUF4K0IsRUFBQUssRUFBQTg5QixFQUFBdFYsR0FBQSxJQUFBbFosRUFBQTdjLE9BQUFDLGVBQUEsSUFBQTRjLEVBQUEsZ0JBQUEzUCxHQUFBMlAsRUFBQSxFQUFBNnVCLEdBQUEsU0FBQXgrQixFQUFBSyxFQUFBODlCLEVBQUF0VixHQUFBLEdBQUF4b0IsRUFBQXNQLEVBQUFBLEVBQUEzUCxFQUFBSyxFQUFBLENBQUFwTixNQUFBa3JDLEVBQUF0K0IsWUFBQWdwQixFQUFBMkQsY0FBQTNELEVBQUF4RixVQUFBd0YsSUFBQTdvQixFQUFBSyxHQUFBODlCLE1BQUEsS0FBQXYrQixFQUFBLFNBQUFTLEVBQUE4OUIsR0FBQUssR0FBQXgrQixFQUFBSyxFQUFBLFNBQUFMLEdBQUEsWUFBQXUvQixRQUFBbC9CLEVBQUE4OUIsRUFBQW4rQixFQUFBLElBQUFKLEVBQUEsVUFBQUEsRUFBQSxXQUFBQSxFQUFBLGNBQUE0K0IsR0FBQXgrQixFQUFBSyxFQUFBODlCLEVBQUF0VixFQUFBLFVBQUEyVyxHQUFBckIsRUFBQXRWLEVBQUE3b0IsRUFBQUssRUFBQVQsRUFBQXVuQixFQUFBbHpCLEdBQUEsUUFBQTBiLEVBQUF3dUIsRUFBQWhYLEdBQUFsekIsR0FBQXFxQyxFQUFBM3VCLEVBQUExYyxLQUFBLE9BQUFrckMsR0FBQSxZQUFBbitCLEVBQUFtK0IsRUFBQSxDQUFBeHVCLEVBQUE5TSxLQUFBZ21CLEVBQUF5VixHQUFBajhCLFFBQUFDLFFBQUFnOEIsR0FBQW5rQyxLQUFBa0csRUFBQVQsRUFBQSxVQUFBNi9CLEdBQUF0QixHQUFBLHNCQUFBdFYsRUFBQSxLQUFBN29CLEVBQUEwL0IsVUFBQSxXQUFBcjlCLFFBQUEsU0FBQWhDLEVBQUFULEdBQUEsSUFBQXVuQixFQUFBZ1gsRUFBQXI3QixNQUFBK2xCLEVBQUE3b0IsR0FBQSxTQUFBMi9CLEVBQUF4QixHQUFBcUIsR0FBQXJZLEVBQUE5bUIsRUFBQVQsRUFBQSsvQixFQUFBQyxFQUFBLE9BQUF6QixFQUFBLFVBQUF5QixFQUFBekIsR0FBQXFCLEdBQUFyWSxFQUFBOW1CLEVBQUFULEVBQUErL0IsRUFBQUMsRUFBQSxRQUFBekIsRUFBQSxDQUFBd0IsT0FBQSxNQUVBLElBZ0JhRSxHQ1RGLElBQUl4RCxHRE1LLDJDQUNJLG1OQUUyQyxDQUNqRWUsS0FBTSxDQUNKdFosUUFsQnlCLENBQ3JCRSxRQUFPLFNBQUMxdEIsR0FBcUMsT0FBQW1wQyxHQUFBSixLQUFBaHpCLEVBQUEsU0FBQXl6QixJQUFBLElBQUFsOUIsRUFBQSxPQUFBeThCLEtBQUFDLEVBQUEsU0FBQVMsR0FBQSxjQUFBQSxFQUFBNUIsR0FBQSxjQUFBNEIsRUFBQTVCLEVBQUEsRUFDNUI2QixPQUFPbGMsUUFBUW1jLE1BQU16cEMsSUFBSUYsR0FBSSxPQUF0QyxPQUFOc00sRUFBTW05QixFQUFBbkIsRUFBQW1CLEVBQUE1WSxFQUFBLEVBQ0x2a0IsRUFBT3RNLElBQVEsTUFBSSxFQUFBd3BDLEVBQUEsR0FGdUJMLEVBR25ELEVBQ005YixRQUFPLFNBQUNydEIsRUFBYXJELEdBQThCLE9BQUF3c0MsR0FBQUosS0FBQWh6QixFQUFBLFNBQUE2ekIsSUFBQSxPQUFBYixLQUFBQyxFQUFBLFNBQUFhLEdBQUEsY0FBQUEsRUFBQWhDLEdBQUEsY0FBQWdDLEVBQUFoQyxFQUFBLEVBQ2pENkIsT0FBT2xjLFFBQVFtYyxNQUFNNXJDLElBQUcrckMsR0FBQyxDQUFDLEVBQUU5cEMsRUFBTXJELElBQVEsY0FBQWt0QyxFQUFBaFosRUFBQSxLQUFBK1ksRUFBQSxHQURPVCxFQUV6RCxFQUNNN2IsV0FBVSxTQUFDdHRCLEdBQTRCLE9BQUFtcEMsR0FBQUosS0FBQWh6QixFQUFBLFNBQUFnMEIsSUFBQSxPQUFBaEIsS0FBQUMsRUFBQSxTQUFBZ0IsR0FBQSxjQUFBQSxFQUFBbkMsR0FBQSxjQUFBbUMsRUFBQW5DLEVBQUEsRUFDckM2QixPQUFPbGMsUUFBUW1jLE1BQU1ybUIsT0FBT3RqQixHQUFJLGNBQUFncUMsRUFBQW5aLEVBQUEsS0FBQWtaLEVBQUEsR0FES1osRUFFN0MsR0FTRTFnQixrQkFBa0IsRUFDbEJDLGdCQUFnQixFQUNoQkMsb0JBQW9CLEssbzdCRXZCeEIsSUFBQWpmLEVBQUE2b0IsRUFBQXhvQixFQUFBLG1CQUFBQyxPQUFBQSxPQUFBLEdBQUE2OUIsRUFBQTk5QixFQUFBKzlCLFVBQUEsYUFBQXgrQixFQUFBUyxFQUFBRSxhQUFBLHlCQUFBb1AsRUFBQXRQLEVBQUE4OUIsRUFBQXYrQixFQUFBK1AsR0FBQSxJQUFBMWIsRUFBQWtxQyxHQUFBQSxFQUFBaCtCLHFCQUFBaytCLEVBQUFGLEVBQUFFLEVBQUFDLEVBQUF4ckMsT0FBQXlyQyxPQUFBdHFDLEVBQUFrTSxXQUFBLE9BQUFxK0IsR0FBQUYsRUFBQSxtQkFBQWorQixFQUFBODlCLEVBQUF2K0IsR0FBQSxJQUFBK1AsRUFBQTFiLEVBQUFxcUMsRUFBQUcsRUFBQSxFQUFBM1YsRUFBQWxwQixHQUFBLEdBQUE4K0IsR0FBQSxFQUFBQyxFQUFBLENBQUE3VixFQUFBLEVBQUFxVixFQUFBLEVBQUFTLEVBQUE1K0IsRUFBQW1uQixFQUFBem5CLEVBQUErK0IsRUFBQS8rQixFQUFBWCxLQUFBaUIsRUFBQSxHQUFBTixFQUFBLFNBQUFtcEIsRUFBQXhvQixHQUFBLE9BQUFzUCxFQUFBa1osRUFBQTUwQixFQUFBLEVBQUFxcUMsRUFBQXQrQixFQUFBMitCLEVBQUFSLEVBQUE5OUIsRUFBQThtQixDQUFBLFlBQUF6bkIsRUFBQVcsRUFBQTg5QixHQUFBLElBQUFscUMsRUFBQW9NLEVBQUFpK0IsRUFBQUgsRUFBQXRWLEVBQUEsR0FBQTZWLEdBQUFELElBQUE3K0IsR0FBQWlwQixFQUFBQyxFQUFBMXpCLE9BQUF5ekIsSUFBQSxLQUFBanBCLEVBQUErUCxFQUFBbVosRUFBQUQsR0FBQW5wQixFQUFBaS9CLEVBQUE3VixFQUFBK1YsRUFBQWx2QixFQUFBLEdBQUF0UCxFQUFBLEdBQUFULEVBQUFpL0IsSUFBQVYsS0FBQUcsRUFBQTN1QixHQUFBMWIsRUFBQTBiLEVBQUEsT0FBQTFiLEVBQUEsTUFBQTBiLEVBQUEsR0FBQUEsRUFBQSxHQUFBM1AsR0FBQTJQLEVBQUEsSUFBQWpRLEtBQUFFLEVBQUFTLEVBQUEsR0FBQVgsRUFBQWlRLEVBQUEsS0FBQTFiLEVBQUEsRUFBQTBxQyxFQUFBQyxFQUFBVCxFQUFBUSxFQUFBUixFQUFBeHVCLEVBQUEsSUFBQWpRLEVBQUFtL0IsSUFBQWovQixFQUFBUyxFQUFBLEdBQUFzUCxFQUFBLEdBQUF3dUIsR0FBQUEsRUFBQVUsS0FBQWx2QixFQUFBLEdBQUF0UCxFQUFBc1AsRUFBQSxHQUFBd3VCLEVBQUFRLEVBQUFSLEVBQUFVLEVBQUE1cUMsRUFBQSxPQUFBMkwsR0FBQVMsRUFBQSxTQUFBOG1CLEVBQUEsTUFBQXVYLEdBQUEsRUFBQVAsQ0FBQSxpQkFBQXYrQixFQUFBa3BCLEVBQUErVixHQUFBLEdBQUFKLEVBQUEsUUFBQUssVUFBQSxvQ0FBQUosR0FBQSxJQUFBNVYsR0FBQXBwQixFQUFBb3BCLEVBQUErVixHQUFBNXFDLEVBQUE2MEIsRUFBQXdWLEVBQUFPLEdBQUFoVyxFQUFBNTBCLEVBQUEsRUFBQStMLEVBQUFzK0IsS0FBQUksR0FBQSxDQUFBL3VCLElBQUExYixFQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQTBxQyxFQUFBUixHQUFBLEdBQUF6K0IsRUFBQXpMLEVBQUFxcUMsSUFBQUssRUFBQVIsRUFBQUcsRUFBQUssRUFBQUMsRUFBQU4sR0FBQSxPQUFBRyxFQUFBLEVBQUE5dUIsRUFBQSxJQUFBMWIsSUFBQTJMLEVBQUEsUUFBQWlwQixFQUFBbFosRUFBQS9QLEdBQUEsTUFBQWlwQixFQUFBQSxFQUFBcHBCLEtBQUFrUSxFQUFBMnVCLElBQUEsTUFBQVEsVUFBQSx3Q0FBQWpXLEVBQUFobUIsS0FBQSxPQUFBZ21CLEVBQUF5VixFQUFBelYsRUFBQTUxQixNQUFBZ0IsRUFBQSxJQUFBQSxFQUFBLFlBQUFBLElBQUE0MEIsRUFBQWxaLEVBQUEsU0FBQWtaLEVBQUFwcEIsS0FBQWtRLEdBQUExYixFQUFBLElBQUFxcUMsRUFBQVEsVUFBQSxvQ0FBQWwvQixFQUFBLFlBQUEzTCxFQUFBLEdBQUEwYixFQUFBM1AsQ0FBQSxVQUFBNm9CLEdBQUE2VixFQUFBQyxFQUFBUixFQUFBLEdBQUFHLEVBQUFqK0IsRUFBQVosS0FBQTArQixFQUFBUSxNQUFBeFgsRUFBQSxZQUFBMEIsR0FBQWxaLEVBQUEzUCxFQUFBL0wsRUFBQSxFQUFBcXFDLEVBQUF6VixDQUFBLFNBQUE0VixFQUFBLFVBQUF4ckMsTUFBQTQxQixFQUFBaG1CLEtBQUE2N0IsRUFBQSxHQUFBcitCLEVBQUFULEVBQUErUCxJQUFBLEdBQUEydUIsQ0FBQSxLQUFBblgsRUFBQSxZQUFBa1gsSUFBQSxVQUFBVSxJQUFBLFVBQUFDLElBQUEsQ0FBQW5XLEVBQUEvMUIsT0FBQW1zQyxlQUFBLElBQUFockMsRUFBQSxHQUFBa3FDLEdBQUF0VixFQUFBQSxFQUFBLEdBQUFzVixRQUFBSyxHQUFBM1YsRUFBQSxHQUFBc1YsRUFBQSx5QkFBQXRWLEdBQUF5VixFQUFBVSxFQUFBNytCLFVBQUFrK0IsRUFBQWwrQixVQUFBck4sT0FBQXlyQyxPQUFBdHFDLEdBQUEsU0FBQXdxQyxFQUFBeitCLEdBQUEsT0FBQWxOLE9BQUFvc0MsZUFBQXBzQyxPQUFBb3NDLGVBQUFsL0IsRUFBQWcvQixJQUFBaC9CLEVBQUFtL0IsVUFBQUgsRUFBQVIsR0FBQXgrQixFQUFBSixFQUFBLHNCQUFBSSxFQUFBRyxVQUFBck4sT0FBQXlyQyxPQUFBRCxHQUFBdCtCLENBQUEsUUFBQSsrQixFQUFBNStCLFVBQUE2K0IsRUFBQVIsR0FBQUYsRUFBQSxjQUFBVSxHQUFBUixHQUFBUSxFQUFBLGNBQUFELEdBQUFBLEVBQUFLLFlBQUEsb0JBQUFaLEdBQUFRLEVBQUFwL0IsRUFBQSxxQkFBQTQrQixHQUFBRixHQUFBRSxHQUFBRixFQUFBMStCLEVBQUEsYUFBQTQrQixHQUFBRixFQUFBSCxFQUFBLHlCQUFBSyxHQUFBRixFQUFBLG9EQUFBZSxHQUFBLGtCQUFBQyxFQUFBM3ZCLEVBQUF0RCxFQUFBb3lCLEVBQUEsY0FBQUQsR0FBQXgrQixFQUFBSyxFQUFBODlCLEVBQUF0VixHQUFBLElBQUFsWixFQUFBN2MsT0FBQUMsZUFBQSxJQUFBNGMsRUFBQSxnQkFBQTNQLEdBQUEyUCxFQUFBLEVBQUE2dUIsR0FBQSxTQUFBeCtCLEVBQUFLLEVBQUE4OUIsRUFBQXRWLEdBQUEsR0FBQXhvQixFQUFBc1AsRUFBQUEsRUFBQTNQLEVBQUFLLEVBQUEsQ0FBQXBOLE1BQUFrckMsRUFBQXQrQixZQUFBZ3BCLEVBQUEyRCxjQUFBM0QsRUFBQXhGLFVBQUF3RixJQUFBN29CLEVBQUFLLEdBQUE4OUIsTUFBQSxLQUFBditCLEVBQUEsU0FBQVMsRUFBQTg5QixHQUFBSyxHQUFBeCtCLEVBQUFLLEVBQUEsU0FBQUwsR0FBQSxZQUFBdS9CLFFBQUFsL0IsRUFBQTg5QixFQUFBbitCLEVBQUEsSUFBQUosRUFBQSxVQUFBQSxFQUFBLFdBQUFBLEVBQUEsY0FBQTQrQixHQUFBeCtCLEVBQUFLLEVBQUE4OUIsRUFBQXRWLEVBQUEsVUFBQTBYLEdBQUFsZ0MsRUFBQUwsR0FBQSxnQkFBQUssR0FBQSxHQUFBeEwsTUFBQUMsUUFBQXVMLEdBQUEsT0FBQUEsQ0FBQSxDQUFBbWdDLENBQUFuZ0MsSUFBQSxTQUFBQSxFQUFBdytCLEdBQUEsSUFBQWhXLEVBQUEsTUFBQXhvQixFQUFBLHlCQUFBQyxRQUFBRCxFQUFBQyxPQUFBODlCLFdBQUEvOUIsRUFBQSx1QkFBQXdvQixFQUFBLEtBQUE3b0IsRUFBQW0rQixFQUFBeHVCLEVBQUEydUIsRUFBQW5YLEVBQUEsR0FBQXNYLEdBQUEsRUFBQTcrQixHQUFBLFNBQUErUCxHQUFBa1osRUFBQUEsRUFBQXBwQixLQUFBWSxJQUFBcUMsS0FBQSxJQUFBbThCLEVBQUEsSUFBQS9yQyxPQUFBKzFCLEtBQUFBLEVBQUEsT0FBQTRWLEdBQUEsY0FBQUEsR0FBQXorQixFQUFBMlAsRUFBQWxRLEtBQUFvcEIsSUFBQWhtQixRQUFBc2tCLEVBQUF2eUIsS0FBQW9MLEVBQUEvTSxPQUFBazBCLEVBQUEveEIsU0FBQXlwQyxHQUFBSixHQUFBLFVBQUFwK0IsR0FBQVQsR0FBQSxFQUFBdStCLEVBQUE5OUIsQ0FBQSxpQkFBQW8rQixHQUFBLE1BQUE1VixFQUFBLFNBQUF5VixFQUFBelYsRUFBQSxTQUFBLzFCLE9BQUF3ckMsS0FBQUEsR0FBQSxrQkFBQTErQixFQUFBLE1BQUF1K0IsQ0FBQSxTQUFBaFgsQ0FBQSxFQUFBc1osQ0FBQXBnQyxFQUFBTCxJQUFBLFNBQUFLLEVBQUE4bUIsR0FBQSxHQUFBOW1CLEVBQUEscUJBQUFBLEVBQUEsT0FBQXFnQyxHQUFBcmdDLEVBQUE4bUIsR0FBQSxJQUFBMEIsRUFBQSxHQUFBcHVCLFNBQUFnRixLQUFBWSxHQUFBb0UsTUFBQSx1QkFBQW9rQixHQUFBeG9CLEVBQUFsTixjQUFBMDFCLEVBQUF4b0IsRUFBQWxOLFlBQUFzRyxNQUFBLFFBQUFvdkIsR0FBQSxRQUFBQSxFQUFBaDBCLE1BQUE4QixLQUFBMEosR0FBQSxjQUFBd29CLEdBQUEsMkNBQUEzMEIsS0FBQTIwQixHQUFBNlgsR0FBQXJnQyxFQUFBOG1CLFFBQUEsR0FBQXdaLENBQUF0Z0MsRUFBQUwsSUFBQSxxQkFBQTgrQixVQUFBLDZJQUFBOEIsRUFBQSxVQUFBRixHQUFBcmdDLEVBQUE4bUIsSUFBQSxNQUFBQSxHQUFBQSxFQUFBOW1CLEVBQUFqTCxVQUFBK3hCLEVBQUE5bUIsRUFBQWpMLFFBQUEsUUFBQTRLLEVBQUEsRUFBQW0rQixFQUFBdHBDLE1BQUFzeUIsR0FBQW5uQixFQUFBbW5CLEVBQUFubkIsSUFBQW0rQixFQUFBbitCLEdBQUFLLEVBQUFMLEdBQUEsT0FBQW0rQixDQUFBLFVBQUFxQixHQUFBckIsRUFBQXRWLEVBQUE3b0IsRUFBQUssRUFBQVQsRUFBQXVuQixFQUFBbHpCLEdBQUEsUUFBQTBiLEVBQUF3dUIsRUFBQWhYLEdBQUFsekIsR0FBQXFxQyxFQUFBM3VCLEVBQUExYyxLQUFBLE9BQUFrckMsR0FBQSxZQUFBbitCLEVBQUFtK0IsRUFBQSxDQUFBeHVCLEVBQUE5TSxLQUFBZ21CLEVBQUF5VixHQUFBajhCLFFBQUFDLFFBQUFnOEIsR0FBQW5rQyxLQUFBa0csRUFBQVQsRUFBQSxVQUFBNi9CLEdBQUF0QixHQUFBLHNCQUFBdFYsRUFBQSxLQUFBN29CLEVBQUEwL0IsVUFBQSxXQUFBcjlCLFFBQUEsU0FBQWhDLEVBQUFULEdBQUEsSUFBQXVuQixFQUFBZ1gsRUFBQXI3QixNQUFBK2xCLEVBQUE3b0IsR0FBQSxTQUFBMi9CLEVBQUF4QixHQUFBcUIsR0FBQXJZLEVBQUE5bUIsRUFBQVQsRUFBQSsvQixFQUFBQyxFQUFBLE9BQUF6QixFQUFBLFVBQUF5QixFQUFBekIsR0FBQXFCLEdBQUFyWSxFQUFBOW1CLEVBQUFULEVBQUErL0IsRUFBQUMsRUFBQSxRQUFBekIsRUFBQSxDQUFBd0IsT0FBQSxlQUFBa0IsR0FBQTdnQyxFQUFBSyxHQUFBLFFBQUF3b0IsRUFBQSxFQUFBQSxFQUFBeG9CLEVBQUFqTCxPQUFBeXpCLElBQUEsS0FBQWpwQixFQUFBUyxFQUFBd29CLEdBQUFqcEIsRUFBQUMsV0FBQUQsRUFBQUMsYUFBQSxFQUFBRCxFQUFBNHNCLGNBQUEsWUFBQTVzQixJQUFBQSxFQUFBeWpCLFVBQUEsR0FBQXZ3QixPQUFBQyxlQUFBaU4sRUFBQThnQyxHQUFBbGhDLEVBQUF0SixLQUFBc0osRUFBQSxXQUFBa2hDLEdBQUFqWSxHQUFBLElBQUFsWixFQUFBLFNBQUFrWixHQUFBLGFBQUFrWSxHQUFBbFksS0FBQUEsRUFBQSxPQUFBQSxFQUFBLElBQUE3b0IsRUFBQTZvQixFQUFBdm9CLE9BQUEwZ0MsYUFBQSxZQUFBaGhDLEVBQUEsS0FBQTJQLEVBQUEzUCxFQUFBUCxLQUFBb3BCLEVBQUF4b0IsVUFBQSxhQUFBMGdDLEdBQUFweEIsR0FBQSxPQUFBQSxFQUFBLFVBQUFtdkIsVUFBQSx1REFBQXRrQixPQUFBcU8sRUFBQSxDQUFBb1ksQ0FBQXBZLEdBQUEsZ0JBQUFrWSxHQUFBcHhCLEdBQUFBLEVBQUFBLEVBQUEsR0FEc0MsSUE4b0J6Qm1VLEdBQVUsSUEzb0JILGtCQUZwQjlqQixFQUVvQixTQUFBa2hDLEtBRnBCLFNBQUEvWixFQUFBZ1gsR0FBQSxLQUFBaFgsYUFBQWdYLEdBQUEsVUFBQVcsVUFBQSxxQ0FFb0JxQyxDQUFBLEtBQUFELEVBQUEsRUFGcEI3Z0MsRUFFb0IsRUFBQS9KLElBQUEsVUFBQXJELE9BQUFtdUMsRUFBQTNCLEdBQUFKLEtBQUFoekIsRUFDbEIsU0FBQXl6QixJQUFBLElBQUF1QixFQUFBakwsRUFBQWxPLEVBQUFvWixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBNVcsRUFBQTZXLEVBQUExbUMsRUFBQTJtQyxFQUFBLFlBQUF0QyxLQUFBQyxFQUFBLFNBQUFTLEdBQUEsY0FBQUEsRUFBQTVCLEdBQUEsY0FBQTRCLEVBQUE1QixFQUFBLEVBQzJEMEIsR0FBU3pDLEtBQUt0SSxhQUFZLE9BQW5ELEdBQW1EdU0sRUFBQXRCLEVBQUFuQixFQUFyRXhJLEVBQVdpTCxFQUFqQnJtQyxNQUFzQ3FtQyxFQUFuQnRtQyxPQUNOcTdCLEVBQVl6TyxRQUFPLENBQUFvWSxFQUFBNUIsRUFBQSxlQUFBNEIsRUFBQTVZLEVBQUEsRUFFL0J4MEIsS0FBS2l2QyxrQkFBZ0IsT0FJa0IsT0FEMUMxWixFQUFPa08sRUFBWXpPLFFBQVFPLEtBQ2pDamdCLFFBQVFDLElBQUksMEJBQTJCZ2dCLEVBQUtsWSxJQUFJK3ZCLEVBQUE1QixFQUFBLEVBRVA5N0IsUUFBUXFULElBQUksQ0FDbkRtcUIsR0FBU2xwQyxLQUFLLFNBQVNuRCxPQUFPLEtBQUs4SSxHQUFHLFVBQVc0ckIsRUFBS2xZLElBQ3RENnZCLEdBQVNscEMsS0FBSyxlQUFlbkQsT0FBTyxLQUFLOEksR0FBRyxVQUFXNHJCLEVBQUtsWSxNQUM1RCxPQTRDK0MsT0E1Qy9Dc3hCLEVBQUF2QixFQUFBbkIsRUFBQTJDLEVBQUFoQixHQUFBZSxFQUFBLEdBSEtFLEVBQVFELEVBQUEsR0FBRUUsRUFBY0YsRUFBQSxHQUszQkMsRUFBU3ptQyxPQUFPa04sUUFBUWxOLE1BQU0sd0JBQXlCeW1DLEVBQVN6bUMsT0FDaEUwbUMsRUFBZTFtQyxPQUFPa04sUUFBUWxOLE1BQU0sOEJBQStCMG1DLEVBQWUxbUMsT0FHaEY4dkIsR0FBUzJXLEVBQVN4bUMsTUFBUSxJQUFJaEgsSUFBSSxTQUFDNnRDLEdBRXZDLE9BREE1NUIsUUFBUUMsSUFBSSx1Q0FBd0MyNUIsRUFBTzd4QixHQUFJNnhCLEVBQU9DLFlBQy9ELENBQ0w5eEIsR0FBSTZ4QixFQUFPN3hCLEdBQ1g1YyxJQUFLeXVDLEVBQU96dUMsSUFDWjJ1QyxNQUFPRixFQUFPRSxNQUNkQyxRQUFTSCxFQUFPRyxRQUNoQkMsU0FBVUosRUFBT0ssV0FBYSxHQUM5QkMsVUFBV04sRUFBT08sV0FDbEJDLFNBQVVSLEVBQU9RLFNBQ2pCQyxhQUFjVCxFQUFPVSxjQUNyQkMsVUFBV1gsRUFBT1ksY0FBZSxFQUNqQ1gsV0FBWUgsRUFBS2UsZ0JBQWdCYixFQUFPQyxZQUN4Q2EsVUFBVyxJQUFJN2lCLEtBQUsraEIsRUFBT2UsWUFDM0JDLFVBQVcsSUFBSS9pQixLQUFLK2hCLEVBQU9pQixZQUMzQm5RLE9BQVFrUCxFQUFPbFAsT0FFbkIsR0FFTStPLEdBQWVELEVBQWV6bUMsTUFBUSxJQUFJaEgsSUFBSSxTQUFDK3VDLEdBQVUsTUFBTSxDQUNuRS95QixHQUFJK3lCLEVBQU0veUIsR0FDVnZXLEtBQU1zcEMsRUFBTXRwQyxLQUNadXBDLFlBQWFELEVBQU1DLFlBQ25CQyxNQUFPRixFQUFNRSxNQUNiTixVQUFXLElBQUk3aUIsS0FBS2lqQixFQUFNSCxZQUMxQkMsVUFBVyxJQUFJL2lCLEtBQUtpakIsRUFBTUQsWUFDM0IsR0FFSzluQyxFQUFvQixDQUN4QjZ2QixNQUFBQSxFQUNBNlcsWUFBQUEsRUFDQXdCLFdBQVl2d0MsS0FBS3d3Qyx1QkFDakIxckMsU0FBVSxDQUNSMnJDLGdCQUFpQixVQUNqQkMsZUFBZSxJQUluQnA3QixRQUFRQyxJQUFJLDhCQUErQmxOLEdBQU0ra0MsRUFBQTVZLEVBQUEsRUFDMUNuc0IsR0FBSSxFQUFBOGtDLEVBQUEsU0FDWixXQTNEWSxPQUFBc0IsRUFBQXQrQixNQUFDLEtBQUQ0OEIsVUFBQSxLQUFBcHBDLElBQUEsVUFBQXJELE9BQUFxd0MsRUFBQTdELEdBQUFKLEtBQUFoekIsRUE2RGIsU0FBQTZ6QixFQUFjcFYsR0FBbUUsSUFBQXlZLEVBQUFDLEVBQUFwTixFQUFBbE8sRUFBQTJaLEVBQUE0QixFQUFBem9DLEVBQUFELEVBQUEsT0FBQXNrQyxLQUFBQyxFQUFBLFNBQUFhLEdBQUEsY0FBQUEsRUFBQWhDLEdBQUEsY0FBQWdDLEVBQUFoQyxFQUFBLEVBQzNDMEIsR0FBU3pDLEtBQUt0SSxhQUFZLE9BQ3hCLEdBRHdCME8sRUFBQXJELEVBQUF2QixFQUFoRHhJLEVBQVdvTixFQUFqQnhvQyxLQUNGa3RCLEVBQTBCLFFBQXRCcWIsRUFBR25OLEVBQVl6TyxlQUFPLElBQUE0YixPQUFBLEVBQW5CQSxFQUFxQnJiLEtBQ3ZCLENBQUZpWSxFQUFBaEMsRUFBQSxRQUM2QixPQUFwQ2wyQixRQUFRbE4sTUFBTSxzQkFBc0JvbEMsRUFBQWhaLEVBQUEsRUFDN0IsQ0FBRXVjLFNBQVMsRUFBTzNvQyxNQUFPLHdCQUF1QixPQWlCYSxPQWJoRThtQyxFQUFTLENBQ2I4QixRQUFTemIsRUFBS2xZLEdBQ2R1eUIsY0FBZXpYLEVBQUt3WCxjQUFnQixLQUNwQ2x2QyxJQUFLMDNCLEVBQUsxM0IsSUFDVjJ1QyxNQUFPalgsRUFBS2lYLE1BQ1pDLFFBQVNsWCxFQUFLa1gsUUFDZHJQLE9BQVE3SCxFQUFLNkgsT0FDYnVQLFVBQVdwWCxFQUFLbVgsU0FDaEJHLFdBQVl0WCxFQUFLcVgsVUFDakJFLFNBQVV2WCxFQUFLdVgsU0FDZkksWUFBYTNYLEVBQUswWCxZQUFhLEVBQy9CVixXQUFZaFgsRUFBS2dYLFdBQWFwbkMsS0FBS0MsVUFBVW13QixFQUFLZ1gsWUFBYyxNQUVsRTc1QixRQUFRQyxJQUFJLHNDQUF1QzI1QixFQUFPQyxZQUFZM0IsRUFBQWhDLEVBQUEsRUFDeEMwQixHQUFTbHBDLEtBQUssU0FBU25DLE9BQU9xdEMsR0FBUXJ1QyxPQUFPLE1BQU15RCxTQUFRLE9BQXRFLEdBQXNFd3NDLEVBQUF0RCxFQUFBdkIsRUFBakY1akMsRUFBSXlvQyxFQUFKem9DLE9BQU1ELEVBQUswb0MsRUFBTDFvQyxPQUNILENBQUZvbEMsRUFBQWhDLEVBQUEsUUFDeUMsT0FBaERsMkIsUUFBUWxOLE1BQU0sMEJBQTJCQSxHQUFPb2xDLEVBQUFoWixFQUFBLEVBQ3pDLENBQUV1YyxTQUFTLEVBQU8zb0MsTUFBT0EsRUFBTWMsU0FBVyw2QkFBNEIsY0FBQXNrQyxFQUFBaFosRUFBQSxFQUV4RSxDQUFFdWMsU0FBUyxFQUFNRSxPQUFRNW9DLEVBQUtnVixLQUFJLEVBQUFrd0IsRUFBQSxJQUMxQyxTQTdCWTJELEdBQUEsT0FBQVAsRUFBQXhnQyxNQUFDLEtBQUQ0OEIsVUFBQSxLQUFBcHBDLElBQUEsYUFBQXJELE9BQUE2d0MsRUFBQXJFLEdBQUFKLEtBQUFoekIsRUErQmIsU0FBQWcwQixFQUFpQnVELEVBQWdCRyxHQUEyQixJQUFBQyxFQUFBQyxFQUFBbHBDLEVBQUEsT0FBQXNrQyxLQUFBQyxFQUFBLFNBQUFnQixHQUFBLGNBQUFBLEVBQUFuQyxHQUFBLE9BbUJxQixPQWpCekU2RixFQUFjRSxHQUFBQSxHQUFBLEdBQVFILEdBQU8sSUFBRWpCLFdBQVksSUFBSWhqQixZQUMxQmxxQixJQUF2Qm11QyxFQUFRakMsYUFDVmtDLEVBQVVsQyxXQUFhaUMsRUFBUWpDLFdBQWFwbkMsS0FBS0MsVUFBVW9wQyxFQUFRakMsWUFBYyxhQUc1RWtDLEVBQVUxQixvQkFDVjBCLEVBQVUvQixnQkFDVitCLEVBQVU3QixpQkFDVjZCLEVBQVV4QixpQkFDVndCLEVBQVVyQixpQkFDVnFCLEVBQVVuQixlQUdZanRDLElBQXpCbXVDLEVBQVF6QixlQUE0QjBCLEVBQVV6QixjQUFnQndCLEVBQVF6QixtQkFDakQxc0MsSUFBckJtdUMsRUFBUTlCLFdBQXdCK0IsRUFBVTlCLFVBQVk2QixFQUFROUIsZUFDeENyc0MsSUFBdEJtdUMsRUFBUTVCLFlBQXlCNkIsRUFBVTVCLFdBQWEyQixFQUFRNUIsZ0JBQzFDdnNDLElBQXRCbXVDLEVBQVF2QixZQUF5QndCLEVBQVV2QixZQUFjc0IsRUFBUXZCLFdBQ3JFdjZCLFFBQVFDLElBQUksNENBQTZDODdCLEVBQVVsQyxZQUFZeEIsRUFBQW5DLEVBQUEsRUFDdkQwQixHQUFTbHBDLEtBQUssU0FBU2QsT0FBT211QyxHQUFXMW5DLEdBQUcsS0FBTXNuQyxHQUFPLE9BQXBFLEdBQW9FSyxFQUFBM0QsRUFBQTFCLElBQXpFN2pDLEVBQUtrcEMsRUFBTGxwQyxPQUNHLENBQUZ1bEMsRUFBQW5DLEVBQUEsY0FBUXBqQyxFQUFLLGNBQUF1bEMsRUFBQW5aLEVBQUEsS0FBQWtaLEVBQUEsSUFDdkIsU0F0QmU4RCxFQUFBQyxHQUFBLE9BQUFOLEVBQUFoaEMsTUFBQyxLQUFENDhCLFVBQUEsS0FBQXBwQyxJQUFBLGFBQUFyRCxPQUFBb3hDLEVBQUE1RSxHQUFBSixLQUFBaHpCLEVBd0JoQixTQUFBaTRCLEVBQWlCVixHQUFjLElBQUFXLEVBQUF4cEMsRUFBQSxPQUFBc2tDLEtBQUFDLEVBQUEsU0FBQWtGLEdBQUEsY0FBQUEsRUFBQXJHLEdBQUEsY0FBQXFHLEVBQUFyRyxFQUFBLEVBQ0wwQixHQUFTbHBDLEtBQUssU0FBUSxTQUFVMkYsR0FBRyxLQUFNc25DLEdBQU8sT0FBM0QsR0FBMkRXLEVBQUFDLEVBQUE1RixJQUFoRTdqQyxFQUFLd3BDLEVBQUx4cEMsT0FDRyxDQUFGeXBDLEVBQUFyRyxFQUFBLGNBQVFwakMsRUFBSyxjQUFBeXBDLEVBQUFyZCxFQUFBLEtBQUFtZCxFQUFBLElBQ3ZCLFNBSGVHLEdBQUEsT0FBQUosRUFBQXZoQyxNQUFDLEtBQUQ0OEIsVUFBQSxLQUFBcHBDLElBQUEsZ0JBQUFyRCxPQUFBeXhDLEVBQUFqRixHQUFBSixLQUFBaHpCLEVBS2hCLFNBQUFzNEIsRUFBb0JDLEdBQTBFLElBQUFDLEVBQUFDLEVBQUExTyxFQUFBbE8sRUFBQTZjLEVBQUFDLEVBQUFqcUMsRUFBQSxPQUFBc2tDLEtBQUFDLEVBQUEsU0FBQTJGLEdBQUEsY0FBQUEsRUFBQTlHLEdBQUEsY0FBQThHLEVBQUE5RyxFQUFBLEVBQ3hEMEIsR0FBU3pDLEtBQUt0SSxhQUFZLE9BQ3hCLEdBRHdCZ1EsRUFBQUcsRUFBQXJHLEVBQWhEeEksRUFBVzBPLEVBQWpCOXBDLEtBQ0ZrdEIsRUFBMEIsUUFBdEIyYyxFQUFHek8sRUFBWXpPLGVBQU8sSUFBQWtkLE9BQUEsRUFBbkJBLEVBQXFCM2MsS0FDdkIsQ0FBRitjLEVBQUE5RyxFQUFBLGNBQVEsSUFBSWhpQyxNQUFNLHVCQUFzQixPQVFoRCxPQUxLNG9DLEVBQWUsQ0FDbkJwQixRQUFTemIsRUFBS2xZLEdBQ2R2VyxLQUFNbXJDLEVBQVduckMsS0FDakJ1cEMsWUFBYTRCLEVBQVc1QixZQUN4QkMsTUFBTzJCLEVBQVczQixPQUNuQmdDLEVBQUE5RyxFQUFBLEVBRXVCMEIsR0FBU2xwQyxLQUFLLGVBQWVuQyxPQUFPdXdDLEdBQWEsT0FBNUQsR0FBNERDLEVBQUFDLEVBQUFyRyxJQUFqRTdqQyxFQUFLaXFDLEVBQUxqcUMsT0FDRyxDQUFGa3FDLEVBQUE5RyxFQUFBLGNBQVFwakMsRUFBSyxjQUFBa3FDLEVBQUE5ZCxFQUFBLEtBQUF3ZCxFQUFBLElBQ3ZCLFNBZmtCTyxHQUFBLE9BQUFSLEVBQUE1aEMsTUFBQyxLQUFENDhCLFVBQUEsS0FBQXBwQyxJQUFBLG1CQUFBckQsT0FBQWt5QyxFQUFBMUYsR0FBQUosS0FBQWh6QixFQWlCbkIsU0FBQSs0QixFQUF1QjlDLEVBQXNCeUIsR0FBNEIsSUFBQXNCLEVBQUF0cUMsRUFBQSxPQUFBc2tDLEtBQUFDLEVBQUEsU0FBQWdHLEdBQUEsY0FBQUEsRUFBQW5ILEdBQUEsY0FBQW1ILEVBQUFuSCxFQUFBLEVBQy9DMEIsR0FBU2xwQyxLQUFLLGVBQWVkLE9BQU1xdUMsR0FBQUEsR0FBQyxDQUFDLEVBQUlILEdBQU8sSUFBRWxCLFVBQVcsSUFBSS9pQixRQUFVeGpCLEdBQUcsS0FBTWdtQyxHQUFhLE9BQTVHLEdBQTRHK0MsRUFBQUMsRUFBQTFHLElBQWpIN2pDLEVBQUtzcUMsRUFBTHRxQyxPQUNHLENBQUZ1cUMsRUFBQW5ILEVBQUEsY0FBUXBqQyxFQUFLLGNBQUF1cUMsRUFBQW5lLEVBQUEsS0FBQWllLEVBQUEsSUFDdkIsU0FIcUJHLEVBQUFDLEdBQUEsT0FBQUwsRUFBQXJpQyxNQUFDLEtBQUQ0OEIsVUFBQSxLQUFBcHBDLElBQUEsbUJBQUFyRCxPQUFBd3lDLEVBQUFoRyxHQUFBSixLQUFBaHpCLEVBS3RCLFNBQUFxNUIsRUFBdUJwRCxHQUFvQixJQUFBcUQsRUFBQTVxQyxFQUFBLE9BQUFza0MsS0FBQUMsRUFBQSxTQUFBc0csR0FBQSxjQUFBQSxFQUFBekgsR0FBQSxjQUFBeUgsRUFBQXpILEVBQUEsRUFFakIwQixHQUFTbHBDLEtBQUssZUFBYyxTQUFVMkYsR0FBRyxLQUFNZ21DLEdBQWEsT0FBdkUsR0FBdUVxRCxFQUFBQyxFQUFBaEgsSUFBNUU3akMsRUFBSzRxQyxFQUFMNXFDLE9BQ0csQ0FBRjZxQyxFQUFBekgsRUFBQSxjQUFRcGpDLEVBQUssY0FBQTZxQyxFQUFBemUsRUFBQSxLQUFBdWUsRUFBQSxJQUN2QixTQUpxQkcsR0FBQSxPQUFBSixFQUFBM2lDLE1BQUMsS0FBRDQ4QixVQUFBLEtBQUFwcEMsSUFBQSxjQUFBckQsT0FBQTZ5QyxFQUFBckcsR0FBQUosS0FBQWh6QixFQU10QixTQUFBMDVCLEVBQWtCOW5DLEdBQWEsSUFBQStuQyxFQUFBQyxFQUFBN1AsRUFBQWxPLEVBQUFnZSxFQUFBbHJDLEVBQUFELEVBQUFvckMsRUFBQUMsRUFBQSxZQUFBL0csS0FBQUMsRUFBQSxTQUFBK0csR0FBQSxjQUFBQSxFQUFBbEksR0FBQSxjQUFBa0ksRUFBQWxJLEVBQUEsRUFDTzBCLEdBQVN6QyxLQUFLdEksYUFBWSxPQUN4QixHQUR3Qm1SLEVBQUFJLEVBQUF6SCxFQUFoRHhJLEVBQVc2UCxFQUFqQmpyQyxLQUNGa3RCLEVBQTBCLFFBQXRCOGQsRUFBRzVQLEVBQVl6TyxlQUFPLElBQUFxZSxPQUFBLEVBQW5CQSxFQUFxQjlkLEtBQ3ZCLENBQUZtZSxFQUFBbEksRUFBQSxRQUM2QixPQUFwQ2wyQixRQUFRbE4sTUFBTSxzQkFBc0JzckMsRUFBQWxmLEVBQUEsRUFDN0IsSUFBRSxVQUdObHBCLEVBQU05RixPQUFRLENBQUZrdUMsRUFBQWxJLEVBQUEsZUFBQWtJLEVBQUFsZixFQUFBLEVBQ1IsSUFBRSxjQUFBa2YsRUFBQXZkLEVBQUEsRUFBQXVkLEVBQUFsSSxFQUFBLEVBSXFCMEIsR0FBU3ptQyxJQUFJLG9CQUFxQixDQUM5RGt0QyxhQUFjcm9DLEVBQU05RixPQUNwQm91QyxVQUFXcmUsRUFBS2xZLEdBQ2hCdzJCLGFBQWMsS0FDZCxPQUppQixHQUlqQk4sRUFBQUcsRUFBQXpILEVBSk01akMsRUFBSWtyQyxFQUFKbHJDLE9BQU1ELEVBQUttckMsRUFBTG5yQyxPQU1ILENBQUZzckMsRUFBQWxJLEVBQUEsUUFDK0IsT0FBdENsMkIsUUFBUWxOLE1BQU0sZ0JBQWlCQSxHQUFPc3JDLEVBQUFsZixFQUFBLEVBQy9CLElBQUUsY0FBQWtmLEVBQUFsZixFQUFBLEdBSUhuc0IsR0FBUSxJQUFJaEgsSUFBSSxTQUFDNE8sR0FBVyxNQUFNLENBQ3hDb04sR0FBSXBOLEVBQU9vTixHQUNYNWMsSUFBS3dQLEVBQU94UCxJQUNaMnVDLE1BQU9uL0IsRUFBT20vQixNQUNkQyxRQUFTcC9CLEVBQU9vL0IsUUFDaEJDLFNBQVVyL0IsRUFBT3MvQixXQUFhLEdBQzlCQyxVQUFXdi9CLEVBQU93L0IsV0FDbEJDLFNBQVV6L0IsRUFBT3kvQixTQUNqQkMsYUFBYzEvQixFQUFPMi9CLGNBQ3JCQyxVQUFXNS9CLEVBQU82L0IsY0FBZSxFQUNqQ1gsV0FBWXNFLEVBQUsxRCxnQkFBZ0I5L0IsRUFBT2svQixZQUN4Q2EsVUFBVyxJQUFJN2lCLEtBQUtsZCxFQUFPZ2dDLFlBQzNCQyxVQUFXLElBQUkvaUIsS0FBS2xkLEVBQU9rZ0MsWUFDM0JuUSxPQUFRL3ZCLEVBQU8rdkIsT0FFZjhULFdBQVk3akMsRUFBTzhqQyxLQUNuQkMsZUFBZ0IvakMsRUFBT2drQyxTQUN4QixJQUFFLE9BRW9DLE9BRnBDUCxFQUFBdmQsRUFBQSxFQUFBcWQsRUFBQUUsRUFBQXpILEVBRUgzMkIsUUFBUWxOLE1BQU0saUJBQWdCb3JDLEdBQVNFLEVBQUFsZixFQUFBLEVBQ2hDLElBQUUsRUFBQTRlLEVBQUEsaUJBRVosU0EvQ2dCYyxHQUFBLE9BQUFmLEVBQUFoakMsTUFBQyxLQUFENDhCLFVBQUEsS0FBQXBwQyxJQUFBLGNBQUFyRCxPQUFBNnpDLEVBQUFySCxHQUFBSixLQUFBaHpCLEVBaURqQixTQUFBMDZCLElBQUEsSUFBQUMsRUFBQUMsRUFBQTdRLEVBQUFsTyxFQUFBZ2YsRUFBQWxzQyxFQUFBRCxFQUFBb3NDLEVBQUEsT0FBQTlILEtBQUFDLEVBQUEsU0FBQThILEdBQUEsY0FBQUEsRUFBQWpKLEdBQUEsY0FBQWlKLEVBQUFqSixFQUFBLEVBQ3NDMEIsR0FBU3pDLEtBQUt0SSxhQUFZLE9BQ3hCLEdBRHdCbVMsRUFBQUcsRUFBQXhJLEVBQWhEeEksRUFBVzZRLEVBQWpCanNDLEtBQ0ZrdEIsRUFBMEIsUUFBdEI4ZSxFQUFHNVEsRUFBWXpPLGVBQU8sSUFBQXFmLE9BQUEsRUFBbkJBLEVBQXFCOWUsS0FDdkIsQ0FBRmtmLEVBQUFqSixFQUFBLFFBQzZCLE9BQXBDbDJCLFFBQVFsTixNQUFNLHNCQUFzQnFzQyxFQUFBamdCLEVBQUEsRUFDN0IsSUFBRSxjQUFBaWdCLEVBQUF0ZSxFQUFBLEVBQUFzZSxFQUFBakosRUFBQSxFQUlxQjBCLEdBQVN6bUMsSUFBSSw0QkFBNkIsQ0FDdEVtdEMsVUFBV3JlLEVBQUtsWSxLQUNoQixPQUZpQixHQUVqQmszQixFQUFBRSxFQUFBeEksRUFGTTVqQyxFQUFJa3NDLEVBQUpsc0MsT0FBTUQsRUFBS21zQyxFQUFMbnNDLE9BSUgsQ0FBRnFzQyxFQUFBakosRUFBQSxRQUMyQyxPQUFsRGwyQixRQUFRbE4sTUFBTSw0QkFBNkJBLEdBQU9xc0MsRUFBQWpnQixFQUFBLEVBQzNDLElBQUUsY0FBQWlnQixFQUFBamdCLEVBQUEsR0FHSG5zQixHQUFRLElBQUloSCxJQUFJLFNBQUNxekMsR0FBUSxNQUFNLENBQ3JDcjNCLEdBQUlxM0IsRUFBSXIzQixHQUNSdlcsS0FBTTR0QyxFQUFJNXRDLEtBQ1Y2dEMsV0FBWUQsRUFBSUUsYUFBZSxFQUNoQyxJQUFFLE9BRThDLE9BRjlDSCxFQUFBdGUsRUFBQSxFQUFBcWUsRUFBQUMsRUFBQXhJLEVBRUgzMkIsUUFBUWxOLE1BQU0sMkJBQTBCb3NDLEdBQVNDLEVBQUFqZ0IsRUFBQSxFQUMxQyxJQUFFLEVBQUE0ZixFQUFBLGlCQUVaLFdBM0JnQixPQUFBRCxFQUFBaGtDLE1BQUMsS0FBRDQ4QixVQUFBLEtBQUFwcEMsSUFBQSxjQUFBckQsT0FBQXUwQyxFQUFBL0gsR0FBQUosS0FBQWh6QixFQTZCakIsU0FBQW83QixFQUFrQjdELEdBQWMsSUFBQThELEVBQUExc0MsRUFBQUQsRUFBQTRzQyxFQUFBLE9BQUF0SSxLQUFBQyxFQUFBLFNBQUFzSSxHQUFBLGNBQUFBLEVBQUF6SixHQUFBLGNBQUF5SixFQUFBOWUsRUFBQSxFQUFBOGUsRUFBQXpKLEVBQUEsRUFFRTBCLEdBQVN6bUMsSUFBSSxnQkFBaUIsQ0FDMUR5dUMsVUFBV2pFLElBQ1gsT0FGaUIsR0FFakI4RCxFQUFBRSxFQUFBaEosRUFGTTVqQyxFQUFJMHNDLEVBQUoxc0MsT0FBTUQsRUFBSzJzQyxFQUFMM3NDLE9BSUgsQ0FBRjZzQyxFQUFBekosRUFBQSxRQUMyQyxPQUFsRGwyQixRQUFRbE4sTUFBTSw0QkFBNkJBLEdBQU82c0MsRUFBQXpnQixFQUFBLEVBQzNDLElBQUUsY0FBQXlnQixFQUFBemdCLEVBQUEsRUFHSm5zQixHQUFRLElBQUUsT0FFZ0MsT0FGaEM0c0MsRUFBQTllLEVBQUEsRUFBQTZlLEVBQUFDLEVBQUFoSixFQUVqQjMyQixRQUFRbE4sTUFBTSwyQkFBMEI0c0MsR0FBU0MsRUFBQXpnQixFQUFBLEVBQzFDLElBQUUsRUFBQXNnQixFQUFBLGlCQUVaLFNBaEJnQkssR0FBQSxPQUFBTixFQUFBMWtDLE1BQUMsS0FBRDQ4QixVQUFBLEtBQUFwcEMsSUFBQSxnQkFBQXJELE9BQUE4MEMsRUFBQXRJLEdBQUFKLEtBQUFoekIsRUFrQmpCLFNBQUEyN0IsRUFBb0JwRSxFQUFnQnFFLEdBQWtCLElBQUFDLEVBQUFDLEVBQUEvUixFQUFBbE8sRUFBQWtnQixFQUFBcnRDLEVBQUFzdEMsRUFBQSxPQUFBaEosS0FBQUMsRUFBQSxTQUFBZ0osR0FBQSxjQUFBQSxFQUFBbkssR0FBQSxjQUFBbUssRUFBQW5LLEVBQUEsRUFDaEIwQixHQUFTekMsS0FBS3RJLGFBQVksT0FDeEIsR0FEd0JxVCxFQUFBRyxFQUFBMUosRUFBaER4SSxFQUFXK1IsRUFBakJudEMsS0FDRmt0QixFQUEwQixRQUF0QmdnQixFQUFHOVIsRUFBWXpPLGVBQU8sSUFBQXVnQixPQUFBLEVBQW5CQSxFQUFxQmhnQixLQUN2QixDQUFGb2dCLEVBQUFuSyxFQUFBLGVBQUFtSyxFQUFBbmhCLEVBQUEsRUFDQSxDQUFFdWMsU0FBUyxFQUFPM29DLE1BQU8sd0JBQXVCLGNBQUF1dEMsRUFBQXhmLEVBQUEsRUFBQXdmLEVBQUFuSyxFQUFBLEVBSS9CMEIsR0FBU3ptQyxJQUFJLG1CQUFvQixDQUN2RHl1QyxVQUFXakUsRUFDWDJFLFVBQVdOLEVBQ1gxQixVQUFXcmUsRUFBS2xZLEtBQ2hCLE9BSlcsR0FJWG80QixFQUFBRSxFQUFBMUosSUFKTTdqQyxFQUFLcXRDLEVBQUxydEMsT0FNRyxDQUFGdXRDLEVBQUFuSyxFQUFBLFFBQzRDLE9BQW5EbDJCLFFBQVFsTixNQUFNLDZCQUE4QkEsR0FBT3V0QyxFQUFBbmhCLEVBQUEsRUFDNUMsQ0FBRXVjLFNBQVMsRUFBTzNvQyxNQUFPQSxFQUFNYyxTQUFXLHdCQUF1QixjQUFBeXNDLEVBQUFuaEIsRUFBQSxFQUduRSxDQUFFdWMsU0FBUyxJQUFNLE9BRTRCLE9BRjVCNEUsRUFBQXhmLEVBQUEsRUFBQXVmLEVBQUFDLEVBQUExSixFQUV4QjMyQixRQUFRbE4sTUFBTSw4QkFBNkJzdEMsR0FBU0MsRUFBQW5oQixFQUFBLEVBQzdDLENBQUV1YyxTQUFTLEVBQU8zb0MsTUFBT3N0QyxFQUFpQnhzQyxVQUFTLEVBQUFtc0MsRUFBQSxpQkFFN0QsU0F4QmtCUSxFQUFBQyxHQUFBLE9BQUFWLEVBQUFqbEMsTUFBQyxLQUFENDhCLFVBQUEsS0FBQXBwQyxJQUFBLGdCQUFBckQsT0FBQXkxQyxFQUFBakosR0FBQUosS0FBQWh6QixFQTBCbkIsU0FBQXM4QixFQUFvQkMsR0FBZSxJQUFBQyxFQUFBQyxFQUFBMVMsRUFBQWxPLEVBQUE2Z0IsRUFBQS90QyxFQUFBRCxFQUFBaXVDLEVBQUFDLEVBQUEsWUFBQTVKLEtBQUFDLEVBQUEsU0FBQTRKLEdBQUEsY0FBQUEsRUFBQS9LLEdBQUEsY0FBQStLLEVBQUEvSyxFQUFBLEVBQ0cwQixHQUFTekMsS0FBS3RJLGFBQVksT0FDeEIsR0FEd0JnVSxFQUFBSSxFQUFBdEssRUFBaER4SSxFQUFXMFMsRUFBakI5dEMsS0FDRmt0QixFQUEwQixRQUF0QjJnQixFQUFHelMsRUFBWXpPLGVBQU8sSUFBQWtoQixPQUFBLEVBQW5CQSxFQUFxQjNnQixLQUN2QixDQUFGZ2hCLEVBQUEvSyxFQUFBLFFBQzZCLE9BQXBDbDJCLFFBQVFsTixNQUFNLHNCQUFzQm11QyxFQUFBL2hCLEVBQUEsRUFDN0IsSUFBRSxjQUFBK2hCLEVBQUFwZ0IsRUFBQSxFQUFBb2dCLEVBQUEvSyxFQUFBLEVBSXFCMEIsR0FBU3ptQyxJQUFJLG1CQUFvQixDQUM3RG10QyxVQUFXcmUsRUFBS2xZLEdBQ2hCbTVCLFNBQVVQLElBQ1YsT0FIaUIsR0FHakJHLEVBQUFHLEVBQUF0SyxFQUhNNWpDLEVBQUkrdEMsRUFBSi90QyxPQUFNRCxFQUFLZ3VDLEVBQUxodUMsT0FLSCxDQUFGbXVDLEVBQUEvSyxFQUFBLFFBQzhDLE9BQXJEbDJCLFFBQVFsTixNQUFNLCtCQUFnQ0EsR0FBT211QyxFQUFBL2hCLEVBQUEsRUFDOUMsSUFBRSxjQUFBK2hCLEVBQUEvaEIsRUFBQSxHQUlIbnNCLEdBQVEsSUFBSWhILElBQUksU0FBQzZ0QyxHQUFXLE1BQU0sQ0FDeEM3eEIsR0FBSTZ4QixFQUFPN3hCLEdBQ1g1YyxJQUFLeXVDLEVBQU96dUMsSUFDWjJ1QyxNQUFPRixFQUFPRSxNQUNkQyxRQUFTSCxFQUFPRyxRQUNoQkMsU0FBVUosRUFBT0ssV0FBYSxHQUM5QkMsVUFBV04sRUFBT08sV0FDbEJDLFNBQVVSLEVBQU9RLFNBQ2pCQyxhQUFjVCxFQUFPVSxjQUNyQkMsVUFBV1gsRUFBT1ksY0FBZSxFQUNqQ1gsV0FBWW1ILEVBQUt2RyxnQkFBZ0JiLEVBQU9DLFlBQ3hDYSxVQUFXLElBQUk3aUIsS0FBSytoQixFQUFPZSxZQUMzQkMsVUFBVyxJQUFJL2lCLEtBQUsraEIsRUFBT2lCLFlBQzNCblEsT0FBUWtQLEVBQU9sUCxPQUNoQixJQUFFLE9BRWlELE9BRmpEdVcsRUFBQXBnQixFQUFBLEVBQUFrZ0IsRUFBQUUsRUFBQXRLLEVBRUgzMkIsUUFBUWxOLE1BQU0sOEJBQTZCaXVDLEdBQVNFLEVBQUEvaEIsRUFBQSxFQUM3QyxJQUFFLEVBQUF3aEIsRUFBQSxpQkFFWixTQXZDa0JTLEdBQUEsT0FBQVYsRUFBQTVsQyxNQUFDLEtBQUQ0OEIsVUFBQSxLQUFBcHBDLElBQUEsb0JBQUFyRCxPQUFBbzJDLEVBQUE1SixHQUFBSixLQUFBaHpCLEVBeUNuQixTQUFBaTlCLElBQUEsSUFBQUMsRUFBQUMsRUFBQXBULEVBQUFsTyxFQUFBdWhCLEVBQUF6dUMsRUFBQUQsRUFBQTJ1QyxFQUFBLE9BQUFySyxLQUFBQyxFQUFBLFNBQUFxSyxHQUFBLGNBQUFBLEVBQUF4TCxHQUFBLGNBQUF3TCxFQUFBeEwsRUFBQSxFQUNzQzBCLEdBQVN6QyxLQUFLdEksYUFBWSxPQUN4QixHQUR3QjBVLEVBQUFHLEVBQUEvSyxFQUFoRHhJLEVBQVdvVCxFQUFqQnh1QyxLQUNGa3RCLEVBQTBCLFFBQXRCcWhCLEVBQUduVCxFQUFZek8sZUFBTyxJQUFBNGhCLE9BQUEsRUFBbkJBLEVBQXFCcmhCLEtBQ3ZCLENBQUZ5aEIsRUFBQXhMLEVBQUEsZUFBQXdMLEVBQUF4aUIsRUFBQSxFQUNBLEdBQUMsY0FBQXdpQixFQUFBN2dCLEVBQUEsRUFBQTZnQixFQUFBeEwsRUFBQSxFQUlzQjBCLEdBQVN6bUMsSUFBSSxzQkFBdUIsQ0FDaEVtdEMsVUFBV3JlLEVBQUtsWSxLQUNoQixPQUZpQixHQUVqQnk1QixFQUFBRSxFQUFBL0ssRUFGTTVqQyxFQUFJeXVDLEVBQUp6dUMsT0FBTUQsRUFBSzB1QyxFQUFMMXVDLE9BSUgsQ0FBRjR1QyxFQUFBeEwsRUFBQSxRQUNnRCxPQUF2RGwyQixRQUFRbE4sTUFBTSxpQ0FBa0NBLEdBQU80dUMsRUFBQXhpQixFQUFBLEVBQ2hELEdBQUMsY0FBQXdpQixFQUFBeGlCLEVBQUEsRUFHSG5zQixHQUFRLEdBQUMsT0FFdUMsT0FGdkMydUMsRUFBQTdnQixFQUFBLEVBQUE0Z0IsRUFBQUMsRUFBQS9LLEVBRWhCMzJCLFFBQVFsTixNQUFNLGlDQUFnQzJ1QyxHQUFTQyxFQUFBeGlCLEVBQUEsRUFDaEQsR0FBQyxFQUFBbWlCLEVBQUEsaUJBRVgsV0F0QnNCLE9BQUFELEVBQUF2bUMsTUFBQyxLQUFENDhCLFVBQUEsSUF3QnZCLENBQUFwcEMsSUFBQSxjQUFBckQsT0FBQTIyQyxFQUFBbkssR0FBQUosS0FBQWh6QixFQUNBLFNBQUF3OUIsRUFBa0JqRyxHQUFjLElBQUFrRyxFQUFBL3VDLEVBQUEsT0FBQXNrQyxLQUFBQyxFQUFBLFNBQUF5SyxHQUFBLGNBQUFBLEVBQUE1TCxHQUFBLGNBQUE0TCxFQUFBNUwsRUFBQSxFQUNOMEIsR0FDckJscEMsS0FBSyxTQUNMZCxPQUFPLENBQ040c0MsYUFBYSxFQUNiRixjQUFlLEtBQ2ZPLFlBQVksSUFBSWhqQixNQUFPcVAsZ0JBRXhCN3lCLEdBQUcsS0FBTXNuQyxHQUFPLE9BUE4sR0FPTWtHLEVBQUFDLEVBQUFuTCxJQVBYN2pDLEVBQUsrdUMsRUFBTC91QyxPQVFHLENBQUZndkMsRUFBQTVMLEVBQUEsY0FBUXBqQyxFQUFLLGNBQUFndkMsRUFBQTVpQixFQUFBLEtBQUEwaUIsRUFBQSxJQUN2QixTQVZnQkcsR0FBQSxPQUFBSixFQUFBOW1DLE1BQUMsS0FBRDQ4QixVQUFBLEtBQUFwcEMsSUFBQSxnQkFBQXJELE9BQUFnM0MsRUFBQXhLLEdBQUFKLEtBQUFoekIsRUFZakIsU0FBQTY5QixFQUFvQnRHLEVBQWdCdEIsR0FBcUIsSUFBQTZILEVBQUFwdkMsRUFBQSxPQUFBc2tDLEtBQUFDLEVBQUEsU0FBQThLLEdBQUEsY0FBQUEsRUFBQWpNLEdBQUEsY0FBQWlNLEVBQUFqTSxFQUFBLEVBQy9CMEIsR0FDckJscEMsS0FBSyxTQUNMZCxPQUFPLENBQ040c0MsYUFBYSxFQUNiRixjQUFlRCxHQUFnQixLQUMvQlEsWUFBWSxJQUFJaGpCLE1BQU9xUCxnQkFFeEI3eUIsR0FBRyxLQUFNc25DLEdBQU8sT0FQTixHQU9NdUcsRUFBQUMsRUFBQXhMLElBUFg3akMsRUFBS292QyxFQUFMcHZDLE9BUUcsQ0FBRnF2QyxFQUFBak0sRUFBQSxjQUFRcGpDLEVBQUssY0FBQXF2QyxFQUFBampCLEVBQUEsS0FBQStpQixFQUFBLElBQ3ZCLFNBVmtCRyxFQUFBQyxHQUFBLE9BQUFMLEVBQUFubkMsTUFBQyxLQUFENDhCLFVBQUEsS0FBQXBwQyxJQUFBLGdCQUFBckQsT0FBQXMzQyxFQUFBOUssR0FBQUosS0FBQWh6QixFQVluQixTQUFBbStCLElBQUEsSUFBQUMsRUFBQUMsRUFBQXRVLEVBQUFsTyxFQUFBeWlCLEVBQUEzdkMsRUFBQUQsRUFBQTZ2QyxFQUFBLFlBQUF2TCxLQUFBQyxFQUFBLFNBQUF1TCxHQUFBLGNBQUFBLEVBQUExTSxHQUFBLGNBQUEwTSxFQUFBMU0sRUFBQSxFQUNzQzBCLEdBQVN6QyxLQUFLdEksYUFBWSxPQUN4QixHQUR3QjRWLEVBQUFHLEVBQUFqTSxFQUFoRHhJLEVBQVdzVSxFQUFqQjF2QyxLQUNGa3RCLEVBQTBCLFFBQXRCdWlCLEVBQUdyVSxFQUFZek8sZUFBTyxJQUFBOGlCLE9BQUEsRUFBbkJBLEVBQXFCdmlCLEtBQ3ZCLENBQUYyaUIsRUFBQTFNLEVBQUEsZUFBQTBNLEVBQUExakIsRUFBQSxFQUNBLElBQUUsY0FBQTBqQixFQUFBMU0sRUFBQSxFQUdtQjBCLEdBQzNCbHBDLEtBQUssU0FDTG5ELE9BQU8sS0FDUDhJLEdBQUcsVUFBVzRyQixFQUFLbFksSUFDbkIxVCxHQUFHLGVBQWUsR0FDbEJyRyxNQUFNLGFBQWMsQ0FBRUMsV0FBVyxJQUFRLE9BTHpCLEdBS3lCeTBDLEVBQUFFLEVBQUFqTSxFQUxwQzVqQyxFQUFJMnZDLEVBQUozdkMsT0FBTUQsRUFBSzR2QyxFQUFMNXZDLE9BT0gsQ0FBRjh2QyxFQUFBMU0sRUFBQSxRQUM2QyxPQUFwRGwyQixRQUFRbE4sTUFBTSw4QkFBK0JBLEdBQU84dkMsRUFBQTFqQixFQUFBLEVBQzdDLElBQUUsY0FBQTBqQixFQUFBMWpCLEVBQUEsR0FHSG5zQixHQUFRLElBQUloSCxJQUFJLFNBQUM2dEMsR0FBVyxNQUFNLENBQ3hDN3hCLEdBQUk2eEIsRUFBTzd4QixHQUNYNWMsSUFBS3l1QyxFQUFPenVDLElBQ1oydUMsTUFBT0YsRUFBT0UsTUFDZEMsUUFBU0gsRUFBT0csUUFDaEJDLFNBQVVKLEVBQU9LLFdBQWEsR0FDOUJDLFVBQVdOLEVBQU9PLFdBQ2xCQyxTQUFVUixFQUFPUSxTQUNqQkMsYUFBY1QsRUFBT1UsY0FDckJDLFVBQVdYLEVBQU9ZLGNBQWUsRUFDakNYLFdBQVk4SSxFQUFLbEksZ0JBQWdCYixFQUFPQyxZQUN4Q2EsVUFBVyxJQUFJN2lCLEtBQUsraEIsRUFBT2UsWUFDM0JDLFVBQVcsSUFBSS9pQixLQUFLK2hCLEVBQU9pQixZQUMzQm5RLE9BQVFrUCxFQUFPbFAsT0FDaEIsSUFBRSxFQUFBNlgsRUFBQSxJQUNKLFdBbENrQixPQUFBRCxFQUFBem5DLE1BQUMsS0FBRDQ4QixVQUFBLEtBQUFwcEMsSUFBQSxvQkFBQXJELE9BQUE2M0MsRUFBQXJMLEdBQUFKLEtBQUFoekIsRUFvQ25CLFNBQUEwK0IsRUFBd0JDLEVBQW1CMUksR0FBcUIsSUFBQTJJLEVBQUFsd0MsRUFBQSxPQUFBc2tDLEtBQUFDLEVBQUEsU0FBQTRMLEdBQUEsY0FBQUEsRUFBQS9NLEdBQUEsY0FBQStNLEVBQUEvTSxFQUFBLEVBQ3RDMEIsR0FDckJscEMsS0FBSyxTQUNMZCxPQUFPLENBQ040c0MsYUFBYSxFQUNiRixjQUFlRCxHQUFnQixLQUMvQlEsWUFBWSxJQUFJaGpCLE1BQU9xUCxnQkFDdkIsR0FDRSxLQUFNNmIsR0FBUSxPQVBQLEdBT09DLEVBQUFDLEVBQUF0TSxJQVBaN2pDLEVBQUtrd0MsRUFBTGx3QyxPQVFHLENBQUZtd0MsRUFBQS9NLEVBQUEsY0FBUXBqQyxFQUFLLGNBQUFtd0MsRUFBQS9qQixFQUFBLEtBQUE0akIsRUFBQSxJQUN2QixTQVZzQkksRUFBQUMsR0FBQSxPQUFBTixFQUFBaG9DLE1BQUMsS0FBRDQ4QixVQUFBLEtBQUFwcEMsSUFBQSwwQkFBQXJELE9BQUFvNEMsRUFBQTVMLEdBQUFKLEtBQUFoekIsRUFZdkIsU0FBQWkvQixFQUE4QmhKLEVBQXNCaUosR0FBbUIsSUFBQUMsRUFBQUMsRUFBQXJWLEVBQUFsTyxFQUFBd2pCLEVBQUExd0MsRUFBQUQsRUFBQTZILEVBQUErb0MsRUFBQSxPQUFBdE0sS0FBQUMsRUFBQSxTQUFBc00sR0FBQSxjQUFBQSxFQUFBek4sR0FBQSxjQUFBeU4sRUFBQXpOLEVBQUEsRUFDakMwQixHQUFTekMsS0FBS3RJLGFBQVksT0FDeEIsR0FEd0IyVyxFQUFBRyxFQUFBaE4sRUFBaER4SSxFQUFXcVYsRUFBakJ6d0MsS0FDRmt0QixFQUEwQixRQUF0QnNqQixFQUFHcFYsRUFBWXpPLGVBQU8sSUFBQTZqQixPQUFBLEVBQW5CQSxFQUFxQnRqQixLQUN2QixDQUFGMGpCLEVBQUF6TixFQUFBLGVBQUF5TixFQUFBemtCLEVBQUEsRUFDQSxDQUFFdWMsU0FBUyxFQUFPN25DLFFBQVMsd0JBQXVCLGNBQUErdkMsRUFBQTlpQixFQUFBLEVBQUE4aUIsRUFBQXpOLEVBQUEsRUFJM0IwQixHQUFTem1DLElBQUksNEJBQTZCLENBQ3RFeXlDLGdCQUFpQnZKLEVBQ2pCaUUsVUFBV3JlLEVBQUtsWSxHQUNoQjg3QixZQUFhUCxJQUNiLE9BSmlCLEdBSWpCRyxFQUFBRSxFQUFBaE4sRUFKTTVqQyxFQUFJMHdDLEVBQUoxd0MsT0FBTUQsRUFBSzJ3QyxFQUFMM3dDLE9BTUgsQ0FBRjZ3QyxFQUFBek4sRUFBQSxRQUNvRCxPQUEzRGwyQixRQUFRbE4sTUFBTSxxQ0FBc0NBLEdBQU82d0MsRUFBQXprQixFQUFBLEVBQ3BELENBQUV1YyxTQUFTLEVBQU83bkMsUUFBU2QsRUFBTWMsU0FBVyx1Q0FBc0MsT0FHbkUsT0FBbEIrRyxFQUFTNUgsYUFBSSxFQUFKQSxFQUFPLEdBQUU0d0MsRUFBQXprQixFQUFBLEVBQ2pCLENBQ0x1YyxTQUFTOWdDLGFBQU0sRUFBTkEsRUFBUThnQyxXQUFXLEVBQzVCcUksV0FBWW5wQyxhQUFNLEVBQU5BLEVBQVFvcEMsWUFDcEJud0MsU0FBUytHLGFBQU0sRUFBTkEsRUFBUS9HLFVBQVcsOEJBQzdCLE9BRTRELE9BRjVEK3ZDLEVBQUE5aUIsRUFBQSxFQUFBNmlCLEVBQUFDLEVBQUFoTixFQUVEMzJCLFFBQVFsTixNQUFNLHVDQUFzQzR3QyxHQUFTQyxFQUFBemtCLEVBQUEsRUFDdEQsQ0FBRXVjLFNBQVMsRUFBTzduQyxRQUFTOHZDLEVBQWlCOXZDLFVBQVMsRUFBQXl2QyxFQUFBLGlCQUUvRCxTQTdCNEJXLEVBQUFDLEdBQUEsT0FBQWIsRUFBQXZvQyxNQUFDLEtBQUQ0OEIsVUFBQSxLQUFBcHBDLElBQUEsMkJBQUFyRCxPQUFBazVDLEVBQUExTSxHQUFBSixLQUFBaHpCLEVBK0I3QixTQUFBKy9CLEVBQStCOUosR0FBb0IsSUFBQStKLEVBQUFDLEVBQUFsVyxFQUFBbE8sRUFBQXFrQixFQUFBdnhDLEVBQUFELEVBQUF5eEMsRUFBQSxPQUFBbk4sS0FBQUMsRUFBQSxTQUFBbU4sR0FBQSxjQUFBQSxFQUFBdE8sR0FBQSxjQUFBc08sRUFBQXRPLEVBQUEsRUFDYjBCLEdBQVN6QyxLQUFLdEksYUFBWSxPQUN4QixHQUR3QndYLEVBQUFHLEVBQUE3TixFQUFoRHhJLEVBQVdrVyxFQUFqQnR4QyxLQUNGa3RCLEVBQTBCLFFBQXRCbWtCLEVBQUdqVyxFQUFZek8sZUFBTyxJQUFBMGtCLE9BQUEsRUFBbkJBLEVBQXFCbmtCLEtBQ3ZCLENBQUZ1a0IsRUFBQXRPLEVBQUEsZUFBQXNPLEVBQUF0bEIsRUFBQSxFQUNBLE1BQUksY0FBQXNsQixFQUFBM2pCLEVBQUEsRUFBQTJqQixFQUFBdE8sRUFBQSxFQUltQjBCLEdBQzNCbHBDLEtBQUssZUFDTG5ELE9BQU8sc0NBQ1A4SSxHQUFHLEtBQU1nbUMsR0FDVGhtQyxHQUFHLFVBQVc0ckIsRUFBS2xZLElBQ25CL1ksU0FBUSxPQUxRLEdBS1JzMUMsRUFBQUUsRUFBQTdOLEVBTEg1akMsRUFBSXV4QyxFQUFKdnhDLE9BQU1ELEVBQUt3eEMsRUFBTHh4QyxPQU9ILENBQUYweEMsRUFBQXRPLEVBQUEsUUFDeUQsT0FBaEVsMkIsUUFBUWxOLE1BQU0sMENBQTJDQSxHQUFPMHhDLEVBQUF0bEIsRUFBQSxFQUN6RCxNQUFJLGNBQUFzbEIsRUFBQXRsQixFQUFBLEVBR04sQ0FDTHVsQixTQUFVMXhDLEVBQUsyeEMsWUFBYSxFQUM1QlosV0FBWS93QyxFQUFLZ3hDLFlBQ2pCWSxVQUFXNXhDLEVBQUs2eEMsWUFBYyxJQUMvQixPQUU4RCxPQUY5REosRUFBQTNqQixFQUFBLEVBQUEwakIsRUFBQUMsRUFBQTdOLEVBRUQzMkIsUUFBUWxOLE1BQU0seUNBQXdDeXhDLEdBQVNDLEVBQUF0bEIsRUFBQSxFQUN4RCxNQUFJLEVBQUFpbEIsRUFBQSxpQkFFZCxTQTdCNkJVLEdBQUEsT0FBQVgsRUFBQXJwQyxNQUFDLEtBQUQ0OEIsVUFBQSxJQStCOUIsQ0FBQXBwQyxJQUFBLHVCQUFBckQsTUE0RkEsV0FDRSxNQUFPLENBQ0wsQ0FBRStjLEdBQUksVUFBV3ZXLEtBQU0sVUFBV3dwQyxNQUFPLFVBQVc4SixXQUFXLEdBQy9ELENBQUUvOEIsR0FBSSxPQUFRdlcsS0FBTSxPQUFRd3BDLE1BQU8sV0FDbkMsQ0FBRWp6QixHQUFJLFdBQVl2VyxLQUFNLFdBQVl3cEMsTUFBTyxXQUMzQyxDQUFFanpCLEdBQUksV0FBWXZXLEtBQU0sV0FBWXdwQyxNQUFPLFdBRS9DLEdBQUMsQ0FBQTNzQyxJQUFBLGlCQUFBckQsTUFFRCxXQUNFLE1BQU8sQ0FDTDQzQixNQUFPLEdBQ1A2VyxZQUFhLEdBQ2J3QixXQUFZdndDLEtBQUt3d0MsdUJBQ2pCMXJDLFNBQVUsQ0FDUjJyQyxnQkFBaUIsVUFDakJDLGVBQWUsR0FHckIsR0FBQyxDQUFBL3NDLElBQUEsZUFBQXJELE9BQUErNUMsRUFBQXZOLEdBQUFKLEtBQUFoekIsRUFFRCxTQUFBNGdDLEVBQW1CNzVDLEdBQVcsSUFBQTg1QyxFQUFBQyxFQUFBL1csRUFBQWxPLEVBQUFrbEIsRUFBQXB5QyxFQUFBRCxFQUFBLE9BQUFza0MsS0FBQUMsRUFBQSxTQUFBK04sR0FBQSxjQUFBQSxFQUFBbFAsR0FBQSxjQUFBa1AsRUFBQWxQLEVBQUEsRUFDUTBCLEdBQVN6QyxLQUFLdEksYUFBWSxPQUN4QixHQUR3QnFZLEVBQUFFLEVBQUF6TyxFQUFoRHhJLEVBQVcrVyxFQUFqQm55QyxLQUNGa3RCLEVBQTBCLFFBQXRCZ2xCLEVBQUc5VyxFQUFZek8sZUFBTyxJQUFBdWxCLE9BQUEsRUFBbkJBLEVBQXFCaGxCLEtBQ3ZCLENBQUZtbEIsRUFBQWxQLEVBQUEsZUFBQWtQLEVBQUFsbUIsRUFBQSxFQUNBLE1BQUksY0FBQWttQixFQUFBbFAsRUFBQSxFQUdpQjBCLEdBQzNCbHBDLEtBQUssU0FDTG5ELE9BQU8sS0FDUDhJLEdBQUcsVUFBVzRyQixFQUFLbFksSUFDbkIxVCxHQUFHLE1BQU9sSixHQUNWNkQsU0FBUSxPQUxRLEdBS1JtMkMsRUFBQUMsRUFBQXpPLEVBTEg1akMsRUFBSW95QyxFQUFKcHlDLE9BQU1ELEVBQUtxeUMsRUFBTHJ5QyxPQU9ILENBQUZzeUMsRUFBQWxQLEVBQUEsV0FDWSxhQUFmcGpDLEVBQU1XLEtBQW1CLENBQUEyeEMsRUFBQWxQLEVBQUEsZUFBQWtQLEVBQUFsbUIsRUFBQSxFQUVwQixNQUFJLGFBRVBwc0IsRUFBSyxjQUFBc3lDLEVBQUFsbUIsRUFBQSxFQUlOLENBQ0xuWCxHQUFJaFYsRUFBS2dWLEdBQ1Q1YyxJQUFLNEgsRUFBSzVILElBQ1YydUMsTUFBTy9tQyxFQUFLK21DLE1BQ1pDLFFBQVNobkMsRUFBS2duQyxRQUNkQyxTQUFVam5DLEVBQUtrbkMsV0FBYSxHQUM1QkMsVUFBV25uQyxFQUFLb25DLFdBQ2hCQyxTQUFVcm5DLEVBQUtxbkMsU0FDZkMsYUFBY3RuQyxFQUFLdW5DLGNBQ25CQyxVQUFXeG5DLEVBQUt5bkMsY0FBZSxFQUMvQlgsV0FBWW52QyxLQUFLK3ZDLGdCQUFnQjFuQyxFQUFLOG1DLFlBQ3RDYSxVQUFXLElBQUk3aUIsS0FBSzlrQixFQUFLNG5DLFlBQ3pCQyxVQUFXLElBQUkvaUIsS0FBSzlrQixFQUFLOG5DLFlBQ3pCblEsT0FBUTMzQixFQUFLMjNCLFNBQ2QsRUFBQXNhLEVBQUEsU0FDRixTQXRDaUJLLEdBQUEsT0FBQU4sRUFBQWxxQyxNQUFDLEtBQUQ0OEIsVUFBQSxJQXdDbEIsQ0FBQXBwQyxJQUFBLGtCQUFBckQsTUFDQSxTQUF3QnM2QyxHQUN0QixJQUFLQSxFQUVILE9BREF0bEMsUUFBUUMsSUFBSSxxQ0FDTCxHQUVULEdBQThCLGlCQUFuQnFsQyxFQUNULElBQ0UsSUFBTUMsRUFBUzl5QyxLQUFLVyxNQUFNa3lDLEdBQ3BCM3FDLEVBQVMvTixNQUFNQyxRQUFRMDRDLEdBQVVBLEVBQVMsR0FFaEQsT0FEQXZsQyxRQUFRQyxJQUFJLHdDQUF5Q3RGLEVBQU94TixPQUFRLGFBQWN3TixHQUMzRUEsQ0FDVCxDQUFFLE1BQU83SCxHQUVQLE9BREFrTixRQUFROGQsS0FBSyxtQ0FBb0NockIsR0FDMUMsRUFDVCxDQUVGLE9BQUlsRyxNQUFNQyxRQUFReTRDLElBQ2hCdGxDLFFBQVFDLElBQUksbUNBQW9DcWxDLEVBQWVuNEMsT0FBUSxhQUFjbTRDLEdBQzlFQSxJQUVUdGxDLFFBQVFDLElBQUksaURBQWdENjRCLEdBQVN3TSxHQUFnQkEsR0FDOUUsR0FDVCxJQTFvQkYxa0IsRUEwb0JHLEVBQUF2eUIsSUFBQSxzQkFBQXJELE9BQUF3NkMsRUFBQWhPLEdBQUFKLEtBQUFoekIsRUEvS0QsU0FBQXFoQyxFQUFpQzNCLEdBQWtCLElBQUE0QixFQUFBM3lDLEVBQUFELEVBQUE2cEMsRUFBQWdKLEVBQUEsT0FBQXZPLEtBQUFDLEVBQUEsU0FBQXVPLEdBQUEsY0FBQUEsRUFBQTFQLEdBQUEsY0FBQTBQLEVBQUEva0IsRUFBQSxFQUFBK2tCLEVBQUExUCxFQUFBLEVBU2pCMEIsR0FBU3ptQyxJQUFJLHdCQUF5QixDQUNsRThILE1BQU82cUMsSUFDUCxPQUZpQixHQUVqQjRCLEVBQUFFLEVBQUFqUCxFQUZNNWpDLEVBQUkyeUMsRUFBSjN5QyxPQUFNRCxFQUFLNHlDLEVBQUw1eUMsT0FJSCxDQUFGOHlDLEVBQUExUCxFQUFBLFFBQ21ELE9BQTFEbDJCLFFBQVFsTixNQUFNLG9DQUFxQ0EsR0FBTzh5QyxFQUFBMW1CLEVBQUEsRUFDbkQsTUFBSSxPQUdlLEdBQXRCeWQsRUFBYTVwQyxhQUFJLEVBQUpBLEVBQU8sR0FDVCxDQUFGNnlDLEVBQUExUCxFQUFBLGVBQUEwUCxFQUFBMW1CLEVBQUEsRUFDTixNQUFJLGNBQUEwbUIsRUFBQTFtQixFQUFBLEVBR04sQ0FDTG5YLEdBQUk0MEIsRUFBVzUwQixHQUNmdlcsS0FBTW1yQyxFQUFXbnJDLEtBQ2pCdXBDLFlBQWE0QixFQUFXNUIsWUFDeEI0SixVQUFXaEksRUFBV2lJLFlBQWMsRUFDcENsSyxVQUFXLElBQUk3aUIsS0FBSzhrQixFQUFXaEMsWUFDL0JrTCxXQUFZbEosRUFBV21KLGNBQ3hCLE9BRXdELE9BRnhERixFQUFBL2tCLEVBQUEsRUFBQThrQixFQUFBQyxFQUFBalAsRUFFRDMyQixRQUFRbE4sTUFBTSxtQ0FBa0M2eUMsR0FBU0MsRUFBQTFtQixFQUFBLEVBQ2xELE1BQUksRUFBQXVtQixFQUFBLGlCQUVkLFNBbkMrQk0sR0FBQSxPQUFBUCxFQUFBM3FDLE1BQUMsS0FBRDQ4QixVQUFBLEtBQUFwcEMsSUFBQSwyQkFBQXJELE9BQUFnN0MsRUFBQXhPLEdBQUFKLEtBQUFoekIsRUFxQ2hDLFNBQUE2aEMsRUFBc0NuQyxHQUFrQixJQUFBb0MsRUFBQW56QyxFQUFBRCxFQUFBcXpDLEVBQUEsT0FBQS9PLEtBQUFDLEVBQUEsU0FBQStPLEdBQUEsY0FBQUEsRUFBQWxRLEdBQUEsY0FBQWtRLEVBQUF2bEIsRUFBQSxFQUFBdWxCLEVBQUFsUSxFQUFBLEVBYXRCMEIsR0FBU3ptQyxJQUFJLDhCQUErQixDQUN4RThILE1BQU82cUMsSUFDUCxPQUZpQixHQUVqQm9DLEVBQUFFLEVBQUF6UCxFQUZNNWpDLEVBQUltekMsRUFBSm56QyxPQUFNRCxFQUFLb3pDLEVBQUxwekMsT0FJSCxDQUFGc3pDLEVBQUFsUSxFQUFBLFFBQ3lELE9BQWhFbDJCLFFBQVFsTixNQUFNLDBDQUEyQ0EsR0FBT3N6QyxFQUFBbG5CLEVBQUEsRUFDekQsSUFBRSxjQUFBa25CLEVBQUFsbkIsRUFBQSxHQUdIbnNCLEdBQVEsSUFBSWhILElBQUksU0FBQzgyQixHQUFTLE1BQU0sQ0FDdEM5YSxHQUFJOGEsRUFBSzlhLEdBQ1Q1YyxJQUFLMDNCLEVBQUsxM0IsSUFDVjJ1QyxNQUFPalgsRUFBS2lYLE1BQ1pDLFFBQVNsWCxFQUFLa1gsUUFDZHJQLE9BQVE3SCxFQUFLNkgsT0FDYnNQLFNBQVVuWCxFQUFLb1gsVUFDZkMsVUFBV3JYLEVBQUtzWCxXQUNoQkMsU0FBVXZYLEVBQUt1WCxTQUNmTSxVQUFXLElBQUk3aUIsS0FBS2dMLEVBQUs4WCxZQUN6QjBMLEtBQU14akIsRUFBS3lkLFdBQWEsR0FDekIsSUFBRSxPQUU0RCxPQUY1RDhGLEVBQUF2bEIsRUFBQSxFQUFBc2xCLEVBQUFDLEVBQUF6UCxFQUVIMzJCLFFBQVFsTixNQUFNLHlDQUF3Q3F6QyxHQUFTQyxFQUFBbG5CLEVBQUEsRUFDeEQsSUFBRSxFQUFBK21CLEVBQUEsaUJBRVosU0F0Q29DSyxHQUFBLE9BQUFOLEVBQUFuckMsTUFBQyxLQUFENDhCLFVBQUEsS0FBQXBwQyxJQUFBLHFCQUFBckQsT0FBQXU3QyxFQUFBL08sR0FBQUosS0FBQWh6QixFQXdDckMsU0FBQW9pQyxFQUFnQzFDLEdBQWtCLElBQUEyQyxFQUFBM3pDLEVBQUE0ekMsRUFBQSxPQUFBdFAsS0FBQUMsRUFBQSxTQUFBc1AsR0FBQSxjQUFBQSxFQUFBelEsR0FBQSxjQUFBeVEsRUFBQTlsQixFQUFBLEVBQUE4bEIsRUFBQXpRLEVBQUEsRUFFdEIwQixHQUFTem1DLElBQUksNkJBQThCLENBQ2pFOEgsTUFBTzZxQyxJQUNQLE9BQUEyQyxFQUFBRSxFQUFBaFEsR0FGTTdqQyxFQUFLMnpDLEVBQUwzekMsUUFLTmtOLFFBQVFsTixNQUFNLGlDQUFrQ0EsR0FDakQ2ekMsRUFBQXpRLEVBQUEsZUFBQXlRLEVBQUE5bEIsRUFBQSxFQUFBNmxCLEVBQUFDLEVBQUFoUSxFQUVEMzJCLFFBQVFsTixNQUFNLGtDQUFpQzR6QyxHQUFTLGNBQUFDLEVBQUF6bkIsRUFBQSxLQUFBc25CLEVBQUEsaUJBRTNELFNBWjhCSSxHQUFBLE9BQUFMLEVBQUExckMsTUFBQyxLQUFENDhCLFVBQUEsS0F4aUJqQ3IvQixHQUFBd2dDLEdBQUE3Z0MsRUFBQUcsVUFBQUUsR0FBQXdvQixHQUFBZ1ksR0FBQTdnQyxFQUFBNm9CLEdBQUEvMUIsT0FBQUMsZUFBQWlOLEVBQUEsYUFBQXFqQixVQUFBLElBQUFyakIsRUFBQSxJQUFBQSxFQUFBSyxFQUFBd29CLEVBZ2dCdUMybEIsRUFyQ0xQLEVBK0svQlIsRUFqRUFULEVBN0s0QmIsRUFaTmQsRUFwQ0pQLEVBWkFQLEVBWkZOLEVBRGpCTCxFQWpFbUJQLEVBMUJBWCxFQWxCRlgsRUE3QkFQLEVBakRBVixFQU5LaEIsRUFMQUwsRUFqQkhOLEVBTEhULEVBeEJBTCxFQS9CSFAsRUE3REFSLEVBREtsQyxDQXNpQmEsQ0F0aUJiLEksdVBDRnBCLElBQUFwaEMsRUFBQTZvQixFQUFBeG9CLEVBQUEsbUJBQUFDLE9BQUFBLE9BQUEsR0FBQTY5QixFQUFBOTlCLEVBQUErOUIsVUFBQSxhQUFBeCtCLEVBQUFTLEVBQUFFLGFBQUEseUJBQUFvUCxFQUFBdFAsRUFBQTg5QixFQUFBditCLEVBQUErUCxHQUFBLElBQUExYixFQUFBa3FDLEdBQUFBLEVBQUFoK0IscUJBQUFrK0IsRUFBQUYsRUFBQUUsRUFBQUMsRUFBQXhyQyxPQUFBeXJDLE9BQUF0cUMsRUFBQWtNLFdBQUEsT0FBQXErQixHQUFBRixFQUFBLG1CQUFBaitCLEVBQUE4OUIsRUFBQXYrQixHQUFBLElBQUErUCxFQUFBMWIsRUFBQXFxQyxFQUFBRyxFQUFBLEVBQUEzVixFQUFBbHBCLEdBQUEsR0FBQTgrQixHQUFBLEVBQUFDLEVBQUEsQ0FBQTdWLEVBQUEsRUFBQXFWLEVBQUEsRUFBQVMsRUFBQTUrQixFQUFBbW5CLEVBQUF6bkIsRUFBQSsrQixFQUFBLytCLEVBQUFYLEtBQUFpQixFQUFBLEdBQUFOLEVBQUEsU0FBQW1wQixFQUFBeG9CLEdBQUEsT0FBQXNQLEVBQUFrWixFQUFBNTBCLEVBQUEsRUFBQXFxQyxFQUFBdCtCLEVBQUEyK0IsRUFBQVIsRUFBQTk5QixFQUFBOG1CLENBQUEsWUFBQXpuQixFQUFBVyxFQUFBODlCLEdBQUEsSUFBQWxxQyxFQUFBb00sRUFBQWkrQixFQUFBSCxFQUFBdFYsRUFBQSxHQUFBNlYsR0FBQUQsSUFBQTcrQixHQUFBaXBCLEVBQUFDLEVBQUExekIsT0FBQXl6QixJQUFBLEtBQUFqcEIsRUFBQStQLEVBQUFtWixFQUFBRCxHQUFBbnBCLEVBQUFpL0IsRUFBQTdWLEVBQUErVixFQUFBbHZCLEVBQUEsR0FBQXRQLEVBQUEsR0FBQVQsRUFBQWkvQixJQUFBVixLQUFBRyxFQUFBM3VCLEdBQUExYixFQUFBMGIsRUFBQSxPQUFBMWIsRUFBQSxNQUFBMGIsRUFBQSxHQUFBQSxFQUFBLEdBQUEzUCxHQUFBMlAsRUFBQSxJQUFBalEsS0FBQUUsRUFBQVMsRUFBQSxHQUFBWCxFQUFBaVEsRUFBQSxLQUFBMWIsRUFBQSxFQUFBMHFDLEVBQUFDLEVBQUFULEVBQUFRLEVBQUFSLEVBQUF4dUIsRUFBQSxJQUFBalEsRUFBQW0vQixJQUFBai9CLEVBQUFTLEVBQUEsR0FBQXNQLEVBQUEsR0FBQXd1QixHQUFBQSxFQUFBVSxLQUFBbHZCLEVBQUEsR0FBQXRQLEVBQUFzUCxFQUFBLEdBQUF3dUIsRUFBQVEsRUFBQVIsRUFBQVUsRUFBQTVxQyxFQUFBLE9BQUEyTCxHQUFBUyxFQUFBLFNBQUE4bUIsRUFBQSxNQUFBdVgsR0FBQSxFQUFBUCxDQUFBLGlCQUFBditCLEVBQUFrcEIsRUFBQStWLEdBQUEsR0FBQUosRUFBQSxRQUFBSyxVQUFBLG9DQUFBSixHQUFBLElBQUE1VixHQUFBcHBCLEVBQUFvcEIsRUFBQStWLEdBQUE1cUMsRUFBQTYwQixFQUFBd1YsRUFBQU8sR0FBQWhXLEVBQUE1MEIsRUFBQSxFQUFBK0wsRUFBQXMrQixLQUFBSSxHQUFBLENBQUEvdUIsSUFBQTFiLEVBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUFBMHFDLEVBQUFSLEdBQUEsR0FBQXorQixFQUFBekwsRUFBQXFxQyxJQUFBSyxFQUFBUixFQUFBRyxFQUFBSyxFQUFBQyxFQUFBTixHQUFBLE9BQUFHLEVBQUEsRUFBQTl1QixFQUFBLElBQUExYixJQUFBMkwsRUFBQSxRQUFBaXBCLEVBQUFsWixFQUFBL1AsR0FBQSxNQUFBaXBCLEVBQUFBLEVBQUFwcEIsS0FBQWtRLEVBQUEydUIsSUFBQSxNQUFBUSxVQUFBLHdDQUFBalcsRUFBQWhtQixLQUFBLE9BQUFnbUIsRUFBQXlWLEVBQUF6VixFQUFBNTFCLE1BQUFnQixFQUFBLElBQUFBLEVBQUEsWUFBQUEsSUFBQTQwQixFQUFBbFosRUFBQSxTQUFBa1osRUFBQXBwQixLQUFBa1EsR0FBQTFiLEVBQUEsSUFBQXFxQyxFQUFBUSxVQUFBLG9DQUFBbC9CLEVBQUEsWUFBQTNMLEVBQUEsR0FBQTBiLEVBQUEzUCxDQUFBLFVBQUE2b0IsR0FBQTZWLEVBQUFDLEVBQUFSLEVBQUEsR0FBQUcsRUFBQWorQixFQUFBWixLQUFBMCtCLEVBQUFRLE1BQUF4WCxFQUFBLFlBQUEwQixHQUFBbFosRUFBQTNQLEVBQUEvTCxFQUFBLEVBQUFxcUMsRUFBQXpWLENBQUEsU0FBQTRWLEVBQUEsVUFBQXhyQyxNQUFBNDFCLEVBQUFobUIsS0FBQTY3QixFQUFBLEdBQUFyK0IsRUFBQVQsRUFBQStQLElBQUEsR0FBQTJ1QixDQUFBLEtBQUFuWCxFQUFBLFlBQUFrWCxJQUFBLFVBQUFVLElBQUEsVUFBQUMsSUFBQSxDQUFBblcsRUFBQS8xQixPQUFBbXNDLGVBQUEsSUFBQWhyQyxFQUFBLEdBQUFrcUMsR0FBQXRWLEVBQUFBLEVBQUEsR0FBQXNWLFFBQUFLLEdBQUEzVixFQUFBLEdBQUFzVixFQUFBLHlCQUFBdFYsR0FBQXlWLEVBQUFVLEVBQUE3K0IsVUFBQWsrQixFQUFBbCtCLFVBQUFyTixPQUFBeXJDLE9BQUF0cUMsR0FBQSxTQUFBd3FDLEVBQUF6K0IsR0FBQSxPQUFBbE4sT0FBQW9zQyxlQUFBcHNDLE9BQUFvc0MsZUFBQWwvQixFQUFBZy9CLElBQUFoL0IsRUFBQW0vQixVQUFBSCxFQUFBUixHQUFBeCtCLEVBQUFKLEVBQUEsc0JBQUFJLEVBQUFHLFVBQUFyTixPQUFBeXJDLE9BQUFELEdBQUF0K0IsQ0FBQSxRQUFBKytCLEVBQUE1K0IsVUFBQTYrQixFQUFBUixHQUFBRixFQUFBLGNBQUFVLEdBQUFSLEdBQUFRLEVBQUEsY0FBQUQsR0FBQUEsRUFBQUssWUFBQSxvQkFBQVosR0FBQVEsRUFBQXAvQixFQUFBLHFCQUFBNCtCLEdBQUFGLEdBQUFFLEdBQUFGLEVBQUExK0IsRUFBQSxhQUFBNCtCLEdBQUFGLEVBQUFILEVBQUEseUJBQUFLLEdBQUFGLEVBQUEsb0RBQUFlLEdBQUEsa0JBQUFDLEVBQUEzdkIsRUFBQXRELEVBQUFveUIsRUFBQSxjQUFBRCxHQUFBeCtCLEVBQUFLLEVBQUE4OUIsRUFBQXRWLEdBQUEsSUFBQWxaLEVBQUE3YyxPQUFBQyxlQUFBLElBQUE0YyxFQUFBLGdCQUFBM1AsR0FBQTJQLEVBQUEsRUFBQTZ1QixHQUFBLFNBQUF4K0IsRUFBQUssRUFBQTg5QixFQUFBdFYsR0FBQSxHQUFBeG9CLEVBQUFzUCxFQUFBQSxFQUFBM1AsRUFBQUssRUFBQSxDQUFBcE4sTUFBQWtyQyxFQUFBdCtCLFlBQUFncEIsRUFBQTJELGNBQUEzRCxFQUFBeEYsVUFBQXdGLElBQUE3b0IsRUFBQUssR0FBQTg5QixNQUFBLEtBQUF2K0IsRUFBQSxTQUFBUyxFQUFBODlCLEdBQUFLLEdBQUF4K0IsRUFBQUssRUFBQSxTQUFBTCxHQUFBLFlBQUF1L0IsUUFBQWwvQixFQUFBODlCLEVBQUFuK0IsRUFBQSxJQUFBSixFQUFBLFVBQUFBLEVBQUEsV0FBQUEsRUFBQSxjQUFBNCtCLEdBQUF4K0IsRUFBQUssRUFBQTg5QixFQUFBdFYsRUFBQSxVQUFBMlcsR0FBQXJCLEVBQUF0VixFQUFBN29CLEVBQUFLLEVBQUFULEVBQUF1bkIsRUFBQWx6QixHQUFBLFFBQUEwYixFQUFBd3VCLEVBQUFoWCxHQUFBbHpCLEdBQUFxcUMsRUFBQTN1QixFQUFBMWMsS0FBQSxPQUFBa3JDLEdBQUEsWUFBQW4rQixFQUFBbStCLEVBQUEsQ0FBQXh1QixFQUFBOU0sS0FBQWdtQixFQUFBeVYsR0FBQWo4QixRQUFBQyxRQUFBZzhCLEdBQUFua0MsS0FBQWtHLEVBQUFULEVBQUEsVUFBQTYvQixHQUFBdEIsR0FBQSxzQkFBQXRWLEVBQUEsS0FBQTdvQixFQUFBMC9CLFVBQUEsV0FBQXI5QixRQUFBLFNBQUFoQyxFQUFBVCxHQUFBLElBQUF1bkIsRUFBQWdYLEVBQUFyN0IsTUFBQStsQixFQUFBN29CLEdBQUEsU0FBQTIvQixFQUFBeEIsR0FBQXFCLEdBQUFyWSxFQUFBOW1CLEVBQUFULEVBQUErL0IsRUFBQUMsRUFBQSxPQUFBekIsRUFBQSxVQUFBeUIsRUFBQXpCLEdBQUFxQixHQUFBclksRUFBQTltQixFQUFBVCxFQUFBKy9CLEVBQUFDLEVBQUEsUUFBQXpCLEVBQUEsQ0FBQXdCLE9BQUEsZUFBQWtCLEdBQUE3Z0MsRUFBQUssR0FBQSxRQUFBd29CLEVBQUEsRUFBQUEsRUFBQXhvQixFQUFBakwsT0FBQXl6QixJQUFBLEtBQUFqcEIsRUFBQVMsRUFBQXdvQixHQUFBanBCLEVBQUFDLFdBQUFELEVBQUFDLGFBQUEsRUFBQUQsRUFBQTRzQixjQUFBLFlBQUE1c0IsSUFBQUEsRUFBQXlqQixVQUFBLEdBQUF2d0IsT0FBQUMsZUFBQWlOLEVBQUE4Z0MsR0FBQWxoQyxFQUFBdEosS0FBQXNKLEVBQUEsV0FBQWtoQyxHQUFBalksR0FBQSxJQUFBbFosRUFBQSxTQUFBa1osR0FBQSxhQUFBa1ksR0FBQWxZLEtBQUFBLEVBQUEsT0FBQUEsRUFBQSxJQUFBN29CLEVBQUE2b0IsRUFBQXZvQixPQUFBMGdDLGFBQUEsWUFBQWhoQyxFQUFBLEtBQUEyUCxFQUFBM1AsRUFBQVAsS0FBQW9wQixFQUFBeG9CLFVBQUEsYUFBQTBnQyxHQUFBcHhCLEdBQUEsT0FBQUEsRUFBQSxVQUFBbXZCLFVBQUEsdURBQUF0a0IsT0FBQXFPLEVBQUEsQ0FBQW9ZLENBQUFwWSxHQUFBLGdCQUFBa1ksR0FBQXB4QixHQUFBQSxFQUFBQSxFQUFBLEdBS08sSUFrRk1tL0IsR0FBWSxJQWxGSCxXQU9uQixPQVpIOXVDLEVBU0UsU0FBQSt1QyxJQUFtQyxJQUF2Qjd3QyxFQUFnQndoQyxVQUFBdHFDLE9BQUEsUUFBQVEsSUFBQThwQyxVQUFBLEdBQUFBLFVBQUEsR0FBRyxDQUFDLEdBVGxDLFNBQUF2WSxFQUFBZ1gsR0FBQSxLQUFBaFgsYUFBQWdYLEdBQUEsVUFBQVcsVUFBQSxxQ0FTbUNxQyxDQUFBLEtBQUE0TixHQUMvQnA4QyxLQUFLZ2UsT0FBU3pTLEVBQU95UyxRQUFVLEdBQy9CaGUsS0FBS3E4QyxNQUFROXdDLEVBQU84d0MsT0FBUyxlQUMvQixFQVpGM3VDLEVBWUcsRUFBQS9KLElBQUEsa0JBQUFyRCxPQUFBZzhDLEVBQUF4UCxHQUFBSixLQUFBaHpCLEVBRUQsU0FBQXl6QixFQUFzQm9QLEVBQWlCbk4sRUFBZTN1QyxHQUFXLElBQUEyTyxFQUFBb2tDLEVBQUEsT0FBQTlHLEtBQUFDLEVBQUEsU0FBQVMsR0FBQSxjQUFBQSxFQUFBNUIsR0FBQSxVQUcxRHhyQyxLQUFLZ2UsT0FBUSxDQUFGb3ZCLEVBQUE1QixFQUFBLGVBQUE0QixFQUFBNVksRUFBQSxFQUNQeDBCLEtBQUt3OEMsMkJBQTJCRCxFQUFTbk4sRUFBTzN1QyxJQUFJLGNBQUEyc0MsRUFBQWpYLEVBQUEsRUFBQWlYLEVBQUE1QixFQUFBLEVBS3BDeHJDLEtBQUt5OEMsV0FBV0YsRUFBU25OLEVBQU8zdUMsR0FBSSxPQUE3QyxPQUFSMk8sRUFBUWcrQixFQUFBbkIsRUFBQW1CLEVBQUE1WSxFQUFBLEVBQ1BwbEIsR0FBUSxPQUV1QyxPQUZ2Q2crQixFQUFBalgsRUFBQSxFQUFBcWQsRUFBQXBHLEVBQUFuQixFQUVmMzJCLFFBQVFsTixNQUFNLGdDQUErQm9yQyxHQUFTcEcsRUFBQTVZLEVBQUEsRUFDL0N4MEIsS0FBS3c4QywyQkFBMkJELEVBQVNuTixFQUFPM3VDLElBQUksRUFBQTBzQyxFQUFBLGlCQUU5RCxTQWZvQitELEVBQUFNLEVBQUFDLEdBQUEsT0FBQTZLLEVBQUFuc0MsTUFBQyxLQUFENDhCLFVBQUEsS0FBQXBwQyxJQUFBLDZCQUFBckQsTUFpQnJCLFNBQW1DaThDLEVBQWlCbk4sRUFBZTN1QyxHQUNqRSxJQUFNdS9CLEVBQVMsSUFBSXg1QixJQUFJL0YsR0FBSzRwQyxTQUN0QnFTLEVBQWdCSCxFQUFROTVDLE9BRzlCLE9BQUl1OUIsRUFBT3I0QixTQUFTLGNBQ1gsc0NBQVBwRixPQUE2QzZzQyxHQUNwQ3BQLEVBQU9yNEIsU0FBUyxxQkFDbEIsa0VBQ0VxNEIsRUFBT3I0QixTQUFTLGVBQWlCcTRCLEVBQU9yNEIsU0FBUyxRQUNuRCxpQkFBUHBGLE9BQXdCNnNDLEVBQU1oWCxVQUFVLEVBQUcsSUFBRyxPQUNyQzRILEVBQU9yNEIsU0FBUyxlQUNsQixrQkFBUHBGLE9BQXlCNnNDLEdBQ2hCcFAsRUFBT3I0QixTQUFTLFNBQVdxNEIsRUFBT3I0QixTQUFTLFdBQzdDLHFCQUFQcEYsT0FBNEJ5OUIsR0FFckIsaUJBQVB6OUIsT0FBd0J5OUIsRUFBTSxNQUFBejlCLE9BQUt1dUIsS0FBS3VFLE1BQU1xbkIsRUFBZ0IsS0FBSSxlQUV0RSxHQUFDLENBQUEvNEMsSUFBQSxhQUFBckQsT0FBQXE4QyxFQUFBN1AsR0FBQUosS0FBQWh6QixFQUVELFNBQUE2ekIsRUFBeUJnUCxFQUFpQm5OLEVBQWUzdUMsR0FBVyxJQUFBbThDLEVBQUFDLEVBQUF6dEMsRUFBQS9HLEVBQUEsT0FBQXFrQyxLQUFBQyxFQUFBLFNBQUFhLEdBQUEsY0FBQUEsRUFBQWhDLEdBQUEsT0FPbEUsT0FMTXFSLEVBQVMscURBQUh0NkMsT0FDUDZzQyxFQUFLLFdBQUE3c0MsT0FDUDlCLEVBQUcsZUFBQThCLE9BQ0NnNkMsRUFBUW5rQixVQUFVLEVBQUcsS0FBSyxPQUVqQ29WLEVBQUFoQyxFQUFBLEVBQ3VCNXFDLE1BQU0sNkNBQThDLENBQ3pFSyxPQUFRLE9BQ1JQLFFBQVMsQ0FDUCxjQUFpQixVQUFGNkIsT0FBWXZDLEtBQUtnZSxRQUNoQyxlQUFnQixvQkFFbEJuYixLQUFNa0YsS0FBS0MsVUFBVSxDQUNuQnEwQyxNQUFPcjhDLEtBQUtxOEMsTUFDWnArQixTQUFVLENBQ1IsQ0FDRTYrQixLQUFNLE9BQ05QLFFBQVNNLElBR2JFLFdBQVksSUFDWkMsWUFBYSxPQUVmLE9BakJZLE9BQVI1dEMsRUFBUW8rQixFQUFBdkIsRUFBQXVCLEVBQUFoQyxFQUFHLEVBbUJFcDhCLEVBQVNHLE9BQU0sT0FBeEIsT0FBSmxILEVBQUltbEMsRUFBQXZCLEVBQUF1QixFQUFBaFosRUFBQSxHQUNZLFFBQWZvb0IsRUFBQXYwQyxFQUFLNDBDLFFBQVEsVUFBRSxJQUFBTCxHQUFTLFFBQVRBLEVBQWZBLEVBQWlCMXpDLGVBQU8sSUFBQTB6QyxPQUFBLEVBQXhCQSxFQUEwQkwsVUFBV3Y4QyxLQUFLdzhDLDJCQUEyQkQsRUFBU25OLEVBQU8zdUMsSUFBSSxFQUFBOHNDLEVBQUEsU0FDakcsU0E3QnVCdUUsRUFBQVMsRUFBQUssR0FBQSxPQUFBK0osRUFBQXhzQyxNQUFDLEtBQUQ0OEIsVUFBQSxLQUFBcHBDLElBQUEsZUFBQXJELE1BK0J4QixTQUFhMGQsR0FDWGhlLEtBQUtnZSxPQUFTQSxDQUNoQixJQXBGRnRRLEdBQUF3Z0MsR0FBQTdnQyxFQUFBRyxVQUFBRSxHQUFBdk4sT0FBQUMsZUFBQWlOLEVBQUEsYUFBQXFqQixVQUFBLElBQUFyakIsRUFBQSxJQUFBQSxFQUFBSyxFQWlER2l2QyxFQXJDQUwsQ0F3RUEsQ0EvRW1CLEksaXZCQ0x0QixJQUFBanZDLEVBQUE2b0IsRUFBQXhvQixFQUFBLG1CQUFBQyxPQUFBQSxPQUFBLEdBQUE2OUIsRUFBQTk5QixFQUFBKzlCLFVBQUEsYUFBQXgrQixFQUFBUyxFQUFBRSxhQUFBLHlCQUFBb1AsRUFBQXRQLEVBQUE4OUIsRUFBQXYrQixFQUFBK1AsR0FBQSxJQUFBMWIsRUFBQWtxQyxHQUFBQSxFQUFBaCtCLHFCQUFBaytCLEVBQUFGLEVBQUFFLEVBQUFDLEVBQUF4ckMsT0FBQXlyQyxPQUFBdHFDLEVBQUFrTSxXQUFBLE9BQUFxK0IsR0FBQUYsRUFBQSxtQkFBQWorQixFQUFBODlCLEVBQUF2K0IsR0FBQSxJQUFBK1AsRUFBQTFiLEVBQUFxcUMsRUFBQUcsRUFBQSxFQUFBM1YsRUFBQWxwQixHQUFBLEdBQUE4K0IsR0FBQSxFQUFBQyxFQUFBLENBQUE3VixFQUFBLEVBQUFxVixFQUFBLEVBQUFTLEVBQUE1K0IsRUFBQW1uQixFQUFBem5CLEVBQUErK0IsRUFBQS8rQixFQUFBWCxLQUFBaUIsRUFBQSxHQUFBTixFQUFBLFNBQUFtcEIsRUFBQXhvQixHQUFBLE9BQUFzUCxFQUFBa1osRUFBQTUwQixFQUFBLEVBQUFxcUMsRUFBQXQrQixFQUFBMitCLEVBQUFSLEVBQUE5OUIsRUFBQThtQixDQUFBLFlBQUF6bkIsRUFBQVcsRUFBQTg5QixHQUFBLElBQUFscUMsRUFBQW9NLEVBQUFpK0IsRUFBQUgsRUFBQXRWLEVBQUEsR0FBQTZWLEdBQUFELElBQUE3K0IsR0FBQWlwQixFQUFBQyxFQUFBMXpCLE9BQUF5ekIsSUFBQSxLQUFBanBCLEVBQUErUCxFQUFBbVosRUFBQUQsR0FBQW5wQixFQUFBaS9CLEVBQUE3VixFQUFBK1YsRUFBQWx2QixFQUFBLEdBQUF0UCxFQUFBLEdBQUFULEVBQUFpL0IsSUFBQVYsS0FBQUcsRUFBQTN1QixHQUFBMWIsRUFBQTBiLEVBQUEsT0FBQTFiLEVBQUEsTUFBQTBiLEVBQUEsR0FBQUEsRUFBQSxHQUFBM1AsR0FBQTJQLEVBQUEsSUFBQWpRLEtBQUFFLEVBQUFTLEVBQUEsR0FBQVgsRUFBQWlRLEVBQUEsS0FBQTFiLEVBQUEsRUFBQTBxQyxFQUFBQyxFQUFBVCxFQUFBUSxFQUFBUixFQUFBeHVCLEVBQUEsSUFBQWpRLEVBQUFtL0IsSUFBQWovQixFQUFBUyxFQUFBLEdBQUFzUCxFQUFBLEdBQUF3dUIsR0FBQUEsRUFBQVUsS0FBQWx2QixFQUFBLEdBQUF0UCxFQUFBc1AsRUFBQSxHQUFBd3VCLEVBQUFRLEVBQUFSLEVBQUFVLEVBQUE1cUMsRUFBQSxPQUFBMkwsR0FBQVMsRUFBQSxTQUFBOG1CLEVBQUEsTUFBQXVYLEdBQUEsRUFBQVAsQ0FBQSxpQkFBQXYrQixFQUFBa3BCLEVBQUErVixHQUFBLEdBQUFKLEVBQUEsUUFBQUssVUFBQSxvQ0FBQUosR0FBQSxJQUFBNVYsR0FBQXBwQixFQUFBb3BCLEVBQUErVixHQUFBNXFDLEVBQUE2MEIsRUFBQXdWLEVBQUFPLEdBQUFoVyxFQUFBNTBCLEVBQUEsRUFBQStMLEVBQUFzK0IsS0FBQUksR0FBQSxDQUFBL3VCLElBQUExYixFQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQTBxQyxFQUFBUixHQUFBLEdBQUF6K0IsRUFBQXpMLEVBQUFxcUMsSUFBQUssRUFBQVIsRUFBQUcsRUFBQUssRUFBQUMsRUFBQU4sR0FBQSxPQUFBRyxFQUFBLEVBQUE5dUIsRUFBQSxJQUFBMWIsSUFBQTJMLEVBQUEsUUFBQWlwQixFQUFBbFosRUFBQS9QLEdBQUEsTUFBQWlwQixFQUFBQSxFQUFBcHBCLEtBQUFrUSxFQUFBMnVCLElBQUEsTUFBQVEsVUFBQSx3Q0FBQWpXLEVBQUFobUIsS0FBQSxPQUFBZ21CLEVBQUF5VixFQUFBelYsRUFBQTUxQixNQUFBZ0IsRUFBQSxJQUFBQSxFQUFBLFlBQUFBLElBQUE0MEIsRUFBQWxaLEVBQUEsU0FBQWtaLEVBQUFwcEIsS0FBQWtRLEdBQUExYixFQUFBLElBQUFxcUMsRUFBQVEsVUFBQSxvQ0FBQWwvQixFQUFBLFlBQUEzTCxFQUFBLEdBQUEwYixFQUFBM1AsQ0FBQSxVQUFBNm9CLEdBQUE2VixFQUFBQyxFQUFBUixFQUFBLEdBQUFHLEVBQUFqK0IsRUFBQVosS0FBQTArQixFQUFBUSxNQUFBeFgsRUFBQSxZQUFBMEIsR0FBQWxaLEVBQUEzUCxFQUFBL0wsRUFBQSxFQUFBcXFDLEVBQUF6VixDQUFBLFNBQUE0VixFQUFBLFVBQUF4ckMsTUFBQTQxQixFQUFBaG1CLEtBQUE2N0IsRUFBQSxHQUFBcitCLEVBQUFULEVBQUErUCxJQUFBLEdBQUEydUIsQ0FBQSxLQUFBblgsRUFBQSxZQUFBa1gsSUFBQSxVQUFBVSxJQUFBLFVBQUFDLElBQUEsQ0FBQW5XLEVBQUEvMUIsT0FBQW1zQyxlQUFBLElBQUFockMsRUFBQSxHQUFBa3FDLEdBQUF0VixFQUFBQSxFQUFBLEdBQUFzVixRQUFBSyxHQUFBM1YsRUFBQSxHQUFBc1YsRUFBQSx5QkFBQXRWLEdBQUF5VixFQUFBVSxFQUFBNytCLFVBQUFrK0IsRUFBQWwrQixVQUFBck4sT0FBQXlyQyxPQUFBdHFDLEdBQUEsU0FBQXdxQyxFQUFBeitCLEdBQUEsT0FBQWxOLE9BQUFvc0MsZUFBQXBzQyxPQUFBb3NDLGVBQUFsL0IsRUFBQWcvQixJQUFBaC9CLEVBQUFtL0IsVUFBQUgsRUFBQVIsR0FBQXgrQixFQUFBSixFQUFBLHNCQUFBSSxFQUFBRyxVQUFBck4sT0FBQXlyQyxPQUFBRCxHQUFBdCtCLENBQUEsUUFBQSsrQixFQUFBNStCLFVBQUE2K0IsRUFBQVIsR0FBQUYsRUFBQSxjQUFBVSxHQUFBUixHQUFBUSxFQUFBLGNBQUFELEdBQUFBLEVBQUFLLFlBQUEsb0JBQUFaLEdBQUFRLEVBQUFwL0IsRUFBQSxxQkFBQTQrQixHQUFBRixHQUFBRSxHQUFBRixFQUFBMStCLEVBQUEsYUFBQTQrQixHQUFBRixFQUFBSCxFQUFBLHlCQUFBSyxHQUFBRixFQUFBLG9EQUFBZSxHQUFBLGtCQUFBQyxFQUFBM3ZCLEVBQUF0RCxFQUFBb3lCLEVBQUEsY0FBQUQsR0FBQXgrQixFQUFBSyxFQUFBODlCLEVBQUF0VixHQUFBLElBQUFsWixFQUFBN2MsT0FBQUMsZUFBQSxJQUFBNGMsRUFBQSxnQkFBQTNQLEdBQUEyUCxFQUFBLEVBQUE2dUIsR0FBQSxTQUFBeCtCLEVBQUFLLEVBQUE4OUIsRUFBQXRWLEdBQUEsR0FBQXhvQixFQUFBc1AsRUFBQUEsRUFBQTNQLEVBQUFLLEVBQUEsQ0FBQXBOLE1BQUFrckMsRUFBQXQrQixZQUFBZ3BCLEVBQUEyRCxjQUFBM0QsRUFBQXhGLFVBQUF3RixJQUFBN29CLEVBQUFLLEdBQUE4OUIsTUFBQSxLQUFBditCLEVBQUEsU0FBQVMsRUFBQTg5QixHQUFBSyxHQUFBeCtCLEVBQUFLLEVBQUEsU0FBQUwsR0FBQSxZQUFBdS9CLFFBQUFsL0IsRUFBQTg5QixFQUFBbitCLEVBQUEsSUFBQUosRUFBQSxVQUFBQSxFQUFBLFdBQUFBLEVBQUEsY0FBQTQrQixHQUFBeCtCLEVBQUFLLEVBQUE4OUIsRUFBQXRWLEVBQUEsVUFBQTJXLEdBQUFyQixFQUFBdFYsRUFBQTdvQixFQUFBSyxFQUFBVCxFQUFBdW5CLEVBQUFsekIsR0FBQSxRQUFBMGIsRUFBQXd1QixFQUFBaFgsR0FBQWx6QixHQUFBcXFDLEVBQUEzdUIsRUFBQTFjLEtBQUEsT0FBQWtyQyxHQUFBLFlBQUFuK0IsRUFBQW0rQixFQUFBLENBQUF4dUIsRUFBQTlNLEtBQUFnbUIsRUFBQXlWLEdBQUFqOEIsUUFBQUMsUUFBQWc4QixHQUFBbmtDLEtBQUFrRyxFQUFBVCxFQUFBLFVBQUE2L0IsR0FBQXRCLEdBQUEsc0JBQUF0VixFQUFBLEtBQUE3b0IsRUFBQTAvQixVQUFBLFdBQUFyOUIsUUFBQSxTQUFBaEMsRUFBQVQsR0FBQSxJQUFBdW5CLEVBQUFnWCxFQUFBcjdCLE1BQUErbEIsRUFBQTdvQixHQUFBLFNBQUEyL0IsRUFBQXhCLEdBQUFxQixHQUFBclksRUFBQTltQixFQUFBVCxFQUFBKy9CLEVBQUFDLEVBQUEsT0FBQXpCLEVBQUEsVUFBQXlCLEVBQUF6QixHQUFBcUIsR0FBQXJZLEVBQUE5bUIsRUFBQVQsRUFBQSsvQixFQUFBQyxFQUFBLFFBQUF6QixFQUFBLENBQUF3QixPQUFBLE1BZ0ZHLFNBRVlrUSxHQUFlcEwsRUFBQVMsR0FBQSxPQUFBNEssR0FBQWh0QyxNQUFDLEtBQUQ0OEIsVUFBQSxVQUFBb1EsS0FtRTdCLE9BbkU2QkEsR0FBQXJRLEdBQUFKLEtBQUFoekIsRUFBOUIsU0FBQXM0QixFQUErQm9MLEVBQXNCQyxHQUFnQixJQUFBNThDLEVBQUEydUMsRUFBQWtPLEVBQUFsdUMsRUFBQTR3QixFQUFBd1AsRUFBQStOLEVBQUF0dEMsRUFBQXV0QyxFQUFBaEosRUFBQVEsRUFBQVUsRUFBQSxPQUFBaEosS0FBQUMsRUFBQSxTQUFBMkYsR0FBQSxjQUFBQSxFQUFBOUcsR0FBQSxPQUc1QixHQUg0QjhHLEVBQUFuYyxFQUFBLEVBRTNEMTFCLEVBQU00OEMsR0FBV0QsRUFBSTM4QyxJQUNyQjJ1QyxFQUFRZ08sRUFBSWhPLE9BQVMsV0FFdEIzdUMsSUFBT0EsRUFBSWc5QyxXQUFXLGVBQWdCaDlDLEVBQUlnOUMsV0FBVyx1QkFBc0IsQ0FBQW5MLEVBQUE5RyxFQUFBLGVBQUE4RyxFQUFBOWQsRUFBQSxFQUN2RSxDQUFFdWMsU0FBUyxFQUFPM29DLE1BQU8sbUNBQWtDLE9BR2hELEdBQWhCazFDLEVBQWMsSUFDZEYsRUFBSS8vQixHQUFJLENBQUZpMUIsRUFBQTlHLEVBQUEsZUFBQThHLEVBQUFuYyxFQUFBLEVBQUFtYyxFQUFBOUcsRUFBQSxFQUVpQjZCLE9BQU9xUSxLQUFLQyxZQUFZUCxFQUFJLy9CLEdBQUksQ0FBRXVnQyxPQUFRLG1CQUFtQixPQUE5RXh1QyxFQUFRa2pDLEVBQUFyRyxFQUNkcVIsR0FBY2x1QyxhQUFRLEVBQVJBLEVBQVVtdEMsVUFBVyxHQUFHakssRUFBQTlHLEVBQUEsZUFBQThHLEVBQUFuYyxFQUFBLEVBQUFxZSxFQUFBbEMsRUFBQXJHLEVBRXRDMzJCLFFBQVFDLElBQUksa0NBQWlDaS9CLEdBQVMsT0FJdEIsT0FBOUJ4VSxFQUFTLElBQUl4NUIsSUFBSS9GLEdBQUs0cEMsU0FBUWlJLEVBQUE5RyxFQUFBLEVBQ1oyUSxHQUFVMEIsZ0JBQWdCUCxFQUFhbE8sRUFBTzN1QyxHQUFJLE9BYUcsT0FidkUrdUMsRUFBUzhDLEVBQUFyRyxFQUVUc1IsRUFBVSxDQUNkOThDLElBQUFBLEVBQ0EydUMsTUFBQUEsRUFDQUMsUUFBUytOLEVBQUlVLFlBQWMsNkNBQUp2N0MsT0FBaUR5OUIsRUFBTSxVQUM5RXNQLFNBQVUsR0FDVkUsVUFBQUEsRUFDQUUsU0FBVSxVQUNWMVAsT0FBUUEsRUFDUjZQLFdBQVcsR0FHYnY2QixRQUFRQyxJQUFJLHVDQUF3Q3hOLEtBQUtDLFVBQVV1MUMsSUFBVWpMLEVBQUE5RyxFQUFBLEVBQ3hEcmEsR0FBUTRzQixRQUFRUixHQUFRLE9BQ2MsR0FEckR0dEMsRUFBTXFpQyxFQUFBckcsRUFDWjMyQixRQUFRQyxJQUFJLHNDQUF1Q3RGLEdBRTlDQSxFQUFPOGdDLFFBQVMsQ0FBRnVCLEVBQUE5RyxFQUFBLGNBQ1gsSUFBSWhpQyxNQUFNeUcsRUFBTzdILE9BQVMsb0NBQW1DLE9BVXJFLE9BUEFpbEMsT0FBTzJRLGNBQWNwUyxPQUFPLENBQzFCcGdDLEtBQU0sUUFDTnl5QyxRQUFTLG1CQUNUN08sTUFBTyxnQkFDUGxtQyxRQUFTLElBQUYzRyxPQUFNNnNDLEVBQUssdUJBR3BCa0QsRUFBQW5jLEVBQUEsRUFBQW1jLEVBQUE5RyxFQUFBLEdBRVE2QixPQUFPNlEsUUFBUVAsWUFBWSxDQUFFQyxPQUFRLG1CQUFtQixRQUFBdEwsRUFBQTlHLEVBQUEsaUJBQUE4RyxFQUFBbmMsRUFBQSxHQUFBNmUsRUFBQTFDLEVBQUFyRyxFQUU5RDMyQixRQUFRQyxJQUFJLDZDQUE0Q3kvQixHQUFTLGVBQUExQyxFQUFBOWQsRUFBQSxFQUc1RCxDQUFFdWMsU0FBUyxJQUFNLFFBU3JCLE9BVHFCdUIsRUFBQW5jLEVBQUEsR0FBQXVmLEVBQUFwRCxFQUFBckcsRUFFeEIzMkIsUUFBUWxOLE1BQU0sdUJBQXNCc3RDLEdBQzlCOEgsRUFBZTlILEVBQWlCeHNDLFNBQVcsNkJBQ2pEbWtDLE9BQU8yUSxjQUFjcFMsT0FBTyxDQUMxQnBnQyxLQUFNLFFBQ055eUMsUUFBUyxtQkFDVDdPLE1BQU8sYUFDUGxtQyxRQUFTLHdCQUFGM0csT0FBMEJpN0MsS0FDaENsTCxFQUFBOWQsRUFBQSxFQUNJLENBQUV1YyxTQUFTLEVBQU8zb0MsTUFBT28xQyxJQUFjLEVBQUF4TCxFQUFBLGdDQUVqRDdoQyxNQUFBLEtBQUE0OEIsVUFBQSxVQUVjb1IsR0FBY3ZMLEdBQUEsT0FBQXdMLEdBQUFqdUMsTUFBQyxLQUFENDhCLFVBQUEsVUFBQXFSLEtBUTVCLE9BUjRCQSxHQUFBdFIsR0FBQUosS0FBQWh6QixFQUE3QixTQUFBKzRCLEVBQThCNEwsR0FBYSxJQUFBanZDLEVBQUFpbkMsRUFBQSxPQUFBM0osS0FBQUMsRUFBQSxTQUFBZ0csR0FBQSxjQUFBQSxFQUFBbkgsR0FBQSxjQUFBbUgsRUFBQXhjLEVBQUEsRUFBQXdjLEVBQUFuSCxFQUFBLEVBRWhCNkIsT0FBT3FRLEtBQUtDLFlBQVlVLEVBQU8sQ0FBRVQsT0FBUSxtQkFBbUIsT0FBckUsT0FBUnh1QyxFQUFRdWpDLEVBQUExRyxFQUFBMEcsRUFBQW5lLEVBQUEsRUFDUHBsQixHQUFRLE9BRXFDLE9BRnJDdWpDLEVBQUF4YyxFQUFBLEVBQUFrZ0IsRUFBQTFELEVBQUExRyxFQUVmMzJCLFFBQVFsTixNQUFNLDhCQUE2Qml1QyxHQUFTMUQsRUFBQW5lLEVBQUEsRUFDN0MsQ0FBRStuQixRQUFTLEtBQUksRUFBQTlKLEVBQUEsa0JBRXpCdGlDLE1BQUEsS0FBQTQ4QixVQUFBLFVBRWN1UixHQUFhekwsRUFBQUssRUFBQWdCLEVBQUFpQixHQUFBLE9BQUFvSixHQUFBcHVDLE1BQUMsS0FBRDQ4QixVQUFBLENBaUc1QixTQUFBd1IsS0FGQyxPQUVEQSxHQUFBelIsR0FBQUosS0FBQWh6QixFQWpHQSxTQUFBcTVCLEVBQTZCcUssRUFBc0JvQixFQUFzQi8wQyxFQUFrQmcxQyxHQUFjLElBQUFoK0MsRUFBQTJ1QyxFQUFBcFAsRUFBQTBlLEVBQUFDLEVBQUExTixFQUFBMk4sRUFBQUMsRUFBQXRCLEVBQUF0dEMsRUFBQXV0QyxFQUFBekcsRUFBQWlDLEVBQUEsT0FBQXRNLEtBQUFDLEVBQUEsU0FBQXNHLEdBQUEsY0FBQUEsRUFBQXpILEdBQUEsT0FJaEUsR0FIdkNsMkIsUUFBUUMsSUFBSSx5Q0FBMEMsQ0FBRWlwQyxhQUFBQSxFQUFjLzBDLFFBQUFBLEVBQVNnMUMsU0FBQUEsSUFBWXhMLEVBQUE5YyxFQUFBLEVBRW5GMTFCLEVBQU0yOEMsRUFBSTM4QyxJQUNWMnVDLEVBQVFnTyxFQUFJaE8sT0FBUyxXQUV0QjN1QyxJQUFPQSxFQUFJZzlDLFdBQVcsZUFBZ0JoOUMsRUFBSWc5QyxXQUFXLHVCQUFzQixDQUFBeEssRUFBQXpILEVBQUEsZUFBQXlILEVBQUF6ZSxFQUFBLEVBQ3ZFLENBQUV1YyxTQUFTLEVBQU8zb0MsTUFBTyxpREFBZ0QsT0FLbEYsT0FGTTQzQixFQUFTLElBQUl4NUIsSUFBSS9GLEdBQUs0cEMsU0FFNUI0SSxFQUFBekgsRUFBQSxFQUMyQnJhLEdBQVEydEIsYUFBYXIrQyxHQUFJLE9BWXFCLEdBWm5FaStDLEVBQVl6TCxFQUFBaEgsRUFDbEIzMkIsUUFBUUMsSUFBSSxxQ0FBc0NtcEMsR0FFNUNDLEVBQXVCLENBQzNCdGhDLEdBQUksYUFBRjlhLE9BQWU0cUIsS0FBS21JLE1BQUssS0FBQS95QixPQUFJdXVCLEtBQUtDLFNBQVNqcEIsU0FBUyxJQUFJb3FCLE9BQU8sRUFBRyxJQUNwRXNzQixhQUFBQSxFQUNBLzBDLFFBQVNBLEdBQVcrMEMsRUFDcEJDLFNBQUFBLEVBQ0F6TyxVQUFXLElBQUk3aUIsS0FDZitpQixVQUFXLElBQUkvaUIsTUFHakI3WCxRQUFRQyxJQUFJLGlDQUFrQ3hOLEtBQUtDLFVBQVUyMkMsS0FJekRELEVBQWMsQ0FBRnpMLEVBQUF6SCxFQUFBLFFBRzRGLE9BRHBHb1QsRUFBb0IsR0FBSHI4QyxPQUFBdzhDLEdBQVFMLEVBQWF2UCxZQUFjLElBQUssQ0FBQXdQLElBQy9EcnBDLFFBQVFDLElBQUksbUVBQW9FcXBDLEVBQWtCbjhDLFFBQVF3d0MsRUFBQXpILEVBQUEsRUFDL0VyYSxHQUFRNnRCLFdBQVdOLEVBQWFyaEMsR0FBSSxDQUFFOHhCLFdBQVl5UCxJQUFvQixPQUEzRkMsRUFBWTVMLEVBQUFoSCxFQUNsQjMyQixRQUFRQyxJQUFJLGlDQUFrQ3NwQyxHQUM5QzVOLEVBQVN5TixFQUFhcmhDLEdBQUc0MUIsRUFBQXpILEVBQUEsZUFjbUQsT0FYNUVsMkIsUUFBUUMsSUFBSSxnREFDTmdvQyxFQUFVLENBQ2Q5OEMsSUFBQUEsRUFDQTJ1QyxNQUFBQSxFQUNBQyxRQUFTK04sRUFBSVUsWUFBYyw2Q0FBSnY3QyxPQUFpRHk5QixFQUFNLFVBQzlFc1AsU0FBVSxHQUNWSSxTQUFVLFVBQ1YxUCxPQUFRQSxFQUNSNlAsV0FBVyxFQUNYVixXQUFZLENBQUN3UCxJQUVmcnBDLFFBQVFDLElBQUksc0NBQXVDeE4sS0FBS0MsVUFBVXUxQyxJQUFVdEssRUFBQXpILEVBQUEsRUFDdkRyYSxHQUFRNHNCLFFBQVFSLEdBQVEsT0FDTSxHQUQ3Q3R0QyxFQUFNZ2pDLEVBQUFoSCxFQUNaMzJCLFFBQVFDLElBQUksOEJBQStCdEYsR0FDdENBLEVBQU84Z0MsUUFBUyxDQUFGa0MsRUFBQXpILEVBQUEsY0FDWCxJQUFJaGlDLE1BQU15RyxFQUFPN0gsT0FBUyxvQ0FBbUMsT0FFckU2b0MsRUFBU2hoQyxFQUFPZ2hDLE9BQVEsT0FhMUIsR0FWQTM3QixRQUFRQyxJQUFJLG9EQUFxRDA3QixHQUVqRTVELE9BQU8yUSxjQUFjcFMsT0FBTyxDQUMxQnBnQyxLQUFNLFFBQ055eUMsUUFBUyxtQkFDVDdPLE1BQU8sa0JBQ1BsbUMsUUFBUyx5QkFBRjNHLE9BQTJCNnNDLEVBQUssT0FJckNnTyxFQUFJLy9CLEdBQ04sSUFDRWd3QixPQUFPcVEsS0FBS0MsWUFBWVAsRUFBSS8vQixHQUFJLENBQUV1Z0MsT0FBUSw2QkFDNUMsQ0FBRSxNQUFPeDFDLEdBQ1BrTixRQUFRQyxJQUFJLGlEQUFrRG5OLEVBQ2hFLENBR0YsT0FBQTZxQyxFQUFBOWMsRUFBQSxFQUFBOGMsRUFBQXpILEVBQUEsR0FFUTZCLE9BQU82USxRQUFRUCxZQUFZLENBQUVDLE9BQVEsbUJBQW1CLFFBQUEzSyxFQUFBekgsRUFBQSxpQkFBQXlILEVBQUE5YyxFQUFBLEdBQUE0Z0IsRUFBQTlELEVBQUFoSCxFQUU5RDMyQixRQUFRQyxJQUFJLDZDQUE0Q3doQyxHQUFTLGVBQUE5RCxFQUFBemUsRUFBQSxFQUc1RCxDQUFFdWMsU0FBUyxFQUFNRSxPQUFBQSxJQUFRLFFBUzdCLE9BVDZCZ0MsRUFBQTljLEVBQUEsR0FBQTZpQixFQUFBL0YsRUFBQWhILEVBRWhDMzJCLFFBQVFsTixNQUFNLDRCQUEyQjR3QyxHQUNuQ3dFLEVBQWV4RSxFQUFpQjl2QyxTQUFXLDZCQUNqRG1rQyxPQUFPMlEsY0FBY3BTLE9BQU8sQ0FDMUJwZ0MsS0FBTSxRQUNOeXlDLFFBQVMsbUJBQ1Q3TyxNQUFPLGFBQ1BsbUMsUUFBUyw2QkFBRjNHLE9BQStCaTdDLEtBQ3JDdkssRUFBQXplLEVBQUEsRUFDSSxDQUFFdWMsU0FBUyxFQUFPM29DLE1BQU9vMUMsSUFBYyxFQUFBekssRUFBQSwwQkFFakQ1aUMsTUFBQSxLQUFBNDhCLFVBQUEsQ0E1UERNLE9BQU82USxRQUFRZSxZQUFZQyxZQUFZLFdBRXJDN1IsT0FBTzhSLGFBQWF2VCxPQUFPLENBQ3pCdnVCLEdBQUksYUFDSit4QixNQUFPLGVBQ1BnUSxTQUFVLENBQUMsT0FBUSxVQUlyQi9SLE9BQU84UixhQUFhdlQsT0FBTyxDQUN6QnZ1QixHQUFJLGdCQUNKK3hCLE1BQU8seUJBQ1BnUSxTQUFVLENBQUMsZUFHYjlwQyxRQUFRQyxJQUFJLDJCQUNkLEdBR0E4M0IsT0FBTzhSLGFBQWFFLFVBQVVILFlBQVcsZUFBQWxnQyxFQUFBOHRCLEdBQUFKLEtBQUFoekIsRUFBQyxTQUFBeXpCLEVBQU9qakIsRUFBTWt6QixHQUFHLE9BQUExUSxLQUFBQyxFQUFBLFNBQUFTLEdBQUEsY0FBQUEsRUFBQTVCLEdBQUEsT0FDNEMsR0FBcEdsMkIsUUFBUUMsSUFBSSxvQ0FBcUMyVSxFQUFLbzFCLFdBQVksYUFBY3AxQixFQUFLcTFCLGVBQzdELGVBQXBCcjFCLEVBQUtvMUIsYUFBK0JsQyxFQUFHLENBQUFoUSxFQUFBNUIsRUFBQSxlQUFBNEIsRUFBQTVCLEVBQUEsRUFDbkMwUixHQUFnQkUsRUFBS2x6QixFQUFLbXpCLFNBQVEsT0FBQWpRLEVBQUE1QixFQUFBLGtCQUNYLGtCQUFwQnRoQixFQUFLbzFCLGFBQWtDbEMsSUFBT2x6QixFQUFLcTFCLGNBQWEsQ0FBQW5TLEVBQUE1QixFQUFBLFFBRXpFLE9BREFsMkIsUUFBUUMsSUFBSSx1REFDWjYzQixFQUFBNUIsRUFBQSxFQUNNOFMsR0FBY2xCLEVBQUtsekIsRUFBS3ExQixjQUFlcjFCLEVBQUtxMUIsbUJBQWV0OEMsR0FBVSxjQUFBbXFDLEVBQUE1WSxFQUFBLEtBQUEyWSxFQUFBLElBRTlFLGdCQUFBK0QsRUFBQU0sR0FBQSxPQUFBeHlCLEVBQUE3TyxNQUFBLEtBQUE0OEIsVUFBQSxFQVR3QyxJQVl6Q00sT0FBT3VRLE9BQU95QixVQUFVSCxZQUFXLGVBQUFNLEVBQUExUyxHQUFBSixLQUFBaHpCLEVBQUMsU0FBQTZ6QixFQUFPNlAsR0FBRyxPQUFBMVEsS0FBQUMsRUFBQSxTQUFBYSxHQUFBLGNBQUFBLEVBQUFoQyxHQUFBLE9BRzVDbDJCLFFBQVFDLElBQUksZ0RBQWdELGNBQUFpNEIsRUFBQWhaLEVBQUEsS0FBQStZLEVBQUEsSUFDN0QsZ0JBQUFrRSxHQUFBLE9BQUErTixFQUFBcnZDLE1BQUEsS0FBQTQ4QixVQUFBLEVBSmtDLElBT25DTSxPQUFPNlEsUUFBUXVCLFVBQVVQLFlBQVksU0FBQ3psQixFQUFTaW1CLEVBQVFDLEdBcUNyRCxPQXBDQXJxQyxRQUFRQyxJQUFJLGdDQUFpQ2trQixHQUU3Q3FULEdBQUFKLEtBQUFoekIsRUFBQyxTQUFBZzBCLElBQUEsSUFBQWdRLEVBQUF6dEMsRUFBQTJ2QyxFQUFBQyxFQUFBendDLEVBQUFva0MsRUFBQSxPQUFBOUcsS0FBQUMsRUFBQSxTQUFBZ0IsR0FBQSxjQUFBQSxFQUFBbkMsR0FBQSxVQUFBbUMsRUFBQXhYLEVBQUEsRUFFMEIsb0JBQW5Cc0QsRUFBUW1rQixPQUE0QixDQUFBalEsRUFBQW5DLEVBQUEsZUFBQW1DLEVBQUFuQyxFQUFBLEVBQ25CNkIsT0FBT3FRLEtBQUtweUMsTUFBTSxDQUFFdzBDLFFBQVEsRUFBTUMsZUFBZSxJQUFPLE9BQWpFLEtBQUpyQyxFQUFJL1AsRUFBQTFCLEdBQ0QsR0FBSSxDQUFGMEIsRUFBQW5DLEVBQUEsZUFBQW1DLEVBQUFuQyxFQUFBLEVBQ1kwUixHQUFnQlEsRUFBSyxJQUFHLE9BQXZDenRDLEVBQU0wOUIsRUFBQTFCLEVBQ1owVCxFQUFhMXZDLEdBQVEwOUIsRUFBQW5DLEVBQUEsZUFFckJtVSxFQUFhLENBQUU1TyxTQUFTLEVBQU8zb0MsTUFBTyx5QkFBMEIsT0FBQXVsQyxFQUFBbkMsRUFBQSxtQkFFdEMsa0JBQW5CL1IsRUFBUW1rQixPQUEwQixDQUFBalEsRUFBQW5DLEVBQUEsZ0JBQUFtQyxFQUFBbkMsRUFBQSxFQUN4QjZCLE9BQU9xUSxLQUFLcHlDLE1BQU0sQ0FBRXcwQyxRQUFRLEVBQU1DLGVBQWUsSUFBTyxPQUFqRSxLQUFKckMsRUFBSS9QLEVBQUExQixHQUNELEdBQUksQ0FBRjBCLEVBQUFuQyxFQUFBLGVBQUFtQyxFQUFBbkMsRUFBQSxFQUNZOFMsR0FBY1osRUFBSyxHQUFJamtCLEVBQVEra0IsYUFBYy9rQixFQUFRaHdCLFFBQVNnd0IsRUFBUWdsQixVQUFTLE9BQTlGeHVDLEVBQU0wOUIsRUFBQTFCLEVBQ1owVCxFQUFhMXZDLEdBQVEwOUIsRUFBQW5DLEVBQUEsZUFFckJtVSxFQUFhLENBQUU1TyxTQUFTLEVBQU8zb0MsTUFBTyx5QkFBMEIsT0FBQXVsQyxFQUFBbkMsRUFBQSxvQkFFdEMsbUJBQW5CL1IsRUFBUW1rQixPQUEyQixDQUFBalEsRUFBQW5DLEVBQUEsYUFDeENrVSxFQUFPdEMsTUFBT3NDLEVBQU90QyxJQUFJLy9CLEdBQUUsQ0FBQXN3QixFQUFBbkMsRUFBQSxnQkFBQW1DLEVBQUFuQyxFQUFBLEdBQ04yUyxHQUFldUIsRUFBT3RDLElBQUkvL0IsSUFBRyxRQUE5Q2pPLEVBQVF1K0IsRUFBQTFCLEVBQ2QwVCxFQUFhdndDLEdBQVV1K0IsRUFBQW5DLEVBQUEsaUJBRXZCbVUsRUFBYSxDQUFFcEQsUUFBUyxLQUFNLFFBQUE1TyxFQUFBbkMsRUFBQSxpQkFHaENtVSxFQUFhLENBQUU1TyxTQUFTLEVBQU8zb0MsTUFBTyxtQkFBb0IsUUFBQXVsQyxFQUFBbkMsRUFBQSxpQkFBQW1DLEVBQUF4WCxFQUFBLEdBQUFxZCxFQUFBN0YsRUFBQTFCLEVBRzVEMzJCLFFBQVFsTixNQUFNLDJCQUEwQm9yQyxHQUN4Q21NLEVBQWEsQ0FBRTVPLFNBQVMsRUFBTzNvQyxNQUFPb3JDLEVBQWlCdHFDLFVBQVcsZUFBQXlrQyxFQUFBblosRUFBQSxLQUFBa1osRUFBQSxpQkE5QnRFWixJQWtDTyxDQUNULEdBbUxBTyxPQUFPMlMsU0FBU0MsVUFBVWYsWUFBVyxlQUFBZ0IsRUFBQXBULEdBQUFKLEtBQUFoekIsRUFBQyxTQUFBaTRCLEVBQU93TyxHQUFPLElBQUF6QyxFQUFBMEMsRUFBQSxPQUFBMVQsS0FBQUMsRUFBQSxTQUFBa0YsR0FBQSxjQUFBQSxFQUFBckcsR0FBQSxVQUNsQyxjQUFaMlUsRUFBdUIsQ0FBQXRPLEVBQUFyRyxFQUFBLGVBQUFxRyxFQUFBckcsRUFBQSxFQUNONkIsT0FBT3FRLEtBQUtweUMsTUFBTSxDQUFFdzBDLFFBQVEsRUFBTUMsZUFBZSxJQUFPLE9BQWpFLEtBQUpyQyxFQUFJN0wsRUFBQTVGLEdBQ0QsR0FBSSxDQUFGNEYsRUFBQXJHLEVBQUEsZUFBQXFHLEVBQUFyRyxFQUFBLEVBQ0gwUixHQUFnQlEsRUFBSyxJQUFHLE9BQUE3TCxFQUFBckcsRUFBQSxrQkFFWCx5QkFBWjJVLEVBQWtDLENBQUF0TyxFQUFBckcsRUFBQSxlQUFBcUcsRUFBQXJHLEVBQUEsRUFFeEI2QixPQUFPcVEsS0FBS3B5QyxNQUFNLENBQUV3MEMsUUFBUSxFQUFNQyxlQUFlLElBQU8sT0FBakUsS0FBSnJDLEVBQUk3TCxFQUFBNUYsR0FDRCxHQUFJLENBQUY0RixFQUFBckcsRUFBQSxlQUFBcUcsRUFBQXJHLEVBQUEsRUFDSDZCLE9BQU9nVCxVQUFVNytCLEtBQUssQ0FBRTY4QixNQUFPWCxFQUFLLEdBQUdyZ0MsS0FBSyxjQUFBdzBCLEVBQUFyZCxFQUFBLEtBQUFtZCxFQUFBLElBSXZELGdCQUFBa0UsR0FBQSxPQUFBcUssRUFBQS92QyxNQUFBLEtBQUE0OEIsVUFBQSxFQWRvQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9mdW5jdGlvbnMtanMvZGlzdC9tb2R1bGUvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMvZGlzdC9janMvUG9zdGdyZXN0UXVlcnlCdWlsZGVyLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvY2pzL1Bvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMvZGlzdC9janMvUG9zdGdyZXN0Q2xpZW50LmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvY2pzL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMvZGlzdC9janMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvY2pzL1Bvc3RncmVzdEJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMvZGlzdC9janMvUG9zdGdyZXN0RXJyb3IuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMvZGlzdC9janMvUG9zdGdyZXN0RmlsdGVyQnVpbGRlci5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL25vZGUtZmV0Y2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2Z1bmN0aW9ucy1qcy9kaXN0L21vZHVsZS9GdW5jdGlvbnNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9mdW5jdGlvbnMtanMvZGlzdC9tb2R1bGUvaGVscGVyLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvZXNtL3dyYXBwZXIubWpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9pc293cy9fZXNtL25hdGl2ZS5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvaXNvd3MvX2VzbS91dGlscy5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2xpYi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvdHJhbnNmb3JtZXJzLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcmVhbHRpbWUtanMvZGlzdC9tb2R1bGUvbGliL3NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvdGltZXIuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvcHVzaC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL1JlYWx0aW1lUHJlc2VuY2UuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9SZWFsdGltZUNoYW5uZWwuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9SZWFsdGltZUNsaWVudC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9zdG9yYWdlLWpzL2Rpc3QvbW9kdWxlL2xpYi9mZXRjaC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvcGFja2FnZXMvU3RvcmFnZUZpbGVBcGkuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9zdG9yYWdlLWpzL2Rpc3QvbW9kdWxlL2xpYi92ZXJzaW9uLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9saWIvY29uc3RhbnRzLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9wYWNrYWdlcy9TdG9yYWdlQnVja2V0QXBpLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9TdG9yYWdlQ2xpZW50LmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvbGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2xpYi9mZXRjaC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9iYXNlNjR1cmwuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9oZWxwZXJzLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvYXV0aC1qcy9kaXN0L21vZHVsZS9saWIvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi90eXBlcy5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvR29UcnVlQWRtaW5BcGkuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9sb2NhbC1zdG9yYWdlLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvYXV0aC1qcy9kaXN0L21vZHVsZS9saWIvbG9ja3MuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9wb2x5ZmlsbHMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL0dvVHJ1ZUNsaWVudC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvQXV0aEFkbWluQXBpLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvYXV0aC1qcy9kaXN0L21vZHVsZS9BdXRoQ2xpZW50LmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvbGliL1N1cGFiYXNlQXV0aENsaWVudC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL1N1cGFiYXNlQ2xpZW50LmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvbGliL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vc3JjL3V0aWxzL3N1cGFiYXNlLnRzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vc3JjL3V0aWxzL3N0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vc3JjL3V0aWxzL2FpLnRzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL3NyYy9iYWNrZ3JvdW5kL2JhY2tncm91bmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEZ1bmN0aW9uc0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG5hbWUgPSAnRnVuY3Rpb25zRXJyb3InLCBjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbnNGZXRjaEVycm9yIGV4dGVuZHMgRnVuY3Rpb25zRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIoJ0ZhaWxlZCB0byBzZW5kIGEgcmVxdWVzdCB0byB0aGUgRWRnZSBGdW5jdGlvbicsICdGdW5jdGlvbnNGZXRjaEVycm9yJywgY29udGV4dCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uc1JlbGF5RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbnNFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgICAgICBzdXBlcignUmVsYXkgRXJyb3IgaW52b2tpbmcgdGhlIEVkZ2UgRnVuY3Rpb24nLCAnRnVuY3Rpb25zUmVsYXlFcnJvcicsIGNvbnRleHQpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbnNIdHRwRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbnNFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgICAgICBzdXBlcignRWRnZSBGdW5jdGlvbiByZXR1cm5lZCBhIG5vbi0yeHggc3RhdHVzIGNvZGUnLCAnRnVuY3Rpb25zSHR0cEVycm9yJywgY29udGV4dCk7XG4gICAgfVxufVxuLy8gRGVmaW5lIHRoZSBlbnVtIGZvciB0aGUgJ3JlZ2lvbicgcHJvcGVydHlcbmV4cG9ydCB2YXIgRnVuY3Rpb25SZWdpb247XG4oZnVuY3Rpb24gKEZ1bmN0aW9uUmVnaW9uKSB7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJBbnlcIl0gPSBcImFueVwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiQXBOb3J0aGVhc3QxXCJdID0gXCJhcC1ub3J0aGVhc3QtMVwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiQXBOb3J0aGVhc3QyXCJdID0gXCJhcC1ub3J0aGVhc3QtMlwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiQXBTb3V0aDFcIl0gPSBcImFwLXNvdXRoLTFcIjtcbiAgICBGdW5jdGlvblJlZ2lvbltcIkFwU291dGhlYXN0MVwiXSA9IFwiYXAtc291dGhlYXN0LTFcIjtcbiAgICBGdW5jdGlvblJlZ2lvbltcIkFwU291dGhlYXN0MlwiXSA9IFwiYXAtc291dGhlYXN0LTJcIjtcbiAgICBGdW5jdGlvblJlZ2lvbltcIkNhQ2VudHJhbDFcIl0gPSBcImNhLWNlbnRyYWwtMVwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiRXVDZW50cmFsMVwiXSA9IFwiZXUtY2VudHJhbC0xXCI7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJFdVdlc3QxXCJdID0gXCJldS13ZXN0LTFcIjtcbiAgICBGdW5jdGlvblJlZ2lvbltcIkV1V2VzdDJcIl0gPSBcImV1LXdlc3QtMlwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiRXVXZXN0M1wiXSA9IFwiZXUtd2VzdC0zXCI7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJTYUVhc3QxXCJdID0gXCJzYS1lYXN0LTFcIjtcbiAgICBGdW5jdGlvblJlZ2lvbltcIlVzRWFzdDFcIl0gPSBcInVzLWVhc3QtMVwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiVXNXZXN0MVwiXSA9IFwidXMtd2VzdC0xXCI7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJVc1dlc3QyXCJdID0gXCJ1cy13ZXN0LTJcIjtcbn0pKEZ1bmN0aW9uUmVnaW9uIHx8IChGdW5jdGlvblJlZ2lvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IFBvc3RncmVzdEZpbHRlckJ1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Qb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXCIpKTtcbmNsYXNzIFBvc3RncmVzdFF1ZXJ5QnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IodXJsLCB7IGhlYWRlcnMgPSB7fSwgc2NoZW1hLCBmZXRjaCwgfSkge1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIHRoaXMuZmV0Y2ggPSBmZXRjaDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhIFNFTEVDVCBxdWVyeSBvbiB0aGUgdGFibGUgb3Igdmlldy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW5zIC0gVGhlIGNvbHVtbnMgdG8gcmV0cmlldmUsIHNlcGFyYXRlZCBieSBjb21tYXMuIENvbHVtbnMgY2FuIGJlIHJlbmFtZWQgd2hlbiByZXR1cm5lZCB3aXRoIGBjdXN0b21OYW1lOmNvbHVtbk5hbWVgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmhlYWQgLSBXaGVuIHNldCB0byBgdHJ1ZWAsIGBkYXRhYCB3aWxsIG5vdCBiZSByZXR1cm5lZC5cbiAgICAgKiBVc2VmdWwgaWYgeW91IG9ubHkgbmVlZCB0aGUgY291bnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jb3VudCAtIENvdW50IGFsZ29yaXRobSB0byB1c2UgdG8gY291bnQgcm93cyBpbiB0aGUgdGFibGUgb3Igdmlldy5cbiAgICAgKlxuICAgICAqIGBcImV4YWN0XCJgOiBFeGFjdCBidXQgc2xvdyBjb3VudCBhbGdvcml0aG0uIFBlcmZvcm1zIGEgYENPVU5UKCopYCB1bmRlciB0aGVcbiAgICAgKiBob29kLlxuICAgICAqXG4gICAgICogYFwicGxhbm5lZFwiYDogQXBwcm94aW1hdGVkIGJ1dCBmYXN0IGNvdW50IGFsZ29yaXRobS4gVXNlcyB0aGUgUG9zdGdyZXNcbiAgICAgKiBzdGF0aXN0aWNzIHVuZGVyIHRoZSBob29kLlxuICAgICAqXG4gICAgICogYFwiZXN0aW1hdGVkXCJgOiBVc2VzIGV4YWN0IGNvdW50IGZvciBsb3cgbnVtYmVycyBhbmQgcGxhbm5lZCBjb3VudCBmb3IgaGlnaFxuICAgICAqIG51bWJlcnMuXG4gICAgICovXG4gICAgc2VsZWN0KGNvbHVtbnMsIHsgaGVhZCA9IGZhbHNlLCBjb3VudCwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGhlYWQgPyAnSEVBRCcgOiAnR0VUJztcbiAgICAgICAgLy8gUmVtb3ZlIHdoaXRlc3BhY2VzIGV4Y2VwdCB3aGVuIHF1b3RlZFxuICAgICAgICBsZXQgcXVvdGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNsZWFuZWRDb2x1bW5zID0gKGNvbHVtbnMgIT09IG51bGwgJiYgY29sdW1ucyAhPT0gdm9pZCAwID8gY29sdW1ucyA6ICcqJylcbiAgICAgICAgICAgIC5zcGxpdCgnJylcbiAgICAgICAgICAgIC5tYXAoKGMpID0+IHtcbiAgICAgICAgICAgIGlmICgvXFxzLy50ZXN0KGMpICYmICFxdW90ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1wiJykge1xuICAgICAgICAgICAgICAgIHF1b3RlZCA9ICFxdW90ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcnKTtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLnNldCgnc2VsZWN0JywgY2xlYW5lZENvbHVtbnMpO1xuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1snUHJlZmVyJ10gPSBgY291bnQ9JHtjb3VudH1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgdXJsOiB0aGlzLnVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWEsXG4gICAgICAgICAgICBmZXRjaDogdGhpcy5mZXRjaCxcbiAgICAgICAgICAgIGFsbG93RW1wdHk6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhbiBJTlNFUlQgaW50byB0aGUgdGFibGUgb3Igdmlldy5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQsIGluc2VydGVkIHJvd3MgYXJlIG5vdCByZXR1cm5lZC4gVG8gcmV0dXJuIGl0LCBjaGFpbiB0aGUgY2FsbFxuICAgICAqIHdpdGggYC5zZWxlY3QoKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWVzIC0gVGhlIHZhbHVlcyB0byBpbnNlcnQuIFBhc3MgYW4gb2JqZWN0IHRvIGluc2VydCBhIHNpbmdsZSByb3dcbiAgICAgKiBvciBhbiBhcnJheSB0byBpbnNlcnQgbXVsdGlwbGUgcm93cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuY291bnQgLSBDb3VudCBhbGdvcml0aG0gdG8gdXNlIHRvIGNvdW50IGluc2VydGVkIHJvd3MuXG4gICAgICpcbiAgICAgKiBgXCJleGFjdFwiYDogRXhhY3QgYnV0IHNsb3cgY291bnQgYWxnb3JpdGhtLiBQZXJmb3JtcyBhIGBDT1VOVCgqKWAgdW5kZXIgdGhlXG4gICAgICogaG9vZC5cbiAgICAgKlxuICAgICAqIGBcInBsYW5uZWRcImA6IEFwcHJveGltYXRlZCBidXQgZmFzdCBjb3VudCBhbGdvcml0aG0uIFVzZXMgdGhlIFBvc3RncmVzXG4gICAgICogc3RhdGlzdGljcyB1bmRlciB0aGUgaG9vZC5cbiAgICAgKlxuICAgICAqIGBcImVzdGltYXRlZFwiYDogVXNlcyBleGFjdCBjb3VudCBmb3IgbG93IG51bWJlcnMgYW5kIHBsYW5uZWQgY291bnQgZm9yIGhpZ2hcbiAgICAgKiBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZGVmYXVsdFRvTnVsbCAtIE1ha2UgbWlzc2luZyBmaWVsZHMgZGVmYXVsdCB0byBgbnVsbGAuXG4gICAgICogT3RoZXJ3aXNlLCB1c2UgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBjb2x1bW4uIE9ubHkgYXBwbGllcyBmb3IgYnVsa1xuICAgICAqIGluc2VydHMuXG4gICAgICovXG4gICAgaW5zZXJ0KHZhbHVlcywgeyBjb3VudCwgZGVmYXVsdFRvTnVsbCA9IHRydWUsIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgIGNvbnN0IHByZWZlcnNIZWFkZXJzID0gW107XG4gICAgICAgIGlmICh0aGlzLmhlYWRlcnNbJ1ByZWZlciddKSB7XG4gICAgICAgICAgICBwcmVmZXJzSGVhZGVycy5wdXNoKHRoaXMuaGVhZGVyc1snUHJlZmVyJ10pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgcHJlZmVyc0hlYWRlcnMucHVzaChgY291bnQ9JHtjb3VudH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlZmF1bHRUb051bGwpIHtcbiAgICAgICAgICAgIHByZWZlcnNIZWFkZXJzLnB1c2goJ21pc3Npbmc9ZGVmYXVsdCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVhZGVyc1snUHJlZmVyJ10gPSBwcmVmZXJzSGVhZGVycy5qb2luKCcsJyk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbnMgPSB2YWx1ZXMucmVkdWNlKChhY2MsIHgpID0+IGFjYy5jb25jYXQoT2JqZWN0LmtleXMoeCkpLCBbXSk7XG4gICAgICAgICAgICBpZiAoY29sdW1ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdW5pcXVlQ29sdW1ucyA9IFsuLi5uZXcgU2V0KGNvbHVtbnMpXS5tYXAoKGNvbHVtbikgPT4gYFwiJHtjb2x1bW59XCJgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuc2V0KCdjb2x1bW5zJywgdW5pcXVlQ29sdW1ucy5qb2luKCcsJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgdXJsOiB0aGlzLnVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWEsXG4gICAgICAgICAgICBib2R5OiB2YWx1ZXMsXG4gICAgICAgICAgICBmZXRjaDogdGhpcy5mZXRjaCxcbiAgICAgICAgICAgIGFsbG93RW1wdHk6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhbiBVUFNFUlQgb24gdGhlIHRhYmxlIG9yIHZpZXcuIERlcGVuZGluZyBvbiB0aGUgY29sdW1uKHMpIHBhc3NlZFxuICAgICAqIHRvIGBvbkNvbmZsaWN0YCwgYC51cHNlcnQoKWAgYWxsb3dzIHlvdSB0byBwZXJmb3JtIHRoZSBlcXVpdmFsZW50IG9mXG4gICAgICogYC5pbnNlcnQoKWAgaWYgYSByb3cgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBgb25Db25mbGljdGAgY29sdW1ucyBkb2Vzbid0XG4gICAgICogZXhpc3QsIG9yIGlmIGl0IGRvZXMgZXhpc3QsIHBlcmZvcm0gYW4gYWx0ZXJuYXRpdmUgYWN0aW9uIGRlcGVuZGluZyBvblxuICAgICAqIGBpZ25vcmVEdXBsaWNhdGVzYC5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQsIHVwc2VydGVkIHJvd3MgYXJlIG5vdCByZXR1cm5lZC4gVG8gcmV0dXJuIGl0LCBjaGFpbiB0aGUgY2FsbFxuICAgICAqIHdpdGggYC5zZWxlY3QoKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWVzIC0gVGhlIHZhbHVlcyB0byB1cHNlcnQgd2l0aC4gUGFzcyBhbiBvYmplY3QgdG8gdXBzZXJ0IGFcbiAgICAgKiBzaW5nbGUgcm93IG9yIGFuIGFycmF5IHRvIHVwc2VydCBtdWx0aXBsZSByb3dzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBOYW1lZCBwYXJhbWV0ZXJzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vbkNvbmZsaWN0IC0gQ29tbWEtc2VwYXJhdGVkIFVOSVFVRSBjb2x1bW4ocykgdG8gc3BlY2lmeSBob3dcbiAgICAgKiBkdXBsaWNhdGUgcm93cyBhcmUgZGV0ZXJtaW5lZC4gVHdvIHJvd3MgYXJlIGR1cGxpY2F0ZXMgaWYgYWxsIHRoZVxuICAgICAqIGBvbkNvbmZsaWN0YCBjb2x1bW5zIGFyZSBlcXVhbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmlnbm9yZUR1cGxpY2F0ZXMgLSBJZiBgdHJ1ZWAsIGR1cGxpY2F0ZSByb3dzIGFyZSBpZ25vcmVkLiBJZlxuICAgICAqIGBmYWxzZWAsIGR1cGxpY2F0ZSByb3dzIGFyZSBtZXJnZWQgd2l0aCBleGlzdGluZyByb3dzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuY291bnQgLSBDb3VudCBhbGdvcml0aG0gdG8gdXNlIHRvIGNvdW50IHVwc2VydGVkIHJvd3MuXG4gICAgICpcbiAgICAgKiBgXCJleGFjdFwiYDogRXhhY3QgYnV0IHNsb3cgY291bnQgYWxnb3JpdGhtLiBQZXJmb3JtcyBhIGBDT1VOVCgqKWAgdW5kZXIgdGhlXG4gICAgICogaG9vZC5cbiAgICAgKlxuICAgICAqIGBcInBsYW5uZWRcImA6IEFwcHJveGltYXRlZCBidXQgZmFzdCBjb3VudCBhbGdvcml0aG0uIFVzZXMgdGhlIFBvc3RncmVzXG4gICAgICogc3RhdGlzdGljcyB1bmRlciB0aGUgaG9vZC5cbiAgICAgKlxuICAgICAqIGBcImVzdGltYXRlZFwiYDogVXNlcyBleGFjdCBjb3VudCBmb3IgbG93IG51bWJlcnMgYW5kIHBsYW5uZWQgY291bnQgZm9yIGhpZ2hcbiAgICAgKiBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZGVmYXVsdFRvTnVsbCAtIE1ha2UgbWlzc2luZyBmaWVsZHMgZGVmYXVsdCB0byBgbnVsbGAuXG4gICAgICogT3RoZXJ3aXNlLCB1c2UgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBjb2x1bW4uIFRoaXMgb25seSBhcHBsaWVzIHdoZW5cbiAgICAgKiBpbnNlcnRpbmcgbmV3IHJvd3MsIG5vdCB3aGVuIG1lcmdpbmcgd2l0aCBleGlzdGluZyByb3dzIHVuZGVyXG4gICAgICogYGlnbm9yZUR1cGxpY2F0ZXM6IGZhbHNlYC4gVGhpcyBhbHNvIG9ubHkgYXBwbGllcyB3aGVuIGRvaW5nIGJ1bGsgdXBzZXJ0cy5cbiAgICAgKi9cbiAgICB1cHNlcnQodmFsdWVzLCB7IG9uQ29uZmxpY3QsIGlnbm9yZUR1cGxpY2F0ZXMgPSBmYWxzZSwgY291bnQsIGRlZmF1bHRUb051bGwgPSB0cnVlLCB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBjb25zdCBwcmVmZXJzSGVhZGVycyA9IFtgcmVzb2x1dGlvbj0ke2lnbm9yZUR1cGxpY2F0ZXMgPyAnaWdub3JlJyA6ICdtZXJnZSd9LWR1cGxpY2F0ZXNgXTtcbiAgICAgICAgaWYgKG9uQ29uZmxpY3QgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5zZXQoJ29uX2NvbmZsaWN0Jywgb25Db25mbGljdCk7XG4gICAgICAgIGlmICh0aGlzLmhlYWRlcnNbJ1ByZWZlciddKSB7XG4gICAgICAgICAgICBwcmVmZXJzSGVhZGVycy5wdXNoKHRoaXMuaGVhZGVyc1snUHJlZmVyJ10pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgcHJlZmVyc0hlYWRlcnMucHVzaChgY291bnQ9JHtjb3VudH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlZmF1bHRUb051bGwpIHtcbiAgICAgICAgICAgIHByZWZlcnNIZWFkZXJzLnB1c2goJ21pc3Npbmc9ZGVmYXVsdCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVhZGVyc1snUHJlZmVyJ10gPSBwcmVmZXJzSGVhZGVycy5qb2luKCcsJyk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbnMgPSB2YWx1ZXMucmVkdWNlKChhY2MsIHgpID0+IGFjYy5jb25jYXQoT2JqZWN0LmtleXMoeCkpLCBbXSk7XG4gICAgICAgICAgICBpZiAoY29sdW1ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdW5pcXVlQ29sdW1ucyA9IFsuLi5uZXcgU2V0KGNvbHVtbnMpXS5tYXAoKGNvbHVtbikgPT4gYFwiJHtjb2x1bW59XCJgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuc2V0KCdjb2x1bW5zJywgdW5pcXVlQ29sdW1ucy5qb2luKCcsJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgdXJsOiB0aGlzLnVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWEsXG4gICAgICAgICAgICBib2R5OiB2YWx1ZXMsXG4gICAgICAgICAgICBmZXRjaDogdGhpcy5mZXRjaCxcbiAgICAgICAgICAgIGFsbG93RW1wdHk6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhbiBVUERBVEUgb24gdGhlIHRhYmxlIG9yIHZpZXcuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCB1cGRhdGVkIHJvd3MgYXJlIG5vdCByZXR1cm5lZC4gVG8gcmV0dXJuIGl0LCBjaGFpbiB0aGUgY2FsbFxuICAgICAqIHdpdGggYC5zZWxlY3QoKWAgYWZ0ZXIgZmlsdGVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZXMgLSBUaGUgdmFsdWVzIHRvIHVwZGF0ZSB3aXRoXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmNvdW50IC0gQ291bnQgYWxnb3JpdGhtIHRvIHVzZSB0byBjb3VudCB1cGRhdGVkIHJvd3MuXG4gICAgICpcbiAgICAgKiBgXCJleGFjdFwiYDogRXhhY3QgYnV0IHNsb3cgY291bnQgYWxnb3JpdGhtLiBQZXJmb3JtcyBhIGBDT1VOVCgqKWAgdW5kZXIgdGhlXG4gICAgICogaG9vZC5cbiAgICAgKlxuICAgICAqIGBcInBsYW5uZWRcImA6IEFwcHJveGltYXRlZCBidXQgZmFzdCBjb3VudCBhbGdvcml0aG0uIFVzZXMgdGhlIFBvc3RncmVzXG4gICAgICogc3RhdGlzdGljcyB1bmRlciB0aGUgaG9vZC5cbiAgICAgKlxuICAgICAqIGBcImVzdGltYXRlZFwiYDogVXNlcyBleGFjdCBjb3VudCBmb3IgbG93IG51bWJlcnMgYW5kIHBsYW5uZWQgY291bnQgZm9yIGhpZ2hcbiAgICAgKiBudW1iZXJzLlxuICAgICAqL1xuICAgIHVwZGF0ZSh2YWx1ZXMsIHsgY291bnQsIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBtZXRob2QgPSAnUEFUQ0gnO1xuICAgICAgICBjb25zdCBwcmVmZXJzSGVhZGVycyA9IFtdO1xuICAgICAgICBpZiAodGhpcy5oZWFkZXJzWydQcmVmZXInXSkge1xuICAgICAgICAgICAgcHJlZmVyc0hlYWRlcnMucHVzaCh0aGlzLmhlYWRlcnNbJ1ByZWZlciddKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIHByZWZlcnNIZWFkZXJzLnB1c2goYGNvdW50PSR7Y291bnR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oZWFkZXJzWydQcmVmZXInXSA9IHByZWZlcnNIZWFkZXJzLmpvaW4oJywnKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEuZGVmYXVsdCh7XG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLnNjaGVtYSxcbiAgICAgICAgICAgIGJvZHk6IHZhbHVlcyxcbiAgICAgICAgICAgIGZldGNoOiB0aGlzLmZldGNoLFxuICAgICAgICAgICAgYWxsb3dFbXB0eTogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgREVMRVRFIG9uIHRoZSB0YWJsZSBvciB2aWV3LlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgZGVsZXRlZCByb3dzIGFyZSBub3QgcmV0dXJuZWQuIFRvIHJldHVybiBpdCwgY2hhaW4gdGhlIGNhbGxcbiAgICAgKiB3aXRoIGAuc2VsZWN0KClgIGFmdGVyIGZpbHRlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmNvdW50IC0gQ291bnQgYWxnb3JpdGhtIHRvIHVzZSB0byBjb3VudCBkZWxldGVkIHJvd3MuXG4gICAgICpcbiAgICAgKiBgXCJleGFjdFwiYDogRXhhY3QgYnV0IHNsb3cgY291bnQgYWxnb3JpdGhtLiBQZXJmb3JtcyBhIGBDT1VOVCgqKWAgdW5kZXIgdGhlXG4gICAgICogaG9vZC5cbiAgICAgKlxuICAgICAqIGBcInBsYW5uZWRcImA6IEFwcHJveGltYXRlZCBidXQgZmFzdCBjb3VudCBhbGdvcml0aG0uIFVzZXMgdGhlIFBvc3RncmVzXG4gICAgICogc3RhdGlzdGljcyB1bmRlciB0aGUgaG9vZC5cbiAgICAgKlxuICAgICAqIGBcImVzdGltYXRlZFwiYDogVXNlcyBleGFjdCBjb3VudCBmb3IgbG93IG51bWJlcnMgYW5kIHBsYW5uZWQgY291bnQgZm9yIGhpZ2hcbiAgICAgKiBudW1iZXJzLlxuICAgICAqL1xuICAgIGRlbGV0ZSh7IGNvdW50LCB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSc7XG4gICAgICAgIGNvbnN0IHByZWZlcnNIZWFkZXJzID0gW107XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgcHJlZmVyc0hlYWRlcnMucHVzaChgY291bnQ9JHtjb3VudH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oZWFkZXJzWydQcmVmZXInXSkge1xuICAgICAgICAgICAgcHJlZmVyc0hlYWRlcnMudW5zaGlmdCh0aGlzLmhlYWRlcnNbJ1ByZWZlciddKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhlYWRlcnNbJ1ByZWZlciddID0gcHJlZmVyc0hlYWRlcnMuam9pbignLCcpO1xuICAgICAgICByZXR1cm4gbmV3IFBvc3RncmVzdEZpbHRlckJ1aWxkZXJfMS5kZWZhdWx0KHtcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMuc2NoZW1hLFxuICAgICAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgICAgICBhbGxvd0VtcHR5OiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUG9zdGdyZXN0UXVlcnlCdWlsZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UG9zdGdyZXN0UXVlcnlCdWlsZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgUG9zdGdyZXN0QnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdEJ1aWxkZXJcIikpO1xuY2xhc3MgUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlciBleHRlbmRzIFBvc3RncmVzdEJ1aWxkZXJfMS5kZWZhdWx0IHtcbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgU0VMRUNUIG9uIHRoZSBxdWVyeSByZXN1bHQuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCBgLmluc2VydCgpYCwgYC51cGRhdGUoKWAsIGAudXBzZXJ0KClgLCBhbmQgYC5kZWxldGUoKWAgZG8gbm90XG4gICAgICogcmV0dXJuIG1vZGlmaWVkIHJvd3MuIEJ5IGNhbGxpbmcgdGhpcyBtZXRob2QsIG1vZGlmaWVkIHJvd3MgYXJlIHJldHVybmVkIGluXG4gICAgICogYGRhdGFgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbnMgLSBUaGUgY29sdW1ucyB0byByZXRyaWV2ZSwgc2VwYXJhdGVkIGJ5IGNvbW1hc1xuICAgICAqL1xuICAgIHNlbGVjdChjb2x1bW5zKSB7XG4gICAgICAgIC8vIFJlbW92ZSB3aGl0ZXNwYWNlcyBleGNlcHQgd2hlbiBxdW90ZWRcbiAgICAgICAgbGV0IHF1b3RlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjbGVhbmVkQ29sdW1ucyA9IChjb2x1bW5zICE9PSBudWxsICYmIGNvbHVtbnMgIT09IHZvaWQgMCA/IGNvbHVtbnMgOiAnKicpXG4gICAgICAgICAgICAuc3BsaXQoJycpXG4gICAgICAgICAgICAubWFwKChjKSA9PiB7XG4gICAgICAgICAgICBpZiAoL1xccy8udGVzdChjKSAmJiAhcXVvdGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICBxdW90ZWQgPSAhcXVvdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignJyk7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3NlbGVjdCcsIGNsZWFuZWRDb2x1bW5zKTtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyc1snUHJlZmVyJ10pIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1snUHJlZmVyJ10gKz0gJywnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVhZGVyc1snUHJlZmVyJ10gKz0gJ3JldHVybj1yZXByZXNlbnRhdGlvbic7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPcmRlciB0aGUgcXVlcnkgcmVzdWx0IGJ5IGBjb2x1bW5gLlxuICAgICAqXG4gICAgICogWW91IGNhbiBjYWxsIHRoaXMgbWV0aG9kIG11bHRpcGxlIHRpbWVzIHRvIG9yZGVyIGJ5IG11bHRpcGxlIGNvbHVtbnMuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9yZGVyIHJlZmVyZW5jZWQgdGFibGVzLCBidXQgaXQgb25seSBhZmZlY3RzIHRoZSBvcmRlcmluZyBvZiB0aGVcbiAgICAgKiBwYXJlbnQgdGFibGUgaWYgeW91IHVzZSBgIWlubmVyYCBpbiB0aGUgcXVlcnkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGNvbHVtbiB0byBvcmRlciBieVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmFzY2VuZGluZyAtIElmIGB0cnVlYCwgdGhlIHJlc3VsdCB3aWxsIGJlIGluIGFzY2VuZGluZyBvcmRlclxuICAgICAqIEBwYXJhbSBvcHRpb25zLm51bGxzRmlyc3QgLSBJZiBgdHJ1ZWAsIGBudWxsYHMgYXBwZWFyIGZpcnN0LiBJZiBgZmFsc2VgLFxuICAgICAqIGBudWxsYHMgYXBwZWFyIGxhc3QuXG4gICAgICogQHBhcmFtIG9wdGlvbnMucmVmZXJlbmNlZFRhYmxlIC0gU2V0IHRoaXMgdG8gb3JkZXIgYSByZWZlcmVuY2VkIHRhYmxlIGJ5XG4gICAgICogaXRzIGNvbHVtbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5mb3JlaWduVGFibGUgLSBEZXByZWNhdGVkLCB1c2UgYG9wdGlvbnMucmVmZXJlbmNlZFRhYmxlYFxuICAgICAqIGluc3RlYWRcbiAgICAgKi9cbiAgICBvcmRlcihjb2x1bW4sIHsgYXNjZW5kaW5nID0gdHJ1ZSwgbnVsbHNGaXJzdCwgZm9yZWlnblRhYmxlLCByZWZlcmVuY2VkVGFibGUgPSBmb3JlaWduVGFibGUsIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBrZXkgPSByZWZlcmVuY2VkVGFibGUgPyBgJHtyZWZlcmVuY2VkVGFibGV9Lm9yZGVyYCA6ICdvcmRlcic7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nT3JkZXIgPSB0aGlzLnVybC5zZWFyY2hQYXJhbXMuZ2V0KGtleSk7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5zZXQoa2V5LCBgJHtleGlzdGluZ09yZGVyID8gYCR7ZXhpc3RpbmdPcmRlcn0sYCA6ICcnfSR7Y29sdW1ufS4ke2FzY2VuZGluZyA/ICdhc2MnIDogJ2Rlc2MnfSR7bnVsbHNGaXJzdCA9PT0gdW5kZWZpbmVkID8gJycgOiBudWxsc0ZpcnN0ID8gJy5udWxsc2ZpcnN0JyA6ICcubnVsbHNsYXN0J31gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbWl0IHRoZSBxdWVyeSByZXN1bHQgYnkgYGNvdW50YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3VudCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIHJldHVyblxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLnJlZmVyZW5jZWRUYWJsZSAtIFNldCB0aGlzIHRvIGxpbWl0IHJvd3Mgb2YgcmVmZXJlbmNlZFxuICAgICAqIHRhYmxlcyBpbnN0ZWFkIG9mIHRoZSBwYXJlbnQgdGFibGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5mb3JlaWduVGFibGUgLSBEZXByZWNhdGVkLCB1c2UgYG9wdGlvbnMucmVmZXJlbmNlZFRhYmxlYFxuICAgICAqIGluc3RlYWRcbiAgICAgKi9cbiAgICBsaW1pdChjb3VudCwgeyBmb3JlaWduVGFibGUsIHJlZmVyZW5jZWRUYWJsZSA9IGZvcmVpZ25UYWJsZSwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHR5cGVvZiByZWZlcmVuY2VkVGFibGUgPT09ICd1bmRlZmluZWQnID8gJ2xpbWl0JyA6IGAke3JlZmVyZW5jZWRUYWJsZX0ubGltaXRgO1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuc2V0KGtleSwgYCR7Y291bnR9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaW1pdCB0aGUgcXVlcnkgcmVzdWx0IGJ5IHN0YXJ0aW5nIGF0IGFuIG9mZnNldCBgZnJvbWAgYW5kIGVuZGluZyBhdCB0aGUgb2Zmc2V0IGB0b2AuXG4gICAgICogT25seSByZWNvcmRzIHdpdGhpbiB0aGlzIHJhbmdlIGFyZSByZXR1cm5lZC5cbiAgICAgKiBUaGlzIHJlc3BlY3RzIHRoZSBxdWVyeSBvcmRlciBhbmQgaWYgdGhlcmUgaXMgbm8gb3JkZXIgY2xhdXNlIHRoZSByYW5nZSBjb3VsZCBiZWhhdmUgdW5leHBlY3RlZGx5LlxuICAgICAqIFRoZSBgZnJvbWAgYW5kIGB0b2AgdmFsdWVzIGFyZSAwLWJhc2VkIGFuZCBpbmNsdXNpdmU6IGByYW5nZSgxLCAzKWAgd2lsbCBpbmNsdWRlIHRoZSBzZWNvbmQsIHRoaXJkXG4gICAgICogYW5kIGZvdXJ0aCByb3dzIG9mIHRoZSBxdWVyeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmcm9tIC0gVGhlIHN0YXJ0aW5nIGluZGV4IGZyb20gd2hpY2ggdG8gbGltaXQgdGhlIHJlc3VsdFxuICAgICAqIEBwYXJhbSB0byAtIFRoZSBsYXN0IGluZGV4IHRvIHdoaWNoIHRvIGxpbWl0IHRoZSByZXN1bHRcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZWZlcmVuY2VkVGFibGUgLSBTZXQgdGhpcyB0byBsaW1pdCByb3dzIG9mIHJlZmVyZW5jZWRcbiAgICAgKiB0YWJsZXMgaW5zdGVhZCBvZiB0aGUgcGFyZW50IHRhYmxlXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZm9yZWlnblRhYmxlIC0gRGVwcmVjYXRlZCwgdXNlIGBvcHRpb25zLnJlZmVyZW5jZWRUYWJsZWBcbiAgICAgKiBpbnN0ZWFkXG4gICAgICovXG4gICAgcmFuZ2UoZnJvbSwgdG8sIHsgZm9yZWlnblRhYmxlLCByZWZlcmVuY2VkVGFibGUgPSBmb3JlaWduVGFibGUsIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBrZXlPZmZzZXQgPSB0eXBlb2YgcmVmZXJlbmNlZFRhYmxlID09PSAndW5kZWZpbmVkJyA/ICdvZmZzZXQnIDogYCR7cmVmZXJlbmNlZFRhYmxlfS5vZmZzZXRgO1xuICAgICAgICBjb25zdCBrZXlMaW1pdCA9IHR5cGVvZiByZWZlcmVuY2VkVGFibGUgPT09ICd1bmRlZmluZWQnID8gJ2xpbWl0JyA6IGAke3JlZmVyZW5jZWRUYWJsZX0ubGltaXRgO1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuc2V0KGtleU9mZnNldCwgYCR7ZnJvbX1gKTtcbiAgICAgICAgLy8gUmFuZ2UgaXMgaW5jbHVzaXZlLCBzbyBhZGQgMVxuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuc2V0KGtleUxpbWl0LCBgJHt0byAtIGZyb20gKyAxfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBBYm9ydFNpZ25hbCBmb3IgdGhlIGZldGNoIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2lnbmFsIC0gVGhlIEFib3J0U2lnbmFsIHRvIHVzZSBmb3IgdGhlIGZldGNoIHJlcXVlc3RcbiAgICAgKi9cbiAgICBhYm9ydFNpZ25hbChzaWduYWwpIHtcbiAgICAgICAgdGhpcy5zaWduYWwgPSBzaWduYWw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYGRhdGFgIGFzIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGFuIGFycmF5IG9mIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBRdWVyeSByZXN1bHQgbXVzdCBiZSBvbmUgcm93IChlLmcuIHVzaW5nIGAubGltaXQoMSlgKSwgb3RoZXJ3aXNlIHRoaXNcbiAgICAgKiByZXR1cm5zIGFuIGVycm9yLlxuICAgICAqL1xuICAgIHNpbmdsZSgpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzWydBY2NlcHQnXSA9ICdhcHBsaWNhdGlvbi92bmQucGdyc3Qub2JqZWN0K2pzb24nO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGBkYXRhYCBhcyBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhbiBhcnJheSBvZiBvYmplY3RzLlxuICAgICAqXG4gICAgICogUXVlcnkgcmVzdWx0IG11c3QgYmUgemVybyBvciBvbmUgcm93IChlLmcuIHVzaW5nIGAubGltaXQoMSlgKSwgb3RoZXJ3aXNlXG4gICAgICogdGhpcyByZXR1cm5zIGFuIGVycm9yLlxuICAgICAqL1xuICAgIG1heWJlU2luZ2xlKCkge1xuICAgICAgICAvLyBUZW1wb3JhcnkgcGFydGlhbCBmaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9zdXBhYmFzZS9wb3N0Z3Jlc3QtanMvaXNzdWVzLzM2MVxuICAgICAgICAvLyBJc3N1ZSBwZXJzaXN0cyBlLmcuIGZvciBgLmluc2VydChbLi4uXSkuc2VsZWN0KCkubWF5YmVTaW5nbGUoKWBcbiAgICAgICAgaWYgKHRoaXMubWV0aG9kID09PSAnR0VUJykge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzWydBY2NlcHQnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1snQWNjZXB0J10gPSAnYXBwbGljYXRpb24vdm5kLnBncnN0Lm9iamVjdCtqc29uJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzTWF5YmVTaW5nbGUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGBkYXRhYCBhcyBhIHN0cmluZyBpbiBDU1YgZm9ybWF0LlxuICAgICAqL1xuICAgIGNzdigpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzWydBY2NlcHQnXSA9ICd0ZXh0L2Nzdic7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYGRhdGFgIGFzIGFuIG9iamVjdCBpbiBbR2VvSlNPTl0oaHR0cHM6Ly9nZW9qc29uLm9yZykgZm9ybWF0LlxuICAgICAqL1xuICAgIGdlb2pzb24oKSB7XG4gICAgICAgIHRoaXMuaGVhZGVyc1snQWNjZXB0J10gPSAnYXBwbGljYXRpb24vZ2VvK2pzb24nO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGBkYXRhYCBhcyB0aGUgRVhQTEFJTiBwbGFuIGZvciB0aGUgcXVlcnkuXG4gICAgICpcbiAgICAgKiBZb3UgbmVlZCB0byBlbmFibGUgdGhlXG4gICAgICogW2RiX3BsYW5fZW5hYmxlZF0oaHR0cHM6Ly9zdXBhYmFzZS5jb20vZG9jcy9ndWlkZXMvZGF0YWJhc2UvZGVidWdnaW5nLXBlcmZvcm1hbmNlI2VuYWJsaW5nLWV4cGxhaW4pXG4gICAgICogc2V0dGluZyBiZWZvcmUgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmFuYWx5emUgLSBJZiBgdHJ1ZWAsIHRoZSBxdWVyeSB3aWxsIGJlIGV4ZWN1dGVkIGFuZCB0aGVcbiAgICAgKiBhY3R1YWwgcnVuIHRpbWUgd2lsbCBiZSByZXR1cm5lZFxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMudmVyYm9zZSAtIElmIGB0cnVlYCwgdGhlIHF1ZXJ5IGlkZW50aWZpZXIgd2lsbCBiZSByZXR1cm5lZFxuICAgICAqIGFuZCBgZGF0YWAgd2lsbCBpbmNsdWRlIHRoZSBvdXRwdXQgY29sdW1ucyBvZiB0aGUgcXVlcnlcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnNldHRpbmdzIC0gSWYgYHRydWVgLCBpbmNsdWRlIGluZm9ybWF0aW9uIG9uIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBwYXJhbWV0ZXJzIHRoYXQgYWZmZWN0IHF1ZXJ5IHBsYW5uaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5idWZmZXJzIC0gSWYgYHRydWVgLCBpbmNsdWRlIGluZm9ybWF0aW9uIG9uIGJ1ZmZlciB1c2FnZVxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMud2FsIC0gSWYgYHRydWVgLCBpbmNsdWRlIGluZm9ybWF0aW9uIG9uIFdBTCByZWNvcmQgZ2VuZXJhdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZm9ybWF0IC0gVGhlIGZvcm1hdCBvZiB0aGUgb3V0cHV0LCBjYW4gYmUgYFwidGV4dFwiYCAoZGVmYXVsdClcbiAgICAgKiBvciBgXCJqc29uXCJgXG4gICAgICovXG4gICAgZXhwbGFpbih7IGFuYWx5emUgPSBmYWxzZSwgdmVyYm9zZSA9IGZhbHNlLCBzZXR0aW5ncyA9IGZhbHNlLCBidWZmZXJzID0gZmFsc2UsIHdhbCA9IGZhbHNlLCBmb3JtYXQgPSAndGV4dCcsIH0gPSB7fSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBbXG4gICAgICAgICAgICBhbmFseXplID8gJ2FuYWx5emUnIDogbnVsbCxcbiAgICAgICAgICAgIHZlcmJvc2UgPyAndmVyYm9zZScgOiBudWxsLFxuICAgICAgICAgICAgc2V0dGluZ3MgPyAnc2V0dGluZ3MnIDogbnVsbCxcbiAgICAgICAgICAgIGJ1ZmZlcnMgPyAnYnVmZmVycycgOiBudWxsLFxuICAgICAgICAgICAgd2FsID8gJ3dhbCcgOiBudWxsLFxuICAgICAgICBdXG4gICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAuam9pbignfCcpO1xuICAgICAgICAvLyBBbiBBY2NlcHQgaGVhZGVyIGNhbiBjYXJyeSBtdWx0aXBsZSBtZWRpYSB0eXBlcyBidXQgcG9zdGdyZXN0LWpzIGFsd2F5cyBzZW5kcyBvbmVcbiAgICAgICAgY29uc3QgZm9yTWVkaWF0eXBlID0gKF9hID0gdGhpcy5oZWFkZXJzWydBY2NlcHQnXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICB0aGlzLmhlYWRlcnNbJ0FjY2VwdCddID0gYGFwcGxpY2F0aW9uL3ZuZC5wZ3JzdC5wbGFuKyR7Zm9ybWF0fTsgZm9yPVwiJHtmb3JNZWRpYXR5cGV9XCI7IG9wdGlvbnM9JHtvcHRpb25zfTtgO1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnanNvbicpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJvbGxiYWNrIHRoZSBxdWVyeS5cbiAgICAgKlxuICAgICAqIGBkYXRhYCB3aWxsIHN0aWxsIGJlIHJldHVybmVkLCBidXQgdGhlIHF1ZXJ5IGlzIG5vdCBjb21taXR0ZWQuXG4gICAgICovXG4gICAgcm9sbGJhY2soKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCgoX2EgPSB0aGlzLmhlYWRlcnNbJ1ByZWZlciddKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJykudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1snUHJlZmVyJ10gKz0gJyx0eD1yb2xsYmFjayc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcnNbJ1ByZWZlciddID0gJ3R4PXJvbGxiYWNrJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhlIHR5cGUgb2YgdGhlIHJldHVybmVkIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIEB0eXBlUGFyYW0gTmV3UmVzdWx0IC0gVGhlIG5ldyByZXN1bHQgdHlwZSB0byBvdmVycmlkZSB3aXRoXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIG92ZXJyaWRlVHlwZXM8eW91clR5cGUsIHsgbWVyZ2U6IGZhbHNlIH0+KCkgbWV0aG9kIGF0IHRoZSBlbmQgb2YgeW91ciBjYWxsIGNoYWluIGluc3RlYWRcbiAgICAgKi9cbiAgICByZXR1cm5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUG9zdGdyZXN0RXJyb3IgPSBleHBvcnRzLlBvc3RncmVzdEJ1aWxkZXIgPSBleHBvcnRzLlBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXIgPSBleHBvcnRzLlBvc3RncmVzdEZpbHRlckJ1aWxkZXIgPSBleHBvcnRzLlBvc3RncmVzdFF1ZXJ5QnVpbGRlciA9IGV4cG9ydHMuUG9zdGdyZXN0Q2xpZW50ID0gdm9pZCAwO1xuLy8gQWx3YXlzIHVwZGF0ZSB3cmFwcGVyLm1qcyB3aGVuIHVwZGF0aW5nIHRoaXMgZmlsZS5cbmNvbnN0IFBvc3RncmVzdENsaWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdENsaWVudFwiKSk7XG5leHBvcnRzLlBvc3RncmVzdENsaWVudCA9IFBvc3RncmVzdENsaWVudF8xLmRlZmF1bHQ7XG5jb25zdCBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Qb3N0Z3Jlc3RRdWVyeUJ1aWxkZXJcIikpO1xuZXhwb3J0cy5Qb3N0Z3Jlc3RRdWVyeUJ1aWxkZXIgPSBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXJfMS5kZWZhdWx0O1xuY29uc3QgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdEZpbHRlckJ1aWxkZXJcIikpO1xuZXhwb3J0cy5Qb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyID0gUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xLmRlZmF1bHQ7XG5jb25zdCBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlclwiKSk7XG5leHBvcnRzLlBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXIgPSBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXzEuZGVmYXVsdDtcbmNvbnN0IFBvc3RncmVzdEJ1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Qb3N0Z3Jlc3RCdWlsZGVyXCIpKTtcbmV4cG9ydHMuUG9zdGdyZXN0QnVpbGRlciA9IFBvc3RncmVzdEJ1aWxkZXJfMS5kZWZhdWx0O1xuY29uc3QgUG9zdGdyZXN0RXJyb3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Qb3N0Z3Jlc3RFcnJvclwiKSk7XG5leHBvcnRzLlBvc3RncmVzdEVycm9yID0gUG9zdGdyZXN0RXJyb3JfMS5kZWZhdWx0O1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIFBvc3RncmVzdENsaWVudDogUG9zdGdyZXN0Q2xpZW50XzEuZGVmYXVsdCxcbiAgICBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXI6IFBvc3RncmVzdFF1ZXJ5QnVpbGRlcl8xLmRlZmF1bHQsXG4gICAgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcjogUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xLmRlZmF1bHQsXG4gICAgUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlcjogUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlcl8xLmRlZmF1bHQsXG4gICAgUG9zdGdyZXN0QnVpbGRlcjogUG9zdGdyZXN0QnVpbGRlcl8xLmRlZmF1bHQsXG4gICAgUG9zdGdyZXN0RXJyb3I6IFBvc3RncmVzdEVycm9yXzEuZGVmYXVsdCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IFBvc3RncmVzdFF1ZXJ5QnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdFF1ZXJ5QnVpbGRlclwiKSk7XG5jb25zdCBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0RmlsdGVyQnVpbGRlclwiKSk7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbi8qKlxuICogUG9zdGdSRVNUIGNsaWVudC5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGFiYXNlIC0gVHlwZXMgZm9yIHRoZSBzY2hlbWEgZnJvbSB0aGUgW3R5cGVcbiAqIGdlbmVyYXRvcl0oaHR0cHM6Ly9zdXBhYmFzZS5jb20vZG9jcy9yZWZlcmVuY2UvamF2YXNjcmlwdC9uZXh0L3R5cGVzY3JpcHQtc3VwcG9ydClcbiAqXG4gKiBAdHlwZVBhcmFtIFNjaGVtYU5hbWUgLSBQb3N0Z3JlcyBzY2hlbWEgdG8gc3dpdGNoIHRvLiBNdXN0IGJlIGEgc3RyaW5nXG4gKiBsaXRlcmFsLCB0aGUgc2FtZSBvbmUgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3Rvci4gSWYgdGhlIHNjaGVtYSBpcyBub3RcbiAqIGBcInB1YmxpY1wiYCwgdGhpcyBtdXN0IGJlIHN1cHBsaWVkIG1hbnVhbGx5LlxuICovXG5jbGFzcyBQb3N0Z3Jlc3RDbGllbnQge1xuICAgIC8vIFRPRE86IEFkZCBiYWNrIHNob3VsZFRocm93T25FcnJvciBvbmNlIHdlIGZpZ3VyZSBvdXQgdGhlIHR5cGluZ3NcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgUG9zdGdSRVNUIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmwgLSBVUkwgb2YgdGhlIFBvc3RnUkVTVCBlbmRwb2ludFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmhlYWRlcnMgLSBDdXN0b20gaGVhZGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLnNjaGVtYSAtIFBvc3RncmVzIHNjaGVtYSB0byBzd2l0Y2ggdG9cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5mZXRjaCAtIEN1c3RvbSBmZXRjaFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHVybCwgeyBoZWFkZXJzID0ge30sIHNjaGVtYSwgZmV0Y2gsIH0gPSB7fSkge1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb25zdGFudHNfMS5ERUZBVUxUX0hFQURFUlMpLCBoZWFkZXJzKTtcbiAgICAgICAgdGhpcy5zY2hlbWFOYW1lID0gc2NoZW1hO1xuICAgICAgICB0aGlzLmZldGNoID0gZmV0Y2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBxdWVyeSBvbiBhIHRhYmxlIG9yIGEgdmlldy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWxhdGlvbiAtIFRoZSB0YWJsZSBvciB2aWV3IG5hbWUgdG8gcXVlcnlcbiAgICAgKi9cbiAgICBmcm9tKHJlbGF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoYCR7dGhpcy51cmx9LyR7cmVsYXRpb259YCk7XG4gICAgICAgIHJldHVybiBuZXcgUG9zdGdyZXN0UXVlcnlCdWlsZGVyXzEuZGVmYXVsdCh1cmwsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuaGVhZGVycyksXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMuc2NoZW1hTmFtZSxcbiAgICAgICAgICAgIGZldGNoOiB0aGlzLmZldGNoLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VsZWN0IGEgc2NoZW1hIHRvIHF1ZXJ5IG9yIHBlcmZvcm0gYW4gZnVuY3Rpb24gKHJwYykgY2FsbC5cbiAgICAgKlxuICAgICAqIFRoZSBzY2hlbWEgbmVlZHMgdG8gYmUgb24gdGhlIGxpc3Qgb2YgZXhwb3NlZCBzY2hlbWFzIGluc2lkZSBTdXBhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY2hlbWEgLSBUaGUgc2NoZW1hIHRvIHF1ZXJ5XG4gICAgICovXG4gICAgc2NoZW1hKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gbmV3IFBvc3RncmVzdENsaWVudCh0aGlzLnVybCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgc2NoZW1hLFxuICAgICAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgZnVuY3Rpb24gY2FsbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiBuYW1lIHRvIGNhbGxcbiAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgZnVuY3Rpb24gY2FsbFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmhlYWQgLSBXaGVuIHNldCB0byBgdHJ1ZWAsIGBkYXRhYCB3aWxsIG5vdCBiZSByZXR1cm5lZC5cbiAgICAgKiBVc2VmdWwgaWYgeW91IG9ubHkgbmVlZCB0aGUgY291bnQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZ2V0IC0gV2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2l0aFxuICAgICAqIHJlYWQtb25seSBhY2Nlc3MgbW9kZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jb3VudCAtIENvdW50IGFsZ29yaXRobSB0byB1c2UgdG8gY291bnQgcm93cyByZXR1cm5lZCBieSB0aGVcbiAgICAgKiBmdW5jdGlvbi4gT25seSBhcHBsaWNhYmxlIGZvciBbc2V0LXJldHVybmluZ1xuICAgICAqIGZ1bmN0aW9uc10oaHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy9jdXJyZW50L2Z1bmN0aW9ucy1zcmYuaHRtbCkuXG4gICAgICpcbiAgICAgKiBgXCJleGFjdFwiYDogRXhhY3QgYnV0IHNsb3cgY291bnQgYWxnb3JpdGhtLiBQZXJmb3JtcyBhIGBDT1VOVCgqKWAgdW5kZXIgdGhlXG4gICAgICogaG9vZC5cbiAgICAgKlxuICAgICAqIGBcInBsYW5uZWRcImA6IEFwcHJveGltYXRlZCBidXQgZmFzdCBjb3VudCBhbGdvcml0aG0uIFVzZXMgdGhlIFBvc3RncmVzXG4gICAgICogc3RhdGlzdGljcyB1bmRlciB0aGUgaG9vZC5cbiAgICAgKlxuICAgICAqIGBcImVzdGltYXRlZFwiYDogVXNlcyBleGFjdCBjb3VudCBmb3IgbG93IG51bWJlcnMgYW5kIHBsYW5uZWQgY291bnQgZm9yIGhpZ2hcbiAgICAgKiBudW1iZXJzLlxuICAgICAqL1xuICAgIHJwYyhmbiwgYXJncyA9IHt9LCB7IGhlYWQgPSBmYWxzZSwgZ2V0ID0gZmFsc2UsIGNvdW50LCB9ID0ge30pIHtcbiAgICAgICAgbGV0IG1ldGhvZDtcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHt0aGlzLnVybH0vcnBjLyR7Zm59YCk7XG4gICAgICAgIGxldCBib2R5O1xuICAgICAgICBpZiAoaGVhZCB8fCBnZXQpIHtcbiAgICAgICAgICAgIG1ldGhvZCA9IGhlYWQgPyAnSEVBRCcgOiAnR0VUJztcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGFyZ3MpXG4gICAgICAgICAgICAgICAgLy8gcGFyYW1zIHdpdGggdW5kZWZpbmVkIHZhbHVlIG5lZWRzIHRvIGJlIGZpbHRlcmVkIG91dCwgb3RoZXJ3aXNlIGl0J2xsXG4gICAgICAgICAgICAgICAgLy8gc2hvdyB1cCBhcyBgP3BhcmFtPXVuZGVmaW5lZGBcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIC8vIGFycmF5IHZhbHVlcyBuZWVkIHNwZWNpYWwgc3ludGF4XG4gICAgICAgICAgICAgICAgLm1hcCgoW25hbWUsIHZhbHVlXSkgPT4gW25hbWUsIEFycmF5LmlzQXJyYXkodmFsdWUpID8gYHske3ZhbHVlLmpvaW4oJywnKX19YCA6IGAke3ZhbHVlfWBdKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgICAgICBib2R5ID0gYXJncztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5oZWFkZXJzKTtcbiAgICAgICAgaWYgKGNvdW50KSB7XG4gICAgICAgICAgICBoZWFkZXJzWydQcmVmZXInXSA9IGBjb3VudD0ke2NvdW50fWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEuZGVmYXVsdCh7XG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLnNjaGVtYU5hbWUsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgICAgICBhbGxvd0VtcHR5OiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUG9zdGdyZXN0Q2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UG9zdGdyZXN0Q2xpZW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52ZXJzaW9uID0gdm9pZCAwO1xuZXhwb3J0cy52ZXJzaW9uID0gJzAuMC4wLWF1dG9tYXRlZCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX0hFQURFUlMgPSB2b2lkIDA7XG5jb25zdCB2ZXJzaW9uXzEgPSByZXF1aXJlKFwiLi92ZXJzaW9uXCIpO1xuZXhwb3J0cy5ERUZBVUxUX0hFQURFUlMgPSB7ICdYLUNsaWVudC1JbmZvJzogYHBvc3RncmVzdC1qcy8ke3ZlcnNpb25fMS52ZXJzaW9ufWAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IG5vZGVfZmV0Y2hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiQHN1cGFiYXNlL25vZGUtZmV0Y2hcIikpO1xuY29uc3QgUG9zdGdyZXN0RXJyb3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Qb3N0Z3Jlc3RFcnJvclwiKSk7XG5jbGFzcyBQb3N0Z3Jlc3RCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihidWlsZGVyKSB7XG4gICAgICAgIHRoaXMuc2hvdWxkVGhyb3dPbkVycm9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWV0aG9kID0gYnVpbGRlci5tZXRob2Q7XG4gICAgICAgIHRoaXMudXJsID0gYnVpbGRlci51cmw7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGJ1aWxkZXIuaGVhZGVycztcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBidWlsZGVyLnNjaGVtYTtcbiAgICAgICAgdGhpcy5ib2R5ID0gYnVpbGRlci5ib2R5O1xuICAgICAgICB0aGlzLnNob3VsZFRocm93T25FcnJvciA9IGJ1aWxkZXIuc2hvdWxkVGhyb3dPbkVycm9yO1xuICAgICAgICB0aGlzLnNpZ25hbCA9IGJ1aWxkZXIuc2lnbmFsO1xuICAgICAgICB0aGlzLmlzTWF5YmVTaW5nbGUgPSBidWlsZGVyLmlzTWF5YmVTaW5nbGU7XG4gICAgICAgIGlmIChidWlsZGVyLmZldGNoKSB7XG4gICAgICAgICAgICB0aGlzLmZldGNoID0gYnVpbGRlci5mZXRjaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLmZldGNoID0gbm9kZV9mZXRjaF8xLmRlZmF1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZldGNoID0gZmV0Y2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlcmUncyBhbiBlcnJvciB3aXRoIHRoZSBxdWVyeSwgdGhyb3dPbkVycm9yIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlIGJ5XG4gICAgICogdGhyb3dpbmcgdGhlIGVycm9yIGluc3RlYWQgb2YgcmV0dXJuaW5nIGl0IGFzIHBhcnQgb2YgYSBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9zdXBhYmFzZS9zdXBhYmFzZS1qcy9pc3N1ZXMvOTJ9XG4gICAgICovXG4gICAgdGhyb3dPbkVycm9yKCkge1xuICAgICAgICB0aGlzLnNob3VsZFRocm93T25FcnJvciA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgYW4gSFRUUCBoZWFkZXIgZm9yIHRoZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIHNldEhlYWRlcihuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmhlYWRlcnMpO1xuICAgICAgICB0aGlzLmhlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRoZW4ob25mdWxmaWxsZWQsIG9ucmVqZWN0ZWQpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9wb3N0Z3Jlc3Qub3JnL2VuL3N0YWJsZS9hcGkuaHRtbCNzd2l0Y2hpbmctc2NoZW1hc1xuICAgICAgICBpZiAodGhpcy5zY2hlbWEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gc2tpcFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFsnR0VUJywgJ0hFQUQnXS5pbmNsdWRlcyh0aGlzLm1ldGhvZCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1snQWNjZXB0LVByb2ZpbGUnXSA9IHRoaXMuc2NoZW1hO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzWydDb250ZW50LVByb2ZpbGUnXSA9IHRoaXMuc2NoZW1hO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1ldGhvZCAhPT0gJ0dFVCcgJiYgdGhpcy5tZXRob2QgIT09ICdIRUFEJykge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgfVxuICAgICAgICAvLyBOT1RFOiBJbnZva2Ugdy9vIGB0aGlzYCB0byBhdm9pZCBpbGxlZ2FsIGludm9jYXRpb24gZXJyb3IuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zdXBhYmFzZS9wb3N0Z3Jlc3QtanMvcHVsbC8yNDdcbiAgICAgICAgY29uc3QgX2ZldGNoID0gdGhpcy5mZXRjaDtcbiAgICAgICAgbGV0IHJlcyA9IF9mZXRjaCh0aGlzLnVybC50b1N0cmluZygpLCB7XG4gICAgICAgICAgICBtZXRob2Q6IHRoaXMubWV0aG9kLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodGhpcy5ib2R5KSxcbiAgICAgICAgICAgIHNpZ25hbDogdGhpcy5zaWduYWwsXG4gICAgICAgIH0pLnRoZW4oYXN5bmMgKHJlcykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSByZXMuc3RhdHVzO1xuICAgICAgICAgICAgbGV0IHN0YXR1c1RleHQgPSByZXMuc3RhdHVzVGV4dDtcbiAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXRob2QgIT09ICdIRUFEJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmVmZXI6IHJldHVybj1taW5pbWFsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5oZWFkZXJzWydBY2NlcHQnXSA9PT0gJ3RleHQvY3N2Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGJvZHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5oZWFkZXJzWydBY2NlcHQnXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzWydBY2NlcHQnXS5pbmNsdWRlcygnYXBwbGljYXRpb24vdm5kLnBncnN0LnBsYW4rdGV4dCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gYm9keTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50SGVhZGVyID0gKF9hID0gdGhpcy5oZWFkZXJzWydQcmVmZXInXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hdGNoKC9jb3VudD0oZXhhY3R8cGxhbm5lZHxlc3RpbWF0ZWQpLyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudFJhbmdlID0gKF9iID0gcmVzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXJhbmdlJykpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgIGlmIChjb3VudEhlYWRlciAmJiBjb250ZW50UmFuZ2UgJiYgY29udGVudFJhbmdlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQgPSBwYXJzZUludChjb250ZW50UmFuZ2VbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUZW1wb3JhcnkgcGFydGlhbCBmaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9zdXBhYmFzZS9wb3N0Z3Jlc3QtanMvaXNzdWVzLzM2MVxuICAgICAgICAgICAgICAgIC8vIElzc3VlIHBlcnNpc3RzIGUuZy4gZm9yIGAuaW5zZXJ0KFsuLi5dKS5zZWxlY3QoKS5tYXliZVNpbmdsZSgpYFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTWF5YmVTaW5nbGUgJiYgdGhpcy5tZXRob2QgPT09ICdHRVQnICYmIEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1Bvc3RnUkVTVC9wb3N0Z3Jlc3QvYmxvYi9hODY3ZDc5YzQyNDE5YWYxNmMxOGMzZmIwMTllYmE4ZGY5OTI2MjZmL3NyYy9Qb3N0Z1JFU1QvRXJyb3IuaHMjTDU1M1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdQR1JTVDExNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogYFJlc3VsdHMgY29udGFpbiAke2RhdGEubGVuZ3RofSByb3dzLCBhcHBsaWNhdGlvbi92bmQucGdyc3Qub2JqZWN0K2pzb24gcmVxdWlyZXMgMSByb3dgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0pTT04gb2JqZWN0IHJlcXVlc3RlZCwgbXVsdGlwbGUgKG9yIG5vKSByb3dzIHJldHVybmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IDQwNjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSAnTm90IEFjY2VwdGFibGUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YVswXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vc3VwYWJhc2UvcG9zdGdyZXN0LWpzL2lzc3Vlcy8yOTVcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXJyb3IpICYmIHJlcy5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gMjAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICdPSyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKF9kKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9zdXBhYmFzZS9wb3N0Z3Jlc3QtanMvaXNzdWVzLzI5NVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDA0ICYmIGJvZHkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSAyMDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gJ05vIENvbnRlbnQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYm9keSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yICYmIHRoaXMuaXNNYXliZVNpbmdsZSAmJiAoKF9jID0gZXJyb3IgPT09IG51bGwgfHwgZXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yLmRldGFpbHMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5pbmNsdWRlcygnMCByb3dzJykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gMjAwO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gJ09LJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yICYmIHRoaXMuc2hvdWxkVGhyb3dPbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQb3N0Z3Jlc3RFcnJvcl8xLmRlZmF1bHQoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBvc3RncmVzdFJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgY291bnQsXG4gICAgICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgICAgIHN0YXR1c1RleHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RncmVzdFJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFRocm93T25FcnJvcikge1xuICAgICAgICAgICAgcmVzID0gcmVzLmNhdGNoKChmZXRjaEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJHsoX2EgPSBmZXRjaEVycm9yID09PSBudWxsIHx8IGZldGNoRXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZldGNoRXJyb3IubmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ0ZldGNoRXJyb3InfTogJHtmZXRjaEVycm9yID09PSBudWxsIHx8IGZldGNoRXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZldGNoRXJyb3IubWVzc2FnZX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogYCR7KF9iID0gZmV0Y2hFcnJvciA9PT0gbnVsbCB8fCBmZXRjaEVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmZXRjaEVycm9yLnN0YWNrKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJ31gLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGludDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBgJHsoX2MgPSBmZXRjaEVycm9yID09PSBudWxsIHx8IGZldGNoRXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZldGNoRXJyb3IuY29kZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJyd9YCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogMCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogJycsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzLnRoZW4ob25mdWxmaWxsZWQsIG9ucmVqZWN0ZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGUgdHlwZSBvZiB0aGUgcmV0dXJuZWQgYGRhdGFgLlxuICAgICAqXG4gICAgICogQHR5cGVQYXJhbSBOZXdSZXN1bHQgLSBUaGUgbmV3IHJlc3VsdCB0eXBlIHRvIG92ZXJyaWRlIHdpdGhcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2Ugb3ZlcnJpZGVUeXBlczx5b3VyVHlwZSwgeyBtZXJnZTogZmFsc2UgfT4oKSBtZXRob2QgYXQgdGhlIGVuZCBvZiB5b3VyIGNhbGwgY2hhaW4gaW5zdGVhZFxuICAgICAqL1xuICAgIHJldHVybnMoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGUgdHlwZSBvZiB0aGUgcmV0dXJuZWQgYGRhdGFgIGZpZWxkIGluIHRoZSByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEB0eXBlUGFyYW0gTmV3UmVzdWx0IC0gVGhlIG5ldyB0eXBlIHRvIGNhc3QgdGhlIHJlc3BvbnNlIGRhdGEgdG9cbiAgICAgKiBAdHlwZVBhcmFtIE9wdGlvbnMgLSBPcHRpb25hbCB0eXBlIGNvbmZpZ3VyYXRpb24gKGRlZmF1bHRzIHRvIHsgbWVyZ2U6IHRydWUgfSlcbiAgICAgKiBAdHlwZVBhcmFtIE9wdGlvbnMubWVyZ2UgLSBXaGVuIHRydWUsIG1lcmdlcyB0aGUgbmV3IHR5cGUgd2l0aCBleGlzdGluZyByZXR1cm4gdHlwZS4gV2hlbiBmYWxzZSwgcmVwbGFjZXMgdGhlIGV4aXN0aW5nIHR5cGVzIGVudGlyZWx5IChkZWZhdWx0cyB0byB0cnVlKVxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIC8vIE1lcmdlIHdpdGggZXhpc3RpbmcgdHlwZXMgKGRlZmF1bHQgYmVoYXZpb3IpXG4gICAgICogY29uc3QgcXVlcnkgPSBzdXBhYmFzZVxuICAgICAqICAgLmZyb20oJ3VzZXJzJylcbiAgICAgKiAgIC5zZWxlY3QoKVxuICAgICAqICAgLm92ZXJyaWRlVHlwZXM8eyBjdXN0b21fZmllbGQ6IHN0cmluZyB9PigpXG4gICAgICpcbiAgICAgKiAvLyBSZXBsYWNlIGV4aXN0aW5nIHR5cGVzIGNvbXBsZXRlbHlcbiAgICAgKiBjb25zdCByZXBsYWNlUXVlcnkgPSBzdXBhYmFzZVxuICAgICAqICAgLmZyb20oJ3VzZXJzJylcbiAgICAgKiAgIC5zZWxlY3QoKVxuICAgICAqICAgLm92ZXJyaWRlVHlwZXM8eyBpZDogbnVtYmVyOyBuYW1lOiBzdHJpbmcgfSwgeyBtZXJnZTogZmFsc2UgfT4oKVxuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIEEgUG9zdGdyZXN0QnVpbGRlciBpbnN0YW5jZSB3aXRoIHRoZSBuZXcgdHlwZVxuICAgICAqL1xuICAgIG92ZXJyaWRlVHlwZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFBvc3RncmVzdEJ1aWxkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb3N0Z3Jlc3RCdWlsZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBFcnJvciBmb3JtYXRcbiAqXG4gKiB7QGxpbmsgaHR0cHM6Ly9wb3N0Z3Jlc3Qub3JnL2VuL3N0YWJsZS9hcGkuaHRtbD9oaWdobGlnaHQ9b3B0aW9ucyNlcnJvcnMtYW5kLWh0dHAtc3RhdHVzLWNvZGVzfVxuICovXG5jbGFzcyBQb3N0Z3Jlc3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKGNvbnRleHQubWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdQb3N0Z3Jlc3RFcnJvcic7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IGNvbnRleHQuZGV0YWlscztcbiAgICAgICAgdGhpcy5oaW50ID0gY29udGV4dC5oaW50O1xuICAgICAgICB0aGlzLmNvZGUgPSBjb250ZXh0LmNvZGU7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUG9zdGdyZXN0RXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb3N0Z3Jlc3RFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IFBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Qb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXCIpKTtcbmNsYXNzIFBvc3RncmVzdEZpbHRlckJ1aWxkZXIgZXh0ZW5kcyBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXzEuZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIGlzIGVxdWFsIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBUbyBjaGVjayBpZiB0aGUgdmFsdWUgb2YgYGNvbHVtbmAgaXMgTlVMTCwgeW91IHNob3VsZCB1c2UgYC5pcygpYCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgZXEoY29sdW1uLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGVxLiR7dmFsdWV9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgYGNvbHVtbmAgaXMgbm90IGVxdWFsIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gZmlsdGVyIHdpdGhcbiAgICAgKi9cbiAgICBuZXEoY29sdW1uLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYG5lcS4ke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIGlzIGdyZWF0ZXIgdGhhbiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgZ3QoY29sdW1uLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGd0LiR7dmFsdWV9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgYGNvbHVtbmAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gZmlsdGVyIHdpdGhcbiAgICAgKi9cbiAgICBndGUoY29sdW1uLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGd0ZS4ke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIGlzIGxlc3MgdGhhbiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgbHQoY29sdW1uLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGx0LiR7dmFsdWV9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgYGNvbHVtbmAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gZmlsdGVyIHdpdGhcbiAgICAgKi9cbiAgICBsdGUoY29sdW1uLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGx0ZS4ke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIG1hdGNoZXMgYHBhdHRlcm5gIGNhc2Utc2Vuc2l0aXZlbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gcGF0dGVybiAtIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdpdGhcbiAgICAgKi9cbiAgICBsaWtlKGNvbHVtbiwgcGF0dGVybikge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGxpa2UuJHtwYXR0ZXJufWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIG1hdGNoZXMgYWxsIG9mIGBwYXR0ZXJuc2AgY2FzZS1zZW5zaXRpdmVseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSBwYXR0ZXJucyAtIFRoZSBwYXR0ZXJucyB0byBtYXRjaCB3aXRoXG4gICAgICovXG4gICAgbGlrZUFsbE9mKGNvbHVtbiwgcGF0dGVybnMpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBsaWtlKGFsbCkueyR7cGF0dGVybnMuam9pbignLCcpfX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBgY29sdW1uYCBtYXRjaGVzIGFueSBvZiBgcGF0dGVybnNgIGNhc2Utc2Vuc2l0aXZlbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gcGF0dGVybnMgLSBUaGUgcGF0dGVybnMgdG8gbWF0Y2ggd2l0aFxuICAgICAqL1xuICAgIGxpa2VBbnlPZihjb2x1bW4sIHBhdHRlcm5zKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgbGlrZShhbnkpLnske3BhdHRlcm5zLmpvaW4oJywnKX19YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgYGNvbHVtbmAgbWF0Y2hlcyBgcGF0dGVybmAgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHBhdHRlcm4gLSBUaGUgcGF0dGVybiB0byBtYXRjaCB3aXRoXG4gICAgICovXG4gICAgaWxpa2UoY29sdW1uLCBwYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgaWxpa2UuJHtwYXR0ZXJufWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIG1hdGNoZXMgYWxsIG9mIGBwYXR0ZXJuc2AgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHBhdHRlcm5zIC0gVGhlIHBhdHRlcm5zIHRvIG1hdGNoIHdpdGhcbiAgICAgKi9cbiAgICBpbGlrZUFsbE9mKGNvbHVtbiwgcGF0dGVybnMpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBpbGlrZShhbGwpLnske3BhdHRlcm5zLmpvaW4oJywnKX19YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgYGNvbHVtbmAgbWF0Y2hlcyBhbnkgb2YgYHBhdHRlcm5zYCBjYXNlLWluc2Vuc2l0aXZlbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gcGF0dGVybnMgLSBUaGUgcGF0dGVybnMgdG8gbWF0Y2ggd2l0aFxuICAgICAqL1xuICAgIGlsaWtlQW55T2YoY29sdW1uLCBwYXR0ZXJucykge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGlsaWtlKGFueSkueyR7cGF0dGVybnMuam9pbignLCcpfX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBgY29sdW1uYCBJUyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogRm9yIG5vbi1ib29sZWFuIGNvbHVtbnMsIHRoaXMgaXMgb25seSByZWxldmFudCBmb3IgY2hlY2tpbmcgaWYgdGhlIHZhbHVlIG9mXG4gICAgICogYGNvbHVtbmAgaXMgTlVMTCBieSBzZXR0aW5nIGB2YWx1ZWAgdG8gYG51bGxgLlxuICAgICAqXG4gICAgICogRm9yIGJvb2xlYW4gY29sdW1ucywgeW91IGNhbiBhbHNvIHNldCBgdmFsdWVgIHRvIGB0cnVlYCBvciBgZmFsc2VgIGFuZCBpdFxuICAgICAqIHdpbGwgYmVoYXZlIHRoZSBzYW1lIHdheSBhcyBgLmVxKClgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgaXMoY29sdW1uLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGlzLiR7dmFsdWV9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgYGNvbHVtbmAgaXMgaW5jbHVkZWQgaW4gdGhlIGB2YWx1ZXNgIGFycmF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlcyAtIFRoZSB2YWx1ZXMgYXJyYXkgdG8gZmlsdGVyIHdpdGhcbiAgICAgKi9cbiAgICBpbihjb2x1bW4sIHZhbHVlcykge1xuICAgICAgICBjb25zdCBjbGVhbmVkVmFsdWVzID0gQXJyYXkuZnJvbShuZXcgU2V0KHZhbHVlcykpXG4gICAgICAgICAgICAubWFwKChzKSA9PiB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgcG9zdGdyZXN0IHJlc2VydmVkIGNoYXJhY3RlcnNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vcG9zdGdyZXN0Lm9yZy9lbi92Ny4wLjAvYXBpLmh0bWwjcmVzZXJ2ZWQtY2hhcmFjdGVyc1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzID09PSAnc3RyaW5nJyAmJiBuZXcgUmVnRXhwKCdbLCgpXScpLnRlc3QocykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcIiR7c31cImA7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3N9YDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcsJyk7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgaW4uKCR7Y2xlYW5lZFZhbHVlc30pYCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbGV2YW50IGZvciBqc29uYiwgYXJyYXksIGFuZCByYW5nZSBjb2x1bW5zLiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmVcbiAgICAgKiBgY29sdW1uYCBjb250YWlucyBldmVyeSBlbGVtZW50IGFwcGVhcmluZyBpbiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBqc29uYiwgYXJyYXksIG9yIHJhbmdlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUganNvbmIsIGFycmF5LCBvciByYW5nZSB2YWx1ZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIGNvbnRhaW5zKGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIHJhbmdlIHR5cGVzIGNhbiBiZSBpbmNsdXNpdmUgJ1snLCAnXScgb3IgZXhjbHVzaXZlICcoJywgJyknIHNvIGp1c3RcbiAgICAgICAgICAgIC8vIGtlZXAgaXQgc2ltcGxlIGFuZCBhY2NlcHQgYSBzdHJpbmdcbiAgICAgICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgY3MuJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgLy8gYXJyYXlcbiAgICAgICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgY3MueyR7dmFsdWUuam9pbignLCcpfX1gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGpzb25cbiAgICAgICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgY3MuJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9ubHkgcmVsZXZhbnQgZm9yIGpzb25iLCBhcnJheSwgYW5kIHJhbmdlIGNvbHVtbnMuIE1hdGNoIG9ubHkgcm93cyB3aGVyZVxuICAgICAqIGV2ZXJ5IGVsZW1lbnQgYXBwZWFyaW5nIGluIGBjb2x1bW5gIGlzIGNvbnRhaW5lZCBieSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBqc29uYiwgYXJyYXksIG9yIHJhbmdlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUganNvbmIsIGFycmF5LCBvciByYW5nZSB2YWx1ZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIGNvbnRhaW5lZEJ5KGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIHJhbmdlXG4gICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGNkLiR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIC8vIGFycmF5XG4gICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGNkLnske3ZhbHVlLmpvaW4oJywnKX19YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBqc29uXG4gICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGNkLiR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbGV2YW50IGZvciByYW5nZSBjb2x1bW5zLiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgZXZlcnkgZWxlbWVudCBpblxuICAgICAqIGBjb2x1bW5gIGlzIGdyZWF0ZXIgdGhhbiBhbnkgZWxlbWVudCBpbiBgcmFuZ2VgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSByYW5nZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHJhbmdlIC0gVGhlIHJhbmdlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgcmFuZ2VHdChjb2x1bW4sIHJhbmdlKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgc3IuJHtyYW5nZX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9ubHkgcmVsZXZhbnQgZm9yIHJhbmdlIGNvbHVtbnMuIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBldmVyeSBlbGVtZW50IGluXG4gICAgICogYGNvbHVtbmAgaXMgZWl0aGVyIGNvbnRhaW5lZCBpbiBgcmFuZ2VgIG9yIGdyZWF0ZXIgdGhhbiBhbnkgZWxlbWVudCBpblxuICAgICAqIGByYW5nZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIHJhbmdlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gcmFuZ2UgLSBUaGUgcmFuZ2UgdG8gZmlsdGVyIHdpdGhcbiAgICAgKi9cbiAgICByYW5nZUd0ZShjb2x1bW4sIHJhbmdlKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgbnhsLiR7cmFuZ2V9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbGV2YW50IGZvciByYW5nZSBjb2x1bW5zLiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgZXZlcnkgZWxlbWVudCBpblxuICAgICAqIGBjb2x1bW5gIGlzIGxlc3MgdGhhbiBhbnkgZWxlbWVudCBpbiBgcmFuZ2VgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSByYW5nZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHJhbmdlIC0gVGhlIHJhbmdlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgcmFuZ2VMdChjb2x1bW4sIHJhbmdlKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgc2wuJHtyYW5nZX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9ubHkgcmVsZXZhbnQgZm9yIHJhbmdlIGNvbHVtbnMuIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBldmVyeSBlbGVtZW50IGluXG4gICAgICogYGNvbHVtbmAgaXMgZWl0aGVyIGNvbnRhaW5lZCBpbiBgcmFuZ2VgIG9yIGxlc3MgdGhhbiBhbnkgZWxlbWVudCBpblxuICAgICAqIGByYW5nZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIHJhbmdlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gcmFuZ2UgLSBUaGUgcmFuZ2UgdG8gZmlsdGVyIHdpdGhcbiAgICAgKi9cbiAgICByYW5nZUx0ZShjb2x1bW4sIHJhbmdlKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgbnhyLiR7cmFuZ2V9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbGV2YW50IGZvciByYW5nZSBjb2x1bW5zLiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgYGNvbHVtbmAgaXNcbiAgICAgKiBtdXR1YWxseSBleGNsdXNpdmUgdG8gYHJhbmdlYCBhbmQgdGhlcmUgY2FuIGJlIG5vIGVsZW1lbnQgYmV0d2VlbiB0aGUgdHdvXG4gICAgICogcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSByYW5nZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHJhbmdlIC0gVGhlIHJhbmdlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgcmFuZ2VBZGphY2VudChjb2x1bW4sIHJhbmdlKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgYWRqLiR7cmFuZ2V9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbGV2YW50IGZvciBhcnJheSBhbmQgcmFuZ2UgY29sdW1ucy4gTWF0Y2ggb25seSByb3dzIHdoZXJlXG4gICAgICogYGNvbHVtbmAgYW5kIGB2YWx1ZWAgaGF2ZSBhbiBlbGVtZW50IGluIGNvbW1vbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgYXJyYXkgb3IgcmFuZ2UgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBhcnJheSBvciByYW5nZSB2YWx1ZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIG92ZXJsYXBzKGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIHJhbmdlXG4gICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYG92LiR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBhcnJheVxuICAgICAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBvdi57JHt2YWx1ZS5qb2luKCcsJyl9fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbGV2YW50IGZvciB0ZXh0IGFuZCB0c3ZlY3RvciBjb2x1bW5zLiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmVcbiAgICAgKiBgY29sdW1uYCBtYXRjaGVzIHRoZSBxdWVyeSBzdHJpbmcgaW4gYHF1ZXJ5YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgdGV4dCBvciB0c3ZlY3RvciBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHF1ZXJ5IHRleHQgdG8gbWF0Y2ggd2l0aFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmNvbmZpZyAtIFRoZSB0ZXh0IHNlYXJjaCBjb25maWd1cmF0aW9uIHRvIHVzZVxuICAgICAqIEBwYXJhbSBvcHRpb25zLnR5cGUgLSBDaGFuZ2UgaG93IHRoZSBgcXVlcnlgIHRleHQgaXMgaW50ZXJwcmV0ZWRcbiAgICAgKi9cbiAgICB0ZXh0U2VhcmNoKGNvbHVtbiwgcXVlcnksIHsgY29uZmlnLCB0eXBlIH0gPSB7fSkge1xuICAgICAgICBsZXQgdHlwZVBhcnQgPSAnJztcbiAgICAgICAgaWYgKHR5cGUgPT09ICdwbGFpbicpIHtcbiAgICAgICAgICAgIHR5cGVQYXJ0ID0gJ3BsJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAncGhyYXNlJykge1xuICAgICAgICAgICAgdHlwZVBhcnQgPSAncGgnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICd3ZWJzZWFyY2gnKSB7XG4gICAgICAgICAgICB0eXBlUGFydCA9ICd3JztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb25maWdQYXJ0ID0gY29uZmlnID09PSB1bmRlZmluZWQgPyAnJyA6IGAoJHtjb25maWd9KWA7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgJHt0eXBlUGFydH1mdHMke2NvbmZpZ1BhcnR9LiR7cXVlcnl9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgZWFjaCBjb2x1bW4gaW4gYHF1ZXJ5YCBrZXlzIGlzIGVxdWFsIHRvIGl0c1xuICAgICAqIGFzc29jaWF0ZWQgdmFsdWUuIFNob3J0aGFuZCBmb3IgbXVsdGlwbGUgYC5lcSgpYHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVlcnkgLSBUaGUgb2JqZWN0IHRvIGZpbHRlciB3aXRoLCB3aXRoIGNvbHVtbiBuYW1lcyBhcyBrZXlzIG1hcHBlZFxuICAgICAqIHRvIHRoZWlyIGZpbHRlciB2YWx1ZXNcbiAgICAgKi9cbiAgICBtYXRjaChxdWVyeSkge1xuICAgICAgICBPYmplY3QuZW50cmllcyhxdWVyeSkuZm9yRWFjaCgoW2NvbHVtbiwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGVxLiR7dmFsdWV9YCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoaWNoIGRvZXNuJ3Qgc2F0aXNmeSB0aGUgZmlsdGVyLlxuICAgICAqXG4gICAgICogVW5saWtlIG1vc3QgZmlsdGVycywgYG9wZWFyYXRvcmAgYW5kIGB2YWx1ZWAgYXJlIHVzZWQgYXMtaXMgYW5kIG5lZWQgdG9cbiAgICAgKiBmb2xsb3cgW1Bvc3RnUkVTVFxuICAgICAqIHN5bnRheF0oaHR0cHM6Ly9wb3N0Z3Jlc3Qub3JnL2VuL3N0YWJsZS9hcGkuaHRtbCNvcGVyYXRvcnMpLiBZb3UgYWxzbyBuZWVkXG4gICAgICogdG8gbWFrZSBzdXJlIHRoZXkgYXJlIHByb3Blcmx5IHNhbml0aXplZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSBvcGVyYXRvciAtIFRoZSBvcGVyYXRvciB0byBiZSBuZWdhdGVkIHRvIGZpbHRlciB3aXRoLCBmb2xsb3dpbmdcbiAgICAgKiBQb3N0Z1JFU1Qgc3ludGF4XG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbHRlciB3aXRoLCBmb2xsb3dpbmcgUG9zdGdSRVNUIHN5bnRheFxuICAgICAqL1xuICAgIG5vdChjb2x1bW4sIG9wZXJhdG9yLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYG5vdC4ke29wZXJhdG9yfS4ke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoaWNoIHNhdGlzZnkgYXQgbGVhc3Qgb25lIG9mIHRoZSBmaWx0ZXJzLlxuICAgICAqXG4gICAgICogVW5saWtlIG1vc3QgZmlsdGVycywgYGZpbHRlcnNgIGlzIHVzZWQgYXMtaXMgYW5kIG5lZWRzIHRvIGZvbGxvdyBbUG9zdGdSRVNUXG4gICAgICogc3ludGF4XShodHRwczovL3Bvc3RncmVzdC5vcmcvZW4vc3RhYmxlL2FwaS5odG1sI29wZXJhdG9ycykuIFlvdSBhbHNvIG5lZWRcbiAgICAgKiB0byBtYWtlIHN1cmUgaXQncyBwcm9wZXJseSBzYW5pdGl6ZWQuXG4gICAgICpcbiAgICAgKiBJdCdzIGN1cnJlbnRseSBub3QgcG9zc2libGUgdG8gZG8gYW4gYC5vcigpYCBmaWx0ZXIgYWNyb3NzIG11bHRpcGxlIHRhYmxlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWx0ZXJzIC0gVGhlIGZpbHRlcnMgdG8gdXNlLCBmb2xsb3dpbmcgUG9zdGdSRVNUIHN5bnRheFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLnJlZmVyZW5jZWRUYWJsZSAtIFNldCB0aGlzIHRvIGZpbHRlciBvbiByZWZlcmVuY2VkIHRhYmxlc1xuICAgICAqIGluc3RlYWQgb2YgdGhlIHBhcmVudCB0YWJsZVxuICAgICAqIEBwYXJhbSBvcHRpb25zLmZvcmVpZ25UYWJsZSAtIERlcHJlY2F0ZWQsIHVzZSBgcmVmZXJlbmNlZFRhYmxlYCBpbnN0ZWFkXG4gICAgICovXG4gICAgb3IoZmlsdGVycywgeyBmb3JlaWduVGFibGUsIHJlZmVyZW5jZWRUYWJsZSA9IGZvcmVpZ25UYWJsZSwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHJlZmVyZW5jZWRUYWJsZSA/IGAke3JlZmVyZW5jZWRUYWJsZX0ub3JgIDogJ29yJztcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIGAoJHtmaWx0ZXJzfSlgKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGljaCBzYXRpc2Z5IHRoZSBmaWx0ZXIuIFRoaXMgaXMgYW4gZXNjYXBlIGhhdGNoIC0geW91XG4gICAgICogc2hvdWxkIHVzZSB0aGUgc3BlY2lmaWMgZmlsdGVyIG1ldGhvZHMgd2hlcmV2ZXIgcG9zc2libGUuXG4gICAgICpcbiAgICAgKiBVbmxpa2UgbW9zdCBmaWx0ZXJzLCBgb3BlYXJhdG9yYCBhbmQgYHZhbHVlYCBhcmUgdXNlZCBhcy1pcyBhbmQgbmVlZCB0b1xuICAgICAqIGZvbGxvdyBbUG9zdGdSRVNUXG4gICAgICogc3ludGF4XShodHRwczovL3Bvc3RncmVzdC5vcmcvZW4vc3RhYmxlL2FwaS5odG1sI29wZXJhdG9ycykuIFlvdSBhbHNvIG5lZWRcbiAgICAgKiB0byBtYWtlIHN1cmUgdGhleSBhcmUgcHJvcGVybHkgc2FuaXRpemVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIG9wZXJhdG9yIC0gVGhlIG9wZXJhdG9yIHRvIGZpbHRlciB3aXRoLCBmb2xsb3dpbmcgUG9zdGdSRVNUIHN5bnRheFxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBmaWx0ZXIgd2l0aCwgZm9sbG93aW5nIFBvc3RnUkVTVCBzeW50YXhcbiAgICAgKi9cbiAgICBmaWx0ZXIoY29sdW1uLCBvcGVyYXRvciwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGAke29wZXJhdG9yfS4ke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UG9zdGdyZXN0RmlsdGVyQnVpbGRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbigpIHtcbiAgICAvLyB0aGUgb25seSByZWxpYWJsZSBtZWFucyB0byBnZXQgdGhlIGdsb2JhbCBvYmplY3QgaXNcbiAgICAvLyBgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKWBcbiAgICAvLyBIb3dldmVyLCB0aGlzIGNhdXNlcyBDU1AgdmlvbGF0aW9ucyBpbiBDaHJvbWUgYXBwcy5cbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBzZWxmOyB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiB3aW5kb3c7IH1cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGdsb2JhbDsgfVxuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0Jyk7XG59XG5cbnZhciBnbG9iYWxPYmplY3QgPSBnZXRHbG9iYWwoKTtcblxuZXhwb3J0IGNvbnN0IGZldGNoID0gZ2xvYmFsT2JqZWN0LmZldGNoO1xuXG5leHBvcnQgZGVmYXVsdCBnbG9iYWxPYmplY3QuZmV0Y2guYmluZChnbG9iYWxPYmplY3QpO1xuXG5leHBvcnQgY29uc3QgSGVhZGVycyA9IGdsb2JhbE9iamVjdC5IZWFkZXJzO1xuZXhwb3J0IGNvbnN0IFJlcXVlc3QgPSBnbG9iYWxPYmplY3QuUmVxdWVzdDtcbmV4cG9ydCBjb25zdCBSZXNwb25zZSA9IGdsb2JhbE9iamVjdC5SZXNwb25zZTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IHJlc29sdmVGZXRjaCB9IGZyb20gJy4vaGVscGVyJztcbmltcG9ydCB7IEZ1bmN0aW9uc0ZldGNoRXJyb3IsIEZ1bmN0aW9uc0h0dHBFcnJvciwgRnVuY3Rpb25zUmVsYXlFcnJvciwgRnVuY3Rpb25SZWdpb24sIH0gZnJvbSAnLi90eXBlcyc7XG5leHBvcnQgY2xhc3MgRnVuY3Rpb25zQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIHsgaGVhZGVycyA9IHt9LCBjdXN0b21GZXRjaCwgcmVnaW9uID0gRnVuY3Rpb25SZWdpb24uQW55LCB9ID0ge30pIHtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIHRoaXMucmVnaW9uID0gcmVnaW9uO1xuICAgICAgICB0aGlzLmZldGNoID0gcmVzb2x2ZUZldGNoKGN1c3RvbUZldGNoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgYXV0aG9yaXphdGlvbiBoZWFkZXJcbiAgICAgKiBAcGFyYW0gdG9rZW4gLSB0aGUgbmV3IGp3dCB0b2tlbiBzZW50IGluIHRoZSBhdXRob3Jpc2F0aW9uIGhlYWRlclxuICAgICAqL1xuICAgIHNldEF1dGgodG9rZW4pIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSBgQmVhcmVyICR7dG9rZW59YDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlcyBhIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIGZ1bmN0aW9uTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBGdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciBpbnZva2luZyB0aGUgRnVuY3Rpb24uXG4gICAgICovXG4gICAgaW52b2tlKGZ1bmN0aW9uTmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBoZWFkZXJzLCBtZXRob2QsIGJvZHk6IGZ1bmN0aW9uQXJncyB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgICAgICBsZXQgX2hlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICBsZXQgeyByZWdpb24gfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uID0gdGhpcy5yZWdpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEFkZCByZWdpb24gYXMgcXVlcnkgcGFyYW1ldGVyIHVzaW5nIFVSTCBBUElcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke3RoaXMudXJsfS8ke2Z1bmN0aW9uTmFtZX1gKTtcbiAgICAgICAgICAgICAgICBpZiAocmVnaW9uICYmIHJlZ2lvbiAhPT0gJ2FueScpIHtcbiAgICAgICAgICAgICAgICAgICAgX2hlYWRlcnNbJ3gtcmVnaW9uJ10gPSByZWdpb247XG4gICAgICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdmb3JjZUZ1bmN0aW9uUmVnaW9uJywgcmVnaW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGJvZHk7XG4gICAgICAgICAgICAgICAgaWYgKGZ1bmN0aW9uQXJncyAmJlxuICAgICAgICAgICAgICAgICAgICAoKGhlYWRlcnMgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChoZWFkZXJzLCAnQ29udGVudC1UeXBlJykpIHx8ICFoZWFkZXJzKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBmdW5jdGlvbkFyZ3MgaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25BcmdzIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgd29yayBmb3IgRmlsZSBhcyBGaWxlIGluaGVyaXRzIEJsb2JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsc28gd29ya3MgZm9yIEFycmF5QnVmZmVyIGFzIGl0IGlzIHRoZSBzYW1lIHVuZGVybHlpbmcgc3RydWN0dXJlIGFzIGEgQmxvYlxuICAgICAgICAgICAgICAgICAgICAgICAgX2hlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gZnVuY3Rpb25BcmdzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBmdW5jdGlvbkFyZ3MgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwbGFpbiBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICd0ZXh0L3BsYWluJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSBmdW5jdGlvbkFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyAmJiBmdW5jdGlvbkFyZ3MgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3Qgc2V0IGNvbnRlbnQtdHlwZSBoZWFkZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXF1ZXN0IHdpbGwgYXV0b21hdGljYWxseSBhZGQgdGhlIHJpZ2h0IGJvdW5kYXJ5IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gZnVuY3Rpb25BcmdzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdCwgYXNzdW1lIHRoaXMgaXMgSlNPTlxuICAgICAgICAgICAgICAgICAgICAgICAgX2hlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGZ1bmN0aW9uQXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLmZldGNoKHVybC50b1N0cmluZygpLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kIHx8ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gaGVhZGVycyBwcmlvcml0eSBpcyAoaGlnaCB0byBsb3cpOlxuICAgICAgICAgICAgICAgICAgICAvLyAxLiBpbnZva2UtbGV2ZWwgaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICAvLyAyLiBjbGllbnQtbGV2ZWwgaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICAvLyAzLiBkZWZhdWx0IENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIF9oZWFkZXJzKSwgdGhpcy5oZWFkZXJzKSwgaGVhZGVycyksXG4gICAgICAgICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKGZldGNoRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZ1bmN0aW9uc0ZldGNoRXJyb3IoZmV0Y2hFcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNSZWxheUVycm9yID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtcmVsYXktZXJyb3InKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZWxheUVycm9yICYmIGlzUmVsYXlFcnJvciA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGdW5jdGlvbnNSZWxheUVycm9yKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRnVuY3Rpb25zSHR0cEVycm9yKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlVHlwZSA9ICgoX2EgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICd0ZXh0L3BsYWluJykuc3BsaXQoJzsnKVswXS50cmltKCk7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSB5aWVsZCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHlpZWxkIHJlc3BvbnNlLmJsb2IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2VUeXBlID09PSAndGV4dC9ldmVudC1zdHJlYW0nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2VUeXBlID09PSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHlpZWxkIHJlc3BvbnNlLmZvcm1EYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIHRleHRcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHlpZWxkIHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwsIHJlc3BvbnNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IGVycm9yIGluc3RhbmNlb2YgRnVuY3Rpb25zSHR0cEVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRnVuY3Rpb25zUmVsYXlFcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBlcnJvci5jb250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GdW5jdGlvbnNDbGllbnQuanMubWFwIiwiZXhwb3J0IGNvbnN0IHJlc29sdmVGZXRjaCA9IChjdXN0b21GZXRjaCkgPT4ge1xuICAgIGxldCBfZmV0Y2g7XG4gICAgaWYgKGN1c3RvbUZldGNoKSB7XG4gICAgICAgIF9mZXRjaCA9IGN1c3RvbUZldGNoO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIF9mZXRjaCA9ICguLi5hcmdzKSA9PiBpbXBvcnQoJ0BzdXBhYmFzZS9ub2RlLWZldGNoJykudGhlbigoeyBkZWZhdWx0OiBmZXRjaCB9KSA9PiBmZXRjaCguLi5hcmdzKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfZmV0Y2ggPSBmZXRjaDtcbiAgICB9XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiBfZmV0Y2goLi4uYXJncyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVyLmpzLm1hcCIsImltcG9ydCBpbmRleCBmcm9tICcuLi9janMvaW5kZXguanMnXG5jb25zdCB7XG4gIFBvc3RncmVzdENsaWVudCxcbiAgUG9zdGdyZXN0UXVlcnlCdWlsZGVyLFxuICBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyLFxuICBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyLFxuICBQb3N0Z3Jlc3RCdWlsZGVyLFxuICBQb3N0Z3Jlc3RFcnJvcixcbn0gPSBpbmRleFxuXG5leHBvcnQge1xuICBQb3N0Z3Jlc3RCdWlsZGVyLFxuICBQb3N0Z3Jlc3RDbGllbnQsXG4gIFBvc3RncmVzdEZpbHRlckJ1aWxkZXIsXG4gIFBvc3RncmVzdFF1ZXJ5QnVpbGRlcixcbiAgUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlcixcbiAgUG9zdGdyZXN0RXJyb3IsXG59XG5cbi8vIGNvbXBhdGliaWxpdHkgd2l0aCBDSlMgb3V0cHV0XG5leHBvcnQgZGVmYXVsdCB7XG4gIFBvc3RncmVzdENsaWVudCxcbiAgUG9zdGdyZXN0UXVlcnlCdWlsZGVyLFxuICBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyLFxuICBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyLFxuICBQb3N0Z3Jlc3RCdWlsZGVyLFxuICBQb3N0Z3Jlc3RFcnJvcixcbn1cbiIsImltcG9ydCB7IGdldE5hdGl2ZVdlYlNvY2tldCB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5leHBvcnQgY29uc3QgV2ViU29ja2V0ID0gZ2V0TmF0aXZlV2ViU29ja2V0KCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYXRpdmUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGdldE5hdGl2ZVdlYlNvY2tldCgpIHtcbiAgICBpZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIFdlYlNvY2tldDtcbiAgICBpZiAodHlwZW9mIGdsb2JhbC5XZWJTb2NrZXQgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWwuV2ViU29ja2V0O1xuICAgIGlmICh0eXBlb2Ygd2luZG93LldlYlNvY2tldCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5XZWJTb2NrZXQ7XG4gICAgaWYgKHR5cGVvZiBzZWxmLldlYlNvY2tldCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGYuV2ViU29ja2V0O1xuICAgIHRocm93IG5ldyBFcnJvcihcImBXZWJTb2NrZXRgIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudFwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24nO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVkVSU0lPTiA9IGByZWFsdGltZS1qcy8ke3ZlcnNpb259YDtcbmV4cG9ydCBjb25zdCBWU04gPSAnMS4wLjAnO1xuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSB2ZXJzaW9uO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVElNRU9VVCA9IDEwMDAwO1xuZXhwb3J0IGNvbnN0IFdTX0NMT1NFX05PUk1BTCA9IDEwMDA7XG5leHBvcnQgdmFyIFNPQ0tFVF9TVEFURVM7XG4oZnVuY3Rpb24gKFNPQ0tFVF9TVEFURVMpIHtcbiAgICBTT0NLRVRfU1RBVEVTW1NPQ0tFVF9TVEFURVNbXCJjb25uZWN0aW5nXCJdID0gMF0gPSBcImNvbm5lY3RpbmdcIjtcbiAgICBTT0NLRVRfU1RBVEVTW1NPQ0tFVF9TVEFURVNbXCJvcGVuXCJdID0gMV0gPSBcIm9wZW5cIjtcbiAgICBTT0NLRVRfU1RBVEVTW1NPQ0tFVF9TVEFURVNbXCJjbG9zaW5nXCJdID0gMl0gPSBcImNsb3NpbmdcIjtcbiAgICBTT0NLRVRfU1RBVEVTW1NPQ0tFVF9TVEFURVNbXCJjbG9zZWRcIl0gPSAzXSA9IFwiY2xvc2VkXCI7XG59KShTT0NLRVRfU1RBVEVTIHx8IChTT0NLRVRfU1RBVEVTID0ge30pKTtcbmV4cG9ydCB2YXIgQ0hBTk5FTF9TVEFURVM7XG4oZnVuY3Rpb24gKENIQU5ORUxfU1RBVEVTKSB7XG4gICAgQ0hBTk5FTF9TVEFURVNbXCJjbG9zZWRcIl0gPSBcImNsb3NlZFwiO1xuICAgIENIQU5ORUxfU1RBVEVTW1wiZXJyb3JlZFwiXSA9IFwiZXJyb3JlZFwiO1xuICAgIENIQU5ORUxfU1RBVEVTW1wiam9pbmVkXCJdID0gXCJqb2luZWRcIjtcbiAgICBDSEFOTkVMX1NUQVRFU1tcImpvaW5pbmdcIl0gPSBcImpvaW5pbmdcIjtcbiAgICBDSEFOTkVMX1NUQVRFU1tcImxlYXZpbmdcIl0gPSBcImxlYXZpbmdcIjtcbn0pKENIQU5ORUxfU1RBVEVTIHx8IChDSEFOTkVMX1NUQVRFUyA9IHt9KSk7XG5leHBvcnQgdmFyIENIQU5ORUxfRVZFTlRTO1xuKGZ1bmN0aW9uIChDSEFOTkVMX0VWRU5UUykge1xuICAgIENIQU5ORUxfRVZFTlRTW1wiY2xvc2VcIl0gPSBcInBoeF9jbG9zZVwiO1xuICAgIENIQU5ORUxfRVZFTlRTW1wiZXJyb3JcIl0gPSBcInBoeF9lcnJvclwiO1xuICAgIENIQU5ORUxfRVZFTlRTW1wiam9pblwiXSA9IFwicGh4X2pvaW5cIjtcbiAgICBDSEFOTkVMX0VWRU5UU1tcInJlcGx5XCJdID0gXCJwaHhfcmVwbHlcIjtcbiAgICBDSEFOTkVMX0VWRU5UU1tcImxlYXZlXCJdID0gXCJwaHhfbGVhdmVcIjtcbiAgICBDSEFOTkVMX0VWRU5UU1tcImFjY2Vzc190b2tlblwiXSA9IFwiYWNjZXNzX3Rva2VuXCI7XG59KShDSEFOTkVMX0VWRU5UUyB8fCAoQ0hBTk5FTF9FVkVOVFMgPSB7fSkpO1xuZXhwb3J0IHZhciBUUkFOU1BPUlRTO1xuKGZ1bmN0aW9uIChUUkFOU1BPUlRTKSB7XG4gICAgVFJBTlNQT1JUU1tcIndlYnNvY2tldFwiXSA9IFwid2Vic29ja2V0XCI7XG59KShUUkFOU1BPUlRTIHx8IChUUkFOU1BPUlRTID0ge30pKTtcbmV4cG9ydCB2YXIgQ09OTkVDVElPTl9TVEFURTtcbihmdW5jdGlvbiAoQ09OTkVDVElPTl9TVEFURSkge1xuICAgIENPTk5FQ1RJT05fU1RBVEVbXCJDb25uZWN0aW5nXCJdID0gXCJjb25uZWN0aW5nXCI7XG4gICAgQ09OTkVDVElPTl9TVEFURVtcIk9wZW5cIl0gPSBcIm9wZW5cIjtcbiAgICBDT05ORUNUSU9OX1NUQVRFW1wiQ2xvc2luZ1wiXSA9IFwiY2xvc2luZ1wiO1xuICAgIENPTk5FQ1RJT05fU1RBVEVbXCJDbG9zZWRcIl0gPSBcImNsb3NlZFwiO1xufSkoQ09OTkVDVElPTl9TVEFURSB8fCAoQ09OTkVDVElPTl9TVEFURSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBIZWxwZXJzIHRvIGNvbnZlcnQgdGhlIGNoYW5nZSBQYXlsb2FkIGludG8gbmF0aXZlIEpTIHR5cGVzLlxuICovXG4vLyBBZGFwdGVkIGZyb20gZXBnc3FsIChzcmMvZXBnc3FsX2JpbmFyeS5lcmwpLCB0aGlzIG1vZHVsZSBsaWNlbnNlZCB1bmRlclxuLy8gMy1jbGF1c2UgQlNEIGZvdW5kIGhlcmU6IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lcGdzcWwvZXBnc3FsL2RldmVsL0xJQ0VOU0VcbmV4cG9ydCB2YXIgUG9zdGdyZXNUeXBlcztcbihmdW5jdGlvbiAoUG9zdGdyZXNUeXBlcykge1xuICAgIFBvc3RncmVzVHlwZXNbXCJhYnN0aW1lXCJdID0gXCJhYnN0aW1lXCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcImJvb2xcIl0gPSBcImJvb2xcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wiZGF0ZVwiXSA9IFwiZGF0ZVwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJkYXRlcmFuZ2VcIl0gPSBcImRhdGVyYW5nZVwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJmbG9hdDRcIl0gPSBcImZsb2F0NFwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJmbG9hdDhcIl0gPSBcImZsb2F0OFwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJpbnQyXCJdID0gXCJpbnQyXCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcImludDRcIl0gPSBcImludDRcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wiaW50NHJhbmdlXCJdID0gXCJpbnQ0cmFuZ2VcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wiaW50OFwiXSA9IFwiaW50OFwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJpbnQ4cmFuZ2VcIl0gPSBcImludDhyYW5nZVwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJqc29uXCJdID0gXCJqc29uXCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcImpzb25iXCJdID0gXCJqc29uYlwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJtb25leVwiXSA9IFwibW9uZXlcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wibnVtZXJpY1wiXSA9IFwibnVtZXJpY1wiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJvaWRcIl0gPSBcIm9pZFwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJyZWx0aW1lXCJdID0gXCJyZWx0aW1lXCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcInRleHRcIl0gPSBcInRleHRcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1widGltZVwiXSA9IFwidGltZVwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJ0aW1lc3RhbXBcIl0gPSBcInRpbWVzdGFtcFwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJ0aW1lc3RhbXB0elwiXSA9IFwidGltZXN0YW1wdHpcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1widGltZXR6XCJdID0gXCJ0aW1ldHpcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1widHNyYW5nZVwiXSA9IFwidHNyYW5nZVwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJ0c3R6cmFuZ2VcIl0gPSBcInRzdHpyYW5nZVwiO1xufSkoUG9zdGdyZXNUeXBlcyB8fCAoUG9zdGdyZXNUeXBlcyA9IHt9KSk7XG4vKipcbiAqIFRha2VzIGFuIGFycmF5IG9mIGNvbHVtbnMgYW5kIGFuIG9iamVjdCBvZiBzdHJpbmcgdmFsdWVzIHRoZW4gY29udmVydHMgZWFjaCBzdHJpbmcgdmFsdWVcbiAqIHRvIGl0cyBtYXBwZWQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3tuYW1lOiBTdHJpbmcsIHR5cGU6IFN0cmluZ31bXX0gY29sdW1uc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY29yZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgVGhlIG1hcCBvZiB2YXJpb3VzIG9wdGlvbnMgdGhhdCBjYW4gYmUgYXBwbGllZCB0byB0aGUgbWFwcGVyXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zLnNraXBUeXBlcyBUaGUgYXJyYXkgb2YgdHlwZXMgdGhhdCBzaG91bGQgbm90IGJlIGNvbnZlcnRlZFxuICpcbiAqIEBleGFtcGxlIGNvbnZlcnRDaGFuZ2VEYXRhKFt7bmFtZTogJ2ZpcnN0X25hbWUnLCB0eXBlOiAndGV4dCd9LCB7bmFtZTogJ2FnZScsIHR5cGU6ICdpbnQ0J31dLCB7Zmlyc3RfbmFtZTogJ1BhdWwnLCBhZ2U6JzMzJ30sIHt9KVxuICogLy89PnsgZmlyc3RfbmFtZTogJ1BhdWwnLCBhZ2U6IDMzIH1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnZlcnRDaGFuZ2VEYXRhID0gKGNvbHVtbnMsIHJlY29yZCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHNraXBUeXBlcyA9IChfYSA9IG9wdGlvbnMuc2tpcFR5cGVzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocmVjb3JkKS5yZWR1Y2UoKGFjYywgcmVjX2tleSkgPT4ge1xuICAgICAgICBhY2NbcmVjX2tleV0gPSBjb252ZXJ0Q29sdW1uKHJlY19rZXksIGNvbHVtbnMsIHJlY29yZCwgc2tpcFR5cGVzKTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyB0aGUgdmFsdWUgb2YgYW4gaW5kaXZpZHVhbCBjb2x1bW4uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGNvbHVtbk5hbWUgVGhlIGNvbHVtbiB0aGF0IHlvdSB3YW50IHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7e25hbWU6IFN0cmluZywgdHlwZTogU3RyaW5nfVtdfSBjb2x1bW5zIEFsbCBvZiB0aGUgY29sdW1uc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY29yZCBUaGUgbWFwIG9mIHN0cmluZyB2YWx1ZXNcbiAqIEBwYXJhbSB7QXJyYXl9IHNraXBUeXBlcyBBbiBhcnJheSBvZiB0eXBlcyB0aGF0IHNob3VsZCBub3QgYmUgY29udmVydGVkXG4gKiBAcmV0dXJuIHtvYmplY3R9IFVzZWxlc3MgaW5mb3JtYXRpb25cbiAqXG4gKiBAZXhhbXBsZSBjb252ZXJ0Q29sdW1uKCdhZ2UnLCBbe25hbWU6ICdmaXJzdF9uYW1lJywgdHlwZTogJ3RleHQnfSwge25hbWU6ICdhZ2UnLCB0eXBlOiAnaW50NCd9XSwge2ZpcnN0X25hbWU6ICdQYXVsJywgYWdlOiAnMzMnfSwgW10pXG4gKiAvLz0+IDMzXG4gKiBAZXhhbXBsZSBjb252ZXJ0Q29sdW1uKCdhZ2UnLCBbe25hbWU6ICdmaXJzdF9uYW1lJywgdHlwZTogJ3RleHQnfSwge25hbWU6ICdhZ2UnLCB0eXBlOiAnaW50NCd9XSwge2ZpcnN0X25hbWU6ICdQYXVsJywgYWdlOiAnMzMnfSwgWydpbnQ0J10pXG4gKiAvLz0+IFwiMzNcIlxuICovXG5leHBvcnQgY29uc3QgY29udmVydENvbHVtbiA9IChjb2x1bW5OYW1lLCBjb2x1bW5zLCByZWNvcmQsIHNraXBUeXBlcykgPT4ge1xuICAgIGNvbnN0IGNvbHVtbiA9IGNvbHVtbnMuZmluZCgoeCkgPT4geC5uYW1lID09PSBjb2x1bW5OYW1lKTtcbiAgICBjb25zdCBjb2xUeXBlID0gY29sdW1uID09PSBudWxsIHx8IGNvbHVtbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29sdW1uLnR5cGU7XG4gICAgY29uc3QgdmFsdWUgPSByZWNvcmRbY29sdW1uTmFtZV07XG4gICAgaWYgKGNvbFR5cGUgJiYgIXNraXBUeXBlcy5pbmNsdWRlcyhjb2xUeXBlKSkge1xuICAgICAgICByZXR1cm4gY29udmVydENlbGwoY29sVHlwZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbm9vcCh2YWx1ZSk7XG59O1xuLyoqXG4gKiBJZiB0aGUgdmFsdWUgb2YgdGhlIGNlbGwgaXMgYG51bGxgLCByZXR1cm5zIG51bGwuXG4gKiBPdGhlcndpc2UgY29udmVydHMgdGhlIHN0cmluZyB2YWx1ZSB0byB0aGUgY29ycmVjdCB0eXBlLlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgQSBwb3N0Z3JlcyBjb2x1bW4gdHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIFRoZSBjZWxsIHZhbHVlXG4gKlxuICogQGV4YW1wbGUgY29udmVydENlbGwoJ2Jvb2wnLCAndCcpXG4gKiAvLz0+IHRydWVcbiAqIEBleGFtcGxlIGNvbnZlcnRDZWxsKCdpbnQ4JywgJzEwJylcbiAqIC8vPT4gMTBcbiAqIEBleGFtcGxlIGNvbnZlcnRDZWxsKCdfaW50NCcsICd7MSwyLDMsNH0nKVxuICogLy89PiBbMSwyLDMsNF1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnZlcnRDZWxsID0gKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgLy8gaWYgZGF0YSB0eXBlIGlzIGFuIGFycmF5XG4gICAgaWYgKHR5cGUuY2hhckF0KDApID09PSAnXycpIHtcbiAgICAgICAgY29uc3QgZGF0YVR5cGUgPSB0eXBlLnNsaWNlKDEsIHR5cGUubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHRvQXJyYXkodmFsdWUsIGRhdGFUeXBlKTtcbiAgICB9XG4gICAgLy8gSWYgbm90IG51bGwsIGNvbnZlcnQgdG8gY29ycmVjdCB0eXBlLlxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuYm9vbDpcbiAgICAgICAgICAgIHJldHVybiB0b0Jvb2xlYW4odmFsdWUpO1xuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuZmxvYXQ0OlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuZmxvYXQ4OlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuaW50MjpcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLmludDQ6XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5pbnQ4OlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMubnVtZXJpYzpcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLm9pZDpcbiAgICAgICAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5qc29uOlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuanNvbmI6XG4gICAgICAgICAgICByZXR1cm4gdG9Kc29uKHZhbHVlKTtcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLnRpbWVzdGFtcDpcbiAgICAgICAgICAgIHJldHVybiB0b1RpbWVzdGFtcFN0cmluZyh2YWx1ZSk7IC8vIEZvcm1hdCB0byBiZSBjb25zaXN0ZW50IHdpdGggUG9zdGdSRVNUXG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5hYnN0aW1lOiAvLyBUbyBhbGxvdyB1c2VycyB0byBjYXN0IGl0IGJhc2VkIG9uIFRpbWV6b25lXG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5kYXRlOiAvLyBUbyBhbGxvdyB1c2VycyB0byBjYXN0IGl0IGJhc2VkIG9uIFRpbWV6b25lXG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5kYXRlcmFuZ2U6XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5pbnQ0cmFuZ2U6XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5pbnQ4cmFuZ2U6XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5tb25leTpcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLnJlbHRpbWU6IC8vIFRvIGFsbG93IHVzZXJzIHRvIGNhc3QgaXQgYmFzZWQgb24gVGltZXpvbmVcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLnRleHQ6XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy50aW1lOiAvLyBUbyBhbGxvdyB1c2VycyB0byBjYXN0IGl0IGJhc2VkIG9uIFRpbWV6b25lXG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy50aW1lc3RhbXB0ejogLy8gVG8gYWxsb3cgdXNlcnMgdG8gY2FzdCBpdCBiYXNlZCBvbiBUaW1lem9uZVxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMudGltZXR6OiAvLyBUbyBhbGxvdyB1c2VycyB0byBjYXN0IGl0IGJhc2VkIG9uIFRpbWV6b25lXG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy50c3JhbmdlOlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMudHN0enJhbmdlOlxuICAgICAgICAgICAgcmV0dXJuIG5vb3AodmFsdWUpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBmb3IgcmVtYWluaW5nIHR5cGVzXG4gICAgICAgICAgICByZXR1cm4gbm9vcCh2YWx1ZSk7XG4gICAgfVxufTtcbmNvbnN0IG5vb3AgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuZXhwb3J0IGNvbnN0IHRvQm9vbGVhbiA9ICh2YWx1ZSkgPT4ge1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufTtcbmV4cG9ydCBjb25zdCB0b051bWJlciA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgIGlmICghTnVtYmVyLmlzTmFOKHBhcnNlZFZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5leHBvcnQgY29uc3QgdG9Kc29uID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBKU09OIHBhcnNlIGVycm9yOiAke2Vycm9yfWApO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgUG9zdGdyZXMgQXJyYXkgaW50byBhIG5hdGl2ZSBKUyBhcnJheVxuICpcbiAqIEBleGFtcGxlIHRvQXJyYXkoJ3t9JywgJ2ludDQnKVxuICogLy89PiBbXVxuICogQGV4YW1wbGUgdG9BcnJheSgne1wiWzIwMjEtMDEtMDEsMjAyMS0xMi0zMSlcIixcIigyMDIxLTAxLTAxLDIwMjEtMTItMzJdXCJ9JywgJ2RhdGVyYW5nZScpXG4gKiAvLz0+IFsnWzIwMjEtMDEtMDEsMjAyMS0xMi0zMSknLCAnKDIwMjEtMDEtMDEsMjAyMS0xMi0zMl0nXVxuICogQGV4YW1wbGUgdG9BcnJheShbMSwyLDMsNF0sICdpbnQ0JylcbiAqIC8vPT4gWzEsMiwzLDRdXG4gKi9cbmV4cG9ydCBjb25zdCB0b0FycmF5ID0gKHZhbHVlLCB0eXBlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBsYXN0SWR4ID0gdmFsdWUubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBjbG9zZUJyYWNlID0gdmFsdWVbbGFzdElkeF07XG4gICAgY29uc3Qgb3BlbkJyYWNlID0gdmFsdWVbMF07XG4gICAgLy8gQ29uZmlybSB2YWx1ZSBpcyBhIFBvc3RncmVzIGFycmF5IGJ5IGNoZWNraW5nIGN1cmx5IGJyYWNrZXRzXG4gICAgaWYgKG9wZW5CcmFjZSA9PT0gJ3snICYmIGNsb3NlQnJhY2UgPT09ICd9Jykge1xuICAgICAgICBsZXQgYXJyO1xuICAgICAgICBjb25zdCB2YWxUcmltID0gdmFsdWUuc2xpY2UoMSwgbGFzdElkeCk7XG4gICAgICAgIC8vIFRPRE86IGZpbmQgYSBiZXR0ZXIgc29sdXRpb24gdG8gc2VwYXJhdGUgUG9zdGdyZXMgYXJyYXkgZGF0YVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXJyID0gSlNPTi5wYXJzZSgnWycgKyB2YWxUcmltICsgJ10nKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoXykge1xuICAgICAgICAgICAgLy8gV0FSTklORzogc3BsaXR0aW5nIG9uIGNvbW1hIGRvZXMgbm90IGNvdmVyIGFsbCBlZGdlIGNhc2VzXG4gICAgICAgICAgICBhcnIgPSB2YWxUcmltID8gdmFsVHJpbS5zcGxpdCgnLCcpIDogW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyci5tYXAoKHZhbCkgPT4gY29udmVydENlbGwodHlwZSwgdmFsKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn07XG4vKipcbiAqIEZpeGVzIHRpbWVzdGFtcCB0byBiZSBJU08tODYwMS4gU3dhcHMgdGhlIHNwYWNlIGJldHdlZW4gdGhlIGRhdGUgYW5kIHRpbWUgZm9yIGEgJ1QnXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3N1cGFiYXNlL3N1cGFiYXNlL2lzc3Vlcy8xOFxuICpcbiAqIEBleGFtcGxlIHRvVGltZXN0YW1wU3RyaW5nKCcyMDE5LTA5LTEwIDAwOjAwOjAwJylcbiAqIC8vPT4gJzIwMTktMDktMTBUMDA6MDA6MDAnXG4gKi9cbmV4cG9ydCBjb25zdCB0b1RpbWVzdGFtcFN0cmluZyA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKCcgJywgJ1QnKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbmV4cG9ydCBjb25zdCBodHRwRW5kcG9pbnRVUkwgPSAoc29ja2V0VXJsKSA9PiB7XG4gICAgbGV0IHVybCA9IHNvY2tldFVybDtcbiAgICB1cmwgPSB1cmwucmVwbGFjZSgvXndzL2ksICdodHRwJyk7XG4gICAgdXJsID0gdXJsLnJlcGxhY2UoLyhcXC9zb2NrZXRcXC93ZWJzb2NrZXR8XFwvc29ja2V0fFxcL3dlYnNvY2tldClcXC8/JC9pLCAnJyk7XG4gICAgcmV0dXJuIHVybC5yZXBsYWNlKC9cXC8rJC8sICcnKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2Zvcm1lcnMuanMubWFwIiwiLy8gVGhpcyBmaWxlIGRyYXdzIGhlYXZpbHkgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcGhvZW5peGZyYW1ld29yay9waG9lbml4L2NvbW1pdC9jZjA5OGU5Y2Y3YTQ0ZWU2NDc5ZDMxZDkxMWE5N2QzYzc0MzBjNmZlXG4vLyBMaWNlbnNlOiBodHRwczovL2dpdGh1Yi5jb20vcGhvZW5peGZyYW1ld29yay9waG9lbml4L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlcmlhbGl6ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLkhFQURFUl9MRU5HVEggPSAxO1xuICAgIH1cbiAgICBkZWNvZGUocmF3UGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHJhd1BheWxvYWQuY29uc3RydWN0b3IgPT09IEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5fYmluYXJ5RGVjb2RlKHJhd1BheWxvYWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJhd1BheWxvYWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soSlNPTi5wYXJzZShyYXdQYXlsb2FkKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHt9KTtcbiAgICB9XG4gICAgX2JpbmFyeURlY29kZShidWZmZXIpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWNvZGVCcm9hZGNhc3QoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKTtcbiAgICB9XG4gICAgX2RlY29kZUJyb2FkY2FzdChidWZmZXIsIHZpZXcsIGRlY29kZXIpIHtcbiAgICAgICAgY29uc3QgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgxKTtcbiAgICAgICAgY29uc3QgZXZlbnRTaXplID0gdmlldy5nZXRVaW50OCgyKTtcbiAgICAgICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIDI7XG4gICAgICAgIGNvbnN0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSk7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCArIHRvcGljU2l6ZTtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKTtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgZXZlbnRTaXplO1xuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aCkpKTtcbiAgICAgICAgcmV0dXJuIHsgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YSB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6ZXIuanMubWFwIiwiLyoqXG4gKiBDcmVhdGVzIGEgdGltZXIgdGhhdCBhY2NlcHRzIGEgYHRpbWVyQ2FsY2AgZnVuY3Rpb24gdG8gcGVyZm9ybSBjYWxjdWxhdGVkIHRpbWVvdXQgcmV0cmllcywgc3VjaCBhcyBleHBvbmVudGlhbCBiYWNrb2ZmLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgICBsZXQgcmVjb25uZWN0VGltZXIgPSBuZXcgVGltZXIoKCkgPT4gdGhpcy5jb25uZWN0KCksIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgICAgcmV0dXJuIFsxMDAwLCA1MDAwLCAxMDAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICogICAgfSlcbiAqICAgIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqICAgIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDUwMDBcbiAqICAgIHJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAqICAgIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xuICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrLCB0aW1lckNhbGMpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB0aGlzLnRpbWVyQ2FsYyA9IHRpbWVyQ2FsYztcbiAgICAgICAgdGhpcy50aW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50cmllcyA9IDA7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgdGhpcy50aW1lckNhbGMgPSB0aW1lckNhbGM7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnRyaWVzID0gMDtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgIH1cbiAgICAvLyBDYW5jZWxzIGFueSBwcmV2aW91cyBzY2hlZHVsZVRpbWVvdXQgYW5kIHNjaGVkdWxlcyBjYWxsYmFja1xuICAgIHNjaGVkdWxlVGltZW91dCgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRyaWVzID0gdGhpcy50cmllcyArIDE7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKCk7XG4gICAgICAgIH0sIHRoaXMudGltZXJDYWxjKHRoaXMudHJpZXMgKyAxKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXIuanMubWFwIiwiaW1wb3J0IHsgREVGQVVMVF9USU1FT1VUIH0gZnJvbSAnLi4vbGliL2NvbnN0YW50cyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQdXNoIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgUHVzaFxuICAgICAqXG4gICAgICogQHBhcmFtIGNoYW5uZWwgVGhlIENoYW5uZWxcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50LCBmb3IgZXhhbXBsZSBgXCJwaHhfam9pblwiYFxuICAgICAqIEBwYXJhbSBwYXlsb2FkIFRoZSBwYXlsb2FkLCBmb3IgZXhhbXBsZSBge3VzZXJfaWQ6IDEyM31gXG4gICAgICogQHBhcmFtIHRpbWVvdXQgVGhlIHB1c2ggdGltZW91dCBpbiBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjaGFubmVsLCBldmVudCwgcGF5bG9hZCA9IHt9LCB0aW1lb3V0ID0gREVGQVVMVF9USU1FT1VUKSB7XG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDtcbiAgICAgICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgdGhpcy5zZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGltZW91dFRpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJlZiA9ICcnO1xuICAgICAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IG51bGw7XG4gICAgICAgIHRoaXMucmVjSG9va3MgPSBbXTtcbiAgICAgICAgdGhpcy5yZWZFdmVudCA9IG51bGw7XG4gICAgfVxuICAgIHJlc2VuZCh0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIHRoaXMuX2NhbmNlbFJlZkV2ZW50KCk7XG4gICAgICAgIHRoaXMucmVmID0gJyc7XG4gICAgICAgIHRoaXMucmVmRXZlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlbmQoKTtcbiAgICB9XG4gICAgc2VuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc1JlY2VpdmVkKCd0aW1lb3V0JykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXJ0VGltZW91dCgpO1xuICAgICAgICB0aGlzLnNlbnQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNoYW5uZWwuc29ja2V0LnB1c2goe1xuICAgICAgICAgICAgdG9waWM6IHRoaXMuY2hhbm5lbC50b3BpYyxcbiAgICAgICAgICAgIGV2ZW50OiB0aGlzLmV2ZW50LFxuICAgICAgICAgICAgcGF5bG9hZDogdGhpcy5wYXlsb2FkLFxuICAgICAgICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgICAgICAgIGpvaW5fcmVmOiB0aGlzLmNoYW5uZWwuX2pvaW5SZWYoKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZVBheWxvYWQocGF5bG9hZCkge1xuICAgICAgICB0aGlzLnBheWxvYWQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMucGF5bG9hZCksIHBheWxvYWQpO1xuICAgIH1cbiAgICByZWNlaXZlKHN0YXR1cywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5faGFzUmVjZWl2ZWQoc3RhdHVzKSkge1xuICAgICAgICAgICAgY2FsbGJhY2soKF9hID0gdGhpcy5yZWNlaXZlZFJlc3ApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWNIb29rcy5wdXNoKHsgc3RhdHVzLCBjYWxsYmFjayB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHN0YXJ0VGltZW91dCgpIHtcbiAgICAgICAgaWYgKHRoaXMudGltZW91dFRpbWVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWYgPSB0aGlzLmNoYW5uZWwuc29ja2V0Ll9tYWtlUmVmKCk7XG4gICAgICAgIHRoaXMucmVmRXZlbnQgPSB0aGlzLmNoYW5uZWwuX3JlcGx5RXZlbnROYW1lKHRoaXMucmVmKTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAocGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY2FuY2VsUmVmRXZlbnQoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbmNlbFRpbWVvdXQoKTtcbiAgICAgICAgICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gcGF5bG9hZDtcbiAgICAgICAgICAgIHRoaXMuX21hdGNoUmVjZWl2ZShwYXlsb2FkKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jaGFubmVsLl9vbih0aGlzLnJlZkV2ZW50LCB7fSwgY2FsbGJhY2spO1xuICAgICAgICB0aGlzLnRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd0aW1lb3V0Jywge30pO1xuICAgICAgICB9LCB0aGlzLnRpbWVvdXQpO1xuICAgIH1cbiAgICB0cmlnZ2VyKHN0YXR1cywgcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHRoaXMucmVmRXZlbnQpXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwuX3RyaWdnZXIodGhpcy5yZWZFdmVudCwgeyBzdGF0dXMsIHJlc3BvbnNlIH0pO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9jYW5jZWxSZWZFdmVudCgpO1xuICAgICAgICB0aGlzLl9jYW5jZWxUaW1lb3V0KCk7XG4gICAgfVxuICAgIF9jYW5jZWxSZWZFdmVudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlZkV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFubmVsLl9vZmYodGhpcy5yZWZFdmVudCwge30pO1xuICAgIH1cbiAgICBfY2FuY2VsVGltZW91dCgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFRpbWVyKTtcbiAgICAgICAgdGhpcy50aW1lb3V0VGltZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIF9tYXRjaFJlY2VpdmUoeyBzdGF0dXMsIHJlc3BvbnNlLCB9KSB7XG4gICAgICAgIHRoaXMucmVjSG9va3NcbiAgICAgICAgICAgIC5maWx0ZXIoKGgpID0+IGguc3RhdHVzID09PSBzdGF0dXMpXG4gICAgICAgICAgICAuZm9yRWFjaCgoaCkgPT4gaC5jYWxsYmFjayhyZXNwb25zZSkpO1xuICAgIH1cbiAgICBfaGFzUmVjZWl2ZWQoc3RhdHVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlY2VpdmVkUmVzcCAmJiB0aGlzLnJlY2VpdmVkUmVzcC5zdGF0dXMgPT09IHN0YXR1cztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdXNoLmpzLm1hcCIsIi8qXG4gIFRoaXMgZmlsZSBkcmF3cyBoZWF2aWx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peC9ibG9iL2QzNDRlYzBhNzMyYWI0ZWUyMDQyMTViMzFkZTY5Y2Y0YmU3MmUzYmYvYXNzZXRzL2pzL3Bob2VuaXgvcHJlc2VuY2UuanNcbiAgTGljZW5zZTogaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peC9ibG9iL2QzNDRlYzBhNzMyYWI0ZWUyMDQyMTViMzFkZTY5Y2Y0YmU3MmUzYmYvTElDRU5TRS5tZFxuKi9cbmV4cG9ydCB2YXIgUkVBTFRJTUVfUFJFU0VOQ0VfTElTVEVOX0VWRU5UUztcbihmdW5jdGlvbiAoUkVBTFRJTUVfUFJFU0VOQ0VfTElTVEVOX0VWRU5UUykge1xuICAgIFJFQUxUSU1FX1BSRVNFTkNFX0xJU1RFTl9FVkVOVFNbXCJTWU5DXCJdID0gXCJzeW5jXCI7XG4gICAgUkVBTFRJTUVfUFJFU0VOQ0VfTElTVEVOX0VWRU5UU1tcIkpPSU5cIl0gPSBcImpvaW5cIjtcbiAgICBSRUFMVElNRV9QUkVTRU5DRV9MSVNURU5fRVZFTlRTW1wiTEVBVkVcIl0gPSBcImxlYXZlXCI7XG59KShSRUFMVElNRV9QUkVTRU5DRV9MSVNURU5fRVZFTlRTIHx8IChSRUFMVElNRV9QUkVTRU5DRV9MSVNURU5fRVZFTlRTID0ge30pKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWx0aW1lUHJlc2VuY2Uge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBQcmVzZW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaGFubmVsIC0gVGhlIFJlYWx0aW1lQ2hhbm5lbFxuICAgICAqIEBwYXJhbSBvcHRzIC0gVGhlIG9wdGlvbnMsXG4gICAgICogICAgICAgIGZvciBleGFtcGxlIGB7ZXZlbnRzOiB7c3RhdGU6ICdzdGF0ZScsIGRpZmY6ICdkaWZmJ319YFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNoYW5uZWwsIG9wdHMpIHtcbiAgICAgICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdO1xuICAgICAgICB0aGlzLmpvaW5SZWYgPSBudWxsO1xuICAgICAgICB0aGlzLmNhbGxlciA9IHtcbiAgICAgICAgICAgIG9uSm9pbjogKCkgPT4geyB9LFxuICAgICAgICAgICAgb25MZWF2ZTogKCkgPT4geyB9LFxuICAgICAgICAgICAgb25TeW5jOiAoKSA9PiB7IH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGV2ZW50cyA9IChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuZXZlbnRzKSB8fCB7XG4gICAgICAgICAgICBzdGF0ZTogJ3ByZXNlbmNlX3N0YXRlJyxcbiAgICAgICAgICAgIGRpZmY6ICdwcmVzZW5jZV9kaWZmJyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jaGFubmVsLl9vbihldmVudHMuc3RhdGUsIHt9LCAobmV3U3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgb25Kb2luLCBvbkxlYXZlLCBvblN5bmMgfSA9IHRoaXMuY2FsbGVyO1xuICAgICAgICAgICAgdGhpcy5qb2luUmVmID0gdGhpcy5jaGFubmVsLl9qb2luUmVmKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gUmVhbHRpbWVQcmVzZW5jZS5zeW5jU3RhdGUodGhpcy5zdGF0ZSwgbmV3U3RhdGUsIG9uSm9pbiwgb25MZWF2ZSk7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdEaWZmcy5mb3JFYWNoKChkaWZmKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFJlYWx0aW1lUHJlc2VuY2Uuc3luY0RpZmYodGhpcy5zdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXTtcbiAgICAgICAgICAgIG9uU3luYygpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGFubmVsLl9vbihldmVudHMuZGlmZiwge30sIChkaWZmKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IG9uSm9pbiwgb25MZWF2ZSwgb25TeW5jIH0gPSB0aGlzLmNhbGxlcjtcbiAgICAgICAgICAgIGlmICh0aGlzLmluUGVuZGluZ1N5bmNTdGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nRGlmZnMucHVzaChkaWZmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBSZWFsdGltZVByZXNlbmNlLnN5bmNEaWZmKHRoaXMuc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSk7XG4gICAgICAgICAgICAgICAgb25TeW5jKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uSm9pbigoa2V5LCBjdXJyZW50UHJlc2VuY2VzLCBuZXdQcmVzZW5jZXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5fdHJpZ2dlcigncHJlc2VuY2UnLCB7XG4gICAgICAgICAgICAgICAgZXZlbnQ6ICdqb2luJyxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgY3VycmVudFByZXNlbmNlcyxcbiAgICAgICAgICAgICAgICBuZXdQcmVzZW5jZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub25MZWF2ZSgoa2V5LCBjdXJyZW50UHJlc2VuY2VzLCBsZWZ0UHJlc2VuY2VzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwuX3RyaWdnZXIoJ3ByZXNlbmNlJywge1xuICAgICAgICAgICAgICAgIGV2ZW50OiAnbGVhdmUnLFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJlc2VuY2VzLFxuICAgICAgICAgICAgICAgIGxlZnRQcmVzZW5jZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub25TeW5jKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5fdHJpZ2dlcigncHJlc2VuY2UnLCB7IGV2ZW50OiAnc3luYycgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHN5bmMgdGhlIGxpc3Qgb2YgcHJlc2VuY2VzIG9uIHRoZSBzZXJ2ZXIgd2l0aCB0aGVcbiAgICAgKiBjbGllbnQncyBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEFuIG9wdGlvbmFsIGBvbkpvaW5gIGFuZCBgb25MZWF2ZWAgY2FsbGJhY2sgY2FuIGJlIHByb3ZpZGVkIHRvXG4gICAgICogcmVhY3QgdG8gY2hhbmdlcyBpbiB0aGUgY2xpZW50J3MgbG9jYWwgcHJlc2VuY2VzIGFjcm9zc1xuICAgICAqIGRpc2Nvbm5lY3RzIGFuZCByZWNvbm5lY3RzIHdpdGggdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyBzeW5jU3RhdGUoY3VycmVudFN0YXRlLCBuZXdTdGF0ZSwgb25Kb2luLCBvbkxlYXZlKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5jbG9uZURlZXAoY3VycmVudFN0YXRlKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRTdGF0ZSA9IHRoaXMudHJhbnNmb3JtU3RhdGUobmV3U3RhdGUpO1xuICAgICAgICBjb25zdCBqb2lucyA9IHt9O1xuICAgICAgICBjb25zdCBsZWF2ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5tYXAoc3RhdGUsIChrZXksIHByZXNlbmNlcykgPT4ge1xuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1lZFN0YXRlW2tleV0pIHtcbiAgICAgICAgICAgICAgICBsZWF2ZXNba2V5XSA9IHByZXNlbmNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFwKHRyYW5zZm9ybWVkU3RhdGUsIChrZXksIG5ld1ByZXNlbmNlcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFByZXNlbmNlcyA9IHN0YXRlW2tleV07XG4gICAgICAgICAgICBpZiAoY3VycmVudFByZXNlbmNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ByZXNlbmNlUmVmcyA9IG5ld1ByZXNlbmNlcy5tYXAoKG0pID0+IG0ucHJlc2VuY2VfcmVmKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJQcmVzZW5jZVJlZnMgPSBjdXJyZW50UHJlc2VuY2VzLm1hcCgobSkgPT4gbS5wcmVzZW5jZV9yZWYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGpvaW5lZFByZXNlbmNlcyA9IG5ld1ByZXNlbmNlcy5maWx0ZXIoKG0pID0+IGN1clByZXNlbmNlUmVmcy5pbmRleE9mKG0ucHJlc2VuY2VfcmVmKSA8IDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRQcmVzZW5jZXMgPSBjdXJyZW50UHJlc2VuY2VzLmZpbHRlcigobSkgPT4gbmV3UHJlc2VuY2VSZWZzLmluZGV4T2YobS5wcmVzZW5jZV9yZWYpIDwgMCk7XG4gICAgICAgICAgICAgICAgaWYgKGpvaW5lZFByZXNlbmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5zW2tleV0gPSBqb2luZWRQcmVzZW5jZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsZWZ0UHJlc2VuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmVzW2tleV0gPSBsZWZ0UHJlc2VuY2VzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5zeW5jRGlmZihzdGF0ZSwgeyBqb2lucywgbGVhdmVzIH0sIG9uSm9pbiwgb25MZWF2ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gc3luYyBhIGRpZmYgb2YgcHJlc2VuY2Ugam9pbiBhbmQgbGVhdmUgZXZlbnRzIGZyb20gdGhlXG4gICAgICogc2VydmVyLCBhcyB0aGV5IGhhcHBlbi5cbiAgICAgKlxuICAgICAqIExpa2UgYHN5bmNTdGF0ZWAsIGBzeW5jRGlmZmAgYWNjZXB0cyBvcHRpb25hbCBgb25Kb2luYCBhbmRcbiAgICAgKiBgb25MZWF2ZWAgY2FsbGJhY2tzIHRvIHJlYWN0IHRvIGEgdXNlciBqb2luaW5nIG9yIGxlYXZpbmcgZnJvbSBhXG4gICAgICogZGV2aWNlLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc3RhdGljIHN5bmNEaWZmKHN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpIHtcbiAgICAgICAgY29uc3QgeyBqb2lucywgbGVhdmVzIH0gPSB7XG4gICAgICAgICAgICBqb2luczogdGhpcy50cmFuc2Zvcm1TdGF0ZShkaWZmLmpvaW5zKSxcbiAgICAgICAgICAgIGxlYXZlczogdGhpcy50cmFuc2Zvcm1TdGF0ZShkaWZmLmxlYXZlcyksXG4gICAgICAgIH07XG4gICAgICAgIGlmICghb25Kb2luKSB7XG4gICAgICAgICAgICBvbkpvaW4gPSAoKSA9PiB7IH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvbkxlYXZlKSB7XG4gICAgICAgICAgICBvbkxlYXZlID0gKCkgPT4geyB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFwKGpvaW5zLCAoa2V5LCBuZXdQcmVzZW5jZXMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQcmVzZW5jZXMgPSAoX2EgPSBzdGF0ZVtrZXldKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICAgICAgICAgIHN0YXRlW2tleV0gPSB0aGlzLmNsb25lRGVlcChuZXdQcmVzZW5jZXMpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRQcmVzZW5jZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGpvaW5lZFByZXNlbmNlUmVmcyA9IHN0YXRlW2tleV0ubWFwKChtKSA9PiBtLnByZXNlbmNlX3JlZik7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VyUHJlc2VuY2VzID0gY3VycmVudFByZXNlbmNlcy5maWx0ZXIoKG0pID0+IGpvaW5lZFByZXNlbmNlUmVmcy5pbmRleE9mKG0ucHJlc2VuY2VfcmVmKSA8IDApO1xuICAgICAgICAgICAgICAgIHN0YXRlW2tleV0udW5zaGlmdCguLi5jdXJQcmVzZW5jZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25Kb2luKGtleSwgY3VycmVudFByZXNlbmNlcywgbmV3UHJlc2VuY2VzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFwKGxlYXZlcywgKGtleSwgbGVmdFByZXNlbmNlcykgPT4ge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZXMgPSBzdGF0ZVtrZXldO1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50UHJlc2VuY2VzKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHByZXNlbmNlUmVmc1RvUmVtb3ZlID0gbGVmdFByZXNlbmNlcy5tYXAoKG0pID0+IG0ucHJlc2VuY2VfcmVmKTtcbiAgICAgICAgICAgIGN1cnJlbnRQcmVzZW5jZXMgPSBjdXJyZW50UHJlc2VuY2VzLmZpbHRlcigobSkgPT4gcHJlc2VuY2VSZWZzVG9SZW1vdmUuaW5kZXhPZihtLnByZXNlbmNlX3JlZikgPCAwKTtcbiAgICAgICAgICAgIHN0YXRlW2tleV0gPSBjdXJyZW50UHJlc2VuY2VzO1xuICAgICAgICAgICAgb25MZWF2ZShrZXksIGN1cnJlbnRQcmVzZW5jZXMsIGxlZnRQcmVzZW5jZXMpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRQcmVzZW5jZXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZVtrZXldO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgc3RhdGljIG1hcChvYmosIGZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubWFwKChrZXkpID0+IGZ1bmMoa2V5LCBvYmpba2V5XSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgJ21ldGFzJyBrZXlcbiAgICAgKiBDaGFuZ2UgJ3BoeF9yZWYnIHRvICdwcmVzZW5jZV9yZWYnXG4gICAgICogUmVtb3ZlICdwaHhfcmVmJyBhbmQgJ3BoeF9yZWZfcHJldidcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gcmV0dXJucyB7XG4gICAgICogIGFiYzEyMzogW1xuICAgICAqICAgIHsgcHJlc2VuY2VfcmVmOiAnMicsIHVzZXJfaWQ6IDEgfSxcbiAgICAgKiAgICB7IHByZXNlbmNlX3JlZjogJzMnLCB1c2VyX2lkOiAyIH1cbiAgICAgKiAgXVxuICAgICAqIH1cbiAgICAgKiBSZWFsdGltZVByZXNlbmNlLnRyYW5zZm9ybVN0YXRlKHtcbiAgICAgKiAgYWJjMTIzOiB7XG4gICAgICogICAgbWV0YXM6IFtcbiAgICAgKiAgICAgIHsgcGh4X3JlZjogJzInLCBwaHhfcmVmX3ByZXY6ICcxJyB1c2VyX2lkOiAxIH0sXG4gICAgICogICAgICB7IHBoeF9yZWY6ICczJywgdXNlcl9pZDogMiB9XG4gICAgICogICAgXVxuICAgICAqICB9XG4gICAgICogfSlcbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyB0cmFuc2Zvcm1TdGF0ZShzdGF0ZSkge1xuICAgICAgICBzdGF0ZSA9IHRoaXMuY2xvbmVEZWVwKHN0YXRlKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHN0YXRlKS5yZWR1Y2UoKG5ld1N0YXRlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByZXNlbmNlcyA9IHN0YXRlW2tleV07XG4gICAgICAgICAgICBpZiAoJ21ldGFzJyBpbiBwcmVzZW5jZXMpIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZVtrZXldID0gcHJlc2VuY2VzLm1ldGFzLm1hcCgocHJlc2VuY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VbJ3ByZXNlbmNlX3JlZiddID0gcHJlc2VuY2VbJ3BoeF9yZWYnXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHByZXNlbmNlWydwaHhfcmVmJ107XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcmVzZW5jZVsncGh4X3JlZl9wcmV2J107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmVzZW5jZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlW2tleV0gPSBwcmVzZW5jZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHN0YXRpYyBjbG9uZURlZXAob2JqKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgb25Kb2luKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2FsbGVyLm9uSm9pbiA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgb25MZWF2ZShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNhbGxlci5vbkxlYXZlID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvblN5bmMoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jYWxsZXIub25TeW5jID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBpblBlbmRpbmdTeW5jU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5qb2luUmVmIHx8IHRoaXMuam9pblJlZiAhPT0gdGhpcy5jaGFubmVsLl9qb2luUmVmKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVhbHRpbWVQcmVzZW5jZS5qcy5tYXAiLCJpbXBvcnQgeyBDSEFOTkVMX0VWRU5UUywgQ0hBTk5FTF9TVEFURVMgfSBmcm9tICcuL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IFB1c2ggZnJvbSAnLi9saWIvcHVzaCc7XG5pbXBvcnQgVGltZXIgZnJvbSAnLi9saWIvdGltZXInO1xuaW1wb3J0IFJlYWx0aW1lUHJlc2VuY2UgZnJvbSAnLi9SZWFsdGltZVByZXNlbmNlJztcbmltcG9ydCAqIGFzIFRyYW5zZm9ybWVycyBmcm9tICcuL2xpYi90cmFuc2Zvcm1lcnMnO1xuaW1wb3J0IHsgaHR0cEVuZHBvaW50VVJMIH0gZnJvbSAnLi9saWIvdHJhbnNmb3JtZXJzJztcbmV4cG9ydCB2YXIgUkVBTFRJTUVfUE9TVEdSRVNfQ0hBTkdFU19MSVNURU5fRVZFTlQ7XG4oZnVuY3Rpb24gKFJFQUxUSU1FX1BPU1RHUkVTX0NIQU5HRVNfTElTVEVOX0VWRU5UKSB7XG4gICAgUkVBTFRJTUVfUE9TVEdSRVNfQ0hBTkdFU19MSVNURU5fRVZFTlRbXCJBTExcIl0gPSBcIipcIjtcbiAgICBSRUFMVElNRV9QT1NUR1JFU19DSEFOR0VTX0xJU1RFTl9FVkVOVFtcIklOU0VSVFwiXSA9IFwiSU5TRVJUXCI7XG4gICAgUkVBTFRJTUVfUE9TVEdSRVNfQ0hBTkdFU19MSVNURU5fRVZFTlRbXCJVUERBVEVcIl0gPSBcIlVQREFURVwiO1xuICAgIFJFQUxUSU1FX1BPU1RHUkVTX0NIQU5HRVNfTElTVEVOX0VWRU5UW1wiREVMRVRFXCJdID0gXCJERUxFVEVcIjtcbn0pKFJFQUxUSU1FX1BPU1RHUkVTX0NIQU5HRVNfTElTVEVOX0VWRU5UIHx8IChSRUFMVElNRV9QT1NUR1JFU19DSEFOR0VTX0xJU1RFTl9FVkVOVCA9IHt9KSk7XG5leHBvcnQgdmFyIFJFQUxUSU1FX0xJU1RFTl9UWVBFUztcbihmdW5jdGlvbiAoUkVBTFRJTUVfTElTVEVOX1RZUEVTKSB7XG4gICAgUkVBTFRJTUVfTElTVEVOX1RZUEVTW1wiQlJPQURDQVNUXCJdID0gXCJicm9hZGNhc3RcIjtcbiAgICBSRUFMVElNRV9MSVNURU5fVFlQRVNbXCJQUkVTRU5DRVwiXSA9IFwicHJlc2VuY2VcIjtcbiAgICBSRUFMVElNRV9MSVNURU5fVFlQRVNbXCJQT1NUR1JFU19DSEFOR0VTXCJdID0gXCJwb3N0Z3Jlc19jaGFuZ2VzXCI7XG4gICAgUkVBTFRJTUVfTElTVEVOX1RZUEVTW1wiU1lTVEVNXCJdID0gXCJzeXN0ZW1cIjtcbn0pKFJFQUxUSU1FX0xJU1RFTl9UWVBFUyB8fCAoUkVBTFRJTUVfTElTVEVOX1RZUEVTID0ge30pKTtcbmV4cG9ydCB2YXIgUkVBTFRJTUVfU1VCU0NSSUJFX1NUQVRFUztcbihmdW5jdGlvbiAoUkVBTFRJTUVfU1VCU0NSSUJFX1NUQVRFUykge1xuICAgIFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVNbXCJTVUJTQ1JJQkVEXCJdID0gXCJTVUJTQ1JJQkVEXCI7XG4gICAgUkVBTFRJTUVfU1VCU0NSSUJFX1NUQVRFU1tcIlRJTUVEX09VVFwiXSA9IFwiVElNRURfT1VUXCI7XG4gICAgUkVBTFRJTUVfU1VCU0NSSUJFX1NUQVRFU1tcIkNMT1NFRFwiXSA9IFwiQ0xPU0VEXCI7XG4gICAgUkVBTFRJTUVfU1VCU0NSSUJFX1NUQVRFU1tcIkNIQU5ORUxfRVJST1JcIl0gPSBcIkNIQU5ORUxfRVJST1JcIjtcbn0pKFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMgfHwgKFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMgPSB7fSkpO1xuZXhwb3J0IGNvbnN0IFJFQUxUSU1FX0NIQU5ORUxfU1RBVEVTID0gQ0hBTk5FTF9TVEFURVM7XG4vKiogQSBjaGFubmVsIGlzIHRoZSBiYXNpYyBidWlsZGluZyBibG9jayBvZiBSZWFsdGltZVxuICogYW5kIG5hcnJvd3MgdGhlIHNjb3BlIG9mIGRhdGEgZmxvdyB0byBzdWJzY3JpYmVkIGNsaWVudHMuXG4gKiBZb3UgY2FuIHRoaW5rIG9mIGEgY2hhbm5lbCBhcyBhIGNoYXRyb29tIHdoZXJlIHBhcnRpY2lwYW50cyBhcmUgYWJsZSB0byBzZWUgd2hvJ3Mgb25saW5lXG4gKiBhbmQgc2VuZCBhbmQgcmVjZWl2ZSBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhbHRpbWVDaGFubmVsIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVG9waWMgbmFtZSBjYW4gYmUgYW55IHN0cmluZy4gKi9cbiAgICB0b3BpYywgcGFyYW1zID0geyBjb25maWc6IHt9IH0sIHNvY2tldCkge1xuICAgICAgICB0aGlzLnRvcGljID0gdG9waWM7XG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgICAgICAgdGhpcy5iaW5kaW5ncyA9IHt9O1xuICAgICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkO1xuICAgICAgICB0aGlzLmpvaW5lZE9uY2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wdXNoQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc3ViVG9waWMgPSB0b3BpYy5yZXBsYWNlKC9ecmVhbHRpbWU6L2ksICcnKTtcbiAgICAgICAgdGhpcy5wYXJhbXMuY29uZmlnID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBicm9hZGNhc3Q6IHsgYWNrOiBmYWxzZSwgc2VsZjogZmFsc2UgfSxcbiAgICAgICAgICAgIHByZXNlbmNlOiB7IGtleTogJycgfSxcbiAgICAgICAgICAgIHByaXZhdGU6IGZhbHNlLFxuICAgICAgICB9LCBwYXJhbXMuY29uZmlnKTtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGhpcy5zb2NrZXQudGltZW91dDtcbiAgICAgICAgdGhpcy5qb2luUHVzaCA9IG5ldyBQdXNoKHRoaXMsIENIQU5ORUxfRVZFTlRTLmpvaW4sIHRoaXMucGFyYW1zLCB0aGlzLnRpbWVvdXQpO1xuICAgICAgICB0aGlzLnJlam9pblRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHRoaXMuX3Jlam9pblVudGlsQ29ubmVjdGVkKCksIHRoaXMuc29ja2V0LnJlY29ubmVjdEFmdGVyTXMpO1xuICAgICAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoJ29rJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmpvaW5lZDtcbiAgICAgICAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMucHVzaEJ1ZmZlci5mb3JFYWNoKChwdXNoRXZlbnQpID0+IHB1c2hFdmVudC5zZW5kKCkpO1xuICAgICAgICAgICAgdGhpcy5wdXNoQnVmZmVyID0gW107XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9vbkNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmxvZygnY2hhbm5lbCcsIGBjbG9zZSAke3RoaXMudG9waWN9ICR7dGhpcy5fam9pblJlZigpfWApO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmNsb3NlZDtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Ll9yZW1vdmUodGhpcyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9vbkVycm9yKChyZWFzb24pID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0xlYXZpbmcoKSB8fCB0aGlzLl9pc0Nsb3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zb2NrZXQubG9nKCdjaGFubmVsJywgYGVycm9yICR7dGhpcy50b3BpY31gLCByZWFzb24pO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWQ7XG4gICAgICAgICAgICB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKCd0aW1lb3V0JywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc0pvaW5pbmcoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmxvZygnY2hhbm5lbCcsIGB0aW1lb3V0ICR7dGhpcy50b3BpY31gLCB0aGlzLmpvaW5QdXNoLnRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWQ7XG4gICAgICAgICAgICB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb24oQ0hBTk5FTF9FVkVOVFMucmVwbHksIHt9LCAocGF5bG9hZCwgcmVmKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyKHRoaXMuX3JlcGx5RXZlbnROYW1lKHJlZiksIHBheWxvYWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wcmVzZW5jZSA9IG5ldyBSZWFsdGltZVByZXNlbmNlKHRoaXMpO1xuICAgICAgICB0aGlzLmJyb2FkY2FzdEVuZHBvaW50VVJMID1cbiAgICAgICAgICAgIGh0dHBFbmRwb2ludFVSTCh0aGlzLnNvY2tldC5lbmRQb2ludCkgKyAnL2FwaS9icm9hZGNhc3QnO1xuICAgICAgICB0aGlzLnByaXZhdGUgPSB0aGlzLnBhcmFtcy5jb25maWcucHJpdmF0ZSB8fCBmYWxzZTtcbiAgICB9XG4gICAgLyoqIFN1YnNjcmliZSByZWdpc3RlcnMgeW91ciBjbGllbnQgd2l0aCB0aGUgc2VydmVyICovXG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrLCB0aW1lb3V0ID0gdGhpcy50aW1lb3V0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICghdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09IENIQU5ORUxfU1RBVEVTLmNsb3NlZCkge1xuICAgICAgICAgICAgY29uc3QgeyBjb25maWc6IHsgYnJvYWRjYXN0LCBwcmVzZW5jZSwgcHJpdmF0ZTogaXNQcml2YXRlIH0sIH0gPSB0aGlzLnBhcmFtcztcbiAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoKGUpID0+IGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTLkNIQU5ORUxfRVJST1IsIGUpKTtcbiAgICAgICAgICAgIHRoaXMuX29uQ2xvc2UoKCkgPT4gY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMuQ0xPU0VEKSk7XG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlblBheWxvYWQgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBicm9hZGNhc3QsXG4gICAgICAgICAgICAgICAgcHJlc2VuY2UsXG4gICAgICAgICAgICAgICAgcG9zdGdyZXNfY2hhbmdlczogKF9iID0gKF9hID0gdGhpcy5iaW5kaW5ncy5wb3N0Z3Jlc19jaGFuZ2VzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFwKChyKSA9PiByLmZpbHRlcikpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdLFxuICAgICAgICAgICAgICAgIHByaXZhdGU6IGlzUHJpdmF0ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy5zb2NrZXQuYWNjZXNzVG9rZW5WYWx1ZSkge1xuICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuUGF5bG9hZC5hY2Nlc3NfdG9rZW4gPSB0aGlzLnNvY2tldC5hY2Nlc3NUb2tlblZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVKb2luUGF5bG9hZChPYmplY3QuYXNzaWduKHsgY29uZmlnIH0sIGFjY2Vzc1Rva2VuUGF5bG9hZCkpO1xuICAgICAgICAgICAgdGhpcy5qb2luZWRPbmNlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Jlam9pbih0aW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuam9pblB1c2hcbiAgICAgICAgICAgICAgICAucmVjZWl2ZSgnb2snLCBhc3luYyAoeyBwb3N0Z3Jlc19jaGFuZ2VzIH0pID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQuc2V0QXV0aCgpO1xuICAgICAgICAgICAgICAgIGlmIChwb3N0Z3Jlc19jaGFuZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMuU1VCU0NSSUJFRCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFBvc3RncmVzQmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLnBvc3RncmVzX2NoYW5nZXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdzTGVuID0gKF9hID0gY2xpZW50UG9zdGdyZXNCaW5kaW5ncyA9PT0gbnVsbCB8fCBjbGllbnRQb3N0Z3Jlc0JpbmRpbmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbGllbnRQb3N0Z3Jlc0JpbmRpbmdzLmxlbmd0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3UG9zdGdyZXNCaW5kaW5ncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmRpbmdzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFBvc3RncmVzQmluZGluZyA9IGNsaWVudFBvc3RncmVzQmluZGluZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGZpbHRlcjogeyBldmVudCwgc2NoZW1hLCB0YWJsZSwgZmlsdGVyIH0sIH0gPSBjbGllbnRQb3N0Z3Jlc0JpbmRpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXJ2ZXJQb3N0Z3Jlc0ZpbHRlciA9IHBvc3RncmVzX2NoYW5nZXMgJiYgcG9zdGdyZXNfY2hhbmdlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXJ2ZXJQb3N0Z3Jlc0ZpbHRlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclBvc3RncmVzRmlsdGVyLmV2ZW50ID09PSBldmVudCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclBvc3RncmVzRmlsdGVyLnNjaGVtYSA9PT0gc2NoZW1hICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyUG9zdGdyZXNGaWx0ZXIudGFibGUgPT09IHRhYmxlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyUG9zdGdyZXNGaWx0ZXIuZmlsdGVyID09PSBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3N0Z3Jlc0JpbmRpbmdzLnB1c2goT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjbGllbnRQb3N0Z3Jlc0JpbmRpbmcpLCB7IGlkOiBzZXJ2ZXJQb3N0Z3Jlc0ZpbHRlci5pZCB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMuQ0hBTk5FTF9FUlJPUiwgbmV3IEVycm9yKCdtaXNtYXRjaCBiZXR3ZWVuIHNlcnZlciBhbmQgY2xpZW50IGJpbmRpbmdzIGZvciBwb3N0Z3JlcyBjaGFuZ2VzJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmRpbmdzLnBvc3RncmVzX2NoYW5nZXMgPSBuZXdQb3N0Z3Jlc0JpbmRpbmdzO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTLlNVQlNDUklCRUQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVjZWl2ZSgnZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZDtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9PT0gbnVsbCB8fCBjYWxsYmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FsbGJhY2soUkVBTFRJTUVfU1VCU0NSSUJFX1NUQVRFUy5DSEFOTkVMX0VSUk9SLCBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoT2JqZWN0LnZhbHVlcyhlcnJvcikuam9pbignLCAnKSB8fCAnZXJyb3InKSkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlY2VpdmUoJ3RpbWVvdXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMuVElNRURfT1VUKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcHJlc2VuY2VTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlc2VuY2Uuc3RhdGU7XG4gICAgfVxuICAgIGFzeW5jIHRyYWNrKHBheWxvYWQsIG9wdHMgPSB7fSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6ICdwcmVzZW5jZScsXG4gICAgICAgICAgICBldmVudDogJ3RyYWNrJyxcbiAgICAgICAgICAgIHBheWxvYWQsXG4gICAgICAgIH0sIG9wdHMudGltZW91dCB8fCB0aGlzLnRpbWVvdXQpO1xuICAgIH1cbiAgICBhc3luYyB1bnRyYWNrKG9wdHMgPSB7fSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6ICdwcmVzZW5jZScsXG4gICAgICAgICAgICBldmVudDogJ3VudHJhY2snLFxuICAgICAgICB9LCBvcHRzKTtcbiAgICB9XG4gICAgb24odHlwZSwgZmlsdGVyLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5fb24odHlwZSwgZmlsdGVyLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgbWVzc2FnZSBpbnRvIHRoZSBjaGFubmVsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIHNlbmQgdG8gY2hhbm5lbFxuICAgICAqIEBwYXJhbSBhcmdzLnR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgdG8gc2VuZFxuICAgICAqIEBwYXJhbSBhcmdzLmV2ZW50IFRoZSBuYW1lIG9mIHRoZSBldmVudCBiZWluZyBzZW50XG4gICAgICogQHBhcmFtIGFyZ3MucGF5bG9hZCBQYXlsb2FkIHRvIGJlIHNlbnRcbiAgICAgKiBAcGFyYW0gb3B0cyBPcHRpb25zIHRvIGJlIHVzZWQgZHVyaW5nIHRoZSBzZW5kIHByb2Nlc3NcbiAgICAgKi9cbiAgICBhc3luYyBzZW5kKGFyZ3MsIG9wdHMgPSB7fSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoIXRoaXMuX2NhblB1c2goKSAmJiBhcmdzLnR5cGUgPT09ICdicm9hZGNhc3QnKSB7XG4gICAgICAgICAgICBjb25zdCB7IGV2ZW50LCBwYXlsb2FkOiBlbmRwb2ludF9wYXlsb2FkIH0gPSBhcmdzO1xuICAgICAgICAgICAgY29uc3QgYXV0aG9yaXphdGlvbiA9IHRoaXMuc29ja2V0LmFjY2Vzc1Rva2VuVmFsdWVcbiAgICAgICAgICAgICAgICA/IGBCZWFyZXIgJHt0aGlzLnNvY2tldC5hY2Nlc3NUb2tlblZhbHVlfWBcbiAgICAgICAgICAgICAgICA6ICcnO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGF1dGhvcml6YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGFwaWtleTogdGhpcy5zb2NrZXQuYXBpS2V5ID8gdGhpcy5zb2NrZXQuYXBpS2V5IDogJycsXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9waWM6IHRoaXMuc3ViVG9waWMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogZW5kcG9pbnRfcGF5bG9hZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcml2YXRlOiB0aGlzLnByaXZhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9mZXRjaFdpdGhUaW1lb3V0KHRoaXMuYnJvYWRjYXN0RW5kcG9pbnRVUkwsIG9wdGlvbnMsIChfYSA9IG9wdHMudGltZW91dCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICBhd2FpdCAoKF9iID0gcmVzcG9uc2UuYm9keSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbmNlbCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uub2sgPyAnb2snIDogJ2Vycm9yJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0aW1lZCBvdXQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdlcnJvcic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICAgICAgY29uc3QgcHVzaCA9IHRoaXMuX3B1c2goYXJncy50eXBlLCBhcmdzLCBvcHRzLnRpbWVvdXQgfHwgdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICBpZiAoYXJncy50eXBlID09PSAnYnJvYWRjYXN0JyAmJiAhKChfYyA9IChfYiA9IChfYSA9IHRoaXMucGFyYW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uZmlnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYnJvYWRjYXN0KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuYWNrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdvaycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwdXNoLnJlY2VpdmUoJ29rJywgKCkgPT4gcmVzb2x2ZSgnb2snKSk7XG4gICAgICAgICAgICAgICAgcHVzaC5yZWNlaXZlKCdlcnJvcicsICgpID0+IHJlc29sdmUoJ2Vycm9yJykpO1xuICAgICAgICAgICAgICAgIHB1c2gucmVjZWl2ZSgndGltZW91dCcsICgpID0+IHJlc29sdmUoJ3RpbWVkIG91dCcpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUpvaW5QYXlsb2FkKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5qb2luUHVzaC51cGRhdGVQYXlsb2FkKHBheWxvYWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgdGhlIGNoYW5uZWwuXG4gICAgICpcbiAgICAgKiBVbnN1YnNjcmliZXMgZnJvbSBzZXJ2ZXIgZXZlbnRzLCBhbmQgaW5zdHJ1Y3RzIGNoYW5uZWwgdG8gdGVybWluYXRlIG9uIHNlcnZlci5cbiAgICAgKiBUcmlnZ2VycyBvbkNsb3NlKCkgaG9va3MuXG4gICAgICpcbiAgICAgKiBUbyByZWNlaXZlIGxlYXZlIGFja25vd2xlZGdlbWVudHMsIHVzZSB0aGUgYSBgcmVjZWl2ZWAgaG9vayB0byBiaW5kIHRvIHRoZSBzZXJ2ZXIgYWNrLCBpZTpcbiAgICAgKiBjaGFubmVsLnVuc3Vic2NyaWJlKCkucmVjZWl2ZShcIm9rXCIsICgpID0+IGFsZXJ0KFwibGVmdCFcIikgKVxuICAgICAqL1xuICAgIHVuc3Vic2NyaWJlKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmxlYXZpbmc7XG4gICAgICAgIGNvbnN0IG9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5sb2coJ2NoYW5uZWwnLCBgbGVhdmUgJHt0aGlzLnRvcGljfWApO1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5jbG9zZSwgJ2xlYXZlJywgdGhpcy5fam9pblJlZigpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5qb2luUHVzaC5kZXN0cm95KCk7XG4gICAgICAgIGxldCBsZWF2ZVB1c2ggPSBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGxlYXZlUHVzaCA9IG5ldyBQdXNoKHRoaXMsIENIQU5ORUxfRVZFTlRTLmxlYXZlLCB7fSwgdGltZW91dCk7XG4gICAgICAgICAgICBsZWF2ZVB1c2hcbiAgICAgICAgICAgICAgICAucmVjZWl2ZSgnb2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgb25DbG9zZSgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoJ29rJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZWNlaXZlKCd0aW1lb3V0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCd0aW1lZCBvdXQnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlY2VpdmUoJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoJ2Vycm9yJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxlYXZlUHVzaC5zZW5kKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2NhblB1c2goKSkge1xuICAgICAgICAgICAgICAgIGxlYXZlUHVzaC50cmlnZ2VyKCdvaycsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICBsZWF2ZVB1c2ggPT09IG51bGwgfHwgbGVhdmVQdXNoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsZWF2ZVB1c2guZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVhcmRvd24gdGhlIGNoYW5uZWwuXG4gICAgICpcbiAgICAgKiBEZXN0cm95cyBhbmQgc3RvcHMgcmVsYXRlZCB0aW1lcnMuXG4gICAgICovXG4gICAgdGVhcmRvd24oKSB7XG4gICAgICAgIHRoaXMucHVzaEJ1ZmZlci5mb3JFYWNoKChwdXNoKSA9PiBwdXNoLmRlc3Ryb3koKSk7XG4gICAgICAgIHRoaXMucmVqb2luVGltZXIgJiYgY2xlYXJUaW1lb3V0KHRoaXMucmVqb2luVGltZXIudGltZXIpO1xuICAgICAgICB0aGlzLmpvaW5QdXNoLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9mZXRjaFdpdGhUaW1lb3V0KHVybCwgb3B0aW9ucywgdGltZW91dCkge1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICBjb25zdCBpZCA9IHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5hYm9ydCgpLCB0aW1lb3V0KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnNvY2tldC5mZXRjaCh1cmwsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCB9KSk7XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9wdXNoKGV2ZW50LCBwYXlsb2FkLCB0aW1lb3V0ID0gdGhpcy50aW1lb3V0KSB7XG4gICAgICAgIGlmICghdGhpcy5qb2luZWRPbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBgdHJpZWQgdG8gcHVzaCAnJHtldmVudH0nIHRvICcke3RoaXMudG9waWN9JyBiZWZvcmUgam9pbmluZy4gVXNlIGNoYW5uZWwuc3Vic2NyaWJlKCkgYmVmb3JlIHB1c2hpbmcgZXZlbnRzYDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHVzaEV2ZW50ID0gbmV3IFB1c2godGhpcywgZXZlbnQsIHBheWxvYWQsIHRpbWVvdXQpO1xuICAgICAgICBpZiAodGhpcy5fY2FuUHVzaCgpKSB7XG4gICAgICAgICAgICBwdXNoRXZlbnQuc2VuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHVzaEV2ZW50LnN0YXJ0VGltZW91dCgpO1xuICAgICAgICAgICAgdGhpcy5wdXNoQnVmZmVyLnB1c2gocHVzaEV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHVzaEV2ZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkYWJsZSBtZXNzYWdlIGhvb2tcbiAgICAgKlxuICAgICAqIFJlY2VpdmVzIGFsbCBldmVudHMgZm9yIHNwZWNpYWxpemVkIG1lc3NhZ2UgaGFuZGxpbmcgYmVmb3JlIGRpc3BhdGNoaW5nIHRvIHRoZSBjaGFubmVsIGNhbGxiYWNrcy5cbiAgICAgKiBNdXN0IHJldHVybiB0aGUgcGF5bG9hZCwgbW9kaWZpZWQgb3IgdW5tb2RpZmllZC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9vbk1lc3NhZ2UoX2V2ZW50LCBwYXlsb2FkLCBfcmVmKSB7XG4gICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2lzTWVtYmVyKHRvcGljKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvcGljID09PSB0b3BpYztcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9qb2luUmVmKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qb2luUHVzaC5yZWY7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfdHJpZ2dlcih0eXBlLCBwYXlsb2FkLCByZWYpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgdHlwZUxvd2VyID0gdHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB7IGNsb3NlLCBlcnJvciwgbGVhdmUsIGpvaW4gfSA9IENIQU5ORUxfRVZFTlRTO1xuICAgICAgICBjb25zdCBldmVudHMgPSBbY2xvc2UsIGVycm9yLCBsZWF2ZSwgam9pbl07XG4gICAgICAgIGlmIChyZWYgJiYgZXZlbnRzLmluZGV4T2YodHlwZUxvd2VyKSA+PSAwICYmIHJlZiAhPT0gdGhpcy5fam9pblJlZigpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGhhbmRsZWRQYXlsb2FkID0gdGhpcy5fb25NZXNzYWdlKHR5cGVMb3dlciwgcGF5bG9hZCwgcmVmKTtcbiAgICAgICAgaWYgKHBheWxvYWQgJiYgIWhhbmRsZWRQYXlsb2FkKSB7XG4gICAgICAgICAgICB0aHJvdyAnY2hhbm5lbCBvbk1lc3NhZ2UgY2FsbGJhY2tzIG11c3QgcmV0dXJuIHRoZSBwYXlsb2FkLCBtb2RpZmllZCBvciB1bm1vZGlmaWVkJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoWydpbnNlcnQnLCAndXBkYXRlJywgJ2RlbGV0ZSddLmluY2x1ZGVzKHR5cGVMb3dlcikpIHtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuYmluZGluZ3MucG9zdGdyZXNfY2hhbmdlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZpbHRlcigoYmluZCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKChfYSA9IGJpbmQuZmlsdGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXZlbnQpID09PSAnKicgfHxcbiAgICAgICAgICAgICAgICAgICAgKChfYyA9IChfYiA9IGJpbmQuZmlsdGVyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZXZlbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50b0xvY2FsZUxvd2VyQ2FzZSgpKSA9PT0gdHlwZUxvd2VyKTtcbiAgICAgICAgICAgIH0pLm1hcCgoYmluZCkgPT4gYmluZC5jYWxsYmFjayhoYW5kbGVkUGF5bG9hZCwgcmVmKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAoX2IgPSB0aGlzLmJpbmRpbmdzW3R5cGVMb3dlcl0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5maWx0ZXIoKGJpbmQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgICAgICAgICBpZiAoWydicm9hZGNhc3QnLCAncHJlc2VuY2UnLCAncG9zdGdyZXNfY2hhbmdlcyddLmluY2x1ZGVzKHR5cGVMb3dlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdpZCcgaW4gYmluZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmluZElkID0gYmluZC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJpbmRFdmVudCA9IChfYSA9IGJpbmQuZmlsdGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGJpbmRJZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoX2IgPSBwYXlsb2FkLmlkcykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmluY2x1ZGVzKGJpbmRJZCkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJpbmRFdmVudCA9PT0gJyonIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiaW5kRXZlbnQgPT09IG51bGwgfHwgYmluZEV2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBiaW5kRXZlbnQudG9Mb2NhbGVMb3dlckNhc2UoKSkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKF9jID0gcGF5bG9hZC5kYXRhKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmluZEV2ZW50ID0gKF9lID0gKF9kID0gYmluZCA9PT0gbnVsbCB8fCBiaW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBiaW5kLmZpbHRlcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmV2ZW50KSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYmluZEV2ZW50ID09PSAnKicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kRXZlbnQgPT09ICgoX2YgPSBwYXlsb2FkID09PSBudWxsIHx8IHBheWxvYWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBheWxvYWQuZXZlbnQpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi50b0xvY2FsZUxvd2VyQ2FzZSgpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiaW5kLnR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gdHlwZUxvd2VyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLm1hcCgoYmluZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlZFBheWxvYWQgPT09ICdvYmplY3QnICYmICdpZHMnIGluIGhhbmRsZWRQYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc3RncmVzQ2hhbmdlcyA9IGhhbmRsZWRQYXlsb2FkLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgc2NoZW1hLCB0YWJsZSwgY29tbWl0X3RpbWVzdGFtcCwgdHlwZSwgZXJyb3JzIH0gPSBwb3N0Z3Jlc0NoYW5nZXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVucmljaGVkUGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVtYTogc2NoZW1hLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IHRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0X3RpbWVzdGFtcDogY29tbWl0X3RpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldzoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGQ6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWRQYXlsb2FkID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBlbnJpY2hlZFBheWxvYWQpLCB0aGlzLl9nZXRQYXlsb2FkUmVjb3Jkcyhwb3N0Z3Jlc0NoYW5nZXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmluZC5jYWxsYmFjayhoYW5kbGVkUGF5bG9hZCwgcmVmKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfaXNDbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5jbG9zZWQ7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfaXNKb2luZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5qb2luZWQ7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfaXNKb2luaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuam9pbmluZztcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9pc0xlYXZpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5sZWF2aW5nO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3JlcGx5RXZlbnROYW1lKHJlZikge1xuICAgICAgICByZXR1cm4gYGNoYW5fcmVwbHlfJHtyZWZ9YDtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9vbih0eXBlLCBmaWx0ZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHR5cGVMb3dlciA9IHR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgYmluZGluZyA9IHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGVMb3dlcixcbiAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5iaW5kaW5nc1t0eXBlTG93ZXJdKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzW3R5cGVMb3dlcl0ucHVzaChiaW5kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYmluZGluZ3NbdHlwZUxvd2VyXSA9IFtiaW5kaW5nXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9vZmYodHlwZSwgZmlsdGVyKSB7XG4gICAgICAgIGNvbnN0IHR5cGVMb3dlciA9IHR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgdGhpcy5iaW5kaW5nc1t0eXBlTG93ZXJdID0gdGhpcy5iaW5kaW5nc1t0eXBlTG93ZXJdLmZpbHRlcigoYmluZCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICEoKChfYSA9IGJpbmQudHlwZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvTG9jYWxlTG93ZXJDYXNlKCkpID09PSB0eXBlTG93ZXIgJiZcbiAgICAgICAgICAgICAgICBSZWFsdGltZUNoYW5uZWwuaXNFcXVhbChiaW5kLmZpbHRlciwgZmlsdGVyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHN0YXRpYyBpc0VxdWFsKG9iajEsIG9iajIpIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9iajEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMob2JqMikubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrIGluIG9iajEpIHtcbiAgICAgICAgICAgIGlmIChvYmoxW2tdICE9PSBvYmoyW2tdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3Jlam9pblVudGlsQ29ubmVjdGVkKCkge1xuICAgICAgICB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpO1xuICAgICAgICBpZiAodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fcmVqb2luKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNoYW5uZWwgY2xvc2VzLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX29uQ2xvc2UoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb24oQ0hBTk5FTF9FVkVOVFMuY2xvc2UsIHt9LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBjaGFubmVsIGVuY291bnRlcmVzIGFuIGVycm9yLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX29uRXJyb3IoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb24oQ0hBTk5FTF9FVkVOVFMuZXJyb3IsIHt9LCAocmVhc29uKSA9PiBjYWxsYmFjayhyZWFzb24pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHNvY2tldCBpcyBjb25uZWN0ZWQgYW5kIHRoZSBjaGFubmVsIGhhcyBiZWVuIGpvaW5lZC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9jYW5QdXNoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSAmJiB0aGlzLl9pc0pvaW5lZCgpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3Jlam9pbih0aW1lb3V0ID0gdGhpcy50aW1lb3V0KSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0xlYXZpbmcoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc29ja2V0Ll9sZWF2ZU9wZW5Ub3BpYyh0aGlzLnRvcGljKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmpvaW5pbmc7XG4gICAgICAgIHRoaXMuam9pblB1c2gucmVzZW5kKHRpbWVvdXQpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2dldFBheWxvYWRSZWNvcmRzKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QgcmVjb3JkcyA9IHtcbiAgICAgICAgICAgIG5ldzoge30sXG4gICAgICAgICAgICBvbGQ6IHt9LFxuICAgICAgICB9O1xuICAgICAgICBpZiAocGF5bG9hZC50eXBlID09PSAnSU5TRVJUJyB8fCBwYXlsb2FkLnR5cGUgPT09ICdVUERBVEUnKSB7XG4gICAgICAgICAgICByZWNvcmRzLm5ldyA9IFRyYW5zZm9ybWVycy5jb252ZXJ0Q2hhbmdlRGF0YShwYXlsb2FkLmNvbHVtbnMsIHBheWxvYWQucmVjb3JkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC50eXBlID09PSAnVVBEQVRFJyB8fCBwYXlsb2FkLnR5cGUgPT09ICdERUxFVEUnKSB7XG4gICAgICAgICAgICByZWNvcmRzLm9sZCA9IFRyYW5zZm9ybWVycy5jb252ZXJ0Q2hhbmdlRGF0YShwYXlsb2FkLmNvbHVtbnMsIHBheWxvYWQub2xkX3JlY29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY29yZHM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVhbHRpbWVDaGFubmVsLmpzLm1hcCIsImltcG9ydCB7IFdlYlNvY2tldCB9IGZyb20gJ2lzb3dzJztcbmltcG9ydCB7IENIQU5ORUxfRVZFTlRTLCBDT05ORUNUSU9OX1NUQVRFLCBERUZBVUxUX1ZFUlNJT04sIERFRkFVTFRfVElNRU9VVCwgU09DS0VUX1NUQVRFUywgVFJBTlNQT1JUUywgVlNOLCBXU19DTE9TRV9OT1JNQUwsIH0gZnJvbSAnLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCBTZXJpYWxpemVyIGZyb20gJy4vbGliL3NlcmlhbGl6ZXInO1xuaW1wb3J0IFRpbWVyIGZyb20gJy4vbGliL3RpbWVyJztcbmltcG9ydCB7IGh0dHBFbmRwb2ludFVSTCB9IGZyb20gJy4vbGliL3RyYW5zZm9ybWVycyc7XG5pbXBvcnQgUmVhbHRpbWVDaGFubmVsIGZyb20gJy4vUmVhbHRpbWVDaGFubmVsJztcbmNvbnN0IG5vb3AgPSAoKSA9PiB7IH07XG5jb25zdCBXT1JLRVJfU0NSSVBUID0gYFxuICBhZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoZSkgPT4ge1xuICAgIGlmIChlLmRhdGEuZXZlbnQgPT09IFwic3RhcnRcIikge1xuICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gcG9zdE1lc3NhZ2UoeyBldmVudDogXCJrZWVwQWxpdmVcIiB9KSwgZS5kYXRhLmludGVydmFsKTtcbiAgICB9XG4gIH0pO2A7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFsdGltZUNsaWVudCB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIFNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbmRQb2ludCBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIFwid3M6Ly9leGFtcGxlLmNvbS9zb2NrZXRcIiwgXCJ3c3M6Ly9leGFtcGxlLmNvbVwiLCBcIi9zb2NrZXRcIiAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAgICAgKiBAcGFyYW0gaHR0cEVuZHBvaW50IFRoZSBzdHJpbmcgSFRUUCBlbmRwb2ludCwgaWUsIFwiaHR0cHM6Ly9leGFtcGxlLmNvbVwiLCBcIi9cIiAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50cmFuc3BvcnQgVGhlIFdlYnNvY2tldCBUcmFuc3BvcnQsIGZvciBleGFtcGxlIFdlYlNvY2tldC4gVGhpcyBjYW4gYmUgYSBjdXN0b20gaW1wbGVtZW50YXRpb25cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50aW1lb3V0IFRoZSBkZWZhdWx0IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIHRyaWdnZXIgcHVzaCB0aW1lb3V0cy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5wYXJhbXMgVGhlIG9wdGlvbmFsIHBhcmFtcyB0byBwYXNzIHdoZW4gY29ubmVjdGluZy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5oZWFkZXJzIERlcHJlY2F0ZWQ6IGhlYWRlcnMgY2Fubm90IGJlIHNldCBvbiB3ZWJzb2NrZXQgY29ubmVjdGlvbnMgYW5kIHRoaXMgb3B0aW9uIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmhlYXJ0YmVhdEludGVydmFsTXMgVGhlIG1pbGxpc2VjIGludGVydmFsIHRvIHNlbmQgYSBoZWFydGJlYXQgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5sb2dnZXIgVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIGZvciBzcGVjaWFsaXplZCBsb2dnaW5nLCBpZTogbG9nZ2VyOiAoa2luZCwgbXNnLCBkYXRhKSA9PiB7IGNvbnNvbGUubG9nKGAke2tpbmR9OiAke21zZ31gLCBkYXRhKSB9XG4gICAgICogQHBhcmFtIG9wdGlvbnMubG9nTGV2ZWwgU2V0cyB0aGUgbG9nIGxldmVsIGZvciBSZWFsdGltZVxuICAgICAqIEBwYXJhbSBvcHRpb25zLmVuY29kZSBUaGUgZnVuY3Rpb24gdG8gZW5jb2RlIG91dGdvaW5nIG1lc3NhZ2VzLiBEZWZhdWx0cyB0byBKU09OOiAocGF5bG9hZCwgY2FsbGJhY2spID0+IGNhbGxiYWNrKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKVxuICAgICAqIEBwYXJhbSBvcHRpb25zLmRlY29kZSBUaGUgZnVuY3Rpb24gdG8gZGVjb2RlIGluY29taW5nIG1lc3NhZ2VzLiBEZWZhdWx0cyB0byBTZXJpYWxpemVyJ3MgZGVjb2RlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnJlY29ubmVjdEFmdGVyTXMgaGUgb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtaWxsc2VjIHJlY29ubmVjdCBpbnRlcnZhbC4gRGVmYXVsdHMgdG8gc3RlcHBlZCBiYWNrb2ZmIG9mZi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy53b3JrZXIgVXNlIFdlYiBXb3JrZXIgdG8gc2V0IGEgc2lkZSBmbG93LiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy53b3JrZXJVcmwgVGhlIFVSTCBvZiB0aGUgd29ya2VyIHNjcmlwdC4gRGVmYXVsdHMgdG8gaHR0cHM6Ly9yZWFsdGltZS5zdXBhYmFzZS5jb20vd29ya2VyLmpzIHRoYXQgaW5jbHVkZXMgYSBoZWFydGJlYXQgZXZlbnQgY2FsbCB0byBrZWVwIHRoZSBjb25uZWN0aW9uIGFsaXZlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVuZFBvaW50LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlblZhbHVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBudWxsO1xuICAgICAgICB0aGlzLmNoYW5uZWxzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMuZW5kUG9pbnQgPSAnJztcbiAgICAgICAgdGhpcy5odHRwRW5kcG9pbnQgPSAnJztcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIGhlYWRlcnMgY2Fubm90IGJlIHNldCBvbiB3ZWJzb2NrZXQgY29ubmVjdGlvbnMgKi9cbiAgICAgICAgdGhpcy5oZWFkZXJzID0ge307XG4gICAgICAgIHRoaXMucGFyYW1zID0ge307XG4gICAgICAgIHRoaXMudGltZW91dCA9IERFRkFVTFRfVElNRU9VVDtcbiAgICAgICAgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zID0gMjUwMDA7XG4gICAgICAgIHRoaXMuaGVhcnRiZWF0VGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGw7XG4gICAgICAgIHRoaXMuaGVhcnRiZWF0Q2FsbGJhY2sgPSBub29wO1xuICAgICAgICB0aGlzLnJlZiA9IDA7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gbm9vcDtcbiAgICAgICAgdGhpcy5jb25uID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc2VyaWFsaXplciA9IG5ldyBTZXJpYWxpemVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICBvcGVuOiBbXSxcbiAgICAgICAgICAgIGNsb3NlOiBbXSxcbiAgICAgICAgICAgIGVycm9yOiBbXSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFtdLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZSBlaXRoZXIgY3VzdG9tIGZldGNoLCBpZiBwcm92aWRlZCwgb3IgZGVmYXVsdCBmZXRjaCB0byBtYWtlIEhUVFAgcmVxdWVzdHNcbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9yZXNvbHZlRmV0Y2ggPSAoY3VzdG9tRmV0Y2gpID0+IHtcbiAgICAgICAgICAgIGxldCBfZmV0Y2g7XG4gICAgICAgICAgICBpZiAoY3VzdG9tRmV0Y2gpIHtcbiAgICAgICAgICAgICAgICBfZmV0Y2ggPSBjdXN0b21GZXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBmZXRjaCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfZmV0Y2ggPSAoLi4uYXJncykgPT4gaW1wb3J0KCdAc3VwYWJhc2Uvbm9kZS1mZXRjaCcpLnRoZW4oKHsgZGVmYXVsdDogZmV0Y2ggfSkgPT4gZmV0Y2goLi4uYXJncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX2ZldGNoID0gZmV0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IF9mZXRjaCguLi5hcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbmRQb2ludCA9IGAke2VuZFBvaW50fS8ke1RSQU5TUE9SVFMud2Vic29ja2V0fWA7XG4gICAgICAgIHRoaXMuaHR0cEVuZHBvaW50ID0gaHR0cEVuZHBvaW50VVJMKGVuZFBvaW50KTtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gb3B0aW9ucy50cmFuc3BvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wYXJhbXMpXG4gICAgICAgICAgICB0aGlzLnBhcmFtcyA9IG9wdGlvbnMucGFyYW1zO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXQpXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQ7XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9nZ2VyKVxuICAgICAgICAgICAgdGhpcy5sb2dnZXIgPSBvcHRpb25zLmxvZ2dlcjtcbiAgICAgICAgaWYgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9nTGV2ZWwpIHx8IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9nX2xldmVsKSkge1xuICAgICAgICAgICAgdGhpcy5sb2dMZXZlbCA9IG9wdGlvbnMubG9nTGV2ZWwgfHwgb3B0aW9ucy5sb2dfbGV2ZWw7XG4gICAgICAgICAgICB0aGlzLnBhcmFtcyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wYXJhbXMpLCB7IGxvZ19sZXZlbDogdGhpcy5sb2dMZXZlbCB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYXJ0YmVhdEludGVydmFsTXMpXG4gICAgICAgICAgICB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMgPSBvcHRpb25zLmhlYXJ0YmVhdEludGVydmFsTXM7XG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuVmFsdWUgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucGFyYW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXBpa2V5O1xuICAgICAgICBpZiAoYWNjZXNzVG9rZW5WYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hY2Nlc3NUb2tlblZhbHVlID0gYWNjZXNzVG9rZW5WYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuYXBpS2V5ID0gYWNjZXNzVG9rZW5WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlY29ubmVjdEFmdGVyTXMgPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlY29ubmVjdEFmdGVyTXMpXG4gICAgICAgICAgICA/IG9wdGlvbnMucmVjb25uZWN0QWZ0ZXJNc1xuICAgICAgICAgICAgOiAodHJpZXMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzEwMDAsIDIwMDAsIDUwMDAsIDEwMDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbmNvZGUgPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmVuY29kZSlcbiAgICAgICAgICAgID8gb3B0aW9ucy5lbmNvZGVcbiAgICAgICAgICAgIDogKHBheWxvYWQsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuZGVjb2RlID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kZWNvZGUpXG4gICAgICAgICAgICA/IG9wdGlvbnMuZGVjb2RlXG4gICAgICAgICAgICA6IHRoaXMuc2VyaWFsaXplci5kZWNvZGUuYmluZCh0aGlzLnNlcmlhbGl6ZXIpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gbmV3IFRpbWVyKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0KCk7XG4gICAgICAgIH0sIHRoaXMucmVjb25uZWN0QWZ0ZXJNcyk7XG4gICAgICAgIHRoaXMuZmV0Y2ggPSB0aGlzLl9yZXNvbHZlRmV0Y2gob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZldGNoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53b3JrZXIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAhd2luZG93Lldvcmtlcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2ViIFdvcmtlciBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLndvcmtlciA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud29ya2VyKSB8fCBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMud29ya2VyVXJsID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndvcmtlclVybDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hY2Nlc3NUb2tlbikgfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29ubmVjdHMgdGhlIHNvY2tldCwgdW5sZXNzIGFscmVhZHkgY29ubmVjdGVkLlxuICAgICAqL1xuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMudHJhbnNwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IFdlYlNvY2tldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMudHJhbnNwb3J0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRyYW5zcG9ydCBwcm92aWRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubiA9IG5ldyB0aGlzLnRyYW5zcG9ydCh0aGlzLmVuZHBvaW50VVJMKCkpO1xuICAgICAgICB0aGlzLnNldHVwQ29ubmVjdGlvbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBVUkwgb2YgdGhlIHdlYnNvY2tldC5cbiAgICAgKiBAcmV0dXJucyBzdHJpbmcgVGhlIFVSTCBvZiB0aGUgd2Vic29ja2V0LlxuICAgICAqL1xuICAgIGVuZHBvaW50VVJMKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwZW5kUGFyYW1zKHRoaXMuZW5kUG9pbnQsIE9iamVjdC5hc3NpZ24oe30sIHRoaXMucGFyYW1zLCB7IHZzbjogVlNOIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgdGhlIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2RlIEEgbnVtZXJpYyBzdGF0dXMgY29kZSB0byBzZW5kIG9uIGRpc2Nvbm5lY3QuXG4gICAgICogQHBhcmFtIHJlYXNvbiBBIGN1c3RvbSByZWFzb24gZm9yIHRoZSBkaXNjb25uZWN0LlxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoY29kZSwgcmVhc29uKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm4pIHtcbiAgICAgICAgICAgIHRoaXMuY29ubi5vbmNsb3NlID0gZnVuY3Rpb24gKCkgeyB9OyAvLyBub29wXG4gICAgICAgICAgICBpZiAoY29kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubi5jbG9zZShjb2RlLCByZWFzb24gIT09IG51bGwgJiYgcmVhc29uICE9PSB2b2lkIDAgPyByZWFzb24gOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm4uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29ubiA9IG51bGw7XG4gICAgICAgICAgICAvLyByZW1vdmUgb3BlbiBoYW5kbGVzXG4gICAgICAgICAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyICYmIGNsZWFySW50ZXJ2YWwodGhpcy5oZWFydGJlYXRUaW1lcik7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxzLmZvckVhY2goKGNoYW5uZWwpID0+IGNoYW5uZWwudGVhcmRvd24oKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgY3JlYXRlZCBjaGFubmVsc1xuICAgICAqL1xuICAgIGdldENoYW5uZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVscztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmVzIGFuZCByZW1vdmVzIGEgc2luZ2xlIGNoYW5uZWxcbiAgICAgKiBAcGFyYW0gY2hhbm5lbCBBIFJlYWx0aW1lQ2hhbm5lbCBpbnN0YW5jZVxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZUNoYW5uZWwoY2hhbm5lbCkge1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBjaGFubmVsLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGlmICh0aGlzLmNoYW5uZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmVzIGFuZCByZW1vdmVzIGFsbCBjaGFubmVsc1xuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZUFsbENoYW5uZWxzKCkge1xuICAgICAgICBjb25zdCB2YWx1ZXNfMSA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMuY2hhbm5lbHMubWFwKChjaGFubmVsKSA9PiBjaGFubmVsLnVuc3Vic2NyaWJlKCkpKTtcbiAgICAgICAgdGhpcy5jaGFubmVscyA9IFtdO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlc18xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2dzIHRoZSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogRm9yIGN1c3RvbWl6ZWQgbG9nZ2luZywgYHRoaXMubG9nZ2VyYCBjYW4gYmUgb3ZlcnJpZGRlbi5cbiAgICAgKi9cbiAgICBsb2coa2luZCwgbXNnLCBkYXRhKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyKGtpbmQsIG1zZywgZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNvY2tldC5cbiAgICAgKi9cbiAgICBjb25uZWN0aW9uU3RhdGUoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5jb25uICYmIHRoaXMuY29ubi5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZzpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ09OTkVDVElPTl9TVEFURS5Db25uZWN0aW5nO1xuICAgICAgICAgICAgY2FzZSBTT0NLRVRfU1RBVEVTLm9wZW46XG4gICAgICAgICAgICAgICAgcmV0dXJuIENPTk5FQ1RJT05fU1RBVEUuT3BlbjtcbiAgICAgICAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5jbG9zaW5nOlxuICAgICAgICAgICAgICAgIHJldHVybiBDT05ORUNUSU9OX1NUQVRFLkNsb3Npbmc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBDT05ORUNUSU9OX1NUQVRFLkNsb3NlZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpcyB0aGUgY29ubmVjdGlvbiBpcyBvcGVuLlxuICAgICAqL1xuICAgIGlzQ29ubmVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uU3RhdGUoKSA9PT0gQ09OTkVDVElPTl9TVEFURS5PcGVuO1xuICAgIH1cbiAgICBjaGFubmVsKHRvcGljLCBwYXJhbXMgPSB7IGNvbmZpZzoge30gfSkge1xuICAgICAgICBjb25zdCByZWFsdGltZVRvcGljID0gYHJlYWx0aW1lOiR7dG9waWN9YDtcbiAgICAgICAgY29uc3QgZXhpc3RzID0gdGhpcy5nZXRDaGFubmVscygpLmZpbmQoKGMpID0+IGMudG9waWMgPT09IHJlYWx0aW1lVG9waWMpO1xuICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgY29uc3QgY2hhbiA9IG5ldyBSZWFsdGltZUNoYW5uZWwoYHJlYWx0aW1lOiR7dG9waWN9YCwgcGFyYW1zLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbHMucHVzaChjaGFuKTtcbiAgICAgICAgICAgIHJldHVybiBjaGFuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0cztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBQdXNoIG91dCBhIG1lc3NhZ2UgaWYgdGhlIHNvY2tldCBpcyBjb25uZWN0ZWQuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgc29ja2V0IGlzIG5vdCBjb25uZWN0ZWQsIHRoZSBtZXNzYWdlIGdldHMgZW5xdWV1ZWQgd2l0aGluIGEgbG9jYWwgYnVmZmVyLCBhbmQgc2VudCBvdXQgd2hlbiBhIGNvbm5lY3Rpb24gaXMgbmV4dCBlc3RhYmxpc2hlZC5cbiAgICAgKi9cbiAgICBwdXNoKGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyB0b3BpYywgZXZlbnQsIHBheWxvYWQsIHJlZiB9ID0gZGF0YTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVuY29kZShkYXRhLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIChfYSA9IHRoaXMuY29ubikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNlbmQocmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxvZygncHVzaCcsIGAke3RvcGljfSAke2V2ZW50fSAoJHtyZWZ9KWAsIHBheWxvYWQpO1xuICAgICAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZW5kQnVmZmVyLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIEpXVCBhY2Nlc3MgdG9rZW4gdXNlZCBmb3IgY2hhbm5lbCBzdWJzY3JpcHRpb24gYXV0aG9yaXphdGlvbiBhbmQgUmVhbHRpbWUgUkxTLlxuICAgICAqXG4gICAgICogSWYgcGFyYW0gaXMgbnVsbCBpdCB3aWxsIHVzZSB0aGUgYGFjY2Vzc1Rva2VuYCBjYWxsYmFjayBmdW5jdGlvbiBvciB0aGUgdG9rZW4gc2V0IG9uIHRoZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBPbiBjYWxsYmFjayB1c2VkLCBpdCB3aWxsIHNldCB0aGUgdmFsdWUgb2YgdGhlIHRva2VuIGludGVybmFsIHRvIHRoZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9rZW4gQSBKV1Qgc3RyaW5nIHRvIG92ZXJyaWRlIHRoZSB0b2tlbiBzZXQgb24gdGhlIGNsaWVudC5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRBdXRoKHRva2VuID0gbnVsbCkge1xuICAgICAgICBsZXQgdG9rZW5Ub1NlbmQgPSB0b2tlbiB8fFxuICAgICAgICAgICAgKHRoaXMuYWNjZXNzVG9rZW4gJiYgKGF3YWl0IHRoaXMuYWNjZXNzVG9rZW4oKSkpIHx8XG4gICAgICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuVmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmFjY2Vzc1Rva2VuVmFsdWUgIT0gdG9rZW5Ub1NlbmQpIHtcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzVG9rZW5WYWx1ZSA9IHRva2VuVG9TZW5kO1xuICAgICAgICAgICAgdGhpcy5jaGFubmVscy5mb3JFYWNoKChjaGFubmVsKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiB0b2tlblRvU2VuZCxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogREVGQVVMVF9WRVJTSU9OLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdG9rZW5Ub1NlbmQgJiYgY2hhbm5lbC51cGRhdGVKb2luUGF5bG9hZChwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbm5lbC5qb2luZWRPbmNlICYmIGNoYW5uZWwuX2lzSm9pbmVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbC5fcHVzaChDSEFOTkVMX0VWRU5UUy5hY2Nlc3NfdG9rZW4sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc190b2tlbjogdG9rZW5Ub1NlbmQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgaGVhcnRiZWF0IG1lc3NhZ2UgaWYgdGhlIHNvY2tldCBpcyBjb25uZWN0ZWQuXG4gICAgICovXG4gICAgYXN5bmMgc2VuZEhlYXJ0YmVhdCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5oZWFydGJlYXRDYWxsYmFjaygnZGlzY29ubmVjdGVkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZikge1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubG9nKCd0cmFuc3BvcnQnLCAnaGVhcnRiZWF0IHRpbWVvdXQuIEF0dGVtcHRpbmcgdG8gcmUtZXN0YWJsaXNoIGNvbm5lY3Rpb24nKTtcbiAgICAgICAgICAgIHRoaXMuaGVhcnRiZWF0Q2FsbGJhY2soJ3RpbWVvdXQnKTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuY29ubikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsb3NlKFdTX0NMT1NFX05PUk1BTCwgJ2hlYXJiZWF0IHRpbWVvdXQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSB0aGlzLl9tYWtlUmVmKCk7XG4gICAgICAgIHRoaXMucHVzaCh7XG4gICAgICAgICAgICB0b3BpYzogJ3Bob2VuaXgnLFxuICAgICAgICAgICAgZXZlbnQ6ICdoZWFydGJlYXQnLFxuICAgICAgICAgICAgcGF5bG9hZDoge30sXG4gICAgICAgICAgICByZWY6IHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZixcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGVhcnRiZWF0Q2FsbGJhY2soJ3NlbnQnKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRBdXRoKCk7XG4gICAgfVxuICAgIG9uSGVhcnRiZWF0KGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaGVhcnRiZWF0Q2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmx1c2hlcyBzZW5kIGJ1ZmZlclxuICAgICAqL1xuICAgIGZsdXNoU2VuZEJ1ZmZlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQoKSAmJiB0aGlzLnNlbmRCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zZW5kQnVmZmVyLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjaygpKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgbmV4dCBtZXNzYWdlIHJlZiwgYWNjb3VudGluZyBmb3Igb3ZlcmZsb3dzXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfbWFrZVJlZigpIHtcbiAgICAgICAgbGV0IG5ld1JlZiA9IHRoaXMucmVmICsgMTtcbiAgICAgICAgaWYgKG5ld1JlZiA9PT0gdGhpcy5yZWYpIHtcbiAgICAgICAgICAgIHRoaXMucmVmID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVmID0gbmV3UmVmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlZi50b1N0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZSBmcm9tIGNoYW5uZWxzIHdpdGggdGhlIHNwZWNpZmllZCB0b3BpYy5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9sZWF2ZU9wZW5Ub3BpYyh0b3BpYykge1xuICAgICAgICBsZXQgZHVwQ2hhbm5lbCA9IHRoaXMuY2hhbm5lbHMuZmluZCgoYykgPT4gYy50b3BpYyA9PT0gdG9waWMgJiYgKGMuX2lzSm9pbmVkKCkgfHwgYy5faXNKb2luaW5nKCkpKTtcbiAgICAgICAgaWYgKGR1cENoYW5uZWwpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKCd0cmFuc3BvcnQnLCBgbGVhdmluZyBkdXBsaWNhdGUgdG9waWMgXCIke3RvcGljfVwiYCk7XG4gICAgICAgICAgICBkdXBDaGFubmVsLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHN1YnNjcmlwdGlvbiBmcm9tIHRoZSBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2hhbm5lbCBBbiBvcGVuIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9yZW1vdmUoY2hhbm5lbCkge1xuICAgICAgICB0aGlzLmNoYW5uZWxzID0gdGhpcy5jaGFubmVscy5maWx0ZXIoKGMpID0+IGMudG9waWMgIT09IGNoYW5uZWwudG9waWMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIGNvbm5lY3Rpb24gaGFuZGxlcnMuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzZXR1cENvbm5lY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm4pIHtcbiAgICAgICAgICAgIHRoaXMuY29ubi5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICAgIHRoaXMuY29ubi5vbm9wZW4gPSAoKSA9PiB0aGlzLl9vbkNvbm5PcGVuKCk7XG4gICAgICAgICAgICB0aGlzLmNvbm4ub25lcnJvciA9IChlcnJvcikgPT4gdGhpcy5fb25Db25uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5jb25uLm9ubWVzc2FnZSA9IChldmVudCkgPT4gdGhpcy5fb25Db25uTWVzc2FnZShldmVudCk7XG4gICAgICAgICAgICB0aGlzLmNvbm4ub25jbG9zZSA9IChldmVudCkgPT4gdGhpcy5fb25Db25uQ2xvc2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfb25Db25uTWVzc2FnZShyYXdNZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuZGVjb2RlKHJhd01lc3NhZ2UuZGF0YSwgKG1zZykgPT4ge1xuICAgICAgICAgICAgbGV0IHsgdG9waWMsIGV2ZW50LCBwYXlsb2FkLCByZWYgfSA9IG1zZztcbiAgICAgICAgICAgIGlmICh0b3BpYyA9PT0gJ3Bob2VuaXgnICYmIGV2ZW50ID09PSAncGh4X3JlcGx5Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhcnRiZWF0Q2FsbGJhY2sobXNnLnBheWxvYWQuc3RhdHVzID09ICdvaycgPyAnb2snIDogJ2Vycm9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVmICYmIHJlZiA9PT0gdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubG9nKCdyZWNlaXZlJywgYCR7cGF5bG9hZC5zdGF0dXMgfHwgJyd9ICR7dG9waWN9ICR7ZXZlbnR9ICR7KHJlZiAmJiAnKCcgKyByZWYgKyAnKScpIHx8ICcnfWAsIHBheWxvYWQpO1xuICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmNoYW5uZWxzKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGNoYW5uZWwpID0+IGNoYW5uZWwuX2lzTWVtYmVyKHRvcGljKSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgoY2hhbm5lbCkgPT4gY2hhbm5lbC5fdHJpZ2dlcihldmVudCwgcGF5bG9hZCwgcmVmKSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2UuZm9yRWFjaCgoY2FsbGJhY2spID0+IGNhbGxiYWNrKG1zZykpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9vbkNvbm5PcGVuKCkge1xuICAgICAgICB0aGlzLmxvZygndHJhbnNwb3J0JywgYGNvbm5lY3RlZCB0byAke3RoaXMuZW5kcG9pbnRVUkwoKX1gKTtcbiAgICAgICAgdGhpcy5mbHVzaFNlbmRCdWZmZXIoKTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpO1xuICAgICAgICBpZiAoIXRoaXMud29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFydEhlYXJ0YmVhdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLndvcmtlclJlZikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0V29ya2VySGVhcnRiZWF0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5vcGVuLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjaygpKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9zdGFydEhlYXJ0YmVhdCgpIHtcbiAgICAgICAgdGhpcy5oZWFydGJlYXRUaW1lciAmJiBjbGVhckludGVydmFsKHRoaXMuaGVhcnRiZWF0VGltZXIpO1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcyk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfc3RhcnRXb3JrZXJIZWFydGJlYXQoKSB7XG4gICAgICAgIGlmICh0aGlzLndvcmtlclVybCkge1xuICAgICAgICAgICAgdGhpcy5sb2coJ3dvcmtlcicsIGBzdGFydGluZyB3b3JrZXIgZm9yIGZyb20gJHt0aGlzLndvcmtlclVybH1gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nKCd3b3JrZXInLCBgc3RhcnRpbmcgZGVmYXVsdCB3b3JrZXJgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvYmplY3RVcmwgPSB0aGlzLl93b3JrZXJPYmplY3RVcmwodGhpcy53b3JrZXJVcmwpO1xuICAgICAgICB0aGlzLndvcmtlclJlZiA9IG5ldyBXb3JrZXIob2JqZWN0VXJsKTtcbiAgICAgICAgdGhpcy53b3JrZXJSZWYub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2coJ3dvcmtlcicsICd3b3JrZXIgZXJyb3InLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIHRoaXMud29ya2VyUmVmLnRlcm1pbmF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLndvcmtlclJlZi5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kYXRhLmV2ZW50ID09PSAna2VlcEFsaXZlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZEhlYXJ0YmVhdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLndvcmtlclJlZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBldmVudDogJ3N0YXJ0JyxcbiAgICAgICAgICAgIGludGVydmFsOiB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX29uQ29ubkNsb3NlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMubG9nKCd0cmFuc3BvcnQnLCAnY2xvc2UnLCBldmVudCk7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJDaGFuRXJyb3IoKTtcbiAgICAgICAgdGhpcy5oZWFydGJlYXRUaW1lciAmJiBjbGVhckludGVydmFsKHRoaXMuaGVhcnRiZWF0VGltZXIpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpO1xuICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmNsb3NlLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjayhldmVudCkpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX29uQ29ubkVycm9yKGVycm9yKSB7XG4gICAgICAgIHRoaXMubG9nKCd0cmFuc3BvcnQnLCBgJHtlcnJvcn1gKTtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckNoYW5FcnJvcigpO1xuICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmVycm9yLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjayhlcnJvcikpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3RyaWdnZXJDaGFuRXJyb3IoKSB7XG4gICAgICAgIHRoaXMuY2hhbm5lbHMuZm9yRWFjaCgoY2hhbm5lbCkgPT4gY2hhbm5lbC5fdHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5lcnJvcikpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2FwcGVuZFBhcmFtcyh1cmwsIHBhcmFtcykge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlZml4ID0gdXJsLm1hdGNoKC9cXD8vKSA/ICcmJyA6ICc/JztcbiAgICAgICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcmFtcyk7XG4gICAgICAgIHJldHVybiBgJHt1cmx9JHtwcmVmaXh9JHtxdWVyeX1gO1xuICAgIH1cbiAgICBfd29ya2VyT2JqZWN0VXJsKHVybCkge1xuICAgICAgICBsZXQgcmVzdWx0X3VybDtcbiAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgcmVzdWx0X3VybCA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbV09SS0VSX1NDUklQVF0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnIH0pO1xuICAgICAgICAgICAgcmVzdWx0X3VybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdF91cmw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVhbHRpbWVDbGllbnQuanMubWFwIiwiZXhwb3J0IGNsYXNzIFN0b3JhZ2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLl9faXNTdG9yYWdlRXJyb3IgPSB0cnVlO1xuICAgICAgICB0aGlzLm5hbWUgPSAnU3RvcmFnZUVycm9yJztcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTdG9yYWdlRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvciAhPT0gbnVsbCAmJiAnX19pc1N0b3JhZ2VFcnJvcicgaW4gZXJyb3I7XG59XG5leHBvcnQgY2xhc3MgU3RvcmFnZUFwaUVycm9yIGV4dGVuZHMgU3RvcmFnZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzdGF0dXMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdTdG9yYWdlQXBpRXJyb3InO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU3RvcmFnZVVua25vd25FcnJvciBleHRlbmRzIFN0b3JhZ2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3JpZ2luYWxFcnJvcikge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1N0b3JhZ2VVbmtub3duRXJyb3InO1xuICAgICAgICB0aGlzLm9yaWdpbmFsRXJyb3IgPSBvcmlnaW5hbEVycm9yO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlRmV0Y2ggPSAoY3VzdG9tRmV0Y2gpID0+IHtcbiAgICBsZXQgX2ZldGNoO1xuICAgIGlmIChjdXN0b21GZXRjaCkge1xuICAgICAgICBfZmV0Y2ggPSBjdXN0b21GZXRjaDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfZmV0Y2ggPSAoLi4uYXJncykgPT4gaW1wb3J0KCdAc3VwYWJhc2Uvbm9kZS1mZXRjaCcpLnRoZW4oKHsgZGVmYXVsdDogZmV0Y2ggfSkgPT4gZmV0Y2goLi4uYXJncykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgX2ZldGNoID0gZmV0Y2g7XG4gICAgfVxuICAgIHJldHVybiAoLi4uYXJncykgPT4gX2ZldGNoKC4uLmFyZ3MpO1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlUmVzcG9uc2UgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBpZiAodHlwZW9mIFJlc3BvbnNlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiAoeWllbGQgaW1wb3J0KCdAc3VwYWJhc2Uvbm9kZS1mZXRjaCcpKS5SZXNwb25zZTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc3BvbnNlO1xufSk7XG5leHBvcnQgY29uc3QgcmVjdXJzaXZlVG9DYW1lbCA9IChpdGVtKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubWFwKChlbCkgPT4gcmVjdXJzaXZlVG9DYW1lbChlbCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gJ2Z1bmN0aW9uJyB8fCBpdGVtICE9PSBPYmplY3QoaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIE9iamVjdC5lbnRyaWVzKGl0ZW0pLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdLZXkgPSBrZXkucmVwbGFjZSgvKFstX11bYS16XSkvZ2ksIChjKSA9PiBjLnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvWy1fXS9nLCAnJykpO1xuICAgICAgICByZXN1bHRbbmV3S2V5XSA9IHJlY3Vyc2l2ZVRvQ2FtZWwodmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IFN0b3JhZ2VBcGlFcnJvciwgU3RvcmFnZVVua25vd25FcnJvciB9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IHJlc29sdmVSZXNwb25zZSB9IGZyb20gJy4vaGVscGVycyc7XG5jb25zdCBfZ2V0RXJyb3JNZXNzYWdlID0gKGVycikgPT4gZXJyLm1zZyB8fCBlcnIubWVzc2FnZSB8fCBlcnIuZXJyb3JfZGVzY3JpcHRpb24gfHwgZXJyLmVycm9yIHx8IEpTT04uc3RyaW5naWZ5KGVycik7XG5jb25zdCBoYW5kbGVFcnJvciA9IChlcnJvciwgcmVqZWN0LCBvcHRpb25zKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCBSZXMgPSB5aWVsZCByZXNvbHZlUmVzcG9uc2UoKTtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBSZXMgJiYgIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubm9SZXNvbHZlSnNvbikpIHtcbiAgICAgICAgZXJyb3JcbiAgICAgICAgICAgIC5qc29uKClcbiAgICAgICAgICAgIC50aGVuKChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgU3RvcmFnZUFwaUVycm9yKF9nZXRFcnJvck1lc3NhZ2UoZXJyKSwgZXJyb3Iuc3RhdHVzIHx8IDUwMCkpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgU3RvcmFnZVVua25vd25FcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGVyciksIGVycikpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlamVjdChuZXcgU3RvcmFnZVVua25vd25FcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGVycm9yKSwgZXJyb3IpKTtcbiAgICB9XG59KTtcbmNvbnN0IF9nZXRSZXF1ZXN0UGFyYW1zID0gKG1ldGhvZCwgb3B0aW9ucywgcGFyYW1ldGVycywgYm9keSkgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHsgbWV0aG9kLCBoZWFkZXJzOiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMpIHx8IHt9IH07XG4gICAgaWYgKG1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG4gICAgcGFyYW1zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycyk7XG4gICAgaWYgKGJvZHkpIHtcbiAgICAgICAgcGFyYW1zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zKSwgcGFyYW1ldGVycyk7XG59O1xuZnVuY3Rpb24gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgbWV0aG9kLCB1cmwsIG9wdGlvbnMsIHBhcmFtZXRlcnMsIGJvZHkpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgZmV0Y2hlcih1cmwsIF9nZXRSZXF1ZXN0UGFyYW1zKG1ldGhvZCwgb3B0aW9ucywgcGFyYW1ldGVycywgYm9keSkpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0Lm9rKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ub1Jlc29sdmVKc29uKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuanNvbigpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4gcmVzb2x2ZShkYXRhKSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBoYW5kbGVFcnJvcihlcnJvciwgcmVqZWN0LCBvcHRpb25zKSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldChmZXRjaGVyLCB1cmwsIG9wdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgJ0dFVCcsIHVybCwgb3B0aW9ucywgcGFyYW1ldGVycyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9zdChmZXRjaGVyLCB1cmwsIGJvZHksIG9wdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgJ1BPU1QnLCB1cmwsIG9wdGlvbnMsIHBhcmFtZXRlcnMsIGJvZHkpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1dChmZXRjaGVyLCB1cmwsIGJvZHksIG9wdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgJ1BVVCcsIHVybCwgb3B0aW9ucywgcGFyYW1ldGVycywgYm9keSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGVhZChmZXRjaGVyLCB1cmwsIG9wdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgJ0hFQUQnLCB1cmwsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgbm9SZXNvbHZlSnNvbjogdHJ1ZSB9KSwgcGFyYW1ldGVycyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKGZldGNoZXIsIHVybCwgYm9keSwgb3B0aW9ucywgcGFyYW1ldGVycykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBfaGFuZGxlUmVxdWVzdChmZXRjaGVyLCAnREVMRVRFJywgdXJsLCBvcHRpb25zLCBwYXJhbWV0ZXJzLCBib2R5KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoLmpzLm1hcCIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgaXNTdG9yYWdlRXJyb3IsIFN0b3JhZ2VFcnJvciwgU3RvcmFnZVVua25vd25FcnJvciB9IGZyb20gJy4uL2xpYi9lcnJvcnMnO1xuaW1wb3J0IHsgZ2V0LCBoZWFkLCBwb3N0LCByZW1vdmUgfSBmcm9tICcuLi9saWIvZmV0Y2gnO1xuaW1wb3J0IHsgcmVjdXJzaXZlVG9DYW1lbCwgcmVzb2x2ZUZldGNoIH0gZnJvbSAnLi4vbGliL2hlbHBlcnMnO1xuY29uc3QgREVGQVVMVF9TRUFSQ0hfT1BUSU9OUyA9IHtcbiAgICBsaW1pdDogMTAwLFxuICAgIG9mZnNldDogMCxcbiAgICBzb3J0Qnk6IHtcbiAgICAgICAgY29sdW1uOiAnbmFtZScsXG4gICAgICAgIG9yZGVyOiAnYXNjJyxcbiAgICB9LFxufTtcbmNvbnN0IERFRkFVTFRfRklMRV9PUFRJT05TID0ge1xuICAgIGNhY2hlQ29udHJvbDogJzM2MDAnLFxuICAgIGNvbnRlbnRUeXBlOiAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JyxcbiAgICB1cHNlcnQ6IGZhbHNlLFxufTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3JhZ2VGaWxlQXBpIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIGhlYWRlcnMgPSB7fSwgYnVja2V0SWQsIGZldGNoKSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLmJ1Y2tldElkID0gYnVja2V0SWQ7XG4gICAgICAgIHRoaXMuZmV0Y2ggPSByZXNvbHZlRmV0Y2goZmV0Y2gpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWRzIGEgZmlsZSB0byBhbiBleGlzdGluZyBidWNrZXQgb3IgcmVwbGFjZXMgYW4gZXhpc3RpbmcgZmlsZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGggd2l0aCBhIG5ldyBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWV0aG9kIEhUVFAgbWV0aG9kLlxuICAgICAqIEBwYXJhbSBwYXRoIFRoZSByZWxhdGl2ZSBmaWxlIHBhdGguIFNob3VsZCBiZSBvZiB0aGUgZm9ybWF0IGBmb2xkZXIvc3ViZm9sZGVyL2ZpbGVuYW1lLnBuZ2AuIFRoZSBidWNrZXQgbXVzdCBhbHJlYWR5IGV4aXN0IGJlZm9yZSBhdHRlbXB0aW5nIHRvIHVwbG9hZC5cbiAgICAgKiBAcGFyYW0gZmlsZUJvZHkgVGhlIGJvZHkgb2YgdGhlIGZpbGUgdG8gYmUgc3RvcmVkIGluIHRoZSBidWNrZXQuXG4gICAgICovXG4gICAgdXBsb2FkT3JVcGRhdGUobWV0aG9kLCBwYXRoLCBmaWxlQm9keSwgZmlsZU9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IGJvZHk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9GSUxFX09QVElPTlMpLCBmaWxlT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuaGVhZGVycyksIChtZXRob2QgPT09ICdQT1NUJyAmJiB7ICd4LXVwc2VydCc6IFN0cmluZyhvcHRpb25zLnVwc2VydCkgfSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gb3B0aW9ucy5tZXRhZGF0YTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIGZpbGVCb2R5IGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kKCdjYWNoZUNvbnRyb2wnLCBvcHRpb25zLmNhY2hlQ29udHJvbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5hcHBlbmQoJ21ldGFkYXRhJywgdGhpcy5lbmNvZGVNZXRhZGF0YShtZXRhZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kKCcnLCBmaWxlQm9keSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgJiYgZmlsZUJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gZmlsZUJvZHk7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kKCdjYWNoZUNvbnRyb2wnLCBvcHRpb25zLmNhY2hlQ29udHJvbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5hcHBlbmQoJ21ldGFkYXRhJywgdGhpcy5lbmNvZGVNZXRhZGF0YShtZXRhZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gZmlsZUJvZHk7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ2NhY2hlLWNvbnRyb2wnXSA9IGBtYXgtYWdlPSR7b3B0aW9ucy5jYWNoZUNvbnRyb2x9YDtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1snY29udGVudC10eXBlJ10gPSBvcHRpb25zLmNvbnRlbnRUeXBlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ3gtbWV0YWRhdGEnXSA9IHRoaXMudG9CYXNlNjQodGhpcy5lbmNvZGVNZXRhZGF0YShtZXRhZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWxlT3B0aW9ucyA9PT0gbnVsbCB8fCBmaWxlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmlsZU9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBoZWFkZXJzKSwgZmlsZU9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNsZWFuUGF0aCA9IHRoaXMuX3JlbW92ZUVtcHR5Rm9sZGVycyhwYXRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBfcGF0aCA9IHRoaXMuX2dldEZpbmFsUGF0aChjbGVhblBhdGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIHRoaXMuZmV0Y2goYCR7dGhpcy51cmx9L29iamVjdC8ke19wYXRofWAsIE9iamVjdC5hc3NpZ24oeyBtZXRob2QsIGJvZHk6IGJvZHksIGhlYWRlcnMgfSwgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZHVwbGV4KSA/IHsgZHVwbGV4OiBvcHRpb25zLmR1cGxleCB9IDoge30pKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHJlcy5qc29uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBwYXRoOiBjbGVhblBhdGgsIGlkOiBkYXRhLklkLCBmdWxsUGF0aDogZGF0YS5LZXkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWRzIGEgZmlsZSB0byBhbiBleGlzdGluZyBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgZmlsZSBwYXRoLCBpbmNsdWRpbmcgdGhlIGZpbGUgbmFtZS4gU2hvdWxkIGJlIG9mIHRoZSBmb3JtYXQgYGZvbGRlci9zdWJmb2xkZXIvZmlsZW5hbWUucG5nYC4gVGhlIGJ1Y2tldCBtdXN0IGFscmVhZHkgZXhpc3QgYmVmb3JlIGF0dGVtcHRpbmcgdG8gdXBsb2FkLlxuICAgICAqIEBwYXJhbSBmaWxlQm9keSBUaGUgYm9keSBvZiB0aGUgZmlsZSB0byBiZSBzdG9yZWQgaW4gdGhlIGJ1Y2tldC5cbiAgICAgKi9cbiAgICB1cGxvYWQocGF0aCwgZmlsZUJvZHksIGZpbGVPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRPclVwZGF0ZSgnUE9TVCcsIHBhdGgsIGZpbGVCb2R5LCBmaWxlT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgYSBmaWxlIHdpdGggYSB0b2tlbiBnZW5lcmF0ZWQgZnJvbSBgY3JlYXRlU2lnbmVkVXBsb2FkVXJsYC5cbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgZmlsZSBwYXRoLCBpbmNsdWRpbmcgdGhlIGZpbGUgbmFtZS4gU2hvdWxkIGJlIG9mIHRoZSBmb3JtYXQgYGZvbGRlci9zdWJmb2xkZXIvZmlsZW5hbWUucG5nYC4gVGhlIGJ1Y2tldCBtdXN0IGFscmVhZHkgZXhpc3QgYmVmb3JlIGF0dGVtcHRpbmcgdG8gdXBsb2FkLlxuICAgICAqIEBwYXJhbSB0b2tlbiBUaGUgdG9rZW4gZ2VuZXJhdGVkIGZyb20gYGNyZWF0ZVNpZ25lZFVwbG9hZFVybGBcbiAgICAgKiBAcGFyYW0gZmlsZUJvZHkgVGhlIGJvZHkgb2YgdGhlIGZpbGUgdG8gYmUgc3RvcmVkIGluIHRoZSBidWNrZXQuXG4gICAgICovXG4gICAgdXBsb2FkVG9TaWduZWRVcmwocGF0aCwgdG9rZW4sIGZpbGVCb2R5LCBmaWxlT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgY2xlYW5QYXRoID0gdGhpcy5fcmVtb3ZlRW1wdHlGb2xkZXJzKHBhdGgpO1xuICAgICAgICAgICAgY29uc3QgX3BhdGggPSB0aGlzLl9nZXRGaW5hbFBhdGgoY2xlYW5QYXRoKTtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwodGhpcy51cmwgKyBgL29iamVjdC91cGxvYWQvc2lnbi8ke19wYXRofWApO1xuICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3Rva2VuJywgdG9rZW4pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgYm9keTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IHVwc2VydDogREVGQVVMVF9GSUxFX09QVElPTlMudXBzZXJ0IH0sIGZpbGVPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLmhlYWRlcnMpLCB7ICd4LXVwc2VydCc6IFN0cmluZyhvcHRpb25zLnVwc2VydCkgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBmaWxlQm9keSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZCgnY2FjaGVDb250cm9sJywgb3B0aW9ucy5jYWNoZUNvbnRyb2wpO1xuICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZCgnJywgZmlsZUJvZHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnICYmIGZpbGVCb2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IGZpbGVCb2R5O1xuICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZCgnY2FjaGVDb250cm9sJywgb3B0aW9ucy5jYWNoZUNvbnRyb2wpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IGZpbGVCb2R5O1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjYWNoZS1jb250cm9sJ10gPSBgbWF4LWFnZT0ke29wdGlvbnMuY2FjaGVDb250cm9sfWA7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gb3B0aW9ucy5jb250ZW50VHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0geWllbGQgdGhpcy5mZXRjaCh1cmwudG9TdHJpbmcoKSwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCByZXMuanNvbigpO1xuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgcGF0aDogY2xlYW5QYXRoLCBmdWxsUGF0aDogZGF0YS5LZXkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2lnbmVkIHVwbG9hZCBVUkwuXG4gICAgICogU2lnbmVkIHVwbG9hZCBVUkxzIGNhbiBiZSB1c2VkIHRvIHVwbG9hZCBmaWxlcyB0byB0aGUgYnVja2V0IHdpdGhvdXQgZnVydGhlciBhdXRoZW50aWNhdGlvbi5cbiAgICAgKiBUaGV5IGFyZSB2YWxpZCBmb3IgMiBob3Vycy5cbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgZmlsZSBwYXRoLCBpbmNsdWRpbmcgdGhlIGN1cnJlbnQgZmlsZSBuYW1lLiBGb3IgZXhhbXBsZSBgZm9sZGVyL2ltYWdlLnBuZ2AuXG4gICAgICogQHBhcmFtIG9wdGlvbnMudXBzZXJ0IElmIHNldCB0byB0cnVlLCBhbGxvd3MgdGhlIGZpbGUgdG8gYmUgb3ZlcndyaXR0ZW4gaWYgaXQgYWxyZWFkeSBleGlzdHMuXG4gICAgICovXG4gICAgY3JlYXRlU2lnbmVkVXBsb2FkVXJsKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IF9wYXRoID0gdGhpcy5fZ2V0RmluYWxQYXRoKHBhdGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmhlYWRlcnMpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudXBzZXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ3gtdXBzZXJ0J10gPSAndHJ1ZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBwb3N0KHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9vYmplY3QvdXBsb2FkL3NpZ24vJHtfcGF0aH1gLCB7fSwgeyBoZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwodGhpcy51cmwgKyBkYXRhLnVybCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgndG9rZW4nKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTdG9yYWdlRXJyb3IoJ05vIHRva2VuIHJldHVybmVkIGJ5IEFQSScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHNpZ25lZFVybDogdXJsLnRvU3RyaW5nKCksIHBhdGgsIHRva2VuIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgYW4gZXhpc3RpbmcgZmlsZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGggd2l0aCBhIG5ldyBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgcmVsYXRpdmUgZmlsZSBwYXRoLiBTaG91bGQgYmUgb2YgdGhlIGZvcm1hdCBgZm9sZGVyL3N1YmZvbGRlci9maWxlbmFtZS5wbmdgLiBUaGUgYnVja2V0IG11c3QgYWxyZWFkeSBleGlzdCBiZWZvcmUgYXR0ZW1wdGluZyB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIGZpbGVCb2R5IFRoZSBib2R5IG9mIHRoZSBmaWxlIHRvIGJlIHN0b3JlZCBpbiB0aGUgYnVja2V0LlxuICAgICAqL1xuICAgIHVwZGF0ZShwYXRoLCBmaWxlQm9keSwgZmlsZU9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwbG9hZE9yVXBkYXRlKCdQVVQnLCBwYXRoLCBmaWxlQm9keSwgZmlsZU9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW92ZXMgYW4gZXhpc3RpbmcgZmlsZSB0byBhIG5ldyBwYXRoIGluIHRoZSBzYW1lIGJ1Y2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmcm9tUGF0aCBUaGUgb3JpZ2luYWwgZmlsZSBwYXRoLCBpbmNsdWRpbmcgdGhlIGN1cnJlbnQgZmlsZSBuYW1lLiBGb3IgZXhhbXBsZSBgZm9sZGVyL2ltYWdlLnBuZ2AuXG4gICAgICogQHBhcmFtIHRvUGF0aCBUaGUgbmV3IGZpbGUgcGF0aCwgaW5jbHVkaW5nIHRoZSBuZXcgZmlsZSBuYW1lLiBGb3IgZXhhbXBsZSBgZm9sZGVyL2ltYWdlLW5ldy5wbmdgLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBkZXN0aW5hdGlvbiBvcHRpb25zLlxuICAgICAqL1xuICAgIG1vdmUoZnJvbVBhdGgsIHRvUGF0aCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcG9zdCh0aGlzLmZldGNoLCBgJHt0aGlzLnVybH0vb2JqZWN0L21vdmVgLCB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldElkOiB0aGlzLmJ1Y2tldElkLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VLZXk6IGZyb21QYXRoLFxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbktleTogdG9QYXRoLFxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbkJ1Y2tldDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRlc3RpbmF0aW9uQnVja2V0LFxuICAgICAgICAgICAgICAgIH0sIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29waWVzIGFuIGV4aXN0aW5nIGZpbGUgdG8gYSBuZXcgcGF0aCBpbiB0aGUgc2FtZSBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnJvbVBhdGggVGhlIG9yaWdpbmFsIGZpbGUgcGF0aCwgaW5jbHVkaW5nIHRoZSBjdXJyZW50IGZpbGUgbmFtZS4gRm9yIGV4YW1wbGUgYGZvbGRlci9pbWFnZS5wbmdgLlxuICAgICAqIEBwYXJhbSB0b1BhdGggVGhlIG5ldyBmaWxlIHBhdGgsIGluY2x1ZGluZyB0aGUgbmV3IGZpbGUgbmFtZS4gRm9yIGV4YW1wbGUgYGZvbGRlci9pbWFnZS1jb3B5LnBuZ2AuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIGRlc3RpbmF0aW9uIG9wdGlvbnMuXG4gICAgICovXG4gICAgY29weShmcm9tUGF0aCwgdG9QYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBwb3N0KHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9vYmplY3QvY29weWAsIHtcbiAgICAgICAgICAgICAgICAgICAgYnVja2V0SWQ6IHRoaXMuYnVja2V0SWQsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUtleTogZnJvbVBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uS2V5OiB0b1BhdGgsXG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uQnVja2V0OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVzdGluYXRpb25CdWNrZXQsXG4gICAgICAgICAgICAgICAgfSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBwYXRoOiBkYXRhLktleSB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaWduZWQgVVJMLiBVc2UgYSBzaWduZWQgVVJMIHRvIHNoYXJlIGEgZmlsZSBmb3IgYSBmaXhlZCBhbW91bnQgb2YgdGltZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBmaWxlIHBhdGgsIGluY2x1ZGluZyB0aGUgY3VycmVudCBmaWxlIG5hbWUuIEZvciBleGFtcGxlIGBmb2xkZXIvaW1hZ2UucG5nYC5cbiAgICAgKiBAcGFyYW0gZXhwaXJlc0luIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB1bnRpbCB0aGUgc2lnbmVkIFVSTCBleHBpcmVzLiBGb3IgZXhhbXBsZSwgYDYwYCBmb3IgYSBVUkwgd2hpY2ggaXMgdmFsaWQgZm9yIG9uZSBtaW51dGUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZG93bmxvYWQgdHJpZ2dlcnMgdGhlIGZpbGUgYXMgYSBkb3dubG9hZCBpZiBzZXQgdG8gdHJ1ZS4gU2V0IHRoaXMgcGFyYW1ldGVyIGFzIHRoZSBuYW1lIG9mIHRoZSBmaWxlIGlmIHlvdSB3YW50IHRvIHRyaWdnZXIgdGhlIGRvd25sb2FkIHdpdGggYSBkaWZmZXJlbnQgZmlsZW5hbWUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMudHJhbnNmb3JtIFRyYW5zZm9ybSB0aGUgYXNzZXQgYmVmb3JlIHNlcnZpbmcgaXQgdG8gdGhlIGNsaWVudC5cbiAgICAgKi9cbiAgICBjcmVhdGVTaWduZWRVcmwocGF0aCwgZXhwaXJlc0luLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBfcGF0aCA9IHRoaXMuX2dldEZpbmFsUGF0aChwYXRoKTtcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHlpZWxkIHBvc3QodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L29iamVjdC9zaWduLyR7X3BhdGh9YCwgT2JqZWN0LmFzc2lnbih7IGV4cGlyZXNJbiB9LCAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50cmFuc2Zvcm0pID8geyB0cmFuc2Zvcm06IG9wdGlvbnMudHJhbnNmb3JtIH0gOiB7fSkpLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkb3dubG9hZFF1ZXJ5UGFyYW0gPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRvd25sb2FkKVxuICAgICAgICAgICAgICAgICAgICA/IGAmZG93bmxvYWQ9JHtvcHRpb25zLmRvd25sb2FkID09PSB0cnVlID8gJycgOiBvcHRpb25zLmRvd25sb2FkfWBcbiAgICAgICAgICAgICAgICAgICAgOiAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBzaWduZWRVcmwgPSBlbmNvZGVVUkkoYCR7dGhpcy51cmx9JHtkYXRhLnNpZ25lZFVSTH0ke2Rvd25sb2FkUXVlcnlQYXJhbX1gKTtcbiAgICAgICAgICAgICAgICBkYXRhID0geyBzaWduZWRVcmwgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgbXVsdGlwbGUgc2lnbmVkIFVSTHMuIFVzZSBhIHNpZ25lZCBVUkwgdG8gc2hhcmUgYSBmaWxlIGZvciBhIGZpeGVkIGFtb3VudCBvZiB0aW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGhzIFRoZSBmaWxlIHBhdGhzIHRvIGJlIGRvd25sb2FkZWQsIGluY2x1ZGluZyB0aGUgY3VycmVudCBmaWxlIG5hbWVzLiBGb3IgZXhhbXBsZSBgWydmb2xkZXIvaW1hZ2UucG5nJywgJ2ZvbGRlcjIvaW1hZ2UyLnBuZyddYC5cbiAgICAgKiBAcGFyYW0gZXhwaXJlc0luIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB1bnRpbCB0aGUgc2lnbmVkIFVSTHMgZXhwaXJlLiBGb3IgZXhhbXBsZSwgYDYwYCBmb3IgVVJMcyB3aGljaCBhcmUgdmFsaWQgZm9yIG9uZSBtaW51dGUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZG93bmxvYWQgdHJpZ2dlcnMgdGhlIGZpbGUgYXMgYSBkb3dubG9hZCBpZiBzZXQgdG8gdHJ1ZS4gU2V0IHRoaXMgcGFyYW1ldGVyIGFzIHRoZSBuYW1lIG9mIHRoZSBmaWxlIGlmIHlvdSB3YW50IHRvIHRyaWdnZXIgdGhlIGRvd25sb2FkIHdpdGggYSBkaWZmZXJlbnQgZmlsZW5hbWUuXG4gICAgICovXG4gICAgY3JlYXRlU2lnbmVkVXJscyhwYXRocywgZXhwaXJlc0luLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBwb3N0KHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9vYmplY3Qvc2lnbi8ke3RoaXMuYnVja2V0SWR9YCwgeyBleHBpcmVzSW4sIHBhdGhzIH0sIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvd25sb2FkUXVlcnlQYXJhbSA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZG93bmxvYWQpXG4gICAgICAgICAgICAgICAgICAgID8gYCZkb3dubG9hZD0ke29wdGlvbnMuZG93bmxvYWQgPT09IHRydWUgPyAnJyA6IG9wdGlvbnMuZG93bmxvYWR9YFxuICAgICAgICAgICAgICAgICAgICA6ICcnO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEubWFwKChkYXR1bSkgPT4gKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGF0dW0pLCB7IHNpZ25lZFVybDogZGF0dW0uc2lnbmVkVVJMXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlbmNvZGVVUkkoYCR7dGhpcy51cmx9JHtkYXR1bS5zaWduZWRVUkx9JHtkb3dubG9hZFF1ZXJ5UGFyYW19YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGwgfSkpKSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZHMgYSBmaWxlIGZyb20gYSBwcml2YXRlIGJ1Y2tldC4gRm9yIHB1YmxpYyBidWNrZXRzLCBtYWtlIGEgcmVxdWVzdCB0byB0aGUgVVJMIHJldHVybmVkIGZyb20gYGdldFB1YmxpY1VybGAgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBmdWxsIHBhdGggYW5kIGZpbGUgbmFtZSBvZiB0aGUgZmlsZSB0byBiZSBkb3dubG9hZGVkLiBGb3IgZXhhbXBsZSBgZm9sZGVyL2ltYWdlLnBuZ2AuXG4gICAgICogQHBhcmFtIG9wdGlvbnMudHJhbnNmb3JtIFRyYW5zZm9ybSB0aGUgYXNzZXQgYmVmb3JlIHNlcnZpbmcgaXQgdG8gdGhlIGNsaWVudC5cbiAgICAgKi9cbiAgICBkb3dubG9hZChwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB3YW50c1RyYW5zZm9ybWF0aW9uID0gdHlwZW9mIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudHJhbnNmb3JtKSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJQYXRoID0gd2FudHNUcmFuc2Zvcm1hdGlvbiA/ICdyZW5kZXIvaW1hZ2UvYXV0aGVudGljYXRlZCcgOiAnb2JqZWN0JztcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWF0aW9uUXVlcnkgPSB0aGlzLnRyYW5zZm9ybU9wdHNUb1F1ZXJ5U3RyaW5nKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudHJhbnNmb3JtKSB8fCB7fSk7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVN0cmluZyA9IHRyYW5zZm9ybWF0aW9uUXVlcnkgPyBgPyR7dHJhbnNmb3JtYXRpb25RdWVyeX1gIDogJyc7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9wYXRoID0gdGhpcy5fZ2V0RmluYWxQYXRoKHBhdGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIGdldCh0aGlzLmZldGNoLCBgJHt0aGlzLnVybH0vJHtyZW5kZXJQYXRofS8ke19wYXRofSR7cXVlcnlTdHJpbmd9YCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIG5vUmVzb2x2ZUpzb246IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHJlcy5ibG9iKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGRldGFpbHMgb2YgYW4gZXhpc3RpbmcgZmlsZS5cbiAgICAgKiBAcGFyYW0gcGF0aFxuICAgICAqL1xuICAgIGluZm8ocGF0aCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgX3BhdGggPSB0aGlzLl9nZXRGaW5hbFBhdGgocGF0aCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBnZXQodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L29iamVjdC9pbmZvLyR7X3BhdGh9YCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogcmVjdXJzaXZlVG9DYW1lbChkYXRhKSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIGV4aXN0ZW5jZSBvZiBhIGZpbGUuXG4gICAgICogQHBhcmFtIHBhdGhcbiAgICAgKi9cbiAgICBleGlzdHMocGF0aCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgX3BhdGggPSB0aGlzLl9nZXRGaW5hbFBhdGgocGF0aCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHlpZWxkIGhlYWQodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L29iamVjdC8ke19wYXRofWAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHRydWUsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpICYmIGVycm9yIGluc3RhbmNlb2YgU3RvcmFnZVVua25vd25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbEVycm9yID0gZXJyb3Iub3JpZ2luYWxFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFs0MDAsIDQwNF0uaW5jbHVkZXMob3JpZ2luYWxFcnJvciA9PT0gbnVsbCB8fCBvcmlnaW5hbEVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5hbEVycm9yLnN0YXR1cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IGZhbHNlLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgY29udmVuaWVuY2UgZnVuY3Rpb24gdG8gZ2V0IHRoZSBVUkwgZm9yIGFuIGFzc2V0IGluIGEgcHVibGljIGJ1Y2tldC4gSWYgeW91IGRvIG5vdCB3YW50IHRvIHVzZSB0aGlzIGZ1bmN0aW9uLCB5b3UgY2FuIGNvbnN0cnVjdCB0aGUgcHVibGljIFVSTCBieSBjb25jYXRlbmF0aW5nIHRoZSBidWNrZXQgVVJMIHdpdGggdGhlIHBhdGggdG8gdGhlIGFzc2V0LlxuICAgICAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdmVyaWZ5IGlmIHRoZSBidWNrZXQgaXMgcHVibGljLiBJZiBhIHB1YmxpYyBVUkwgaXMgY3JlYXRlZCBmb3IgYSBidWNrZXQgd2hpY2ggaXMgbm90IHB1YmxpYywgeW91IHdpbGwgbm90IGJlIGFibGUgdG8gZG93bmxvYWQgdGhlIGFzc2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggVGhlIHBhdGggYW5kIG5hbWUgb2YgdGhlIGZpbGUgdG8gZ2VuZXJhdGUgdGhlIHB1YmxpYyBVUkwgZm9yLiBGb3IgZXhhbXBsZSBgZm9sZGVyL2ltYWdlLnBuZ2AuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZG93bmxvYWQgVHJpZ2dlcnMgdGhlIGZpbGUgYXMgYSBkb3dubG9hZCBpZiBzZXQgdG8gdHJ1ZS4gU2V0IHRoaXMgcGFyYW1ldGVyIGFzIHRoZSBuYW1lIG9mIHRoZSBmaWxlIGlmIHlvdSB3YW50IHRvIHRyaWdnZXIgdGhlIGRvd25sb2FkIHdpdGggYSBkaWZmZXJlbnQgZmlsZW5hbWUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMudHJhbnNmb3JtIFRyYW5zZm9ybSB0aGUgYXNzZXQgYmVmb3JlIHNlcnZpbmcgaXQgdG8gdGhlIGNsaWVudC5cbiAgICAgKi9cbiAgICBnZXRQdWJsaWNVcmwocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBfcGF0aCA9IHRoaXMuX2dldEZpbmFsUGF0aChwYXRoKTtcbiAgICAgICAgY29uc3QgX3F1ZXJ5U3RyaW5nID0gW107XG4gICAgICAgIGNvbnN0IGRvd25sb2FkUXVlcnlQYXJhbSA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZG93bmxvYWQpXG4gICAgICAgICAgICA/IGBkb3dubG9hZD0ke29wdGlvbnMuZG93bmxvYWQgPT09IHRydWUgPyAnJyA6IG9wdGlvbnMuZG93bmxvYWR9YFxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgaWYgKGRvd25sb2FkUXVlcnlQYXJhbSAhPT0gJycpIHtcbiAgICAgICAgICAgIF9xdWVyeVN0cmluZy5wdXNoKGRvd25sb2FkUXVlcnlQYXJhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd2FudHNUcmFuc2Zvcm1hdGlvbiA9IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRyYW5zZm9ybSkgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICBjb25zdCByZW5kZXJQYXRoID0gd2FudHNUcmFuc2Zvcm1hdGlvbiA/ICdyZW5kZXIvaW1hZ2UnIDogJ29iamVjdCc7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWF0aW9uUXVlcnkgPSB0aGlzLnRyYW5zZm9ybU9wdHNUb1F1ZXJ5U3RyaW5nKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudHJhbnNmb3JtKSB8fCB7fSk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1hdGlvblF1ZXJ5ICE9PSAnJykge1xuICAgICAgICAgICAgX3F1ZXJ5U3RyaW5nLnB1c2godHJhbnNmb3JtYXRpb25RdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHF1ZXJ5U3RyaW5nID0gX3F1ZXJ5U3RyaW5nLmpvaW4oJyYnKTtcbiAgICAgICAgaWYgKHF1ZXJ5U3RyaW5nICE9PSAnJykge1xuICAgICAgICAgICAgcXVlcnlTdHJpbmcgPSBgPyR7cXVlcnlTdHJpbmd9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogeyBwdWJsaWNVcmw6IGVuY29kZVVSSShgJHt0aGlzLnVybH0vJHtyZW5kZXJQYXRofS9wdWJsaWMvJHtfcGF0aH0ke3F1ZXJ5U3RyaW5nfWApIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgZmlsZXMgd2l0aGluIHRoZSBzYW1lIGJ1Y2tldFxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGhzIEFuIGFycmF5IG9mIGZpbGVzIHRvIGRlbGV0ZSwgaW5jbHVkaW5nIHRoZSBwYXRoIGFuZCBmaWxlIG5hbWUuIEZvciBleGFtcGxlIFtgJ2ZvbGRlci9pbWFnZS5wbmcnYF0uXG4gICAgICovXG4gICAgcmVtb3ZlKHBhdGhzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCByZW1vdmUodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L29iamVjdC8ke3RoaXMuYnVja2V0SWR9YCwgeyBwcmVmaXhlczogcGF0aHMgfSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgZmlsZSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSBpZCB0aGUgZmlsZSBpZCB0byByZXRyaWV2ZSBtZXRhZGF0YVxuICAgICAqL1xuICAgIC8vIGFzeW5jIGdldE1ldGFkYXRhKFxuICAgIC8vICAgaWQ6IHN0cmluZ1xuICAgIC8vICk6IFByb21pc2U8XG4gICAgLy8gICB8IHtcbiAgICAvLyAgICAgICBkYXRhOiBNZXRhZGF0YVxuICAgIC8vICAgICAgIGVycm9yOiBudWxsXG4gICAgLy8gICAgIH1cbiAgICAvLyAgIHwge1xuICAgIC8vICAgICAgIGRhdGE6IG51bGxcbiAgICAvLyAgICAgICBlcnJvcjogU3RvcmFnZUVycm9yXG4gICAgLy8gICAgIH1cbiAgICAvLyA+IHtcbiAgICAvLyAgIHRyeSB7XG4gICAgLy8gICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXQodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L21ldGFkYXRhLyR7aWR9YCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSlcbiAgICAvLyAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfVxuICAgIC8vICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgIC8vICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH1cbiAgICAvLyAgICAgfVxuICAgIC8vICAgICB0aHJvdyBlcnJvclxuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgZmlsZSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSBpZCB0aGUgZmlsZSBpZCB0byB1cGRhdGUgbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gbWV0YSB0aGUgbmV3IGZpbGUgbWV0YWRhdGFcbiAgICAgKi9cbiAgICAvLyBhc3luYyB1cGRhdGVNZXRhZGF0YShcbiAgICAvLyAgIGlkOiBzdHJpbmcsXG4gICAgLy8gICBtZXRhOiBNZXRhZGF0YVxuICAgIC8vICk6IFByb21pc2U8XG4gICAgLy8gICB8IHtcbiAgICAvLyAgICAgICBkYXRhOiBNZXRhZGF0YVxuICAgIC8vICAgICAgIGVycm9yOiBudWxsXG4gICAgLy8gICAgIH1cbiAgICAvLyAgIHwge1xuICAgIC8vICAgICAgIGRhdGE6IG51bGxcbiAgICAvLyAgICAgICBlcnJvcjogU3RvcmFnZUVycm9yXG4gICAgLy8gICAgIH1cbiAgICAvLyA+IHtcbiAgICAvLyAgIHRyeSB7XG4gICAgLy8gICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwb3N0KFxuICAgIC8vICAgICAgIHRoaXMuZmV0Y2gsXG4gICAgLy8gICAgICAgYCR7dGhpcy51cmx9L21ldGFkYXRhLyR7aWR9YCxcbiAgICAvLyAgICAgICB7IC4uLm1ldGEgfSxcbiAgICAvLyAgICAgICB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9XG4gICAgLy8gICAgIClcbiAgICAvLyAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfVxuICAgIC8vICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgIC8vICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH1cbiAgICAvLyAgICAgfVxuICAgIC8vICAgICB0aHJvdyBlcnJvclxuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKipcbiAgICAgKiBMaXN0cyBhbGwgdGhlIGZpbGVzIHdpdGhpbiBhIGJ1Y2tldC5cbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgZm9sZGVyIHBhdGguXG4gICAgICovXG4gICAgbGlzdChwYXRoLCBvcHRpb25zLCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRUFSQ0hfT1BUSU9OUyksIG9wdGlvbnMpLCB7IHByZWZpeDogcGF0aCB8fCAnJyB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcG9zdCh0aGlzLmZldGNoLCBgJHt0aGlzLnVybH0vb2JqZWN0L2xpc3QvJHt0aGlzLmJ1Y2tldElkfWAsIGJvZHksIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0sIHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZW5jb2RlTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG1ldGFkYXRhKTtcbiAgICB9XG4gICAgdG9CYXNlNjQoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ0b2EoZGF0YSk7XG4gICAgfVxuICAgIF9nZXRGaW5hbFBhdGgocGF0aCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5idWNrZXRJZH0vJHtwYXRofWA7XG4gICAgfVxuICAgIF9yZW1vdmVFbXB0eUZvbGRlcnMocGF0aCkge1xuICAgICAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9eXFwvfFxcLyQvZywgJycpLnJlcGxhY2UoL1xcLysvZywgJy8nKTtcbiAgICB9XG4gICAgdHJhbnNmb3JtT3B0c1RvUXVlcnlTdHJpbmcodHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IFtdO1xuICAgICAgICBpZiAodHJhbnNmb3JtLndpZHRoKSB7XG4gICAgICAgICAgICBwYXJhbXMucHVzaChgd2lkdGg9JHt0cmFuc2Zvcm0ud2lkdGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zZm9ybS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHBhcmFtcy5wdXNoKGBoZWlnaHQ9JHt0cmFuc2Zvcm0uaGVpZ2h0fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2Zvcm0ucmVzaXplKSB7XG4gICAgICAgICAgICBwYXJhbXMucHVzaChgcmVzaXplPSR7dHJhbnNmb3JtLnJlc2l6ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNmb3JtLmZvcm1hdCkge1xuICAgICAgICAgICAgcGFyYW1zLnB1c2goYGZvcm1hdD0ke3RyYW5zZm9ybS5mb3JtYXR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zZm9ybS5xdWFsaXR5KSB7XG4gICAgICAgICAgICBwYXJhbXMucHVzaChgcXVhbGl0eT0ke3RyYW5zZm9ybS5xdWFsaXR5fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJhbXMuam9pbignJicpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VGaWxlQXBpLmpzLm1hcCIsIi8vIGdlbmVyYXRlZCBieSBnZW52ZXJzaW9uXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9ICcyLjcuMSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCIsImltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24nO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfSEVBREVSUyA9IHsgJ1gtQ2xpZW50LUluZm8nOiBgc3RvcmFnZS1qcy8ke3ZlcnNpb259YCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgREVGQVVMVF9IRUFERVJTIH0gZnJvbSAnLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBpc1N0b3JhZ2VFcnJvciB9IGZyb20gJy4uL2xpYi9lcnJvcnMnO1xuaW1wb3J0IHsgZ2V0LCBwb3N0LCBwdXQsIHJlbW92ZSB9IGZyb20gJy4uL2xpYi9mZXRjaCc7XG5pbXBvcnQgeyByZXNvbHZlRmV0Y2ggfSBmcm9tICcuLi9saWIvaGVscGVycyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9yYWdlQnVja2V0QXBpIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIGhlYWRlcnMgPSB7fSwgZmV0Y2gpIHtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9IRUFERVJTKSwgaGVhZGVycyk7XG4gICAgICAgIHRoaXMuZmV0Y2ggPSByZXNvbHZlRmV0Y2goZmV0Y2gpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGRldGFpbHMgb2YgYWxsIFN0b3JhZ2UgYnVja2V0cyB3aXRoaW4gYW4gZXhpc3RpbmcgcHJvamVjdC5cbiAgICAgKi9cbiAgICBsaXN0QnVja2V0cygpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIGdldCh0aGlzLmZldGNoLCBgJHt0aGlzLnVybH0vYnVja2V0YCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGRldGFpbHMgb2YgYW4gZXhpc3RpbmcgU3RvcmFnZSBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBidWNrZXQgeW91IHdvdWxkIGxpa2UgdG8gcmV0cmlldmUuXG4gICAgICovXG4gICAgZ2V0QnVja2V0KGlkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBnZXQodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L2J1Y2tldC8ke2lkfWAsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTdG9yYWdlIGJ1Y2tldFxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBidWNrZXQgeW91IGFyZSBjcmVhdGluZy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5wdWJsaWMgVGhlIHZpc2liaWxpdHkgb2YgdGhlIGJ1Y2tldC4gUHVibGljIGJ1Y2tldHMgZG9uJ3QgcmVxdWlyZSBhbiBhdXRob3JpemF0aW9uIHRva2VuIHRvIGRvd25sb2FkIG9iamVjdHMsIGJ1dCBzdGlsbCByZXF1aXJlIGEgdmFsaWQgdG9rZW4gZm9yIGFsbCBvdGhlciBvcGVyYXRpb25zLiBCeSBkZWZhdWx0LCBidWNrZXRzIGFyZSBwcml2YXRlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmZpbGVTaXplTGltaXQgc3BlY2lmaWVzIHRoZSBtYXggZmlsZSBzaXplIGluIGJ5dGVzIHRoYXQgY2FuIGJlIHVwbG9hZGVkIHRvIHRoaXMgYnVja2V0LlxuICAgICAqIFRoZSBnbG9iYWwgZmlsZSBzaXplIGxpbWl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHZhbHVlLlxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIG51bGwsIHdoaWNoIGRvZXNuJ3Qgc2V0IGEgcGVyIGJ1Y2tldCBmaWxlIHNpemUgbGltaXQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWxsb3dlZE1pbWVUeXBlcyBzcGVjaWZpZXMgdGhlIGFsbG93ZWQgbWltZSB0eXBlcyB0aGF0IHRoaXMgYnVja2V0IGNhbiBhY2NlcHQgZHVyaW5nIHVwbG9hZC5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBudWxsLCB3aGljaCBhbGxvd3MgZmlsZXMgd2l0aCBhbGwgbWltZSB0eXBlcyB0byBiZSB1cGxvYWRlZC5cbiAgICAgKiBFYWNoIG1pbWUgdHlwZSBzcGVjaWZpZWQgY2FuIGJlIGEgd2lsZGNhcmQsIGUuZy4gaW1hZ2UvKiwgb3IgYSBzcGVjaWZpYyBtaW1lIHR5cGUsIGUuZy4gaW1hZ2UvcG5nLlxuICAgICAqIEByZXR1cm5zIG5ld2x5IGNyZWF0ZWQgYnVja2V0IGlkXG4gICAgICovXG4gICAgY3JlYXRlQnVja2V0KGlkLCBvcHRpb25zID0ge1xuICAgICAgICBwdWJsaWM6IGZhbHNlLFxuICAgIH0pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHBvc3QodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L2J1Y2tldGAsIHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGlkLFxuICAgICAgICAgICAgICAgICAgICBwdWJsaWM6IG9wdGlvbnMucHVibGljLFxuICAgICAgICAgICAgICAgICAgICBmaWxlX3NpemVfbGltaXQ6IG9wdGlvbnMuZmlsZVNpemVMaW1pdCxcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZF9taW1lX3R5cGVzOiBvcHRpb25zLmFsbG93ZWRNaW1lVHlwZXMsXG4gICAgICAgICAgICAgICAgfSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGEgU3RvcmFnZSBidWNrZXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgYnVja2V0IHlvdSBhcmUgdXBkYXRpbmcuXG4gICAgICogQHBhcmFtIG9wdGlvbnMucHVibGljIFRoZSB2aXNpYmlsaXR5IG9mIHRoZSBidWNrZXQuIFB1YmxpYyBidWNrZXRzIGRvbid0IHJlcXVpcmUgYW4gYXV0aG9yaXphdGlvbiB0b2tlbiB0byBkb3dubG9hZCBvYmplY3RzLCBidXQgc3RpbGwgcmVxdWlyZSBhIHZhbGlkIHRva2VuIGZvciBhbGwgb3RoZXIgb3BlcmF0aW9ucy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5maWxlU2l6ZUxpbWl0IHNwZWNpZmllcyB0aGUgbWF4IGZpbGUgc2l6ZSBpbiBieXRlcyB0aGF0IGNhbiBiZSB1cGxvYWRlZCB0byB0aGlzIGJ1Y2tldC5cbiAgICAgKiBUaGUgZ2xvYmFsIGZpbGUgc2l6ZSBsaW1pdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhpcyB2YWx1ZS5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBudWxsLCB3aGljaCBkb2Vzbid0IHNldCBhIHBlciBidWNrZXQgZmlsZSBzaXplIGxpbWl0LlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmFsbG93ZWRNaW1lVHlwZXMgc3BlY2lmaWVzIHRoZSBhbGxvd2VkIG1pbWUgdHlwZXMgdGhhdCB0aGlzIGJ1Y2tldCBjYW4gYWNjZXB0IGR1cmluZyB1cGxvYWQuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgbnVsbCwgd2hpY2ggYWxsb3dzIGZpbGVzIHdpdGggYWxsIG1pbWUgdHlwZXMgdG8gYmUgdXBsb2FkZWQuXG4gICAgICogRWFjaCBtaW1lIHR5cGUgc3BlY2lmaWVkIGNhbiBiZSBhIHdpbGRjYXJkLCBlLmcuIGltYWdlLyosIG9yIGEgc3BlY2lmaWMgbWltZSB0eXBlLCBlLmcuIGltYWdlL3BuZy5cbiAgICAgKi9cbiAgICB1cGRhdGVCdWNrZXQoaWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHB1dCh0aGlzLmZldGNoLCBgJHt0aGlzLnVybH0vYnVja2V0LyR7aWR9YCwge1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaWQsXG4gICAgICAgICAgICAgICAgICAgIHB1YmxpYzogb3B0aW9ucy5wdWJsaWMsXG4gICAgICAgICAgICAgICAgICAgIGZpbGVfc2l6ZV9saW1pdDogb3B0aW9ucy5maWxlU2l6ZUxpbWl0LFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkX21pbWVfdHlwZXM6IG9wdGlvbnMuYWxsb3dlZE1pbWVUeXBlcyxcbiAgICAgICAgICAgICAgICB9LCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIG9iamVjdHMgaW5zaWRlIGEgc2luZ2xlIGJ1Y2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGJ1Y2tldCB5b3Ugd291bGQgbGlrZSB0byBlbXB0eS5cbiAgICAgKi9cbiAgICBlbXB0eUJ1Y2tldChpZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcG9zdCh0aGlzLmZldGNoLCBgJHt0aGlzLnVybH0vYnVja2V0LyR7aWR9L2VtcHR5YCwge30sIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhbiBleGlzdGluZyBidWNrZXQuIEEgYnVja2V0IGNhbid0IGJlIGRlbGV0ZWQgd2l0aCBleGlzdGluZyBvYmplY3RzIGluc2lkZSBpdC5cbiAgICAgKiBZb3UgbXVzdCBmaXJzdCBgZW1wdHkoKWAgdGhlIGJ1Y2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGJ1Y2tldCB5b3Ugd291bGQgbGlrZSB0byBkZWxldGUuXG4gICAgICovXG4gICAgZGVsZXRlQnVja2V0KGlkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCByZW1vdmUodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L2J1Y2tldC8ke2lkfWAsIHt9LCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RvcmFnZUJ1Y2tldEFwaS5qcy5tYXAiLCJpbXBvcnQgU3RvcmFnZUZpbGVBcGkgZnJvbSAnLi9wYWNrYWdlcy9TdG9yYWdlRmlsZUFwaSc7XG5pbXBvcnQgU3RvcmFnZUJ1Y2tldEFwaSBmcm9tICcuL3BhY2thZ2VzL1N0b3JhZ2VCdWNrZXRBcGknO1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VDbGllbnQgZXh0ZW5kcyBTdG9yYWdlQnVja2V0QXBpIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIGhlYWRlcnMgPSB7fSwgZmV0Y2gpIHtcbiAgICAgICAgc3VwZXIodXJsLCBoZWFkZXJzLCBmZXRjaCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gZmlsZSBvcGVyYXRpb24gaW4gYSBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGJ1Y2tldCBpZCB0byBvcGVyYXRlIG9uLlxuICAgICAqL1xuICAgIGZyb20oaWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdG9yYWdlRmlsZUFwaSh0aGlzLnVybCwgdGhpcy5oZWFkZXJzLCBpZCwgdGhpcy5mZXRjaCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RvcmFnZUNsaWVudC5qcy5tYXAiLCJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uJztcbmxldCBKU19FTlYgPSAnJztcbi8vIEB0cy1pZ25vcmVcbmlmICh0eXBlb2YgRGVubyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBKU19FTlYgPSAnZGVubyc7XG59XG5lbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgSlNfRU5WID0gJ3dlYic7XG59XG5lbHNlIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIEpTX0VOViA9ICdyZWFjdC1uYXRpdmUnO1xufVxuZWxzZSB7XG4gICAgSlNfRU5WID0gJ25vZGUnO1xufVxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSEVBREVSUyA9IHsgJ1gtQ2xpZW50LUluZm8nOiBgc3VwYWJhc2UtanMtJHtKU19FTlZ9LyR7dmVyc2lvbn1gIH07XG5leHBvcnQgY29uc3QgREVGQVVMVF9HTE9CQUxfT1BUSU9OUyA9IHtcbiAgICBoZWFkZXJzOiBERUZBVUxUX0hFQURFUlMsXG59O1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfREJfT1BUSU9OUyA9IHtcbiAgICBzY2hlbWE6ICdwdWJsaWMnLFxufTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0FVVEhfT1BUSU9OUyA9IHtcbiAgICBhdXRvUmVmcmVzaFRva2VuOiB0cnVlLFxuICAgIHBlcnNpc3RTZXNzaW9uOiB0cnVlLFxuICAgIGRldGVjdFNlc3Npb25JblVybDogdHJ1ZSxcbiAgICBmbG93VHlwZTogJ2ltcGxpY2l0Jyxcbn07XG5leHBvcnQgY29uc3QgREVGQVVMVF9SRUFMVElNRV9PUFRJT05TID0ge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgbm9kZUZldGNoLCB7IEhlYWRlcnMgYXMgTm9kZUZldGNoSGVhZGVycyB9IGZyb20gJ0BzdXBhYmFzZS9ub2RlLWZldGNoJztcbmV4cG9ydCBjb25zdCByZXNvbHZlRmV0Y2ggPSAoY3VzdG9tRmV0Y2gpID0+IHtcbiAgICBsZXQgX2ZldGNoO1xuICAgIGlmIChjdXN0b21GZXRjaCkge1xuICAgICAgICBfZmV0Y2ggPSBjdXN0b21GZXRjaDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfZmV0Y2ggPSBub2RlRmV0Y2g7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfZmV0Y2ggPSBmZXRjaDtcbiAgICB9XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiBfZmV0Y2goLi4uYXJncyk7XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVIZWFkZXJzQ29uc3RydWN0b3IgPSAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBIZWFkZXJzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gTm9kZUZldGNoSGVhZGVycztcbiAgICB9XG4gICAgcmV0dXJuIEhlYWRlcnM7XG59O1xuZXhwb3J0IGNvbnN0IGZldGNoV2l0aEF1dGggPSAoc3VwYWJhc2VLZXksIGdldEFjY2Vzc1Rva2VuLCBjdXN0b21GZXRjaCkgPT4ge1xuICAgIGNvbnN0IGZldGNoID0gcmVzb2x2ZUZldGNoKGN1c3RvbUZldGNoKTtcbiAgICBjb25zdCBIZWFkZXJzQ29uc3RydWN0b3IgPSByZXNvbHZlSGVhZGVyc0NvbnN0cnVjdG9yKCk7XG4gICAgcmV0dXJuIChpbnB1dCwgaW5pdCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSAoX2EgPSAoeWllbGQgZ2V0QWNjZXNzVG9rZW4oKSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHN1cGFiYXNlS2V5O1xuICAgICAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzQ29uc3RydWN0b3IoaW5pdCA9PT0gbnVsbCB8fCBpbml0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0LmhlYWRlcnMpO1xuICAgICAgICBpZiAoIWhlYWRlcnMuaGFzKCdhcGlrZXknKSkge1xuICAgICAgICAgICAgaGVhZGVycy5zZXQoJ2FwaWtleScsIHN1cGFiYXNlS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhlYWRlcnMuaGFzKCdBdXRob3JpemF0aW9uJykpIHtcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2FjY2Vzc1Rva2VufWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmZXRjaChpbnB1dCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbml0KSwgeyBoZWFkZXJzIH0pKTtcbiAgICB9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaC5qcy5tYXAiLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9ICcyLjcwLjAnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiLCJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uJztcbi8qKiBDdXJyZW50IHNlc3Npb24gd2lsbCBiZSBjaGVja2VkIGZvciByZWZyZXNoIGF0IHRoaXMgaW50ZXJ2YWwuICovXG5leHBvcnQgY29uc3QgQVVUT19SRUZSRVNIX1RJQ0tfRFVSQVRJT05fTVMgPSAzMCAqIDEwMDA7XG4vKipcbiAqIEEgdG9rZW4gcmVmcmVzaCB3aWxsIGJlIGF0dGVtcHRlZCB0aGlzIG1hbnkgdGlja3MgYmVmb3JlIHRoZSBjdXJyZW50IHNlc3Npb24gZXhwaXJlcy4gKi9cbmV4cG9ydCBjb25zdCBBVVRPX1JFRlJFU0hfVElDS19USFJFU0hPTEQgPSAzO1xuLypcbiAqIEVhcmxpZXN0IHRpbWUgYmVmb3JlIGFuIGFjY2VzcyB0b2tlbiBleHBpcmVzIHRoYXQgdGhlIHNlc3Npb24gc2hvdWxkIGJlIHJlZnJlc2hlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEVYUElSWV9NQVJHSU5fTVMgPSBBVVRPX1JFRlJFU0hfVElDS19USFJFU0hPTEQgKiBBVVRPX1JFRlJFU0hfVElDS19EVVJBVElPTl9NUztcbmV4cG9ydCBjb25zdCBHT1RSVUVfVVJMID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6OTk5OSc7XG5leHBvcnQgY29uc3QgU1RPUkFHRV9LRVkgPSAnc3VwYWJhc2UuYXV0aC50b2tlbic7XG5leHBvcnQgY29uc3QgQVVESUVOQ0UgPSAnJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX0hFQURFUlMgPSB7ICdYLUNsaWVudC1JbmZvJzogYGdvdHJ1ZS1qcy8ke3ZlcnNpb259YCB9O1xuZXhwb3J0IGNvbnN0IE5FVFdPUktfRkFJTFVSRSA9IHtcbiAgICBNQVhfUkVUUklFUzogMTAsXG4gICAgUkVUUllfSU5URVJWQUw6IDIsIC8vIGluIGRlY2lzZWNvbmRzXG59O1xuZXhwb3J0IGNvbnN0IEFQSV9WRVJTSU9OX0hFQURFUl9OQU1FID0gJ1gtU3VwYWJhc2UtQXBpLVZlcnNpb24nO1xuZXhwb3J0IGNvbnN0IEFQSV9WRVJTSU9OUyA9IHtcbiAgICAnMjAyNC0wMS0wMSc6IHtcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLnBhcnNlKCcyMDI0LTAxLTAxVDAwOjAwOjAwLjBaJyksXG4gICAgICAgIG5hbWU6ICcyMDI0LTAxLTAxJyxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCQVNFNjRVUkxfUkVHRVggPSAvXihbYS16MC05Xy1dezR9KSooJHxbYS16MC05Xy1dezN9JHxbYS16MC05Xy1dezJ9JCkkL2k7XG5leHBvcnQgY29uc3QgSldLU19UVEwgPSA2MDAwMDA7IC8vIDEwIG1pbnV0ZXNcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJleHBvcnQgY2xhc3MgQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1cywgY29kZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5fX2lzQXV0aEVycm9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0F1dGhFcnJvcic7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhFcnJvcihlcnJvcikge1xuICAgIHJldHVybiB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmIGVycm9yICE9PSBudWxsICYmICdfX2lzQXV0aEVycm9yJyBpbiBlcnJvcjtcbn1cbmV4cG9ydCBjbGFzcyBBdXRoQXBpRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1cywgY29kZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBzdGF0dXMsIGNvZGUpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQXV0aEFwaUVycm9yJztcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aEFwaUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGlzQXV0aEVycm9yKGVycm9yKSAmJiBlcnJvci5uYW1lID09PSAnQXV0aEFwaUVycm9yJztcbn1cbmV4cG9ydCBjbGFzcyBBdXRoVW5rbm93bkVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcmlnaW5hbEVycm9yKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQXV0aFVua25vd25FcnJvcic7XG4gICAgICAgIHRoaXMub3JpZ2luYWxFcnJvciA9IG9yaWdpbmFsRXJyb3I7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEN1c3RvbUF1dGhFcnJvciBleHRlbmRzIEF1dGhFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgbmFtZSwgc3RhdHVzLCBjb2RlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHN0YXR1cywgY29kZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBdXRoU2Vzc2lvbk1pc3NpbmdFcnJvciBleHRlbmRzIEN1c3RvbUF1dGhFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdBdXRoIHNlc3Npb24gbWlzc2luZyEnLCAnQXV0aFNlc3Npb25NaXNzaW5nRXJyb3InLCA0MDAsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gaXNBdXRoRXJyb3IoZXJyb3IpICYmIGVycm9yLm5hbWUgPT09ICdBdXRoU2Vzc2lvbk1pc3NpbmdFcnJvcic7XG59XG5leHBvcnQgY2xhc3MgQXV0aEludmFsaWRUb2tlblJlc3BvbnNlRXJyb3IgZXh0ZW5kcyBDdXN0b21BdXRoRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignQXV0aCBzZXNzaW9uIG9yIHVzZXIgbWlzc2luZycsICdBdXRoSW52YWxpZFRva2VuUmVzcG9uc2VFcnJvcicsIDUwMCwgdW5kZWZpbmVkKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQXV0aEludmFsaWRDcmVkZW50aWFsc0Vycm9yIGV4dGVuZHMgQ3VzdG9tQXV0aEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdBdXRoSW52YWxpZENyZWRlbnRpYWxzRXJyb3InLCA0MDAsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEF1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvciBleHRlbmRzIEN1c3RvbUF1dGhFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZGV0YWlscyA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ0F1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvcicsIDUwMCwgdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgIGRldGFpbHM6IHRoaXMuZGV0YWlscyxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gaXNBdXRoRXJyb3IoZXJyb3IpICYmIGVycm9yLm5hbWUgPT09ICdBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3InO1xufVxuZXhwb3J0IGNsYXNzIEF1dGhQS0NFR3JhbnRDb2RlRXhjaGFuZ2VFcnJvciBleHRlbmRzIEN1c3RvbUF1dGhFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZGV0YWlscyA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ0F1dGhQS0NFR3JhbnRDb2RlRXhjaGFuZ2VFcnJvcicsIDUwMCwgdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgIGRldGFpbHM6IHRoaXMuZGV0YWlscyxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IgZXh0ZW5kcyBDdXN0b21BdXRoRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1cykge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCAnQXV0aFJldHJ5YWJsZUZldGNoRXJyb3InLCBzdGF0dXMsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gaXNBdXRoRXJyb3IoZXJyb3IpICYmIGVycm9yLm5hbWUgPT09ICdBdXRoUmV0cnlhYmxlRmV0Y2hFcnJvcic7XG59XG4vKipcbiAqIFRoaXMgZXJyb3IgaXMgdGhyb3duIG9uIGNlcnRhaW4gbWV0aG9kcyB3aGVuIHRoZSBwYXNzd29yZCB1c2VkIGlzIGRlZW1lZFxuICogd2Vhay4gSW5zcGVjdCB0aGUgcmVhc29ucyB0byBpZGVudGlmeSB3aGF0IHBhc3N3b3JkIHN0cmVuZ3RoIHJ1bGVzIGFyZVxuICogaW5hZGVxdWF0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhXZWFrUGFzc3dvcmRFcnJvciBleHRlbmRzIEN1c3RvbUF1dGhFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzLCByZWFzb25zKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdBdXRoV2Vha1Bhc3N3b3JkRXJyb3InLCBzdGF0dXMsICd3ZWFrX3Bhc3N3b3JkJyk7XG4gICAgICAgIHRoaXMucmVhc29ucyA9IHJlYXNvbnM7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aFdlYWtQYXNzd29yZEVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGlzQXV0aEVycm9yKGVycm9yKSAmJiBlcnJvci5uYW1lID09PSAnQXV0aFdlYWtQYXNzd29yZEVycm9yJztcbn1cbmV4cG9ydCBjbGFzcyBBdXRoSW52YWxpZEp3dEVycm9yIGV4dGVuZHMgQ3VzdG9tQXV0aEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdBdXRoSW52YWxpZEp3dEVycm9yJywgNDAwLCAnaW52YWxpZF9qd3QnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIiwiLyoqXG4gKiBBdm9pZCBtb2RpZnlpbmcgdGhpcyBmaWxlLiBJdCdzIHBhcnQgb2ZcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zdXBhYmFzZS1jb21tdW5pdHkvYmFzZTY0dXJsLWpzLiAgU3VibWl0IGFsbCBmaXhlcyBvblxuICogdGhhdCByZXBvIVxuICovXG4vKipcbiAqIEFuIGFycmF5IG9mIGNoYXJhY3RlcnMgdGhhdCBlbmNvZGUgNiBiaXRzIGludG8gYSBCYXNlNjQtVVJMIGFscGhhYmV0XG4gKiBjaGFyYWN0ZXIuXG4gKi9cbmNvbnN0IFRPX0JBU0U2NFVSTCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS1fJy5zcGxpdCgnJyk7XG4vKipcbiAqIEFuIGFycmF5IG9mIGNoYXJhY3RlcnMgdGhhdCBjYW4gYXBwZWFyIGluIGEgQmFzZTY0LVVSTCBlbmNvZGVkIHN0cmluZyBidXRcbiAqIHNob3VsZCBiZSBpZ25vcmVkLlxuICovXG5jb25zdCBJR05PUkVfQkFTRTY0VVJMID0gJyBcXHRcXG5cXHI9Jy5zcGxpdCgnJyk7XG4vKipcbiAqIEFuIGFycmF5IG9mIDEyOCBudW1iZXJzIHRoYXQgbWFwIGEgQmFzZTY0LVVSTCBjaGFyYWN0ZXIgdG8gNiBiaXRzLCBvciBpZiAtMlxuICogdXNlZCB0byBza2lwIHRoZSBjaGFyYWN0ZXIsIG9yIGlmIC0xIHVzZWQgdG8gZXJyb3Igb3V0LlxuICovXG5jb25zdCBGUk9NX0JBU0U2NFVSTCA9ICgoKSA9PiB7XG4gICAgY29uc3QgY2hhck1hcCA9IG5ldyBBcnJheSgxMjgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhck1hcC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjaGFyTWFwW2ldID0gLTE7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgSUdOT1JFX0JBU0U2NFVSTC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjaGFyTWFwW0lHTk9SRV9CQVNFNjRVUkxbaV0uY2hhckNvZGVBdCgwKV0gPSAtMjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBUT19CQVNFNjRVUkwubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY2hhck1hcFtUT19CQVNFNjRVUkxbaV0uY2hhckNvZGVBdCgwKV0gPSBpO1xuICAgIH1cbiAgICByZXR1cm4gY2hhck1hcDtcbn0pKCk7XG4vKipcbiAqIENvbnZlcnRzIGEgYnl0ZSB0byBhIEJhc2U2NC1VUkwgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBieXRlIFRoZSBieXRlIHRvIGNvbnZlcnQsIG9yIG51bGwgdG8gZmx1c2ggYXQgdGhlIGVuZCBvZiB0aGUgYnl0ZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSBzdGF0ZSBUaGUgQmFzZTY0IGNvbnZlcnNpb24gc3RhdGUuIFBhc3MgYW4gaW5pdGlhbCB2YWx1ZSBvZiBgeyBxdWV1ZTogMCwgcXVldWVkQml0czogMCB9YC5cbiAqIEBwYXJhbSBlbWl0IEEgZnVuY3Rpb24gY2FsbGVkIHdpdGggdGhlIG5leHQgQmFzZTY0IGNoYXJhY3RlciB3aGVuIHJlYWR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYnl0ZVRvQmFzZTY0VVJMKGJ5dGUsIHN0YXRlLCBlbWl0KSB7XG4gICAgaWYgKGJ5dGUgIT09IG51bGwpIHtcbiAgICAgICAgc3RhdGUucXVldWUgPSAoc3RhdGUucXVldWUgPDwgOCkgfCBieXRlO1xuICAgICAgICBzdGF0ZS5xdWV1ZWRCaXRzICs9IDg7XG4gICAgICAgIHdoaWxlIChzdGF0ZS5xdWV1ZWRCaXRzID49IDYpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IChzdGF0ZS5xdWV1ZSA+PiAoc3RhdGUucXVldWVkQml0cyAtIDYpKSAmIDYzO1xuICAgICAgICAgICAgZW1pdChUT19CQVNFNjRVUkxbcG9zXSk7XG4gICAgICAgICAgICBzdGF0ZS5xdWV1ZWRCaXRzIC09IDY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc3RhdGUucXVldWVkQml0cyA+IDApIHtcbiAgICAgICAgc3RhdGUucXVldWUgPSBzdGF0ZS5xdWV1ZSA8PCAoNiAtIHN0YXRlLnF1ZXVlZEJpdHMpO1xuICAgICAgICBzdGF0ZS5xdWV1ZWRCaXRzID0gNjtcbiAgICAgICAgd2hpbGUgKHN0YXRlLnF1ZXVlZEJpdHMgPj0gNikge1xuICAgICAgICAgICAgY29uc3QgcG9zID0gKHN0YXRlLnF1ZXVlID4+IChzdGF0ZS5xdWV1ZWRCaXRzIC0gNikpICYgNjM7XG4gICAgICAgICAgICBlbWl0KFRPX0JBU0U2NFVSTFtwb3NdKTtcbiAgICAgICAgICAgIHN0YXRlLnF1ZXVlZEJpdHMgLT0gNjtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQ29udmVydHMgYSBTdHJpbmcgY2hhciBjb2RlIChleHRyYWN0ZWQgdXNpbmcgYHN0cmluZy5jaGFyQ29kZUF0KHBvc2l0aW9uKWApIHRvIGEgc2VxdWVuY2Ugb2YgQmFzZTY0LVVSTCBjaGFyYWN0ZXJzLlxuICpcbiAqIEBwYXJhbSBjaGFyQ29kZSBUaGUgY2hhciBjb2RlIG9mIHRoZSBKYXZhU2NyaXB0IHN0cmluZy5cbiAqIEBwYXJhbSBzdGF0ZSBUaGUgQmFzZTY0IHN0YXRlLiBQYXNzIGFuIGluaXRpYWwgdmFsdWUgb2YgYHsgcXVldWU6IDAsIHF1ZXVlZEJpdHM6IDAgfWAuXG4gKiBAcGFyYW0gZW1pdCBBIGZ1bmN0aW9uIGNhbGxlZCB3aXRoIHRoZSBuZXh0IGJ5dGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlRnJvbUJhc2U2NFVSTChjaGFyQ29kZSwgc3RhdGUsIGVtaXQpIHtcbiAgICBjb25zdCBiaXRzID0gRlJPTV9CQVNFNjRVUkxbY2hhckNvZGVdO1xuICAgIGlmIChiaXRzID4gLTEpIHtcbiAgICAgICAgLy8gdmFsaWQgQmFzZTY0LVVSTCBjaGFyYWN0ZXJcbiAgICAgICAgc3RhdGUucXVldWUgPSAoc3RhdGUucXVldWUgPDwgNikgfCBiaXRzO1xuICAgICAgICBzdGF0ZS5xdWV1ZWRCaXRzICs9IDY7XG4gICAgICAgIHdoaWxlIChzdGF0ZS5xdWV1ZWRCaXRzID49IDgpIHtcbiAgICAgICAgICAgIGVtaXQoKHN0YXRlLnF1ZXVlID4+IChzdGF0ZS5xdWV1ZWRCaXRzIC0gOCkpICYgMHhmZik7XG4gICAgICAgICAgICBzdGF0ZS5xdWV1ZWRCaXRzIC09IDg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYml0cyA9PT0gLTIpIHtcbiAgICAgICAgLy8gaWdub3JlIHNwYWNlcywgdGFicywgbmV3bGluZXMsID1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEJhc2U2NC1VUkwgY2hhcmFjdGVyIFwiJHtTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKX1cImApO1xuICAgIH1cbn1cbi8qKlxuICogQ29udmVydHMgYSBKYXZhU2NyaXB0IHN0cmluZyAod2hpY2ggbWF5IGluY2x1ZGUgYW55IHZhbGlkIGNoYXJhY3RlcikgaW50byBhXG4gKiBCYXNlNjQtVVJMIGVuY29kZWQgc3RyaW5nLiBUaGUgc3RyaW5nIGlzIGZpcnN0IGVuY29kZWQgaW4gVVRGLTggd2hpY2ggaXNcbiAqIHRoZW4gZW5jb2RlZCBhcyBCYXNlNjQtVVJMLlxuICpcbiAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9CYXNlNjRVUkwoc3RyKSB7XG4gICAgY29uc3QgYmFzZTY0ID0gW107XG4gICAgY29uc3QgZW1pdHRlciA9IChjaGFyKSA9PiB7XG4gICAgICAgIGJhc2U2NC5wdXNoKGNoYXIpO1xuICAgIH07XG4gICAgY29uc3Qgc3RhdGUgPSB7IHF1ZXVlOiAwLCBxdWV1ZWRCaXRzOiAwIH07XG4gICAgc3RyaW5nVG9VVEY4KHN0ciwgKGJ5dGUpID0+IHtcbiAgICAgICAgYnl0ZVRvQmFzZTY0VVJMKGJ5dGUsIHN0YXRlLCBlbWl0dGVyKTtcbiAgICB9KTtcbiAgICBieXRlVG9CYXNlNjRVUkwobnVsbCwgc3RhdGUsIGVtaXR0ZXIpO1xuICAgIHJldHVybiBiYXNlNjQuam9pbignJyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgQmFzZTY0LVVSTCBlbmNvZGVkIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBzdHJpbmcuIEl0IGlzIGFzc3VtZWRcbiAqIHRoYXQgdGhlIHVuZGVybHlpbmcgc3RyaW5nIGhhcyBiZWVuIGVuY29kZWQgYXMgVVRGLTguXG4gKlxuICogQHBhcmFtIHN0ciBUaGUgQmFzZTY0LVVSTCBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0Zyb21CYXNlNjRVUkwoc3RyKSB7XG4gICAgY29uc3QgY29udiA9IFtdO1xuICAgIGNvbnN0IHV0ZjhFbWl0ID0gKGNvZGVwb2ludCkgPT4ge1xuICAgICAgICBjb252LnB1c2goU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZXBvaW50KSk7XG4gICAgfTtcbiAgICBjb25zdCB1dGY4U3RhdGUgPSB7XG4gICAgICAgIHV0ZjhzZXE6IDAsXG4gICAgICAgIGNvZGVwb2ludDogMCxcbiAgICB9O1xuICAgIGNvbnN0IGI2NFN0YXRlID0geyBxdWV1ZTogMCwgcXVldWVkQml0czogMCB9O1xuICAgIGNvbnN0IGJ5dGVFbWl0ID0gKGJ5dGUpID0+IHtcbiAgICAgICAgc3RyaW5nRnJvbVVURjgoYnl0ZSwgdXRmOFN0YXRlLCB1dGY4RW1pdCk7XG4gICAgfTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBieXRlRnJvbUJhc2U2NFVSTChzdHIuY2hhckNvZGVBdChpKSwgYjY0U3RhdGUsIGJ5dGVFbWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnYuam9pbignJyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgVW5pY29kZSBjb2RlcG9pbnQgdG8gYSBtdWx0aS1ieXRlIFVURi04IHNlcXVlbmNlLlxuICpcbiAqIEBwYXJhbSBjb2RlcG9pbnQgVGhlIFVuaWNvZGUgY29kZXBvaW50LlxuICogQHBhcmFtIGVtaXQgICAgICBGdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBVVEYtOCBieXRlIHRoYXQgcmVwcmVzZW50cyB0aGUgY29kZXBvaW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29kZXBvaW50VG9VVEY4KGNvZGVwb2ludCwgZW1pdCkge1xuICAgIGlmIChjb2RlcG9pbnQgPD0gMHg3Zikge1xuICAgICAgICBlbWl0KGNvZGVwb2ludCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZXBvaW50IDw9IDB4N2ZmKSB7XG4gICAgICAgIGVtaXQoMHhjMCB8IChjb2RlcG9pbnQgPj4gNikpO1xuICAgICAgICBlbWl0KDB4ODAgfCAoY29kZXBvaW50ICYgMHgzZikpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvZGVwb2ludCA8PSAweGZmZmYpIHtcbiAgICAgICAgZW1pdCgweGUwIHwgKGNvZGVwb2ludCA+PiAxMikpO1xuICAgICAgICBlbWl0KDB4ODAgfCAoKGNvZGVwb2ludCA+PiA2KSAmIDB4M2YpKTtcbiAgICAgICAgZW1pdCgweDgwIHwgKGNvZGVwb2ludCAmIDB4M2YpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlcG9pbnQgPD0gMHgxMGZmZmYpIHtcbiAgICAgICAgZW1pdCgweGYwIHwgKGNvZGVwb2ludCA+PiAxOCkpO1xuICAgICAgICBlbWl0KDB4ODAgfCAoKGNvZGVwb2ludCA+PiAxMikgJiAweDNmKSk7XG4gICAgICAgIGVtaXQoMHg4MCB8ICgoY29kZXBvaW50ID4+IDYpICYgMHgzZikpO1xuICAgICAgICBlbWl0KDB4ODAgfCAoY29kZXBvaW50ICYgMHgzZikpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIFVuaWNvZGUgY29kZXBvaW50OiAke2NvZGVwb2ludC50b1N0cmluZygxNil9YCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgSmF2YVNjcmlwdCBzdHJpbmcgdG8gYSBzZXF1ZW5jZSBvZiBVVEYtOCBieXRlcy5cbiAqXG4gKiBAcGFyYW0gc3RyICBUaGUgc3RyaW5nIHRvIGNvbnZlcnQgdG8gVVRGLTguXG4gKiBAcGFyYW0gZW1pdCBGdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBVVEYtOCBieXRlIG9mIHRoZSBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdUb1VURjgoc3RyLCBlbWl0KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IGNvZGVwb2ludCA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoY29kZXBvaW50ID4gMHhkN2ZmICYmIGNvZGVwb2ludCA8PSAweGRiZmYpIHtcbiAgICAgICAgICAgIC8vIG1vc3QgVVRGLTE2IGNvZGVwb2ludHMgYXJlIFVuaWNvZGUgY29kZXBvaW50cywgZXhjZXB0IHZhbHVlcyBpbiB0aGlzXG4gICAgICAgICAgICAvLyByYW5nZSB3aGVyZSB0aGUgbmV4dCBVVEYtMTYgY29kZXBvaW50IG5lZWRzIHRvIGJlIGNvbWJpbmVkIHdpdGggdGhlXG4gICAgICAgICAgICAvLyBjdXJyZW50IG9uZSB0byBnZXQgdGhlIFVuaWNvZGUgY29kZXBvaW50XG4gICAgICAgICAgICBjb25zdCBoaWdoU3Vycm9nYXRlID0gKChjb2RlcG9pbnQgLSAweGQ4MDApICogMHg0MDApICYgMHhmZmZmO1xuICAgICAgICAgICAgY29uc3QgbG93U3Vycm9nYXRlID0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAtIDB4ZGMwMCkgJiAweGZmZmY7XG4gICAgICAgICAgICBjb2RlcG9pbnQgPSAobG93U3Vycm9nYXRlIHwgaGlnaFN1cnJvZ2F0ZSkgKyAweDEwMDAwO1xuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVwb2ludFRvVVRGOChjb2RlcG9pbnQsIGVtaXQpO1xuICAgIH1cbn1cbi8qKlxuICogQ29udmVydHMgYSBVVEYtOCBieXRlIHRvIGEgVW5pY29kZSBjb2RlcG9pbnQuXG4gKlxuICogQHBhcmFtIGJ5dGUgIFRoZSBVVEYtOCBieXRlIG5leHQgaW4gdGhlIHNlcXVlbmNlLlxuICogQHBhcmFtIHN0YXRlIFRoZSBzaGFyZWQgc3RhdGUgYmV0d2VlbiBjb25zZWN1dGl2ZSBVVEYtOCBieXRlcyBpbiB0aGVcbiAqICAgICAgICAgICAgICBzZXF1ZW5jZSwgYW4gb2JqZWN0IHdpdGggdGhlIHNoYXBlIGB7IHV0ZjhzZXE6IDAsIGNvZGVwb2ludDogMCB9YC5cbiAqIEBwYXJhbSBlbWl0ICBGdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBjb2RlcG9pbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdGcm9tVVRGOChieXRlLCBzdGF0ZSwgZW1pdCkge1xuICAgIGlmIChzdGF0ZS51dGY4c2VxID09PSAwKSB7XG4gICAgICAgIGlmIChieXRlIDw9IDB4N2YpIHtcbiAgICAgICAgICAgIGVtaXQoYnl0ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gY291bnQgdGhlIG51bWJlciBvZiAxIGxlYWRpbmcgYml0cyB1bnRpbCB5b3UgcmVhY2ggMFxuICAgICAgICBmb3IgKGxldCBsZWFkaW5nQml0ID0gMTsgbGVhZGluZ0JpdCA8IDY7IGxlYWRpbmdCaXQgKz0gMSkge1xuICAgICAgICAgICAgaWYgKCgoYnl0ZSA+PiAoNyAtIGxlYWRpbmdCaXQpKSAmIDEpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUudXRmOHNlcSA9IGxlYWRpbmdCaXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLnV0ZjhzZXEgPT09IDIpIHtcbiAgICAgICAgICAgIHN0YXRlLmNvZGVwb2ludCA9IGJ5dGUgJiAzMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS51dGY4c2VxID09PSAzKSB7XG4gICAgICAgICAgICBzdGF0ZS5jb2RlcG9pbnQgPSBieXRlICYgMTU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUudXRmOHNlcSA9PT0gNCkge1xuICAgICAgICAgICAgc3RhdGUuY29kZXBvaW50ID0gYnl0ZSAmIDc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgVVRGLTggc2VxdWVuY2UnKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS51dGY4c2VxIC09IDE7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0YXRlLnV0ZjhzZXEgPiAwKSB7XG4gICAgICAgIGlmIChieXRlIDw9IDB4N2YpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBVVEYtOCBzZXF1ZW5jZScpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmNvZGVwb2ludCA9IChzdGF0ZS5jb2RlcG9pbnQgPDwgNikgfCAoYnl0ZSAmIDYzKTtcbiAgICAgICAgc3RhdGUudXRmOHNlcSAtPSAxO1xuICAgICAgICBpZiAoc3RhdGUudXRmOHNlcSA9PT0gMCkge1xuICAgICAgICAgICAgZW1pdChzdGF0ZS5jb2RlcG9pbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb25zIHRvIGNvbnZlcnQgZGlmZmVyZW50IHR5cGVzIG9mIHN0cmluZ3MgdG8gVWludDhBcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmFzZTY0VXJsVG9VaW50OEFycmF5KHN0cikge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IHN0YXRlID0geyBxdWV1ZTogMCwgcXVldWVkQml0czogMCB9O1xuICAgIGNvbnN0IG9uQnl0ZSA9IChieXRlKSA9PiB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGJ5dGUpO1xuICAgIH07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYnl0ZUZyb21CYXNlNjRVUkwoc3RyLmNoYXJDb2RlQXQoaSksIHN0YXRlLCBvbkJ5dGUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdUb1VpbnQ4QXJyYXkoc3RyKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgc3RyaW5nVG9VVEY4KHN0ciwgKGJ5dGUpID0+IHJlc3VsdC5wdXNoKGJ5dGUpKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvQmFzZTY0VVJMKGJ5dGVzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3Qgc3RhdGUgPSB7IHF1ZXVlOiAwLCBxdWV1ZWRCaXRzOiAwIH07XG4gICAgY29uc3Qgb25DaGFyID0gKGNoYXIpID0+IHtcbiAgICAgICAgcmVzdWx0LnB1c2goY2hhcik7XG4gICAgfTtcbiAgICBieXRlcy5mb3JFYWNoKChieXRlKSA9PiBieXRlVG9CYXNlNjRVUkwoYnl0ZSwgc3RhdGUsIG9uQ2hhcikpO1xuICAgIC8vIGFsd2F5cyBjYWxsIHdpdGggYG51bGxgIGFmdGVyIHByb2Nlc3NpbmcgYWxsIGJ5dGVzXG4gICAgYnl0ZVRvQmFzZTY0VVJMKG51bGwsIHN0YXRlLCBvbkNoYXIpO1xuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjR1cmwuanMubWFwIiwiaW1wb3J0IHsgQVBJX1ZFUlNJT05fSEVBREVSX05BTUUsIEJBU0U2NFVSTF9SRUdFWCB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IEF1dGhJbnZhbGlkSnd0RXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgeyBiYXNlNjRVcmxUb1VpbnQ4QXJyYXksIHN0cmluZ0Zyb21CYXNlNjRVUkwgfSBmcm9tICcuL2Jhc2U2NHVybCc7XG5leHBvcnQgZnVuY3Rpb24gZXhwaXJlc0F0KGV4cGlyZXNJbikge1xuICAgIGNvbnN0IHRpbWVOb3cgPSBNYXRoLnJvdW5kKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICByZXR1cm4gdGltZU5vdyArIGV4cGlyZXNJbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1dWlkKCkge1xuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsIHYgPSBjID09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSAoKSA9PiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgbG9jYWxTdG9yYWdlV3JpdGVUZXN0cyA9IHtcbiAgICB0ZXN0ZWQ6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbn07XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGxvY2FsU3RvcmFnZSBpcyBzdXBwb3J0ZWQgb24gdGhpcyBicm93c2VyLlxuICovXG5leHBvcnQgY29uc3Qgc3VwcG9ydHNMb2NhbFN0b3JhZ2UgPSAoKSA9PiB7XG4gICAgaWYgKCFpc0Jyb3dzZXIoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcy5sb2NhbFN0b3JhZ2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRE9NIGV4Y2VwdGlvbiB3aGVuIGFjY2Vzc2luZyBgbG9jYWxTdG9yYWdlYFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsb2NhbFN0b3JhZ2VXcml0ZVRlc3RzLnRlc3RlZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlV3JpdGVUZXN0cy53cml0YWJsZTtcbiAgICB9XG4gICAgY29uc3QgcmFuZG9tS2V5ID0gYGxzd3QtJHtNYXRoLnJhbmRvbSgpfSR7TWF0aC5yYW5kb20oKX1gO1xuICAgIHRyeSB7XG4gICAgICAgIGdsb2JhbFRoaXMubG9jYWxTdG9yYWdlLnNldEl0ZW0ocmFuZG9tS2V5LCByYW5kb21LZXkpO1xuICAgICAgICBnbG9iYWxUaGlzLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHJhbmRvbUtleSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZVdyaXRlVGVzdHMudGVzdGVkID0gdHJ1ZTtcbiAgICAgICAgbG9jYWxTdG9yYWdlV3JpdGVUZXN0cy53cml0YWJsZSA9IHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGxvY2FsU3RvcmFnZSBjYW4ndCBiZSB3cml0dGVuIHRvXG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LmNocm9taXVtLm9yZy9mb3ItdGVzdGVycy9idWctcmVwb3J0aW5nLWd1aWRlbGluZXMvdW5jYXVnaHQtc2VjdXJpdHllcnJvci1mYWlsZWQtdG8tcmVhZC10aGUtbG9jYWxzdG9yYWdlLXByb3BlcnR5LWZyb20td2luZG93LWFjY2Vzcy1pcy1kZW5pZWQtZm9yLXRoaXMtZG9jdW1lbnRcbiAgICAgICAgbG9jYWxTdG9yYWdlV3JpdGVUZXN0cy50ZXN0ZWQgPSB0cnVlO1xuICAgICAgICBsb2NhbFN0b3JhZ2VXcml0ZVRlc3RzLndyaXRhYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBsb2NhbFN0b3JhZ2VXcml0ZVRlc3RzLndyaXRhYmxlO1xufTtcbi8qKlxuICogRXh0cmFjdHMgcGFyYW1ldGVycyBlbmNvZGVkIGluIHRoZSBVUkwgYm90aCBpbiB0aGUgcXVlcnkgYW5kIGZyYWdtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQYXJhbWV0ZXJzRnJvbVVSTChocmVmKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChocmVmKTtcbiAgICBpZiAodXJsLmhhc2ggJiYgdXJsLmhhc2hbMF0gPT09ICcjJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaGFzaFNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXModXJsLmhhc2guc3Vic3RyaW5nKDEpKTtcbiAgICAgICAgICAgIGhhc2hTZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gaGFzaCBpcyBub3QgYSBxdWVyeSBzdHJpbmdcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBzZWFyY2ggcGFyYW1ldGVycyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBoYXNoIHBhcmFtZXRlcnNcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGNvbnN0IHJlc29sdmVGZXRjaCA9IChjdXN0b21GZXRjaCkgPT4ge1xuICAgIGxldCBfZmV0Y2g7XG4gICAgaWYgKGN1c3RvbUZldGNoKSB7XG4gICAgICAgIF9mZXRjaCA9IGN1c3RvbUZldGNoO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIF9mZXRjaCA9ICguLi5hcmdzKSA9PiBpbXBvcnQoJ0BzdXBhYmFzZS9ub2RlLWZldGNoJykudGhlbigoeyBkZWZhdWx0OiBmZXRjaCB9KSA9PiBmZXRjaCguLi5hcmdzKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfZmV0Y2ggPSBmZXRjaDtcbiAgICB9XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiBfZmV0Y2goLi4uYXJncyk7XG59O1xuZXhwb3J0IGNvbnN0IGxvb2tzTGlrZUZldGNoUmVzcG9uc2UgPSAobWF5YmVSZXNwb25zZSkgPT4ge1xuICAgIHJldHVybiAodHlwZW9mIG1heWJlUmVzcG9uc2UgPT09ICdvYmplY3QnICYmXG4gICAgICAgIG1heWJlUmVzcG9uc2UgIT09IG51bGwgJiZcbiAgICAgICAgJ3N0YXR1cycgaW4gbWF5YmVSZXNwb25zZSAmJlxuICAgICAgICAnb2snIGluIG1heWJlUmVzcG9uc2UgJiZcbiAgICAgICAgJ2pzb24nIGluIG1heWJlUmVzcG9uc2UgJiZcbiAgICAgICAgdHlwZW9mIG1heWJlUmVzcG9uc2UuanNvbiA9PT0gJ2Z1bmN0aW9uJyk7XG59O1xuLy8gU3RvcmFnZSBoZWxwZXJzXG5leHBvcnQgY29uc3Qgc2V0SXRlbUFzeW5jID0gYXN5bmMgKHN0b3JhZ2UsIGtleSwgZGF0YSkgPT4ge1xuICAgIGF3YWl0IHN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbn07XG5leHBvcnQgY29uc3QgZ2V0SXRlbUFzeW5jID0gYXN5bmMgKHN0b3JhZ2UsIGtleSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgc3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn07XG5leHBvcnQgY29uc3QgcmVtb3ZlSXRlbUFzeW5jID0gYXN5bmMgKHN0b3JhZ2UsIGtleSkgPT4ge1xuICAgIGF3YWl0IHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xufTtcbi8qKlxuICogQSBkZWZlcnJlZCByZXByZXNlbnRzIHNvbWUgYXN5bmNocm9ub3VzIHdvcmsgdGhhdCBpcyBub3QgeWV0IGZpbmlzaGVkLCB3aGljaFxuICogbWF5IG9yIG1heSBub3QgY3VsbWluYXRlIGluIGEgdmFsdWUuXG4gKiBUYWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vbWlrZS1ub3J0aC90eXBlcy9ibG9iL21hc3Rlci9zcmMvYXN5bmMudHNcbiAqL1xuZXhwb3J0IGNsYXNzIERlZmVycmVkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHRyYS1zZW1pXG4gICAgICAgIDtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IERlZmVycmVkLnByb21pc2VDb25zdHJ1Y3RvcigocmVzLCByZWopID0+IHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXh0cmEtc2VtaVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzO1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWo7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbkRlZmVycmVkLnByb21pc2VDb25zdHJ1Y3RvciA9IFByb21pc2U7XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlSldUKHRva2VuKSB7XG4gICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xuICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF1dGhJbnZhbGlkSnd0RXJyb3IoJ0ludmFsaWQgSldUIHN0cnVjdHVyZScpO1xuICAgIH1cbiAgICAvLyBSZWdleCBjaGVja3MgZm9yIGJhc2U2NHVybCBmb3JtYXRcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghQkFTRTY0VVJMX1JFR0VYLnRlc3QocGFydHNbaV0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXV0aEludmFsaWRKd3RFcnJvcignSldUIG5vdCBpbiBiYXNlNjR1cmwgZm9ybWF0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgLy8gdXNpbmcgYmFzZTY0dXJsIGxpYlxuICAgICAgICBoZWFkZXI6IEpTT04ucGFyc2Uoc3RyaW5nRnJvbUJhc2U2NFVSTChwYXJ0c1swXSkpLFxuICAgICAgICBwYXlsb2FkOiBKU09OLnBhcnNlKHN0cmluZ0Zyb21CYXNlNjRVUkwocGFydHNbMV0pKSxcbiAgICAgICAgc2lnbmF0dXJlOiBiYXNlNjRVcmxUb1VpbnQ4QXJyYXkocGFydHNbMl0pLFxuICAgICAgICByYXc6IHtcbiAgICAgICAgICAgIGhlYWRlcjogcGFydHNbMF0sXG4gICAgICAgICAgICBwYXlsb2FkOiBwYXJ0c1sxXSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIG51bGwgYWZ0ZXIgc29tZSB0aW1lLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgoYWNjZXB0KSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gYWNjZXB0KG51bGwpLCB0aW1lKTtcbiAgICB9KTtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIHByb3ZpZGVkIGFzeW5jIGZ1bmN0aW9uIGludG8gYSByZXRyeWFibGUgZnVuY3Rpb24uIEVhY2ggcmVzdWx0XG4gKiBvciB0aHJvd24gZXJyb3IgaXMgc2VudCB0byB0aGUgaXNSZXRyeWFibGUgZnVuY3Rpb24gd2hpY2ggc2hvdWxkIHJldHVybiB0cnVlXG4gKiBpZiB0aGUgZnVuY3Rpb24gc2hvdWxkIHJ1biBhZ2Fpbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJldHJ5YWJsZShmbiwgaXNSZXRyeWFibGUpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKGFjY2VwdCwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXh0cmEtc2VtaVxuICAgICAgICA7XG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBhdHRlbXB0ID0gMDsgYXR0ZW1wdCA8IEluZmluaXR5OyBhdHRlbXB0KyspIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbihhdHRlbXB0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1JldHJ5YWJsZShhdHRlbXB0LCBudWxsLCByZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmV0cnlhYmxlKGF0dGVtcHQsIGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkZWMyaGV4KGRlYykge1xuICAgIHJldHVybiAoJzAnICsgZGVjLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yKTtcbn1cbi8vIEZ1bmN0aW9ucyBiZWxvdyB0YWtlbiBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MzMwOTQwOS9jcmVhdGluZy1hLWNvZGUtdmVyaWZpZXItYW5kLWNoYWxsZW5nZS1mb3ItcGtjZS1hdXRoLW9uLXNwb3RpZnktYXBpLWluLXJlYWN0anNcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVBLQ0VWZXJpZmllcigpIHtcbiAgICBjb25zdCB2ZXJpZmllckxlbmd0aCA9IDU2O1xuICAgIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQzMkFycmF5KHZlcmlmaWVyTGVuZ3RoKTtcbiAgICBpZiAodHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgY2hhclNldCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS0uX34nO1xuICAgICAgICBjb25zdCBjaGFyU2V0TGVuID0gY2hhclNldC5sZW5ndGg7XG4gICAgICAgIGxldCB2ZXJpZmllciA9ICcnO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcmlmaWVyTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZlcmlmaWVyICs9IGNoYXJTZXQuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJTZXRMZW4pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmVyaWZpZXI7XG4gICAgfVxuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuICAgIHJldHVybiBBcnJheS5mcm9tKGFycmF5LCBkZWMyaGV4KS5qb2luKCcnKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNoYTI1NihyYW5kb21TdHJpbmcpIHtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgY29uc3QgZW5jb2RlZERhdGEgPSBlbmNvZGVyLmVuY29kZShyYW5kb21TdHJpbmcpO1xuICAgIGNvbnN0IGhhc2ggPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGVuY29kZWREYXRhKTtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGhhc2gpO1xuICAgIHJldHVybiBBcnJheS5mcm9tKGJ5dGVzKVxuICAgICAgICAubWFwKChjKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpKVxuICAgICAgICAuam9pbignJyk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVQS0NFQ2hhbGxlbmdlKHZlcmlmaWVyKSB7XG4gICAgY29uc3QgaGFzQ3J5cHRvU3VwcG9ydCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHR5cGVvZiBjcnlwdG8uc3VidGxlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2YgVGV4dEVuY29kZXIgIT09ICd1bmRlZmluZWQnO1xuICAgIGlmICghaGFzQ3J5cHRvU3VwcG9ydCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1dlYkNyeXB0byBBUEkgaXMgbm90IHN1cHBvcnRlZC4gQ29kZSBjaGFsbGVuZ2UgbWV0aG9kIHdpbGwgZGVmYXVsdCB0byB1c2UgcGxhaW4gaW5zdGVhZCBvZiBzaGEyNTYuJyk7XG4gICAgICAgIHJldHVybiB2ZXJpZmllcjtcbiAgICB9XG4gICAgY29uc3QgaGFzaGVkID0gYXdhaXQgc2hhMjU2KHZlcmlmaWVyKTtcbiAgICByZXR1cm4gYnRvYShoYXNoZWQpLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpLnJlcGxhY2UoLz0rJC8sICcnKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb2RlQ2hhbGxlbmdlQW5kTWV0aG9kKHN0b3JhZ2UsIHN0b3JhZ2VLZXksIGlzUGFzc3dvcmRSZWNvdmVyeSA9IGZhbHNlKSB7XG4gICAgY29uc3QgY29kZVZlcmlmaWVyID0gZ2VuZXJhdGVQS0NFVmVyaWZpZXIoKTtcbiAgICBsZXQgc3RvcmVkQ29kZVZlcmlmaWVyID0gY29kZVZlcmlmaWVyO1xuICAgIGlmIChpc1Bhc3N3b3JkUmVjb3ZlcnkpIHtcbiAgICAgICAgc3RvcmVkQ29kZVZlcmlmaWVyICs9ICcvUEFTU1dPUkRfUkVDT1ZFUlknO1xuICAgIH1cbiAgICBhd2FpdCBzZXRJdGVtQXN5bmMoc3RvcmFnZSwgYCR7c3RvcmFnZUtleX0tY29kZS12ZXJpZmllcmAsIHN0b3JlZENvZGVWZXJpZmllcik7XG4gICAgY29uc3QgY29kZUNoYWxsZW5nZSA9IGF3YWl0IGdlbmVyYXRlUEtDRUNoYWxsZW5nZShjb2RlVmVyaWZpZXIpO1xuICAgIGNvbnN0IGNvZGVDaGFsbGVuZ2VNZXRob2QgPSBjb2RlVmVyaWZpZXIgPT09IGNvZGVDaGFsbGVuZ2UgPyAncGxhaW4nIDogJ3MyNTYnO1xuICAgIHJldHVybiBbY29kZUNoYWxsZW5nZSwgY29kZUNoYWxsZW5nZU1ldGhvZF07XG59XG4vKiogUGFyc2VzIHRoZSBBUEkgdmVyc2lvbiB3aGljaCBpcyAyWVlZLU1NLURELiAqL1xuY29uc3QgQVBJX1ZFUlNJT05fUkVHRVggPSAvXjJbMC05XXszfS0oMFsxLTldfDFbMC0yXSktKDBbMS05XXwxWzAtOV18MlswLTldfDNbMC0xXSkkL2k7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZXNwb25zZUFQSVZlcnNpb24ocmVzcG9uc2UpIHtcbiAgICBjb25zdCBhcGlWZXJzaW9uID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoQVBJX1ZFUlNJT05fSEVBREVSX05BTUUpO1xuICAgIGlmICghYXBpVmVyc2lvbikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCFhcGlWZXJzaW9uLm1hdGNoKEFQSV9WRVJTSU9OX1JFR0VYKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGAke2FwaVZlcnNpb259VDAwOjAwOjAwLjBaYCk7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVFeHAoZXhwKSB7XG4gICAgaWYgKCFleHApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGV4cCBjbGFpbScpO1xuICAgIH1cbiAgICBjb25zdCB0aW1lTm93ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgaWYgKGV4cCA8PSB0aW1lTm93KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSldUIGhhcyBleHBpcmVkJyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsZ29yaXRobShhbGcpIHtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdSUzI1Nic6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsXG4gICAgICAgICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ0VDRFNBJyxcbiAgICAgICAgICAgICAgICBuYW1lZEN1cnZlOiAnUC0yNTYnLFxuICAgICAgICAgICAgICAgIGhhc2g6IHsgbmFtZTogJ1NIQS0yNTYnIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFsZyBjbGFpbScpO1xuICAgIH1cbn1cbmNvbnN0IFVVSURfUkVHRVggPSAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezEyfSQvO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVVVJRChzdHIpIHtcbiAgICBpZiAoIVVVSURfUkVHRVgudGVzdChzdHIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQHN1cGFiYXNlL2F1dGgtanM6IEV4cGVjdGVkIHBhcmFtZXRlciB0byBiZSBVVUlEIGJ1dCBpcyBub3QnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCIsInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IEFQSV9WRVJTSU9OUywgQVBJX1ZFUlNJT05fSEVBREVSX05BTUUgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBleHBpcmVzQXQsIGxvb2tzTGlrZUZldGNoUmVzcG9uc2UsIHBhcnNlUmVzcG9uc2VBUElWZXJzaW9uIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IEF1dGhBcGlFcnJvciwgQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IsIEF1dGhXZWFrUGFzc3dvcmRFcnJvciwgQXV0aFVua25vd25FcnJvciwgQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IsIH0gZnJvbSAnLi9lcnJvcnMnO1xuY29uc3QgX2dldEVycm9yTWVzc2FnZSA9IChlcnIpID0+IGVyci5tc2cgfHwgZXJyLm1lc3NhZ2UgfHwgZXJyLmVycm9yX2Rlc2NyaXB0aW9uIHx8IGVyci5lcnJvciB8fCBKU09OLnN0cmluZ2lmeShlcnIpO1xuY29uc3QgTkVUV09SS19FUlJPUl9DT0RFUyA9IFs1MDIsIDUwMywgNTA0XTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvcikge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIWxvb2tzTGlrZUZldGNoUmVzcG9uc2UoZXJyb3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBBdXRoUmV0cnlhYmxlRmV0Y2hFcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGVycm9yKSwgMCk7XG4gICAgfVxuICAgIGlmIChORVRXT1JLX0VSUk9SX0NPREVTLmluY2x1ZGVzKGVycm9yLnN0YXR1cykpIHtcbiAgICAgICAgLy8gc3RhdHVzIGluIDUwMC4uLjU5OSByYW5nZSAtIHNlcnZlciBoYWQgYW4gZXJyb3IsIHJlcXVlc3QgbWlnaHQgYmUgcmV0cnllZC5cbiAgICAgICAgdGhyb3cgbmV3IEF1dGhSZXRyeWFibGVGZXRjaEVycm9yKF9nZXRFcnJvck1lc3NhZ2UoZXJyb3IpLCBlcnJvci5zdGF0dXMpO1xuICAgIH1cbiAgICBsZXQgZGF0YTtcbiAgICB0cnkge1xuICAgICAgICBkYXRhID0gYXdhaXQgZXJyb3IuanNvbigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXV0aFVua25vd25FcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGUpLCBlKTtcbiAgICB9XG4gICAgbGV0IGVycm9yQ29kZSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCByZXNwb25zZUFQSVZlcnNpb24gPSBwYXJzZVJlc3BvbnNlQVBJVmVyc2lvbihlcnJvcik7XG4gICAgaWYgKHJlc3BvbnNlQVBJVmVyc2lvbiAmJlxuICAgICAgICByZXNwb25zZUFQSVZlcnNpb24uZ2V0VGltZSgpID49IEFQSV9WRVJTSU9OU1snMjAyNC0wMS0wMSddLnRpbWVzdGFtcCAmJlxuICAgICAgICB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgZGF0YSAmJlxuICAgICAgICB0eXBlb2YgZGF0YS5jb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICBlcnJvckNvZGUgPSBkYXRhLmNvZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiBkYXRhICYmIHR5cGVvZiBkYXRhLmVycm9yX2NvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVycm9yQ29kZSA9IGRhdGEuZXJyb3JfY29kZTtcbiAgICB9XG4gICAgaWYgKCFlcnJvckNvZGUpIHtcbiAgICAgICAgLy8gTGVnYWN5IHN1cHBvcnQgZm9yIHdlYWsgcGFzc3dvcmQgZXJyb3JzLCB3aGVuIHRoZXJlIHdlcmUgbm8gZXJyb3IgY29kZXNcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgZGF0YSAmJlxuICAgICAgICAgICAgdHlwZW9mIGRhdGEud2Vha19wYXNzd29yZCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIGRhdGEud2Vha19wYXNzd29yZCAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShkYXRhLndlYWtfcGFzc3dvcmQucmVhc29ucykgJiZcbiAgICAgICAgICAgIGRhdGEud2Vha19wYXNzd29yZC5yZWFzb25zLmxlbmd0aCAmJlxuICAgICAgICAgICAgZGF0YS53ZWFrX3Bhc3N3b3JkLnJlYXNvbnMucmVkdWNlKChhLCBpKSA9PiBhICYmIHR5cGVvZiBpID09PSAnc3RyaW5nJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBdXRoV2Vha1Bhc3N3b3JkRXJyb3IoX2dldEVycm9yTWVzc2FnZShkYXRhKSwgZXJyb3Iuc3RhdHVzLCBkYXRhLndlYWtfcGFzc3dvcmQucmVhc29ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZXJyb3JDb2RlID09PSAnd2Vha19wYXNzd29yZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF1dGhXZWFrUGFzc3dvcmRFcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGRhdGEpLCBlcnJvci5zdGF0dXMsICgoX2EgPSBkYXRhLndlYWtfcGFzc3dvcmQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZWFzb25zKSB8fCBbXSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGVycm9yQ29kZSA9PT0gJ3Nlc3Npb25fbm90X2ZvdW5kJykge1xuICAgICAgICAvLyBUaGUgYHNlc3Npb25faWRgIGluc2lkZSB0aGUgSldUIGRvZXMgbm90IGNvcnJlc3BvbmQgdG8gYSByb3cgaW4gdGhlXG4gICAgICAgIC8vIGBzZXNzaW9uc2AgdGFibGUuIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgdXNlciBoYXMgc2lnbmVkIG91dCwgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVsZXRlZCwgb3IgdGhlaXIgc2Vzc2lvbiBoYXMgc29tZWhvdyBiZWVuIHRlcm1pbmF0ZWQuXG4gICAgICAgIHRocm93IG5ldyBBdXRoU2Vzc2lvbk1pc3NpbmdFcnJvcigpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgQXV0aEFwaUVycm9yKF9nZXRFcnJvck1lc3NhZ2UoZGF0YSksIGVycm9yLnN0YXR1cyB8fCA1MDAsIGVycm9yQ29kZSk7XG59XG5jb25zdCBfZ2V0UmVxdWVzdFBhcmFtcyA9IChtZXRob2QsIG9wdGlvbnMsIHBhcmFtZXRlcnMsIGJvZHkpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB7IG1ldGhvZCwgaGVhZGVyczogKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWFkZXJzKSB8fCB7fSB9O1xuICAgIGlmIChtZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfVxuICAgIHBhcmFtcy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JyB9LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycyk7XG4gICAgcGFyYW1zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMpLCBwYXJhbWV0ZXJzKTtcbn07XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX3JlcXVlc3QoZmV0Y2hlciwgbWV0aG9kLCB1cmwsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWFkZXJzKTtcbiAgICBpZiAoIWhlYWRlcnNbQVBJX1ZFUlNJT05fSEVBREVSX05BTUVdKSB7XG4gICAgICAgIGhlYWRlcnNbQVBJX1ZFUlNJT05fSEVBREVSX05BTUVdID0gQVBJX1ZFUlNJT05TWycyMDI0LTAxLTAxJ10ubmFtZTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5qd3QpIHtcbiAgICAgICAgaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gYEJlYXJlciAke29wdGlvbnMuand0fWA7XG4gICAgfVxuICAgIGNvbnN0IHFzID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnF1ZXJ5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlZGlyZWN0VG8pIHtcbiAgICAgICAgcXNbJ3JlZGlyZWN0X3RvJ10gPSBvcHRpb25zLnJlZGlyZWN0VG87XG4gICAgfVxuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gT2JqZWN0LmtleXMocXMpLmxlbmd0aCA/ICc/JyArIG5ldyBVUkxTZWFyY2hQYXJhbXMocXMpLnRvU3RyaW5nKCkgOiAnJztcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgbWV0aG9kLCB1cmwgKyBxdWVyeVN0cmluZywge1xuICAgICAgICBoZWFkZXJzLFxuICAgICAgICBub1Jlc29sdmVKc29uOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubm9SZXNvbHZlSnNvbixcbiAgICB9LCB7fSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmJvZHkpO1xuICAgIHJldHVybiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnhmb3JtKSA/IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy54Zm9ybShkYXRhKSA6IHsgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgZGF0YSksIGVycm9yOiBudWxsIH07XG59XG5hc3luYyBmdW5jdGlvbiBfaGFuZGxlUmVxdWVzdChmZXRjaGVyLCBtZXRob2QsIHVybCwgb3B0aW9ucywgcGFyYW1ldGVycywgYm9keSkge1xuICAgIGNvbnN0IHJlcXVlc3RQYXJhbXMgPSBfZ2V0UmVxdWVzdFBhcmFtcyhtZXRob2QsIG9wdGlvbnMsIHBhcmFtZXRlcnMsIGJvZHkpO1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgZmV0Y2hlcih1cmwsIE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3RQYXJhbXMpKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgLy8gZmV0Y2ggZmFpbGVkLCBsaWtlbHkgZHVlIHRvIGEgbmV0d29yayBvciBDT1JTIGVycm9yXG4gICAgICAgIHRocm93IG5ldyBBdXRoUmV0cnlhYmxlRmV0Y2hFcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGUpLCAwKTtcbiAgICB9XG4gICAgaWYgKCFyZXN1bHQub2spIHtcbiAgICAgICAgYXdhaXQgaGFuZGxlRXJyb3IocmVzdWx0KTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ub1Jlc29sdmVKc29uKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCByZXN1bHQuanNvbigpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBhd2FpdCBoYW5kbGVFcnJvcihlKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gX3Nlc3Npb25SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBzZXNzaW9uID0gbnVsbDtcbiAgICBpZiAoaGFzU2Vzc2lvbihkYXRhKSkge1xuICAgICAgICBzZXNzaW9uID0gT2JqZWN0LmFzc2lnbih7fSwgZGF0YSk7XG4gICAgICAgIGlmICghZGF0YS5leHBpcmVzX2F0KSB7XG4gICAgICAgICAgICBzZXNzaW9uLmV4cGlyZXNfYXQgPSBleHBpcmVzQXQoZGF0YS5leHBpcmVzX2luKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB1c2VyID0gKF9hID0gZGF0YS51c2VyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkYXRhO1xuICAgIHJldHVybiB7IGRhdGE6IHsgc2Vzc2lvbiwgdXNlciB9LCBlcnJvcjogbnVsbCB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIF9zZXNzaW9uUmVzcG9uc2VQYXNzd29yZChkYXRhKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBfc2Vzc2lvblJlc3BvbnNlKGRhdGEpO1xuICAgIGlmICghcmVzcG9uc2UuZXJyb3IgJiZcbiAgICAgICAgZGF0YS53ZWFrX3Bhc3N3b3JkICYmXG4gICAgICAgIHR5cGVvZiBkYXRhLndlYWtfcGFzc3dvcmQgPT09ICdvYmplY3QnICYmXG4gICAgICAgIEFycmF5LmlzQXJyYXkoZGF0YS53ZWFrX3Bhc3N3b3JkLnJlYXNvbnMpICYmXG4gICAgICAgIGRhdGEud2Vha19wYXNzd29yZC5yZWFzb25zLmxlbmd0aCAmJlxuICAgICAgICBkYXRhLndlYWtfcGFzc3dvcmQubWVzc2FnZSAmJlxuICAgICAgICB0eXBlb2YgZGF0YS53ZWFrX3Bhc3N3b3JkLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIGRhdGEud2Vha19wYXNzd29yZC5yZWFzb25zLnJlZHVjZSgoYSwgaSkgPT4gYSAmJiB0eXBlb2YgaSA9PT0gJ3N0cmluZycsIHRydWUpKSB7XG4gICAgICAgIHJlc3BvbnNlLmRhdGEud2Vha19wYXNzd29yZCA9IGRhdGEud2Vha19wYXNzd29yZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIF91c2VyUmVzcG9uc2UoZGF0YSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB1c2VyID0gKF9hID0gZGF0YS51c2VyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkYXRhO1xuICAgIHJldHVybiB7IGRhdGE6IHsgdXNlciB9LCBlcnJvcjogbnVsbCB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIF9zc29SZXNwb25zZShkYXRhKSB7XG4gICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBfZ2VuZXJhdGVMaW5rUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHsgYWN0aW9uX2xpbmssIGVtYWlsX290cCwgaGFzaGVkX3Rva2VuLCByZWRpcmVjdF90bywgdmVyaWZpY2F0aW9uX3R5cGUgfSA9IGRhdGEsIHJlc3QgPSBfX3Jlc3QoZGF0YSwgW1wiYWN0aW9uX2xpbmtcIiwgXCJlbWFpbF9vdHBcIiwgXCJoYXNoZWRfdG9rZW5cIiwgXCJyZWRpcmVjdF90b1wiLCBcInZlcmlmaWNhdGlvbl90eXBlXCJdKTtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBhY3Rpb25fbGluayxcbiAgICAgICAgZW1haWxfb3RwLFxuICAgICAgICBoYXNoZWRfdG9rZW4sXG4gICAgICAgIHJlZGlyZWN0X3RvLFxuICAgICAgICB2ZXJpZmljYXRpb25fdHlwZSxcbiAgICB9O1xuICAgIGNvbnN0IHVzZXIgPSBPYmplY3QuYXNzaWduKHt9LCByZXN0KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLFxuICAgICAgICAgICAgdXNlcixcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBfbm9SZXNvbHZlSnNvblJlc3BvbnNlKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogaGFzU2Vzc2lvbiBjaGVja3MgaWYgdGhlIHJlc3BvbnNlIG9iamVjdCBjb250YWlucyBhIHZhbGlkIHNlc3Npb25cbiAqIEBwYXJhbSBkYXRhIEEgcmVzcG9uc2Ugb2JqZWN0XG4gKiBAcmV0dXJucyB0cnVlIGlmIGEgc2Vzc2lvbiBpcyBpbiB0aGUgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gaGFzU2Vzc2lvbihkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEuYWNjZXNzX3Rva2VuICYmIGRhdGEucmVmcmVzaF90b2tlbiAmJiBkYXRhLmV4cGlyZXNfaW47XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaC5qcy5tYXAiLCJleHBvcnQgY29uc3QgU0lHTl9PVVRfU0NPUEVTID0gWydnbG9iYWwnLCAnbG9jYWwnLCAnb3RoZXJzJ107XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiLCJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgeyBfZ2VuZXJhdGVMaW5rUmVzcG9uc2UsIF9ub1Jlc29sdmVKc29uUmVzcG9uc2UsIF9yZXF1ZXN0LCBfdXNlclJlc3BvbnNlLCB9IGZyb20gJy4vbGliL2ZldGNoJztcbmltcG9ydCB7IHJlc29sdmVGZXRjaCwgdmFsaWRhdGVVVUlEIH0gZnJvbSAnLi9saWIvaGVscGVycyc7XG5pbXBvcnQgeyBTSUdOX09VVF9TQ09QRVMsIH0gZnJvbSAnLi9saWIvdHlwZXMnO1xuaW1wb3J0IHsgaXNBdXRoRXJyb3IgfSBmcm9tICcuL2xpYi9lcnJvcnMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR29UcnVlQWRtaW5BcGkge1xuICAgIGNvbnN0cnVjdG9yKHsgdXJsID0gJycsIGhlYWRlcnMgPSB7fSwgZmV0Y2gsIH0pIHtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIHRoaXMuZmV0Y2ggPSByZXNvbHZlRmV0Y2goZmV0Y2gpO1xuICAgICAgICB0aGlzLm1mYSA9IHtcbiAgICAgICAgICAgIGxpc3RGYWN0b3JzOiB0aGlzLl9saXN0RmFjdG9ycy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZGVsZXRlRmFjdG9yOiB0aGlzLl9kZWxldGVGYWN0b3IuYmluZCh0aGlzKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGxvZ2dlZC1pbiBzZXNzaW9uLlxuICAgICAqIEBwYXJhbSBqd3QgQSB2YWxpZCwgbG9nZ2VkLWluIEpXVC5cbiAgICAgKiBAcGFyYW0gc2NvcGUgVGhlIGxvZ291dCBzb3BlLlxuICAgICAqL1xuICAgIGFzeW5jIHNpZ25PdXQoand0LCBzY29wZSA9IFNJR05fT1VUX1NDT1BFU1swXSkge1xuICAgICAgICBpZiAoU0lHTl9PVVRfU0NPUEVTLmluZGV4T2Yoc2NvcGUpIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBAc3VwYWJhc2UvYXV0aC1qczogUGFyYW1ldGVyIHNjb3BlIG11c3QgYmUgb25lIG9mICR7U0lHTl9PVVRfU0NPUEVTLmpvaW4oJywgJyl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L2xvZ291dD9zY29wZT0ke3Njb3BlfWAsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgand0LFxuICAgICAgICAgICAgICAgIG5vUmVzb2x2ZUpzb246IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGFuIGludml0ZSBsaW5rIHRvIGFuIGVtYWlsIGFkZHJlc3MuXG4gICAgICogQHBhcmFtIGVtYWlsIFRoZSBlbWFpbCBhZGRyZXNzIG9mIHRoZSB1c2VyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucyB0byBiZSBpbmNsdWRlZCB3aGVuIGludml0aW5nLlxuICAgICAqL1xuICAgIGFzeW5jIGludml0ZVVzZXJCeUVtYWlsKGVtYWlsLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9pbnZpdGVgLCB7XG4gICAgICAgICAgICAgICAgYm9keTogeyBlbWFpbCwgZGF0YTogb3B0aW9ucy5kYXRhIH0sXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86IG9wdGlvbnMucmVkaXJlY3RUbyxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX3VzZXJSZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGVtYWlsIGxpbmtzIGFuZCBPVFBzIHRvIGJlIHNlbnQgdmlhIGEgY3VzdG9tIGVtYWlsIHByb3ZpZGVyLlxuICAgICAqIEBwYXJhbSBlbWFpbCBUaGUgdXNlcidzIGVtYWlsLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnBhc3N3b3JkIFVzZXIgcGFzc3dvcmQuIEZvciBzaWdudXAgb25seS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kYXRhIE9wdGlvbmFsIHVzZXIgbWV0YWRhdGEuIEZvciBzaWdudXAgb25seS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZWRpcmVjdFRvIFRoZSByZWRpcmVjdCB1cmwgd2hpY2ggc2hvdWxkIGJlIGFwcGVuZGVkIHRvIHRoZSBnZW5lcmF0ZWQgbGlua1xuICAgICAqL1xuICAgIGFzeW5jIGdlbmVyYXRlTGluayhwYXJhbXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gcGFyYW1zLCByZXN0ID0gX19yZXN0KHBhcmFtcywgW1wib3B0aW9uc1wiXSk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXN0KSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoJ25ld0VtYWlsJyBpbiByZXN0KSB7XG4gICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBuZXdFbWFpbCB3aXRoIG5ld19lbWFpbCBpbiByZXF1ZXN0IGJvZHlcbiAgICAgICAgICAgICAgICBib2R5Lm5ld19lbWFpbCA9IHJlc3QgPT09IG51bGwgfHwgcmVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzdC5uZXdFbWFpbDtcbiAgICAgICAgICAgICAgICBkZWxldGUgYm9keVsnbmV3RW1haWwnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9hZG1pbi9nZW5lcmF0ZV9saW5rYCwge1xuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHhmb3JtOiBfZ2VuZXJhdGVMaW5rUmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlZGlyZWN0VG8sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFVzZXIgQWRtaW4gQVBJXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB1c2VyLlxuICAgICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uIGEgc2VydmVyLiBOZXZlciBleHBvc2UgeW91ciBgc2VydmljZV9yb2xlYCBrZXkgaW4gdGhlIGJyb3dzZXIuXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlVXNlcihhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vYWRtaW4vdXNlcnNgLCB7XG4gICAgICAgICAgICAgICAgYm9keTogYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgeGZvcm06IF91c2VyUmVzcG9uc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIGxpc3Qgb2YgdXNlcnMuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBhIHNlcnZlci4gTmV2ZXIgZXhwb3NlIHlvdXIgYHNlcnZpY2Vfcm9sZWAga2V5IGluIHRoZSBicm93c2VyLlxuICAgICAqIEBwYXJhbSBwYXJhbXMgQW4gb2JqZWN0IHdoaWNoIHN1cHBvcnRzIGBwYWdlYCBhbmQgYHBlclBhZ2VgIGFzIG51bWJlcnMsIHRvIGFsdGVyIHRoZSBwYWdpbmF0ZWQgcmVzdWx0cy5cbiAgICAgKi9cbiAgICBhc3luYyBsaXN0VXNlcnMocGFyYW1zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2luYXRpb24gPSB7IG5leHRQYWdlOiBudWxsLCBsYXN0UGFnZTogMCwgdG90YWw6IDAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0dFVCcsIGAke3RoaXMudXJsfS9hZG1pbi91c2Vyc2AsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgbm9SZXNvbHZlSnNvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgICAgICBwYWdlOiAoX2IgPSAoX2EgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMucGFnZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvU3RyaW5nKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBwZXJfcGFnZTogKF9kID0gKF9jID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLnBlclBhZ2UpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50b1N0cmluZygpKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAnJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHhmb3JtOiBfbm9SZXNvbHZlSnNvblJlc3BvbnNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpXG4gICAgICAgICAgICAgICAgdGhyb3cgcmVzcG9uc2UuZXJyb3I7XG4gICAgICAgICAgICBjb25zdCB1c2VycyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsID0gKF9lID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtdG90YWwtY291bnQnKSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gKF9nID0gKF9mID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2xpbmsnKSkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLnNwbGl0KCcsJykpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IFtdO1xuICAgICAgICAgICAgaWYgKGxpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsaW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBwYXJzZUludChsaW5rLnNwbGl0KCc7JylbMF0uc3BsaXQoJz0nKVsxXS5zdWJzdHJpbmcoMCwgMSkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWwgPSBKU09OLnBhcnNlKGxpbmsuc3BsaXQoJzsnKVsxXS5zcGxpdCgnPScpWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbltgJHtyZWx9UGFnZWBdID0gcGFnZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLnRvdGFsID0gcGFyc2VJbnQodG90YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB1c2VycyksIHBhZ2luYXRpb24pLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcnM6IFtdIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdXNlciBieSBpZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1aWQgVGhlIHVzZXIncyB1bmlxdWUgaWRlbnRpZmllclxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gYSBzZXJ2ZXIuIE5ldmVyIGV4cG9zZSB5b3VyIGBzZXJ2aWNlX3JvbGVgIGtleSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRVc2VyQnlJZCh1aWQpIHtcbiAgICAgICAgdmFsaWRhdGVVVUlEKHVpZCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0dFVCcsIGAke3RoaXMudXJsfS9hZG1pbi91c2Vycy8ke3VpZH1gLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHhmb3JtOiBfdXNlclJlc3BvbnNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSB1c2VyIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlcyBUaGUgZGF0YSB5b3Ugd2FudCB0byB1cGRhdGUuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBhIHNlcnZlci4gTmV2ZXIgZXhwb3NlIHlvdXIgYHNlcnZpY2Vfcm9sZWAga2V5IGluIHRoZSBicm93c2VyLlxuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZVVzZXJCeUlkKHVpZCwgYXR0cmlidXRlcykge1xuICAgICAgICB2YWxpZGF0ZVVVSUQodWlkKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUFVUJywgYCR7dGhpcy51cmx9L2FkbWluL3VzZXJzLyR7dWlkfWAsIHtcbiAgICAgICAgICAgICAgICBib2R5OiBhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX3VzZXJSZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgdXNlci4gUmVxdWlyZXMgYSBgc2VydmljZV9yb2xlYCBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgVGhlIHVzZXIgaWQgeW91IHdhbnQgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSBzaG91bGRTb2Z0RGVsZXRlIElmIHRydWUsIHRoZW4gdGhlIHVzZXIgd2lsbCBiZSBzb2Z0LWRlbGV0ZWQgZnJvbSB0aGUgYXV0aCBzY2hlbWEuIFNvZnQgZGVsZXRpb24gYWxsb3dzIHVzZXIgaWRlbnRpZmljYXRpb24gZnJvbSB0aGUgaGFzaGVkIHVzZXIgSUQgYnV0IGlzIG5vdCByZXZlcnNpYmxlLlxuICAgICAqIERlZmF1bHRzIHRvIGZhbHNlIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gYSBzZXJ2ZXIuIE5ldmVyIGV4cG9zZSB5b3VyIGBzZXJ2aWNlX3JvbGVgIGtleSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgKi9cbiAgICBhc3luYyBkZWxldGVVc2VyKGlkLCBzaG91bGRTb2Z0RGVsZXRlID0gZmFsc2UpIHtcbiAgICAgICAgdmFsaWRhdGVVVUlEKGlkKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnREVMRVRFJywgYCR7dGhpcy51cmx9L2FkbWluL3VzZXJzLyR7aWR9YCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3VsZF9zb2Z0X2RlbGV0ZTogc2hvdWxkU29mdERlbGV0ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHhmb3JtOiBfdXNlclJlc3BvbnNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBfbGlzdEZhY3RvcnMocGFyYW1zKSB7XG4gICAgICAgIHZhbGlkYXRlVVVJRChwYXJhbXMudXNlcklkKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdHRVQnLCBgJHt0aGlzLnVybH0vYWRtaW4vdXNlcnMvJHtwYXJhbXMudXNlcklkfS9mYWN0b3JzYCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICB4Zm9ybTogKGZhY3RvcnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBmYWN0b3JzIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX2RlbGV0ZUZhY3RvcihwYXJhbXMpIHtcbiAgICAgICAgdmFsaWRhdGVVVUlEKHBhcmFtcy51c2VySWQpO1xuICAgICAgICB2YWxpZGF0ZVVVSUQocGFyYW1zLmlkKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnREVMRVRFJywgYCR7dGhpcy51cmx9L2FkbWluL3VzZXJzLyR7cGFyYW1zLnVzZXJJZH0vZmFjdG9ycy8ke3BhcmFtcy5pZH1gLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdvVHJ1ZUFkbWluQXBpLmpzLm1hcCIsImltcG9ydCB7IHN1cHBvcnRzTG9jYWxTdG9yYWdlIH0gZnJvbSAnLi9oZWxwZXJzJztcbi8qKlxuICogUHJvdmlkZXMgc2FmZSBhY2Nlc3MgdG8gdGhlIGdsb2JhbFRoaXMubG9jYWxTdG9yYWdlIHByb3BlcnR5LlxuICovXG5leHBvcnQgY29uc3QgbG9jYWxTdG9yYWdlQWRhcHRlciA9IHtcbiAgICBnZXRJdGVtOiAoa2V5KSA9PiB7XG4gICAgICAgIGlmICghc3VwcG9ydHNMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXMubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICB9LFxuICAgIHNldEl0ZW06IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICghc3VwcG9ydHNMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGdsb2JhbFRoaXMubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgfSxcbiAgICByZW1vdmVJdGVtOiAoa2V5KSA9PiB7XG4gICAgICAgIGlmICghc3VwcG9ydHNMb2NhbFN0b3JhZ2UoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGdsb2JhbFRoaXMubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICB9LFxufTtcbi8qKlxuICogUmV0dXJucyBhIGxvY2FsU3RvcmFnZS1saWtlIG9iamVjdCB0aGF0IHN0b3JlcyB0aGUga2V5LXZhbHVlIHBhaXJzIGluXG4gKiBtZW1vcnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZW1vcnlMb2NhbFN0b3JhZ2VBZGFwdGVyKHN0b3JlID0ge30pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRJdGVtOiAoa2V5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc3RvcmVba2V5XSB8fCBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBzZXRJdGVtOiAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgc3RvcmVba2V5XSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVJdGVtOiAoa2V5KSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgc3RvcmVba2V5XTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWwtc3RvcmFnZS5qcy5tYXAiLCJpbXBvcnQgeyBzdXBwb3J0c0xvY2FsU3RvcmFnZSB9IGZyb20gJy4vaGVscGVycyc7XG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqL1xuZXhwb3J0IGNvbnN0IGludGVybmFscyA9IHtcbiAgICAvKipcbiAgICAgKiBAZXhwZXJpbWVudGFsXG4gICAgICovXG4gICAgZGVidWc6ICEhKGdsb2JhbFRoaXMgJiZcbiAgICAgICAgc3VwcG9ydHNMb2NhbFN0b3JhZ2UoKSAmJlxuICAgICAgICBnbG9iYWxUaGlzLmxvY2FsU3RvcmFnZSAmJlxuICAgICAgICBnbG9iYWxUaGlzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzdXBhYmFzZS5nb3RydWUtanMubG9ja3MuZGVidWcnKSA9PT0gJ3RydWUnKSxcbn07XG4vKipcbiAqIEFuIGVycm9yIHRocm93biB3aGVuIGEgbG9jayBjYW5ub3QgYmUgYWNxdWlyZWQgYWZ0ZXIgc29tZSBhbW91bnQgb2YgdGltZS5cbiAqXG4gKiBVc2UgdGhlIHtAbGluayAjaXNBY3F1aXJlVGltZW91dH0gcHJvcGVydHkgaW5zdGVhZCBvZiBjaGVja2luZyB3aXRoIGBpbnN0YW5jZW9mYC5cbiAqL1xuZXhwb3J0IGNsYXNzIExvY2tBY3F1aXJlVGltZW91dEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuaXNBY3F1aXJlVGltZW91dCA9IHRydWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5hdmlnYXRvckxvY2tBY3F1aXJlVGltZW91dEVycm9yIGV4dGVuZHMgTG9ja0FjcXVpcmVUaW1lb3V0RXJyb3Ige1xufVxuZXhwb3J0IGNsYXNzIFByb2Nlc3NMb2NrQWNxdWlyZVRpbWVvdXRFcnJvciBleHRlbmRzIExvY2tBY3F1aXJlVGltZW91dEVycm9yIHtcbn1cbi8qKlxuICogSW1wbGVtZW50cyBhIGdsb2JhbCBleGNsdXNpdmUgbG9jayB1c2luZyB0aGUgTmF2aWdhdG9yIExvY2tNYW5hZ2VyIEFQSS4gSXRcbiAqIGlzIGF2YWlsYWJsZSBvbiBhbGwgYnJvd3NlcnMgcmVsZWFzZWQgYWZ0ZXIgMjAyMi0wMy0xNSB3aXRoIFNhZmFyaSBiZWluZyB0aGVcbiAqIGxhc3Qgb25lIHRvIHJlbGVhc2Ugc3VwcG9ydC4gSWYgdGhlIEFQSSBpcyBub3QgYXZhaWxhYmxlLCB0aGlzIGZ1bmN0aW9uIHdpbGxcbiAqIHRocm93LiBNYWtlIHN1cmUgeW91IGNoZWNrIGF2YWlsYWJsaWxpdHkgYmVmb3JlIGNvbmZpZ3VyaW5nIHtAbGlua1xuICogR29UcnVlQ2xpZW50fS5cbiAqXG4gKiBZb3UgY2FuIHR1cm4gb24gZGVidWdnaW5nIGJ5IHNldHRpbmcgdGhlIGBzdXBhYmFzZS5nb3RydWUtanMubG9ja3MuZGVidWdgXG4gKiBsb2NhbCBzdG9yYWdlIGl0ZW0gdG8gYHRydWVgLlxuICpcbiAqIEludGVybmFsczpcbiAqXG4gKiBTaW5jZSB0aGUgTG9ja01hbmFnZXIgQVBJIGRvZXMgbm90IHByZXNlcnZlIHN0YWNrIHRyYWNlcyBmb3IgdGhlIGFzeW5jXG4gKiBmdW5jdGlvbiBwYXNzZWQgaW4gdGhlIGByZXF1ZXN0YCBtZXRob2QsIGEgdHJpY2sgaXMgdXNlZCB3aGVyZSBhY3F1aXJpbmcgdGhlXG4gKiBsb2NrIHJlbGVhc2VzIGEgcHJldmlvdXNseSBzdGFydGVkIHByb21pc2UgdG8gcnVuIHRoZSBvcGVyYXRpb24gaW4gdGhlIGBmbmBcbiAqIGZ1bmN0aW9uLiBUaGUgbG9jayB3YWl0cyBmb3IgdGhhdCBwcm9taXNlIHRvIGZpbmlzaCAod2l0aCBvciB3aXRob3V0IGVycm9yKSxcbiAqIHdoaWxlIHRoZSBmdW5jdGlvbiB3aWxsIGZpbmFsbHkgd2FpdCBmb3IgdGhlIHJlc3VsdCBhbnl3YXkuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgbG9jayB0byBiZSBhY3F1aXJlZC5cbiAqIEBwYXJhbSBhY3F1aXJlVGltZW91dCBJZiBuZWdhdGl2ZSwgbm8gdGltZW91dC4gSWYgMCBhbiBlcnJvciBpcyB0aHJvd24gaWZcbiAqICAgICAgICAgICAgICAgICAgICAgICB0aGUgbG9jayBjYW4ndCBiZSBhY3F1aXJlZCB3aXRob3V0IHdhaXRpbmcuIElmIHBvc2l0aXZlLCB0aGUgbG9jayBhY3F1aXJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgd2lsbCB0aW1lIG91dCBhZnRlciBzbyBtYW55IG1pbGxpc2Vjb25kcy4gQW4gZXJyb3IgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICBhIHRpbWVvdXQgaWYgaXQgaGFzIGBpc0FjcXVpcmVUaW1lb3V0YCBzZXQgdG8gdHJ1ZS5cbiAqIEBwYXJhbSBmbiBUaGUgb3BlcmF0aW9uIHRvIHJ1biBvbmNlIHRoZSBsb2NrIGlzIGFjcXVpcmVkLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbmF2aWdhdG9yTG9jayhuYW1lLCBhY3F1aXJlVGltZW91dCwgZm4pIHtcbiAgICBpZiAoaW50ZXJuYWxzLmRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdAc3VwYWJhc2UvZ290cnVlLWpzOiBuYXZpZ2F0b3JMb2NrOiBhY3F1aXJlIGxvY2snLCBuYW1lLCBhY3F1aXJlVGltZW91dCk7XG4gICAgfVxuICAgIGNvbnN0IGFib3J0Q29udHJvbGxlciA9IG5ldyBnbG9iYWxUaGlzLkFib3J0Q29udHJvbGxlcigpO1xuICAgIGlmIChhY3F1aXJlVGltZW91dCA+IDApIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIGlmIChpbnRlcm5hbHMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQHN1cGFiYXNlL2dvdHJ1ZS1qczogbmF2aWdhdG9yTG9jayBhY3F1aXJlIHRpbWVkIG91dCcsIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBhY3F1aXJlVGltZW91dCk7XG4gICAgfVxuICAgIC8vIE1ETiBhcnRpY2xlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTG9ja01hbmFnZXIvcmVxdWVzdFxuICAgIC8vIFdyYXBwaW5nIG5hdmlnYXRvci5sb2Nrcy5yZXF1ZXN0KCkgd2l0aCBhIHBsYWluIFByb21pc2UgaXMgZG9uZSBhcyBzb21lXG4gICAgLy8gbGlicmFyaWVzIGxpa2Ugem9uZS5qcyBwYXRjaCB0aGUgUHJvbWlzZSBvYmplY3QgdG8gdHJhY2sgdGhlIGV4ZWN1dGlvblxuICAgIC8vIGNvbnRleHQuIEhvd2V2ZXIsIGl0IGFwcGVhcnMgdGhhdCBtb3N0IGJyb3dzZXJzIHVzZSBhbiBpbnRlcm5hbCBwcm9taXNlXG4gICAgLy8gaW1wbGVtZW50YXRpb24gd2hlbiB1c2luZyB0aGUgbmF2aWdhdG9yLmxvY2tzLnJlcXVlc3QoKSBBUEkgY2F1c2luZyB0aGVtXG4gICAgLy8gdG8gbG9zZSBjb250ZXh0IGFuZCBlbWl0IGNvbmZ1c2luZyBsb2cgbWVzc2FnZXMgb3IgYnJlYWsgY2VydGFpbiBmZWF0dXJlcy5cbiAgICAvLyBUaGlzIHdyYXBwaW5nIGlzIGJlbGlldmVkIHRvIGhlbHAgem9uZS5qcyB0cmFjayB0aGUgZXhlY3V0aW9uIGNvbnRleHRcbiAgICAvLyBiZXR0ZXIuXG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gZ2xvYmFsVGhpcy5uYXZpZ2F0b3IubG9ja3MucmVxdWVzdChuYW1lLCBhY3F1aXJlVGltZW91dCA9PT0gMFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIG1vZGU6ICdleGNsdXNpdmUnLFxuICAgICAgICAgICAgaWZBdmFpbGFibGU6IHRydWUsXG4gICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICBtb2RlOiAnZXhjbHVzaXZlJyxcbiAgICAgICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgfSwgYXN5bmMgKGxvY2spID0+IHtcbiAgICAgICAgaWYgKGxvY2spIHtcbiAgICAgICAgICAgIGlmIChpbnRlcm5hbHMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQHN1cGFiYXNlL2dvdHJ1ZS1qczogbmF2aWdhdG9yTG9jazogYWNxdWlyZWQnLCBuYW1lLCBsb2NrLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgZm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbHMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0BzdXBhYmFzZS9nb3RydWUtanM6IG5hdmlnYXRvckxvY2s6IHJlbGVhc2VkJywgbmFtZSwgbG9jay5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWNxdWlyZVRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJuYWxzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdAc3VwYWJhc2UvZ290cnVlLWpzOiBuYXZpZ2F0b3JMb2NrOiBub3QgaW1tZWRpYXRlbHkgYXZhaWxhYmxlJywgbmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBOYXZpZ2F0b3JMb2NrQWNxdWlyZVRpbWVvdXRFcnJvcihgQWNxdWlyaW5nIGFuIGV4Y2x1c2l2ZSBOYXZpZ2F0b3IgTG9ja01hbmFnZXIgbG9jayBcIiR7bmFtZX1cIiBpbW1lZGlhdGVseSBmYWlsZWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbHMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdsb2JhbFRoaXMubmF2aWdhdG9yLmxvY2tzLnF1ZXJ5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQHN1cGFiYXNlL2dvdHJ1ZS1qczogTmF2aWdhdG9yIExvY2tNYW5hZ2VyIHN0YXRlJywgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAnICAnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQHN1cGFiYXNlL2dvdHJ1ZS1qczogRXJyb3Igd2hlbiBxdWVyeWluZyBOYXZpZ2F0b3IgTG9ja01hbmFnZXIgc3RhdGUnLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBCcm93c2VyIGlzIG5vdCBmb2xsb3dpbmcgdGhlIE5hdmlnYXRvciBMb2NrTWFuYWdlciBzcGVjLCBpdFxuICAgICAgICAgICAgICAgIC8vIHJldHVybmVkIGEgbnVsbCBsb2NrIHdoZW4gd2UgZGlkbid0IHVzZSBpZkF2YWlsYWJsZS4gU28gd2UgY2FuXG4gICAgICAgICAgICAgICAgLy8gcHJldGVuZCB0aGUgbG9jayBpcyBhY3F1aXJlZCBpbiB0aGUgbmFtZSBvZiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgICAgICAgLy8gYW5kIHVzZXIgZXhwZXJpZW5jZSBhbmQganVzdCBydW4gdGhlIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQHN1cGFiYXNlL2dvdHJ1ZS1qczogTmF2aWdhdG9yIExvY2tNYW5hZ2VyIHJldHVybmVkIGEgbnVsbCBsb2NrIHdoZW4gdXNpbmcgI3JlcXVlc3Qgd2l0aG91dCBpZkF2YWlsYWJsZSBzZXQgdG8gdHJ1ZSwgaXQgYXBwZWFycyB0aGlzIGJyb3dzZXIgaXMgbm90IGZvbGxvd2luZyB0aGUgTG9ja01hbmFnZXIgc3BlYyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTG9ja01hbmFnZXIvcmVxdWVzdCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBmbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkpO1xufVxuY29uc3QgUFJPQ0VTU19MT0NLUyA9IHt9O1xuLyoqXG4gKiBJbXBsZW1lbnRzIGEgZ2xvYmFsIGV4Y2x1c2l2ZSBsb2NrIHRoYXQgd29ya3Mgb25seSBpbiB0aGUgY3VycmVudCBwcm9jZXNzLlxuICogVXNlZnVsIGZvciBlbnZpcm9ubWVudHMgbGlrZSBSZWFjdCBOYXRpdmUgb3Igb3RoZXIgbm9uLWJyb3dzZXJcbiAqIHNpbmdsZS1wcm9jZXNzIChpLmUuIG5vIGNvbmNlcHQgb2YgXCJ0YWJzXCIpIGVudmlyb25tZW50cy5cbiAqXG4gKiBVc2Uge0BsaW5rICNuYXZpZ2F0b3JMb2NrfSBpbiBicm93c2VyIGVudmlyb25tZW50cy5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBsb2NrIHRvIGJlIGFjcXVpcmVkLlxuICogQHBhcmFtIGFjcXVpcmVUaW1lb3V0IElmIG5lZ2F0aXZlLCBubyB0aW1lb3V0LiBJZiAwIGFuIGVycm9yIGlzIHRocm93biBpZlxuICogICAgICAgICAgICAgICAgICAgICAgIHRoZSBsb2NrIGNhbid0IGJlIGFjcXVpcmVkIHdpdGhvdXQgd2FpdGluZy4gSWYgcG9zaXRpdmUsIHRoZSBsb2NrIGFjcXVpcmVcbiAqICAgICAgICAgICAgICAgICAgICAgICB3aWxsIHRpbWUgb3V0IGFmdGVyIHNvIG1hbnkgbWlsbGlzZWNvbmRzLiBBbiBlcnJvciBpc1xuICogICAgICAgICAgICAgICAgICAgICAgIGEgdGltZW91dCBpZiBpdCBoYXMgYGlzQWNxdWlyZVRpbWVvdXRgIHNldCB0byB0cnVlLlxuICogQHBhcmFtIGZuIFRoZSBvcGVyYXRpb24gdG8gcnVuIG9uY2UgdGhlIGxvY2sgaXMgYWNxdWlyZWQuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzTG9jayhuYW1lLCBhY3F1aXJlVGltZW91dCwgZm4pIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcHJldmlvdXNPcGVyYXRpb24gPSAoX2EgPSBQUk9DRVNTX0xPQ0tTW25hbWVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBjb25zdCBjdXJyZW50T3BlcmF0aW9uID0gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgcHJldmlvdXNPcGVyYXRpb24uY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgLy8gaWdub3JlIGVycm9yIG9mIHByZXZpb3VzIG9wZXJhdGlvbiB0aGF0IHdlJ3JlIHdhaXRpbmcgdG8gZmluaXNoXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSksXG4gICAgICAgIGFjcXVpcmVUaW1lb3V0ID49IDBcbiAgICAgICAgICAgID8gbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IFByb2Nlc3NMb2NrQWNxdWlyZVRpbWVvdXRFcnJvcihgQWNxdXJpbmcgcHJvY2VzcyBsb2NrIHdpdGggbmFtZSBcIiR7bmFtZX1cIiB0aW1lZCBvdXRgKSk7XG4gICAgICAgICAgICAgICAgfSwgYWNxdWlyZVRpbWVvdXQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogbnVsbCxcbiAgICBdLmZpbHRlcigoeCkgPT4geCkpXG4gICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBpZiAoZSAmJiBlLmlzQWNxdWlyZVRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSlcbiAgICAgICAgLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBwcmV2aW91cyBvcGVyYXRpb25zIGZpbmlzaGVkIGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmFjZSBvbiB0aGUgYWNxdWlyZVxuICAgICAgICAvLyB0aW1lb3V0LCBzbyB0aGUgY3VycmVudCBvcGVyYXRpb24gY2FuIGZpbmFsbHkgc3RhcnRcbiAgICAgICAgcmV0dXJuIGF3YWl0IGZuKCk7XG4gICAgfSk7XG4gICAgUFJPQ0VTU19MT0NLU1tuYW1lXSA9IGN1cnJlbnRPcGVyYXRpb24uY2F0Y2goYXN5bmMgKGUpID0+IHtcbiAgICAgICAgaWYgKGUgJiYgZS5pc0FjcXVpcmVUaW1lb3V0KSB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgY3VycmVudCBvcGVyYXRpb24gdGltZWQgb3V0LCBpdCBkb2Vzbid0IG1lYW4gdGhhdCB0aGUgcHJldmlvdXNcbiAgICAgICAgICAgIC8vIG9wZXJhdGlvbiBmaW5pc2hlZCwgc28gd2UgbmVlZCBjb250bnVlIHdhaXRpbmcgZm9yIGl0IHRvIGZpbmlzaFxuICAgICAgICAgICAgYXdhaXQgcHJldmlvdXNPcGVyYXRpb247XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgIH0pO1xuICAgIC8vIGZpbmFsbHkgd2FpdCBmb3IgdGhlIGN1cnJlbnQgb3BlcmF0aW9uIHRvIGZpbmlzaCBzdWNjZXNzZnVsbHksIHdpdGggYW5cbiAgICAvLyBlcnJvciBvciB3aXRoIGFuIGFjcXVpcmUgdGltZW91dCBlcnJvclxuICAgIHJldHVybiBhd2FpdCBjdXJyZW50T3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9ja3MuanMubWFwIiwiLyoqXG4gKiBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvZ2xvYmFsdGhpc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcG9seWZpbGxHbG9iYWxUaGlzKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybjtcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgJ19fbWFnaWNfXycsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgJ0FsbG93IGFjY2VzcyB0byBtYWdpYydcbiAgICAgICAgX19tYWdpY19fLmdsb2JhbFRoaXMgPSBfX21hZ2ljX187XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgJ0FsbG93IGFjY2VzcyB0byBtYWdpYydcbiAgICAgICAgZGVsZXRlIE9iamVjdC5wcm90b3R5cGUuX19tYWdpY19fO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yICdBbGxvdyBhY2Nlc3MgdG8gZ2xvYmFscydcbiAgICAgICAgICAgIHNlbGYuZ2xvYmFsVGhpcyA9IHNlbGY7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2x5ZmlsbHMuanMubWFwIiwiaW1wb3J0IEdvVHJ1ZUFkbWluQXBpIGZyb20gJy4vR29UcnVlQWRtaW5BcGknO1xuaW1wb3J0IHsgREVGQVVMVF9IRUFERVJTLCBFWFBJUllfTUFSR0lOX01TLCBBVVRPX1JFRlJFU0hfVElDS19EVVJBVElPTl9NUywgQVVUT19SRUZSRVNIX1RJQ0tfVEhSRVNIT0xELCBHT1RSVUVfVVJMLCBTVE9SQUdFX0tFWSwgSldLU19UVEwsIH0gZnJvbSAnLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCB7IEF1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvciwgQXV0aFBLQ0VHcmFudENvZGVFeGNoYW5nZUVycm9yLCBBdXRoSW52YWxpZENyZWRlbnRpYWxzRXJyb3IsIEF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yLCBBdXRoSW52YWxpZFRva2VuUmVzcG9uc2VFcnJvciwgQXV0aFVua25vd25FcnJvciwgaXNBdXRoQXBpRXJyb3IsIGlzQXV0aEVycm9yLCBpc0F1dGhSZXRyeWFibGVGZXRjaEVycm9yLCBpc0F1dGhTZXNzaW9uTWlzc2luZ0Vycm9yLCBpc0F1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvciwgQXV0aEludmFsaWRKd3RFcnJvciwgfSBmcm9tICcuL2xpYi9lcnJvcnMnO1xuaW1wb3J0IHsgX3JlcXVlc3QsIF9zZXNzaW9uUmVzcG9uc2UsIF9zZXNzaW9uUmVzcG9uc2VQYXNzd29yZCwgX3VzZXJSZXNwb25zZSwgX3Nzb1Jlc3BvbnNlLCB9IGZyb20gJy4vbGliL2ZldGNoJztcbmltcG9ydCB7IERlZmVycmVkLCBnZXRJdGVtQXN5bmMsIGlzQnJvd3NlciwgcmVtb3ZlSXRlbUFzeW5jLCByZXNvbHZlRmV0Y2gsIHNldEl0ZW1Bc3luYywgdXVpZCwgcmV0cnlhYmxlLCBzbGVlcCwgc3VwcG9ydHNMb2NhbFN0b3JhZ2UsIHBhcnNlUGFyYW1ldGVyc0Zyb21VUkwsIGdldENvZGVDaGFsbGVuZ2VBbmRNZXRob2QsIGdldEFsZ29yaXRobSwgdmFsaWRhdGVFeHAsIGRlY29kZUpXVCwgfSBmcm9tICcuL2xpYi9oZWxwZXJzJztcbmltcG9ydCB7IGxvY2FsU3RvcmFnZUFkYXB0ZXIsIG1lbW9yeUxvY2FsU3RvcmFnZUFkYXB0ZXIgfSBmcm9tICcuL2xpYi9sb2NhbC1zdG9yYWdlJztcbmltcG9ydCB7IHBvbHlmaWxsR2xvYmFsVGhpcyB9IGZyb20gJy4vbGliL3BvbHlmaWxscyc7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi9saWIvdmVyc2lvbic7XG5pbXBvcnQgeyBMb2NrQWNxdWlyZVRpbWVvdXRFcnJvciwgbmF2aWdhdG9yTG9jayB9IGZyb20gJy4vbGliL2xvY2tzJztcbmltcG9ydCB7IHN0cmluZ1RvVWludDhBcnJheSwgYnl0ZXNUb0Jhc2U2NFVSTCB9IGZyb20gJy4vbGliL2Jhc2U2NHVybCc7XG5wb2x5ZmlsbEdsb2JhbFRoaXMoKTsgLy8gTWFrZSBcImdsb2JhbFRoaXNcIiBhdmFpbGFibGVcbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgICB1cmw6IEdPVFJVRV9VUkwsXG4gICAgc3RvcmFnZUtleTogU1RPUkFHRV9LRVksXG4gICAgYXV0b1JlZnJlc2hUb2tlbjogdHJ1ZSxcbiAgICBwZXJzaXN0U2Vzc2lvbjogdHJ1ZSxcbiAgICBkZXRlY3RTZXNzaW9uSW5Vcmw6IHRydWUsXG4gICAgaGVhZGVyczogREVGQVVMVF9IRUFERVJTLFxuICAgIGZsb3dUeXBlOiAnaW1wbGljaXQnLFxuICAgIGRlYnVnOiBmYWxzZSxcbiAgICBoYXNDdXN0b21BdXRob3JpemF0aW9uSGVhZGVyOiBmYWxzZSxcbn07XG5hc3luYyBmdW5jdGlvbiBsb2NrTm9PcChuYW1lLCBhY3F1aXJlVGltZW91dCwgZm4pIHtcbiAgICByZXR1cm4gYXdhaXQgZm4oKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdvVHJ1ZUNsaWVudCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGNsaWVudCBmb3IgdXNlIGluIHRoZSBicm93c2VyLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy5tZW1vcnlTdG9yYWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZUNoYW5nZUVtaXR0ZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmF1dG9SZWZyZXNoVGlja2VyID0gbnVsbDtcbiAgICAgICAgdGhpcy52aXNpYmlsaXR5Q2hhbmdlZENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWZyZXNoaW5nRGVmZXJyZWQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogS2VlcHMgdHJhY2sgb2YgdGhlIGFzeW5jIGNsaWVudCBpbml0aWFsaXphdGlvbi5cbiAgICAgICAgICogV2hlbiBudWxsIG9yIG5vdCB5ZXQgcmVzb2x2ZWQgdGhlIGF1dGggc3RhdGUgaXMgYHVua25vd25gXG4gICAgICAgICAqIE9uY2UgcmVzb2x2ZWQgdGhlIHRoZSBhdXRoIHN0YXRlIGlzIGtub3duIGFuZCBpdCdzIHNhdmUgdG8gY2FsbCBhbnkgZnVydGhlciBjbGllbnQgbWV0aG9kcy5cbiAgICAgICAgICogS2VlcCBleHRyYSBjYXJlIHRvIG5ldmVyIHJlamVjdCBvciB0aHJvdyB1bmNhdWdodCBlcnJvcnNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZVByb21pc2UgPSBudWxsO1xuICAgICAgICB0aGlzLmRldGVjdFNlc3Npb25JblVybCA9IHRydWU7XG4gICAgICAgIHRoaXMuaGFzQ3VzdG9tQXV0aG9yaXphdGlvbkhlYWRlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN1cHByZXNzR2V0U2Vzc2lvbldhcm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2NrQWNxdWlyZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wZW5kaW5nSW5Mb2NrID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIHRvIGJyb2FkY2FzdCBzdGF0ZSBjaGFuZ2UgZXZlbnRzIHRvIG90aGVyIHRhYnMgbGlzdGVuaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5icm9hZGNhc3RDaGFubmVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBjb25zb2xlLmxvZztcbiAgICAgICAgdGhpcy5pbnN0YW5jZUlEID0gR29UcnVlQ2xpZW50Lm5leHRJbnN0YW5jZUlEO1xuICAgICAgICBHb1RydWVDbGllbnQubmV4dEluc3RhbmNlSUQgKz0gMTtcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2VJRCA+IDAgJiYgaXNCcm93c2VyKCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTXVsdGlwbGUgR29UcnVlQ2xpZW50IGluc3RhbmNlcyBkZXRlY3RlZCBpbiB0aGUgc2FtZSBicm93c2VyIGNvbnRleHQuIEl0IGlzIG5vdCBhbiBlcnJvciwgYnV0IHRoaXMgc2hvdWxkIGJlIGF2b2lkZWQgYXMgaXQgbWF5IHByb2R1Y2UgdW5kZWZpbmVkIGJlaGF2aW9yIHdoZW4gdXNlZCBjb25jdXJyZW50bHkgdW5kZXIgdGhlIHNhbWUgc3RvcmFnZSBrZXkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUyksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmxvZ0RlYnVnTWVzc2FnZXMgPSAhIXNldHRpbmdzLmRlYnVnO1xuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmRlYnVnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IHNldHRpbmdzLmRlYnVnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVyc2lzdFNlc3Npb24gPSBzZXR0aW5ncy5wZXJzaXN0U2Vzc2lvbjtcbiAgICAgICAgdGhpcy5zdG9yYWdlS2V5ID0gc2V0dGluZ3Muc3RvcmFnZUtleTtcbiAgICAgICAgdGhpcy5hdXRvUmVmcmVzaFRva2VuID0gc2V0dGluZ3MuYXV0b1JlZnJlc2hUb2tlbjtcbiAgICAgICAgdGhpcy5hZG1pbiA9IG5ldyBHb1RydWVBZG1pbkFwaSh7XG4gICAgICAgICAgICB1cmw6IHNldHRpbmdzLnVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHNldHRpbmdzLmhlYWRlcnMsXG4gICAgICAgICAgICBmZXRjaDogc2V0dGluZ3MuZmV0Y2gsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVybCA9IHNldHRpbmdzLnVybDtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gc2V0dGluZ3MuaGVhZGVycztcbiAgICAgICAgdGhpcy5mZXRjaCA9IHJlc29sdmVGZXRjaChzZXR0aW5ncy5mZXRjaCk7XG4gICAgICAgIHRoaXMubG9jayA9IHNldHRpbmdzLmxvY2sgfHwgbG9ja05vT3A7XG4gICAgICAgIHRoaXMuZGV0ZWN0U2Vzc2lvbkluVXJsID0gc2V0dGluZ3MuZGV0ZWN0U2Vzc2lvbkluVXJsO1xuICAgICAgICB0aGlzLmZsb3dUeXBlID0gc2V0dGluZ3MuZmxvd1R5cGU7XG4gICAgICAgIHRoaXMuaGFzQ3VzdG9tQXV0aG9yaXphdGlvbkhlYWRlciA9IHNldHRpbmdzLmhhc0N1c3RvbUF1dGhvcml6YXRpb25IZWFkZXI7XG4gICAgICAgIGlmIChzZXR0aW5ncy5sb2NrKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2sgPSBzZXR0aW5ncy5sb2NrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQnJvd3NlcigpICYmICgoX2EgPSBnbG9iYWxUaGlzID09PSBudWxsIHx8IGdsb2JhbFRoaXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdsb2JhbFRoaXMubmF2aWdhdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubG9ja3MpKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2sgPSBuYXZpZ2F0b3JMb2NrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2NrID0gbG9ja05vT3A7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5qd2tzID0geyBrZXlzOiBbXSB9O1xuICAgICAgICB0aGlzLmp3a3NfY2FjaGVkX2F0ID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XG4gICAgICAgIHRoaXMubWZhID0ge1xuICAgICAgICAgICAgdmVyaWZ5OiB0aGlzLl92ZXJpZnkuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGVucm9sbDogdGhpcy5fZW5yb2xsLmJpbmQodGhpcyksXG4gICAgICAgICAgICB1bmVucm9sbDogdGhpcy5fdW5lbnJvbGwuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGNoYWxsZW5nZTogdGhpcy5fY2hhbGxlbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICBsaXN0RmFjdG9yczogdGhpcy5fbGlzdEZhY3RvcnMuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGNoYWxsZW5nZUFuZFZlcmlmeTogdGhpcy5fY2hhbGxlbmdlQW5kVmVyaWZ5LmJpbmQodGhpcyksXG4gICAgICAgICAgICBnZXRBdXRoZW50aWNhdG9yQXNzdXJhbmNlTGV2ZWw6IHRoaXMuX2dldEF1dGhlbnRpY2F0b3JBc3N1cmFuY2VMZXZlbC5iaW5kKHRoaXMpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5wZXJzaXN0U2Vzc2lvbikge1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLnN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2UgPSBzZXR0aW5ncy5zdG9yYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1cHBvcnRzTG9jYWxTdG9yYWdlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlID0gbG9jYWxTdG9yYWdlQWRhcHRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVtb3J5U3RvcmFnZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2UgPSBtZW1vcnlMb2NhbFN0b3JhZ2VBZGFwdGVyKHRoaXMubWVtb3J5U3RvcmFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZW1vcnlTdG9yYWdlID0ge307XG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2UgPSBtZW1vcnlMb2NhbFN0b3JhZ2VBZGFwdGVyKHRoaXMubWVtb3J5U3RvcmFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQnJvd3NlcigpICYmIGdsb2JhbFRoaXMuQnJvYWRjYXN0Q2hhbm5lbCAmJiB0aGlzLnBlcnNpc3RTZXNzaW9uICYmIHRoaXMuc3RvcmFnZUtleSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwgPSBuZXcgZ2xvYmFsVGhpcy5Ccm9hZGNhc3RDaGFubmVsKHRoaXMuc3RvcmFnZUtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgYSBuZXcgQnJvYWRjYXN0Q2hhbm5lbCwgbXVsdGktdGFiIHN0YXRlIGNoYW5nZXMgd2lsbCBub3QgYmUgYXZhaWxhYmxlJywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoX2IgPSB0aGlzLmJyb2FkY2FzdENoYW5uZWwpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJ3JlY2VpdmVkIGJyb2FkY2FzdCBub3RpZmljYXRpb24gZnJvbSBvdGhlciB0YWIgb3IgY2xpZW50JywgZXZlbnQpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25vdGlmeUFsbFN1YnNjcmliZXJzKGV2ZW50LmRhdGEuZXZlbnQsIGV2ZW50LmRhdGEuc2Vzc2lvbiwgZmFsc2UpOyAvLyBicm9hZGNhc3QgPSBmYWxzZSBzbyB3ZSBkb24ndCBnZXQgYW4gZW5kbGVzcyBsb29wIG9mIG1lc3NhZ2VzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gICAgX2RlYnVnKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMubG9nRGVidWdNZXNzYWdlcykge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIoYEdvVHJ1ZUNsaWVudEAke3RoaXMuaW5zdGFuY2VJRH0gKCR7dmVyc2lvbn0pICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWAsIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgY2xpZW50IHNlc3Npb24gZWl0aGVyIGZyb20gdGhlIHVybCBvciBmcm9tIHN0b3JhZ2UuXG4gICAgICogVGhpcyBtZXRob2QgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgd2hlbiBpbnN0YW50aWF0aW5nIHRoZSBjbGllbnQsIGJ1dCBzaG91bGQgYWxzbyBiZSBjYWxsZWRcbiAgICAgKiBtYW51YWxseSB3aGVuIGNoZWNraW5nIGZvciBhbiBlcnJvciBmcm9tIGFuIGF1dGggcmVkaXJlY3QgKG9hdXRoLCBtYWdpY2xpbmssIHBhc3N3b3JkIHJlY292ZXJ5LCBldGMpLlxuICAgICAqL1xuICAgIGFzeW5jIGluaXRpYWxpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5pbml0aWFsaXplUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluaXRpYWxpemVQcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9pbml0aWFsaXplKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElNUE9SVEFOVDpcbiAgICAgKiAxLiBOZXZlciB0aHJvdyBpbiB0aGlzIG1ldGhvZCwgYXMgaXQgaXMgY2FsbGVkIGZyb20gdGhlIGNvbnN0cnVjdG9yXG4gICAgICogMi4gTmV2ZXIgcmV0dXJuIGEgc2Vzc2lvbiBmcm9tIHRoaXMgbWV0aG9kIGFzIGl0IHdvdWxkIGJlIGNhY2hlZCBvdmVyXG4gICAgICogICAgdGhlIHdob2xlIGxpZmV0aW1lIG9mIHRoZSBjbGllbnRcbiAgICAgKi9cbiAgICBhc3luYyBfaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gcGFyc2VQYXJhbWV0ZXJzRnJvbVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICBsZXQgY2FsbGJhY2tVcmxUeXBlID0gJ25vbmUnO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzSW1wbGljaXRHcmFudENhbGxiYWNrKHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja1VybFR5cGUgPSAnaW1wbGljaXQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXdhaXQgdGhpcy5faXNQS0NFQ2FsbGJhY2socGFyYW1zKSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrVXJsVHlwZSA9ICdwa2NlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXR0ZW1wdCB0byBnZXQgdGhlIHNlc3Npb24gZnJvbSB0aGUgVVJMIG9ubHkgaWYgdGhlc2UgY29uZGl0aW9ucyBhcmUgZnVsZmlsbGVkXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTm90ZTogSWYgdGhlIFVSTCBpc24ndCBvbmUgb2YgdGhlIGNhbGxiYWNrIHVybCB0eXBlcyAoaW1wbGljaXQgb3IgcGtjZSksXG4gICAgICAgICAgICAgKiB0aGVuIHRoZXJlIGNvdWxkIGJlIGFuIGV4aXN0aW5nIHNlc3Npb24gc28gd2UgZG9uJ3Qgd2FudCB0byBwcmVtYXR1cmVseSByZW1vdmUgaXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGlzQnJvd3NlcigpICYmIHRoaXMuZGV0ZWN0U2Vzc2lvbkluVXJsICYmIGNhbGxiYWNrVXJsVHlwZSAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgdGhpcy5fZ2V0U2Vzc2lvbkZyb21VUkwocGFyYW1zLCBjYWxsYmFja1VybFR5cGUpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19pbml0aWFsaXplKCknLCAnZXJyb3IgZGV0ZWN0aW5nIHNlc3Npb24gZnJvbSBVUkwnLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0F1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yQ29kZSA9IChfYSA9IGVycm9yLmRldGFpbHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ2lkZW50aXR5X2FscmVhZHlfZXhpc3RzJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ29kZSA9PT0gJ2lkZW50aXR5X25vdF9mb3VuZCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNvZGUgPT09ICdzaW5nbGVfaWRlbnRpdHlfbm90X2RlbGV0YWJsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvciB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGZhaWxlZCBsb2dpbiBhdHRlbXB0IHZpYSB1cmwsXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgc2Vzc2lvbiBhcyBpbiB2ZXJpZnlPdHAsIHNpZ25VcCBhbmQgc2lnbkluV2l0aCpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcmVtb3ZlU2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IHNlc3Npb24sIHJlZGlyZWN0VHlwZSB9ID0gZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19pbml0aWFsaXplKCknLCAnZGV0ZWN0ZWQgc2Vzc2lvbiBpbiBVUkwnLCBzZXNzaW9uLCAncmVkaXJlY3QgdHlwZScsIHJlZGlyZWN0VHlwZSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2F2ZVNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWRpcmVjdFR5cGUgPT09ICdyZWNvdmVyeScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25vdGlmeUFsbFN1YnNjcmliZXJzKCdQQVNTV09SRF9SRUNPVkVSWScsIHNlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1NJR05FRF9JTicsIHNlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5vIGxvZ2luIGF0dGVtcHQgdmlhIGNhbGxiYWNrIHVybCB0cnkgdG8gcmVjb3ZlciBzZXNzaW9uIGZyb20gc3RvcmFnZVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcmVjb3ZlckFuZFJlZnJlc2goKTtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IG5ldyBBdXRoVW5rbm93bkVycm9yKCdVbmV4cGVjdGVkIGVycm9yIGR1cmluZyBpbml0aWFsaXphdGlvbicsIGVycm9yKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCk7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19pbml0aWFsaXplKCknLCAnZW5kJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhbm9ueW1vdXMgdXNlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgc2Vzc2lvbiB3aGVyZSB0aGUgaXNfYW5vbnltb3VzIGNsYWltIGluIHRoZSBhY2Nlc3MgdG9rZW4gSldUIHNldCB0byB0cnVlXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkluQW5vbnltb3VzbHkoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9zaWdudXBgLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogKF9iID0gKF9hID0gY3JlZGVudGlhbHMgPT09IG51bGwgfHwgY3JlZGVudGlhbHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNyZWRlbnRpYWxzLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kYXRhKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgZ290cnVlX21ldGFfc2VjdXJpdHk6IHsgY2FwdGNoYV90b2tlbjogKF9jID0gY3JlZGVudGlhbHMgPT09IG51bGwgfHwgY3JlZGVudGlhbHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNyZWRlbnRpYWxzLm9wdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYXB0Y2hhVG9rZW4gfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHhmb3JtOiBfc2Vzc2lvblJlc3BvbnNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSByZXM7XG4gICAgICAgICAgICBpZiAoZXJyb3IgfHwgIWRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3I6IGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzZXNzaW9uID0gZGF0YS5zZXNzaW9uO1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IGRhdGEudXNlcjtcbiAgICAgICAgICAgIGlmIChkYXRhLnNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zYXZlU2Vzc2lvbihkYXRhLnNlc3Npb24pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25vdGlmeUFsbFN1YnNjcmliZXJzKCdTSUdORURfSU4nLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlciwgc2Vzc2lvbiB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB1c2VyLlxuICAgICAqXG4gICAgICogQmUgYXdhcmUgdGhhdCBpZiBhIHVzZXIgYWNjb3VudCBleGlzdHMgaW4gdGhlIHN5c3RlbSB5b3UgbWF5IGdldCBiYWNrIGFuXG4gICAgICogZXJyb3IgbWVzc2FnZSB0aGF0IGF0dGVtcHRzIHRvIGhpZGUgdGhpcyBpbmZvcm1hdGlvbiBmcm9tIHRoZSB1c2VyLlxuICAgICAqIFRoaXMgbWV0aG9kIGhhcyBzdXBwb3J0IGZvciBQS0NFIHZpYSBlbWFpbCBzaWdudXBzLiBUaGUgUEtDRSBmbG93IGNhbm5vdCBiZSB1c2VkIHdoZW4gYXV0b2NvbmZpcm0gaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgbG9nZ2VkLWluIHNlc3Npb24gaWYgdGhlIHNlcnZlciBoYXMgXCJhdXRvY29uZmlybVwiIE9OXG4gICAgICogQHJldHVybnMgQSB1c2VyIGlmIHRoZSBzZXJ2ZXIgaGFzIFwiYXV0b2NvbmZpcm1cIiBPRkZcbiAgICAgKi9cbiAgICBhc3luYyBzaWduVXAoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgcmVzO1xuICAgICAgICAgICAgaWYgKCdlbWFpbCcgaW4gY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCwgb3B0aW9ucyB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgICAgICAgICAgbGV0IGNvZGVDaGFsbGVuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBjb2RlQ2hhbGxlbmdlTWV0aG9kID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mbG93VHlwZSA9PT0gJ3BrY2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgW2NvZGVDaGFsbGVuZ2UsIGNvZGVDaGFsbGVuZ2VNZXRob2RdID0gYXdhaXQgZ2V0Q29kZUNoYWxsZW5nZUFuZE1ldGhvZCh0aGlzLnN0b3JhZ2UsIHRoaXMuc3RvcmFnZUtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcyA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L3NpZ251cGAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZW1haWxSZWRpcmVjdFRvLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRhdGEpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZ290cnVlX21ldGFfc2VjdXJpdHk6IHsgY2FwdGNoYV90b2tlbjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhcHRjaGFUb2tlbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZV9jaGFsbGVuZ2U6IGNvZGVDaGFsbGVuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlX2NoYWxsZW5nZV9tZXRob2Q6IGNvZGVDaGFsbGVuZ2VNZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHhmb3JtOiBfc2Vzc2lvblJlc3BvbnNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJ3Bob25lJyBpbiBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgcGhvbmUsIHBhc3N3b3JkLCBvcHRpb25zIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgICAgICAgICByZXMgPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9zaWdudXBgLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGhvbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kYXRhKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWw6IChfYyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jaGFubmVsKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnc21zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXB0Y2hhVG9rZW4gfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgeGZvcm06IF9zZXNzaW9uUmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aEludmFsaWRDcmVkZW50aWFsc0Vycm9yKCdZb3UgbXVzdCBwcm92aWRlIGVpdGhlciBhbiBlbWFpbCBvciBwaG9uZSBudW1iZXIgYW5kIGEgcGFzc3dvcmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IHJlcztcbiAgICAgICAgICAgIGlmIChlcnJvciB8fCAhZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvcjogZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBkYXRhLnNlc3Npb247XG4gICAgICAgICAgICBjb25zdCB1c2VyID0gZGF0YS51c2VyO1xuICAgICAgICAgICAgaWYgKGRhdGEuc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmVTZXNzaW9uKGRhdGEuc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1NJR05FRF9JTicsIHNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyLCBzZXNzaW9uIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2cgaW4gYW4gZXhpc3RpbmcgdXNlciB3aXRoIGFuIGVtYWlsIGFuZCBwYXNzd29yZCBvciBwaG9uZSBhbmQgcGFzc3dvcmQuXG4gICAgICpcbiAgICAgKiBCZSBhd2FyZSB0aGF0IHlvdSBtYXkgZ2V0IGJhY2sgYW4gZXJyb3IgbWVzc2FnZSB0aGF0IHdpbGwgbm90IGRpc3Rpbmd1aXNoXG4gICAgICogYmV0d2VlbiB0aGUgY2FzZXMgd2hlcmUgdGhlIGFjY291bnQgZG9lcyBub3QgZXhpc3Qgb3IgdGhhdCB0aGVcbiAgICAgKiBlbWFpbC9waG9uZSBhbmQgcGFzc3dvcmQgY29tYmluYXRpb24gaXMgd3Jvbmcgb3IgdGhhdCB0aGUgYWNjb3VudCBjYW4gb25seVxuICAgICAqIGJlIGFjY2Vzc2VkIHZpYSBzb2NpYWwgbG9naW4uXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkluV2l0aFBhc3N3b3JkKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgcmVzO1xuICAgICAgICAgICAgaWYgKCdlbWFpbCcgaW4gY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCwgb3B0aW9ucyB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgICAgICAgICAgcmVzID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vdG9rZW4/Z3JhbnRfdHlwZT1wYXNzd29yZGAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ290cnVlX21ldGFfc2VjdXJpdHk6IHsgY2FwdGNoYV90b2tlbjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhcHRjaGFUb2tlbiB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB4Zm9ybTogX3Nlc3Npb25SZXNwb25zZVBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJ3Bob25lJyBpbiBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgcGhvbmUsIHBhc3N3b3JkLCBvcHRpb25zIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgICAgICAgICByZXMgPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS90b2tlbj9ncmFudF90eXBlPXBhc3N3b3JkYCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob25lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBnb3RydWVfbWV0YV9zZWN1cml0eTogeyBjYXB0Y2hhX3Rva2VuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2FwdGNoYVRva2VuIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHhmb3JtOiBfc2Vzc2lvblJlc3BvbnNlUGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aEludmFsaWRDcmVkZW50aWFsc0Vycm9yKCdZb3UgbXVzdCBwcm92aWRlIGVpdGhlciBhbiBlbWFpbCBvciBwaG9uZSBudW1iZXIgYW5kIGEgcGFzc3dvcmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IHJlcztcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWRhdGEgfHwgIWRhdGEuc2Vzc2lvbiB8fCAhZGF0YS51c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yOiBuZXcgQXV0aEludmFsaWRUb2tlblJlc3BvbnNlRXJyb3IoKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEuc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmVTZXNzaW9uKGRhdGEuc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1NJR05FRF9JTicsIGRhdGEuc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oeyB1c2VyOiBkYXRhLnVzZXIsIHNlc3Npb246IGRhdGEuc2Vzc2lvbiB9LCAoZGF0YS53ZWFrX3Bhc3N3b3JkID8geyB3ZWFrUGFzc3dvcmQ6IGRhdGEud2Vha19wYXNzd29yZCB9IDogbnVsbCkpLFxuICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvZyBpbiBhbiBleGlzdGluZyB1c2VyIHZpYSBhIHRoaXJkLXBhcnR5IHByb3ZpZGVyLlxuICAgICAqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIHRoZSBQS0NFIGZsb3cuXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkluV2l0aE9BdXRoKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2hhbmRsZVByb3ZpZGVyU2lnbkluKGNyZWRlbnRpYWxzLnByb3ZpZGVyLCB7XG4gICAgICAgICAgICByZWRpcmVjdFRvOiAoX2EgPSBjcmVkZW50aWFscy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVkaXJlY3RUbyxcbiAgICAgICAgICAgIHNjb3BlczogKF9iID0gY3JlZGVudGlhbHMub3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNjb3BlcyxcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zOiAoX2MgPSBjcmVkZW50aWFscy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucXVlcnlQYXJhbXMsXG4gICAgICAgICAgICBza2lwQnJvd3NlclJlZGlyZWN0OiAoX2QgPSBjcmVkZW50aWFscy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Quc2tpcEJyb3dzZXJSZWRpcmVjdCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvZyBpbiBhbiBleGlzdGluZyB1c2VyIGJ5IGV4Y2hhbmdpbmcgYW4gQXV0aCBDb2RlIGlzc3VlZCBkdXJpbmcgdGhlIFBLQ0UgZmxvdy5cbiAgICAgKi9cbiAgICBhc3luYyBleGNoYW5nZUNvZGVGb3JTZXNzaW9uKGF1dGhDb2RlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V4Y2hhbmdlQ29kZUZvclNlc3Npb24oYXV0aENvZGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2lnbnMgaW4gYSB1c2VyIGJ5IHZlcmlmeWluZyBhIG1lc3NhZ2Ugc2lnbmVkIGJ5IHRoZSB1c2VyJ3MgcHJpdmF0ZSBrZXkuXG4gICAgICogT25seSBTb2xhbmEgc3VwcG9ydGVkIGF0IHRoaXMgdGltZSwgdXNpbmcgdGhlIFNpZ24gaW4gd2l0aCBTb2xhbmEgc3RhbmRhcmQuXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkluV2l0aFdlYjMoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgeyBjaGFpbiB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgIGlmIChjaGFpbiA9PT0gJ3NvbGFuYScpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNpZ25JbldpdGhTb2xhbmEoY3JlZGVudGlhbHMpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQHN1cGFiYXNlL2F1dGgtanM6IFVuc3VwcG9ydGVkIGNoYWluIFwiJHtjaGFpbn1cImApO1xuICAgIH1cbiAgICBhc3luYyBzaWduSW5XaXRoU29sYW5hKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tO1xuICAgICAgICBsZXQgbWVzc2FnZTtcbiAgICAgICAgbGV0IHNpZ25hdHVyZTtcbiAgICAgICAgaWYgKCdtZXNzYWdlJyBpbiBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgbWVzc2FnZSA9IGNyZWRlbnRpYWxzLm1lc3NhZ2U7XG4gICAgICAgICAgICBzaWduYXR1cmUgPSBjcmVkZW50aWFscy5zaWduYXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluLCB3YWxsZXQsIHN0YXRlbWVudCwgb3B0aW9ucyB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZWRXYWxsZXQ7XG4gICAgICAgICAgICBpZiAoIWlzQnJvd3NlcigpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3YWxsZXQgIT09ICdvYmplY3QnIHx8ICEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnVybCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdAc3VwYWJhc2UvYXV0aC1qczogQm90aCB3YWxsZXQgYW5kIHVybCBtdXN0IGJlIHNwZWNpZmllZCBpbiBub24tYnJvd3NlciBlbnZpcm9ubWVudHMuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmVkV2FsbGV0ID0gd2FsbGV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHdhbGxldCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlZFdhbGxldCA9IHdhbGxldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdpbmRvd0FueSA9IHdpbmRvdztcbiAgICAgICAgICAgICAgICBpZiAoJ3NvbGFuYScgaW4gd2luZG93QW55ICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB3aW5kb3dBbnkuc29sYW5hID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgICAgICAoKCdzaWduSW4nIGluIHdpbmRvd0FueS5zb2xhbmEgJiYgdHlwZW9mIHdpbmRvd0FueS5zb2xhbmEuc2lnbkluID09PSAnZnVuY3Rpb24nKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKCdzaWduTWVzc2FnZScgaW4gd2luZG93QW55LnNvbGFuYSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB3aW5kb3dBbnkuc29sYW5hLnNpZ25NZXNzYWdlID09PSAnZnVuY3Rpb24nKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRXYWxsZXQgPSB3aW5kb3dBbnkuc29sYW5hO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBAc3VwYWJhc2UvYXV0aC1qczogTm8gY29tcGF0aWJsZSBTb2xhbmEgd2FsbGV0IGludGVyZmFjZSBvbiB0aGUgd2luZG93IG9iamVjdCAod2luZG93LnNvbGFuYSkgZGV0ZWN0ZWQuIE1ha2Ugc3VyZSB0aGUgdXNlciBhbHJlYWR5IGhhcyBhIHdhbGxldCBpbnN0YWxsZWQgYW5kIGNvbm5lY3RlZCBmb3IgdGhpcyBhcHAuIFByZWZlciBwYXNzaW5nIHRoZSB3YWxsZXQgaW50ZXJmYWNlIG9iamVjdCBkaXJlY3RseSB0byBzaWduSW5XaXRoV2ViMyh7IGNoYWluOiAnc29sYW5hJywgd2FsbGV0OiByZXNvbHZlZFVzZXJXYWxsZXQgfSkgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy51cmwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgIGlmICgnc2lnbkluJyBpbiByZXNvbHZlZFdhbGxldCAmJiByZXNvbHZlZFdhbGxldC5zaWduSW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCByZXNvbHZlZFdhbGxldC5zaWduSW4oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBpc3N1ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaWduSW5XaXRoU29sYW5hKSwgeyBcbiAgICAgICAgICAgICAgICAgICAgLy8gbm9uLW92ZXJyaWRhYmxlIHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogJzEnLCBkb21haW46IHVybC5ob3N0LCB1cmk6IHVybC5ocmVmIH0pLCAoc3RhdGVtZW50ID8geyBzdGF0ZW1lbnQgfSA6IG51bGwpKSk7XG4gICAgICAgICAgICAgICAgbGV0IG91dHB1dFRvUHJvY2VzcztcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvdXRwdXQpICYmIG91dHB1dFswXSAmJiB0eXBlb2Ygb3V0cHV0WzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRUb1Byb2Nlc3MgPSBvdXRwdXRbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG91dHB1dCAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb3V0cHV0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgICAgICAnc2lnbmVkTWVzc2FnZScgaW4gb3V0cHV0ICYmXG4gICAgICAgICAgICAgICAgICAgICdzaWduYXR1cmUnIGluIG91dHB1dCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRUb1Byb2Nlc3MgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0BzdXBhYmFzZS9hdXRoLWpzOiBXYWxsZXQgbWV0aG9kIHNpZ25JbigpIHJldHVybmVkIHVucmVjb2duaXplZCB2YWx1ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJ3NpZ25lZE1lc3NhZ2UnIGluIG91dHB1dFRvUHJvY2VzcyAmJlxuICAgICAgICAgICAgICAgICAgICAnc2lnbmF0dXJlJyBpbiBvdXRwdXRUb1Byb2Nlc3MgJiZcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBvdXRwdXRUb1Byb2Nlc3Muc2lnbmVkTWVzc2FnZSA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFRvUHJvY2Vzcy5zaWduZWRNZXNzYWdlIGluc3RhbmNlb2YgVWludDhBcnJheSkgJiZcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0VG9Qcm9jZXNzLnNpZ25hdHVyZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygb3V0cHV0VG9Qcm9jZXNzLnNpZ25lZE1lc3NhZ2UgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvdXRwdXRUb1Byb2Nlc3Muc2lnbmVkTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKG91dHB1dFRvUHJvY2Vzcy5zaWduZWRNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlID0gb3V0cHV0VG9Qcm9jZXNzLnNpZ25hdHVyZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQHN1cGFiYXNlL2F1dGgtanM6IFdhbGxldCBtZXRob2Qgc2lnbkluKCkgQVBJIHJldHVybmVkIG9iamVjdCB3aXRob3V0IHNpZ25lZE1lc3NhZ2UgYW5kIHNpZ25hdHVyZSBmaWVsZHMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoISgnc2lnbk1lc3NhZ2UnIGluIHJlc29sdmVkV2FsbGV0KSB8fFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcmVzb2x2ZWRXYWxsZXQuc2lnbk1lc3NhZ2UgIT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgISgncHVibGljS2V5JyBpbiByZXNvbHZlZFdhbGxldCkgfHxcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHJlc29sdmVkV2FsbGV0ICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICAgICAgICAgICAgICAhcmVzb2x2ZWRXYWxsZXQucHVibGljS2V5IHx8XG4gICAgICAgICAgICAgICAgICAgICEoJ3RvQmFzZTU4JyBpbiByZXNvbHZlZFdhbGxldC5wdWJsaWNLZXkpIHx8XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiByZXNvbHZlZFdhbGxldC5wdWJsaWNLZXkudG9CYXNlNTggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdAc3VwYWJhc2UvYXV0aC1qczogV2FsbGV0IGRvZXMgbm90IGhhdmUgYSBjb21wYXRpYmxlIHNpZ25NZXNzYWdlKCkgYW5kIHB1YmxpY0tleS50b0Jhc2U1OCgpIEFQSScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gW1xuICAgICAgICAgICAgICAgICAgICBgJHt1cmwuaG9zdH0gd2FudHMgeW91IHRvIHNpZ24gaW4gd2l0aCB5b3VyIFNvbGFuYSBhY2NvdW50OmAsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkV2FsbGV0LnB1YmxpY0tleS50b0Jhc2U1OCgpLFxuICAgICAgICAgICAgICAgICAgICAuLi4oc3RhdGVtZW50ID8gWycnLCBzdGF0ZW1lbnQsICcnXSA6IFsnJ10pLFxuICAgICAgICAgICAgICAgICAgICAnVmVyc2lvbjogMScsXG4gICAgICAgICAgICAgICAgICAgIGBVUkk6ICR7dXJsLmhyZWZ9YCxcbiAgICAgICAgICAgICAgICAgICAgYElzc3VlZCBBdDogJHsoX2MgPSAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lnbkluV2l0aFNvbGFuYSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmlzc3VlZEF0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCxcbiAgICAgICAgICAgICAgICAgICAgLi4uKCgoX2QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lnbkluV2l0aFNvbGFuYSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLm5vdEJlZm9yZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW2BOb3QgQmVmb3JlOiAke29wdGlvbnMuc2lnbkluV2l0aFNvbGFuYS5ub3RCZWZvcmV9YF1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogW10pLFxuICAgICAgICAgICAgICAgICAgICAuLi4oKChfZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaWduSW5XaXRoU29sYW5hKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuZXhwaXJhdGlvblRpbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFtgRXhwaXJhdGlvbiBUaW1lOiAke29wdGlvbnMuc2lnbkluV2l0aFNvbGFuYS5leHBpcmF0aW9uVGltZX1gXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbXSksXG4gICAgICAgICAgICAgICAgICAgIC4uLigoKF9mID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25JbldpdGhTb2xhbmEpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jaGFpbklkKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbYENoYWluIElEOiAke29wdGlvbnMuc2lnbkluV2l0aFNvbGFuYS5jaGFpbklkfWBdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKCgoX2cgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lnbkluV2l0aFNvbGFuYSkgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLm5vbmNlKSA/IFtgTm9uY2U6ICR7b3B0aW9ucy5zaWduSW5XaXRoU29sYW5hLm5vbmNlfWBdIDogW10pLFxuICAgICAgICAgICAgICAgICAgICAuLi4oKChfaCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaWduSW5XaXRoU29sYW5hKSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2gucmVxdWVzdElkKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbYFJlcXVlc3QgSUQ6ICR7b3B0aW9ucy5zaWduSW5XaXRoU29sYW5hLnJlcXVlc3RJZH1gXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbXSksXG4gICAgICAgICAgICAgICAgICAgIC4uLigoKF9rID0gKF9qID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25JbldpdGhTb2xhbmEpID09PSBudWxsIHx8IF9qID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfai5yZXNvdXJjZXMpID09PSBudWxsIHx8IF9rID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfay5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUmVzb3VyY2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLnNpZ25JbldpdGhTb2xhbmEucmVzb3VyY2VzLm1hcCgocmVzb3VyY2UpID0+IGAtICR7cmVzb3VyY2V9YCksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtdKSxcbiAgICAgICAgICAgICAgICBdLmpvaW4oJ1xcbicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1heWJlU2lnbmF0dXJlID0gYXdhaXQgcmVzb2x2ZWRXYWxsZXQuc2lnbk1lc3NhZ2UobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKG1lc3NhZ2UpLCAndXRmOCcpO1xuICAgICAgICAgICAgICAgIGlmICghbWF5YmVTaWduYXR1cmUgfHwgIShtYXliZVNpZ25hdHVyZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQHN1cGFiYXNlL2F1dGgtanM6IFdhbGxldCBzaWduTWVzc2FnZSgpIEFQSSByZXR1cm5lZCBhbiByZWNvZ25pemVkIHZhbHVlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZSA9IG1heWJlU2lnbmF0dXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS90b2tlbj9ncmFudF90eXBlPXdlYjNgLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIGJvZHk6IE9iamVjdC5hc3NpZ24oeyBjaGFpbjogJ3NvbGFuYScsIG1lc3NhZ2UsIHNpZ25hdHVyZTogYnl0ZXNUb0Jhc2U2NFVSTChzaWduYXR1cmUpIH0sICgoKF9sID0gY3JlZGVudGlhbHMub3B0aW9ucykgPT09IG51bGwgfHwgX2wgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9sLmNhcHRjaGFUb2tlbilcbiAgICAgICAgICAgICAgICAgICAgPyB7IGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IChfbSA9IGNyZWRlbnRpYWxzLm9wdGlvbnMpID09PSBudWxsIHx8IF9tID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbS5jYXB0Y2hhVG9rZW4gfSB9XG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCkpLFxuICAgICAgICAgICAgICAgIHhmb3JtOiBfc2Vzc2lvblJlc3BvbnNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGF0YSB8fCAhZGF0YS5zZXNzaW9uIHx8ICFkYXRhLnVzZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG5ldyBBdXRoSW52YWxpZFRva2VuUmVzcG9uc2VFcnJvcigpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS5zZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2F2ZVNlc3Npb24oZGF0YS5zZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycygnU0lHTkVEX0lOJywgZGF0YS5zZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGRhdGEpLCBlcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX2V4Y2hhbmdlQ29kZUZvclNlc3Npb24oYXV0aENvZGUpIHtcbiAgICAgICAgY29uc3Qgc3RvcmFnZUl0ZW0gPSBhd2FpdCBnZXRJdGVtQXN5bmModGhpcy5zdG9yYWdlLCBgJHt0aGlzLnN0b3JhZ2VLZXl9LWNvZGUtdmVyaWZpZXJgKTtcbiAgICAgICAgY29uc3QgW2NvZGVWZXJpZmllciwgcmVkaXJlY3RUeXBlXSA9IChzdG9yYWdlSXRlbSAhPT0gbnVsbCAmJiBzdG9yYWdlSXRlbSAhPT0gdm9pZCAwID8gc3RvcmFnZUl0ZW0gOiAnJykuc3BsaXQoJy8nKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L3Rva2VuP2dyYW50X3R5cGU9cGtjZWAsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICBhdXRoX2NvZGU6IGF1dGhDb2RlLFxuICAgICAgICAgICAgICAgICAgICBjb2RlX3ZlcmlmaWVyOiBjb2RlVmVyaWZpZXIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX3Nlc3Npb25SZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXdhaXQgcmVtb3ZlSXRlbUFzeW5jKHRoaXMuc3RvcmFnZSwgYCR7dGhpcy5zdG9yYWdlS2V5fS1jb2RlLXZlcmlmaWVyYCk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGF0YSB8fCAhZGF0YS5zZXNzaW9uIHx8ICFkYXRhLnVzZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwsIHJlZGlyZWN0VHlwZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogbmV3IEF1dGhJbnZhbGlkVG9rZW5SZXNwb25zZUVycm9yKCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhLnNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zYXZlU2Vzc2lvbihkYXRhLnNlc3Npb24pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25vdGlmeUFsbFN1YnNjcmliZXJzKCdTSUdORURfSU4nLCBkYXRhLnNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkYXRhKSwgeyByZWRpcmVjdFR5cGU6IHJlZGlyZWN0VHlwZSAhPT0gbnVsbCAmJiByZWRpcmVjdFR5cGUgIT09IHZvaWQgMCA/IHJlZGlyZWN0VHlwZSA6IG51bGwgfSksIGVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsLCByZWRpcmVjdFR5cGU6IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsbG93cyBzaWduaW5nIGluIHdpdGggYW4gT0lEQyBJRCB0b2tlbi4gVGhlIGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVyIHVzZWRcbiAgICAgKiBzaG91bGQgYmUgZW5hYmxlZCBhbmQgY29uZmlndXJlZC5cbiAgICAgKi9cbiAgICBhc3luYyBzaWduSW5XaXRoSWRUb2tlbihjcmVkZW50aWFscykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBvcHRpb25zLCBwcm92aWRlciwgdG9rZW4sIGFjY2Vzc190b2tlbiwgbm9uY2UgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vdG9rZW4/Z3JhbnRfdHlwZT1pZF90b2tlbmAsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcixcbiAgICAgICAgICAgICAgICAgICAgaWRfdG9rZW46IHRva2VuLFxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAgICAgICAgICBnb3RydWVfbWV0YV9zZWN1cml0eTogeyBjYXB0Y2hhX3Rva2VuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2FwdGNoYVRva2VuIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX3Nlc3Npb25SZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gcmVzO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghZGF0YSB8fCAhZGF0YS5zZXNzaW9uIHx8ICFkYXRhLnVzZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG5ldyBBdXRoSW52YWxpZFRva2VuUmVzcG9uc2VFcnJvcigpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS5zZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2F2ZVNlc3Npb24oZGF0YS5zZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycygnU0lHTkVEX0lOJywgZGF0YS5zZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2cgaW4gYSB1c2VyIHVzaW5nIG1hZ2ljbGluayBvciBhIG9uZS10aW1lIHBhc3N3b3JkIChPVFApLlxuICAgICAqXG4gICAgICogSWYgdGhlIGB7eyAuQ29uZmlybWF0aW9uVVJMIH19YCB2YXJpYWJsZSBpcyBzcGVjaWZpZWQgaW4gdGhlIGVtYWlsIHRlbXBsYXRlLCBhIG1hZ2ljbGluayB3aWxsIGJlIHNlbnQuXG4gICAgICogSWYgdGhlIGB7eyAuVG9rZW4gfX1gIHZhcmlhYmxlIGlzIHNwZWNpZmllZCBpbiB0aGUgZW1haWwgdGVtcGxhdGUsIGFuIE9UUCB3aWxsIGJlIHNlbnQuXG4gICAgICogSWYgeW91J3JlIHVzaW5nIHBob25lIHNpZ24taW5zLCBvbmx5IGFuIE9UUCB3aWxsIGJlIHNlbnQuIFlvdSB3b24ndCBiZSBhYmxlIHRvIHNlbmQgYSBtYWdpY2xpbmsgZm9yIHBob25lIHNpZ24taW5zLlxuICAgICAqXG4gICAgICogQmUgYXdhcmUgdGhhdCB5b3UgbWF5IGdldCBiYWNrIGFuIGVycm9yIG1lc3NhZ2UgdGhhdCB3aWxsIG5vdCBkaXN0aW5ndWlzaFxuICAgICAqIGJldHdlZW4gdGhlIGNhc2VzIHdoZXJlIHRoZSBhY2NvdW50IGRvZXMgbm90IGV4aXN0IG9yLCB0aGF0IHRoZSBhY2NvdW50XG4gICAgICogY2FuIG9ubHkgYmUgYWNjZXNzZWQgdmlhIHNvY2lhbCBsb2dpbi5cbiAgICAgKlxuICAgICAqIERvIG5vdGUgdGhhdCB5b3Ugd2lsbCBuZWVkIHRvIGNvbmZpZ3VyZSBhIFdoYXRzYXBwIHNlbmRlciBvbiBUd2lsaW9cbiAgICAgKiBpZiB5b3UgYXJlIHVzaW5nIHBob25lIHNpZ24gaW4gd2l0aCB0aGUgJ3doYXRzYXBwJyBjaGFubmVsLiBUaGUgd2hhdHNhcHBcbiAgICAgKiBjaGFubmVsIGlzIG5vdCBzdXBwb3J0ZWQgb24gb3RoZXIgcHJvdmlkZXJzXG4gICAgICogYXQgdGhpcyB0aW1lLlxuICAgICAqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIFBLQ0Ugd2hlbiBhbiBlbWFpbCBpcyBwYXNzZWQuXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkluV2l0aE90cChjcmVkZW50aWFscykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCdlbWFpbCcgaW4gY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVtYWlsLCBvcHRpb25zIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgICAgICAgICBsZXQgY29kZUNoYWxsZW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgbGV0IGNvZGVDaGFsbGVuZ2VNZXRob2QgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZsb3dUeXBlID09PSAncGtjZScpIHtcbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICBbY29kZUNoYWxsZW5nZSwgY29kZUNoYWxsZW5nZU1ldGhvZF0gPSBhd2FpdCBnZXRDb2RlQ2hhbGxlbmdlQW5kTWV0aG9kKHRoaXMuc3RvcmFnZSwgdGhpcy5zdG9yYWdlS2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vb3RwYCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRhdGEpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlX3VzZXI6IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaG91bGRDcmVhdGVVc2VyKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ290cnVlX21ldGFfc2VjdXJpdHk6IHsgY2FwdGNoYV90b2tlbjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhcHRjaGFUb2tlbiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZV9jaGFsbGVuZ2U6IGNvZGVDaGFsbGVuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlX2NoYWxsZW5nZV9tZXRob2Q6IGNvZGVDaGFsbGVuZ2VNZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5lbWFpbFJlZGlyZWN0VG8sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJ3Bob25lJyBpbiBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgcGhvbmUsIG9wdGlvbnMgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L290cGAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IChfYyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kYXRhKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZV91c2VyOiAoX2QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2hvdWxkQ3JlYXRlVXNlcikgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXB0Y2hhVG9rZW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWw6IChfZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jaGFubmVsKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAnc21zJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwsIG1lc3NhZ2VJZDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLm1lc3NhZ2VfaWQgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBBdXRoSW52YWxpZENyZWRlbnRpYWxzRXJyb3IoJ1lvdSBtdXN0IHByb3ZpZGUgZWl0aGVyIGFuIGVtYWlsIG9yIHBob25lIG51bWJlci4nKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvZyBpbiBhIHVzZXIgZ2l2ZW4gYSBVc2VyIHN1cHBsaWVkIE9UUCBvciBUb2tlbkhhc2ggcmVjZWl2ZWQgdGhyb3VnaCBtb2JpbGUgb3IgZW1haWwuXG4gICAgICovXG4gICAgYXN5bmMgdmVyaWZ5T3RwKHBhcmFtcykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHJlZGlyZWN0VG8gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBsZXQgY2FwdGNoYVRva2VuID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCdvcHRpb25zJyBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdFRvID0gKF9hID0gcGFyYW1zLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZWRpcmVjdFRvO1xuICAgICAgICAgICAgICAgIGNhcHRjaGFUb2tlbiA9IChfYiA9IHBhcmFtcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FwdGNoYVRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vdmVyaWZ5YCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcyksIHsgZ290cnVlX21ldGFfc2VjdXJpdHk6IHsgY2FwdGNoYV90b2tlbjogY2FwdGNoYVRva2VuIH0gfSksXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUbyxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX3Nlc3Npb25SZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIG9uIHRva2VuIHZlcmlmaWNhdGlvbi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBkYXRhLnNlc3Npb247XG4gICAgICAgICAgICBjb25zdCB1c2VyID0gZGF0YS51c2VyO1xuICAgICAgICAgICAgaWYgKHNlc3Npb24gPT09IG51bGwgfHwgc2Vzc2lvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2Vzc2lvbi5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zYXZlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycyhwYXJhbXMudHlwZSA9PSAncmVjb3ZlcnknID8gJ1BBU1NXT1JEX1JFQ09WRVJZJyA6ICdTSUdORURfSU4nLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlciwgc2Vzc2lvbiB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgYSBzaW5nbGUtc2lnbiBvbiB1c2luZyBhbiBlbnRlcnByaXNlIElkZW50aXR5IFByb3ZpZGVyLiBBXG4gICAgICogc3VjY2Vzc2Z1bCBTU08gYXR0ZW1wdCB3aWxsIHJlZGlyZWN0IHRoZSBjdXJyZW50IHBhZ2UgdG8gdGhlIGlkZW50aXR5XG4gICAgICogcHJvdmlkZXIgYXV0aG9yaXphdGlvbiBwYWdlLiBUaGUgcmVkaXJlY3QgVVJMIGlzIGltcGxlbWVudGF0aW9uIGFuZCBTU09cbiAgICAgKiBwcm90b2NvbCBzcGVjaWZpYy5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gdXNlIGl0IGJ5IHByb3ZpZGluZyBhIFNTTyBkb21haW4uIFR5cGljYWxseSB5b3UgY2FuIGV4dHJhY3QgdGhpc1xuICAgICAqIGRvbWFpbiBieSBhc2tpbmcgdXNlcnMgZm9yIHRoZWlyIGVtYWlsIGFkZHJlc3MuIElmIHRoaXMgZG9tYWluIGlzXG4gICAgICogcmVnaXN0ZXJlZCBvbiB0aGUgQXV0aCBpbnN0YW5jZSB0aGUgcmVkaXJlY3Qgd2lsbCB1c2UgdGhhdCBvcmdhbml6YXRpb24nc1xuICAgICAqIGN1cnJlbnRseSBhY3RpdmUgU1NPIElkZW50aXR5IFByb3ZpZGVyIGZvciB0aGUgbG9naW4uXG4gICAgICpcbiAgICAgKiBJZiB5b3UgaGF2ZSBidWlsdCBhbiBvcmdhbml6YXRpb24tc3BlY2lmaWMgbG9naW4gcGFnZSwgeW91IGNhbiB1c2UgdGhlXG4gICAgICogb3JnYW5pemF0aW9uJ3MgU1NPIElkZW50aXR5IFByb3ZpZGVyIFVVSUQgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBhc3luYyBzaWduSW5XaXRoU1NPKHBhcmFtcykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBjb2RlQ2hhbGxlbmdlID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBjb2RlQ2hhbGxlbmdlTWV0aG9kID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLmZsb3dUeXBlID09PSAncGtjZScpIHtcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgW2NvZGVDaGFsbGVuZ2UsIGNvZGVDaGFsbGVuZ2VNZXRob2RdID0gYXdhaXQgZ2V0Q29kZUNoYWxsZW5nZUFuZE1ldGhvZCh0aGlzLnN0b3JhZ2UsIHRoaXMuc3RvcmFnZUtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vc3NvYCwge1xuICAgICAgICAgICAgICAgIGJvZHk6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgKCdwcm92aWRlcklkJyBpbiBwYXJhbXMgPyB7IHByb3ZpZGVyX2lkOiBwYXJhbXMucHJvdmlkZXJJZCB9IDogbnVsbCkpLCAoJ2RvbWFpbicgaW4gcGFyYW1zID8geyBkb21haW46IHBhcmFtcy5kb21haW4gfSA6IG51bGwpKSwgeyByZWRpcmVjdF90bzogKF9iID0gKF9hID0gcGFyYW1zLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZWRpcmVjdFRvKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB1bmRlZmluZWQgfSksICgoKF9jID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLm9wdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYXB0Y2hhVG9rZW4pXG4gICAgICAgICAgICAgICAgICAgID8geyBnb3RydWVfbWV0YV9zZWN1cml0eTogeyBjYXB0Y2hhX3Rva2VuOiBwYXJhbXMub3B0aW9ucy5jYXB0Y2hhVG9rZW4gfSB9XG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCkpLCB7IHNraXBfaHR0cF9yZWRpcmVjdDogdHJ1ZSwgY29kZV9jaGFsbGVuZ2U6IGNvZGVDaGFsbGVuZ2UsIGNvZGVfY2hhbGxlbmdlX21ldGhvZDogY29kZUNoYWxsZW5nZU1ldGhvZCB9KSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgeGZvcm06IF9zc29SZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHJlYXV0aGVudGljYXRpb24gT1RQIHRvIHRoZSB1c2VyJ3MgZW1haWwgb3IgcGhvbmUgbnVtYmVyLlxuICAgICAqIFJlcXVpcmVzIHRoZSB1c2VyIHRvIGJlIHNpZ25lZC1pbi5cbiAgICAgKi9cbiAgICBhc3luYyByZWF1dGhlbnRpY2F0ZSgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUHJvbWlzZTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2FjcXVpcmVMb2NrKC0xLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVhdXRoZW50aWNhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIF9yZWF1dGhlbnRpY2F0ZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl91c2VTZXNzaW9uKGFzeW5jIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGE6IHsgc2Vzc2lvbiB9LCBlcnJvcjogc2Vzc2lvbkVycm9yLCB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uRXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IHNlc3Npb25FcnJvcjtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24pXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBdXRoU2Vzc2lvbk1pc3NpbmdFcnJvcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdHRVQnLCBgJHt0aGlzLnVybH0vcmVhdXRoZW50aWNhdGVgLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgand0OiBzZXNzaW9uLmFjY2Vzc190b2tlbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZW5kcyBhbiBleGlzdGluZyBzaWdudXAgY29uZmlybWF0aW9uIGVtYWlsLCBlbWFpbCBjaGFuZ2UgZW1haWwsIFNNUyBPVFAgb3IgcGhvbmUgY2hhbmdlIE9UUC5cbiAgICAgKi9cbiAgICBhc3luYyByZXNlbmQoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7dGhpcy51cmx9L3Jlc2VuZGA7XG4gICAgICAgICAgICBpZiAoJ2VtYWlsJyBpbiBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZW1haWwsIHR5cGUsIG9wdGlvbnMgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgZW5kcG9pbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBnb3RydWVfbWV0YV9zZWN1cml0eTogeyBjYXB0Y2hhX3Rva2VuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2FwdGNoYVRva2VuIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5lbWFpbFJlZGlyZWN0VG8sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgncGhvbmUnIGluIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwaG9uZSwgdHlwZSwgb3B0aW9ucyB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBlbmRwb2ludCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob25lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXB0Y2hhVG9rZW4gfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwsIG1lc3NhZ2VJZDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLm1lc3NhZ2VfaWQgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBBdXRoSW52YWxpZENyZWRlbnRpYWxzRXJyb3IoJ1lvdSBtdXN0IHByb3ZpZGUgZWl0aGVyIGFuIGVtYWlsIG9yIHBob25lIG51bWJlciBhbmQgYSB0eXBlJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzZXNzaW9uLCByZWZyZXNoaW5nIGl0IGlmIG5lY2Vzc2FyeS5cbiAgICAgKlxuICAgICAqIFRoZSBzZXNzaW9uIHJldHVybmVkIGNhbiBiZSBudWxsIGlmIHRoZSBzZXNzaW9uIGlzIG5vdCBkZXRlY3RlZCB3aGljaCBjYW4gaGFwcGVuIGluIHRoZSBldmVudCBhIHVzZXIgaXMgbm90IHNpZ25lZC1pbiBvciBoYXMgbG9nZ2VkIG91dC5cbiAgICAgKlxuICAgICAqICoqSU1QT1JUQU5UOioqIFRoaXMgbWV0aG9kIGxvYWRzIHZhbHVlcyBkaXJlY3RseSBmcm9tIHRoZSBzdG9yYWdlIGF0dGFjaGVkXG4gICAgICogdG8gdGhlIGNsaWVudC4gSWYgdGhhdCBzdG9yYWdlIGlzIGJhc2VkIG9uIHJlcXVlc3QgY29va2llcyBmb3IgZXhhbXBsZSxcbiAgICAgKiB0aGUgdmFsdWVzIGluIGl0IG1heSBub3QgYmUgYXV0aGVudGljIGFuZCB0aGVyZWZvcmUgaXQncyBzdHJvbmdseSBhZHZpc2VkXG4gICAgICogYWdhaW5zdCB1c2luZyB0aGlzIG1ldGhvZCBhbmQgaXRzIHJlc3VsdHMgaW4gc3VjaCBjaXJjdW1zdGFuY2VzLiBBIHdhcm5pbmdcbiAgICAgKiB3aWxsIGJlIGVtaXR0ZWQgaWYgdGhpcyBpcyBkZXRlY3RlZC4gVXNlIHtAbGluayAjZ2V0VXNlcigpfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFNlc3Npb24oKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2FjcXVpcmVMb2NrKC0xLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWNxdWlyZXMgYSBnbG9iYWwgbG9jayBiYXNlZCBvbiB0aGUgc3RvcmFnZSBrZXkuXG4gICAgICovXG4gICAgYXN5bmMgX2FjcXVpcmVMb2NrKGFjcXVpcmVUaW1lb3V0LCBmbikge1xuICAgICAgICB0aGlzLl9kZWJ1ZygnI19hY3F1aXJlTG9jaycsICdiZWdpbicsIGFjcXVpcmVUaW1lb3V0KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxvY2tBY3F1aXJlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSB0aGlzLnBlbmRpbmdJbkxvY2subGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5wZW5kaW5nSW5Mb2NrW3RoaXMucGVuZGluZ0luTG9jay5sZW5ndGggLSAxXVxuICAgICAgICAgICAgICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGxhc3Q7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBmbigpO1xuICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nSW5Mb2NrLnB1c2goKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UganVzdCBjYXJlIGlmIGl0IGZpbmlzaGVkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMubG9jayhgbG9jazoke3RoaXMuc3RvcmFnZUtleX1gLCBhY3F1aXJlVGltZW91dCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKCcjX2FjcXVpcmVMb2NrJywgJ2xvY2sgYWNxdWlyZWQgZm9yIHN0b3JhZ2Uga2V5JywgdGhpcy5zdG9yYWdlS2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvY2tBY3F1aXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGZuKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0luTG9jay5wdXNoKChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UganVzdCBjYXJlIGlmIGl0IGZpbmlzaGVkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKCkpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIGtlZXAgZHJhaW5pbmcgdGhlIHF1ZXVlIHVudGlsIHRoZXJlJ3Mgbm90aGluZyB0byB3YWl0IG9uXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLnBlbmRpbmdJbkxvY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3YWl0T24gPSBbLi4udGhpcy5wZW5kaW5nSW5Mb2NrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHdhaXRPbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdJbkxvY2suc3BsaWNlKDAsIHdhaXRPbi5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19hY3F1aXJlTG9jaycsICdsb2NrIHJlbGVhc2VkIGZvciBzdG9yYWdlIGtleScsIHRoaXMuc3RvcmFnZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9ja0FjcXVpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19hY3F1aXJlTG9jaycsICdlbmQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2UgaW5zdGVhZCBvZiB7QGxpbmsgI2dldFNlc3Npb259IGluc2lkZSB0aGUgbGlicmFyeS4gSXQgaXNcbiAgICAgKiBzZW1hbnRpY2FsbHkgdXN1YWxseSB3aGF0IHlvdSB3YW50LCBhcyBnZXR0aW5nIGEgc2Vzc2lvbiBpbnZvbHZlcyBzb21lXG4gICAgICogcHJvY2Vzc2luZyBhZnRlcndhcmRzIHRoYXQgcmVxdWlyZXMgb25seSBvbmUgY2xpZW50IG9wZXJhdGluZyBvbiB0aGVcbiAgICAgKiBzZXNzaW9uIGF0IG9uY2UgYWNyb3NzIG11bHRpcGxlIHRhYnMgb3IgcHJvY2Vzc2VzLlxuICAgICAqL1xuICAgIGFzeW5jIF91c2VTZXNzaW9uKGZuKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnKCcjX3VzZVNlc3Npb24nLCAnYmVnaW4nKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHRoZSB1c2Ugb2YgX19sb2FkU2Vzc2lvbiBoZXJlIGlzIHRoZSBvbmx5IGNvcnJlY3QgdXNlIG9mIHRoZSBmdW5jdGlvbiFcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX19sb2FkU2Vzc2lvbigpO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGZuKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI191c2VTZXNzaW9uJywgJ2VuZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5FVkVSIFVTRSBESVJFQ1RMWSFcbiAgICAgKlxuICAgICAqIEFsd2F5cyB1c2Uge0BsaW5rICNfdXNlU2Vzc2lvbn0uXG4gICAgICovXG4gICAgYXN5bmMgX19sb2FkU2Vzc2lvbigpIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJyNfX2xvYWRTZXNzaW9uKCknLCAnYmVnaW4nKTtcbiAgICAgICAgaWYgKCF0aGlzLmxvY2tBY3F1aXJlZCkge1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfX2xvYWRTZXNzaW9uKCknLCAndXNlZCBvdXRzaWRlIG9mIGFuIGFjcXVpcmVkIGxvY2shJywgbmV3IEVycm9yKCkuc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudFNlc3Npb24gPSBudWxsO1xuICAgICAgICAgICAgY29uc3QgbWF5YmVTZXNzaW9uID0gYXdhaXQgZ2V0SXRlbUFzeW5jKHRoaXMuc3RvcmFnZSwgdGhpcy5zdG9yYWdlS2V5KTtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCcjZ2V0U2Vzc2lvbigpJywgJ3Nlc3Npb24gZnJvbSBzdG9yYWdlJywgbWF5YmVTZXNzaW9uKTtcbiAgICAgICAgICAgIGlmIChtYXliZVNlc3Npb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNWYWxpZFNlc3Npb24obWF5YmVTZXNzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2Vzc2lvbiA9IG1heWJlU2Vzc2lvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKCcjZ2V0U2Vzc2lvbigpJywgJ3Nlc3Npb24gZnJvbSBzdG9yYWdlIGlzIG5vdCB2YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9yZW1vdmVTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjdXJyZW50U2Vzc2lvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgc2Vzc2lvbjogbnVsbCB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQSBzZXNzaW9uIGlzIGNvbnNpZGVyZWQgZXhwaXJlZCBiZWZvcmUgdGhlIGFjY2VzcyB0b2tlbiBfYWN0dWFsbHlfXG4gICAgICAgICAgICAvLyBleHBpcmVzLiBXaGVuIHRoZSBhdXRvUmVmcmVzaFRva2VuIG9wdGlvbiBpcyBvZmYgKG9yIHdoZW4gdGhlIHRhYiBpc1xuICAgICAgICAgICAgLy8gaW4gdGhlIGJhY2tncm91bmQpLCB2ZXJ5IGVhZ2VyIHVzZXJzIG9mIGdldFNlc3Npb24oKSAtLSBsaWtlXG4gICAgICAgICAgICAvLyByZWFsdGltZS1qcyAtLSBtaWdodCBzZW5kIGEgdmFsaWQgSldUIHdoaWNoIHdpbGwgZXhwaXJlIGJ5IHRoZSB0aW1lIGl0XG4gICAgICAgICAgICAvLyByZWFjaGVzIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAgICBjb25zdCBoYXNFeHBpcmVkID0gY3VycmVudFNlc3Npb24uZXhwaXJlc19hdFxuICAgICAgICAgICAgICAgID8gY3VycmVudFNlc3Npb24uZXhwaXJlc19hdCAqIDEwMDAgLSBEYXRlLm5vdygpIDwgRVhQSVJZX01BUkdJTl9NU1xuICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19fbG9hZFNlc3Npb24oKScsIGBzZXNzaW9uIGhhcyR7aGFzRXhwaXJlZCA/ICcnIDogJyBub3QnfSBleHBpcmVkYCwgJ2V4cGlyZXNfYXQnLCBjdXJyZW50U2Vzc2lvbi5leHBpcmVzX2F0KTtcbiAgICAgICAgICAgIGlmICghaGFzRXhwaXJlZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0b3JhZ2UuaXNTZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHByZXNzV2FybmluZyA9IHRoaXMuc3VwcHJlc3NHZXRTZXNzaW9uV2FybmluZztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJveHlTZXNzaW9uID0gbmV3IFByb3h5KGN1cnJlbnRTZXNzaW9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdXBwcmVzc1dhcm5pbmcgJiYgcHJvcCA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgc2hvdyB3YXJuaW5nIHdoZW4gdGhlIHVzZXIgb2JqZWN0IGlzIGJlaW5nIGFjY2Vzc2VkIGZyb20gdGhlIHNlcnZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1VzaW5nIHRoZSB1c2VyIG9iamVjdCBhcyByZXR1cm5lZCBmcm9tIHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpIG9yIGZyb20gc29tZSBzdXBhYmFzZS5hdXRoLm9uQXV0aFN0YXRlQ2hhbmdlKCkgZXZlbnRzIGNvdWxkIGJlIGluc2VjdXJlISBUaGlzIHZhbHVlIGNvbWVzIGRpcmVjdGx5IGZyb20gdGhlIHN0b3JhZ2UgbWVkaXVtICh1c3VhbGx5IGNvb2tpZXMgb24gdGhlIHNlcnZlcikgYW5kIG1heSBub3QgYmUgYXV0aGVudGljLiBVc2Ugc3VwYWJhc2UuYXV0aC5nZXRVc2VyKCkgaW5zdGVhZCB3aGljaCBhdXRoZW50aWNhdGVzIHRoZSBkYXRhIGJ5IGNvbnRhY3RpbmcgdGhlIFN1cGFiYXNlIEF1dGggc2VydmVyLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwcmVzc1dhcm5pbmcgPSB0cnVlOyAvLyBrZWVwcyB0aGlzIHByb3h5IGluc3RhbmNlIGZyb20gbG9nZ2luZyBhZGRpdGlvbmFsIHdhcm5pbmdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VwcHJlc3NHZXRTZXNzaW9uV2FybmluZyA9IHRydWU7IC8vIGtlZXBzIHRoaXMgY2xpZW50J3MgZnV0dXJlIHByb3h5IGluc3RhbmNlcyBmcm9tIHdhcm5pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZXNzaW9uID0gcHJveHlTZXNzaW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHNlc3Npb246IGN1cnJlbnRTZXNzaW9uIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHNlc3Npb24sIGVycm9yIH0gPSBhd2FpdCB0aGlzLl9jYWxsUmVmcmVzaFRva2VuKGN1cnJlbnRTZXNzaW9uLnJlZnJlc2hfdG9rZW4pO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHNlc3Npb24gfSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCcjX19sb2FkU2Vzc2lvbigpJywgJ2VuZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgdXNlciBkZXRhaWxzIGlmIHRoZXJlIGlzIGFuIGV4aXN0aW5nIHNlc3Npb24uIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBuZXR3b3JrIHJlcXVlc3QgdG8gdGhlIFN1cGFiYXNlIEF1dGggc2VydmVyLCBzbyB0aGUgcmV0dXJuZWRcbiAgICAgKiB2YWx1ZSBpcyBhdXRoZW50aWMgYW5kIGNhbiBiZSB1c2VkIHRvIGJhc2UgYXV0aG9yaXphdGlvbiBydWxlcyBvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBqd3QgVGFrZXMgaW4gYW4gb3B0aW9uYWwgYWNjZXNzIHRva2VuIEpXVC4gSWYgbm8gSldUIGlzIHByb3ZpZGVkLCB0aGUgSldUIGZyb20gdGhlIGN1cnJlbnQgc2Vzc2lvbiBpcyB1c2VkLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFVzZXIoand0KSB7XG4gICAgICAgIGlmIChqd3QpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9nZXRVc2VyKGp3dCk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUHJvbWlzZTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9nZXRVc2VyKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBfZ2V0VXNlcihqd3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChqd3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0dFVCcsIGAke3RoaXMudXJsfS91c2VyYCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGp3dDogand0LFxuICAgICAgICAgICAgICAgICAgICB4Zm9ybTogX3VzZXJSZXNwb25zZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl91c2VTZXNzaW9uKGFzeW5jIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyByZXR1cm5zIGFuIGVycm9yIGlmIHRoZXJlIGlzIG5vIGFjY2Vzc190b2tlbiBvciBjdXN0b20gYXV0aG9yaXphdGlvbiBoZWFkZXJcbiAgICAgICAgICAgICAgICBpZiAoISgoX2EgPSBkYXRhLnNlc3Npb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hY2Nlc3NfdG9rZW4pICYmICF0aGlzLmhhc0N1c3RvbUF1dGhvcml6YXRpb25IZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsIH0sIGVycm9yOiBuZXcgQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IoKSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0dFVCcsIGAke3RoaXMudXJsfS91c2VyYCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGp3dDogKF9jID0gKF9iID0gZGF0YS5zZXNzaW9uKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYWNjZXNzX3Rva2VuKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHhmb3JtOiBfdXNlclJlc3BvbnNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEpXVCBjb250YWlucyBhIGBzZXNzaW9uX2lkYCB3aGljaCBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGFuIGFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAvLyBzZXNzaW9uIGluIHRoZSBkYXRhYmFzZSwgaW5kaWNhdGluZyB0aGUgdXNlciBpcyBzaWduZWQgb3V0LlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9yZW1vdmVTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlbW92ZUl0ZW1Bc3luYyh0aGlzLnN0b3JhZ2UsIGAke3RoaXMuc3RvcmFnZUtleX0tY29kZS12ZXJpZmllcmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdXNlciBkYXRhIGZvciBhIGxvZ2dlZCBpbiB1c2VyLlxuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZVVzZXIoYXR0cmlidXRlcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3VwZGF0ZVVzZXIoYXR0cmlidXRlcywgb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBfdXBkYXRlVXNlcihhdHRyaWJ1dGVzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl91c2VTZXNzaW9uKGFzeW5jIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhLCBlcnJvcjogc2Vzc2lvbkVycm9yIH0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKHNlc3Npb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBzZXNzaW9uRXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbkRhdGEuc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHNlc3Npb25EYXRhLnNlc3Npb247XG4gICAgICAgICAgICAgICAgbGV0IGNvZGVDaGFsbGVuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBjb2RlQ2hhbGxlbmdlTWV0aG9kID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mbG93VHlwZSA9PT0gJ3BrY2UnICYmIGF0dHJpYnV0ZXMuZW1haWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIFtjb2RlQ2hhbGxlbmdlLCBjb2RlQ2hhbGxlbmdlTWV0aG9kXSA9IGF3YWl0IGdldENvZGVDaGFsbGVuZ2VBbmRNZXRob2QodGhpcy5zdG9yYWdlLCB0aGlzLnN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yOiB1c2VyRXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQVVQnLCBgJHt0aGlzLnVybH0vdXNlcmAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZW1haWxSZWRpcmVjdFRvLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGF0dHJpYnV0ZXMpLCB7IGNvZGVfY2hhbGxlbmdlOiBjb2RlQ2hhbGxlbmdlLCBjb2RlX2NoYWxsZW5nZV9tZXRob2Q6IGNvZGVDaGFsbGVuZ2VNZXRob2QgfSksXG4gICAgICAgICAgICAgICAgICAgIGp3dDogc2Vzc2lvbi5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIHhmb3JtOiBfdXNlclJlc3BvbnNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICh1c2VyRXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IHVzZXJFcnJvcjtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnVzZXIgPSBkYXRhLnVzZXI7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2F2ZVNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1VTRVJfVVBEQVRFRCcsIHNlc3Npb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogc2Vzc2lvbi51c2VyIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNlc3Npb24gZGF0YSBmcm9tIHRoZSBjdXJyZW50IHNlc3Npb24uIElmIHRoZSBjdXJyZW50IHNlc3Npb24gaXMgZXhwaXJlZCwgc2V0U2Vzc2lvbiB3aWxsIHRha2UgY2FyZSBvZiByZWZyZXNoaW5nIGl0IHRvIG9idGFpbiBhIG5ldyBzZXNzaW9uLlxuICAgICAqIElmIHRoZSByZWZyZXNoIHRva2VuIG9yIGFjY2VzcyB0b2tlbiBpbiB0aGUgY3VycmVudCBzZXNzaW9uIGlzIGludmFsaWQsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICAgICAqIEBwYXJhbSBjdXJyZW50U2Vzc2lvbiBUaGUgY3VycmVudCBzZXNzaW9uIHRoYXQgbWluaW1hbGx5IGNvbnRhaW5zIGFuIGFjY2VzcyB0b2tlbiBhbmQgcmVmcmVzaCB0b2tlbi5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRTZXNzaW9uKGN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3NldFNlc3Npb24oY3VycmVudFNlc3Npb24pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX3NldFNlc3Npb24oY3VycmVudFNlc3Npb24pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghY3VycmVudFNlc3Npb24uYWNjZXNzX3Rva2VuIHx8ICFjdXJyZW50U2Vzc2lvbi5yZWZyZXNoX3Rva2VuKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0aW1lTm93ID0gRGF0ZS5ub3coKSAvIDEwMDA7XG4gICAgICAgICAgICBsZXQgZXhwaXJlc0F0ID0gdGltZU5vdztcbiAgICAgICAgICAgIGxldCBoYXNFeHBpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBzZXNzaW9uID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gZGVjb2RlSldUKGN1cnJlbnRTZXNzaW9uLmFjY2Vzc190b2tlbik7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5leHApIHtcbiAgICAgICAgICAgICAgICBleHBpcmVzQXQgPSBwYXlsb2FkLmV4cDtcbiAgICAgICAgICAgICAgICBoYXNFeHBpcmVkID0gZXhwaXJlc0F0IDw9IHRpbWVOb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzRXhwaXJlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc2Vzc2lvbjogcmVmcmVzaGVkU2Vzc2lvbiwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuX2NhbGxSZWZyZXNoVG9rZW4oY3VycmVudFNlc3Npb24ucmVmcmVzaF90b2tlbik7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvcjogZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFyZWZyZXNoZWRTZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXNzaW9uID0gcmVmcmVzaGVkU2Vzc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuX2dldFVzZXIoY3VycmVudFNlc3Npb24uYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlc3Npb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc190b2tlbjogY3VycmVudFNlc3Npb24uYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoX3Rva2VuOiBjdXJyZW50U2Vzc2lvbi5yZWZyZXNoX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICB1c2VyOiBkYXRhLnVzZXIsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuX3R5cGU6ICdiZWFyZXInLFxuICAgICAgICAgICAgICAgICAgICBleHBpcmVzX2luOiBleHBpcmVzQXQgLSB0aW1lTm93LFxuICAgICAgICAgICAgICAgICAgICBleHBpcmVzX2F0OiBleHBpcmVzQXQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zYXZlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycygnU0lHTkVEX0lOJywgc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IHNlc3Npb24udXNlciwgc2Vzc2lvbiB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgc2Vzc2lvbjogbnVsbCwgdXNlcjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBzZXNzaW9uLCByZWdhcmRsZXNzIG9mIGV4cGlyeSBzdGF0dXMuXG4gICAgICogVGFrZXMgaW4gYW4gb3B0aW9uYWwgY3VycmVudCBzZXNzaW9uLiBJZiBub3QgcGFzc2VkIGluLCB0aGVuIHJlZnJlc2hTZXNzaW9uKCkgd2lsbCBhdHRlbXB0IHRvIHJldHJpZXZlIGl0IGZyb20gZ2V0U2Vzc2lvbigpLlxuICAgICAqIElmIHRoZSBjdXJyZW50IHNlc3Npb24ncyByZWZyZXNoIHRva2VuIGlzIGludmFsaWQsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICAgICAqIEBwYXJhbSBjdXJyZW50U2Vzc2lvbiBUaGUgY3VycmVudCBzZXNzaW9uLiBJZiBwYXNzZWQgaW4sIGl0IG11c3QgY29udGFpbiBhIHJlZnJlc2ggdG9rZW4uXG4gICAgICovXG4gICAgYXN5bmMgcmVmcmVzaFNlc3Npb24oY3VycmVudFNlc3Npb24pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUHJvbWlzZTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2FjcXVpcmVMb2NrKC0xLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVmcmVzaFNlc3Npb24oY3VycmVudFNlc3Npb24pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX3JlZnJlc2hTZXNzaW9uKGN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGlmICghY3VycmVudFNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZXNzaW9uID0gKF9hID0gZGF0YS5zZXNzaW9uKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghKGN1cnJlbnRTZXNzaW9uID09PSBudWxsIHx8IGN1cnJlbnRTZXNzaW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50U2Vzc2lvbi5yZWZyZXNoX3Rva2VuKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzZXNzaW9uLCBlcnJvciB9ID0gYXdhaXQgdGhpcy5fY2FsbFJlZnJlc2hUb2tlbihjdXJyZW50U2Vzc2lvbi5yZWZyZXNoX3Rva2VuKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yOiBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogc2Vzc2lvbi51c2VyLCBzZXNzaW9uIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNlc3Npb24gZGF0YSBmcm9tIGEgVVJMIHN0cmluZ1xuICAgICAqL1xuICAgIGFzeW5jIF9nZXRTZXNzaW9uRnJvbVVSTChwYXJhbXMsIGNhbGxiYWNrVXJsVHlwZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFpc0Jyb3dzZXIoKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aEltcGxpY2l0R3JhbnRSZWRpcmVjdEVycm9yKCdObyBicm93c2VyIGRldGVjdGVkLicpO1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBhbiBlcnJvciBpbiB0aGUgVVJMLCBpdCBkb2Vzbid0IG1hdHRlciB3aGF0IGZsb3cgaXQgaXMsIHdlIGp1c3QgcmV0dXJuIHRoZSBlcnJvci5cbiAgICAgICAgICAgIGlmIChwYXJhbXMuZXJyb3IgfHwgcGFyYW1zLmVycm9yX2Rlc2NyaXB0aW9uIHx8IHBhcmFtcy5lcnJvcl9jb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGVycm9yIGNsYXNzIHJldHVybmVkIGltcGxpZXMgdGhhdCB0aGUgcmVkaXJlY3QgaXMgZnJvbSBhbiBpbXBsaWNpdCBncmFudCBmbG93XG4gICAgICAgICAgICAgICAgLy8gYnV0IGl0IGNvdWxkIGFsc28gYmUgZnJvbSBhIHJlZGlyZWN0IGVycm9yIGZyb20gYSBQS0NFIGZsb3cuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvcihwYXJhbXMuZXJyb3JfZGVzY3JpcHRpb24gfHwgJ0Vycm9yIGluIFVSTCB3aXRoIHVuc3BlY2lmaWVkIGVycm9yX2Rlc2NyaXB0aW9uJywge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcjogcGFyYW1zLmVycm9yIHx8ICd1bnNwZWNpZmllZF9lcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IHBhcmFtcy5lcnJvcl9jb2RlIHx8ICd1bnNwZWNpZmllZF9jb2RlJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENoZWNrcyBmb3IgbWlzbWF0Y2hlcyBiZXR3ZWVuIHRoZSBmbG93VHlwZSBpbml0aWFsaXNlZCBpbiB0aGUgY2xpZW50IGFuZCB0aGUgVVJMIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIHN3aXRjaCAoY2FsbGJhY2tVcmxUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW1wbGljaXQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5mbG93VHlwZSA9PT0gJ3BrY2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aFBLQ0VHcmFudENvZGVFeGNoYW5nZUVycm9yKCdOb3QgYSB2YWxpZCBQS0NFIGZsb3cgdXJsLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3BrY2UnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5mbG93VHlwZSA9PT0gJ2ltcGxpY2l0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvcignTm90IGEgdmFsaWQgaW1wbGljaXQgZ3JhbnQgZmxvdyB1cmwuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyB0aGVyZSdzIG5vIG1pc21hdGNoIHNvIHdlIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIGEgcmVkaXJlY3QgZm9yIFBLQ0UsIHdlIGF0dGVtcHQgdG8gcmV0cmlldmUgdGhlIGNvZGUgZnJvbSB0aGUgVVJMIGZvciB0aGUgY29kZSBleGNoYW5nZVxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrVXJsVHlwZSA9PT0gJ3BrY2UnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfaW5pdGlhbGl6ZSgpJywgJ2JlZ2luJywgJ2lzIFBLQ0UgZmxvdycsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyYW1zLmNvZGUpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBdXRoUEtDRUdyYW50Q29kZUV4Y2hhbmdlRXJyb3IoJ05vIGNvZGUgZGV0ZWN0ZWQuJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgdGhpcy5fZXhjaGFuZ2VDb2RlRm9yU2Vzc2lvbihwYXJhbXMuY29kZSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmRlbGV0ZSgnY29kZScpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh3aW5kb3cuaGlzdG9yeS5zdGF0ZSwgJycsIHVybC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHNlc3Npb246IGRhdGEuc2Vzc2lvbiwgcmVkaXJlY3RUeXBlOiBudWxsIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHByb3ZpZGVyX3Rva2VuLCBwcm92aWRlcl9yZWZyZXNoX3Rva2VuLCBhY2Nlc3NfdG9rZW4sIHJlZnJlc2hfdG9rZW4sIGV4cGlyZXNfaW4sIGV4cGlyZXNfYXQsIHRva2VuX3R5cGUsIH0gPSBwYXJhbXM7XG4gICAgICAgICAgICBpZiAoIWFjY2Vzc190b2tlbiB8fCAhZXhwaXJlc19pbiB8fCAhcmVmcmVzaF90b2tlbiB8fCAhdG9rZW5fdHlwZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3IoJ05vIHNlc3Npb24gZGVmaW5lZCBpbiBVUkwnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRpbWVOb3cgPSBNYXRoLnJvdW5kKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGlyZXNJbiA9IHBhcnNlSW50KGV4cGlyZXNfaW4pO1xuICAgICAgICAgICAgbGV0IGV4cGlyZXNBdCA9IHRpbWVOb3cgKyBleHBpcmVzSW47XG4gICAgICAgICAgICBpZiAoZXhwaXJlc19hdCkge1xuICAgICAgICAgICAgICAgIGV4cGlyZXNBdCA9IHBhcnNlSW50KGV4cGlyZXNfYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWN0dWFsbHlFeHBpcmVzSW4gPSBleHBpcmVzQXQgLSB0aW1lTm93O1xuICAgICAgICAgICAgaWYgKGFjdHVhbGx5RXhwaXJlc0luICogMTAwMCA8PSBBVVRPX1JFRlJFU0hfVElDS19EVVJBVElPTl9NUykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgQHN1cGFiYXNlL2dvdHJ1ZS1qczogU2Vzc2lvbiBhcyByZXRyaWV2ZWQgZnJvbSBVUkwgZXhwaXJlcyBpbiAke2FjdHVhbGx5RXhwaXJlc0lufXMsIHNob3VsZCBoYXZlIGJlZW4gY2xvc2VyIHRvICR7ZXhwaXJlc0lufXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlzc3VlZEF0ID0gZXhwaXJlc0F0IC0gZXhwaXJlc0luO1xuICAgICAgICAgICAgaWYgKHRpbWVOb3cgLSBpc3N1ZWRBdCA+PSAxMjApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0BzdXBhYmFzZS9nb3RydWUtanM6IFNlc3Npb24gYXMgcmV0cmlldmVkIGZyb20gVVJMIHdhcyBpc3N1ZWQgb3ZlciAxMjBzIGFnbywgVVJMIGNvdWxkIGJlIHN0YWxlJywgaXNzdWVkQXQsIGV4cGlyZXNBdCwgdGltZU5vdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aW1lTm93IC0gaXNzdWVkQXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdAc3VwYWJhc2UvZ290cnVlLWpzOiBTZXNzaW9uIGFzIHJldHJpZXZlZCBmcm9tIFVSTCB3YXMgaXNzdWVkIGluIHRoZSBmdXR1cmU/IENoZWNrIHRoZSBkZXZpY2UgY2xvY2sgZm9yIHNrZXcnLCBpc3N1ZWRBdCwgZXhwaXJlc0F0LCB0aW1lTm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuX2dldFVzZXIoYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJfdG9rZW4sXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJfcmVmcmVzaF90b2tlbixcbiAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICAgICAgZXhwaXJlc19pbjogZXhwaXJlc0luLFxuICAgICAgICAgICAgICAgIGV4cGlyZXNfYXQ6IGV4cGlyZXNBdCxcbiAgICAgICAgICAgICAgICByZWZyZXNoX3Rva2VuLFxuICAgICAgICAgICAgICAgIHRva2VuX3R5cGUsXG4gICAgICAgICAgICAgICAgdXNlcjogZGF0YS51c2VyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0b2tlbnMgZnJvbSBVUkxcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19nZXRTZXNzaW9uRnJvbVVSTCgpJywgJ2NsZWFyaW5nIHdpbmRvdy5sb2NhdGlvbi5oYXNoJyk7XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHNlc3Npb24sIHJlZGlyZWN0VHlwZTogcGFyYW1zLnR5cGUgfSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHNlc3Npb246IG51bGwsIHJlZGlyZWN0VHlwZTogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IFVSTCBjb250YWlucyBwYXJhbWV0ZXJzIGdpdmVuIGJ5IGFuIGltcGxpY2l0IG9hdXRoIGdyYW50IGZsb3cgKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM2NzQ5Lmh0bWwjc2VjdGlvbi00LjIpXG4gICAgICovXG4gICAgX2lzSW1wbGljaXRHcmFudENhbGxiYWNrKHBhcmFtcykge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihwYXJhbXMuYWNjZXNzX3Rva2VuIHx8IHBhcmFtcy5lcnJvcl9kZXNjcmlwdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY3VycmVudCBVUkwgYW5kIGJhY2tpbmcgc3RvcmFnZSBjb250YWluIHBhcmFtZXRlcnMgZ2l2ZW4gYnkgYSBQS0NFIGZsb3dcbiAgICAgKi9cbiAgICBhc3luYyBfaXNQS0NFQ2FsbGJhY2socGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdG9yYWdlQ29udGVudCA9IGF3YWl0IGdldEl0ZW1Bc3luYyh0aGlzLnN0b3JhZ2UsIGAke3RoaXMuc3RvcmFnZUtleX0tY29kZS12ZXJpZmllcmApO1xuICAgICAgICByZXR1cm4gISEocGFyYW1zLmNvZGUgJiYgY3VycmVudFN0b3JhZ2VDb250ZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zaWRlIGEgYnJvd3NlciBjb250ZXh0LCBgc2lnbk91dCgpYCB3aWxsIHJlbW92ZSB0aGUgbG9nZ2VkIGluIHVzZXIgZnJvbSB0aGUgYnJvd3NlciBzZXNzaW9uIGFuZCBsb2cgdGhlbSBvdXQgLSByZW1vdmluZyBhbGwgaXRlbXMgZnJvbSBsb2NhbHN0b3JhZ2UgYW5kIHRoZW4gdHJpZ2dlciBhIGBcIlNJR05FRF9PVVRcImAgZXZlbnQuXG4gICAgICpcbiAgICAgKiBGb3Igc2VydmVyLXNpZGUgbWFuYWdlbWVudCwgeW91IGNhbiByZXZva2UgYWxsIHJlZnJlc2ggdG9rZW5zIGZvciBhIHVzZXIgYnkgcGFzc2luZyBhIHVzZXIncyBKV1QgdGhyb3VnaCB0byBgYXV0aC5hcGkuc2lnbk91dChKV1Q6IHN0cmluZylgLlxuICAgICAqIFRoZXJlIGlzIG5vIHdheSB0byByZXZva2UgYSB1c2VyJ3MgYWNjZXNzIHRva2VuIGp3dCB1bnRpbCBpdCBleHBpcmVzLiBJdCBpcyByZWNvbW1lbmRlZCB0byBzZXQgYSBzaG9ydGVyIGV4cGlyeSBvbiB0aGUgand0IGZvciB0aGlzIHJlYXNvbi5cbiAgICAgKlxuICAgICAqIElmIHVzaW5nIGBvdGhlcnNgIHNjb3BlLCBubyBgU0lHTkVEX09VVGAgZXZlbnQgaXMgZmlyZWQhXG4gICAgICovXG4gICAgYXN5bmMgc2lnbk91dChvcHRpb25zID0geyBzY29wZTogJ2dsb2JhbCcgfSkge1xuICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVQcm9taXNlO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9zaWduT3V0KG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX3NpZ25PdXQoeyBzY29wZSB9ID0geyBzY29wZTogJ2dsb2JhbCcgfSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yOiBzZXNzaW9uRXJyb3IgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChzZXNzaW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvcjogc2Vzc2lvbkVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IChfYSA9IGRhdGEuc2Vzc2lvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgIGlmIChhY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHRoaXMuYWRtaW4uc2lnbk91dChhY2Nlc3NUb2tlbiwgc2NvcGUpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgNDA0cyBzaW5jZSB1c2VyIG1pZ2h0IG5vdCBleGlzdCBhbnltb3JlXG4gICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSA0MDFzIHNpbmNlIGFuIGludmFsaWQgb3IgZXhwaXJlZCBKV1Qgc2hvdWxkIHNpZ24gb3V0IHRoZSBjdXJyZW50IHNlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaXNBdXRoQXBpRXJyb3IoZXJyb3IpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoZXJyb3Iuc3RhdHVzID09PSA0MDQgfHwgZXJyb3Iuc3RhdHVzID09PSA0MDEgfHwgZXJyb3Iuc3RhdHVzID09PSA0MDMpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzY29wZSAhPT0gJ290aGVycycpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9yZW1vdmVTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgcmVtb3ZlSXRlbUFzeW5jKHRoaXMuc3RvcmFnZSwgYCR7dGhpcy5zdG9yYWdlS2V5fS1jb2RlLXZlcmlmaWVyYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVjZWl2ZSBhIG5vdGlmaWNhdGlvbiBldmVyeSB0aW1lIGFuIGF1dGggZXZlbnQgaGFwcGVucy5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBpbnZva2VkIHdoZW4gYW4gYXV0aCBldmVudCBoYXBwZW5zLlxuICAgICAqL1xuICAgIG9uQXV0aFN0YXRlQ2hhbmdlKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdXVpZCgpO1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgdW5zdWJzY3JpYmU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI3Vuc3Vic2NyaWJlKCknLCAnc3RhdGUgY2hhbmdlIGNhbGxiYWNrIHdpdGggaWQgcmVtb3ZlZCcsIGlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlRW1pdHRlcnMuZGVsZXRlKGlkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2RlYnVnKCcjb25BdXRoU3RhdGVDaGFuZ2UoKScsICdyZWdpc3RlcmVkIGNhbGxiYWNrIHdpdGggaWQnLCBpZCk7XG4gICAgICAgIHRoaXMuc3RhdGVDaGFuZ2VFbWl0dGVycy5zZXQoaWQsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVQcm9taXNlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0SW5pdGlhbFNlc3Npb24oaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHJldHVybiB7IGRhdGE6IHsgc3Vic2NyaXB0aW9uIH0gfTtcbiAgICB9XG4gICAgYXN5bmMgX2VtaXRJbml0aWFsU2Vzc2lvbihpZCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGE6IHsgc2Vzc2lvbiB9LCBlcnJvciwgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIGF3YWl0ICgoX2EgPSB0aGlzLnN0YXRlQ2hhbmdlRW1pdHRlcnMuZ2V0KGlkKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGxiYWNrKCdJTklUSUFMX1NFU1NJT04nLCBzZXNzaW9uKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJ0lOSVRJQUxfU0VTU0lPTicsICdjYWxsYmFjayBpZCcsIGlkLCAnc2Vzc2lvbicsIHNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGF3YWl0ICgoX2IgPSB0aGlzLnN0YXRlQ2hhbmdlRW1pdHRlcnMuZ2V0KGlkKSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGxiYWNrKCdJTklUSUFMX1NFU1NJT04nLCBudWxsKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJ0lOSVRJQUxfU0VTU0lPTicsICdjYWxsYmFjayBpZCcsIGlkLCAnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgcGFzc3dvcmQgcmVzZXQgcmVxdWVzdCB0byBhbiBlbWFpbCBhZGRyZXNzLiBUaGlzIG1ldGhvZCBzdXBwb3J0cyB0aGUgUEtDRSBmbG93LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVtYWlsIFRoZSBlbWFpbCBhZGRyZXNzIG9mIHRoZSB1c2VyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnJlZGlyZWN0VG8gVGhlIFVSTCB0byBzZW5kIHRoZSB1c2VyIHRvIGFmdGVyIHRoZXkgY2xpY2sgdGhlIHBhc3N3b3JkIHJlc2V0IGxpbmsuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuY2FwdGNoYVRva2VuIFZlcmlmaWNhdGlvbiB0b2tlbiByZWNlaXZlZCB3aGVuIHRoZSB1c2VyIGNvbXBsZXRlcyB0aGUgY2FwdGNoYSBvbiB0aGUgc2l0ZS5cbiAgICAgKi9cbiAgICBhc3luYyByZXNldFBhc3N3b3JkRm9yRW1haWwoZW1haWwsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgY29kZUNoYWxsZW5nZSA9IG51bGw7XG4gICAgICAgIGxldCBjb2RlQ2hhbGxlbmdlTWV0aG9kID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuZmxvd1R5cGUgPT09ICdwa2NlJykge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgW2NvZGVDaGFsbGVuZ2UsIGNvZGVDaGFsbGVuZ2VNZXRob2RdID0gYXdhaXQgZ2V0Q29kZUNoYWxsZW5nZUFuZE1ldGhvZCh0aGlzLnN0b3JhZ2UsIHRoaXMuc3RvcmFnZUtleSwgdHJ1ZSAvLyBpc1Bhc3N3b3JkUmVjb3ZlcnlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9yZWNvdmVyYCwge1xuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIGNvZGVfY2hhbGxlbmdlOiBjb2RlQ2hhbGxlbmdlLFxuICAgICAgICAgICAgICAgICAgICBjb2RlX2NoYWxsZW5nZV9tZXRob2Q6IGNvZGVDaGFsbGVuZ2VNZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IG9wdGlvbnMuY2FwdGNoYVRva2VuIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogb3B0aW9ucy5yZWRpcmVjdFRvLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIHRoZSBpZGVudGl0aWVzIGxpbmtlZCB0byBhIHVzZXIuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VXNlcklkZW50aXRpZXMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuZ2V0VXNlcigpO1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBpZGVudGl0aWVzOiAoX2EgPSBkYXRhLnVzZXIuaWRlbnRpdGllcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10gfSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlua3MgYW4gb2F1dGggaWRlbnRpdHkgdG8gYW4gZXhpc3RpbmcgdXNlci5cbiAgICAgKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyB0aGUgUEtDRSBmbG93LlxuICAgICAqL1xuICAgIGFzeW5jIGxpbmtJZGVudGl0eShjcmVkZW50aWFscykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCB0aGlzLl91c2VTZXNzaW9uKGFzeW5jIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMuX2dldFVybEZvclByb3ZpZGVyKGAke3RoaXMudXJsfS91c2VyL2lkZW50aXRpZXMvYXV0aG9yaXplYCwgY3JlZGVudGlhbHMucHJvdmlkZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogKF9hID0gY3JlZGVudGlhbHMub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlZGlyZWN0VG8sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlczogKF9iID0gY3JlZGVudGlhbHMub3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNjb3BlcyxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbXM6IChfYyA9IGNyZWRlbnRpYWxzLm9wdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5xdWVyeVBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgc2tpcEJyb3dzZXJSZWRpcmVjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0dFVCcsIHVybCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGp3dDogKF9lID0gKF9kID0gZGF0YS5zZXNzaW9uKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuYWNjZXNzX3Rva2VuKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIGlmIChpc0Jyb3dzZXIoKSAmJiAhKChfYSA9IGNyZWRlbnRpYWxzLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5za2lwQnJvd3NlclJlZGlyZWN0KSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHByb3ZpZGVyOiBjcmVkZW50aWFscy5wcm92aWRlciwgdXJsOiBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEudXJsIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBwcm92aWRlcjogY3JlZGVudGlhbHMucHJvdmlkZXIsIHVybDogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5saW5rcyBhbiBpZGVudGl0eSBmcm9tIGEgdXNlciBieSBkZWxldGluZyBpdC4gVGhlIHVzZXIgd2lsbCBubyBsb25nZXIgYmUgYWJsZSB0byBzaWduIGluIHdpdGggdGhhdCBpZGVudGl0eSBvbmNlIGl0J3MgdW5saW5rZWQuXG4gICAgICovXG4gICAgYXN5bmMgdW5saW5rSWRlbnRpdHkoaWRlbnRpdHkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl91c2VTZXNzaW9uKGFzeW5jIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnREVMRVRFJywgYCR7dGhpcy51cmx9L3VzZXIvaWRlbnRpdGllcy8ke2lkZW50aXR5LmlkZW50aXR5X2lkfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBqd3Q6IChfYiA9IChfYSA9IGRhdGEuc2Vzc2lvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFjY2Vzc190b2tlbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIG5ldyBKV1QuXG4gICAgICogQHBhcmFtIHJlZnJlc2hUb2tlbiBBIHZhbGlkIHJlZnJlc2ggdG9rZW4gdGhhdCB3YXMgcmV0dXJuZWQgb24gbG9naW4uXG4gICAgICovXG4gICAgYXN5bmMgX3JlZnJlc2hBY2Nlc3NUb2tlbihyZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgY29uc3QgZGVidWdOYW1lID0gYCNfcmVmcmVzaEFjY2Vzc1Rva2VuKCR7cmVmcmVzaFRva2VuLnN1YnN0cmluZygwLCA1KX0uLi4pYDtcbiAgICAgICAgdGhpcy5fZGVidWcoZGVidWdOYW1lLCAnYmVnaW4nKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAvLyB3aWxsIGF0dGVtcHQgdG8gcmVmcmVzaCB0aGUgdG9rZW4gd2l0aCBleHBvbmVudGlhbCBiYWNrb2ZmXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcmV0cnlhYmxlKGFzeW5jIChhdHRlbXB0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dGVtcHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwKDIwMCAqIE1hdGgucG93KDIsIGF0dGVtcHQgLSAxKSk7IC8vIDIwMCwgNDAwLCA4MDAsIC4uLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdyZWZyZXNoaW5nIGF0dGVtcHQnLCBhdHRlbXB0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vdG9rZW4/Z3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuYCwge1xuICAgICAgICAgICAgICAgICAgICBib2R5OiB7IHJlZnJlc2hfdG9rZW46IHJlZnJlc2hUb2tlbiB9LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIHhmb3JtOiBfc2Vzc2lvblJlc3BvbnNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgKGF0dGVtcHQsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEJhY2tPZmZJbnRlcnZhbCA9IDIwMCAqIE1hdGgucG93KDIsIGF0dGVtcHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoZXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNBdXRoUmV0cnlhYmxlRmV0Y2hFcnJvcihlcnJvcikgJiZcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0cnlhYmxlIG9ubHkgaWYgdGhlIHJlcXVlc3QgY2FuIGJlIHNlbnQgYmVmb3JlIHRoZSBiYWNrb2ZmIG92ZXJmbG93cyB0aGUgdGljayBkdXJhdGlvblxuICAgICAgICAgICAgICAgICAgICBEYXRlLm5vdygpICsgbmV4dEJhY2tPZmZJbnRlcnZhbCAtIHN0YXJ0ZWRBdCA8IEFVVE9fUkVGUkVTSF9USUNLX0RVUkFUSU9OX01TKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoZGVidWdOYW1lLCAnZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBzZXNzaW9uOiBudWxsLCB1c2VyOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ2VuZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pc1ZhbGlkU2Vzc2lvbihtYXliZVNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgaXNWYWxpZFNlc3Npb24gPSB0eXBlb2YgbWF5YmVTZXNzaW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgbWF5YmVTZXNzaW9uICE9PSBudWxsICYmXG4gICAgICAgICAgICAnYWNjZXNzX3Rva2VuJyBpbiBtYXliZVNlc3Npb24gJiZcbiAgICAgICAgICAgICdyZWZyZXNoX3Rva2VuJyBpbiBtYXliZVNlc3Npb24gJiZcbiAgICAgICAgICAgICdleHBpcmVzX2F0JyBpbiBtYXliZVNlc3Npb247XG4gICAgICAgIHJldHVybiBpc1ZhbGlkU2Vzc2lvbjtcbiAgICB9XG4gICAgYXN5bmMgX2hhbmRsZVByb3ZpZGVyU2lnbkluKHByb3ZpZGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMuX2dldFVybEZvclByb3ZpZGVyKGAke3RoaXMudXJsfS9hdXRob3JpemVgLCBwcm92aWRlciwge1xuICAgICAgICAgICAgcmVkaXJlY3RUbzogb3B0aW9ucy5yZWRpcmVjdFRvLFxuICAgICAgICAgICAgc2NvcGVzOiBvcHRpb25zLnNjb3BlcyxcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zOiBvcHRpb25zLnF1ZXJ5UGFyYW1zLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZGVidWcoJyNfaGFuZGxlUHJvdmlkZXJTaWduSW4oKScsICdwcm92aWRlcicsIHByb3ZpZGVyLCAnb3B0aW9ucycsIG9wdGlvbnMsICd1cmwnLCB1cmwpO1xuICAgICAgICAvLyB0cnkgdG8gb3BlbiBvbiB0aGUgYnJvd3NlclxuICAgICAgICBpZiAoaXNCcm93c2VyKCkgJiYgIW9wdGlvbnMuc2tpcEJyb3dzZXJSZWRpcmVjdCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRhdGE6IHsgcHJvdmlkZXIsIHVybCB9LCBlcnJvcjogbnVsbCB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWNvdmVycyB0aGUgc2Vzc2lvbiBmcm9tIExvY2FsU3RvcmFnZSBhbmQgcmVmcmVzaGVzIHRoZSB0b2tlblxuICAgICAqIE5vdGU6IHRoaXMgbWV0aG9kIGlzIGFzeW5jIHRvIGFjY29tbW9kYXRlIGZvciBBc3luY1N0b3JhZ2UgZS5nLiBpbiBSZWFjdCBuYXRpdmUuXG4gICAgICovXG4gICAgYXN5bmMgX3JlY292ZXJBbmRSZWZyZXNoKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGRlYnVnTmFtZSA9ICcjX3JlY292ZXJBbmRSZWZyZXNoKCknO1xuICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdiZWdpbicpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFNlc3Npb24gPSBhd2FpdCBnZXRJdGVtQXN5bmModGhpcy5zdG9yYWdlLCB0aGlzLnN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoZGVidWdOYW1lLCAnc2Vzc2lvbiBmcm9tIHN0b3JhZ2UnLCBjdXJyZW50U2Vzc2lvbik7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVmFsaWRTZXNzaW9uKGN1cnJlbnRTZXNzaW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ3Nlc3Npb24gaXMgbm90IHZhbGlkJyk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTZXNzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3JlbW92ZVNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZXhwaXJlc1dpdGhNYXJnaW4gPSAoKF9hID0gY3VycmVudFNlc3Npb24uZXhwaXJlc19hdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogSW5maW5pdHkpICogMTAwMCAtIERhdGUubm93KCkgPCBFWFBJUllfTUFSR0lOX01TO1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoZGVidWdOYW1lLCBgc2Vzc2lvbiBoYXMke2V4cGlyZXNXaXRoTWFyZ2luID8gJycgOiAnIG5vdCd9IGV4cGlyZWQgd2l0aCBtYXJnaW4gb2YgJHtFWFBJUllfTUFSR0lOX01TfXNgKTtcbiAgICAgICAgICAgIGlmIChleHBpcmVzV2l0aE1hcmdpbikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dG9SZWZyZXNoVG9rZW4gJiYgY3VycmVudFNlc3Npb24ucmVmcmVzaF90b2tlbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCB0aGlzLl9jYWxsUmVmcmVzaFRva2VuKGN1cnJlbnRTZXNzaW9uLnJlZnJlc2hfdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0F1dGhSZXRyeWFibGVGZXRjaEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ3JlZnJlc2ggZmFpbGVkIHdpdGggYSBub24tcmV0cnlhYmxlIGVycm9yLCByZW1vdmluZyB0aGUgc2Vzc2lvbicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9yZW1vdmVTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBubyBuZWVkIHRvIHBlcnNpc3QgY3VycmVudFNlc3Npb24gYWdhaW4sIGFzIHdlIGp1c3QgbG9hZGVkIGl0IGZyb21cbiAgICAgICAgICAgICAgICAvLyBsb2NhbCBzdG9yYWdlOyBwZXJzaXN0aW5nIGl0IGFnYWluIG1heSBvdmVyd3JpdGUgYSB2YWx1ZSBzYXZlZCBieVxuICAgICAgICAgICAgICAgIC8vIGFub3RoZXIgY2xpZW50IHdpdGggYWNjZXNzIHRvIHRoZSBzYW1lIGxvY2FsIHN0b3JhZ2VcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycygnU0lHTkVEX0lOJywgY3VycmVudFNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ2VuZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9jYWxsUmVmcmVzaFRva2VuKHJlZnJlc2hUb2tlbikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoIXJlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVmcmVzaGluZyBpcyBhbHJlYWR5IGluIHByb2dyZXNzXG4gICAgICAgIGlmICh0aGlzLnJlZnJlc2hpbmdEZWZlcnJlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaGluZ0RlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVidWdOYW1lID0gYCNfY2FsbFJlZnJlc2hUb2tlbigke3JlZnJlc2hUb2tlbi5zdWJzdHJpbmcoMCwgNSl9Li4uKWA7XG4gICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ2JlZ2luJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hpbmdEZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgdGhpcy5fcmVmcmVzaEFjY2Vzc1Rva2VuKHJlZnJlc2hUb2tlbik7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICBpZiAoIWRhdGEuc2Vzc2lvbilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmVTZXNzaW9uKGRhdGEuc2Vzc2lvbik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycygnVE9LRU5fUkVGUkVTSEVEJywgZGF0YS5zZXNzaW9uKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgc2Vzc2lvbjogZGF0YS5zZXNzaW9uLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoaW5nRGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgc2Vzc2lvbjogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3JlbW92ZVNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5yZWZyZXNoaW5nRGVmZXJyZWQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChfYiA9IHRoaXMucmVmcmVzaGluZ0RlZmVycmVkKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoaW5nRGVmZXJyZWQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoZGVidWdOYW1lLCAnZW5kJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX25vdGlmeUFsbFN1YnNjcmliZXJzKGV2ZW50LCBzZXNzaW9uLCBicm9hZGNhc3QgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGRlYnVnTmFtZSA9IGAjX25vdGlmeUFsbFN1YnNjcmliZXJzKCR7ZXZlbnR9KWA7XG4gICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ2JlZ2luJywgc2Vzc2lvbiwgYGJyb2FkY2FzdCA9ICR7YnJvYWRjYXN0fWApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYnJvYWRjYXN0Q2hhbm5lbCAmJiBicm9hZGNhc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwucG9zdE1lc3NhZ2UoeyBldmVudCwgc2Vzc2lvbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBBcnJheS5mcm9tKHRoaXMuc3RhdGVDaGFuZ2VFbWl0dGVycy52YWx1ZXMoKSkubWFwKGFzeW5jICh4KSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgeC5jYWxsYmFjayhldmVudCwgc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcnNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcnNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdlbmQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBzZXQgY3VycmVudFNlc3Npb24gYW5kIGN1cnJlbnRVc2VyXG4gICAgICogcHJvY2VzcyB0byBfc3RhcnRBdXRvUmVmcmVzaFRva2VuIGlmIHBvc3NpYmxlXG4gICAgICovXG4gICAgYXN5bmMgX3NhdmVTZXNzaW9uKHNlc3Npb24pIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJyNfc2F2ZVNlc3Npb24oKScsIHNlc3Npb24pO1xuICAgICAgICAvLyBfc2F2ZVNlc3Npb24gaXMgYWx3YXlzIGNhbGxlZCB3aGVuZXZlciBhIG5ldyBzZXNzaW9uIGhhcyBiZWVuIGFjcXVpcmVkXG4gICAgICAgIC8vIHNvIHdlIGNhbiBzYWZlbHkgc3VwcHJlc3MgdGhlIHdhcm5pbmcgcmV0dXJuZWQgYnkgZnV0dXJlIGdldFNlc3Npb24gY2FsbHNcbiAgICAgICAgdGhpcy5zdXBwcmVzc0dldFNlc3Npb25XYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgc2V0SXRlbUFzeW5jKHRoaXMuc3RvcmFnZSwgdGhpcy5zdG9yYWdlS2V5LCBzZXNzaW9uKTtcbiAgICB9XG4gICAgYXN5bmMgX3JlbW92ZVNlc3Npb24oKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnKCcjX3JlbW92ZVNlc3Npb24oKScpO1xuICAgICAgICBhd2FpdCByZW1vdmVJdGVtQXN5bmModGhpcy5zdG9yYWdlLCB0aGlzLnN0b3JhZ2VLZXkpO1xuICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycygnU0lHTkVEX09VVCcsIG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFueSByZWdpc3RlcmVkIHZpc2liaWxpdHljaGFuZ2UgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiB7QHNlZSAjc3RhcnRBdXRvUmVmcmVzaH1cbiAgICAgKiB7QHNlZSAjc3RvcEF1dG9SZWZyZXNofVxuICAgICAqL1xuICAgIF9yZW1vdmVWaXNpYmlsaXR5Q2hhbmdlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLl9kZWJ1ZygnI19yZW1vdmVWaXNpYmlsaXR5Q2hhbmdlZENhbGxiYWNrKCknKTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzLnZpc2liaWxpdHlDaGFuZ2VkQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMudmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgaXNCcm93c2VyKCkgJiYgKHdpbmRvdyA9PT0gbnVsbCB8fCB3aW5kb3cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdyZW1vdmluZyB2aXNpYmlsaXR5Y2hhbmdlIGNhbGxiYWNrIGZhaWxlZCcsIGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIHByaXZhdGUgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rICNzdGFydEF1dG9SZWZyZXNofS4gVXNlIHRoaXNcbiAgICAgKiB3aXRoaW4gdGhlIGxpYnJhcnkuXG4gICAgICovXG4gICAgYXN5bmMgX3N0YXJ0QXV0b1JlZnJlc2goKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3N0b3BBdXRvUmVmcmVzaCgpO1xuICAgICAgICB0aGlzLl9kZWJ1ZygnI19zdGFydEF1dG9SZWZyZXNoKCknKTtcbiAgICAgICAgY29uc3QgdGlja2VyID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5fYXV0b1JlZnJlc2hUb2tlblRpY2soKSwgQVVUT19SRUZSRVNIX1RJQ0tfRFVSQVRJT05fTVMpO1xuICAgICAgICB0aGlzLmF1dG9SZWZyZXNoVGlja2VyID0gdGlja2VyO1xuICAgICAgICBpZiAodGlja2VyICYmIHR5cGVvZiB0aWNrZXIgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0aWNrZXIudW5yZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIHRpY2tlciBpcyBhIE5vZGVKUyBUaW1lb3V0IG9iamVjdCB0aGF0IGhhcyBhbiBgdW5yZWZgIG1ldGhvZFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS90aW1lcnMuaHRtbCN0aW1lb3V0dW5yZWZcbiAgICAgICAgICAgIC8vIFdoZW4gYXV0byByZWZyZXNoIGlzIHVzZWQgaW4gTm9kZUpTIChsaWtlIGZvciB0ZXN0aW5nKSB0aGVcbiAgICAgICAgICAgIC8vIGBzZXRJbnRlcnZhbGAgaXMgcHJldmVudGluZyB0aGUgcHJvY2VzcyBmcm9tIGJlaW5nIG1hcmtlZCBhc1xuICAgICAgICAgICAgLy8gZmluaXNoZWQgYW5kIHRlc3RzIHJ1biBlbmRsZXNzbHkuIFRoaXMgY2FuIGJlIHByZXZlbnRlZCBieSBjYWxsaW5nXG4gICAgICAgICAgICAvLyBgdW5yZWYoKWAgb24gdGhlIHJldHVybmVkIG9iamVjdC5cbiAgICAgICAgICAgIHRpY2tlci51bnJlZigpO1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUUyBoYXMgbm8gY29udGV4dCBvZiBEZW5vXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIERlbm8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBEZW5vLnVucmVmVGltZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIHNpbWlsYXIgbGlrZSBmb3IgTm9kZUpTLCBidXQgd2l0aCB0aGUgRGVubyBBUElcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGVuby5sYW5kL2FwaUBsYXRlc3Q/dW5zdGFibGUmcz1EZW5vLnVucmVmVGltZXJcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgaGFzIG5vIGNvbnRleHQgb2YgRGVub1xuICAgICAgICAgICAgRGVuby51bnJlZlRpbWVyKHRpY2tlcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcnVuIHRoZSB0aWNrIGltbWVkaWF0ZWx5LCBidXQgaW4gdGhlIG5leHQgcGFzcyBvZiB0aGUgZXZlbnQgbG9vcCBzbyB0aGF0XG4gICAgICAgIC8vICNfaW5pdGlhbGl6ZSBjYW4gYmUgYWxsb3dlZCB0byBjb21wbGV0ZSB3aXRob3V0IHJlY3Vyc2l2ZWx5IHdhaXRpbmcgb25cbiAgICAgICAgLy8gaXRzZWxmXG4gICAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUHJvbWlzZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2F1dG9SZWZyZXNoVG9rZW5UaWNrKCk7XG4gICAgICAgIH0sIDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHRoZSBwcml2YXRlIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayAjc3RvcEF1dG9SZWZyZXNofS4gVXNlIHRoaXNcbiAgICAgKiB3aXRoaW4gdGhlIGxpYnJhcnkuXG4gICAgICovXG4gICAgYXN5bmMgX3N0b3BBdXRvUmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJyNfc3RvcEF1dG9SZWZyZXNoKCknKTtcbiAgICAgICAgY29uc3QgdGlja2VyID0gdGhpcy5hdXRvUmVmcmVzaFRpY2tlcjtcbiAgICAgICAgdGhpcy5hdXRvUmVmcmVzaFRpY2tlciA9IG51bGw7XG4gICAgICAgIGlmICh0aWNrZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGlja2VyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgYW4gYXV0by1yZWZyZXNoIHByb2Nlc3MgaW4gdGhlIGJhY2tncm91bmQuIFRoZSBzZXNzaW9uIGlzIGNoZWNrZWRcbiAgICAgKiBldmVyeSBmZXcgc2Vjb25kcy4gQ2xvc2UgdG8gdGhlIHRpbWUgb2YgZXhwaXJhdGlvbiBhIHByb2Nlc3MgaXMgc3RhcnRlZCB0b1xuICAgICAqIHJlZnJlc2ggdGhlIHNlc3Npb24uIElmIHJlZnJlc2hpbmcgZmFpbHMgaXQgd2lsbCBiZSByZXRyaWVkIGZvciBhcyBsb25nIGFzXG4gICAgICogbmVjZXNzYXJ5LlxuICAgICAqXG4gICAgICogSWYgeW91IHNldCB0aGUge0BsaW5rIEdvVHJ1ZUNsaWVudE9wdGlvbnMjYXV0b1JlZnJlc2hUb2tlbn0geW91IGRvbid0IG5lZWRcbiAgICAgKiB0byBjYWxsIHRoaXMgZnVuY3Rpb24sIGl0IHdpbGwgYmUgY2FsbGVkIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBPbiBicm93c2VycyB0aGUgcmVmcmVzaCBwcm9jZXNzIHdvcmtzIG9ubHkgd2hlbiB0aGUgdGFiL3dpbmRvdyBpcyBpbiB0aGVcbiAgICAgKiBmb3JlZ3JvdW5kIHRvIGNvbnNlcnZlIHJlc291cmNlcyBhcyB3ZWxsIGFzIHByZXZlbnQgcmFjZSBjb25kaXRpb25zIGFuZFxuICAgICAqIGZsb29kaW5nIGF1dGggd2l0aCByZXF1ZXN0cy4gSWYgeW91IGNhbGwgdGhpcyBtZXRob2QgYW55IG1hbmFnZWRcbiAgICAgKiB2aXNpYmlsaXR5IGNoYW5nZSBjYWxsYmFjayB3aWxsIGJlIHJlbW92ZWQgYW5kIHlvdSBtdXN0IG1hbmFnZSB2aXNpYmlsaXR5XG4gICAgICogY2hhbmdlcyBvbiB5b3VyIG93bi5cbiAgICAgKlxuICAgICAqIE9uIG5vbi1icm93c2VyIHBsYXRmb3JtcyB0aGUgcmVmcmVzaCBwcm9jZXNzIHdvcmtzICpjb250aW51b3VzbHkqIGluIHRoZVxuICAgICAqIGJhY2tncm91bmQsIHdoaWNoIG1heSBub3QgYmUgZGVzaXJhYmxlLiBZb3Ugc2hvdWxkIGhvb2sgaW50byB5b3VyXG4gICAgICogcGxhdGZvcm0ncyBmb3JlZ3JvdW5kIGluZGljYXRpb24gbWVjaGFuaXNtIGFuZCBjYWxsIHRoZXNlIG1ldGhvZHNcbiAgICAgKiBhcHByb3ByaWF0ZWx5IHRvIGNvbnNlcnZlIHJlc291cmNlcy5cbiAgICAgKlxuICAgICAqIHtAc2VlICNzdG9wQXV0b1JlZnJlc2h9XG4gICAgICovXG4gICAgYXN5bmMgc3RhcnRBdXRvUmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlVmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjaygpO1xuICAgICAgICBhd2FpdCB0aGlzLl9zdGFydEF1dG9SZWZyZXNoKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3BzIGFuIGFjdGl2ZSBhdXRvIHJlZnJlc2ggcHJvY2VzcyBydW5uaW5nIGluIHRoZSBiYWNrZ3JvdW5kIChpZiBhbnkpLlxuICAgICAqXG4gICAgICogSWYgeW91IGNhbGwgdGhpcyBtZXRob2QgYW55IG1hbmFnZWQgdmlzaWJpbGl0eSBjaGFuZ2UgY2FsbGJhY2sgd2lsbCBiZVxuICAgICAqIHJlbW92ZWQgYW5kIHlvdSBtdXN0IG1hbmFnZSB2aXNpYmlsaXR5IGNoYW5nZXMgb24geW91ciBvd24uXG4gICAgICpcbiAgICAgKiBTZWUge0BsaW5rICNzdGFydEF1dG9SZWZyZXNofSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqL1xuICAgIGFzeW5jIHN0b3BBdXRvUmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlVmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjaygpO1xuICAgICAgICBhd2FpdCB0aGlzLl9zdG9wQXV0b1JlZnJlc2goKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUnVucyB0aGUgYXV0byByZWZyZXNoIHRva2VuIHRpY2suXG4gICAgICovXG4gICAgYXN5bmMgX2F1dG9SZWZyZXNoVG9rZW5UaWNrKCkge1xuICAgICAgICB0aGlzLl9kZWJ1ZygnI19hdXRvUmVmcmVzaFRva2VuVGljaygpJywgJ2JlZ2luJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9hY3F1aXJlTG9jaygwLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl91c2VTZXNzaW9uKGFzeW5jIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGE6IHsgc2Vzc2lvbiB9LCB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbiB8fCAhc2Vzc2lvbi5yZWZyZXNoX3Rva2VuIHx8ICFzZXNzaW9uLmV4cGlyZXNfYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfYXV0b1JlZnJlc2hUb2tlblRpY2soKScsICdubyBzZXNzaW9uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2Vzc2lvbiB3aWxsIGV4cGlyZSBpbiB0aGlzIG1hbnkgdGlja3MgKG9yIGhhcyBhbHJlYWR5IGV4cGlyZWQgaWYgPD0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBpcmVzSW5UaWNrcyA9IE1hdGguZmxvb3IoKHNlc3Npb24uZXhwaXJlc19hdCAqIDEwMDAgLSBub3cpIC8gQVVUT19SRUZSRVNIX1RJQ0tfRFVSQVRJT05fTVMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKCcjX2F1dG9SZWZyZXNoVG9rZW5UaWNrKCknLCBgYWNjZXNzIHRva2VuIGV4cGlyZXMgaW4gJHtleHBpcmVzSW5UaWNrc30gdGlja3MsIGEgdGljayBsYXN0cyAke0FVVE9fUkVGUkVTSF9USUNLX0RVUkFUSU9OX01TfW1zLCByZWZyZXNoIHRocmVzaG9sZCBpcyAke0FVVE9fUkVGUkVTSF9USUNLX1RIUkVTSE9MRH0gdGlja3NgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhwaXJlc0luVGlja3MgPD0gQVVUT19SRUZSRVNIX1RJQ0tfVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2NhbGxSZWZyZXNoVG9rZW4oc2Vzc2lvbi5yZWZyZXNoX3Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQXV0byByZWZyZXNoIHRpY2sgZmFpbGVkIHdpdGggZXJyb3IuIFRoaXMgaXMgbGlrZWx5IGEgdHJhbnNpZW50IGVycm9yLicsIGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19hdXRvUmVmcmVzaFRva2VuVGljaygpJywgJ2VuZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZS5pc0FjcXVpcmVUaW1lb3V0IHx8IGUgaW5zdGFuY2VvZiBMb2NrQWNxdWlyZVRpbWVvdXRFcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKCdhdXRvIHJlZnJlc2ggdG9rZW4gdGljayBsb2NrIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBvbiB0aGUgYnJvd3NlciAvIHBsYXRmb3JtLCB3aGljaCBpbi10dXJuIHJ1blxuICAgICAqIGFsZ29yaXRobXMgd2hlbiB0aGUgYnJvd3NlciB3aW5kb3cvdGFiIGFyZSBpbiBmb3JlZ3JvdW5kLiBPbiBub24tYnJvd3NlclxuICAgICAqIHBsYXRmb3JtcyBpdCBhc3N1bWVzIGFsd2F5cyBmb3JlZ3JvdW5kLlxuICAgICAqL1xuICAgIGFzeW5jIF9oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICAgICAgICB0aGlzLl9kZWJ1ZygnI19oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCknKTtcbiAgICAgICAgaWYgKCFpc0Jyb3dzZXIoKSB8fCAhKHdpbmRvdyA9PT0gbnVsbCB8fCB3aW5kb3cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXV0b1JlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgICAgIC8vIGluIG5vbi1icm93c2VyIGVudmlyb25tZW50cyB0aGUgcmVmcmVzaCB0b2tlbiB0aWNrZXIgcnVucyBhbHdheXNcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0QXV0b1JlZnJlc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5Q2hhbmdlZENhbGxiYWNrID0gYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlZChmYWxzZSk7XG4gICAgICAgICAgICB3aW5kb3cgPT09IG51bGwgfHwgd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMudmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjayk7XG4gICAgICAgICAgICAvLyBub3cgaW1tZWRpYXRlbHkgY2FsbCB0aGUgdmlzYmlsaXR5IGNoYW5nZWQgY2FsbGJhY2sgdG8gc2V0dXAgd2l0aCB0aGVcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgdmlzYmlsaXR5IHN0YXRlXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VkKHRydWUpOyAvLyBpbml0aWFsIGNhbGxcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ19oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlJywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHJlZ2lzdGVyZWQgd2l0aCBgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnKWAuXG4gICAgICovXG4gICAgYXN5bmMgX29uVmlzaWJpbGl0eUNoYW5nZWQoY2FsbGVkRnJvbUluaXRpYWxpemUpIHtcbiAgICAgICAgY29uc3QgbWV0aG9kTmFtZSA9IGAjX29uVmlzaWJpbGl0eUNoYW5nZWQoJHtjYWxsZWRGcm9tSW5pdGlhbGl6ZX0pYDtcbiAgICAgICAgdGhpcy5fZGVidWcobWV0aG9kTmFtZSwgJ3Zpc2liaWxpdHlTdGF0ZScsIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSk7XG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXV0b1JlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgICAgIC8vIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzIHRoZSByZWZyZXNoIHRva2VuIHRpY2tlciBydW5zIG9ubHkgb24gZm9jdXNlZCB0YWJzXG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggcHJldmVudHMgcmFjZSBjb25kaXRpb25zXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRBdXRvUmVmcmVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjYWxsZWRGcm9tSW5pdGlhbGl6ZSkge1xuICAgICAgICAgICAgICAgIC8vIGNhbGxlZCB3aGVuIHRoZSB2aXNpYmlsaXR5IGhhcyBjaGFuZ2VkLCBpLmUuIHRoZSBicm93c2VyXG4gICAgICAgICAgICAgICAgLy8gdHJhbnNpdGlvbmVkIGZyb20gaGlkZGVuIC0+IHZpc2libGUgc28gd2UgbmVlZCB0byBzZWUgaWYgdGhlIHNlc3Npb25cbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgYmUgcmVjb3ZlcmVkIGltbWVkaWF0ZWx5Li4uIGJ1dCB0byBkbyB0aGF0IHdlIG5lZWQgdG8gYWNxdWlyZVxuICAgICAgICAgICAgICAgIC8vIHRoZSBsb2NrIGZpcnN0IGFzeW5jaHJvbm91c2x5XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUHJvbWlzZTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlICE9PSAndmlzaWJsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKG1ldGhvZE5hbWUsICdhY3F1aXJlZCB0aGUgbG9jayB0byByZWNvdmVyIHRoZSBzZXNzaW9uLCBidXQgdGhlIGJyb3dzZXIgdmlzaWJpbGl0eVN0YXRlIGlzIG5vIGxvbmdlciB2aXNpYmxlLCBhYm9ydGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmlzaWJpbGl0eSBoYXMgY2hhbmdlZCB3aGlsZSB3YWl0aW5nIGZvciB0aGUgbG9jaywgYWJvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyByZWNvdmVyIHRoZSBzZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3JlY292ZXJBbmRSZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXV0b1JlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0b3BBdXRvUmVmcmVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyB0aGUgcmVsZXZhbnQgbG9naW4gVVJMIGZvciBhIHRoaXJkLXBhcnR5IHByb3ZpZGVyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnJlZGlyZWN0VG8gQSBVUkwgb3IgbW9iaWxlIGFkZHJlc3MgdG8gc2VuZCB0aGUgdXNlciB0byBhZnRlciB0aGV5IGFyZSBjb25maXJtZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc2NvcGVzIEEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2Ygc2NvcGVzIGdyYW50ZWQgdG8gdGhlIE9BdXRoIGFwcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnF1ZXJ5UGFyYW1zIEFuIG9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMgY29udGFpbmluZyBxdWVyeSBwYXJhbWV0ZXJzIGdyYW50ZWQgdG8gdGhlIE9BdXRoIGFwcGxpY2F0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIF9nZXRVcmxGb3JQcm92aWRlcih1cmwsIHByb3ZpZGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IFtgcHJvdmlkZXI9JHtlbmNvZGVVUklDb21wb25lbnQocHJvdmlkZXIpfWBdO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlZGlyZWN0VG8pIHtcbiAgICAgICAgICAgIHVybFBhcmFtcy5wdXNoKGByZWRpcmVjdF90bz0ke2VuY29kZVVSSUNvbXBvbmVudChvcHRpb25zLnJlZGlyZWN0VG8pfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2NvcGVzKSB7XG4gICAgICAgICAgICB1cmxQYXJhbXMucHVzaChgc2NvcGVzPSR7ZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMuc2NvcGVzKX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5mbG93VHlwZSA9PT0gJ3BrY2UnKSB7XG4gICAgICAgICAgICBjb25zdCBbY29kZUNoYWxsZW5nZSwgY29kZUNoYWxsZW5nZU1ldGhvZF0gPSBhd2FpdCBnZXRDb2RlQ2hhbGxlbmdlQW5kTWV0aG9kKHRoaXMuc3RvcmFnZSwgdGhpcy5zdG9yYWdlS2V5KTtcbiAgICAgICAgICAgIGNvbnN0IGZsb3dQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcbiAgICAgICAgICAgICAgICBjb2RlX2NoYWxsZW5nZTogYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGNvZGVDaGFsbGVuZ2UpfWAsXG4gICAgICAgICAgICAgICAgY29kZV9jaGFsbGVuZ2VfbWV0aG9kOiBgJHtlbmNvZGVVUklDb21wb25lbnQoY29kZUNoYWxsZW5nZU1ldGhvZCl9YCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdXJsUGFyYW1zLnB1c2goZmxvd1BhcmFtcy50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnF1ZXJ5UGFyYW1zKSB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMob3B0aW9ucy5xdWVyeVBhcmFtcyk7XG4gICAgICAgICAgICB1cmxQYXJhbXMucHVzaChxdWVyeS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBCcm93c2VyUmVkaXJlY3QpIHtcbiAgICAgICAgICAgIHVybFBhcmFtcy5wdXNoKGBza2lwX2h0dHBfcmVkaXJlY3Q9JHtvcHRpb25zLnNraXBCcm93c2VyUmVkaXJlY3R9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3VybH0/JHt1cmxQYXJhbXMuam9pbignJicpfWA7XG4gICAgfVxuICAgIGFzeW5jIF91bmVucm9sbChwYXJhbXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl91c2VTZXNzaW9uKGFzeW5jIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSwgZXJyb3I6IHNlc3Npb25FcnJvciB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3I6IHNlc3Npb25FcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0RFTEVURScsIGAke3RoaXMudXJsfS9mYWN0b3JzLyR7cGFyYW1zLmZhY3RvcklkfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBqd3Q6IChfYSA9IHNlc3Npb25EYXRhID09PSBudWxsIHx8IHNlc3Npb25EYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZXNzaW9uRGF0YS5zZXNzaW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9lbnJvbGwocGFyYW1zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhLCBlcnJvcjogc2Vzc2lvbkVycm9yIH0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKHNlc3Npb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvcjogc2Vzc2lvbkVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBPYmplY3QuYXNzaWduKHsgZnJpZW5kbHlfbmFtZTogcGFyYW1zLmZyaWVuZGx5TmFtZSwgZmFjdG9yX3R5cGU6IHBhcmFtcy5mYWN0b3JUeXBlIH0sIChwYXJhbXMuZmFjdG9yVHlwZSA9PT0gJ3Bob25lJyA/IHsgcGhvbmU6IHBhcmFtcy5waG9uZSB9IDogeyBpc3N1ZXI6IHBhcmFtcy5pc3N1ZXIgfSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L2ZhY3RvcnNgLCB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgand0OiAoX2EgPSBzZXNzaW9uRGF0YSA9PT0gbnVsbCB8fCBzZXNzaW9uRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2Vzc2lvbkRhdGEuc2Vzc2lvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFjY2Vzc190b2tlbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5mYWN0b3JUeXBlID09PSAndG90cCcgJiYgKChfYiA9IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS50b3RwKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucXJfY29kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50b3RwLnFyX2NvZGUgPSBgZGF0YTppbWFnZS9zdmcreG1sO3V0Zi04LCR7ZGF0YS50b3RwLnFyX2NvZGV9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QHNlZSBHb1RydWVNRkFBcGkjdmVyaWZ5fVxuICAgICAqL1xuICAgIGFzeW5jIF92ZXJpZnkocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSwgZXJyb3I6IHNlc3Npb25FcnJvciB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvcjogc2Vzc2lvbkVycm9yIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vZmFjdG9ycy8ke3BhcmFtcy5mYWN0b3JJZH0vdmVyaWZ5YCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiBwYXJhbXMuY29kZSwgY2hhbGxlbmdlX2lkOiBwYXJhbXMuY2hhbGxlbmdlSWQgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGp3dDogKF9hID0gc2Vzc2lvbkRhdGEgPT09IG51bGwgfHwgc2Vzc2lvbkRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlc3Npb25EYXRhLnNlc3Npb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2F2ZVNlc3Npb24oT2JqZWN0LmFzc2lnbih7IGV4cGlyZXNfYXQ6IE1hdGgucm91bmQoRGF0ZS5ub3coKSAvIDEwMDApICsgZGF0YS5leHBpcmVzX2luIH0sIGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ01GQV9DSEFMTEVOR0VfVkVSSUZJRUQnLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QHNlZSBHb1RydWVNRkFBcGkjY2hhbGxlbmdlfVxuICAgICAqL1xuICAgIGFzeW5jIF9jaGFsbGVuZ2UocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSwgZXJyb3I6IHNlc3Npb25FcnJvciB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvcjogc2Vzc2lvbkVycm9yIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L2ZhY3RvcnMvJHtwYXJhbXMuZmFjdG9ySWR9L2NoYWxsZW5nZWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgY2hhbm5lbDogcGFyYW1zLmNoYW5uZWwgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGp3dDogKF9hID0gc2Vzc2lvbkRhdGEgPT09IG51bGwgfHwgc2Vzc2lvbkRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlc3Npb25EYXRhLnNlc3Npb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAc2VlIEdvVHJ1ZU1GQUFwaSNjaGFsbGVuZ2VBbmRWZXJpZnl9XG4gICAgICovXG4gICAgYXN5bmMgX2NoYWxsZW5nZUFuZFZlcmlmeShwYXJhbXMpIHtcbiAgICAgICAgLy8gYm90aCBfY2hhbGxlbmdlIGFuZCBfdmVyaWZ5IGluZGVwZW5kZW50bHkgYWNxdWlyZSB0aGUgbG9jaywgc28gbm8gbmVlZFxuICAgICAgICAvLyB0byBhY3F1aXJlIGl0IGhlcmVcbiAgICAgICAgY29uc3QgeyBkYXRhOiBjaGFsbGVuZ2VEYXRhLCBlcnJvcjogY2hhbGxlbmdlRXJyb3IgfSA9IGF3YWl0IHRoaXMuX2NoYWxsZW5nZSh7XG4gICAgICAgICAgICBmYWN0b3JJZDogcGFyYW1zLmZhY3RvcklkLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGNoYWxsZW5nZUVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvcjogY2hhbGxlbmdlRXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdmVyaWZ5KHtcbiAgICAgICAgICAgIGZhY3RvcklkOiBwYXJhbXMuZmFjdG9ySWQsXG4gICAgICAgICAgICBjaGFsbGVuZ2VJZDogY2hhbGxlbmdlRGF0YS5pZCxcbiAgICAgICAgICAgIGNvZGU6IHBhcmFtcy5jb2RlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BzZWUgR29UcnVlTUZBQXBpI2xpc3RGYWN0b3JzfVxuICAgICAqL1xuICAgIGFzeW5jIF9saXN0RmFjdG9ycygpIHtcbiAgICAgICAgLy8gdXNlICNnZXRVc2VyIGluc3RlYWQgb2YgI19nZXRVc2VyIGFzIHRoZSBmb3JtZXIgYWNxdWlyZXMgYSBsb2NrXG4gICAgICAgIGNvbnN0IHsgZGF0YTogeyB1c2VyIH0sIGVycm9yOiB1c2VyRXJyb3IsIH0gPSBhd2FpdCB0aGlzLmdldFVzZXIoKTtcbiAgICAgICAgaWYgKHVzZXJFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3I6IHVzZXJFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZhY3RvcnMgPSAodXNlciA9PT0gbnVsbCB8fCB1c2VyID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1c2VyLmZhY3RvcnMpIHx8IFtdO1xuICAgICAgICBjb25zdCB0b3RwID0gZmFjdG9ycy5maWx0ZXIoKGZhY3RvcikgPT4gZmFjdG9yLmZhY3Rvcl90eXBlID09PSAndG90cCcgJiYgZmFjdG9yLnN0YXR1cyA9PT0gJ3ZlcmlmaWVkJyk7XG4gICAgICAgIGNvbnN0IHBob25lID0gZmFjdG9ycy5maWx0ZXIoKGZhY3RvcikgPT4gZmFjdG9yLmZhY3Rvcl90eXBlID09PSAncGhvbmUnICYmIGZhY3Rvci5zdGF0dXMgPT09ICd2ZXJpZmllZCcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGFsbDogZmFjdG9ycyxcbiAgICAgICAgICAgICAgICB0b3RwLFxuICAgICAgICAgICAgICAgIHBob25lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QHNlZSBHb1RydWVNRkFBcGkjZ2V0QXV0aGVudGljYXRvckFzc3VyYW5jZUxldmVsfVxuICAgICAqL1xuICAgIGFzeW5jIF9nZXRBdXRoZW50aWNhdG9yQXNzdXJhbmNlTGV2ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3VzZVNlc3Npb24oYXN5bmMgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiB7IHNlc3Npb24gfSwgZXJyb3I6IHNlc3Npb25FcnJvciwgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yOiBzZXNzaW9uRXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGN1cnJlbnRMZXZlbDogbnVsbCwgbmV4dExldmVsOiBudWxsLCBjdXJyZW50QXV0aGVudGljYXRpb25NZXRob2RzOiBbXSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gZGVjb2RlSldUKHNlc3Npb24uYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudExldmVsID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5hYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudExldmVsID0gcGF5bG9hZC5hYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBuZXh0TGV2ZWwgPSBjdXJyZW50TGV2ZWw7XG4gICAgICAgICAgICAgICAgY29uc3QgdmVyaWZpZWRGYWN0b3JzID0gKF9iID0gKF9hID0gc2Vzc2lvbi51c2VyLmZhY3RvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maWx0ZXIoKGZhY3RvcikgPT4gZmFjdG9yLnN0YXR1cyA9PT0gJ3ZlcmlmaWVkJykpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xuICAgICAgICAgICAgICAgIGlmICh2ZXJpZmllZEZhY3RvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0TGV2ZWwgPSAnYWFsMic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBdXRoZW50aWNhdGlvbk1ldGhvZHMgPSBwYXlsb2FkLmFtciB8fCBbXTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IGN1cnJlbnRMZXZlbCwgbmV4dExldmVsLCBjdXJyZW50QXV0aGVudGljYXRpb25NZXRob2RzIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGZldGNoSndrKGtpZCwgandrcyA9IHsga2V5czogW10gfSkge1xuICAgICAgICAvLyB0cnkgZmV0Y2hpbmcgZnJvbSB0aGUgc3VwcGxpZWQgandrc1xuICAgICAgICBsZXQgandrID0gandrcy5rZXlzLmZpbmQoKGtleSkgPT4ga2V5LmtpZCA9PT0ga2lkKTtcbiAgICAgICAgaWYgKGp3aykge1xuICAgICAgICAgICAgcmV0dXJuIGp3aztcbiAgICAgICAgfVxuICAgICAgICAvLyB0cnkgZmV0Y2hpbmcgZnJvbSBjYWNoZVxuICAgICAgICBqd2sgPSB0aGlzLmp3a3Mua2V5cy5maW5kKChrZXkpID0+IGtleS5raWQgPT09IGtpZCk7XG4gICAgICAgIC8vIGp3ayBleGlzdHMgYW5kIGp3a3MgaXNuJ3Qgc3RhbGVcbiAgICAgICAgaWYgKGp3ayAmJiB0aGlzLmp3a3NfY2FjaGVkX2F0ICsgSldLU19UVEwgPiBEYXRlLm5vdygpKSB7XG4gICAgICAgICAgICByZXR1cm4gandrO1xuICAgICAgICB9XG4gICAgICAgIC8vIGp3ayBpc24ndCBjYWNoZWQgaW4gbWVtb3J5IHNvIHdlIG5lZWQgdG8gZmV0Y2ggaXQgZnJvbSB0aGUgd2VsbC1rbm93biBlbmRwb2ludFxuICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnR0VUJywgYCR7dGhpcy51cmx9Ly53ZWxsLWtub3duL2p3a3MuanNvbmAsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkYXRhLmtleXMgfHwgZGF0YS5rZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhJbnZhbGlkSnd0RXJyb3IoJ0pXS1MgaXMgZW1wdHknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmp3a3MgPSBkYXRhO1xuICAgICAgICB0aGlzLmp3a3NfY2FjaGVkX2F0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgLy8gRmluZCB0aGUgc2lnbmluZyBrZXlcbiAgICAgICAgandrID0gZGF0YS5rZXlzLmZpbmQoKGtleSkgPT4ga2V5LmtpZCA9PT0ga2lkKTtcbiAgICAgICAgaWYgKCFqd2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBdXRoSW52YWxpZEp3dEVycm9yKCdObyBtYXRjaGluZyBzaWduaW5nIGtleSBmb3VuZCBpbiBKV0tTJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGp3aztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGV4cGVyaW1lbnRhbCBUaGlzIG1ldGhvZCBtYXkgY2hhbmdlIGluIGZ1dHVyZSB2ZXJzaW9ucy5cbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUgY2xhaW1zIGZyb20gYSBKV1QuIElmIHRoZSBKV1QgaXMgc3ltbWV0cmljIEpXVHMsIGl0IHdpbGwgY2FsbCBnZXRVc2VyKCkgdG8gdmVyaWZ5IGFnYWluc3QgdGhlIHNlcnZlci4gSWYgdGhlIEpXVCBpcyBhc3ltbWV0cmljLCBpdCB3aWxsIGJlIHZlcmlmaWVkIGFnYWluc3QgdGhlIEpXS1MgdXNpbmcgdGhlIFdlYkNyeXB0byBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0Q2xhaW1zKGp3dCwgandrcyA9IHsga2V5czogW10gfSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHRva2VuID0gand0O1xuICAgICAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciB8fCAhZGF0YS5zZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRva2VuID0gZGF0YS5zZXNzaW9uLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgaGVhZGVyLCBwYXlsb2FkLCBzaWduYXR1cmUsIHJhdzogeyBoZWFkZXI6IHJhd0hlYWRlciwgcGF5bG9hZDogcmF3UGF5bG9hZCB9LCB9ID0gZGVjb2RlSldUKHRva2VuKTtcbiAgICAgICAgICAgIC8vIFJlamVjdCBleHBpcmVkIEpXVHNcbiAgICAgICAgICAgIHZhbGlkYXRlRXhwKHBheWxvYWQuZXhwKTtcbiAgICAgICAgICAgIC8vIElmIHN5bW1ldHJpYyBhbGdvcml0aG0gb3IgV2ViQ3J5cHRvIEFQSSBpcyB1bmF2YWlsYWJsZSwgZmFsbGJhY2sgdG8gZ2V0VXNlcigpXG4gICAgICAgICAgICBpZiAoIWhlYWRlci5raWQgfHxcbiAgICAgICAgICAgICAgICBoZWFkZXIuYWxnID09PSAnSFMyNTYnIHx8XG4gICAgICAgICAgICAgICAgISgnY3J5cHRvJyBpbiBnbG9iYWxUaGlzICYmICdzdWJ0bGUnIGluIGdsb2JhbFRoaXMuY3J5cHRvKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHRoaXMuZ2V0VXNlcih0b2tlbik7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBnZXRVc2VyIHN1Y2NlZWRzIHNvIHRoZSBjbGFpbXMgaW4gdGhlIEpXVCBjYW4gYmUgdHJ1c3RlZFxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYWltczogcGF5bG9hZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFsZ29yaXRobSA9IGdldEFsZ29yaXRobShoZWFkZXIuYWxnKTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25pbmdLZXkgPSBhd2FpdCB0aGlzLmZldGNoSndrKGhlYWRlci5raWQsIGp3a3MpO1xuICAgICAgICAgICAgLy8gQ29udmVydCBKV0sgdG8gQ3J5cHRvS2V5XG4gICAgICAgICAgICBjb25zdCBwdWJsaWNLZXkgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgnandrJywgc2lnbmluZ0tleSwgYWxnb3JpdGhtLCB0cnVlLCBbXG4gICAgICAgICAgICAgICAgJ3ZlcmlmeScsXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIC8vIFZlcmlmeSB0aGUgc2lnbmF0dXJlXG4gICAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgY3J5cHRvLnN1YnRsZS52ZXJpZnkoYWxnb3JpdGhtLCBwdWJsaWNLZXksIHNpZ25hdHVyZSwgc3RyaW5nVG9VaW50OEFycmF5KGAke3Jhd0hlYWRlcn0uJHtyYXdQYXlsb2FkfWApKTtcbiAgICAgICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBdXRoSW52YWxpZEp3dEVycm9yKCdJbnZhbGlkIEpXVCBzaWduYXR1cmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHZlcmlmaWNhdGlvbiBzdWNjZWVkcywgZGVjb2RlIGFuZCByZXR1cm4gY2xhaW1zXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhaW1zOiBwYXlsb2FkLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG5Hb1RydWVDbGllbnQubmV4dEluc3RhbmNlSUQgPSAwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R29UcnVlQ2xpZW50LmpzLm1hcCIsImltcG9ydCBHb1RydWVBZG1pbkFwaSBmcm9tICcuL0dvVHJ1ZUFkbWluQXBpJztcbmNvbnN0IEF1dGhBZG1pbkFwaSA9IEdvVHJ1ZUFkbWluQXBpO1xuZXhwb3J0IGRlZmF1bHQgQXV0aEFkbWluQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aEFkbWluQXBpLmpzLm1hcCIsImltcG9ydCBHb1RydWVDbGllbnQgZnJvbSAnLi9Hb1RydWVDbGllbnQnO1xuY29uc3QgQXV0aENsaWVudCA9IEdvVHJ1ZUNsaWVudDtcbmV4cG9ydCBkZWZhdWx0IEF1dGhDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRoQ2xpZW50LmpzLm1hcCIsImltcG9ydCB7IEF1dGhDbGllbnQgfSBmcm9tICdAc3VwYWJhc2UvYXV0aC1qcyc7XG5leHBvcnQgY2xhc3MgU3VwYWJhc2VBdXRoQ2xpZW50IGV4dGVuZHMgQXV0aENsaWVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdXBhYmFzZUF1dGhDbGllbnQuanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyBGdW5jdGlvbnNDbGllbnQgfSBmcm9tICdAc3VwYWJhc2UvZnVuY3Rpb25zLWpzJztcbmltcG9ydCB7IFBvc3RncmVzdENsaWVudCwgfSBmcm9tICdAc3VwYWJhc2UvcG9zdGdyZXN0LWpzJztcbmltcG9ydCB7IFJlYWx0aW1lQ2xpZW50LCB9IGZyb20gJ0BzdXBhYmFzZS9yZWFsdGltZS1qcyc7XG5pbXBvcnQgeyBTdG9yYWdlQ2xpZW50IGFzIFN1cGFiYXNlU3RvcmFnZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdG9yYWdlLWpzJztcbmltcG9ydCB7IERFRkFVTFRfR0xPQkFMX09QVElPTlMsIERFRkFVTFRfREJfT1BUSU9OUywgREVGQVVMVF9BVVRIX09QVElPTlMsIERFRkFVTFRfUkVBTFRJTUVfT1BUSU9OUywgfSBmcm9tICcuL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZmV0Y2hXaXRoQXV0aCB9IGZyb20gJy4vbGliL2ZldGNoJztcbmltcG9ydCB7IGVuc3VyZVRyYWlsaW5nU2xhc2gsIGFwcGx5U2V0dGluZ0RlZmF1bHRzIH0gZnJvbSAnLi9saWIvaGVscGVycyc7XG5pbXBvcnQgeyBTdXBhYmFzZUF1dGhDbGllbnQgfSBmcm9tICcuL2xpYi9TdXBhYmFzZUF1dGhDbGllbnQnO1xuLyoqXG4gKiBTdXBhYmFzZSBDbGllbnQuXG4gKlxuICogQW4gaXNvbW9ycGhpYyBKYXZhc2NyaXB0IGNsaWVudCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBQb3N0Z3Jlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VwYWJhc2VDbGllbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjbGllbnQgZm9yIHVzZSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgKiBAcGFyYW0gc3VwYWJhc2VVcmwgVGhlIHVuaXF1ZSBTdXBhYmFzZSBVUkwgd2hpY2ggaXMgc3VwcGxpZWQgd2hlbiB5b3UgY3JlYXRlIGEgbmV3IHByb2plY3QgaW4geW91ciBwcm9qZWN0IGRhc2hib2FyZC5cbiAgICAgKiBAcGFyYW0gc3VwYWJhc2VLZXkgVGhlIHVuaXF1ZSBTdXBhYmFzZSBLZXkgd2hpY2ggaXMgc3VwcGxpZWQgd2hlbiB5b3UgY3JlYXRlIGEgbmV3IHByb2plY3QgaW4geW91ciBwcm9qZWN0IGRhc2hib2FyZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kYi5zY2hlbWEgWW91IGNhbiBzd2l0Y2ggaW4gYmV0d2VlbiBzY2hlbWFzLiBUaGUgc2NoZW1hIG5lZWRzIHRvIGJlIG9uIHRoZSBsaXN0IG9mIGV4cG9zZWQgc2NoZW1hcyBpbnNpZGUgU3VwYWJhc2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYXV0aC5hdXRvUmVmcmVzaFRva2VuIFNldCB0byBcInRydWVcIiBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlZnJlc2ggdGhlIHRva2VuIGJlZm9yZSBleHBpcmluZy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hdXRoLnBlcnNpc3RTZXNzaW9uIFNldCB0byBcInRydWVcIiBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHNhdmUgdGhlIHVzZXIgc2Vzc2lvbiBpbnRvIGxvY2FsIHN0b3JhZ2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYXV0aC5kZXRlY3RTZXNzaW9uSW5VcmwgU2V0IHRvIFwidHJ1ZVwiIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgZGV0ZWN0cyBPQXV0aCBncmFudHMgaW4gdGhlIFVSTCBhbmQgc2lnbnMgaW4gdGhlIHVzZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMucmVhbHRpbWUgT3B0aW9ucyBwYXNzZWQgYWxvbmcgdG8gcmVhbHRpbWUtanMgY29uc3RydWN0b3IuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZ2xvYmFsLmZldGNoIEEgY3VzdG9tIGZldGNoIGltcGxlbWVudGF0aW9uLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmdsb2JhbC5oZWFkZXJzIEFueSBhZGRpdGlvbmFsIGhlYWRlcnMgdG8gc2VuZCB3aXRoIGVhY2ggbmV0d29yayByZXF1ZXN0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN1cGFiYXNlVXJsLCBzdXBhYmFzZUtleSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgdGhpcy5zdXBhYmFzZVVybCA9IHN1cGFiYXNlVXJsO1xuICAgICAgICB0aGlzLnN1cGFiYXNlS2V5ID0gc3VwYWJhc2VLZXk7XG4gICAgICAgIGlmICghc3VwYWJhc2VVcmwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N1cGFiYXNlVXJsIGlzIHJlcXVpcmVkLicpO1xuICAgICAgICBpZiAoIXN1cGFiYXNlS2V5KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdXBhYmFzZUtleSBpcyByZXF1aXJlZC4nKTtcbiAgICAgICAgY29uc3QgX3N1cGFiYXNlVXJsID0gZW5zdXJlVHJhaWxpbmdTbGFzaChzdXBhYmFzZVVybCk7XG4gICAgICAgIGNvbnN0IGJhc2VVcmwgPSBuZXcgVVJMKF9zdXBhYmFzZVVybCk7XG4gICAgICAgIHRoaXMucmVhbHRpbWVVcmwgPSBuZXcgVVJMKCdyZWFsdGltZS92MScsIGJhc2VVcmwpO1xuICAgICAgICB0aGlzLnJlYWx0aW1lVXJsLnByb3RvY29sID0gdGhpcy5yZWFsdGltZVVybC5wcm90b2NvbC5yZXBsYWNlKCdodHRwJywgJ3dzJyk7XG4gICAgICAgIHRoaXMuYXV0aFVybCA9IG5ldyBVUkwoJ2F1dGgvdjEnLCBiYXNlVXJsKTtcbiAgICAgICAgdGhpcy5zdG9yYWdlVXJsID0gbmV3IFVSTCgnc3RvcmFnZS92MScsIGJhc2VVcmwpO1xuICAgICAgICB0aGlzLmZ1bmN0aW9uc1VybCA9IG5ldyBVUkwoJ2Z1bmN0aW9ucy92MScsIGJhc2VVcmwpO1xuICAgICAgICAvLyBkZWZhdWx0IHN0b3JhZ2Uga2V5IHVzZXMgdGhlIHN1cGFiYXNlIHByb2plY3QgcmVmIGFzIGEgbmFtZXNwYWNlXG4gICAgICAgIGNvbnN0IGRlZmF1bHRTdG9yYWdlS2V5ID0gYHNiLSR7YmFzZVVybC5ob3N0bmFtZS5zcGxpdCgnLicpWzBdfS1hdXRoLXRva2VuYDtcbiAgICAgICAgY29uc3QgREVGQVVMVFMgPSB7XG4gICAgICAgICAgICBkYjogREVGQVVMVF9EQl9PUFRJT05TLFxuICAgICAgICAgICAgcmVhbHRpbWU6IERFRkFVTFRfUkVBTFRJTUVfT1BUSU9OUyxcbiAgICAgICAgICAgIGF1dGg6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9BVVRIX09QVElPTlMpLCB7IHN0b3JhZ2VLZXk6IGRlZmF1bHRTdG9yYWdlS2V5IH0pLFxuICAgICAgICAgICAgZ2xvYmFsOiBERUZBVUxUX0dMT0JBTF9PUFRJT05TLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IGFwcGx5U2V0dGluZ0RlZmF1bHRzKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9LCBERUZBVUxUUyk7XG4gICAgICAgIHRoaXMuc3RvcmFnZUtleSA9IChfYSA9IHNldHRpbmdzLmF1dGguc3RvcmFnZUtleSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IChfYiA9IHNldHRpbmdzLmdsb2JhbC5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB7fTtcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgdGhpcy5hdXRoID0gdGhpcy5faW5pdFN1cGFiYXNlQXV0aENsaWVudCgoX2MgPSBzZXR0aW5ncy5hdXRoKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB7fSwgdGhpcy5oZWFkZXJzLCBzZXR0aW5ncy5nbG9iYWwuZmV0Y2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHNldHRpbmdzLmFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgdGhpcy5hdXRoID0gbmV3IFByb3h5KHt9LCB7XG4gICAgICAgICAgICAgICAgZ2V0OiAoXywgcHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEBzdXBhYmFzZS9zdXBhYmFzZS1qczogU3VwYWJhc2UgQ2xpZW50IGlzIGNvbmZpZ3VyZWQgd2l0aCB0aGUgYWNjZXNzVG9rZW4gb3B0aW9uLCBhY2Nlc3Npbmcgc3VwYWJhc2UuYXV0aC4ke1N0cmluZyhwcm9wKX0gaXMgbm90IHBvc3NpYmxlYCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmV0Y2ggPSBmZXRjaFdpdGhBdXRoKHN1cGFiYXNlS2V5LCB0aGlzLl9nZXRBY2Nlc3NUb2tlbi5iaW5kKHRoaXMpLCBzZXR0aW5ncy5nbG9iYWwuZmV0Y2gpO1xuICAgICAgICB0aGlzLnJlYWx0aW1lID0gdGhpcy5faW5pdFJlYWx0aW1lQ2xpZW50KE9iamVjdC5hc3NpZ24oeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIGFjY2Vzc1Rva2VuOiB0aGlzLl9nZXRBY2Nlc3NUb2tlbi5iaW5kKHRoaXMpIH0sIHNldHRpbmdzLnJlYWx0aW1lKSk7XG4gICAgICAgIHRoaXMucmVzdCA9IG5ldyBQb3N0Z3Jlc3RDbGllbnQobmV3IFVSTCgncmVzdC92MScsIGJhc2VVcmwpLmhyZWYsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIHNjaGVtYTogc2V0dGluZ3MuZGIuc2NoZW1hLFxuICAgICAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXNldHRpbmdzLmFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5Gb3JBdXRoRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VwYWJhc2UgRnVuY3Rpb25zIGFsbG93cyB5b3UgdG8gZGVwbG95IGFuZCBpbnZva2UgZWRnZSBmdW5jdGlvbnMuXG4gICAgICovXG4gICAgZ2V0IGZ1bmN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbnNDbGllbnQodGhpcy5mdW5jdGlvbnNVcmwuaHJlZiwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgY3VzdG9tRmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdXBhYmFzZSBTdG9yYWdlIGFsbG93cyB5b3UgdG8gbWFuYWdlIHVzZXItZ2VuZXJhdGVkIGNvbnRlbnQsIHN1Y2ggYXMgcGhvdG9zIG9yIHZpZGVvcy5cbiAgICAgKi9cbiAgICBnZXQgc3RvcmFnZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdXBhYmFzZVN0b3JhZ2VDbGllbnQodGhpcy5zdG9yYWdlVXJsLmhyZWYsIHRoaXMuaGVhZGVycywgdGhpcy5mZXRjaCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBxdWVyeSBvbiBhIHRhYmxlIG9yIGEgdmlldy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWxhdGlvbiAtIFRoZSB0YWJsZSBvciB2aWV3IG5hbWUgdG8gcXVlcnlcbiAgICAgKi9cbiAgICBmcm9tKHJlbGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3QuZnJvbShyZWxhdGlvbik7XG4gICAgfVxuICAgIC8vIE5PVEU6IHNpZ25hdHVyZXMgbXVzdCBiZSBrZXB0IGluIHN5bmMgd2l0aCBQb3N0Z3Jlc3RDbGllbnQuc2NoZW1hXG4gICAgLyoqXG4gICAgICogU2VsZWN0IGEgc2NoZW1hIHRvIHF1ZXJ5IG9yIHBlcmZvcm0gYW4gZnVuY3Rpb24gKHJwYykgY2FsbC5cbiAgICAgKlxuICAgICAqIFRoZSBzY2hlbWEgbmVlZHMgdG8gYmUgb24gdGhlIGxpc3Qgb2YgZXhwb3NlZCBzY2hlbWFzIGluc2lkZSBTdXBhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY2hlbWEgLSBUaGUgc2NoZW1hIHRvIHF1ZXJ5XG4gICAgICovXG4gICAgc2NoZW1hKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0LnNjaGVtYShzY2hlbWEpO1xuICAgIH1cbiAgICAvLyBOT1RFOiBzaWduYXR1cmVzIG11c3QgYmUga2VwdCBpbiBzeW5jIHdpdGggUG9zdGdyZXN0Q2xpZW50LnJwY1xuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBmdW5jdGlvbiBjYWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIG5hbWUgdG8gY2FsbFxuICAgICAqIEBwYXJhbSBhcmdzIC0gVGhlIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBmdW5jdGlvbiBjYWxsXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBOYW1lZCBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9wdGlvbnMuaGVhZCAtIFdoZW4gc2V0IHRvIGB0cnVlYCwgYGRhdGFgIHdpbGwgbm90IGJlIHJldHVybmVkLlxuICAgICAqIFVzZWZ1bCBpZiB5b3Ugb25seSBuZWVkIHRoZSBjb3VudC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5nZXQgLSBXaGVuIHNldCB0byBgdHJ1ZWAsIHRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aXRoXG4gICAgICogcmVhZC1vbmx5IGFjY2VzcyBtb2RlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmNvdW50IC0gQ291bnQgYWxnb3JpdGhtIHRvIHVzZSB0byBjb3VudCByb3dzIHJldHVybmVkIGJ5IHRoZVxuICAgICAqIGZ1bmN0aW9uLiBPbmx5IGFwcGxpY2FibGUgZm9yIFtzZXQtcmV0dXJuaW5nXG4gICAgICogZnVuY3Rpb25zXShodHRwczovL3d3dy5wb3N0Z3Jlc3FsLm9yZy9kb2NzL2N1cnJlbnQvZnVuY3Rpb25zLXNyZi5odG1sKS5cbiAgICAgKlxuICAgICAqIGBcImV4YWN0XCJgOiBFeGFjdCBidXQgc2xvdyBjb3VudCBhbGdvcml0aG0uIFBlcmZvcm1zIGEgYENPVU5UKCopYCB1bmRlciB0aGVcbiAgICAgKiBob29kLlxuICAgICAqXG4gICAgICogYFwicGxhbm5lZFwiYDogQXBwcm94aW1hdGVkIGJ1dCBmYXN0IGNvdW50IGFsZ29yaXRobS4gVXNlcyB0aGUgUG9zdGdyZXNcbiAgICAgKiBzdGF0aXN0aWNzIHVuZGVyIHRoZSBob29kLlxuICAgICAqXG4gICAgICogYFwiZXN0aW1hdGVkXCJgOiBVc2VzIGV4YWN0IGNvdW50IGZvciBsb3cgbnVtYmVycyBhbmQgcGxhbm5lZCBjb3VudCBmb3IgaGlnaFxuICAgICAqIG51bWJlcnMuXG4gICAgICovXG4gICAgcnBjKGZuLCBhcmdzID0ge30sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0LnJwYyhmbiwgYXJncywgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBSZWFsdGltZSBjaGFubmVsIHdpdGggQnJvYWRjYXN0LCBQcmVzZW5jZSwgYW5kIFBvc3RncmVzIENoYW5nZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBSZWFsdGltZSBjaGFubmVsLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gVGhlIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgUmVhbHRpbWUgY2hhbm5lbC5cbiAgICAgKlxuICAgICAqL1xuICAgIGNoYW5uZWwobmFtZSwgb3B0cyA9IHsgY29uZmlnOiB7fSB9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWx0aW1lLmNoYW5uZWwobmFtZSwgb3B0cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIFJlYWx0aW1lIGNoYW5uZWxzLlxuICAgICAqL1xuICAgIGdldENoYW5uZWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFsdGltZS5nZXRDaGFubmVscygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZXMgYW5kIHJlbW92ZXMgUmVhbHRpbWUgY2hhbm5lbCBmcm9tIFJlYWx0aW1lIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhbHRpbWVDaGFubmVsfSBjaGFubmVsIC0gVGhlIG5hbWUgb2YgdGhlIFJlYWx0aW1lIGNoYW5uZWwuXG4gICAgICpcbiAgICAgKi9cbiAgICByZW1vdmVDaGFubmVsKGNoYW5uZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhbHRpbWUucmVtb3ZlQ2hhbm5lbChjaGFubmVsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmVzIGFuZCByZW1vdmVzIGFsbCBSZWFsdGltZSBjaGFubmVscyBmcm9tIFJlYWx0aW1lIGNsaWVudC5cbiAgICAgKi9cbiAgICByZW1vdmVBbGxDaGFubmVscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhbHRpbWUucmVtb3ZlQWxsQ2hhbm5lbHMoKTtcbiAgICB9XG4gICAgX2dldEFjY2Vzc1Rva2VuKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5hY2Nlc3NUb2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSB5aWVsZCB0aGlzLmF1dGguZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IGRhdGEuc2Vzc2lvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFjY2Vzc190b2tlbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9pbml0U3VwYWJhc2VBdXRoQ2xpZW50KHsgYXV0b1JlZnJlc2hUb2tlbiwgcGVyc2lzdFNlc3Npb24sIGRldGVjdFNlc3Npb25JblVybCwgc3RvcmFnZSwgc3RvcmFnZUtleSwgZmxvd1R5cGUsIGxvY2ssIGRlYnVnLCB9LCBoZWFkZXJzLCBmZXRjaCkge1xuICAgICAgICBjb25zdCBhdXRoSGVhZGVycyA9IHtcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLnN1cGFiYXNlS2V5fWAsXG4gICAgICAgICAgICBhcGlrZXk6IGAke3RoaXMuc3VwYWJhc2VLZXl9YCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdXBhYmFzZUF1dGhDbGllbnQoe1xuICAgICAgICAgICAgdXJsOiB0aGlzLmF1dGhVcmwuaHJlZixcbiAgICAgICAgICAgIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXV0aEhlYWRlcnMpLCBoZWFkZXJzKSxcbiAgICAgICAgICAgIHN0b3JhZ2VLZXk6IHN0b3JhZ2VLZXksXG4gICAgICAgICAgICBhdXRvUmVmcmVzaFRva2VuLFxuICAgICAgICAgICAgcGVyc2lzdFNlc3Npb24sXG4gICAgICAgICAgICBkZXRlY3RTZXNzaW9uSW5VcmwsXG4gICAgICAgICAgICBzdG9yYWdlLFxuICAgICAgICAgICAgZmxvd1R5cGUsXG4gICAgICAgICAgICBsb2NrLFxuICAgICAgICAgICAgZGVidWcsXG4gICAgICAgICAgICBmZXRjaCxcbiAgICAgICAgICAgIC8vIGF1dGggY2hlY2tzIGlmIHRoZXJlIGlzIGEgY3VzdG9tIGF1dGhvcml6YWl0b24gaGVhZGVyIHVzaW5nIHRoaXMgZmxhZ1xuICAgICAgICAgICAgLy8gc28gaXQga25vd3Mgd2hldGhlciB0byByZXR1cm4gYW4gZXJyb3Igd2hlbiBnZXRVc2VyIGlzIGNhbGxlZCB3aXRoIG5vIHNlc3Npb25cbiAgICAgICAgICAgIGhhc0N1c3RvbUF1dGhvcml6YXRpb25IZWFkZXI6ICdBdXRob3JpemF0aW9uJyBpbiB0aGlzLmhlYWRlcnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaW5pdFJlYWx0aW1lQ2xpZW50KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWFsdGltZUNsaWVudCh0aGlzLnJlYWx0aW1lVXJsLmhyZWYsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgcGFyYW1zOiBPYmplY3QuYXNzaWduKHsgYXBpa2V5OiB0aGlzLnN1cGFiYXNlS2V5IH0sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wYXJhbXMpIH0pKTtcbiAgICB9XG4gICAgX2xpc3RlbkZvckF1dGhFdmVudHMoKSB7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5hdXRoLm9uQXV0aFN0YXRlQ2hhbmdlKChldmVudCwgc2Vzc2lvbikgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlVG9rZW5DaGFuZ2VkKGV2ZW50LCAnQ0xJRU5UJywgc2Vzc2lvbiA9PT0gbnVsbCB8fCBzZXNzaW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZXNzaW9uLmFjY2Vzc190b2tlbik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgX2hhbmRsZVRva2VuQ2hhbmdlZChldmVudCwgc291cmNlLCB0b2tlbikge1xuICAgICAgICBpZiAoKGV2ZW50ID09PSAnVE9LRU5fUkVGUkVTSEVEJyB8fCBldmVudCA9PT0gJ1NJR05FRF9JTicpICYmXG4gICAgICAgICAgICB0aGlzLmNoYW5nZWRBY2Nlc3NUb2tlbiAhPT0gdG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlZEFjY2Vzc1Rva2VuID0gdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZlbnQgPT09ICdTSUdORURfT1VUJykge1xuICAgICAgICAgICAgdGhpcy5yZWFsdGltZS5zZXRBdXRoKCk7XG4gICAgICAgICAgICBpZiAoc291cmNlID09ICdTVE9SQUdFJylcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGguc2lnbk91dCgpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VkQWNjZXNzVG9rZW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdXBhYmFzZUNsaWVudC5qcy5tYXAiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmV4cG9ydCBmdW5jdGlvbiB1dWlkKCkge1xuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlVHJhaWxpbmdTbGFzaCh1cmwpIHtcbiAgICByZXR1cm4gdXJsLmVuZHNXaXRoKCcvJykgPyB1cmwgOiB1cmwgKyAnLyc7XG59XG5leHBvcnQgY29uc3QgaXNCcm93c2VyID0gKCkgPT4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTZXR0aW5nRGVmYXVsdHMob3B0aW9ucywgZGVmYXVsdHMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHsgZGI6IGRiT3B0aW9ucywgYXV0aDogYXV0aE9wdGlvbnMsIHJlYWx0aW1lOiByZWFsdGltZU9wdGlvbnMsIGdsb2JhbDogZ2xvYmFsT3B0aW9ucywgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgeyBkYjogREVGQVVMVF9EQl9PUFRJT05TLCBhdXRoOiBERUZBVUxUX0FVVEhfT1BUSU9OUywgcmVhbHRpbWU6IERFRkFVTFRfUkVBTFRJTUVfT1BUSU9OUywgZ2xvYmFsOiBERUZBVUxUX0dMT0JBTF9PUFRJT05TLCB9ID0gZGVmYXVsdHM7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICBkYjogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0RCX09QVElPTlMpLCBkYk9wdGlvbnMpLFxuICAgICAgICBhdXRoOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQVVUSF9PUFRJT05TKSwgYXV0aE9wdGlvbnMpLFxuICAgICAgICByZWFsdGltZTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1JFQUxUSU1FX09QVElPTlMpLCByZWFsdGltZU9wdGlvbnMpLFxuICAgICAgICBnbG9iYWw6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0dMT0JBTF9PUFRJT05TKSwgZ2xvYmFsT3B0aW9ucyksIHsgaGVhZGVyczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCAoKF9hID0gREVGQVVMVF9HTE9CQUxfT1BUSU9OUyA9PT0gbnVsbCB8fCBERUZBVUxUX0dMT0JBTF9PUFRJT05TID09PSB2b2lkIDAgPyB2b2lkIDAgOiBERUZBVUxUX0dMT0JBTF9PUFRJT05TLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksICgoX2IgPSBnbG9iYWxPcHRpb25zID09PSBudWxsIHx8IGdsb2JhbE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdsb2JhbE9wdGlvbnMuaGVhZGVycykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDoge30pKSB9KSxcbiAgICAgICAgYWNjZXNzVG9rZW46ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsgcmV0dXJuICcnOyB9KSxcbiAgICB9O1xuICAgIGlmIChvcHRpb25zLmFjY2Vzc1Rva2VuKSB7XG4gICAgICAgIHJlc3VsdC5hY2Nlc3NUb2tlbiA9IG9wdGlvbnMuYWNjZXNzVG9rZW47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBoYWNrIGFyb3VuZCBSZXF1aXJlZDw+XG4gICAgICAgIGRlbGV0ZSByZXN1bHQuYWNjZXNzVG9rZW47XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcyc7XG5cbi8vIEN1c3RvbSBzdG9yYWdlIGFkYXB0ZXIgZm9yIENocm9tZSBleHRlbnNpb25cbmNvbnN0IGN1c3RvbVN0b3JhZ2VBZGFwdGVyID0ge1xuICBhc3luYyBnZXRJdGVtKGtleTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KGtleSk7XG4gICAgcmV0dXJuIHJlc3VsdFtrZXldIHx8IG51bGw7XG4gIH0sXG4gIGFzeW5jIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBba2V5XTogdmFsdWUgfSk7XG4gIH0sXG4gIGFzeW5jIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoa2V5KTtcbiAgfSxcbn07XG5cbmNvbnN0IHN1cGFiYXNlVXJsID0gJ2h0dHBzOi8vdHBqbnlpeXZweXp6YnpoYWpiamguc3VwYWJhc2UuY28nO1xuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gJ2V5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwYzNNaU9pSnpkWEJoWW1GelpTSXNJbkpsWmlJNkluUndhbTU1YVhsMmNIbDZlbUo2YUdGcVltcG9JaXdpY205c1pTSTZJbUZ1YjI0aUxDSnBZWFFpT2pFM05URTJOREExTlRRc0ltVjRjQ0k2TWpBMk56SXhOalUxTkgwLmNmbEZkSHl0bFRVQV9IX0FQN0UzS3J5OS1TLXh3NDVwSVJvSlF0Zms0QUUnO1xuXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSwge1xuICBhdXRoOiB7XG4gICAgc3RvcmFnZTogY3VzdG9tU3RvcmFnZUFkYXB0ZXIsXG4gICAgYXV0b1JlZnJlc2hUb2tlbjogdHJ1ZSxcbiAgICBwZXJzaXN0U2Vzc2lvbjogdHJ1ZSxcbiAgICBkZXRlY3RTZXNzaW9uSW5Vcmw6IHRydWUsXG4gIH0sXG59KTsgIiwiaW1wb3J0IFN1cGFiYXNlQ2xpZW50IGZyb20gJy4vU3VwYWJhc2VDbGllbnQnO1xuZXhwb3J0ICogZnJvbSAnQHN1cGFiYXNlL2F1dGgtanMnO1xuZXhwb3J0IHsgUG9zdGdyZXN0RXJyb3IsIH0gZnJvbSAnQHN1cGFiYXNlL3Bvc3RncmVzdC1qcyc7XG5leHBvcnQgeyBGdW5jdGlvbnNIdHRwRXJyb3IsIEZ1bmN0aW9uc0ZldGNoRXJyb3IsIEZ1bmN0aW9uc1JlbGF5RXJyb3IsIEZ1bmN0aW9uc0Vycm9yLCBGdW5jdGlvblJlZ2lvbiwgfSBmcm9tICdAc3VwYWJhc2UvZnVuY3Rpb25zLWpzJztcbmV4cG9ydCAqIGZyb20gJ0BzdXBhYmFzZS9yZWFsdGltZS1qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN1cGFiYXNlQ2xpZW50IH0gZnJvbSAnLi9TdXBhYmFzZUNsaWVudCc7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU3VwYWJhc2UgQ2xpZW50LlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlQ2xpZW50ID0gKHN1cGFiYXNlVXJsLCBzdXBhYmFzZUtleSwgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBuZXcgU3VwYWJhc2VDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlS2V5LCBvcHRpb25zKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBzdXBhYmFzZSB9IGZyb20gJy4vc3VwYWJhc2UnO1xuaW1wb3J0IHsgU2F2ZWRMaW5rLCBDb2xsZWN0aW9uLCBTdG9yYWdlRGF0YSwgQ2F0ZWdvcnkgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNsYXNzIFN0b3JhZ2VNYW5hZ2VyIHtcbiAgYXN5bmMgZ2V0RGF0YSgpOiBQcm9taXNlPFN0b3JhZ2VEYXRhPiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSwgZXJyb3I6IHNlc3Npb25FcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgaWYgKHNlc3Npb25FcnJvciB8fCAhc2Vzc2lvbkRhdGEuc2Vzc2lvbikge1xuICAgICAgLy8gTm8gYWN0aXZlIHNlc3Npb24sIHJldHVybiBkZWZhdWx0IGVtcHR5IGRhdGEuXG4gICAgICByZXR1cm4gdGhpcy5nZXREZWZhdWx0RGF0YSgpO1xuICAgIH1cblxuICAgIGNvbnN0IHVzZXIgPSBzZXNzaW9uRGF0YS5zZXNzaW9uLnVzZXI7XG4gICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIGRhdGEgZm9yIHVzZXI6JywgdXNlci5pZCk7XG5cbiAgICBjb25zdCBbbGlua3NSZXMsIGNvbGxlY3Rpb25zUmVzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHN1cGFiYXNlLmZyb20oJ2xpbmtzJykuc2VsZWN0KCcqJykuZXEoJ3VzZXJfaWQnLCB1c2VyLmlkKSxcbiAgICAgIHN1cGFiYXNlLmZyb20oJ2NvbGxlY3Rpb25zJykuc2VsZWN0KCcqJykuZXEoJ3VzZXJfaWQnLCB1c2VyLmlkKVxuICAgIF0pO1xuXG4gICAgaWYgKGxpbmtzUmVzLmVycm9yKSBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBsaW5rczonLCBsaW5rc1Jlcy5lcnJvcik7XG4gICAgaWYgKGNvbGxlY3Rpb25zUmVzLmVycm9yKSBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBjb2xsZWN0aW9uczonLCBjb2xsZWN0aW9uc1Jlcy5lcnJvcik7XG5cbiAgICAvLyBNYXAgZGF0YWJhc2UgZmllbGRzIHRvIFR5cGVTY3JpcHQgY2FtZWxDYXNlXG4gICAgY29uc3QgbGlua3MgPSAobGlua3NSZXMuZGF0YSB8fCBbXSkubWFwKChkYkxpbms6IGFueSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1N0b3JhZ2U6IGdldERhdGEgaGlnaGxpZ2h0cyBmb3IgbGluaycsIGRiTGluay5pZCwgZGJMaW5rLmhpZ2hsaWdodHMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGRiTGluay5pZCxcbiAgICAgICAgdXJsOiBkYkxpbmsudXJsLFxuICAgICAgICB0aXRsZTogZGJMaW5rLnRpdGxlLFxuICAgICAgICBmYXZpY29uOiBkYkxpbmsuZmF2aWNvbixcbiAgICAgICAgdXNlck5vdGU6IGRiTGluay51c2VyX25vdGUgfHwgJycsXG4gICAgICAgIGFpU3VtbWFyeTogZGJMaW5rLmFpX3N1bW1hcnksXG4gICAgICAgIGNhdGVnb3J5OiBkYkxpbmsuY2F0ZWdvcnksXG4gICAgICAgIGNvbGxlY3Rpb25JZDogZGJMaW5rLmNvbGxlY3Rpb25faWQsXG4gICAgICAgIGlzSW5JbmJveDogZGJMaW5rLmlzX2luX2luYm94IHx8IGZhbHNlLFxuICAgICAgICBoaWdobGlnaHRzOiB0aGlzLnBhcnNlSGlnaGxpZ2h0cyhkYkxpbmsuaGlnaGxpZ2h0cyksXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoZGJMaW5rLmNyZWF0ZWRfYXQpLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKGRiTGluay51cGRhdGVkX2F0KSxcbiAgICAgICAgZG9tYWluOiBkYkxpbmsuZG9tYWluLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gKGNvbGxlY3Rpb25zUmVzLmRhdGEgfHwgW10pLm1hcCgoZGJDb2w6IGFueSkgPT4gKHtcbiAgICAgIGlkOiBkYkNvbC5pZCxcbiAgICAgIG5hbWU6IGRiQ29sLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogZGJDb2wuZGVzY3JpcHRpb24sXG4gICAgICBjb2xvcjogZGJDb2wuY29sb3IsXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGRiQ29sLmNyZWF0ZWRfYXQpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZShkYkNvbC51cGRhdGVkX2F0KSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCBkYXRhOiBTdG9yYWdlRGF0YSA9IHtcbiAgICAgIGxpbmtzLFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICBjYXRlZ29yaWVzOiB0aGlzLmdldERlZmF1bHRDYXRlZ29yaWVzKCksXG4gICAgICBzZXR0aW5nczoge1xuICAgICAgICBkZWZhdWx0Q2F0ZWdvcnk6ICdnZW5lcmFsJyxcbiAgICAgICAgYXV0b1N1bW1hcml6ZTogdHJ1ZSxcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coJ0RhdGEgZmV0Y2hlZCBmcm9tIFN1cGFiYXNlOicsIGRhdGEpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIFxuICBhc3luYyBhZGRMaW5rKGxpbms6IE9taXQ8U2F2ZWRMaW5rLCAnaWQnIHwgJ2NyZWF0ZWRBdCcgfCAndXBkYXRlZEF0JyB8ICd1c2VyX2lkJz4pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiwgZXJyb3I/OiBzdHJpbmcsIGxpbmtJZD86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgY29uc3QgdXNlciA9IHNlc3Npb25EYXRhLnNlc3Npb24/LnVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVc2VyIG5vdCBsb2dnZWQgaW4nKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ1VzZXIgbm90IGxvZ2dlZCBpbi4nIH07XG4gICAgfVxuXG4gICAgLy8gTWFwIGNhbWVsQ2FzZSB0byBzbmFrZV9jYXNlIGZvciBkYXRhYmFzZSBpbnNlcnRpb25cbiAgICBjb25zdCBkYkxpbmsgPSB7XG4gICAgICB1c2VyX2lkOiB1c2VyLmlkLFxuICAgICAgY29sbGVjdGlvbl9pZDogbGluay5jb2xsZWN0aW9uSWQgfHwgbnVsbCxcbiAgICAgIHVybDogbGluay51cmwsXG4gICAgICB0aXRsZTogbGluay50aXRsZSxcbiAgICAgIGZhdmljb246IGxpbmsuZmF2aWNvbixcbiAgICAgIGRvbWFpbjogbGluay5kb21haW4sXG4gICAgICB1c2VyX25vdGU6IGxpbmsudXNlck5vdGUsXG4gICAgICBhaV9zdW1tYXJ5OiBsaW5rLmFpU3VtbWFyeSxcbiAgICAgIGNhdGVnb3J5OiBsaW5rLmNhdGVnb3J5LFxuICAgICAgaXNfaW5faW5ib3g6IGxpbmsuaXNJbkluYm94IHx8IGZhbHNlLFxuICAgICAgaGlnaGxpZ2h0czogbGluay5oaWdobGlnaHRzID8gSlNPTi5zdHJpbmdpZnkobGluay5oaWdobGlnaHRzKSA6IG51bGwsXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZygnU3RvcmFnZTogYWRkTGluayBkYkxpbmsuaGlnaGxpZ2h0czonLCBkYkxpbmsuaGlnaGxpZ2h0cyk7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnbGlua3MnKS5pbnNlcnQoZGJMaW5rKS5zZWxlY3QoJ2lkJykuc2luZ2xlKCk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBhZGRMaW5rIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRGF0YWJhc2UgZXJyb3Igb2NjdXJyZWQuJyB9O1xuICAgIH1cbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBsaW5rSWQ6IGRhdGEuaWQgfTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUxpbmsobGlua0lkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8U2F2ZWRMaW5rPik6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIENvbnZlcnQgaGlnaGxpZ2h0cyB0byBKU09OIGZvciBkYXRhYmFzZSBzdG9yYWdlXG4gICAgY29uc3QgZGJVcGRhdGVzOiBhbnkgPSB7IC4uLnVwZGF0ZXMsIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkgfTtcbiAgICBpZiAodXBkYXRlcy5oaWdobGlnaHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRiVXBkYXRlcy5oaWdobGlnaHRzID0gdXBkYXRlcy5oaWdobGlnaHRzID8gSlNPTi5zdHJpbmdpZnkodXBkYXRlcy5oaWdobGlnaHRzKSA6IG51bGw7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBjYW1lbENhc2UgZmllbGRzIHRoYXQgZG9uJ3QgZXhpc3QgaW4gZGF0YWJhc2VcbiAgICBkZWxldGUgZGJVcGRhdGVzLmNvbGxlY3Rpb25JZDtcbiAgICBkZWxldGUgZGJVcGRhdGVzLnVzZXJOb3RlO1xuICAgIGRlbGV0ZSBkYlVwZGF0ZXMuYWlTdW1tYXJ5O1xuICAgIGRlbGV0ZSBkYlVwZGF0ZXMuaXNJbkluYm94O1xuICAgIGRlbGV0ZSBkYlVwZGF0ZXMuY3JlYXRlZEF0O1xuICAgIGRlbGV0ZSBkYlVwZGF0ZXMudXBkYXRlZEF0O1xuICAgIFxuICAgIC8vIE1hcCBjYW1lbENhc2UgdG8gc25ha2VfY2FzZSBmb3IgZGF0YWJhc2UgZmllbGRzXG4gICAgaWYgKHVwZGF0ZXMuY29sbGVjdGlvbklkICE9PSB1bmRlZmluZWQpIGRiVXBkYXRlcy5jb2xsZWN0aW9uX2lkID0gdXBkYXRlcy5jb2xsZWN0aW9uSWQ7XG4gICAgaWYgKHVwZGF0ZXMudXNlck5vdGUgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLnVzZXJfbm90ZSA9IHVwZGF0ZXMudXNlck5vdGU7XG4gICAgaWYgKHVwZGF0ZXMuYWlTdW1tYXJ5ICE9PSB1bmRlZmluZWQpIGRiVXBkYXRlcy5haV9zdW1tYXJ5ID0gdXBkYXRlcy5haVN1bW1hcnk7XG4gICAgaWYgKHVwZGF0ZXMuaXNJbkluYm94ICE9PSB1bmRlZmluZWQpIGRiVXBkYXRlcy5pc19pbl9pbmJveCA9IHVwZGF0ZXMuaXNJbkluYm94O1xuICAgIGNvbnNvbGUubG9nKCdTdG9yYWdlOiB1cGRhdGVMaW5rIGRiVXBkYXRlcy5oaWdobGlnaHRzOicsIGRiVXBkYXRlcy5oaWdobGlnaHRzKTtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdsaW5rcycpLnVwZGF0ZShkYlVwZGF0ZXMpLmVxKCdpZCcsIGxpbmtJZCk7XG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZUxpbmsobGlua0lkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdsaW5rcycpLmRlbGV0ZSgpLmVxKCdpZCcsIGxpbmtJZCk7XG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIGFzeW5jIGFkZENvbGxlY3Rpb24oY29sbGVjdGlvbjogT21pdDxDb2xsZWN0aW9uLCAnaWQnIHwgJ2NyZWF0ZWRBdCcgfCAndXBkYXRlZEF0JyB8ICd1c2VyX2lkJz4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbj8udXNlcjtcbiAgICBpZiAoIXVzZXIpIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgbG9nZ2VkIGluLicpO1xuICAgIFxuICAgIC8vIE1hcCBjYW1lbENhc2UgdG8gc25ha2VfY2FzZSBmb3IgZGF0YWJhc2UgaW5zZXJ0aW9uXG4gICAgY29uc3QgZGJDb2xsZWN0aW9uID0ge1xuICAgICAgdXNlcl9pZDogdXNlci5pZCxcbiAgICAgIG5hbWU6IGNvbGxlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBjb2xsZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgY29sb3I6IGNvbGxlY3Rpb24uY29sb3IsXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdjb2xsZWN0aW9ucycpLmluc2VydChkYkNvbGxlY3Rpb24pO1xuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBhc3luYyB1cGRhdGVDb2xsZWN0aW9uKGNvbGxlY3Rpb25JZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPENvbGxlY3Rpb24+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnY29sbGVjdGlvbnMnKS51cGRhdGUoeyAuLi51cGRhdGVzLCB1cGRhdGVkQXQ6IG5ldyBEYXRlKCkgfSkuZXEoJ2lkJywgY29sbGVjdGlvbklkKTtcbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlQ29sbGVjdGlvbihjb2xsZWN0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIFdlIGNhbiBhZGQgbG9naWMgaGVyZSB0byByZWFzc2lnbiBsaW5rcyBpZiBuZWVkZWQsIGZvciBub3cganVzdCBkZWxldGVcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdjb2xsZWN0aW9ucycpLmRlbGV0ZSgpLmVxKCdpZCcsIGNvbGxlY3Rpb25JZCk7XG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIGFzeW5jIHNlYXJjaExpbmtzKHF1ZXJ5OiBzdHJpbmcpOiBQcm9taXNlPFNhdmVkTGlua1tdPiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgY29uc3QgdXNlciA9IHNlc3Npb25EYXRhLnNlc3Npb24/LnVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVc2VyIG5vdCBsb2dnZWQgaW4nKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBpZiAoIXF1ZXJ5LnRyaW0oKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ3NlYXJjaF91c2VyX2xpbmtzJywge1xuICAgICAgICBzZWFyY2hfcXVlcnk6IHF1ZXJ5LnRyaW0oKSxcbiAgICAgICAgdXNlcl91dWlkOiB1c2VyLmlkLFxuICAgICAgICByZXN1bHRfbGltaXQ6IDUwXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NlYXJjaCBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFwIGRhdGFiYXNlIHJlc3VsdHMgdG8gVHlwZVNjcmlwdCBvYmplY3RzXG4gICAgICByZXR1cm4gKGRhdGEgfHwgW10pLm1hcCgocmVzdWx0OiBhbnkpID0+ICh7XG4gICAgICAgIGlkOiByZXN1bHQuaWQsXG4gICAgICAgIHVybDogcmVzdWx0LnVybCxcbiAgICAgICAgdGl0bGU6IHJlc3VsdC50aXRsZSxcbiAgICAgICAgZmF2aWNvbjogcmVzdWx0LmZhdmljb24sXG4gICAgICAgIHVzZXJOb3RlOiByZXN1bHQudXNlcl9ub3RlIHx8ICcnLFxuICAgICAgICBhaVN1bW1hcnk6IHJlc3VsdC5haV9zdW1tYXJ5LFxuICAgICAgICBjYXRlZ29yeTogcmVzdWx0LmNhdGVnb3J5LFxuICAgICAgICBjb2xsZWN0aW9uSWQ6IHJlc3VsdC5jb2xsZWN0aW9uX2lkLFxuICAgICAgICBpc0luSW5ib3g6IHJlc3VsdC5pc19pbl9pbmJveCB8fCBmYWxzZSxcbiAgICAgICAgaGlnaGxpZ2h0czogdGhpcy5wYXJzZUhpZ2hsaWdodHMocmVzdWx0LmhpZ2hsaWdodHMpLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKHJlc3VsdC5jcmVhdGVkX2F0KSxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZShyZXN1bHQudXBkYXRlZF9hdCksXG4gICAgICAgIGRvbWFpbjogcmVzdWx0LmRvbWFpbixcbiAgICAgICAgLy8gQWRkIHNlYXJjaC1zcGVjaWZpYyBwcm9wZXJ0aWVzXG4gICAgICAgIHNlYXJjaFJhbms6IHJlc3VsdC5yYW5rLFxuICAgICAgICBzZWFyY2hIZWFkbGluZTogcmVzdWx0LmhlYWRsaW5lLFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdTZWFyY2ggZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRVc2VyVGFncygpOiBQcm9taXNlPHsgaWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nOyB1c2FnZUNvdW50OiBudW1iZXIgfVtdPiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgY29uc3QgdXNlciA9IHNlc3Npb25EYXRhLnNlc3Npb24/LnVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVc2VyIG5vdCBsb2dnZWQgaW4nKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UucnBjKCdnZXRfdXNlcl90YWdzX3dpdGhfY291bnRzJywge1xuICAgICAgICB1c2VyX3V1aWQ6IHVzZXIuaWRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciB0YWdzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKGRhdGEgfHwgW10pLm1hcCgodGFnOiBhbnkpID0+ICh7XG4gICAgICAgIGlkOiB0YWcuaWQsXG4gICAgICAgIG5hbWU6IHRhZy5uYW1lLFxuICAgICAgICB1c2FnZUNvdW50OiB0YWcudXNhZ2VfY291bnQgfHwgMFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHVzZXIgdGFnczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0TGlua1RhZ3MobGlua0lkOiBzdHJpbmcpOiBQcm9taXNlPHsgaWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nIH1bXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2dldF9saW5rX3RhZ3MnLCB7XG4gICAgICAgIGxpbmtfdXVpZDogbGlua0lkXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGxpbmsgdGFnczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGEgfHwgW107XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgbGluayB0YWdzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBhZGRUYWdzVG9MaW5rKGxpbmtJZDogc3RyaW5nLCB0YWdOYW1lczogc3RyaW5nW10pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbkRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xuICAgIGNvbnN0IHVzZXIgPSBzZXNzaW9uRGF0YS5zZXNzaW9uPy51c2VyO1xuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnVXNlciBub3QgbG9nZ2VkIGluLicgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UucnBjKCdhZGRfdGFnc190b19saW5rJywge1xuICAgICAgICBsaW5rX3V1aWQ6IGxpbmtJZCxcbiAgICAgICAgdGFnX25hbWVzOiB0YWdOYW1lcyxcbiAgICAgICAgdXNlcl91dWlkOiB1c2VyLmlkXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyB0YWdzIHRvIGxpbms6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBhZGQgdGFncy4nIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGFkZCB0YWdzIHRvIGxpbms6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRMaW5rc0J5VGFnKHRhZ05hbWU6IHN0cmluZyk6IFByb21pc2U8U2F2ZWRMaW5rW10+IHtcbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbj8udXNlcjtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VzZXIgbm90IGxvZ2dlZCBpbicpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2dldF9saW5rc19ieV90YWcnLCB7XG4gICAgICAgIHVzZXJfdXVpZDogdXNlci5pZCxcbiAgICAgICAgdGFnX25hbWU6IHRhZ05hbWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbGlua3MgYnkgdGFnOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICAvLyBNYXAgZGF0YWJhc2UgcmVzdWx0cyB0byBUeXBlU2NyaXB0IG9iamVjdHNcbiAgICAgIHJldHVybiAoZGF0YSB8fCBbXSkubWFwKChkYkxpbms6IGFueSkgPT4gKHtcbiAgICAgICAgaWQ6IGRiTGluay5pZCxcbiAgICAgICAgdXJsOiBkYkxpbmsudXJsLFxuICAgICAgICB0aXRsZTogZGJMaW5rLnRpdGxlLFxuICAgICAgICBmYXZpY29uOiBkYkxpbmsuZmF2aWNvbixcbiAgICAgICAgdXNlck5vdGU6IGRiTGluay51c2VyX25vdGUgfHwgJycsXG4gICAgICAgIGFpU3VtbWFyeTogZGJMaW5rLmFpX3N1bW1hcnksXG4gICAgICAgIGNhdGVnb3J5OiBkYkxpbmsuY2F0ZWdvcnksXG4gICAgICAgIGNvbGxlY3Rpb25JZDogZGJMaW5rLmNvbGxlY3Rpb25faWQsXG4gICAgICAgIGlzSW5JbmJveDogZGJMaW5rLmlzX2luX2luYm94IHx8IGZhbHNlLFxuICAgICAgICBoaWdobGlnaHRzOiB0aGlzLnBhcnNlSGlnaGxpZ2h0cyhkYkxpbmsuaGlnaGxpZ2h0cyksXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoZGJMaW5rLmNyZWF0ZWRfYXQpLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKGRiTGluay51cGRhdGVkX2F0KSxcbiAgICAgICAgZG9tYWluOiBkYkxpbmsuZG9tYWluLFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGxpbmtzIGJ5IHRhZzonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY2xlYW51cFVudXNlZFRhZ3MoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbj8udXNlcjtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2NsZWFudXBfdW51c2VkX3RhZ3MnLCB7XG4gICAgICAgIHVzZXJfdXVpZDogdXNlci5pZFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjbGVhbmluZyB1cCB1bnVzZWQgdGFnczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YSB8fCAwO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY2xlYW51cCB1bnVzZWQgdGFnczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICAvLyBJbmJveC1zcGVjaWZpYyBtZXRob2RzXG4gIGFzeW5jIG1vdmVUb0luYm94KGxpbmtJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdsaW5rcycpXG4gICAgICAudXBkYXRlKHsgXG4gICAgICAgIGlzX2luX2luYm94OiB0cnVlLFxuICAgICAgICBjb2xsZWN0aW9uX2lkOiBudWxsLFxuICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pXG4gICAgICAuZXEoJ2lkJywgbGlua0lkKTtcbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICB9XG5cbiAgYXN5bmMgbW92ZUZyb21JbmJveChsaW5rSWQ6IHN0cmluZywgY29sbGVjdGlvbklkPzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdsaW5rcycpXG4gICAgICAudXBkYXRlKHsgXG4gICAgICAgIGlzX2luX2luYm94OiBmYWxzZSxcbiAgICAgICAgY29sbGVjdGlvbl9pZDogY29sbGVjdGlvbklkIHx8IG51bGwsXG4gICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSlcbiAgICAgIC5lcSgnaWQnLCBsaW5rSWQpO1xuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBhc3luYyBnZXRJbmJveExpbmtzKCk6IFByb21pc2U8U2F2ZWRMaW5rW10+IHtcbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbj8udXNlcjtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2xpbmtzJylcbiAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci5pZClcbiAgICAgIC5lcSgnaXNfaW5faW5ib3gnLCB0cnVlKVxuICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBpbmJveCBsaW5rczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIChkYXRhIHx8IFtdKS5tYXAoKGRiTGluazogYW55KSA9PiAoe1xuICAgICAgaWQ6IGRiTGluay5pZCxcbiAgICAgIHVybDogZGJMaW5rLnVybCxcbiAgICAgIHRpdGxlOiBkYkxpbmsudGl0bGUsXG4gICAgICBmYXZpY29uOiBkYkxpbmsuZmF2aWNvbixcbiAgICAgIHVzZXJOb3RlOiBkYkxpbmsudXNlcl9ub3RlIHx8ICcnLFxuICAgICAgYWlTdW1tYXJ5OiBkYkxpbmsuYWlfc3VtbWFyeSxcbiAgICAgIGNhdGVnb3J5OiBkYkxpbmsuY2F0ZWdvcnksXG4gICAgICBjb2xsZWN0aW9uSWQ6IGRiTGluay5jb2xsZWN0aW9uX2lkLFxuICAgICAgaXNJbkluYm94OiBkYkxpbmsuaXNfaW5faW5ib3ggfHwgZmFsc2UsXG4gICAgICBoaWdobGlnaHRzOiB0aGlzLnBhcnNlSGlnaGxpZ2h0cyhkYkxpbmsuaGlnaGxpZ2h0cyksXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGRiTGluay5jcmVhdGVkX2F0KSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoZGJMaW5rLnVwZGF0ZWRfYXQpLFxuICAgICAgZG9tYWluOiBkYkxpbmsuZG9tYWluLFxuICAgIH0pKTtcbiAgfVxuXG4gIGFzeW5jIGJ1bGtNb3ZlRnJvbUluYm94KGxpbmtJZHM6IHN0cmluZ1tdLCBjb2xsZWN0aW9uSWQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2xpbmtzJylcbiAgICAgIC51cGRhdGUoeyBcbiAgICAgICAgaXNfaW5faW5ib3g6IGZhbHNlLFxuICAgICAgICBjb2xsZWN0aW9uX2lkOiBjb2xsZWN0aW9uSWQgfHwgbnVsbCxcbiAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KVxuICAgICAgLmluKCdpZCcsIGxpbmtJZHMpO1xuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBhc3luYyB0b2dnbGVDb2xsZWN0aW9uU2hhcmluZyhjb2xsZWN0aW9uSWQ6IHN0cmluZywgbWFrZVB1YmxpYzogYm9vbGVhbik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBzaGFyZVRva2VuPzogc3RyaW5nOyBtZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbkRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xuICAgIGNvbnN0IHVzZXIgPSBzZXNzaW9uRGF0YS5zZXNzaW9uPy51c2VyO1xuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdVc2VyIG5vdCBsb2dnZWQgaW4uJyB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ3RvZ2dsZV9jb2xsZWN0aW9uX3NoYXJpbmcnLCB7XG4gICAgICAgIGNvbGxlY3Rpb25fdXVpZDogY29sbGVjdGlvbklkLFxuICAgICAgICB1c2VyX3V1aWQ6IHVzZXIuaWQsXG4gICAgICAgIG1ha2VfcHVibGljOiBtYWtlUHVibGljXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRvZ2dsaW5nIGNvbGxlY3Rpb24gc2hhcmluZzonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gdXBkYXRlIHNoYXJpbmcgc2V0dGluZ3MuJyB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBkYXRhPy5bMF07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiByZXN1bHQ/LnN1Y2Nlc3MgfHwgZmFsc2UsXG4gICAgICAgIHNoYXJlVG9rZW46IHJlc3VsdD8uc2hhcmVfdG9rZW4sXG4gICAgICAgIG1lc3NhZ2U6IHJlc3VsdD8ubWVzc2FnZSB8fCAnU2hhcmluZyBzZXR0aW5ncyB1cGRhdGVkLidcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB0b2dnbGUgY29sbGVjdGlvbiBzaGFyaW5nOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRDb2xsZWN0aW9uU2hhcmluZ0luZm8oY29sbGVjdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHsgaXNQdWJsaWM6IGJvb2xlYW47IHNoYXJlVG9rZW4/OiBzdHJpbmc7IHZpZXdDb3VudDogbnVtYmVyIH0gfCBudWxsPiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgY29uc3QgdXNlciA9IHNlc3Npb25EYXRhLnNlc3Npb24/LnVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2NvbGxlY3Rpb25zJylcbiAgICAgICAgLnNlbGVjdCgnaXNfcHVibGljLCBzaGFyZV90b2tlbiwgdmlld19jb3VudCcpXG4gICAgICAgIC5lcSgnaWQnLCBjb2xsZWN0aW9uSWQpXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXIuaWQpXG4gICAgICAgIC5zaW5nbGUoKTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGNvbGxlY3Rpb24gc2hhcmluZyBpbmZvOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzUHVibGljOiBkYXRhLmlzX3B1YmxpYyB8fCBmYWxzZSxcbiAgICAgICAgc2hhcmVUb2tlbjogZGF0YS5zaGFyZV90b2tlbixcbiAgICAgICAgdmlld0NvdW50OiBkYXRhLnZpZXdfY291bnQgfHwgMFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBjb2xsZWN0aW9uIHNoYXJpbmcgaW5mbzonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBQdWJsaWMgbWV0aG9kcyBmb3Igdmlld2luZyBzaGFyZWQgY29sbGVjdGlvbnMgKG5vIGF1dGggcmVxdWlyZWQpXG4gIHN0YXRpYyBhc3luYyBnZXRQdWJsaWNDb2xsZWN0aW9uKHNoYXJlVG9rZW46IHN0cmluZyk6IFByb21pc2U8e1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHZpZXdDb3VudDogbnVtYmVyO1xuICAgIGNyZWF0ZWRBdDogRGF0ZTtcbiAgICBvd25lckVtYWlsOiBzdHJpbmc7XG4gIH0gfCBudWxsPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnJwYygnZ2V0X3B1YmxpY19jb2xsZWN0aW9uJywge1xuICAgICAgICB0b2tlbjogc2hhcmVUb2tlblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwdWJsaWMgY29sbGVjdGlvbjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gZGF0YT8uWzBdO1xuICAgICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogY29sbGVjdGlvbi5pZCxcbiAgICAgICAgbmFtZTogY29sbGVjdGlvbi5uYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogY29sbGVjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgICAgdmlld0NvdW50OiBjb2xsZWN0aW9uLnZpZXdfY291bnQgfHwgMCxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShjb2xsZWN0aW9uLmNyZWF0ZWRfYXQpLFxuICAgICAgICBvd25lckVtYWlsOiBjb2xsZWN0aW9uLm93bmVyX2VtYWlsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHB1YmxpYyBjb2xsZWN0aW9uOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRQdWJsaWNDb2xsZWN0aW9uTGlua3Moc2hhcmVUb2tlbjogc3RyaW5nKTogUHJvbWlzZTxBcnJheTx7XG4gICAgaWQ6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGZhdmljb24/OiBzdHJpbmc7XG4gICAgZG9tYWluOiBzdHJpbmc7XG4gICAgdXNlck5vdGU/OiBzdHJpbmc7XG4gICAgYWlTdW1tYXJ5Pzogc3RyaW5nO1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgY3JlYXRlZEF0OiBEYXRlO1xuICAgIHRhZ3M6IHN0cmluZ1tdO1xuICB9Pj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2dldF9wdWJsaWNfY29sbGVjdGlvbl9saW5rcycsIHtcbiAgICAgICAgdG9rZW46IHNoYXJlVG9rZW5cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHVibGljIGNvbGxlY3Rpb24gbGlua3M6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoZGF0YSB8fCBbXSkubWFwKChsaW5rOiBhbnkpID0+ICh7XG4gICAgICAgIGlkOiBsaW5rLmlkLFxuICAgICAgICB1cmw6IGxpbmsudXJsLFxuICAgICAgICB0aXRsZTogbGluay50aXRsZSxcbiAgICAgICAgZmF2aWNvbjogbGluay5mYXZpY29uLFxuICAgICAgICBkb21haW46IGxpbmsuZG9tYWluLFxuICAgICAgICB1c2VyTm90ZTogbGluay51c2VyX25vdGUsXG4gICAgICAgIGFpU3VtbWFyeTogbGluay5haV9zdW1tYXJ5LFxuICAgICAgICBjYXRlZ29yeTogbGluay5jYXRlZ29yeSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShsaW5rLmNyZWF0ZWRfYXQpLFxuICAgICAgICB0YWdzOiBsaW5rLnRhZ19uYW1lcyB8fCBbXVxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHB1YmxpYyBjb2xsZWN0aW9uIGxpbmtzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgaW5jcmVtZW50Vmlld0NvdW50KHNoYXJlVG9rZW46IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2luY3JlbWVudF9jb2xsZWN0aW9uX3ZpZXdzJywge1xuICAgICAgICB0b2tlbjogc2hhcmVUb2tlblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbmNyZW1lbnRpbmcgdmlldyBjb3VudDonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBpbmNyZW1lbnQgdmlldyBjb3VudDonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXREZWZhdWx0Q2F0ZWdvcmllcygpOiBDYXRlZ29yeVtdIHtcbiAgICByZXR1cm4gW1xuICAgICAgeyBpZDogJ2dlbmVyYWwnLCBuYW1lOiAnR2VuZXJhbCcsIGNvbG9yOiAnIzZiNzI4MCcsIGlzRGVmYXVsdDogdHJ1ZSB9LFxuICAgICAgeyBpZDogJ3dvcmsnLCBuYW1lOiAnV29yaycsIGNvbG9yOiAnIzNiODJmNicgfSxcbiAgICAgIHsgaWQ6ICdwZXJzb25hbCcsIG5hbWU6ICdQZXJzb25hbCcsIGNvbG9yOiAnIzEwYjk4MScgfSxcbiAgICAgIHsgaWQ6ICdsZWFybmluZycsIG5hbWU6ICdMZWFybmluZycsIGNvbG9yOiAnI2Y1OWUwYicgfVxuICAgIF07XG4gIH1cblxuICBwcml2YXRlIGdldERlZmF1bHREYXRhKCk6IFN0b3JhZ2VEYXRhIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGlua3M6IFtdLFxuICAgICAgY29sbGVjdGlvbnM6IFtdLFxuICAgICAgY2F0ZWdvcmllczogdGhpcy5nZXREZWZhdWx0Q2F0ZWdvcmllcygpLFxuICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgZGVmYXVsdENhdGVnb3J5OiAnZ2VuZXJhbCcsXG4gICAgICAgIGF1dG9TdW1tYXJpemU6IHRydWVcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZ2V0TGlua0J5VXJsKHVybDogc3RyaW5nKTogUHJvbWlzZTxTYXZlZExpbmsgfCBudWxsPiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgY29uc3QgdXNlciA9IHNlc3Npb25EYXRhLnNlc3Npb24/LnVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2xpbmtzJylcbiAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci5pZClcbiAgICAgIC5lcSgndXJsJywgdXJsKVxuICAgICAgLnNpbmdsZSgpO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ1BHUlNUMTE2Jykge1xuICAgICAgICAvLyBObyByb3dzIHJldHVybmVkXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgLy8gTWFwIGRhdGFiYXNlIGZpZWxkcyB0byBUeXBlU2NyaXB0IGNhbWVsQ2FzZVxuICAgIHJldHVybiB7XG4gICAgICBpZDogZGF0YS5pZCxcbiAgICAgIHVybDogZGF0YS51cmwsXG4gICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgIGZhdmljb246IGRhdGEuZmF2aWNvbixcbiAgICAgIHVzZXJOb3RlOiBkYXRhLnVzZXJfbm90ZSB8fCAnJyxcbiAgICAgIGFpU3VtbWFyeTogZGF0YS5haV9zdW1tYXJ5LFxuICAgICAgY2F0ZWdvcnk6IGRhdGEuY2F0ZWdvcnksXG4gICAgICBjb2xsZWN0aW9uSWQ6IGRhdGEuY29sbGVjdGlvbl9pZCxcbiAgICAgIGlzSW5JbmJveDogZGF0YS5pc19pbl9pbmJveCB8fCBmYWxzZSxcbiAgICAgIGhpZ2hsaWdodHM6IHRoaXMucGFyc2VIaWdobGlnaHRzKGRhdGEuaGlnaGxpZ2h0cyksXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGRhdGEuY3JlYXRlZF9hdCksXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKGRhdGEudXBkYXRlZF9hdCksXG4gICAgICBkb21haW46IGRhdGEuZG9tYWluLFxuICAgIH07XG4gIH1cblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gc2FmZWx5IHBhcnNlIGhpZ2hsaWdodHNcbiAgcHJpdmF0ZSBwYXJzZUhpZ2hsaWdodHMoaGlnaGxpZ2h0c0RhdGE6IGFueSk6IGFueVtdIHtcbiAgICBpZiAoIWhpZ2hsaWdodHNEYXRhKSB7XG4gICAgICBjb25zb2xlLmxvZygnU3RvcmFnZTogTm8gaGlnaGxpZ2h0cyBkYXRhIGZvdW5kJyk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaGlnaGxpZ2h0c0RhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGhpZ2hsaWdodHNEYXRhKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gQXJyYXkuaXNBcnJheShwYXJzZWQpID8gcGFyc2VkIDogW107XG4gICAgICAgIGNvbnNvbGUubG9nKCdTdG9yYWdlOiBQYXJzZWQgaGlnaGxpZ2h0cyBmcm9tIEpTT046JywgcmVzdWx0Lmxlbmd0aCwgJ2hpZ2hsaWdodHMnLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gcGFyc2UgaGlnaGxpZ2h0cyBKU09OOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShoaWdobGlnaHRzRGF0YSkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdTdG9yYWdlOiBGb3VuZCBoaWdobGlnaHRzIGFycmF5OicsIGhpZ2hsaWdodHNEYXRhLmxlbmd0aCwgJ2hpZ2hsaWdodHMnLCBoaWdobGlnaHRzRGF0YSk7XG4gICAgICByZXR1cm4gaGlnaGxpZ2h0c0RhdGE7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdTdG9yYWdlOiBIaWdobGlnaHRzIGRhdGEgaW4gdW5leHBlY3RlZCBmb3JtYXQ6JywgdHlwZW9mIGhpZ2hsaWdodHNEYXRhLCBoaWdobGlnaHRzRGF0YSk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2VNYW5hZ2VyKCk7ICIsIi8vIEFJIFN1bW1hcnkgdXRpbGl0eSBmdW5jdGlvbnNcbmV4cG9ydCBpbnRlcmZhY2UgQUlDb25maWcge1xuICBhcGlLZXk/OiBzdHJpbmc7XG4gIG1vZGVsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQUlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBhcGlLZXk6IHN0cmluZztcbiAgcHJpdmF0ZSBtb2RlbDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQUlDb25maWcgPSB7fSkge1xuICAgIHRoaXMuYXBpS2V5ID0gY29uZmlnLmFwaUtleSB8fCAnJztcbiAgICB0aGlzLm1vZGVsID0gY29uZmlnLm1vZGVsIHx8ICdncHQtMy41LXR1cmJvJztcbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlU3VtbWFyeShjb250ZW50OiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBGb3Igbm93LCByZXR1cm4gYSBwbGFjZWhvbGRlciBzdW1tYXJ5XG4gICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhY3R1YWwgT3BlbkFJIEFQSSBjYWxsc1xuICAgIGlmICghdGhpcy5hcGlLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlUGxhY2Vob2xkZXJTdW1tYXJ5KGNvbnRlbnQsIHRpdGxlLCB1cmwpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBQbGFjZWhvbGRlciBmb3IgT3BlbkFJIEFQSSBpbnRlZ3JhdGlvblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNhbGxPcGVuQUkoY29udGVudCwgdGl0bGUsIHVybCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0FJIHN1bW1hcnkgZ2VuZXJhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVQbGFjZWhvbGRlclN1bW1hcnkoY29udGVudCwgdGl0bGUsIHVybCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVBsYWNlaG9sZGVyU3VtbWFyeShjb250ZW50OiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBkb21haW4gPSBuZXcgVVJMKHVybCkuaG9zdG5hbWU7XG4gICAgY29uc3QgY29udGVudExlbmd0aCA9IGNvbnRlbnQubGVuZ3RoO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIGEgc2ltcGxlIHJ1bGUtYmFzZWQgc3VtbWFyeVxuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ2dpdGh1Yi5jb20nKSkge1xuICAgICAgcmV0dXJuIGBHaXRIdWIgcmVwb3NpdG9yeSBvciBwcm9qZWN0IHBhZ2U6ICR7dGl0bGV9YDtcbiAgICB9IGVsc2UgaWYgKGRvbWFpbi5pbmNsdWRlcygnc3RhY2tvdmVyZmxvdy5jb20nKSkge1xuICAgICAgcmV0dXJuIGBTdGFjayBPdmVyZmxvdyBkaXNjdXNzaW9uIGFib3V0IHByb2dyYW1taW5nIG9yIHRlY2huaWNhbCB0b3BpY3NgO1xuICAgIH0gZWxzZSBpZiAoZG9tYWluLmluY2x1ZGVzKCdtZWRpdW0uY29tJykgfHwgZG9tYWluLmluY2x1ZGVzKCdibG9nJykpIHtcbiAgICAgIHJldHVybiBgQmxvZyBhcnRpY2xlOiAke3RpdGxlLnN1YnN0cmluZygwLCA1MCl9Li4uYDtcbiAgICB9IGVsc2UgaWYgKGRvbWFpbi5pbmNsdWRlcygneW91dHViZS5jb20nKSkge1xuICAgICAgcmV0dXJuIGBWaWRlbyBjb250ZW50OiAke3RpdGxlfWA7XG4gICAgfSBlbHNlIGlmIChkb21haW4uaW5jbHVkZXMoJ25ld3MnKSB8fCBkb21haW4uaW5jbHVkZXMoJ2FydGljbGUnKSkge1xuICAgICAgcmV0dXJuIGBOZXdzIGFydGljbGUgZnJvbSAke2RvbWFpbn1gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYFdlYiBwYWdlIGZyb20gJHtkb21haW59ICgke01hdGgucm91bmQoY29udGVudExlbmd0aCAvIDEwMCl9IHBhcmFncmFwaHMpYDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNhbGxPcGVuQUkoY29udGVudDogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgLy8gUGxhY2Vob2xkZXIgZm9yIGFjdHVhbCBPcGVuQUkgQVBJIGltcGxlbWVudGF0aW9uXG4gICAgY29uc3QgcHJvbXB0ID0gYFN1bW1hcml6ZSB0aGlzIHdlYiBwYWdlIGluIDEtMiBzZW50ZW5jZXM6XG5UaXRsZTogJHt0aXRsZX1cblVSTDogJHt1cmx9XG5Db250ZW50OiAke2NvbnRlbnQuc3Vic3RyaW5nKDAsIDEwMDApfS4uLmA7XG5cbiAgICAvLyBUaGlzIHdvdWxkIGJlIHJlcGxhY2VkIHdpdGggYWN0dWFsIE9wZW5BSSBBUEkgY2FsbFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvY2hhdC9jb21wbGV0aW9ucycsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmFwaUtleX1gLFxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgY29udGVudDogcHJvbXB0XG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBtYXhfdG9rZW5zOiAxMDAsXG4gICAgICAgIHRlbXBlcmF0dXJlOiAwLjNcbiAgICAgIH0pXG4gICAgfSk7XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiBkYXRhLmNob2ljZXNbMF0/Lm1lc3NhZ2U/LmNvbnRlbnQgfHwgdGhpcy5nZW5lcmF0ZVBsYWNlaG9sZGVyU3VtbWFyeShjb250ZW50LCB0aXRsZSwgdXJsKTtcbiAgfVxuXG4gIHVwZGF0ZUFwaUtleShhcGlLZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBhaVNlcnZpY2UgPSBuZXcgQUlTZXJ2aWNlKCk7ICIsImltcG9ydCB7IHN0b3JhZ2UgfSBmcm9tICcuLi91dGlscy9zdG9yYWdlJztcbmltcG9ydCB7IGFpU2VydmljZSB9IGZyb20gJy4uL3V0aWxzL2FpJztcbmltcG9ydCB7IFNhdmVkTGluaywgSGlnaGxpZ2h0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG4vLyBJbml0aWFsaXplIGV4dGVuc2lvblxuY2hyb21lLnJ1bnRpbWUub25JbnN0YWxsZWQuYWRkTGlzdGVuZXIoKCkgPT4ge1xuICAvLyBDcmVhdGUgY29udGV4dCBtZW51XG4gIGNocm9tZS5jb250ZXh0TWVudXMuY3JlYXRlKHtcbiAgICBpZDogJ3NhdmVUb05lc3QnLFxuICAgIHRpdGxlOiAnU2F2ZSB0byBOZXN0JyxcbiAgICBjb250ZXh0czogWydwYWdlJywgJ2xpbmsnXVxuICB9KTtcblxuICAvLyBDcmVhdGUgY29udGV4dCBtZW51IGZvciBzZWxlY3RlZCB0ZXh0XG4gIGNocm9tZS5jb250ZXh0TWVudXMuY3JlYXRlKHtcbiAgICBpZDogJ3NhdmVIaWdobGlnaHQnLFxuICAgIHRpdGxlOiAnU2F2ZSBoaWdobGlnaHQgdG8gTmVzdCcsXG4gICAgY29udGV4dHM6IFsnc2VsZWN0aW9uJ11cbiAgfSk7XG5cbiAgY29uc29sZS5sb2coJ05lc3QgZXh0ZW5zaW9uIGluc3RhbGxlZCcpO1xufSk7XG5cbi8vIEhhbmRsZSBjb250ZXh0IG1lbnUgY2xpY2tzXG5jaHJvbWUuY29udGV4dE1lbnVzLm9uQ2xpY2tlZC5hZGRMaXN0ZW5lcihhc3luYyAoaW5mbywgdGFiKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBDb250ZXh0IG1lbnUgY2xpY2tlZDonLCBpbmZvLm1lbnVJdGVtSWQsICdTZWxlY3Rpb246JywgaW5mby5zZWxlY3Rpb25UZXh0KTtcbiAgaWYgKGluZm8ubWVudUl0ZW1JZCA9PT0gJ3NhdmVUb05lc3QnICYmIHRhYikge1xuICAgIGF3YWl0IHNhdmVDdXJyZW50UGFnZSh0YWIsIGluZm8ubGlua1VybCk7XG4gIH0gZWxzZSBpZiAoaW5mby5tZW51SXRlbUlkID09PSAnc2F2ZUhpZ2hsaWdodCcgJiYgdGFiICYmIGluZm8uc2VsZWN0aW9uVGV4dCkge1xuICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBDYWxsaW5nIHNhdmVIaWdobGlnaHQgZnJvbSBjb250ZXh0IG1lbnUnKTtcbiAgICAvLyBGb3IgY29udGV4dCBtZW51LCB3ZSBkb24ndCBoYXZlIGNvbnRleHQgYW5kIHBvc2l0aW9uIGluZm8sIHNvIHdlJ2xsIHVzZSBqdXN0IHRoZSBzZWxlY3RlZCB0ZXh0XG4gICAgYXdhaXQgc2F2ZUhpZ2hsaWdodCh0YWIsIGluZm8uc2VsZWN0aW9uVGV4dCwgaW5mby5zZWxlY3Rpb25UZXh0LCB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gSGFuZGxlIGJyb3dzZXIgYWN0aW9uIGNsaWNrcyAodGhpcyB3b24ndCBmaXJlIGlmIHRoZXJlJ3MgYSBwb3B1cCwgYnV0IGtlZXBpbmcgZm9yIHJlZmVyZW5jZSlcbmNocm9tZS5hY3Rpb24ub25DbGlja2VkLmFkZExpc3RlbmVyKGFzeW5jICh0YWIpID0+IHtcbiAgLy8gVGhpcyBoYW5kbGVyIHdvbid0IGZpcmUgd2hlbiBhIHBvcHVwIGlzIGRlZmluZWQgaW4gdGhlIG1hbmlmZXN0XG4gIC8vIFRoZSBwb3B1cCB3aWxsIGhhbmRsZSBvcGVuaW5nIHRoZSBzaWRlIHBhbmVsIGluc3RlYWRcbiAgY29uc29sZS5sb2coJ0FjdGlvbiBjbGlja2VkLCBidXQgcG9wdXAgc2hvdWxkIGhhbmRsZSB0aGlzJyk7XG59KTtcblxuLy8gSGFuZGxlIG1lc3NhZ2VzIGZyb20gY29udGVudCBzY3JpcHQgYW5kIHBvcHVwXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKHJlcXVlc3QsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBNZXNzYWdlIHJlY2VpdmVkOicsIHJlcXVlc3QpO1xuICBcbiAgKGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKHJlcXVlc3QuYWN0aW9uID09PSAnc2F2ZUN1cnJlbnRQYWdlJykge1xuICAgICAgICBjb25zdCB0YWJzID0gYXdhaXQgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSk7XG4gICAgICAgIGlmICh0YWJzWzBdKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2F2ZUN1cnJlbnRQYWdlKHRhYnNbMF0pO1xuICAgICAgICAgIHNlbmRSZXNwb25zZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ05vIGFjdGl2ZSB0YWIgZm91bmQuJyB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0LmFjdGlvbiA9PT0gJ3NhdmVIaWdobGlnaHQnKSB7XG4gICAgICAgIGNvbnN0IHRhYnMgPSBhd2FpdCBjaHJvbWUudGFicy5xdWVyeSh7IGFjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZSB9KTtcbiAgICAgICAgaWYgKHRhYnNbMF0pIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzYXZlSGlnaGxpZ2h0KHRhYnNbMF0sIHJlcXVlc3Quc2VsZWN0ZWRUZXh0LCByZXF1ZXN0LmNvbnRleHQsIHJlcXVlc3QucG9zaXRpb24pO1xuICAgICAgICAgIHNlbmRSZXNwb25zZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ05vIGFjdGl2ZSB0YWIgZm91bmQuJyB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0LmFjdGlvbiA9PT0gJ2dldFBhZ2VDb250ZW50Jykge1xuICAgICAgICBpZiAoc2VuZGVyLnRhYiAmJiBzZW5kZXIudGFiLmlkKSB7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBnZXRQYWdlQ29udGVudChzZW5kZXIudGFiLmlkKTtcbiAgICAgICAgICBzZW5kUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbmRSZXNwb25zZSh7IGNvbnRlbnQ6ICcnIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdVbmtub3duIGFjdGlvbicgfSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0JhY2tncm91bmQgc2NyaXB0IGVycm9yOicsIGVycm9yKTtcbiAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlIH0pO1xuICAgIH1cbiAgfSkoKTtcbiAgXG4gIHJldHVybiB0cnVlOyAvLyBLZWVwIG1lc3NhZ2UgY2hhbm5lbCBvcGVuIGZvciBhc3luYyByZXNwb25zZVxufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIHNhdmVDdXJyZW50UGFnZSh0YWI6IGNocm9tZS50YWJzLlRhYiwgbGlua1VybD86IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gbGlua1VybCB8fCB0YWIudXJsO1xuICAgIGNvbnN0IHRpdGxlID0gdGFiLnRpdGxlIHx8ICdVbnRpdGxlZCc7XG4gICAgXG4gICAgaWYgKCF1cmwgfHwgdXJsLnN0YXJ0c1dpdGgoJ2Nocm9tZTovLycpIHx8IHVybC5zdGFydHNXaXRoKCdjaHJvbWUtZXh0ZW5zaW9uOi8vJykpIHtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0Nhbm5vdCBzYXZlIHRoaXMgdHlwZSBvZiBwYWdlLicgfTtcbiAgICB9XG5cbiAgICBsZXQgcGFnZUNvbnRlbnQgPSAnJztcbiAgICBpZiAodGFiLmlkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCwgeyBhY3Rpb246ICdnZXRQYWdlQ29udGVudCcgfSk7XG4gICAgICAgIHBhZ2VDb250ZW50ID0gcmVzcG9uc2U/LmNvbnRlbnQgfHwgJyc7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IGV4dHJhY3QgcGFnZSBjb250ZW50OicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkb21haW4gPSBuZXcgVVJMKHVybCkuaG9zdG5hbWU7XG4gICAgY29uc3QgYWlTdW1tYXJ5ID0gYXdhaXQgYWlTZXJ2aWNlLmdlbmVyYXRlU3VtbWFyeShwYWdlQ29udGVudCwgdGl0bGUsIHVybCk7XG5cbiAgICBjb25zdCBuZXdMaW5rID0ge1xuICAgICAgdXJsLFxuICAgICAgdGl0bGUsXG4gICAgICBmYXZpY29uOiB0YWIuZmF2SWNvblVybCB8fCBgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9kb21haW49JHtkb21haW59JnN6PTMyYCxcbiAgICAgIHVzZXJOb3RlOiAnJyxcbiAgICAgIGFpU3VtbWFyeSxcbiAgICAgIGNhdGVnb3J5OiAnZ2VuZXJhbCcsXG4gICAgICBkb21haW46IGRvbWFpbixcbiAgICAgIGlzSW5JbmJveDogdHJ1ZSwgLy8gTmV3IGxpbmtzIGdvIHRvIGluYm94IGJ5IGRlZmF1bHRcbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IHNhdmVDdXJyZW50UGFnZSBuZXdMaW5rOicsIEpTT04uc3RyaW5naWZ5KG5ld0xpbmspKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdG9yYWdlLmFkZExpbmsobmV3TGluayk7XG4gICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IHNhdmVDdXJyZW50UGFnZSByZXN1bHQ6JywgcmVzdWx0KTtcblxuICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuZXJyb3IgfHwgJ0ZhaWxlZCB0byBzYXZlIGxpbmsgdG8gZGF0YWJhc2UuJyk7XG4gICAgfVxuXG4gICAgY2hyb21lLm5vdGlmaWNhdGlvbnMuY3JlYXRlKHtcbiAgICAgIHR5cGU6ICdiYXNpYycsXG4gICAgICBpY29uVXJsOiAnaWNvbnMvaWNvbjQ4LnBuZycsXG4gICAgICB0aXRsZTogJ1NhdmVkIHRvIE5lc3QnLFxuICAgICAgbWVzc2FnZTogYFwiJHt0aXRsZX1cIiBoYXMgYmVlbiBzYXZlZC5gXG4gICAgfSk7XG5cbiAgICAvLyBOb3RpZnkgc2lkZWJhciB0byByZWZyZXNoIGRhdGFcbiAgICB0cnkge1xuICAgICAgYXdhaXQgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyBhY3Rpb246ICdyZWZyZXNoU2lkZWJhcicgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDb3VsZCBub3Qgc2VuZCByZWZyZXNoIG1lc3NhZ2UgdG8gc2lkZWJhcjonLCBlcnJvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzYXZlIHBhZ2U6JywgZXJyb3IpO1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSB8fCAnQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC4nO1xuICAgIGNocm9tZS5ub3RpZmljYXRpb25zLmNyZWF0ZSh7XG4gICAgICB0eXBlOiAnYmFzaWMnLFxuICAgICAgaWNvblVybDogJ2ljb25zL2ljb240OC5wbmcnLFxuICAgICAgdGl0bGU6ICdOZXN0IEVycm9yJyxcbiAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gc2F2ZSBwYWdlOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgfSk7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvck1lc3NhZ2UgfTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRQYWdlQ29udGVudCh0YWJJZDogbnVtYmVyKTogUHJvbWlzZTx7IGNvbnRlbnQ6IHN0cmluZyB9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjaHJvbWUudGFicy5zZW5kTWVzc2FnZSh0YWJJZCwgeyBhY3Rpb246ICdnZXRQYWdlQ29udGVudCcgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgcGFnZSBjb250ZW50OicsIGVycm9yKTtcbiAgICByZXR1cm4geyBjb250ZW50OiAnJyB9O1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNhdmVIaWdobGlnaHQodGFiOiBjaHJvbWUudGFicy5UYWIsIHNlbGVjdGVkVGV4dDogc3RyaW5nLCBjb250ZXh0Pzogc3RyaW5nLCBwb3NpdGlvbj86IGFueSk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZzsgbGlua0lkPzogc3RyaW5nIH0+IHtcbiAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IHNhdmVIaWdobGlnaHQgY2FsbGVkIHdpdGg6JywgeyBzZWxlY3RlZFRleHQsIGNvbnRleHQsIHBvc2l0aW9uIH0pO1xuICB0cnkge1xuICAgIGNvbnN0IHVybCA9IHRhYi51cmw7XG4gICAgY29uc3QgdGl0bGUgPSB0YWIudGl0bGUgfHwgJ1VudGl0bGVkJztcbiAgICBcbiAgICBpZiAoIXVybCB8fCB1cmwuc3RhcnRzV2l0aCgnY2hyb21lOi8vJykgfHwgdXJsLnN0YXJ0c1dpdGgoJ2Nocm9tZS1leHRlbnNpb246Ly8nKSkge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnQ2Fubm90IHNhdmUgaGlnaGxpZ2h0cyBvbiB0aGlzIHR5cGUgb2YgcGFnZS4nIH07XG4gICAgfVxuXG4gICAgY29uc3QgZG9tYWluID0gbmV3IFVSTCh1cmwpLmhvc3RuYW1lO1xuXG4gICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGEgc2F2ZWQgbGluayBmb3IgdGhpcyBVUkxcbiAgICBjb25zdCBleGlzdGluZ0xpbmsgPSBhd2FpdCBzdG9yYWdlLmdldExpbmtCeVVybCh1cmwpO1xuICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBFeGlzdGluZyBsaW5rIGZvdW5kOicsICEhZXhpc3RpbmdMaW5rKTtcbiAgICBcbiAgICBjb25zdCBoaWdobGlnaHQ6IEhpZ2hsaWdodCA9IHtcbiAgICAgIGlkOiBgaGlnaGxpZ2h0XyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgICAgIHNlbGVjdGVkVGV4dCxcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQgfHwgc2VsZWN0ZWRUZXh0LCAvLyBVc2Ugc2VsZWN0ZWRUZXh0IGFzIGNvbnRleHQgaWYgY29udGV4dCBpcyBub3QgcHJvdmlkZWRcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBDcmVhdGVkIGhpZ2hsaWdodDonLCBKU09OLnN0cmluZ2lmeShoaWdobGlnaHQpKTtcblxuICAgIGxldCBsaW5rSWQ6IHN0cmluZztcblxuICAgIGlmIChleGlzdGluZ0xpbmspIHtcbiAgICAgIC8vIEFkZCBoaWdobGlnaHQgdG8gZXhpc3RpbmcgbGlua1xuICAgICAgY29uc3QgdXBkYXRlZEhpZ2hsaWdodHMgPSBbLi4uKGV4aXN0aW5nTGluay5oaWdobGlnaHRzIHx8IFtdKSwgaGlnaGxpZ2h0XTtcbiAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBBZGRpbmcgaGlnaGxpZ2h0IHRvIGV4aXN0aW5nIGxpbmssIHRvdGFsIGhpZ2hsaWdodHM6JywgdXBkYXRlZEhpZ2hsaWdodHMubGVuZ3RoKTtcbiAgICAgIGNvbnN0IHVwZGF0ZVJlc3VsdCA9IGF3YWl0IHN0b3JhZ2UudXBkYXRlTGluayhleGlzdGluZ0xpbmsuaWQsIHsgaGlnaGxpZ2h0czogdXBkYXRlZEhpZ2hsaWdodHMgfSk7XG4gICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogdXBkYXRlTGluayByZXN1bHQ6JywgdXBkYXRlUmVzdWx0KTtcbiAgICAgIGxpbmtJZCA9IGV4aXN0aW5nTGluay5pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3JlYXRlIG5ldyBsaW5rIHdpdGggaGlnaGxpZ2h0XG4gICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogQ3JlYXRpbmcgbmV3IGxpbmsgd2l0aCBoaWdobGlnaHQnKTtcbiAgICAgIGNvbnN0IG5ld0xpbmsgPSB7XG4gICAgICAgIHVybCxcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGZhdmljb246IHRhYi5mYXZJY29uVXJsIHx8IGBodHRwczovL3d3dy5nb29nbGUuY29tL3MyL2Zhdmljb25zP2RvbWFpbj0ke2RvbWFpbn0mc3o9MzJgLFxuICAgICAgICB1c2VyTm90ZTogJycsXG4gICAgICAgIGNhdGVnb3J5OiAnZ2VuZXJhbCcsXG4gICAgICAgIGRvbWFpbjogZG9tYWluLFxuICAgICAgICBpc0luSW5ib3g6IHRydWUsXG4gICAgICAgIGhpZ2hsaWdodHM6IFtoaWdobGlnaHRdXG4gICAgICB9O1xuICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IG5ld0xpbmsgd2l0aCBoaWdobGlnaHQ6JywgSlNPTi5zdHJpbmdpZnkobmV3TGluaykpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3RvcmFnZS5hZGRMaW5rKG5ld0xpbmspO1xuICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IGFkZExpbmsgcmVzdWx0OicsIHJlc3VsdCk7XG4gICAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuZXJyb3IgfHwgJ0ZhaWxlZCB0byBzYXZlIGxpbmsgdG8gZGF0YWJhc2UuJyk7XG4gICAgICB9XG4gICAgICBsaW5rSWQgPSByZXN1bHQubGlua0lkITtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogSGlnaGxpZ2h0IHNhdmVkIHN1Y2Nlc3NmdWxseSwgbGlua0lkOicsIGxpbmtJZCk7XG5cbiAgICBjaHJvbWUubm90aWZpY2F0aW9ucy5jcmVhdGUoe1xuICAgICAgdHlwZTogJ2Jhc2ljJyxcbiAgICAgIGljb25Vcmw6ICdpY29ucy9pY29uNDgucG5nJyxcbiAgICAgIHRpdGxlOiAnSGlnaGxpZ2h0IFNhdmVkJyxcbiAgICAgIG1lc3NhZ2U6IGBIaWdobGlnaHQgc2F2ZWQgZnJvbSBcIiR7dGl0bGV9XCJgXG4gICAgfSk7XG5cbiAgICAvLyBTZW5kIGNvbmZpcm1hdGlvbiBtZXNzYWdlIHRvIGNvbnRlbnQgc2NyaXB0XG4gICAgaWYgKHRhYi5pZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFiLmlkLCB7IGFjdGlvbjogJ3Nob3dIaWdobGlnaHRDb25maXJtYXRpb24nIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NvdWxkIG5vdCBzZW5kIGNvbmZpcm1hdGlvbiB0byBjb250ZW50IHNjcmlwdDonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTm90aWZ5IHNpZGViYXIgdG8gcmVmcmVzaCBkYXRhXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHsgYWN0aW9uOiAncmVmcmVzaFNpZGViYXInIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IHNlbmQgcmVmcmVzaCBtZXNzYWdlIHRvIHNpZGViYXI6JywgZXJyb3IpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGxpbmtJZCB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGhpZ2hsaWdodDonLCBlcnJvcik7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlIHx8ICdBbiB1bmtub3duIGVycm9yIG9jY3VycmVkLic7XG4gICAgY2hyb21lLm5vdGlmaWNhdGlvbnMuY3JlYXRlKHtcbiAgICAgIHR5cGU6ICdiYXNpYycsXG4gICAgICBpY29uVXJsOiAnaWNvbnMvaWNvbjQ4LnBuZycsXG4gICAgICB0aXRsZTogJ05lc3QgRXJyb3InLFxuICAgICAgbWVzc2FnZTogYEZhaWxlZCB0byBzYXZlIGhpZ2hsaWdodDogJHtlcnJvck1lc3NhZ2V9YFxuICAgIH0pO1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3JNZXNzYWdlIH07XG4gIH1cbn1cblxuLy8gSGFuZGxlIGtleWJvYXJkIHNob3J0Y3V0cyAoaWYgY29uZmlndXJlZCBpbiBtYW5pZmVzdClcbmNocm9tZS5jb21tYW5kcy5vbkNvbW1hbmQuYWRkTGlzdGVuZXIoYXN5bmMgKGNvbW1hbmQpID0+IHtcbiAgaWYgKGNvbW1hbmQgPT09ICdzYXZlLXBhZ2UnKSB7XG4gICAgY29uc3QgdGFicyA9IGF3YWl0IGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0pO1xuICAgIGlmICh0YWJzWzBdKSB7XG4gICAgICBhd2FpdCBzYXZlQ3VycmVudFBhZ2UodGFic1swXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09ICdvcGVuLWNvbW1hbmQtcGFsZXR0ZScpIHtcbiAgICAvLyBPcGVuIHRoZSBzaWRlIHBhbmVsIHRvIHNob3cgY29tbWFuZCBwYWxldHRlXG4gICAgY29uc3QgdGFicyA9IGF3YWl0IGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0pO1xuICAgIGlmICh0YWJzWzBdKSB7XG4gICAgICBhd2FpdCBjaHJvbWUuc2lkZVBhbmVsLm9wZW4oeyB0YWJJZDogdGFic1swXS5pZCB9KTtcbiAgICAgIC8vIFRoZSBzaWRlcGFuZWwgd2lsbCBoYW5kbGUgb3BlbmluZyB0aGUgY29tbWFuZCBwYWxldHRlIHZpYSBpdHMgb3duIGtleWJvYXJkIGxpc3RlbmVyXG4gICAgfVxuICB9XG59KTsgIl0sIm5hbWVzIjpbIkZ1bmN0aW9uUmVnaW9uIiwiX19pbXBvcnREZWZhdWx0IiwidGhpcyIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlBvc3RncmVzdEZpbHRlckJ1aWxkZXJfMSIsImNvbnN0cnVjdG9yIiwidXJsIiwiaGVhZGVycyIsInNjaGVtYSIsImZldGNoIiwic2VsZWN0IiwiY29sdW1ucyIsImhlYWQiLCJjb3VudCIsIm1ldGhvZCIsInF1b3RlZCIsImNsZWFuZWRDb2x1bW5zIiwic3BsaXQiLCJtYXAiLCJjIiwidGVzdCIsImpvaW4iLCJzZWFyY2hQYXJhbXMiLCJzZXQiLCJkZWZhdWx0IiwiYWxsb3dFbXB0eSIsImluc2VydCIsInZhbHVlcyIsImRlZmF1bHRUb051bGwiLCJwcmVmZXJzSGVhZGVycyIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJyZWR1Y2UiLCJhY2MiLCJ4IiwiY29uY2F0Iiwia2V5cyIsImxlbmd0aCIsInVuaXF1ZUNvbHVtbnMiLCJTZXQiLCJjb2x1bW4iLCJib2R5IiwidXBzZXJ0Iiwib25Db25mbGljdCIsImlnbm9yZUR1cGxpY2F0ZXMiLCJ1bmRlZmluZWQiLCJ1cGRhdGUiLCJ1bnNoaWZ0IiwiUG9zdGdyZXN0QnVpbGRlcl8xIiwiUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlciIsIm9yZGVyIiwiYXNjZW5kaW5nIiwibnVsbHNGaXJzdCIsImZvcmVpZ25UYWJsZSIsInJlZmVyZW5jZWRUYWJsZSIsImtleSIsImV4aXN0aW5nT3JkZXIiLCJnZXQiLCJsaW1pdCIsInJhbmdlIiwiZnJvbSIsInRvIiwia2V5T2Zmc2V0Iiwia2V5TGltaXQiLCJhYm9ydFNpZ25hbCIsInNpZ25hbCIsInNpbmdsZSIsIm1heWJlU2luZ2xlIiwiaXNNYXliZVNpbmdsZSIsImNzdiIsImdlb2pzb24iLCJleHBsYWluIiwiYW5hbHl6ZSIsInZlcmJvc2UiLCJzZXR0aW5ncyIsImJ1ZmZlcnMiLCJ3YWwiLCJmb3JtYXQiLCJfYSIsIm9wdGlvbnMiLCJmaWx0ZXIiLCJCb29sZWFuIiwiZm9yTWVkaWF0eXBlIiwicm9sbGJhY2siLCJ0cmltIiwicmV0dXJucyIsIlBvc3RncmVzdEVycm9yIiwiUG9zdGdyZXN0QnVpbGRlciIsIlBvc3RncmVzdEZpbHRlckJ1aWxkZXIiLCJQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXIiLCJQb3N0Z3Jlc3RDbGllbnQiLCJQb3N0Z3Jlc3RDbGllbnRfMSIsIlBvc3RncmVzdFF1ZXJ5QnVpbGRlcl8xIiwiUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlcl8xIiwiUG9zdGdyZXN0RXJyb3JfMSIsImNvbnN0YW50c18xIiwiYXNzaWduIiwiREVGQVVMVF9IRUFERVJTIiwic2NoZW1hTmFtZSIsInJlbGF0aW9uIiwiVVJMIiwicnBjIiwiZm4iLCJhcmdzIiwiZW50cmllcyIsIl8iLCJuYW1lIiwiZm9yRWFjaCIsImFwcGVuZCIsInZlcnNpb24iLCJ2ZXJzaW9uXzEiLCJub2RlX2ZldGNoXzEiLCJidWlsZGVyIiwic2hvdWxkVGhyb3dPbkVycm9yIiwidGhyb3dPbkVycm9yIiwic2V0SGVhZGVyIiwidGhlbiIsIm9uZnVsZmlsbGVkIiwib25yZWplY3RlZCIsImluY2x1ZGVzIiwicmVzIiwiX2ZldGNoIiwidG9TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiYXN5bmMiLCJfYiIsIl9jIiwiZXJyb3IiLCJkYXRhIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsIm9rIiwidGV4dCIsInBhcnNlIiwiY291bnRIZWFkZXIiLCJtYXRjaCIsImNvbnRlbnRSYW5nZSIsInBhcnNlSW50IiwiY29kZSIsImRldGFpbHMiLCJoaW50IiwibWVzc2FnZSIsIl9kIiwiY2F0Y2giLCJmZXRjaEVycm9yIiwic3RhY2siLCJvdmVycmlkZVR5cGVzIiwiRXJyb3IiLCJjb250ZXh0Iiwic3VwZXIiLCJlcSIsIm5lcSIsImd0IiwiZ3RlIiwibHQiLCJsdGUiLCJsaWtlIiwicGF0dGVybiIsImxpa2VBbGxPZiIsInBhdHRlcm5zIiwibGlrZUFueU9mIiwiaWxpa2UiLCJpbGlrZUFsbE9mIiwiaWxpa2VBbnlPZiIsImlzIiwiY2xlYW5lZFZhbHVlcyIsInMiLCJSZWdFeHAiLCJjb250YWlucyIsImNvbnRhaW5lZEJ5IiwicmFuZ2VHdCIsInJhbmdlR3RlIiwicmFuZ2VMdCIsInJhbmdlTHRlIiwicmFuZ2VBZGphY2VudCIsIm92ZXJsYXBzIiwidGV4dFNlYXJjaCIsInF1ZXJ5IiwiY29uZmlnIiwidHlwZSIsInR5cGVQYXJ0IiwiY29uZmlnUGFydCIsIm5vdCIsIm9wZXJhdG9yIiwib3IiLCJmaWx0ZXJzIiwiZ2xvYmFsT2JqZWN0Iiwic2VsZiIsIndpbmRvdyIsImciLCJnZXRHbG9iYWwiLCJiaW5kIiwiSGVhZGVycyIsIlJlcXVlc3QiLCJSZXNwb25zZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZW51bWVyYWJsZSIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsImUiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJGdW5jdGlvbnNFcnJvciIsIkZ1bmN0aW9uc0ZldGNoRXJyb3IiLCJGdW5jdGlvbnNSZWxheUVycm9yIiwiRnVuY3Rpb25zSHR0cEVycm9yIiwiRnVuY3Rpb25zQ2xpZW50IiwiY3VzdG9tRmV0Y2giLCJyZWdpb24iLCJBbnkiLCJyZXNvbHZlRmV0Y2giLCJzZXRBdXRoIiwidG9rZW4iLCJBdXRob3JpemF0aW9uIiwiaW52b2tlIiwiZnVuY3Rpb25OYW1lIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiZnVuY3Rpb25BcmdzIiwiX2hlYWRlcnMiLCJCbG9iIiwiQXJyYXlCdWZmZXIiLCJGb3JtRGF0YSIsInJlc3BvbnNlIiwiaXNSZWxheUVycm9yIiwicmVzcG9uc2VUeXBlIiwianNvbiIsImJsb2IiLCJmb3JtRGF0YSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJhcHBseSIsIldlYlNvY2tldCIsImdsb2JhbCIsImdldE5hdGl2ZVdlYlNvY2tldCIsIlNPQ0tFVF9TVEFURVMiLCJDSEFOTkVMX0VWRU5UUyIsIlRSQU5TUE9SVFMiLCJDT05ORUNUSU9OX1NUQVRFIiwiUG9zdGdyZXNUeXBlcyIsIkNIQU5ORUxfU1RBVEVTIiwiU2VyaWFsaXplciIsIkhFQURFUl9MRU5HVEgiLCJkZWNvZGUiLCJyYXdQYXlsb2FkIiwiY2FsbGJhY2siLCJfYmluYXJ5RGVjb2RlIiwiYnVmZmVyIiwidmlldyIsIkRhdGFWaWV3IiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiX2RlY29kZUJyb2FkY2FzdCIsInRvcGljU2l6ZSIsImdldFVpbnQ4IiwiZXZlbnRTaXplIiwib2Zmc2V0IiwidG9waWMiLCJzbGljZSIsImV2ZW50IiwicmVmIiwicGF5bG9hZCIsImJ5dGVMZW5ndGgiLCJUaW1lciIsInRpbWVyQ2FsYyIsInRpbWVyIiwidHJpZXMiLCJyZXNldCIsImNsZWFyVGltZW91dCIsInNjaGVkdWxlVGltZW91dCIsInNldFRpbWVvdXQiLCJjb252ZXJ0Q2hhbmdlRGF0YSIsInJlY29yZCIsInNraXBUeXBlcyIsInJlY19rZXkiLCJjb252ZXJ0Q29sdW1uIiwiY29sdW1uTmFtZSIsImZpbmQiLCJjb2xUeXBlIiwiY29udmVydENlbGwiLCJub29wIiwiY2hhckF0IiwiZGF0YVR5cGUiLCJ0b0FycmF5IiwiYm9vbCIsInRvQm9vbGVhbiIsImZsb2F0NCIsImZsb2F0OCIsImludDIiLCJpbnQ0IiwiaW50OCIsIm51bWVyaWMiLCJvaWQiLCJ0b051bWJlciIsImpzb25iIiwidG9Kc29uIiwidGltZXN0YW1wIiwidG9UaW1lc3RhbXBTdHJpbmciLCJhYnN0aW1lIiwiZGF0ZSIsImRhdGVyYW5nZSIsImludDRyYW5nZSIsImludDhyYW5nZSIsIm1vbmV5IiwicmVsdGltZSIsInRpbWUiLCJ0aW1lc3RhbXB0eiIsInRpbWV0eiIsInRzcmFuZ2UiLCJ0c3R6cmFuZ2UiLCJwYXJzZWRWYWx1ZSIsInBhcnNlRmxvYXQiLCJOdW1iZXIiLCJpc05hTiIsImNvbnNvbGUiLCJsb2ciLCJsYXN0SWR4IiwiY2xvc2VCcmFjZSIsImFyciIsInZhbFRyaW0iLCJ2YWwiLCJyZXBsYWNlIiwiaHR0cEVuZHBvaW50VVJMIiwic29ja2V0VXJsIiwiUHVzaCIsImNoYW5uZWwiLCJ0aW1lb3V0Iiwic2VudCIsInRpbWVvdXRUaW1lciIsInJlY2VpdmVkUmVzcCIsInJlY0hvb2tzIiwicmVmRXZlbnQiLCJyZXNlbmQiLCJfY2FuY2VsUmVmRXZlbnQiLCJzZW5kIiwiX2hhc1JlY2VpdmVkIiwic3RhcnRUaW1lb3V0Iiwic29ja2V0Iiwiam9pbl9yZWYiLCJfam9pblJlZiIsInVwZGF0ZVBheWxvYWQiLCJyZWNlaXZlIiwiX21ha2VSZWYiLCJfcmVwbHlFdmVudE5hbWUiLCJfb24iLCJfY2FuY2VsVGltZW91dCIsIl9tYXRjaFJlY2VpdmUiLCJ0cmlnZ2VyIiwiX3RyaWdnZXIiLCJkZXN0cm95IiwiX29mZiIsImgiLCJSRUFMVElNRV9QUkVTRU5DRV9MSVNURU5fRVZFTlRTIiwiUkVBTFRJTUVfUE9TVEdSRVNfQ0hBTkdFU19MSVNURU5fRVZFTlQiLCJSRUFMVElNRV9MSVNURU5fVFlQRVMiLCJSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTIiwiUmVhbHRpbWVQcmVzZW5jZSIsIm9wdHMiLCJzdGF0ZSIsInBlbmRpbmdEaWZmcyIsImpvaW5SZWYiLCJjYWxsZXIiLCJvbkpvaW4iLCJvbkxlYXZlIiwib25TeW5jIiwiZXZlbnRzIiwiZGlmZiIsIm5ld1N0YXRlIiwic3luY1N0YXRlIiwic3luY0RpZmYiLCJpblBlbmRpbmdTeW5jU3RhdGUiLCJjdXJyZW50UHJlc2VuY2VzIiwibmV3UHJlc2VuY2VzIiwibGVmdFByZXNlbmNlcyIsImN1cnJlbnRTdGF0ZSIsImNsb25lRGVlcCIsInRyYW5zZm9ybWVkU3RhdGUiLCJ0cmFuc2Zvcm1TdGF0ZSIsImpvaW5zIiwibGVhdmVzIiwicHJlc2VuY2VzIiwibmV3UHJlc2VuY2VSZWZzIiwibSIsInByZXNlbmNlX3JlZiIsImN1clByZXNlbmNlUmVmcyIsImpvaW5lZFByZXNlbmNlcyIsImluZGV4T2YiLCJqb2luZWRQcmVzZW5jZVJlZnMiLCJjdXJQcmVzZW5jZXMiLCJwcmVzZW5jZVJlZnNUb1JlbW92ZSIsImZ1bmMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibWV0YXMiLCJwcmVzZW5jZSIsIlJlYWx0aW1lQ2hhbm5lbCIsInBhcmFtcyIsImJpbmRpbmdzIiwiY2xvc2VkIiwiam9pbmVkT25jZSIsInB1c2hCdWZmZXIiLCJzdWJUb3BpYyIsImJyb2FkY2FzdCIsImFjayIsInByaXZhdGUiLCJqb2luUHVzaCIsInJlam9pblRpbWVyIiwiX3Jlam9pblVudGlsQ29ubmVjdGVkIiwicmVjb25uZWN0QWZ0ZXJNcyIsImpvaW5lZCIsInB1c2hFdmVudCIsIl9vbkNsb3NlIiwiX3JlbW92ZSIsIl9vbkVycm9yIiwicmVhc29uIiwiX2lzTGVhdmluZyIsIl9pc0Nsb3NlZCIsImVycm9yZWQiLCJfaXNKb2luaW5nIiwicmVwbHkiLCJicm9hZGNhc3RFbmRwb2ludFVSTCIsImVuZFBvaW50Iiwic3Vic2NyaWJlIiwiaXNDb25uZWN0ZWQiLCJjb25uZWN0IiwiaXNQcml2YXRlIiwiQ0hBTk5FTF9FUlJPUiIsIkNMT1NFRCIsImFjY2Vzc1Rva2VuUGF5bG9hZCIsInBvc3RncmVzX2NoYW5nZXMiLCJhY2Nlc3NUb2tlblZhbHVlIiwiYWNjZXNzX3Rva2VuIiwidXBkYXRlSm9pblBheWxvYWQiLCJfcmVqb2luIiwiY2xpZW50UG9zdGdyZXNCaW5kaW5ncyIsImJpbmRpbmdzTGVuIiwibmV3UG9zdGdyZXNCaW5kaW5ncyIsImkiLCJjbGllbnRQb3N0Z3Jlc0JpbmRpbmciLCJ0YWJsZSIsInNlcnZlclBvc3RncmVzRmlsdGVyIiwidW5zdWJzY3JpYmUiLCJpZCIsIlNVQlNDUklCRUQiLCJUSU1FRF9PVVQiLCJwcmVzZW5jZVN0YXRlIiwidHJhY2siLCJ1bnRyYWNrIiwib24iLCJfY2FuUHVzaCIsIl9wdXNoIiwiZW5kcG9pbnRfcGF5bG9hZCIsImFwaWtleSIsImFwaUtleSIsIm1lc3NhZ2VzIiwiX2ZldGNoV2l0aFRpbWVvdXQiLCJjYW5jZWwiLCJsZWF2aW5nIiwib25DbG9zZSIsImNsb3NlIiwibGVhdmVQdXNoIiwibGVhdmUiLCJmaW5hbGx5IiwidGVhcmRvd24iLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiYWJvcnQiLCJfb25NZXNzYWdlIiwiX2V2ZW50IiwiX3JlZiIsIl9pc01lbWJlciIsInR5cGVMb3dlciIsInRvTG9jYWxlTG93ZXJDYXNlIiwiaGFuZGxlZFBheWxvYWQiLCJfZSIsIl9mIiwiYmluZElkIiwiYmluZEV2ZW50IiwiaWRzIiwicG9zdGdyZXNDaGFuZ2VzIiwiY29tbWl0X3RpbWVzdGFtcCIsImVycm9ycyIsImVucmljaGVkUGF5bG9hZCIsImV2ZW50VHlwZSIsIm5ldyIsIm9sZCIsIl9nZXRQYXlsb2FkUmVjb3JkcyIsIl9pc0pvaW5lZCIsImpvaW5pbmciLCJiaW5kaW5nIiwiaXNFcXVhbCIsIm9iajEiLCJvYmoyIiwiayIsIl9sZWF2ZU9wZW5Ub3BpYyIsInJlY29yZHMiLCJvbGRfcmVjb3JkIiwiUmVhbHRpbWVDbGllbnQiLCJjaGFubmVscyIsImh0dHBFbmRwb2ludCIsImhlYXJ0YmVhdEludGVydmFsTXMiLCJoZWFydGJlYXRUaW1lciIsInBlbmRpbmdIZWFydGJlYXRSZWYiLCJoZWFydGJlYXRDYWxsYmFjayIsImxvZ2dlciIsImNvbm4iLCJzZW5kQnVmZmVyIiwic2VyaWFsaXplciIsInN0YXRlQ2hhbmdlQ2FsbGJhY2tzIiwib3BlbiIsImFjY2Vzc1Rva2VuIiwiX3Jlc29sdmVGZXRjaCIsIndlYnNvY2tldCIsInRyYW5zcG9ydCIsImxvZ0xldmVsIiwibG9nX2xldmVsIiwiZW5jb2RlIiwicmVjb25uZWN0VGltZXIiLCJkaXNjb25uZWN0Iiwid29ya2VyIiwiV29ya2VyIiwid29ya2VyVXJsIiwiZW5kcG9pbnRVUkwiLCJzZXR1cENvbm5lY3Rpb24iLCJfYXBwZW5kUGFyYW1zIiwidnNuIiwib25jbG9zZSIsImNsZWFySW50ZXJ2YWwiLCJnZXRDaGFubmVscyIsInJlbW92ZUNoYW5uZWwiLCJyZW1vdmVBbGxDaGFubmVscyIsInZhbHVlc18xIiwiYWxsIiwia2luZCIsIm1zZyIsImNvbm5lY3Rpb25TdGF0ZSIsInJlYWR5U3RhdGUiLCJjb25uZWN0aW5nIiwiQ29ubmVjdGluZyIsIk9wZW4iLCJjbG9zaW5nIiwiQ2xvc2luZyIsIkNsb3NlZCIsInJlYWx0aW1lVG9waWMiLCJleGlzdHMiLCJjaGFuIiwidG9rZW5Ub1NlbmQiLCJzZW5kSGVhcnRiZWF0Iiwib25IZWFydGJlYXQiLCJmbHVzaFNlbmRCdWZmZXIiLCJuZXdSZWYiLCJkdXBDaGFubmVsIiwiYmluYXJ5VHlwZSIsIm9ub3BlbiIsIl9vbkNvbm5PcGVuIiwib25lcnJvciIsIl9vbkNvbm5FcnJvciIsIm9ubWVzc2FnZSIsIl9vbkNvbm5NZXNzYWdlIiwiX29uQ29ubkNsb3NlIiwicmF3TWVzc2FnZSIsIndvcmtlclJlZiIsIl9zdGFydFdvcmtlckhlYXJ0YmVhdCIsIl9zdGFydEhlYXJ0YmVhdCIsInNldEludGVydmFsIiwib2JqZWN0VXJsIiwiX3dvcmtlck9iamVjdFVybCIsInRlcm1pbmF0ZSIsInBvc3RNZXNzYWdlIiwiaW50ZXJ2YWwiLCJfdHJpZ2dlckNoYW5FcnJvciIsInByZWZpeCIsIlVSTFNlYXJjaFBhcmFtcyIsInJlc3VsdF91cmwiLCJjcmVhdGVPYmplY3RVUkwiLCJTdG9yYWdlRXJyb3IiLCJfX2lzU3RvcmFnZUVycm9yIiwiaXNTdG9yYWdlRXJyb3IiLCJTdG9yYWdlQXBpRXJyb3IiLCJ0b0pTT04iLCJTdG9yYWdlVW5rbm93bkVycm9yIiwib3JpZ2luYWxFcnJvciIsInJlY3Vyc2l2ZVRvQ2FtZWwiLCJpdGVtIiwiZWwiLCJuZXdLZXkiLCJ0b1VwcGVyQ2FzZSIsIl9nZXRFcnJvck1lc3NhZ2UiLCJlcnIiLCJlcnJvcl9kZXNjcmlwdGlvbiIsImhhbmRsZUVycm9yIiwiUmVzIiwibm9SZXNvbHZlSnNvbiIsIl9oYW5kbGVSZXF1ZXN0IiwiZmV0Y2hlciIsInBhcmFtZXRlcnMiLCJfZ2V0UmVxdWVzdFBhcmFtcyIsInBvc3QiLCJyZW1vdmUiLCJERUZBVUxUX1NFQVJDSF9PUFRJT05TIiwic29ydEJ5IiwiREVGQVVMVF9GSUxFX09QVElPTlMiLCJjYWNoZUNvbnRyb2wiLCJjb250ZW50VHlwZSIsIlN0b3JhZ2VGaWxlQXBpIiwiYnVja2V0SWQiLCJ1cGxvYWRPclVwZGF0ZSIsInBhdGgiLCJmaWxlQm9keSIsImZpbGVPcHRpb25zIiwiU3RyaW5nIiwibWV0YWRhdGEiLCJlbmNvZGVNZXRhZGF0YSIsInRvQmFzZTY0IiwiY2xlYW5QYXRoIiwiX3JlbW92ZUVtcHR5Rm9sZGVycyIsIl9wYXRoIiwiX2dldEZpbmFsUGF0aCIsImR1cGxleCIsIklkIiwiZnVsbFBhdGgiLCJLZXkiLCJ1cGxvYWQiLCJ1cGxvYWRUb1NpZ25lZFVybCIsImNyZWF0ZVNpZ25lZFVwbG9hZFVybCIsInNpZ25lZFVybCIsIm1vdmUiLCJmcm9tUGF0aCIsInRvUGF0aCIsInNvdXJjZUtleSIsImRlc3RpbmF0aW9uS2V5IiwiZGVzdGluYXRpb25CdWNrZXQiLCJjb3B5IiwiY3JlYXRlU2lnbmVkVXJsIiwiZXhwaXJlc0luIiwidHJhbnNmb3JtIiwiZG93bmxvYWRRdWVyeVBhcmFtIiwiZG93bmxvYWQiLCJlbmNvZGVVUkkiLCJzaWduZWRVUkwiLCJjcmVhdGVTaWduZWRVcmxzIiwicGF0aHMiLCJkYXR1bSIsInJlbmRlclBhdGgiLCJ0cmFuc2Zvcm1hdGlvblF1ZXJ5IiwidHJhbnNmb3JtT3B0c1RvUXVlcnlTdHJpbmciLCJxdWVyeVN0cmluZyIsImluZm8iLCJnZXRQdWJsaWNVcmwiLCJfcXVlcnlTdHJpbmciLCJwdWJsaWNVcmwiLCJwcmVmaXhlcyIsImxpc3QiLCJCdWZmZXIiLCJidG9hIiwid2lkdGgiLCJoZWlnaHQiLCJyZXNpemUiLCJxdWFsaXR5IiwiU3RvcmFnZUJ1Y2tldEFwaSIsImxpc3RCdWNrZXRzIiwiZ2V0QnVja2V0IiwiY3JlYXRlQnVja2V0IiwicHVibGljIiwiZmlsZV9zaXplX2xpbWl0IiwiZmlsZVNpemVMaW1pdCIsImFsbG93ZWRfbWltZV90eXBlcyIsImFsbG93ZWRNaW1lVHlwZXMiLCJ1cGRhdGVCdWNrZXQiLCJwdXQiLCJlbXB0eUJ1Y2tldCIsImRlbGV0ZUJ1Y2tldCIsIlN0b3JhZ2VDbGllbnQiLCJKU19FTlYiLCJEZW5vIiwiZG9jdW1lbnQiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiREVGQVVMVF9HTE9CQUxfT1BUSU9OUyIsIkRFRkFVTFRfREJfT1BUSU9OUyIsIkRFRkFVTFRfQVVUSF9PUFRJT05TIiwiYXV0b1JlZnJlc2hUb2tlbiIsInBlcnNpc3RTZXNzaW9uIiwiZGV0ZWN0U2Vzc2lvbkluVXJsIiwiZmxvd1R5cGUiLCJERUZBVUxUX1JFQUxUSU1FX09QVElPTlMiLCJmZXRjaFdpdGhBdXRoIiwic3VwYWJhc2VLZXkiLCJnZXRBY2Nlc3NUb2tlbiIsIkhlYWRlcnNDb25zdHJ1Y3RvciIsImlucHV0IiwiaW5pdCIsImhhcyIsIkFVVE9fUkVGUkVTSF9USUNLX0RVUkFUSU9OX01TIiwiQVBJX1ZFUlNJT05fSEVBREVSX05BTUUiLCJBUElfVkVSU0lPTlMiLCJEYXRlIiwiQkFTRTY0VVJMX1JFR0VYIiwiQXV0aEVycm9yIiwiX19pc0F1dGhFcnJvciIsImlzQXV0aEVycm9yIiwiQXV0aEFwaUVycm9yIiwiQXV0aFVua25vd25FcnJvciIsIkN1c3RvbUF1dGhFcnJvciIsIkF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yIiwiQXV0aEludmFsaWRUb2tlblJlc3BvbnNlRXJyb3IiLCJBdXRoSW52YWxpZENyZWRlbnRpYWxzRXJyb3IiLCJBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3IiLCJBdXRoUEtDRUdyYW50Q29kZUV4Y2hhbmdlRXJyb3IiLCJBdXRoUmV0cnlhYmxlRmV0Y2hFcnJvciIsImlzQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IiLCJBdXRoV2Vha1Bhc3N3b3JkRXJyb3IiLCJyZWFzb25zIiwiQXV0aEludmFsaWRKd3RFcnJvciIsIlRPX0JBU0U2NFVSTCIsIklHTk9SRV9CQVNFNjRVUkwiLCJGUk9NX0JBU0U2NFVSTCIsImNoYXJNYXAiLCJjaGFyQ29kZUF0IiwiYnl0ZVRvQmFzZTY0VVJMIiwiYnl0ZSIsImVtaXQiLCJxdWV1ZSIsInF1ZXVlZEJpdHMiLCJwb3MiLCJieXRlRnJvbUJhc2U2NFVSTCIsImNoYXJDb2RlIiwiYml0cyIsImZyb21DaGFyQ29kZSIsInN0cmluZ0Zyb21CYXNlNjRVUkwiLCJzdHIiLCJjb252IiwidXRmOEVtaXQiLCJjb2RlcG9pbnQiLCJmcm9tQ29kZVBvaW50IiwidXRmOFN0YXRlIiwidXRmOHNlcSIsImI2NFN0YXRlIiwiYnl0ZUVtaXQiLCJsZWFkaW5nQml0Iiwic3RyaW5nRnJvbVVURjgiLCJjb2RlcG9pbnRUb1VURjgiLCJiYXNlNjRVcmxUb1VpbnQ4QXJyYXkiLCJvbkJ5dGUiLCJVaW50OEFycmF5IiwiYnl0ZXNUb0Jhc2U2NFVSTCIsImJ5dGVzIiwib25DaGFyIiwiY2hhciIsImxvY2FsU3RvcmFnZVdyaXRlVGVzdHMiLCJ0ZXN0ZWQiLCJ3cml0YWJsZSIsInN1cHBvcnRzTG9jYWxTdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwicmFuZG9tS2V5IiwiTWF0aCIsInJhbmRvbSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwic2V0SXRlbUFzeW5jIiwic3RvcmFnZSIsImdldEl0ZW1Bc3luYyIsImdldEl0ZW0iLCJyZW1vdmVJdGVtQXN5bmMiLCJEZWZlcnJlZCIsInByb21pc2UiLCJwcm9taXNlQ29uc3RydWN0b3IiLCJyZWoiLCJkZWNvZGVKV1QiLCJwYXJ0cyIsImhlYWRlciIsInNpZ25hdHVyZSIsInJhdyIsImRlYzJoZXgiLCJkZWMiLCJzdWJzdHIiLCJnZXRDb2RlQ2hhbGxlbmdlQW5kTWV0aG9kIiwic3RvcmFnZUtleSIsImlzUGFzc3dvcmRSZWNvdmVyeSIsImNvZGVWZXJpZmllciIsImFycmF5IiwiVWludDMyQXJyYXkiLCJjcnlwdG8iLCJjaGFyU2V0IiwiY2hhclNldExlbiIsInZlcmlmaWVyIiwiZmxvb3IiLCJnZXRSYW5kb21WYWx1ZXMiLCJnZW5lcmF0ZVBLQ0VWZXJpZmllciIsInN0b3JlZENvZGVWZXJpZmllciIsImNvZGVDaGFsbGVuZ2UiLCJzdWJ0bGUiLCJUZXh0RW5jb2RlciIsIndhcm4iLCJoYXNoZWQiLCJyYW5kb21TdHJpbmciLCJlbmNvZGVkRGF0YSIsImhhc2giLCJkaWdlc3QiLCJzaGEyNTYiLCJnZW5lcmF0ZVBLQ0VDaGFsbGVuZ2UiLCJBUElfVkVSU0lPTl9SRUdFWCIsIlVVSURfUkVHRVgiLCJ2YWxpZGF0ZVVVSUQiLCJORVRXT1JLX0VSUk9SX0NPREVTIiwibWF5YmVSZXNwb25zZSIsImVycm9yQ29kZSIsInJlc3BvbnNlQVBJVmVyc2lvbiIsImFwaVZlcnNpb24iLCJwYXJzZVJlc3BvbnNlQVBJVmVyc2lvbiIsImdldFRpbWUiLCJlcnJvcl9jb2RlIiwid2Vha19wYXNzd29yZCIsImEiLCJfcmVxdWVzdCIsImp3dCIsInFzIiwicmVkaXJlY3RUbyIsInJlcXVlc3RQYXJhbXMiLCJ4Zm9ybSIsIl9zZXNzaW9uUmVzcG9uc2UiLCJzZXNzaW9uIiwicmVmcmVzaF90b2tlbiIsImV4cGlyZXNfaW4iLCJoYXNTZXNzaW9uIiwiZXhwaXJlc19hdCIsInJvdW5kIiwibm93IiwidXNlciIsIl9zZXNzaW9uUmVzcG9uc2VQYXNzd29yZCIsIl91c2VyUmVzcG9uc2UiLCJfc3NvUmVzcG9uc2UiLCJfZ2VuZXJhdGVMaW5rUmVzcG9uc2UiLCJhY3Rpb25fbGluayIsImVtYWlsX290cCIsImhhc2hlZF90b2tlbiIsInJlZGlyZWN0X3RvIiwidmVyaWZpY2F0aW9uX3R5cGUiLCJyZXN0IiwidCIsInAiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fcmVzdCIsInByb3BlcnRpZXMiLCJfbm9SZXNvbHZlSnNvblJlc3BvbnNlIiwiU0lHTl9PVVRfU0NPUEVTIiwibWZhIiwibGlzdEZhY3RvcnMiLCJfbGlzdEZhY3RvcnMiLCJkZWxldGVGYWN0b3IiLCJfZGVsZXRlRmFjdG9yIiwic2lnbk91dCIsInNjb3BlIiwiaW52aXRlVXNlckJ5RW1haWwiLCJlbWFpbCIsImdlbmVyYXRlTGluayIsIm5ld19lbWFpbCIsIm5ld0VtYWlsIiwiY3JlYXRlVXNlciIsImF0dHJpYnV0ZXMiLCJsaXN0VXNlcnMiLCJfZyIsInBhZ2luYXRpb24iLCJuZXh0UGFnZSIsImxhc3RQYWdlIiwidG90YWwiLCJwYWdlIiwicGVyX3BhZ2UiLCJwZXJQYWdlIiwidXNlcnMiLCJsaW5rcyIsImxpbmsiLCJzdWJzdHJpbmciLCJyZWwiLCJnZXRVc2VyQnlJZCIsInVpZCIsInVwZGF0ZVVzZXJCeUlkIiwiZGVsZXRlVXNlciIsInNob3VsZFNvZnREZWxldGUiLCJzaG91bGRfc29mdF9kZWxldGUiLCJ1c2VySWQiLCJmYWN0b3JzIiwibG9jYWxTdG9yYWdlQWRhcHRlciIsIm1lbW9yeUxvY2FsU3RvcmFnZUFkYXB0ZXIiLCJzdG9yZSIsImludGVybmFscyIsIkxvY2tBY3F1aXJlVGltZW91dEVycm9yIiwiaXNBY3F1aXJlVGltZW91dCIsIk5hdmlnYXRvckxvY2tBY3F1aXJlVGltZW91dEVycm9yIiwibmF2aWdhdG9yTG9jayIsImFjcXVpcmVUaW1lb3V0IiwiYWJvcnRDb250cm9sbGVyIiwibG9ja3MiLCJyZXF1ZXN0IiwibW9kZSIsImlmQXZhaWxhYmxlIiwibG9jayIsImNvbmZpZ3VyYWJsZSIsIl9fbWFnaWNfXyIsInBvbHlmaWxsR2xvYmFsVGhpcyIsIkRFRkFVTFRfT1BUSU9OUyIsImRlYnVnIiwiaGFzQ3VzdG9tQXV0aG9yaXphdGlvbkhlYWRlciIsImxvY2tOb09wIiwiR29UcnVlQ2xpZW50IiwibWVtb3J5U3RvcmFnZSIsInN0YXRlQ2hhbmdlRW1pdHRlcnMiLCJNYXAiLCJhdXRvUmVmcmVzaFRpY2tlciIsInZpc2liaWxpdHlDaGFuZ2VkQ2FsbGJhY2siLCJyZWZyZXNoaW5nRGVmZXJyZWQiLCJpbml0aWFsaXplUHJvbWlzZSIsInN1cHByZXNzR2V0U2Vzc2lvbldhcm5pbmciLCJsb2NrQWNxdWlyZWQiLCJwZW5kaW5nSW5Mb2NrIiwiYnJvYWRjYXN0Q2hhbm5lbCIsImluc3RhbmNlSUQiLCJuZXh0SW5zdGFuY2VJRCIsImxvZ0RlYnVnTWVzc2FnZXMiLCJhZG1pbiIsImp3a3MiLCJqd2tzX2NhY2hlZF9hdCIsIk1JTl9TQUZFX0lOVEVHRVIiLCJ2ZXJpZnkiLCJfdmVyaWZ5IiwiZW5yb2xsIiwiX2Vucm9sbCIsInVuZW5yb2xsIiwiX3VuZW5yb2xsIiwiY2hhbGxlbmdlIiwiX2NoYWxsZW5nZSIsImNoYWxsZW5nZUFuZFZlcmlmeSIsIl9jaGFsbGVuZ2VBbmRWZXJpZnkiLCJnZXRBdXRoZW50aWNhdG9yQXNzdXJhbmNlTGV2ZWwiLCJfZ2V0QXV0aGVudGljYXRvckFzc3VyYW5jZUxldmVsIiwiQnJvYWRjYXN0Q2hhbm5lbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfZGVidWciLCJfbm90aWZ5QWxsU3Vic2NyaWJlcnMiLCJpbml0aWFsaXplIiwidG9JU09TdHJpbmciLCJfYWNxdWlyZUxvY2siLCJfaW5pdGlhbGl6ZSIsImhyZWYiLCJwYXJzZVBhcmFtZXRlcnNGcm9tVVJMIiwibG9jYXRpb24iLCJjYWxsYmFja1VybFR5cGUiLCJfaXNJbXBsaWNpdEdyYW50Q2FsbGJhY2siLCJfaXNQS0NFQ2FsbGJhY2siLCJfZ2V0U2Vzc2lvbkZyb21VUkwiLCJpc0F1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvciIsIl9yZW1vdmVTZXNzaW9uIiwicmVkaXJlY3RUeXBlIiwiX3NhdmVTZXNzaW9uIiwiX3JlY292ZXJBbmRSZWZyZXNoIiwiX2hhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJzaWduSW5Bbm9ueW1vdXNseSIsImNyZWRlbnRpYWxzIiwiZ290cnVlX21ldGFfc2VjdXJpdHkiLCJjYXB0Y2hhX3Rva2VuIiwiY2FwdGNoYVRva2VuIiwic2lnblVwIiwicGFzc3dvcmQiLCJjb2RlQ2hhbGxlbmdlTWV0aG9kIiwiZW1haWxSZWRpcmVjdFRvIiwiY29kZV9jaGFsbGVuZ2UiLCJjb2RlX2NoYWxsZW5nZV9tZXRob2QiLCJwaG9uZSIsInNpZ25JbldpdGhQYXNzd29yZCIsIndlYWtQYXNzd29yZCIsInNpZ25JbldpdGhPQXV0aCIsIl9oYW5kbGVQcm92aWRlclNpZ25JbiIsInByb3ZpZGVyIiwic2NvcGVzIiwicXVlcnlQYXJhbXMiLCJza2lwQnJvd3NlclJlZGlyZWN0IiwiZXhjaGFuZ2VDb2RlRm9yU2Vzc2lvbiIsImF1dGhDb2RlIiwiX2V4Y2hhbmdlQ29kZUZvclNlc3Npb24iLCJzaWduSW5XaXRoV2ViMyIsImNoYWluIiwic2lnbkluV2l0aFNvbGFuYSIsIl9oIiwiX2oiLCJfayIsIl9sIiwiX20iLCJ3YWxsZXQiLCJzdGF0ZW1lbnQiLCJyZXNvbHZlZFdhbGxldCIsIndpbmRvd0FueSIsInNvbGFuYSIsInNpZ25JbiIsInNpZ25NZXNzYWdlIiwib3V0cHV0IiwiaXNzdWVkQXQiLCJkb21haW4iLCJob3N0IiwidXJpIiwib3V0cHV0VG9Qcm9jZXNzIiwic2lnbmVkTWVzc2FnZSIsInB1YmxpY0tleSIsInRvQmFzZTU4Iiwibm90QmVmb3JlIiwiZXhwaXJhdGlvblRpbWUiLCJjaGFpbklkIiwibm9uY2UiLCJyZXF1ZXN0SWQiLCJyZXNvdXJjZXMiLCJyZXNvdXJjZSIsIm1heWJlU2lnbmF0dXJlIiwic3RvcmFnZUl0ZW0iLCJhdXRoX2NvZGUiLCJjb2RlX3ZlcmlmaWVyIiwic2lnbkluV2l0aElkVG9rZW4iLCJpZF90b2tlbiIsInNpZ25JbldpdGhPdHAiLCJjcmVhdGVfdXNlciIsInNob3VsZENyZWF0ZVVzZXIiLCJtZXNzYWdlSWQiLCJtZXNzYWdlX2lkIiwidmVyaWZ5T3RwIiwic2lnbkluV2l0aFNTTyIsInByb3ZpZGVyX2lkIiwicHJvdmlkZXJJZCIsInNraXBfaHR0cF9yZWRpcmVjdCIsInJlYXV0aGVudGljYXRlIiwiX3JlYXV0aGVudGljYXRlIiwiX3VzZVNlc3Npb24iLCJzZXNzaW9uRXJyb3IiLCJlbmRwb2ludCIsImdldFNlc3Npb24iLCJsYXN0Iiwid2FpdE9uIiwic3BsaWNlIiwiX19sb2FkU2Vzc2lvbiIsImN1cnJlbnRTZXNzaW9uIiwibWF5YmVTZXNzaW9uIiwiX2lzVmFsaWRTZXNzaW9uIiwiaGFzRXhwaXJlZCIsIkFVVE9fUkVGUkVTSF9USUNLX1RIUkVTSE9MRCIsImlzU2VydmVyIiwic3VwcHJlc3NXYXJuaW5nIiwiUHJveHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsIlJlZmxlY3QiLCJfY2FsbFJlZnJlc2hUb2tlbiIsImdldFVzZXIiLCJfZ2V0VXNlciIsImlzQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IiLCJ1cGRhdGVVc2VyIiwiX3VwZGF0ZVVzZXIiLCJzZXNzaW9uRGF0YSIsInVzZXJFcnJvciIsInNldFNlc3Npb24iLCJfc2V0U2Vzc2lvbiIsInRpbWVOb3ciLCJleHBpcmVzQXQiLCJleHAiLCJyZWZyZXNoZWRTZXNzaW9uIiwidG9rZW5fdHlwZSIsInJlZnJlc2hTZXNzaW9uIiwiX3JlZnJlc2hTZXNzaW9uIiwiZGVsZXRlIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInByb3ZpZGVyX3Rva2VuIiwicHJvdmlkZXJfcmVmcmVzaF90b2tlbiIsImFjdHVhbGx5RXhwaXJlc0luIiwiY3VycmVudFN0b3JhZ2VDb250ZW50IiwiX3NpZ25PdXQiLCJpc0F1dGhBcGlFcnJvciIsIm9uQXV0aFN0YXRlQ2hhbmdlIiwic3Vic2NyaXB0aW9uIiwiX2VtaXRJbml0aWFsU2Vzc2lvbiIsInJlc2V0UGFzc3dvcmRGb3JFbWFpbCIsImdldFVzZXJJZGVudGl0aWVzIiwiaWRlbnRpdGllcyIsImxpbmtJZGVudGl0eSIsIl9nZXRVcmxGb3JQcm92aWRlciIsInVubGlua0lkZW50aXR5IiwiaWRlbnRpdHkiLCJpZGVudGl0eV9pZCIsIl9yZWZyZXNoQWNjZXNzVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJkZWJ1Z05hbWUiLCJzdGFydGVkQXQiLCJhdHRlbXB0IiwiYWNjZXB0Iiwic2xlZXAiLCJwb3ciLCJpc1JldHJ5YWJsZSIsIm5leHRCYWNrT2ZmSW50ZXJ2YWwiLCJJbmZpbml0eSIsImV4cGlyZXNXaXRoTWFyZ2luIiwicHJvbWlzZXMiLCJfcmVtb3ZlVmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjayIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfc3RhcnRBdXRvUmVmcmVzaCIsIl9zdG9wQXV0b1JlZnJlc2giLCJ0aWNrZXIiLCJfYXV0b1JlZnJlc2hUb2tlblRpY2siLCJ1bnJlZiIsInVucmVmVGltZXIiLCJzdGFydEF1dG9SZWZyZXNoIiwic3RvcEF1dG9SZWZyZXNoIiwiZXhwaXJlc0luVGlja3MiLCJfb25WaXNpYmlsaXR5Q2hhbmdlZCIsImNhbGxlZEZyb21Jbml0aWFsaXplIiwibWV0aG9kTmFtZSIsInZpc2liaWxpdHlTdGF0ZSIsInVybFBhcmFtcyIsImVuY29kZVVSSUNvbXBvbmVudCIsImZsb3dQYXJhbXMiLCJmYWN0b3JJZCIsImZyaWVuZGx5X25hbWUiLCJmcmllbmRseU5hbWUiLCJmYWN0b3JfdHlwZSIsImZhY3RvclR5cGUiLCJpc3N1ZXIiLCJ0b3RwIiwicXJfY29kZSIsImNoYWxsZW5nZV9pZCIsImNoYWxsZW5nZUlkIiwiY2hhbGxlbmdlRGF0YSIsImNoYWxsZW5nZUVycm9yIiwiZmFjdG9yIiwiY3VycmVudExldmVsIiwibmV4dExldmVsIiwiY3VycmVudEF1dGhlbnRpY2F0aW9uTWV0aG9kcyIsImFhbCIsImFtciIsImZldGNoSndrIiwia2lkIiwiandrIiwiZ2V0Q2xhaW1zIiwicmF3SGVhZGVyIiwidmFsaWRhdGVFeHAiLCJhbGciLCJjbGFpbXMiLCJhbGdvcml0aG0iLCJuYW1lZEN1cnZlIiwiZ2V0QWxnb3JpdGhtIiwic2lnbmluZ0tleSIsImltcG9ydEtleSIsImhpZ2hTdXJyb2dhdGUiLCJzdHJpbmdUb1VURjgiLCJzdHJpbmdUb1VpbnQ4QXJyYXkiLCJTdXBhYmFzZUF1dGhDbGllbnQiLCJTdXBhYmFzZUNsaWVudCIsInN1cGFiYXNlVXJsIiwiX3N1cGFiYXNlVXJsIiwiZW5kc1dpdGgiLCJiYXNlVXJsIiwicmVhbHRpbWVVcmwiLCJwcm90b2NvbCIsImF1dGhVcmwiLCJzdG9yYWdlVXJsIiwiZnVuY3Rpb25zVXJsIiwiZGVmYXVsdFN0b3JhZ2VLZXkiLCJob3N0bmFtZSIsImRlZmF1bHRzIiwiZGIiLCJkYk9wdGlvbnMiLCJhdXRoIiwiYXV0aE9wdGlvbnMiLCJyZWFsdGltZSIsInJlYWx0aW1lT3B0aW9ucyIsImdsb2JhbE9wdGlvbnMiLCJhcHBseVNldHRpbmdEZWZhdWx0cyIsIl9pbml0U3VwYWJhc2VBdXRoQ2xpZW50IiwiX2dldEFjY2Vzc1Rva2VuIiwiX2luaXRSZWFsdGltZUNsaWVudCIsIl9saXN0ZW5Gb3JBdXRoRXZlbnRzIiwiZnVuY3Rpb25zIiwiYXV0aEhlYWRlcnMiLCJfaGFuZGxlVG9rZW5DaGFuZ2VkIiwic291cmNlIiwiY2hhbmdlZEFjY2Vzc1Rva2VuIiwibiIsIml0ZXJhdG9yIiwiR2VuZXJhdG9yIiwidSIsImNyZWF0ZSIsIl9yZWdlbmVyYXRvckRlZmluZTIiLCJmIiwieSIsIkciLCJ2IiwibCIsIlR5cGVFcnJvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGlzcGxheU5hbWUiLCJfcmVnZW5lcmF0b3IiLCJ3IiwiX2ludm9rZSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJndW1lbnRzIiwiX25leHQiLCJfdGhyb3ciLCJzdXBhYmFzZSIsIl9jYWxsZWUiLCJfY29udGV4dCIsImNocm9tZSIsImxvY2FsIiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJfZGVmaW5lUHJvcGVydHkiLCJfY2FsbGVlMyIsIl9jb250ZXh0MyIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiX2RlZmluZVByb3BlcnRpZXMiLCJfdG9Qcm9wZXJ0eUtleSIsIl90eXBlb2YiLCJ0b1ByaW1pdGl2ZSIsIl90b1ByaW1pdGl2ZSIsIlN0b3JhZ2VNYW5hZ2VyIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2dldERhdGEiLCJfeWllbGQkc3VwYWJhc2UkYXV0aCQiLCJfeWllbGQkUHJvbWlzZSRhbGwiLCJfeWllbGQkUHJvbWlzZSRhbGwyIiwibGlua3NSZXMiLCJjb2xsZWN0aW9uc1JlcyIsImNvbGxlY3Rpb25zIiwiX3RoaXMiLCJnZXREZWZhdWx0RGF0YSIsImRiTGluayIsImhpZ2hsaWdodHMiLCJ0aXRsZSIsImZhdmljb24iLCJ1c2VyTm90ZSIsInVzZXJfbm90ZSIsImFpU3VtbWFyeSIsImFpX3N1bW1hcnkiLCJjYXRlZ29yeSIsImNvbGxlY3Rpb25JZCIsImNvbGxlY3Rpb25faWQiLCJpc0luSW5ib3giLCJpc19pbl9pbmJveCIsInBhcnNlSGlnaGxpZ2h0cyIsImNyZWF0ZWRBdCIsImNyZWF0ZWRfYXQiLCJ1cGRhdGVkQXQiLCJ1cGRhdGVkX2F0IiwiZGJDb2wiLCJkZXNjcmlwdGlvbiIsImNvbG9yIiwiY2F0ZWdvcmllcyIsImdldERlZmF1bHRDYXRlZ29yaWVzIiwiZGVmYXVsdENhdGVnb3J5IiwiYXV0b1N1bW1hcml6ZSIsIl9hZGRMaW5rIiwiX3Nlc3Npb25EYXRhJHNlc3Npb24iLCJfeWllbGQkc3VwYWJhc2UkYXV0aCQyIiwiX3lpZWxkJHN1cGFiYXNlJGZyb20kIiwic3VjY2VzcyIsInVzZXJfaWQiLCJsaW5rSWQiLCJfeCIsIl91cGRhdGVMaW5rIiwidXBkYXRlcyIsImRiVXBkYXRlcyIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDIiLCJfb2JqZWN0U3ByZWFkIiwiX3gyIiwiX3gzIiwiX2RlbGV0ZUxpbmsiLCJfY2FsbGVlNCIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDMiLCJfY29udGV4dDQiLCJfeDQiLCJfYWRkQ29sbGVjdGlvbiIsIl9jYWxsZWU1IiwiY29sbGVjdGlvbiIsIl9zZXNzaW9uRGF0YSRzZXNzaW9uMiIsIl95aWVsZCRzdXBhYmFzZSRhdXRoJDMiLCJkYkNvbGxlY3Rpb24iLCJfeWllbGQkc3VwYWJhc2UkZnJvbSQ0IiwiX2NvbnRleHQ1IiwiX3g1IiwiX3VwZGF0ZUNvbGxlY3Rpb24iLCJfY2FsbGVlNiIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDUiLCJfY29udGV4dDYiLCJfeDYiLCJfeDciLCJfZGVsZXRlQ29sbGVjdGlvbiIsIl9jYWxsZWU3IiwiX3lpZWxkJHN1cGFiYXNlJGZyb20kNiIsIl9jb250ZXh0NyIsIl94OCIsIl9zZWFyY2hMaW5rcyIsIl9jYWxsZWU4IiwiX3Nlc3Npb25EYXRhJHNlc3Npb24zIiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkNCIsIl95aWVsZCRzdXBhYmFzZSRycGMiLCJfdCIsIl90aGlzMiIsIl9jb250ZXh0OCIsInNlYXJjaF9xdWVyeSIsInVzZXJfdXVpZCIsInJlc3VsdF9saW1pdCIsInNlYXJjaFJhbmsiLCJyYW5rIiwic2VhcmNoSGVhZGxpbmUiLCJoZWFkbGluZSIsIl94OSIsIl9nZXRVc2VyVGFncyIsIl9jYWxsZWU5IiwiX3Nlc3Npb25EYXRhJHNlc3Npb240IiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkNSIsIl95aWVsZCRzdXBhYmFzZSRycGMyIiwiX3QyIiwiX2NvbnRleHQ5IiwidGFnIiwidXNhZ2VDb3VudCIsInVzYWdlX2NvdW50IiwiX2dldExpbmtUYWdzIiwiX2NhbGxlZTAiLCJfeWllbGQkc3VwYWJhc2UkcnBjMyIsIl90MyIsIl9jb250ZXh0MCIsImxpbmtfdXVpZCIsIl94MCIsIl9hZGRUYWdzVG9MaW5rIiwiX2NhbGxlZTEiLCJ0YWdOYW1lcyIsIl9zZXNzaW9uRGF0YSRzZXNzaW9uNSIsIl95aWVsZCRzdXBhYmFzZSRhdXRoJDYiLCJfeWllbGQkc3VwYWJhc2UkcnBjNCIsIl90NCIsIl9jb250ZXh0MSIsInRhZ19uYW1lcyIsIl94MSIsIl94MTAiLCJfZ2V0TGlua3NCeVRhZyIsIl9jYWxsZWUxMCIsInRhZ05hbWUiLCJfc2Vzc2lvbkRhdGEkc2Vzc2lvbjYiLCJfeWllbGQkc3VwYWJhc2UkYXV0aCQ3IiwiX3lpZWxkJHN1cGFiYXNlJHJwYzUiLCJfdDUiLCJfdGhpczMiLCJfY29udGV4dDEwIiwidGFnX25hbWUiLCJfeDExIiwiX2NsZWFudXBVbnVzZWRUYWdzIiwiX2NhbGxlZTExIiwiX3Nlc3Npb25EYXRhJHNlc3Npb243IiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkOCIsIl95aWVsZCRzdXBhYmFzZSRycGM2IiwiX3Q2IiwiX2NvbnRleHQxMSIsIl9tb3ZlVG9JbmJveCIsIl9jYWxsZWUxMiIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDciLCJfY29udGV4dDEyIiwiX3gxMiIsIl9tb3ZlRnJvbUluYm94IiwiX2NhbGxlZTEzIiwiX3lpZWxkJHN1cGFiYXNlJGZyb20kOCIsIl9jb250ZXh0MTMiLCJfeDEzIiwiX3gxNCIsIl9nZXRJbmJveExpbmtzIiwiX2NhbGxlZTE0IiwiX3Nlc3Npb25EYXRhJHNlc3Npb244IiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkOSIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDkiLCJfdGhpczQiLCJfY29udGV4dDE0IiwiX2J1bGtNb3ZlRnJvbUluYm94IiwiX2NhbGxlZTE1IiwibGlua0lkcyIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDAiLCJfY29udGV4dDE1IiwiX3gxNSIsIl94MTYiLCJfdG9nZ2xlQ29sbGVjdGlvblNoYXJpbmciLCJfY2FsbGVlMTYiLCJtYWtlUHVibGljIiwiX3Nlc3Npb25EYXRhJHNlc3Npb245IiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkMCIsIl95aWVsZCRzdXBhYmFzZSRycGM3IiwiX3Q3IiwiX2NvbnRleHQxNiIsImNvbGxlY3Rpb25fdXVpZCIsIm1ha2VfcHVibGljIiwic2hhcmVUb2tlbiIsInNoYXJlX3Rva2VuIiwiX3gxNyIsIl94MTgiLCJfZ2V0Q29sbGVjdGlvblNoYXJpbmdJbmZvIiwiX2NhbGxlZTE3IiwiX3Nlc3Npb25EYXRhJHNlc3Npb24wIiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkMSIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDEiLCJfdDgiLCJfY29udGV4dDE3IiwiaXNQdWJsaWMiLCJpc19wdWJsaWMiLCJ2aWV3Q291bnQiLCJ2aWV3X2NvdW50IiwiX3gxOSIsImlzRGVmYXVsdCIsIl9nZXRMaW5rQnlVcmwiLCJfY2FsbGVlMTgiLCJfc2Vzc2lvbkRhdGEkc2Vzc2lvbjEiLCJfeWllbGQkc3VwYWJhc2UkYXV0aCQxMCIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDEwIiwiX2NvbnRleHQxOCIsIl94MjAiLCJoaWdobGlnaHRzRGF0YSIsInBhcnNlZCIsIl9nZXRQdWJsaWNDb2xsZWN0aW9uIiwiX2NhbGxlZTE5IiwiX3lpZWxkJHN1cGFiYXNlJHJwYzgiLCJfdDkiLCJfY29udGV4dDE5Iiwib3duZXJFbWFpbCIsIm93bmVyX2VtYWlsIiwiX3gyMSIsIl9nZXRQdWJsaWNDb2xsZWN0aW9uTGlua3MiLCJfY2FsbGVlMjAiLCJfeWllbGQkc3VwYWJhc2UkcnBjOSIsIl90MCIsIl9jb250ZXh0MjAiLCJ0YWdzIiwiX3gyMiIsIl9pbmNyZW1lbnRWaWV3Q291bnQiLCJfY2FsbGVlMjEiLCJfeWllbGQkc3VwYWJhc2UkcnBjMCIsIl90MSIsIl9jb250ZXh0MjEiLCJfeDIzIiwiYWlTZXJ2aWNlIiwiQUlTZXJ2aWNlIiwibW9kZWwiLCJfZ2VuZXJhdGVTdW1tYXJ5IiwiY29udGVudCIsImdlbmVyYXRlUGxhY2Vob2xkZXJTdW1tYXJ5IiwiY2FsbE9wZW5BSSIsImNvbnRlbnRMZW5ndGgiLCJfY2FsbE9wZW5BSSIsIl9kYXRhJGNob2ljZXMkIiwicHJvbXB0Iiwicm9sZSIsIm1heF90b2tlbnMiLCJ0ZW1wZXJhdHVyZSIsImNob2ljZXMiLCJzYXZlQ3VycmVudFBhZ2UiLCJfc2F2ZUN1cnJlbnRQYWdlIiwidGFiIiwibGlua1VybCIsInBhZ2VDb250ZW50IiwibmV3TGluayIsImVycm9yTWVzc2FnZSIsInN0YXJ0c1dpdGgiLCJ0YWJzIiwic2VuZE1lc3NhZ2UiLCJhY3Rpb24iLCJnZW5lcmF0ZVN1bW1hcnkiLCJmYXZJY29uVXJsIiwiYWRkTGluayIsIm5vdGlmaWNhdGlvbnMiLCJpY29uVXJsIiwicnVudGltZSIsImdldFBhZ2VDb250ZW50IiwiX2dldFBhZ2VDb250ZW50IiwidGFiSWQiLCJzYXZlSGlnaGxpZ2h0IiwiX3NhdmVIaWdobGlnaHQiLCJzZWxlY3RlZFRleHQiLCJwb3NpdGlvbiIsImV4aXN0aW5nTGluayIsImhpZ2hsaWdodCIsInVwZGF0ZWRIaWdobGlnaHRzIiwidXBkYXRlUmVzdWx0IiwiZ2V0TGlua0J5VXJsIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwidXBkYXRlTGluayIsIm9uSW5zdGFsbGVkIiwiYWRkTGlzdGVuZXIiLCJjb250ZXh0TWVudXMiLCJjb250ZXh0cyIsIm9uQ2xpY2tlZCIsIm1lbnVJdGVtSWQiLCJzZWxlY3Rpb25UZXh0IiwiX3JlZjIiLCJvbk1lc3NhZ2UiLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJfdGFicyIsIl9yZXN1bHQiLCJhY3RpdmUiLCJjdXJyZW50V2luZG93IiwiY29tbWFuZHMiLCJvbkNvbW1hbmQiLCJfcmVmNCIsImNvbW1hbmQiLCJfdGFiczIiLCJzaWRlUGFuZWwiXSwic291cmNlUm9vdCI6IiJ9