/*! For license information please see background.js.LICENSE.txt */
(()=>{"use strict";var e,t,r,n={45:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(825));t.default=class{constructor(e,{headers:t={},schema:r,fetch:n}){this.url=e,this.headers=t,this.schema=r,this.fetch=n}select(e,{head:t=!1,count:r}={}){const n=t?"HEAD":"GET";let s=!1;const o=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!s?"":('"'===e&&(s=!s),e)).join("");return this.url.searchParams.set("select",o),r&&(this.headers.Prefer=`count=${r}`),new i.default({method:n,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(e,{count:t,defaultToNull:r=!0}={}){const n=[];if(this.headers.Prefer&&n.push(this.headers.Prefer),t&&n.push(`count=${t}`),r||n.push("missing=default"),this.headers.Prefer=n.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new i.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}upsert(e,{onConflict:t,ignoreDuplicates:r=!1,count:n,defaultToNull:s=!0}={}){const o=[`resolution=${r?"ignore":"merge"}-duplicates`];if(void 0!==t&&this.url.searchParams.set("on_conflict",t),this.headers.Prefer&&o.push(this.headers.Prefer),n&&o.push(`count=${n}`),s||o.push("missing=default"),this.headers.Prefer=o.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new i.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}update(e,{count:t}={}){const r=[];return this.headers.Prefer&&r.push(this.headers.Prefer),t&&r.push(`count=${t}`),this.headers.Prefer=r.join(","),new i.default({method:"PATCH",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}delete({count:e}={}){const t=[];return e&&t.push(`count=${e}`),this.headers.Prefer&&t.unshift(this.headers.Prefer),this.headers.Prefer=t.join(","),new i.default({method:"DELETE",url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}}},261:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(660));class s extends i.default{select(e){let t=!1;const r=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!t?"":('"'===e&&(t=!t),e)).join("");return this.url.searchParams.set("select",r),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(e,{ascending:t=!0,nullsFirst:r,foreignTable:n,referencedTable:i=n}={}){const s=i?`${i}.order`:"order",o=this.url.searchParams.get(s);return this.url.searchParams.set(s,`${o?`${o},`:""}${e}.${t?"asc":"desc"}${void 0===r?"":r?".nullsfirst":".nullslast"}`),this}limit(e,{foreignTable:t,referencedTable:r=t}={}){const n=void 0===r?"limit":`${r}.limit`;return this.url.searchParams.set(n,`${e}`),this}range(e,t,{foreignTable:r,referencedTable:n=r}={}){const i=void 0===n?"offset":`${n}.offset`,s=void 0===n?"limit":`${n}.limit`;return this.url.searchParams.set(i,`${e}`),this.url.searchParams.set(s,""+(t-e+1)),this}abortSignal(e){return this.signal=e,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return"GET"===this.method?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:e=!1,verbose:t=!1,settings:r=!1,buffers:n=!1,wal:i=!1,format:s="text"}={}){var o;const a=[e?"analyze":null,t?"verbose":null,r?"settings":null,n?"buffers":null,i?"wal":null].filter(Boolean).join("|"),c=null!==(o=this.headers.Accept)&&void 0!==o?o:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${s}; for="${c}"; options=${a};`,this}rollback(){var e;return(null!==(e=this.headers.Prefer)&&void 0!==e?e:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}}t.default=s},279:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PostgrestError=t.PostgrestBuilder=t.PostgrestTransformBuilder=t.PostgrestFilterBuilder=t.PostgrestQueryBuilder=t.PostgrestClient=void 0;const i=n(r(342));t.PostgrestClient=i.default;const s=n(r(45));t.PostgrestQueryBuilder=s.default;const o=n(r(825));t.PostgrestFilterBuilder=o.default;const a=n(r(261));t.PostgrestTransformBuilder=a.default;const c=n(r(660));t.PostgrestBuilder=c.default;const u=n(r(818));t.PostgrestError=u.default,t.default={PostgrestClient:i.default,PostgrestQueryBuilder:s.default,PostgrestFilterBuilder:o.default,PostgrestTransformBuilder:a.default,PostgrestBuilder:c.default,PostgrestError:u.default}},342:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(45)),s=n(r(825)),o=r(530);class a{constructor(e,{headers:t={},schema:r,fetch:n}={}){this.url=e,this.headers=Object.assign(Object.assign({},o.DEFAULT_HEADERS),t),this.schemaName=r,this.fetch=n}from(e){const t=new URL(`${this.url}/${e}`);return new i.default(t,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(e){return new a(this.url,{headers:this.headers,schema:e,fetch:this.fetch})}rpc(e,t={},{head:r=!1,get:n=!1,count:i}={}){let o;const a=new URL(`${this.url}/rpc/${e}`);let c;r||n?(o=r?"HEAD":"GET",Object.entries(t).filter(([e,t])=>void 0!==t).map(([e,t])=>[e,Array.isArray(t)?`{${t.join(",")}}`:`${t}`]).forEach(([e,t])=>{a.searchParams.append(e,t)})):(o="POST",c=t);const u=Object.assign({},this.headers);return i&&(u.Prefer=`count=${i}`),new s.default({method:o,url:a,headers:u,schema:this.schemaName,body:c,fetch:this.fetch,allowEmpty:!1})}}t.default=a},508:(e,t,r)=>{function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach(function(t){a(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function o(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=l(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,i=function(){};return{s:i,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,o=!0,a=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){a=!0,s=e},f:function(){try{o||null==r.return||r.return()}finally{if(a)throw s}}}}function a(e,t,r){return(t=b(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||l(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,i,s,o,a=[],c=!0,u=!1;try{if(s=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=s.call(r)).done)&&(a.push(n.value),a.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(u)throw i}}return a}}(e,t)||l(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){if(e){if("string"==typeof e)return h(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?h(e,t):void 0}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function d(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",i=r.toStringTag||"@@toStringTag";function s(r,n,i,s){var c=n&&n.prototype instanceof a?n:a,u=Object.create(c.prototype);return f(u,"_invoke",function(r,n,i){var s,a,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,r){return s=t,a=0,c=e,d.n=r,o}};function f(r,n){for(a=r,c=n,t=0;!h&&u&&!i&&t<l.length;t++){var i,s=l[t],f=d.p,g=s[2];r>3?(i=g===n)&&(c=s[(a=s[4])?5:(a=3,3)],s[4]=s[5]=e):s[0]<=f&&((i=r<2&&f<s[1])?(a=0,d.v=n,d.n=s[1]):f<g&&(i=r<3||s[0]>n||n>g)&&(s[4]=r,s[5]=n,d.n=g,a=0))}if(i||r>1)return o;throw h=!0,n}return function(i,l,g){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,g),a=l,c=g;(t=a<2?e:c)||!h;){s||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(u=2,s){if(a||(i="next"),t=s[i]){if(!(t=t.call(s,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=s.return)&&t.call(s),a<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),a=1);s=e}else if((t=(h=d.n<0)?c:r.call(n,d))!==o)break}catch(t){s=e,a=1,c=t}finally{u=1}}return{value:t,done:h}}}(r,i,s),!0),u}var o={};function a(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][n]?t(t([][n]())):(f(t={},n,function(){return this}),t),h=u.prototype=a.prototype=Object.create(l);function g(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,f(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,f(h,"constructor",u),f(u,"constructor",c),c.displayName="GeneratorFunction",f(u,i,"GeneratorFunction"),f(h),f(h,i,"Generator"),f(h,n,function(){return this}),f(h,"toString",function(){return"[object Generator]"}),(d=function(){return{w:s,m:g}})()}function f(e,t,r,n){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}f=function(e,t,r,n){if(t)i?i(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r;else{var s=function(t,r){f(e,t,function(e){return this._invoke(t,r,e)})};s("next",0),s("throw",1),s("return",2)}},f(e,t,r,n)}function g(e,t,r,n,i,s,o){try{var a=e[s](o),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,i)}function p(e){return function(){var t=this,r=arguments;return new Promise(function(n,i){var s=e.apply(t,r);function o(e){g(s,n,i,o,a,"next",e)}function a(e){g(s,n,i,o,a,"throw",e)}o(void 0)})}}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,b(n.key),n)}}function y(e,t,r){return t&&m(e.prototype,t),r&&m(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function b(e){var t=function(e){if("object"!=n(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=n(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==n(t)?t:t+""}r.r(t),r.d(t,{AIService:()=>w,aiService:()=>S,createAIService:()=>k});var w=function(){return y(function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};v(this,e),this.apiKey=t.apiKey||"",this.model=t.model||"gpt-3.5-turbo"},[{key:"analyzeContent",value:(s=p(d().m(function e(t,r,n){var i,s;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generateRuleBasedAnalysis(t,r,n));case 1:return e.p=1,e.n=2,this.callOpenAIForAnalysis(t,r,n);case 2:return i=e.v,e.a(2,i);case 3:return e.p=3,s=e.v,console.error("AI analysis failed, falling back to rule-based:",s),e.a(2,this.generateRuleBasedAnalysis(t,r,n))}},e,this,[[1,3]])})),function(e,t,r){return s.apply(this,arguments)})},{key:"generateSummary",value:(i=p(d().m(function e(t,r,n){var i,s;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generatePlaceholderSummary(t,r,n));case 1:return e.p=1,e.n=2,this.callOpenAI(t,r,n);case 2:return i=e.v,e.a(2,i);case 3:return e.p=3,s=e.v,console.error("AI summary generation failed:",s),e.a(2,this.generatePlaceholderSummary(t,r,n))}},e,this,[[1,3]])})),function(e,t,r){return i.apply(this,arguments)})},{key:"generateRuleBasedAnalysis",value:function(e,t,r){var n=new URL(r).hostname,i=e.toLowerCase(),s=t.toLowerCase(),o="".concat(s," ").concat(i),a=this.detectContentType(n,t,e),c=this.generateRuleBasedTags(o,n,a),u=this.generateRuleBasedCategories(o,n,a),l=this.extractTopics(o),h=this.estimateComplexity(e),d=this.estimateReadingTime(e);return{summary:this.generatePlaceholderSummary(e,t,r),tagSuggestions:c,categorySuggestions:u,contentType:a,topics:l,complexity:h,readingTime:d}}},{key:"detectContentType",value:function(e,t,r){var n=t.toLowerCase(),i=r.toLowerCase();return e.includes("youtube.com")||e.includes("vimeo.com")||e.includes("twitch.tv")?"video":e.includes("docs.")||n.includes("documentation")||i.includes("api reference")||i.includes("getting started")?"documentation":n.includes("tutorial")||n.includes("how to")||n.includes("guide")||i.includes("step by step")?"tutorial":e.includes("news")||e.includes("cnn.com")||e.includes("bbc.com")||e.includes("techcrunch.com")||e.includes("reuters.com")?"news":e.includes("medium.com")||e.includes("blog")||n.includes("thoughts on")||i.includes("published")?"blog":e.includes("arxiv.org")||e.includes("scholar.google")||n.includes("research")||i.includes("abstract")?"research":e.includes("github.com")||n.includes("tool")||n.includes("app")||i.includes("download")?"tool":n.includes("reference")||n.includes("cheat sheet")||i.includes("quick reference")?"reference":"article"}},{key:"generateRuleBasedTags",value:function(e,t,r){for(var n=[],i=0,s=Object.entries({"github.com":[{tag:"github",confidence:.9,reason:"GitHub repository"}],"stackoverflow.com":[{tag:"programming",confidence:.8,reason:"Stack Overflow content"}],"medium.com":[{tag:"blog",confidence:.7,reason:"Medium article"}],"youtube.com":[{tag:"video",confidence:.9,reason:"YouTube video"}],"linkedin.com":[{tag:"career",confidence:.7,reason:"LinkedIn content"}]});i<s.length;i++){var o=u(s[i],2),a=o[0],l=o[1];t.includes(a)&&n.push.apply(n,c(l))}for(var h=0,d=Object.entries({javascript:["javascript","js","node.js","react","vue","angular"],python:["python","django","flask","pandas","numpy"],"web-development":["html","css","frontend","backend","full-stack"],"machine-learning":["ml","ai","neural network","deep learning","tensorflow"],"data-science":["data science","analytics","visualization","statistics"],mobile:["android","ios","react native","flutter","mobile app"],devops:["docker","kubernetes","aws","cloud","deployment"],database:["sql","postgresql","mongodb","database design"],security:["cybersecurity","encryption","vulnerability","penetration testing"]});h<d.length;h++){var f=u(d[h],2),g=f[0],p=f[1].filter(function(t){return e.includes(t)}).length;if(p>0){var v=Math.min(.9,.4+.1*p);n.push({tag:g,confidence:v,reason:"Found ".concat(p," related keyword(s)")})}}n.push({tag:r||"general",confidence:.6,reason:"Detected as ".concat(r," content")}),(e.includes("beginner")||e.includes("getting started"))&&n.push({tag:"beginner",confidence:.7,reason:"Beginner-friendly content"}),(e.includes("advanced")||e.includes("expert"))&&n.push({tag:"advanced",confidence:.7,reason:"Advanced content"});for(var m=0,y=["productivity","business","startup","marketing","sales","finance"];m<y.length;m++){var b=y[m];e.includes(b)&&n.push({tag:b,confidence:.6,reason:"Content related to ".concat(b)})}return n.filter(function(e,t,r){return r.findIndex(function(t){return t.tag===e.tag})===t}).sort(function(e,t){return t.confidence-e.confidence}).slice(0,8)}},{key:"generateRuleBasedCategories",value:function(e,t,r){var n=[];return(e.includes("work")||e.includes("job")||e.includes("career")||e.includes("professional")||e.includes("business"))&&n.push({category:"work",confidence:.8,reason:"Contains work-related content"}),("tutorial"===r||"documentation"===r||e.includes("learn")||e.includes("education")||e.includes("course"))&&n.push({category:"learning",confidence:.9,reason:"Educational content detected"}),(e.includes("hobby")||e.includes("personal")||e.includes("lifestyle")||e.includes("entertainment"))&&n.push({category:"personal",confidence:.7,reason:"Personal interest content"}),(t.includes("github.com")||t.includes("stackoverflow.com")||e.includes("programming")||e.includes("development"))&&n.push({category:"work",confidence:.8,reason:"Technical/development content"}),("news"===r||e.includes("breaking")||e.includes("update"))&&n.push({category:"general",confidence:.7,reason:"News or current events"}),0===n.length&&n.push({category:"general",confidence:.5,reason:"General content"}),n.sort(function(e,t){return t.confidence-e.confidence})}},{key:"extractTopics",value:function(e){return["artificial intelligence","machine learning","web development","mobile development","data science","cybersecurity","cloud computing","blockchain","cryptocurrency","startup","productivity","leadership","design","marketing","sales","programming","software engineering","devops","database","frontend","backend","full-stack","api","microservices","architecture"].filter(function(t){return e.includes(t)}).slice(0,5)}},{key:"estimateComplexity",value:function(e){var t=e.toLowerCase(),r=["algorithm","architecture","optimization","scalability","performance"].filter(function(e){return t.includes(e)}).length,n=["introduction","basics","getting started","beginner","simple"].filter(function(e){return t.includes(e)}).length,i=["advanced","expert","complex","sophisticated","enterprise"].filter(function(e){return t.includes(e)}).length;return n>0||0===r?"beginner":i>1||r>3?"advanced":"intermediate"}},{key:"estimateReadingTime",value:function(e){var t=e.split(/\s+/).length;return Math.max(1,Math.round(t/200))}},{key:"callOpenAIForAnalysis",value:(n=p(d().m(function e(t,r,n){var i,s,o,a,c,u,l;return d().w(function(e){for(;;)switch(e.n){case 0:return s='Analyze this web content and provide a JSON response with the following structure:\n\n{\n  "summary": "1-2 sentence summary",\n  "tagSuggestions": [\n    {"tag": "tag-name", "confidence": 0.8, "reason": "why this tag fits"}\n  ],\n  "categorySuggestions": [\n    {"category": "work|learning|personal|general", "confidence": 0.9, "reason": "explanation"}\n  ],\n  "contentType": "article|tutorial|documentation|video|tool|reference|blog|news|research|other",\n  "topics": ["main", "topics", "covered"],\n  "complexity": "beginner|intermediate|advanced",\n  "readingTime": 5\n}\n\nContent to analyze:\nTitle: '.concat(r,"\nURL: ").concat(n,"\nContent: ").concat(t.substring(0,2e3),"...\n\nFocus on:\n- Relevant, specific tags (technology, skills, domains)\n- Appropriate category (work/learning/personal/general)\n- Content type and complexity\n- Main topics and themes"),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:s}],max_tokens:500,temperature:.3})});case 1:return o=e.v,e.n=2,o.json();case 2:if(a=e.v,!(c=null===(i=a.choices[0])||void 0===i||null===(i=i.message)||void 0===i?void 0:i.content)){e.n=5;break}return e.p=3,u=JSON.parse(c),e.a(2,{summary:u.summary,tagSuggestions:u.tagSuggestions||[],categorySuggestions:u.categorySuggestions||[],contentType:u.contentType,topics:u.topics||[],complexity:u.complexity,readingTime:u.readingTime});case 4:e.p=4,l=e.v,console.error("Failed to parse AI response:",l);case 5:return e.a(2,this.generateRuleBasedAnalysis(t,r,n))}},e,this,[[3,4]])})),function(e,t,r){return n.apply(this,arguments)})},{key:"callOpenAI",value:(r=p(d().m(function e(t,r,n){var i,s,o,a;return d().w(function(e){for(;;)switch(e.n){case 0:return s="Summarize this web page in 1-2 sentences:\nTitle: ".concat(r,"\nURL: ").concat(n,"\nContent: ").concat(t.substring(0,1e3),"..."),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:s}],max_tokens:100,temperature:.3})});case 1:return o=e.v,e.n=2,o.json();case 2:return a=e.v,e.a(2,(null===(i=a.choices[0])||void 0===i||null===(i=i.message)||void 0===i?void 0:i.content)||this.generatePlaceholderSummary(t,r,n))}},e,this)})),function(e,t,n){return r.apply(this,arguments)})},{key:"generatePlaceholderSummary",value:function(e,t,r){var n=new URL(r).hostname,i=e.length;return n.includes("github.com")?"GitHub repository or project page: ".concat(t):n.includes("stackoverflow.com")?"Stack Overflow discussion about programming or technical topics":n.includes("medium.com")||n.includes("blog")?"Blog article: ".concat(t.substring(0,50),"..."):n.includes("youtube.com")?"Video content: ".concat(t):n.includes("news")||n.includes("article")?"News article from ".concat(n):"Web page from ".concat(n," (").concat(Math.round(i/100)," paragraphs)")}},{key:"updateApiKey",value:function(e){this.apiKey=e}},{key:"generateSmartCollectionSuggestions",value:(t=p(d().m(function e(t){var r,n,i,s,o,a,c,l,h,f,g,p,v,m,y;return d().w(function(e){for(;;)if(0===e.n){for(r=this.analyzeDomains(t),n=this.analyzeTopics(t),i=this.analyzeTimePatterns(t),s=[],o=new Date,a=0,c=Object.entries(r);a<c.length;a++)l=u(c[a],2),h=l[0],(f=l[1])>=3&&s.push({id:"domain-".concat(h.replace(/\./g,"-")),name:"📌 ".concat(this.getDomainDisplayName(h)),description:"Links from ".concat(h," (").concat(f," links)"),query:"domain LIKE '%".concat(h,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getDomainIcon(h),color:this.getDomainColor(h),filters:{domains:[h]},createdAt:o,updatedAt:o});for(g=0,p=Object.entries(n);g<p.length;g++)v=u(p[g],2),m=v[0],(y=v[1])>=2&&s.push({id:"topic-".concat(m.toLowerCase().replace(/\s+/g,"-")),name:"🎯 ".concat(m),description:"Content related to ".concat(m.toLowerCase()," (").concat(y," links)"),query:"title ILIKE '%".concat(m,"%' OR user_note ILIKE '%").concat(m,"%' OR ai_summary ILIKE '%").concat(m,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getTopicIcon(m),color:this.getTopicColor(m),createdAt:o,updatedAt:o});return i.recentActivity>5&&s.push({id:"recent-activity",name:"🔥 Recent Activity",description:"Links saved in the last 3 days",query:"created_at >= now() - interval '3 days'",isSystem:!0,autoUpdate:!0,icon:"🔥",color:"#ef4444",filters:{dateRange:{start:new Date(Date.now()-2592e5)}},createdAt:o,updatedAt:o}),e.a(2,s.slice(0,8))}},e,this)})),function(e){return t.apply(this,arguments)})},{key:"analyzeDomains",value:function(e){var t={};return e.forEach(function(e){var r=e.domain;t[r]=(t[r]||0)+1}),Object.fromEntries(Object.entries(t).sort(function(e,t){var r=u(e,2)[1];return u(t,2)[1]-r}).slice(0,10))}},{key:"analyzeTopics",value:function(e){var t={},r=["React","JavaScript","TypeScript","Python","Node.js","API","Database","Machine Learning","AI","Design","UI/UX","CSS","HTML","Backend","Frontend","DevOps","Cloud","AWS","Docker","Kubernetes","Git","Testing","Security","Performance","Mobile","iOS","Android","Tutorial","Guide","Documentation","Tool","Framework","Library"];return e.forEach(function(e){var n="".concat(e.title," ").concat(e.userNote," ").concat(e.aiSummary||"").toLowerCase();r.forEach(function(e){n.includes(e.toLowerCase())&&(t[e]=(t[e]||0)+1)})}),Object.fromEntries(Object.entries(t).sort(function(e,t){var r=u(e,2)[1];return u(t,2)[1]-r}).slice(0,8))}},{key:"analyzeTimePatterns",value:function(e){var t=new Date,r=new Date(t.getTime()-2592e5),n=e.filter(function(e){return e.createdAt>=r}).length,i={};return e.forEach(function(e){var t=e.createdAt.toLocaleDateString("en-US",{weekday:"long"});i[t]=(i[t]||0)+1}),{recentActivity:n,weeklyPattern:i}}},{key:"getDomainDisplayName",value:function(e){return{"github.com":"GitHub","stackoverflow.com":"Stack Overflow","medium.com":"Medium","youtube.com":"YouTube","twitter.com":"Twitter","linkedin.com":"LinkedIn","reddit.com":"Reddit","dev.to":"Dev.to","hashnode.com":"Hashnode","docs.google.com":"Google Docs"}[e]||e.replace("www.","").split(".")[0]}},{key:"getDomainIcon",value:function(e){return{"github.com":"⭐","stackoverflow.com":"💬","medium.com":"✍️","youtube.com":"📺","twitter.com":"🐦","linkedin.com":"💼","reddit.com":"🤖","dev.to":"👨‍💻","hashnode.com":"📝","docs.google.com":"📄"}[e]||"🌐"}},{key:"getDomainColor",value:function(e){return{"github.com":"#24292e","stackoverflow.com":"#f48024","medium.com":"#00ab6c","youtube.com":"#ff0000","twitter.com":"#1da1f2","linkedin.com":"#0077b5","reddit.com":"#ff4500","dev.to":"#0a0a0a","hashnode.com":"#2962ff","docs.google.com":"#4285f4"}[e]||"#6b7280"}},{key:"getTopicIcon",value:function(e){return{React:"⚛️",JavaScript:"🟨",TypeScript:"🔷",Python:"🐍","Node.js":"🟢",API:"🔌",Database:"🗄️","Machine Learning":"🤖",AI:"🧠",Design:"🎨","UI/UX":"✨",CSS:"🎨",HTML:"📄",Backend:"⚙️",Frontend:"🖥️",DevOps:"🔧",Cloud:"☁️",AWS:"🟠",Docker:"🐳",Security:"🔒",Mobile:"📱",Tutorial:"📚",Tool:"🛠️"}[e]||"🏷️"}},{key:"getTopicColor",value:function(e){return{React:"#61dafb",JavaScript:"#f7df1e",TypeScript:"#3178c6",Python:"#3776ab","Node.js":"#339933",API:"#ff6b6b",Database:"#336791","Machine Learning":"#ff9500",AI:"#8b5cf6",Design:"#e91e63","UI/UX":"#9c27b0",CSS:"#1572b6",HTML:"#e34f26",Backend:"#4caf50",Frontend:"#2196f3",DevOps:"#ff5722",Cloud:"#607d8b",Security:"#795548",Mobile:"#00bcd4",Tutorial:"#ff9800",Tool:"#607d8b"}[e]||"#6b7280"}},{key:"analyzeForSmartCollections",value:(e=p(d().m(function e(t){var r,n,i,s,o,a,c,u;return d().w(function(e){for(;;)if(0===e.n)return r="".concat(t.title," ").concat(t.userNote," ").concat(t.aiSummary||"").toLowerCase(),n=t.domain,i=[],s=[],o={},(a=["ai","artificial intelligence","machine learning","ml","neural","deep learning"].filter(function(e){return r.includes(e)}).length)>0&&(i.push("ai-related"),s.push("AI"),o.ai=a),(c=["tutorial","how to","guide","walkthrough","step by step"].filter(function(e){return r.includes(e)}).length)>0&&(i.push("tutorials"),s.push("tutorial"),o.tutorial=c),n.includes("github.com")&&(i.push("github-repos"),s.push("github","repository"),o.github=1),(u=(Date.now()-t.createdAt.getTime())/864e5)<=7&&(i.push("recent-reads"),o.recent=Math.max(0,7-u)/7),t.userNote&&""!==t.userNote.trim()||(i.push("unread"),o.unread=1),e.a(2,{matchingCollections:i,suggestedTags:s,contentSignals:o})},e)})),function(t){return e.apply(this,arguments)})}]);var e,t,r,n,i,s}(),k=function(e){return e?new _(e):{generateInsights:function(){return p(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateQuestions:function(){return p(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateFlashcards:function(){return p(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},findCrossReferences:function(){return p(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateRecommendations:function(){return p(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},updateKnowledgeGraph:function(e){return p(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,{nodes:[],edges:[],lastUpdated:Date.now()})},e)}))()},extractKeyTopics:function(){return p(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},calculateKnowledgeGrowth:function(){return 0}}},_=function(){return y(function e(t){v(this,e),a(this,"baseURL","https://api.openai.com/v1"),this.apiKey=t},[{key:"generateInsights",value:(h=p(d().m(function e(t){var r,n,i,s,o;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,r="text"in t?t.text:"".concat(t.title," - ").concat(t.description||""),n=t.url,i='Analyze this content and generate 3 types of insights:\n1. A thought-provoking question\n2. A key summary point\n3. A potential connection to other topics\n\nContent: "'.concat(r,'"\nURL: ').concat(n,"\n\nReturn as JSON array with objects containing: type, content, metadata"),e.n=2,this.callOpenAI(i);case 2:return s=e.v,e.a(2,this.parseInsights(s));case 3:return e.p=3,o=e.v,console.error("Error generating insights:",o),e.a(2,[])}},e,this,[[1,3]])})),function(e){return h.apply(this,arguments)})},{key:"generateQuestions",value:(l=p(d().m(function e(t){var r,n,i,s,o=arguments;return d().w(function(e){for(;;)switch(e.n){case 0:if(r=o.length>1&&void 0!==o[1]?o[1]:"medium",this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n="Generate 3 ".concat(r,' level questions based on this content that would help with retention and understanding:\n\nContent: "').concat(t,'"\n\nQuestions should be:\n- ').concat("easy"===r?"Recall-based, asking for basic facts":"","\n- ").concat("medium"===r?"Application-based, asking how concepts apply":"","\n- ").concat("hard"===r?"Analysis-based, asking for evaluation and synthesis":"",'\n\nReturn as JSON array with type: "question", content: "the question", metadata: {difficulty, topic}'),e.n=2,this.callOpenAI(n);case 2:return i=e.v,e.a(2,this.parseInsights(i));case 3:return e.p=3,s=e.v,console.error("Error generating questions:",s),e.a(2,[])}},e,this,[[1,3]])})),function(e){return l.apply(this,arguments)})},{key:"generateFlashcards",value:(c=p(d().m(function e(t){var r,n,i;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,r='Create 3 flashcard pairs from this content. Each should have a question/prompt and answer:\n\nContent: "'.concat(t,'"\n\nReturn as JSON array with type: "flashcard", content: "Question: [question]\nAnswer: [answer]", metadata: {topic}'),e.n=2,this.callOpenAI(r);case 2:return n=e.v,e.a(2,this.parseInsights(n));case 3:return e.p=3,i=e.v,console.error("Error generating flashcards:",i),e.a(2,[])}},e,this,[[1,3]])})),function(e){return c.apply(this,arguments)})},{key:"findCrossReferences",value:(i=p(d().m(function e(t,r){var n,i,s,o,a;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey&&0!==r.length){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n="text"in t?t.text:"".concat(t.title," - ").concat(t.description||""),i=r.filter(function(e){return e.id!==t.id}).slice(0,10),s='Analyze the main item and find potential relationships with other items:\n\nMain item: "'.concat(n,'"\n\nOther items:\n').concat(i.map(function(e,t){return"".concat(t+1,". ").concat(e.id,": ").concat("text"in e?e.text:"".concat(e.title," - ").concat(e.description||""))}).join("\n"),'\n\nFor each relationship found, return JSON with:\n- targetId: the item ID\n- relationshipType: "related" | "contradicts" | "supports" | "cites" | "builds-on"\n- strength: 0-1 confidence score\n- note: brief explanation\n\nOnly return relationships with strength > 0.3'),e.n=2,this.callOpenAI(s);case 2:return o=e.v,e.a(2,this.parseCrossReferences(o,t.id));case 3:return e.p=3,a=e.v,console.error("Error finding cross references:",a),e.a(2,[])}},e,this,[[1,3]])})),function(e,t){return i.apply(this,arguments)})},{key:"generateRecommendations",value:(n=p(d().m(function e(t){var r,n,i,s,o;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,r=t.slice(-10),e.n=2,this.extractKeyTopics(r.map(function(e){return"text"in e?e.text:"".concat(e.title," - ").concat(e.description||"")}).join(" "));case 2:return n=e.v,i="Based on the user's reading history and interests, suggest 5 content recommendations:\n\nRecent reading topics: ".concat(n.join(", "),"\n\nRecent items:\n").concat(r.map(function(e){return"text"in e?'Highlight: "'.concat(e.text,'"'):'Link: "'.concat(e.title,'"')}).join("\n"),'\n\nSuggest:\n1. Specific topics to explore next\n2. Types of content that would complement their reading\n3. Areas for deeper study\n\nReturn as JSON array with type: "recommendation", content: suggestion, metadata: {topic, confidence}'),e.n=3,this.callOpenAI(i);case 3:return s=e.v,e.a(2,this.parseInsights(s));case 4:return e.p=4,o=e.v,console.error("Error generating recommendations:",o),e.a(2,[])}},e,this,[[1,4]])})),function(e){return n.apply(this,arguments)})},{key:"updateKnowledgeGraph",value:(r=p(d().m(function e(t){var r,n,i,s,a,c,u,l,h;return d().w(function(e){for(;;)switch(e.n){case 0:r=[],n=[],i=new Map,s=o(t),e.p=1,s.s();case 2:if((a=s.n()).done){e.n=5;break}return c=a.value,u="text"in c?c.text:"".concat(c.title," - ").concat(c.description||""),e.n=3,this.extractKeyTopics(u);case 3:l=e.v,r.push({id:c.id,type:"text"in c?"highlight":"link",label:"text"in c?c.text.slice(0,50)+"...":c.title,weight:1,metadata:{topics:l}}),l.forEach(function(e){i.set(e,(i.get(e)||0)+1)});case 4:e.n=2;break;case 5:e.n=7;break;case 6:e.p=6,h=e.v,s.e(h);case 7:return e.p=7,s.f(),e.f(7);case 8:return i.forEach(function(e,t){e>1&&r.push({id:"topic-".concat(t),type:"topic",label:t,weight:e,metadata:{frequency:e}})}),e.a(2,{nodes:r,edges:n,lastUpdated:Date.now()})}},e,this,[[1,6,7,8]])})),function(e){return r.apply(this,arguments)})},{key:"extractKeyTopics",value:(t=p(d().m(function e(t){var r,n,i,s,o;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return r=t.toLowerCase().match(/\b\w+\b/g)||[],n=new Map,r.forEach(function(e){e.length>4&&n.set(e,(n.get(e)||0)+1)}),e.a(2,Array.from(n.entries()).sort(function(e,t){return t[1]-e[1]}).slice(0,5).map(function(e){return u(e,1)[0]}));case 1:return e.p=1,i='Extract 3-5 key topics/themes from this content. Return as comma-separated list:\n\nContent: "'.concat(t.slice(0,1e3),'"'),e.n=2,this.callOpenAI(i);case 2:return s=e.v,e.a(2,s.split(",").map(function(e){return e.trim()}).filter(function(e){return e.length>0}));case 3:return e.p=3,o=e.v,console.error("Error extracting topics:",o),e.a(2,[])}},e,this,[[1,3]])})),function(e){return t.apply(this,arguments)})},{key:"calculateKnowledgeGrowth",value:function(e){if(0===e.length)return 0;var t=e.slice(-7),r=e.slice(-14,-7),n=t.reduce(function(e,t){return e+(t.linksRead||0)+(t.highlightsMade||0)},0),i=r.reduce(function(e,t){return e+(t.linksRead||0)+(t.highlightsMade||0)},0);return 0===i?n>0?1:0:Math.max(0,Math.min(2,n/i))}},{key:"callOpenAI",value:(e=p(d().m(function e(t){var r,n,i;return d().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("".concat(this.baseURL,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"user",content:t}],temperature:.7,max_tokens:500})});case 1:if((n=e.v).ok){e.n=2;break}throw new Error("OpenAI API error: ".concat(n.statusText));case 2:return e.n=3,n.json();case 3:return i=e.v,e.a(2,(null===(r=i.choices[0])||void 0===r||null===(r=r.message)||void 0===r?void 0:r.content)||"")}},e,this)})),function(t){return e.apply(this,arguments)})},{key:"parseInsights",value:function(e){try{var t=JSON.parse(e);return Array.isArray(t)?t.map(function(e){return s(s({id:"insight-".concat(Date.now(),"-").concat(Math.random())},e),{},{createdAt:Date.now()})}):[]}catch(t){return[{id:"insight-".concat(Date.now()),type:"summary",content:e.slice(0,200),createdAt:Date.now()}]}}},{key:"parseCrossReferences",value:function(e,t){try{var r=JSON.parse(e);return Array.isArray(r)?r.map(function(e){return s(s({id:"ref-".concat(Date.now(),"-").concat(Math.random())},e),{},{createdAt:Date.now()})}):[]}catch(e){return[]}}}]);var e,t,r,n,i,c,l,h}(),S=new w({apiKey:""})},519:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="0.0.0-automated"},530:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_HEADERS=void 0;const n=r(519);t.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${n.version}`}},660:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(907)),s=n(r(818));t.default=class{constructor(e){this.shouldThrowOnError=!1,this.method=e.method,this.url=e.url,this.headers=e.headers,this.schema=e.schema,this.body=e.body,this.shouldThrowOnError=e.shouldThrowOnError,this.signal=e.signal,this.isMaybeSingle=e.isMaybeSingle,e.fetch?this.fetch=e.fetch:"undefined"==typeof fetch?this.fetch=i.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(e,t){return this.headers=Object.assign({},this.headers),this.headers[e]=t,this}then(e,t){void 0===this.schema||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),"GET"!==this.method&&"HEAD"!==this.method&&(this.headers["Content-Type"]="application/json");let r=(0,this.fetch)(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async e=>{var t,r,n;let i=null,o=null,a=null,c=e.status,u=e.statusText;if(e.ok){if("HEAD"!==this.method){const t=await e.text();""===t||(o="text/csv"===this.headers.Accept||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?t:JSON.parse(t))}const n=null===(t=this.headers.Prefer)||void 0===t?void 0:t.match(/count=(exact|planned|estimated)/),s=null===(r=e.headers.get("content-range"))||void 0===r?void 0:r.split("/");n&&s&&s.length>1&&(a=parseInt(s[1])),this.isMaybeSingle&&"GET"===this.method&&Array.isArray(o)&&(o.length>1?(i={code:"PGRST116",details:`Results contain ${o.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},o=null,a=null,c=406,u="Not Acceptable"):o=1===o.length?o[0]:null)}else{const t=await e.text();try{i=JSON.parse(t),Array.isArray(i)&&404===e.status&&(o=[],i=null,c=200,u="OK")}catch(r){404===e.status&&""===t?(c=204,u="No Content"):i={message:t}}if(i&&this.isMaybeSingle&&(null===(n=null==i?void 0:i.details)||void 0===n?void 0:n.includes("0 rows"))&&(i=null,c=200,u="OK"),i&&this.shouldThrowOnError)throw new s.default(i)}return{error:i,data:o,count:a,status:c,statusText:u}});return this.shouldThrowOnError||(r=r.catch(e=>{var t,r,n;return{error:{message:`${null!==(t=null==e?void 0:e.name)&&void 0!==t?t:"FetchError"}: ${null==e?void 0:e.message}`,details:`${null!==(r=null==e?void 0:e.stack)&&void 0!==r?r:""}`,hint:"",code:`${null!==(n=null==e?void 0:e.code)&&void 0!==n?n:""}`},data:null,count:null,status:0,statusText:""}})),r.then(e,t)}returns(){return this}overrideTypes(){return this}}},818:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class r extends Error{constructor(e){super(e.message),this.name="PostgrestError",this.details=e.details,this.hint=e.hint,this.code=e.code}}t.default=r},825:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(261));class s extends i.default{eq(e,t){return this.url.searchParams.append(e,`eq.${t}`),this}neq(e,t){return this.url.searchParams.append(e,`neq.${t}`),this}gt(e,t){return this.url.searchParams.append(e,`gt.${t}`),this}gte(e,t){return this.url.searchParams.append(e,`gte.${t}`),this}lt(e,t){return this.url.searchParams.append(e,`lt.${t}`),this}lte(e,t){return this.url.searchParams.append(e,`lte.${t}`),this}like(e,t){return this.url.searchParams.append(e,`like.${t}`),this}likeAllOf(e,t){return this.url.searchParams.append(e,`like(all).{${t.join(",")}}`),this}likeAnyOf(e,t){return this.url.searchParams.append(e,`like(any).{${t.join(",")}}`),this}ilike(e,t){return this.url.searchParams.append(e,`ilike.${t}`),this}ilikeAllOf(e,t){return this.url.searchParams.append(e,`ilike(all).{${t.join(",")}}`),this}ilikeAnyOf(e,t){return this.url.searchParams.append(e,`ilike(any).{${t.join(",")}}`),this}is(e,t){return this.url.searchParams.append(e,`is.${t}`),this}in(e,t){const r=Array.from(new Set(t)).map(e=>"string"==typeof e&&new RegExp("[,()]").test(e)?`"${e}"`:`${e}`).join(",");return this.url.searchParams.append(e,`in.(${r})`),this}contains(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cs.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cs.{${t.join(",")}}`):this.url.searchParams.append(e,`cs.${JSON.stringify(t)}`),this}containedBy(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cd.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cd.{${t.join(",")}}`):this.url.searchParams.append(e,`cd.${JSON.stringify(t)}`),this}rangeGt(e,t){return this.url.searchParams.append(e,`sr.${t}`),this}rangeGte(e,t){return this.url.searchParams.append(e,`nxl.${t}`),this}rangeLt(e,t){return this.url.searchParams.append(e,`sl.${t}`),this}rangeLte(e,t){return this.url.searchParams.append(e,`nxr.${t}`),this}rangeAdjacent(e,t){return this.url.searchParams.append(e,`adj.${t}`),this}overlaps(e,t){return"string"==typeof t?this.url.searchParams.append(e,`ov.${t}`):this.url.searchParams.append(e,`ov.{${t.join(",")}}`),this}textSearch(e,t,{config:r,type:n}={}){let i="";"plain"===n?i="pl":"phrase"===n?i="ph":"websearch"===n&&(i="w");const s=void 0===r?"":`(${r})`;return this.url.searchParams.append(e,`${i}fts${s}.${t}`),this}match(e){return Object.entries(e).forEach(([e,t])=>{this.url.searchParams.append(e,`eq.${t}`)}),this}not(e,t,r){return this.url.searchParams.append(e,`not.${t}.${r}`),this}or(e,{foreignTable:t,referencedTable:r=t}={}){const n=r?`${r}.or`:"or";return this.url.searchParams.append(n,`(${e})`),this}filter(e,t,r){return this.url.searchParams.append(e,`${t}.${r}`),this}}t.default=s},907:(e,t,r)=>{r.r(t),r.d(t,{Headers:()=>o,Request:()=>a,Response:()=>c,default:()=>s,fetch:()=>i});var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw new Error("unable to locate global object")}();const i=n.fetch,s=n.fetch.bind(n),o=n.Headers,a=n.Request,c=n.Response}},i={};function s(e){var t=i[e];if(void 0!==t)return t.exports;var r=i[e]={exports:{}};return n[e].call(r.exports,r,r.exports,s),r.exports}s.m=n,s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce((t,r)=>(s.f[r](e,t),t),[])),s.u=e=>e+".js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="nest-chrome-extension:",s.l=(r,n,i,o)=>{if(e[r])e[r].push(n);else{var a,c;if(void 0!==i)for(var u=document.getElementsByTagName("script"),l=0;l<u.length;l++){var h=u[l];if(h.getAttribute("src")==r||h.getAttribute("data-webpack")==t+i){a=h;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",t+i),a.src=r),e[r]=[n];var d=(t,n)=>{a.onerror=a.onload=null,clearTimeout(f);var i=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),i&&i.forEach(e=>e(n)),t)return t(n)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),c&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{var e={471:0,508:0};s.f.j=(t,r)=>{var n=s.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var i=new Promise((r,i)=>n=e[t]=[r,i]);r.push(n[2]=i);var o=s.p+s.u(t),a=new Error;s.l(o,r=>{if(s.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var i=r&&("load"===r.type?"missing":r.type),o=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+o+")",a.name="ChunkLoadError",a.type=i,a.request=o,n[1](a)}},"chunk-"+t,t)}};var t=(t,r)=>{var n,i,[o,a,c]=r,u=0;if(o.some(t=>0!==e[t])){for(n in a)s.o(a,n)&&(s.m[n]=a[n]);c&&c(s)}for(t&&t(r);u<o.length;u++)i=o[u],s.o(e,i)&&e[i]&&e[i][0](),e[i]=0},r=self.webpackChunknest_chrome_extension=self.webpackChunknest_chrome_extension||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();class o extends Error{constructor(e,t="FunctionsError",r){super(e),this.name=t,this.context=r}}class a extends o{constructor(e){super("Failed to send a request to the Edge Function","FunctionsFetchError",e)}}class c extends o{constructor(e){super("Relay Error invoking the Edge Function","FunctionsRelayError",e)}}class u extends o{constructor(e){super("Edge Function returned a non-2xx status code","FunctionsHttpError",e)}}!function(e){e.Any="any",e.ApNortheast1="ap-northeast-1",e.ApNortheast2="ap-northeast-2",e.ApSouth1="ap-south-1",e.ApSoutheast1="ap-southeast-1",e.ApSoutheast2="ap-southeast-2",e.CaCentral1="ca-central-1",e.EuCentral1="eu-central-1",e.EuWest1="eu-west-1",e.EuWest2="eu-west-2",e.EuWest3="eu-west-3",e.SaEast1="sa-east-1",e.UsEast1="us-east-1",e.UsWest1="us-west-1",e.UsWest2="us-west-2"}(r||(r={}));class l{constructor(e,{headers:t={},customFetch:n,region:i=r.Any}={}){this.url=e,this.headers=t,this.region=i,this.fetch=(e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(s.bind(s,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)})(n)}setAuth(e){this.headers.Authorization=`Bearer ${e}`}invoke(e,t={}){var r,n,i,s,o;return n=this,i=void 0,o=function*(){try{const{headers:n,method:i,body:s}=t;let o={},{region:l}=t;l||(l=this.region);const h=new URL(`${this.url}/${e}`);let d;l&&"any"!==l&&(o["x-region"]=l,h.searchParams.set("forceFunctionRegion",l)),s&&(n&&!Object.prototype.hasOwnProperty.call(n,"Content-Type")||!n)&&("undefined"!=typeof Blob&&s instanceof Blob||s instanceof ArrayBuffer?(o["Content-Type"]="application/octet-stream",d=s):"string"==typeof s?(o["Content-Type"]="text/plain",d=s):"undefined"!=typeof FormData&&s instanceof FormData?d=s:(o["Content-Type"]="application/json",d=JSON.stringify(s)));const f=yield this.fetch(h.toString(),{method:i||"POST",headers:Object.assign(Object.assign(Object.assign({},o),this.headers),n),body:d}).catch(e=>{throw new a(e)}),g=f.headers.get("x-relay-error");if(g&&"true"===g)throw new c(f);if(!f.ok)throw new u(f);let p,v=(null!==(r=f.headers.get("Content-Type"))&&void 0!==r?r:"text/plain").split(";")[0].trim();return p="application/json"===v?yield f.json():"application/octet-stream"===v?yield f.blob():"text/event-stream"===v?f:"multipart/form-data"===v?yield f.formData():yield f.text(),{data:p,error:null,response:f}}catch(e){return{data:null,error:e,response:e instanceof u||e instanceof c?e.context:void 0}}},new((s=void 0)||(s=Promise))(function(e,t){function r(e){try{c(o.next(e))}catch(e){t(e)}}function a(e){try{c(o.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s(function(e){e(n)})).then(r,a)}c((o=o.apply(n,i||[])).next())})}}var h=s(279);const{PostgrestClient:d,PostgrestQueryBuilder:f,PostgrestFilterBuilder:g,PostgrestTransformBuilder:p,PostgrestBuilder:v,PostgrestError:m}=h,y=function(){if("undefined"!=typeof WebSocket)return WebSocket;if(void 0!==global.WebSocket)return global.WebSocket;if(void 0!==window.WebSocket)return window.WebSocket;if(void 0!==self.WebSocket)return self.WebSocket;throw new Error("`WebSocket` is not supported in this environment")}();var b,w,k,_,S,T,A;!function(e){e[e.connecting=0]="connecting",e[e.open=1]="open",e[e.closing=2]="closing",e[e.closed=3]="closed"}(b||(b={})),(A=w||(w={})).closed="closed",A.errored="errored",A.joined="joined",A.joining="joining",A.leaving="leaving",function(e){e.close="phx_close",e.error="phx_error",e.join="phx_join",e.reply="phx_reply",e.leave="phx_leave",e.access_token="access_token"}(k||(k={})),function(e){e.websocket="websocket"}(_||(_={})),function(e){e.Connecting="connecting",e.Open="open",e.Closing="closing",e.Closed="closed"}(S||(S={}));class j{constructor(){this.HEADER_LENGTH=1}decode(e,t){return e.constructor===ArrayBuffer?t(this._binaryDecode(e)):t("string"==typeof e?JSON.parse(e):{})}_binaryDecode(e){const t=new DataView(e),r=new TextDecoder;return this._decodeBroadcast(e,t,r)}_decodeBroadcast(e,t,r){const n=t.getUint8(1),i=t.getUint8(2);let s=this.HEADER_LENGTH+2;const o=r.decode(e.slice(s,s+n));s+=n;const a=r.decode(e.slice(s,s+i));return s+=i,{ref:null,topic:o,event:a,payload:JSON.parse(r.decode(e.slice(s,e.byteLength)))}}}class O{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=void 0,this.tries=0,this.callback=e,this.timerCalc=t}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}!function(e){e.abstime="abstime",e.bool="bool",e.date="date",e.daterange="daterange",e.float4="float4",e.float8="float8",e.int2="int2",e.int4="int4",e.int4range="int4range",e.int8="int8",e.int8range="int8range",e.json="json",e.jsonb="jsonb",e.money="money",e.numeric="numeric",e.oid="oid",e.reltime="reltime",e.text="text",e.time="time",e.timestamp="timestamp",e.timestamptz="timestamptz",e.timetz="timetz",e.tsrange="tsrange",e.tstzrange="tstzrange"}(T||(T={}));const I=(e,t,r={})=>{var n;const i=null!==(n=r.skipTypes)&&void 0!==n?n:[];return Object.keys(t).reduce((r,n)=>(r[n]=E(n,e,t,i),r),{})},E=(e,t,r,n)=>{const i=t.find(t=>t.name===e),s=null==i?void 0:i.type,o=r[e];return s&&!n.includes(s)?P(s,o):C(o)},P=(e,t)=>{if("_"===e.charAt(0)){const r=e.slice(1,e.length);return D(t,r)}switch(e){case T.bool:return x(t);case T.float4:case T.float8:case T.int2:case T.int4:case T.int8:case T.numeric:case T.oid:return R(t);case T.json:case T.jsonb:return $(t);case T.timestamp:return L(t);case T.abstime:case T.date:case T.daterange:case T.int4range:case T.int8range:case T.money:case T.reltime:case T.text:case T.time:case T.timestamptz:case T.timetz:case T.tsrange:case T.tstzrange:default:return C(t)}},C=e=>e,x=e=>{switch(e){case"t":return!0;case"f":return!1;default:return e}},R=e=>{if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return t}return e},$=e=>{if("string"==typeof e)try{return JSON.parse(e)}catch(t){return console.log(`JSON parse error: ${t}`),e}return e},D=(e,t)=>{if("string"!=typeof e)return e;const r=e.length-1,n=e[r];if("{"===e[0]&&"}"===n){let n;const i=e.slice(1,r);try{n=JSON.parse("["+i+"]")}catch(e){n=i?i.split(","):[]}return n.map(e=>P(t,e))}return e},L=e=>"string"==typeof e?e.replace(" ","T"):e,U=e=>{let t=e;return t=t.replace(/^ws/i,"http"),t=t.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),t.replace(/\/+$/,"")};class N{constructor(e,t,r={},n=1e4){this.channel=e,this.event=t,this.payload=r,this.timeout=n,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(e){this.timeout=e,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(e){this.payload=Object.assign(Object.assign({},this.payload),e)}receive(e,t){var r;return this._hasReceived(e)&&t(null===(r=this.receivedResp)||void 0===r?void 0:r.response),this.recHooks.push({status:e,callback:t}),this}startTimeout(){this.timeoutTimer||(this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref),this.channel._on(this.refEvent,{},e=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=e,this._matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout))}trigger(e,t){this.refEvent&&this.channel._trigger(this.refEvent,{status:e,response:t})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:e,response:t}){this.recHooks.filter(t=>t.status===e).forEach(e=>e.callback(t))}_hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}}var B,q,F,M;!function(e){e.SYNC="sync",e.JOIN="join",e.LEAVE="leave"}(B||(B={}));class z{constructor(e,t){this.channel=e,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const r=(null==t?void 0:t.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(r.state,{},e=>{const{onJoin:t,onLeave:r,onSync:n}=this.caller;this.joinRef=this.channel._joinRef(),this.state=z.syncState(this.state,e,t,r),this.pendingDiffs.forEach(e=>{this.state=z.syncDiff(this.state,e,t,r)}),this.pendingDiffs=[],n()}),this.channel._on(r.diff,{},e=>{const{onJoin:t,onLeave:r,onSync:n}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(e):(this.state=z.syncDiff(this.state,e,t,r),n())}),this.onJoin((e,t,r)=>{this.channel._trigger("presence",{event:"join",key:e,currentPresences:t,newPresences:r})}),this.onLeave((e,t,r)=>{this.channel._trigger("presence",{event:"leave",key:e,currentPresences:t,leftPresences:r})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(e,t,r,n){const i=this.cloneDeep(e),s=this.transformState(t),o={},a={};return this.map(i,(e,t)=>{s[e]||(a[e]=t)}),this.map(s,(e,t)=>{const r=i[e];if(r){const n=t.map(e=>e.presence_ref),i=r.map(e=>e.presence_ref),s=t.filter(e=>i.indexOf(e.presence_ref)<0),c=r.filter(e=>n.indexOf(e.presence_ref)<0);s.length>0&&(o[e]=s),c.length>0&&(a[e]=c)}else o[e]=t}),this.syncDiff(i,{joins:o,leaves:a},r,n)}static syncDiff(e,t,r,n){const{joins:i,leaves:s}={joins:this.transformState(t.joins),leaves:this.transformState(t.leaves)};return r||(r=()=>{}),n||(n=()=>{}),this.map(i,(t,n)=>{var i;const s=null!==(i=e[t])&&void 0!==i?i:[];if(e[t]=this.cloneDeep(n),s.length>0){const r=e[t].map(e=>e.presence_ref),n=s.filter(e=>r.indexOf(e.presence_ref)<0);e[t].unshift(...n)}r(t,s,n)}),this.map(s,(t,r)=>{let i=e[t];if(!i)return;const s=r.map(e=>e.presence_ref);i=i.filter(e=>s.indexOf(e.presence_ref)<0),e[t]=i,n(t,i,r),0===i.length&&delete e[t]}),e}static map(e,t){return Object.getOwnPropertyNames(e).map(r=>t(r,e[r]))}static transformState(e){return e=this.cloneDeep(e),Object.getOwnPropertyNames(e).reduce((t,r)=>{const n=e[r];return t[r]="metas"in n?n.metas.map(e=>(e.presence_ref=e.phx_ref,delete e.phx_ref,delete e.phx_ref_prev,e)):n,t},{})}static cloneDeep(e){return JSON.parse(JSON.stringify(e))}onJoin(e){this.caller.onJoin=e}onLeave(e){this.caller.onLeave=e}onSync(e){this.caller.onSync=e}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}!function(e){e.ALL="*",e.INSERT="INSERT",e.UPDATE="UPDATE",e.DELETE="DELETE"}(q||(q={})),function(e){e.BROADCAST="broadcast",e.PRESENCE="presence",e.POSTGRES_CHANGES="postgres_changes",e.SYSTEM="system"}(F||(F={})),function(e){e.SUBSCRIBED="SUBSCRIBED",e.TIMED_OUT="TIMED_OUT",e.CLOSED="CLOSED",e.CHANNEL_ERROR="CHANNEL_ERROR"}(M||(M={}));class K{constructor(e,t={config:{}},r){this.topic=e,this.params=t,this.socket=r,this.bindings={},this.state=w.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=e.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},t.config),this.timeout=this.socket.timeout,this.joinPush=new N(this,k.join,this.params,this.timeout),this.rejoinTimer=new O(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=w.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(e=>e.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=w.closed,this.socket._remove(this)}),this._onError(e=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,e),this.state=w.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=w.errored,this.rejoinTimer.scheduleTimeout())}),this._on(k.reply,{},(e,t)=>{this._trigger(this._replyEventName(t),e)}),this.presence=new z(this),this.broadcastEndpointURL=U(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(e,t=this.timeout){var r,n;if(this.socket.isConnected()||this.socket.connect(),this.state==w.closed){const{config:{broadcast:i,presence:s,private:o}}=this.params;this._onError(t=>null==e?void 0:e(M.CHANNEL_ERROR,t)),this._onClose(()=>null==e?void 0:e(M.CLOSED));const a={},c={broadcast:i,presence:s,postgres_changes:null!==(n=null===(r=this.bindings.postgres_changes)||void 0===r?void 0:r.map(e=>e.filter))&&void 0!==n?n:[],private:o};this.socket.accessTokenValue&&(a.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:c},a)),this.joinedOnce=!0,this._rejoin(t),this.joinPush.receive("ok",async({postgres_changes:t})=>{var r;if(this.socket.setAuth(),void 0!==t){const n=this.bindings.postgres_changes,i=null!==(r=null==n?void 0:n.length)&&void 0!==r?r:0,s=[];for(let r=0;r<i;r++){const i=n[r],{filter:{event:o,schema:a,table:c,filter:u}}=i,l=t&&t[r];if(!l||l.event!==o||l.schema!==a||l.table!==c||l.filter!==u)return this.unsubscribe(),this.state=w.errored,void(null==e||e(M.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes")));s.push(Object.assign(Object.assign({},i),{id:l.id}))}return this.bindings.postgres_changes=s,void(e&&e(M.SUBSCRIBED))}null==e||e(M.SUBSCRIBED)}).receive("error",t=>{this.state=w.errored,null==e||e(M.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(t).join(", ")||"error")))}).receive("timeout",()=>{null==e||e(M.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(e,t={}){return await this.send({type:"presence",event:"track",payload:e},t.timeout||this.timeout)}async untrack(e={}){return await this.send({type:"presence",event:"untrack"},e)}on(e,t,r){return this._on(e,t,r)}async send(e,t={}){var r,n;if(this._canPush()||"broadcast"!==e.type)return new Promise(r=>{var n,i,s;const o=this._push(e.type,e,t.timeout||this.timeout);"broadcast"!==e.type||(null===(s=null===(i=null===(n=this.params)||void 0===n?void 0:n.config)||void 0===i?void 0:i.broadcast)||void 0===s?void 0:s.ack)||r("ok"),o.receive("ok",()=>r("ok")),o.receive("error",()=>r("error")),o.receive("timeout",()=>r("timed out"))});{const{event:i,payload:s}=e,o={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:i,payload:s,private:this.private}]})};try{const e=await this._fetchWithTimeout(this.broadcastEndpointURL,o,null!==(r=t.timeout)&&void 0!==r?r:this.timeout);return await(null===(n=e.body)||void 0===n?void 0:n.cancel()),e.ok?"ok":"error"}catch(e){return"AbortError"===e.name?"timed out":"error"}}}updateJoinPayload(e){this.joinPush.updatePayload(e)}unsubscribe(e=this.timeout){this.state=w.leaving;const t=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(k.close,"leave",this._joinRef())};this.joinPush.destroy();let r=null;return new Promise(n=>{r=new N(this,k.leave,{},e),r.receive("ok",()=>{t(),n("ok")}).receive("timeout",()=>{t(),n("timed out")}).receive("error",()=>{n("error")}),r.send(),this._canPush()||r.trigger("ok",{})}).finally(()=>{null==r||r.destroy()})}teardown(){this.pushBuffer.forEach(e=>e.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}async _fetchWithTimeout(e,t,r){const n=new AbortController,i=setTimeout(()=>n.abort(),r),s=await this.socket.fetch(e,Object.assign(Object.assign({},t),{signal:n.signal}));return clearTimeout(i),s}_push(e,t,r=this.timeout){if(!this.joinedOnce)throw`tried to push '${e}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let n=new N(this,e,t,r);return this._canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}_onMessage(e,t,r){return t}_isMember(e){return this.topic===e}_joinRef(){return this.joinPush.ref}_trigger(e,t,r){var n,i;const s=e.toLocaleLowerCase(),{close:o,error:a,leave:c,join:u}=k;if(r&&[o,a,c,u].indexOf(s)>=0&&r!==this._joinRef())return;let l=this._onMessage(s,t,r);if(t&&!l)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(s)?null===(n=this.bindings.postgres_changes)||void 0===n||n.filter(e=>{var t,r,n;return"*"===(null===(t=e.filter)||void 0===t?void 0:t.event)||(null===(n=null===(r=e.filter)||void 0===r?void 0:r.event)||void 0===n?void 0:n.toLocaleLowerCase())===s}).map(e=>e.callback(l,r)):null===(i=this.bindings[s])||void 0===i||i.filter(e=>{var r,n,i,o,a,c;if(["broadcast","presence","postgres_changes"].includes(s)){if("id"in e){const s=e.id,o=null===(r=e.filter)||void 0===r?void 0:r.event;return s&&(null===(n=t.ids)||void 0===n?void 0:n.includes(s))&&("*"===o||(null==o?void 0:o.toLocaleLowerCase())===(null===(i=t.data)||void 0===i?void 0:i.type.toLocaleLowerCase()))}{const r=null===(a=null===(o=null==e?void 0:e.filter)||void 0===o?void 0:o.event)||void 0===a?void 0:a.toLocaleLowerCase();return"*"===r||r===(null===(c=null==t?void 0:t.event)||void 0===c?void 0:c.toLocaleLowerCase())}}return e.type.toLocaleLowerCase()===s}).map(e=>{if("object"==typeof l&&"ids"in l){const e=l.data,{schema:t,table:r,commit_timestamp:n,type:i,errors:s}=e,o={schema:t,table:r,commit_timestamp:n,eventType:i,new:{},old:{},errors:s};l=Object.assign(Object.assign({},o),this._getPayloadRecords(e))}e.callback(l,r)})}_isClosed(){return this.state===w.closed}_isJoined(){return this.state===w.joined}_isJoining(){return this.state===w.joining}_isLeaving(){return this.state===w.leaving}_replyEventName(e){return`chan_reply_${e}`}_on(e,t,r){const n=e.toLocaleLowerCase(),i={type:n,filter:t,callback:r};return this.bindings[n]?this.bindings[n].push(i):this.bindings[n]=[i],this}_off(e,t){const r=e.toLocaleLowerCase();return this.bindings[r]=this.bindings[r].filter(e=>{var n;return!((null===(n=e.type)||void 0===n?void 0:n.toLocaleLowerCase())===r&&K.isEqual(e.filter,t))}),this}static isEqual(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const r in e)if(e[r]!==t[r])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(e){this._on(k.close,{},e)}_onError(e){this._on(k.error,{},t=>e(t))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(e=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=w.joining,this.joinPush.resend(e))}_getPayloadRecords(e){const t={new:{},old:{}};return"INSERT"!==e.type&&"UPDATE"!==e.type||(t.new=I(e.columns,e.record)),"UPDATE"!==e.type&&"DELETE"!==e.type||(t.old=I(e.columns,e.old_record)),t}}const W=()=>{};class J{constructor(e,t){var r;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers={},this.params={},this.timeout=1e4,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=W,this.ref=0,this.logger=W,this.conn=null,this.sendBuffer=[],this.serializer=new j,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(s.bind(s,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},this.endPoint=`${e}/${_.websocket}`,this.httpEndpoint=U(e),(null==t?void 0:t.transport)?this.transport=t.transport:this.transport=null,(null==t?void 0:t.params)&&(this.params=t.params),(null==t?void 0:t.timeout)&&(this.timeout=t.timeout),(null==t?void 0:t.logger)&&(this.logger=t.logger),((null==t?void 0:t.logLevel)||(null==t?void 0:t.log_level))&&(this.logLevel=t.logLevel||t.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),(null==t?void 0:t.heartbeatIntervalMs)&&(this.heartbeatIntervalMs=t.heartbeatIntervalMs);const n=null===(r=null==t?void 0:t.params)||void 0===r?void 0:r.apikey;if(n&&(this.accessTokenValue=n,this.apiKey=n),this.reconnectAfterMs=(null==t?void 0:t.reconnectAfterMs)?t.reconnectAfterMs:e=>[1e3,2e3,5e3,1e4][e-1]||1e4,this.encode=(null==t?void 0:t.encode)?t.encode:(e,t)=>t(JSON.stringify(e)),this.decode=(null==t?void 0:t.decode)?t.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new O(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(null==t?void 0:t.fetch),null==t?void 0:t.worker){if("undefined"!=typeof window&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(null==t?void 0:t.worker)||!1,this.workerUrl=null==t?void 0:t.workerUrl}this.accessToken=(null==t?void 0:t.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=y),!this.transport)throw new Error("No transport provided");this.conn=new this.transport(this.endpointURL()),this.setupConnection()}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:"1.0.0"}))}disconnect(e,t){this.conn&&(this.conn.onclose=function(){},e?this.conn.close(e,null!=t?t:""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(e=>e.teardown()))}getChannels(){return this.channels}async removeChannel(e){const t=await e.unsubscribe();return 0===this.channels.length&&this.disconnect(),t}async removeAllChannels(){const e=await Promise.all(this.channels.map(e=>e.unsubscribe()));return this.channels=[],this.disconnect(),e}log(e,t,r){this.logger(e,t,r)}connectionState(){switch(this.conn&&this.conn.readyState){case b.connecting:return S.Connecting;case b.open:return S.Open;case b.closing:return S.Closing;default:return S.Closed}}isConnected(){return this.connectionState()===S.Open}channel(e,t={config:{}}){const r=`realtime:${e}`,n=this.getChannels().find(e=>e.topic===r);if(n)return n;{const r=new K(`realtime:${e}`,t,this);return this.channels.push(r),r}}push(e){const{topic:t,event:r,payload:n,ref:i}=e,s=()=>{this.encode(e,e=>{var t;null===(t=this.conn)||void 0===t||t.send(e)})};this.log("push",`${t} ${r} (${i})`,n),this.isConnected()?s():this.sendBuffer.push(s)}async setAuth(e=null){let t=e||this.accessToken&&await this.accessToken()||this.accessTokenValue;this.accessTokenValue!=t&&(this.accessTokenValue=t,this.channels.forEach(e=>{const r={access_token:t,version:"realtime-js/2.11.15"};t&&e.updateJoinPayload(r),e.joinedOnce&&e._isJoined()&&e._push(k.access_token,{access_token:t})}))}async sendHeartbeat(){var e;if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),void(null===(e=this.conn)||void 0===e||e.close(1e3,"hearbeat timeout"));this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),await this.setAuth()}else this.heartbeatCallback("disconnected")}onHeartbeat(e){this.heartbeatCallback=e}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}_makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}_leaveOpenTopic(e){let t=this.channels.find(t=>t.topic===e&&(t._isJoined()||t._isJoining()));t&&(this.log("transport",`leaving duplicate topic "${e}"`),t.unsubscribe())}_remove(e){this.channels=this.channels.filter(t=>t.topic!==e.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=e=>this._onConnError(e),this.conn.onmessage=e=>this._onConnMessage(e),this.conn.onclose=e=>this._onConnClose(e))}_onConnMessage(e){this.decode(e.data,e=>{let{topic:t,event:r,payload:n,ref:i}=e;"phoenix"===t&&"phx_reply"===r&&this.heartbeatCallback("ok"==e.payload.status?"ok":"error"),i&&i===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${n.status||""} ${t} ${r} ${i&&"("+i+")"||""}`,n),Array.from(this.channels).filter(e=>e._isMember(t)).forEach(e=>e._trigger(r,n,i)),this.stateChangeCallbacks.message.forEach(t=>t(e))})}_onConnOpen(){this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker?this.workerRef||this._startWorkerHeartbeat():this._startHeartbeat(),this.stateChangeCallbacks.open.forEach(e=>e())}_startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)}_startWorkerHeartbeat(){this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const e=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(e),this.workerRef.onerror=e=>{this.log("worker","worker error",e.message),this.workerRef.terminate()},this.workerRef.onmessage=e=>{"keepAlive"===e.data.event&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}_onConnClose(e){this.log("transport","close",e),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(t=>t(e))}_onConnError(e){this.log("transport",`${e}`),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(t=>t(e))}_triggerChanError(){this.channels.forEach(e=>e._trigger(k.error))}_appendParams(e,t){if(0===Object.keys(t).length)return e;const r=e.match(/\?/)?"&":"?";return`${e}${r}${new URLSearchParams(t)}`}_workerObjectUrl(e){let t;if(e)t=e;else{const e=new Blob(['\n  addEventListener("message", (e) => {\n    if (e.data.event === "start") {\n      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);\n    }\n  });'],{type:"application/javascript"});t=URL.createObjectURL(e)}return t}}class G extends Error{constructor(e){super(e),this.__isStorageError=!0,this.name="StorageError"}}function H(e){return"object"==typeof e&&null!==e&&"__isStorageError"in e}class V extends G{constructor(e,t){super(e),this.name="StorageApiError",this.status=t}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class Y extends G{constructor(e,t){super(e),this.name="StorageUnknownError",this.originalError=t}}const Q=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(s.bind(s,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},X=e=>{if(Array.isArray(e))return e.map(e=>X(e));if("function"==typeof e||e!==Object(e))return e;const t={};return Object.entries(e).forEach(([e,r])=>{const n=e.replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace(/[-_]/g,""));t[n]=X(r)}),t};var Z=function(e,t,r,n){return new(r||(r=Promise))(function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(o,a)}c((n=n.apply(e,t||[])).next())})};const ee=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),te=(e,t,r)=>Z(void 0,void 0,void 0,function*(){const n=yield(i=void 0,o=void 0,a=void 0,c=function*(){return"undefined"==typeof Response?(yield Promise.resolve().then(s.bind(s,907))).Response:Response},new(a||(a=Promise))(function(e,t){function r(e){try{s(c.next(e))}catch(e){t(e)}}function n(e){try{s(c.throw(e))}catch(e){t(e)}}function s(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a(function(e){e(i)})).then(r,n)}s((c=c.apply(i,o||[])).next())}));var i,o,a,c;e instanceof n&&!(null==r?void 0:r.noResolveJson)?e.json().then(r=>{t(new V(ee(r),e.status||500))}).catch(e=>{t(new Y(ee(e),e))}):t(new Y(ee(e),e))});function re(e,t,r,n,i,s){return Z(this,void 0,void 0,function*(){return new Promise((o,a)=>{e(r,((e,t,r,n)=>{const i={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?i:(i.headers=Object.assign({"Content-Type":"application/json"},null==t?void 0:t.headers),n&&(i.body=JSON.stringify(n)),Object.assign(Object.assign({},i),r))})(t,n,i,s)).then(e=>{if(!e.ok)throw e;return(null==n?void 0:n.noResolveJson)?e:e.json()}).then(e=>o(e)).catch(e=>te(e,a,n))})})}function ne(e,t,r,n){return Z(this,void 0,void 0,function*(){return re(e,"GET",t,r,n)})}function ie(e,t,r,n,i){return Z(this,void 0,void 0,function*(){return re(e,"POST",t,n,i,r)})}function se(e,t,r,n,i){return Z(this,void 0,void 0,function*(){return re(e,"DELETE",t,n,i,r)})}var oe=function(e,t,r,n){return new(r||(r=Promise))(function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(o,a)}c((n=n.apply(e,t||[])).next())})};const ae={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},ce={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class ue{constructor(e,t={},r,n){this.url=e,this.headers=t,this.bucketId=r,this.fetch=Q(n)}uploadOrUpdate(e,t,r,n){return oe(this,void 0,void 0,function*(){try{let i;const s=Object.assign(Object.assign({},ce),n);let o=Object.assign(Object.assign({},this.headers),"POST"===e&&{"x-upsert":String(s.upsert)});const a=s.metadata;"undefined"!=typeof Blob&&r instanceof Blob?(i=new FormData,i.append("cacheControl",s.cacheControl),a&&i.append("metadata",this.encodeMetadata(a)),i.append("",r)):"undefined"!=typeof FormData&&r instanceof FormData?(i=r,i.append("cacheControl",s.cacheControl),a&&i.append("metadata",this.encodeMetadata(a))):(i=r,o["cache-control"]=`max-age=${s.cacheControl}`,o["content-type"]=s.contentType,a&&(o["x-metadata"]=this.toBase64(this.encodeMetadata(a)))),(null==n?void 0:n.headers)&&(o=Object.assign(Object.assign({},o),n.headers));const c=this._removeEmptyFolders(t),u=this._getFinalPath(c),l=yield this.fetch(`${this.url}/object/${u}`,Object.assign({method:e,body:i,headers:o},(null==s?void 0:s.duplex)?{duplex:s.duplex}:{})),h=yield l.json();return l.ok?{data:{path:c,id:h.Id,fullPath:h.Key},error:null}:{data:null,error:h}}catch(e){if(H(e))return{data:null,error:e};throw e}})}upload(e,t,r){return oe(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",e,t,r)})}uploadToSignedUrl(e,t,r,n){return oe(this,void 0,void 0,function*(){const i=this._removeEmptyFolders(e),s=this._getFinalPath(i),o=new URL(this.url+`/object/upload/sign/${s}`);o.searchParams.set("token",t);try{let e;const t=Object.assign({upsert:ce.upsert},n),s=Object.assign(Object.assign({},this.headers),{"x-upsert":String(t.upsert)});"undefined"!=typeof Blob&&r instanceof Blob?(e=new FormData,e.append("cacheControl",t.cacheControl),e.append("",r)):"undefined"!=typeof FormData&&r instanceof FormData?(e=r,e.append("cacheControl",t.cacheControl)):(e=r,s["cache-control"]=`max-age=${t.cacheControl}`,s["content-type"]=t.contentType);const a=yield this.fetch(o.toString(),{method:"PUT",body:e,headers:s}),c=yield a.json();return a.ok?{data:{path:i,fullPath:c.Key},error:null}:{data:null,error:c}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createSignedUploadUrl(e,t){return oe(this,void 0,void 0,function*(){try{let r=this._getFinalPath(e);const n=Object.assign({},this.headers);(null==t?void 0:t.upsert)&&(n["x-upsert"]="true");const i=yield ie(this.fetch,`${this.url}/object/upload/sign/${r}`,{},{headers:n}),s=new URL(this.url+i.url),o=s.searchParams.get("token");if(!o)throw new G("No token returned by API");return{data:{signedUrl:s.toString(),path:e,token:o},error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}update(e,t,r){return oe(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",e,t,r)})}move(e,t,r){return oe(this,void 0,void 0,function*(){try{return{data:yield ie(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==r?void 0:r.destinationBucket},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}copy(e,t,r){return oe(this,void 0,void 0,function*(){try{return{data:{path:(yield ie(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==r?void 0:r.destinationBucket},{headers:this.headers})).Key},error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createSignedUrl(e,t,r){return oe(this,void 0,void 0,function*(){try{let n=this._getFinalPath(e),i=yield ie(this.fetch,`${this.url}/object/sign/${n}`,Object.assign({expiresIn:t},(null==r?void 0:r.transform)?{transform:r.transform}:{}),{headers:this.headers});const s=(null==r?void 0:r.download)?`&download=${!0===r.download?"":r.download}`:"";return i={signedUrl:encodeURI(`${this.url}${i.signedURL}${s}`)},{data:i,error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createSignedUrls(e,t,r){return oe(this,void 0,void 0,function*(){try{const n=yield ie(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:t,paths:e},{headers:this.headers}),i=(null==r?void 0:r.download)?`&download=${!0===r.download?"":r.download}`:"";return{data:n.map(e=>Object.assign(Object.assign({},e),{signedUrl:e.signedURL?encodeURI(`${this.url}${e.signedURL}${i}`):null})),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}download(e,t){return oe(this,void 0,void 0,function*(){const r=void 0!==(null==t?void 0:t.transform)?"render/image/authenticated":"object",n=this.transformOptsToQueryString((null==t?void 0:t.transform)||{}),i=n?`?${n}`:"";try{const t=this._getFinalPath(e),n=yield ne(this.fetch,`${this.url}/${r}/${t}${i}`,{headers:this.headers,noResolveJson:!0});return{data:yield n.blob(),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}info(e){return oe(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{const e=yield ne(this.fetch,`${this.url}/object/info/${t}`,{headers:this.headers});return{data:X(e),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}exists(e){return oe(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{return yield function(e,t,r){return Z(this,void 0,void 0,function*(){return re(e,"HEAD",t,Object.assign(Object.assign({},r),{noResolveJson:!0}),undefined)})}(this.fetch,`${this.url}/object/${t}`,{headers:this.headers}),{data:!0,error:null}}catch(e){if(H(e)&&e instanceof Y){const t=e.originalError;if([400,404].includes(null==t?void 0:t.status))return{data:!1,error:e}}throw e}})}getPublicUrl(e,t){const r=this._getFinalPath(e),n=[],i=(null==t?void 0:t.download)?`download=${!0===t.download?"":t.download}`:"";""!==i&&n.push(i);const s=void 0!==(null==t?void 0:t.transform)?"render/image":"object",o=this.transformOptsToQueryString((null==t?void 0:t.transform)||{});""!==o&&n.push(o);let a=n.join("&");return""!==a&&(a=`?${a}`),{data:{publicUrl:encodeURI(`${this.url}/${s}/public/${r}${a}`)}}}remove(e){return oe(this,void 0,void 0,function*(){try{return{data:yield se(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:e},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}list(e,t,r){return oe(this,void 0,void 0,function*(){try{const n=Object.assign(Object.assign(Object.assign({},ae),t),{prefix:e||""});return{data:yield ie(this.fetch,`${this.url}/object/list/${this.bucketId}`,n,{headers:this.headers},r),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}encodeMetadata(e){return JSON.stringify(e)}toBase64(e){return"undefined"!=typeof Buffer?Buffer.from(e).toString("base64"):btoa(e)}_getFinalPath(e){return`${this.bucketId}/${e}`}_removeEmptyFolders(e){return e.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(e){const t=[];return e.width&&t.push(`width=${e.width}`),e.height&&t.push(`height=${e.height}`),e.resize&&t.push(`resize=${e.resize}`),e.format&&t.push(`format=${e.format}`),e.quality&&t.push(`quality=${e.quality}`),t.join("&")}}const le={"X-Client-Info":"storage-js/2.7.1"};var he=function(e,t,r,n){return new(r||(r=Promise))(function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(o,a)}c((n=n.apply(e,t||[])).next())})};class de{constructor(e,t={},r){this.url=e,this.headers=Object.assign(Object.assign({},le),t),this.fetch=Q(r)}listBuckets(){return he(this,void 0,void 0,function*(){try{return{data:yield ne(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}getBucket(e){return he(this,void 0,void 0,function*(){try{return{data:yield ne(this.fetch,`${this.url}/bucket/${e}`,{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createBucket(e,t={public:!1}){return he(this,void 0,void 0,function*(){try{return{data:yield ie(this.fetch,`${this.url}/bucket`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}updateBucket(e,t){return he(this,void 0,void 0,function*(){try{const r=yield function(e,t,r,n){return Z(this,void 0,void 0,function*(){return re(e,"PUT",t,n,undefined,r)})}(this.fetch,`${this.url}/bucket/${e}`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers});return{data:r,error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}emptyBucket(e){return he(this,void 0,void 0,function*(){try{return{data:yield ie(this.fetch,`${this.url}/bucket/${e}/empty`,{},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}deleteBucket(e){return he(this,void 0,void 0,function*(){try{return{data:yield se(this.fetch,`${this.url}/bucket/${e}`,{},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}}class fe extends de{constructor(e,t={},r){super(e,t,r)}from(e){return new ue(this.url,this.headers,e,this.fetch)}}let ge="";ge="undefined"!=typeof Deno?"deno":"undefined"!=typeof document?"web":"undefined"!=typeof navigator&&"ReactNative"===navigator.product?"react-native":"node";const pe={headers:{"X-Client-Info":`supabase-js-${ge}/2.50.3`}},ve={schema:"public"},me={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},ye={};var be=s(907);const we=e=>{let t;return t=e||("undefined"==typeof fetch?be.default:fetch),(...e)=>t(...e)},ke=(e,t,r)=>{const n=we(r),i="undefined"==typeof Headers?be.Headers:Headers;return(r,s)=>{return o=void 0,a=void 0,u=function*(){var o;const a=null!==(o=yield t())&&void 0!==o?o:e;let c=new i(null==s?void 0:s.headers);return c.has("apikey")||c.set("apikey",e),c.has("Authorization")||c.set("Authorization",`Bearer ${a}`),n(r,Object.assign(Object.assign({},s),{headers:c}))},new((c=void 0)||(c=Promise))(function(e,t){function r(e){try{i(u.next(e))}catch(e){t(e)}}function n(e){try{i(u.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof c?i:new c(function(e){e(i)})).then(r,n)}i((u=u.apply(o,a||[])).next())});var o,a,c,u}};const _e="2.70.0",Se=3e4,Te={"X-Client-Info":`gotrue-js/${_e}`},Ae="X-Supabase-Api-Version",je=Date.parse("2024-01-01T00:00:00.0Z"),Oe="2024-01-01",Ie=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;class Ee extends Error{constructor(e,t,r){super(e),this.__isAuthError=!0,this.name="AuthError",this.status=t,this.code=r}}function Pe(e){return"object"==typeof e&&null!==e&&"__isAuthError"in e}class Ce extends Ee{constructor(e,t,r){super(e,t,r),this.name="AuthApiError",this.status=t,this.code=r}}class xe extends Ee{constructor(e,t){super(e),this.name="AuthUnknownError",this.originalError=t}}class Re extends Ee{constructor(e,t,r,n){super(e,r,n),this.name=t,this.status=r}}class $e extends Re{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}class De extends Re{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class Le extends Re{constructor(e){super(e,"AuthInvalidCredentialsError",400,void 0)}}class Ue extends Re{constructor(e,t=null){super(e,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Ne extends Re{constructor(e,t=null){super(e,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Be extends Re{constructor(e,t){super(e,"AuthRetryableFetchError",t,void 0)}}function qe(e){return Pe(e)&&"AuthRetryableFetchError"===e.name}class Fe extends Re{constructor(e,t,r){super(e,"AuthWeakPasswordError",t,"weak_password"),this.reasons=r}}class Me extends Re{constructor(e){super(e,"AuthInvalidJwtError",400,"invalid_jwt")}}const ze="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),Ke=" \t\n\r=".split(""),We=(()=>{const e=new Array(128);for(let t=0;t<e.length;t+=1)e[t]=-1;for(let t=0;t<Ke.length;t+=1)e[Ke[t].charCodeAt(0)]=-2;for(let t=0;t<ze.length;t+=1)e[ze[t].charCodeAt(0)]=t;return e})();function Je(e,t,r){if(null!==e)for(t.queue=t.queue<<8|e,t.queuedBits+=8;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;r(ze[e]),t.queuedBits-=6}else if(t.queuedBits>0)for(t.queue=t.queue<<6-t.queuedBits,t.queuedBits=6;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;r(ze[e]),t.queuedBits-=6}}function Ge(e,t,r){const n=We[e];if(!(n>-1)){if(-2===n)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(e)}"`)}for(t.queue=t.queue<<6|n,t.queuedBits+=6;t.queuedBits>=8;)r(t.queue>>t.queuedBits-8&255),t.queuedBits-=8}function He(e){const t=[],r=e=>{t.push(String.fromCodePoint(e))},n={utf8seq:0,codepoint:0},i={queue:0,queuedBits:0},s=e=>{!function(e,t,r){if(0===t.utf8seq){if(e<=127)return void r(e);for(let r=1;r<6;r+=1)if(!(e>>7-r&1)){t.utf8seq=r;break}if(2===t.utf8seq)t.codepoint=31&e;else if(3===t.utf8seq)t.codepoint=15&e;else{if(4!==t.utf8seq)throw new Error("Invalid UTF-8 sequence");t.codepoint=7&e}t.utf8seq-=1}else if(t.utf8seq>0){if(e<=127)throw new Error("Invalid UTF-8 sequence");t.codepoint=t.codepoint<<6|63&e,t.utf8seq-=1,0===t.utf8seq&&r(t.codepoint)}}(e,n,r)};for(let t=0;t<e.length;t+=1)Ge(e.charCodeAt(t),i,s);return t.join("")}function Ve(e,t){if(!(e<=127)){if(e<=2047)return t(192|e>>6),void t(128|63&e);if(e<=65535)return t(224|e>>12),t(128|e>>6&63),void t(128|63&e);if(e<=1114111)return t(240|e>>18),t(128|e>>12&63),t(128|e>>6&63),void t(128|63&e);throw new Error(`Unrecognized Unicode codepoint: ${e.toString(16)}`)}t(e)}function Ye(e){const t=[],r={queue:0,queuedBits:0},n=e=>{t.push(e)};for(let t=0;t<e.length;t+=1)Ge(e.charCodeAt(t),r,n);return new Uint8Array(t)}function Qe(e){const t=[],r={queue:0,queuedBits:0},n=e=>{t.push(e)};return e.forEach(e=>Je(e,r,n)),Je(null,r,n),t.join("")}const Xe=()=>"undefined"!=typeof window&&"undefined"!=typeof document,Ze={tested:!1,writable:!1},et=()=>{if(!Xe())return!1;try{if("object"!=typeof globalThis.localStorage)return!1}catch(e){return!1}if(Ze.tested)return Ze.writable;const e=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(e,e),globalThis.localStorage.removeItem(e),Ze.tested=!0,Ze.writable=!0}catch(e){Ze.tested=!0,Ze.writable=!1}return Ze.writable},tt=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(s.bind(s,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},rt=async(e,t,r)=>{await e.setItem(t,JSON.stringify(r))},nt=async(e,t)=>{const r=await e.getItem(t);if(!r)return null;try{return JSON.parse(r)}catch(e){return r}},it=async(e,t)=>{await e.removeItem(t)};class st{constructor(){this.promise=new st.promiseConstructor((e,t)=>{this.resolve=e,this.reject=t})}}function ot(e){const t=e.split(".");if(3!==t.length)throw new Me("Invalid JWT structure");for(let e=0;e<t.length;e++)if(!Ie.test(t[e]))throw new Me("JWT not in base64url format");return{header:JSON.parse(He(t[0])),payload:JSON.parse(He(t[1])),signature:Ye(t[2]),raw:{header:t[0],payload:t[1]}}}function at(e){return("0"+e.toString(16)).substr(-2)}async function ct(e,t,r=!1){const n=function(){const e=new Uint32Array(56);if("undefined"==typeof crypto){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",t=e.length;let r="";for(let n=0;n<56;n++)r+=e.charAt(Math.floor(Math.random()*t));return r}return crypto.getRandomValues(e),Array.from(e,at).join("")}();let i=n;r&&(i+="/PASSWORD_RECOVERY"),await rt(e,`${t}-code-verifier`,i);const s=await async function(e){if("undefined"==typeof crypto||void 0===crypto.subtle||"undefined"==typeof TextEncoder)return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),e;const t=await async function(e){const t=(new TextEncoder).encode(e),r=await crypto.subtle.digest("SHA-256",t),n=new Uint8Array(r);return Array.from(n).map(e=>String.fromCharCode(e)).join("")}(e);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}(n);return[s,n===s?"plain":"s256"]}st.promiseConstructor=Promise;const ut=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i,lt=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function ht(e){if(!lt.test(e))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}const dt=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),ft=[502,503,504];async function gt(e){var t,r;if(!("object"==typeof(r=e)&&null!==r&&"status"in r&&"ok"in r&&"json"in r&&"function"==typeof r.json))throw new Be(dt(e),0);if(ft.includes(e.status))throw new Be(dt(e),e.status);let n,i;try{n=await e.json()}catch(e){throw new xe(dt(e),e)}const s=function(e){const t=e.headers.get(Ae);if(!t)return null;if(!t.match(ut))return null;try{return new Date(`${t}T00:00:00.0Z`)}catch(e){return null}}(e);if(s&&s.getTime()>=je&&"object"==typeof n&&n&&"string"==typeof n.code?i=n.code:"object"==typeof n&&n&&"string"==typeof n.error_code&&(i=n.error_code),i){if("weak_password"===i)throw new Fe(dt(n),e.status,(null===(t=n.weak_password)||void 0===t?void 0:t.reasons)||[]);if("session_not_found"===i)throw new $e}else if("object"==typeof n&&n&&"object"==typeof n.weak_password&&n.weak_password&&Array.isArray(n.weak_password.reasons)&&n.weak_password.reasons.length&&n.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0))throw new Fe(dt(n),e.status,n.weak_password.reasons);throw new Ce(dt(n),e.status||500,i)}async function pt(e,t,r,n){var i;const s=Object.assign({},null==n?void 0:n.headers);s[Ae]||(s[Ae]=Oe),(null==n?void 0:n.jwt)&&(s.Authorization=`Bearer ${n.jwt}`);const o=null!==(i=null==n?void 0:n.query)&&void 0!==i?i:{};(null==n?void 0:n.redirectTo)&&(o.redirect_to=n.redirectTo);const a=Object.keys(o).length?"?"+new URLSearchParams(o).toString():"",c=await async function(e,t,r,n,i,s){const o=((e,t,r,n)=>{const i={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?i:(i.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},null==t?void 0:t.headers),i.body=JSON.stringify(n),Object.assign(Object.assign({},i),r))})(t,n,{},s);let a;try{a=await e(r,Object.assign({},o))}catch(e){throw console.error(e),new Be(dt(e),0)}if(a.ok||await gt(a),null==n?void 0:n.noResolveJson)return a;try{return await a.json()}catch(e){await gt(e)}}(e,t,r+a,{headers:s,noResolveJson:null==n?void 0:n.noResolveJson},0,null==n?void 0:n.body);return(null==n?void 0:n.xform)?null==n?void 0:n.xform(c):{data:Object.assign({},c),error:null}}function vt(e){var t;let r=null;var n;return function(e){return e.access_token&&e.refresh_token&&e.expires_in}(e)&&(r=Object.assign({},e),e.expires_at||(r.expires_at=(n=e.expires_in,Math.round(Date.now()/1e3)+n))),{data:{session:r,user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function mt(e){const t=vt(e);return!t.error&&e.weak_password&&"object"==typeof e.weak_password&&Array.isArray(e.weak_password.reasons)&&e.weak_password.reasons.length&&e.weak_password.message&&"string"==typeof e.weak_password.message&&e.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0)&&(t.data.weak_password=e.weak_password),t}function yt(e){var t;return{data:{user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function bt(e){return{data:e,error:null}}function wt(e){const{action_link:t,email_otp:r,hashed_token:n,redirect_to:i,verification_type:s}=e,o=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}(e,["action_link","email_otp","hashed_token","redirect_to","verification_type"]);return{data:{properties:{action_link:t,email_otp:r,hashed_token:n,redirect_to:i,verification_type:s},user:Object.assign({},o)},error:null}}function kt(e){return e}const _t=["global","local","others"];class St{constructor({url:e="",headers:t={},fetch:r}){this.url=e,this.headers=t,this.fetch=tt(r),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(e,t=_t[0]){if(_t.indexOf(t)<0)throw new Error(`@supabase/auth-js: Parameter scope must be one of ${_t.join(", ")}`);try{return await pt(this.fetch,"POST",`${this.url}/logout?scope=${t}`,{headers:this.headers,jwt:e,noResolveJson:!0}),{data:null,error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async inviteUserByEmail(e,t={}){try{return await pt(this.fetch,"POST",`${this.url}/invite`,{body:{email:e,data:t.data},headers:this.headers,redirectTo:t.redirectTo,xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async generateLink(e){try{const{options:t}=e,r=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}(e,["options"]),n=Object.assign(Object.assign({},r),t);return"newEmail"in r&&(n.new_email=null==r?void 0:r.newEmail,delete n.newEmail),await pt(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:n,headers:this.headers,xform:wt,redirectTo:null==t?void 0:t.redirectTo})}catch(e){if(Pe(e))return{data:{properties:null,user:null},error:e};throw e}}async createUser(e){try{return await pt(this.fetch,"POST",`${this.url}/admin/users`,{body:e,headers:this.headers,xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async listUsers(e){var t,r,n,i,s,o,a;try{const c={nextPage:null,lastPage:0,total:0},u=await pt(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:null!==(r=null===(t=null==e?void 0:e.page)||void 0===t?void 0:t.toString())&&void 0!==r?r:"",per_page:null!==(i=null===(n=null==e?void 0:e.perPage)||void 0===n?void 0:n.toString())&&void 0!==i?i:""},xform:kt});if(u.error)throw u.error;const l=await u.json(),h=null!==(s=u.headers.get("x-total-count"))&&void 0!==s?s:0,d=null!==(a=null===(o=u.headers.get("link"))||void 0===o?void 0:o.split(","))&&void 0!==a?a:[];return d.length>0&&(d.forEach(e=>{const t=parseInt(e.split(";")[0].split("=")[1].substring(0,1)),r=JSON.parse(e.split(";")[1].split("=")[1]);c[`${r}Page`]=t}),c.total=parseInt(h)),{data:Object.assign(Object.assign({},l),c),error:null}}catch(e){if(Pe(e))return{data:{users:[]},error:e};throw e}}async getUserById(e){ht(e);try{return await pt(this.fetch,"GET",`${this.url}/admin/users/${e}`,{headers:this.headers,xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async updateUserById(e,t){ht(e);try{return await pt(this.fetch,"PUT",`${this.url}/admin/users/${e}`,{body:t,headers:this.headers,xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async deleteUser(e,t=!1){ht(e);try{return await pt(this.fetch,"DELETE",`${this.url}/admin/users/${e}`,{headers:this.headers,body:{should_soft_delete:t},xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async _listFactors(e){ht(e.userId);try{const{data:t,error:r}=await pt(this.fetch,"GET",`${this.url}/admin/users/${e.userId}/factors`,{headers:this.headers,xform:e=>({data:{factors:e},error:null})});return{data:t,error:r}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _deleteFactor(e){ht(e.userId),ht(e.id);try{return{data:await pt(this.fetch,"DELETE",`${this.url}/admin/users/${e.userId}/factors/${e.id}`,{headers:this.headers}),error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}}const Tt={getItem:e=>et()?globalThis.localStorage.getItem(e):null,setItem:(e,t)=>{et()&&globalThis.localStorage.setItem(e,t)},removeItem:e=>{et()&&globalThis.localStorage.removeItem(e)}};function At(e={}){return{getItem:t=>e[t]||null,setItem:(t,r)=>{e[t]=r},removeItem:t=>{delete e[t]}}}const jt=!!(globalThis&&et()&&globalThis.localStorage&&"true"===globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug"));class Ot extends Error{constructor(e){super(e),this.isAcquireTimeout=!0}}class It extends Ot{}async function Et(e,t,r){jt&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",e,t);const n=new globalThis.AbortController;return t>0&&setTimeout(()=>{n.abort(),jt&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",e)},t),await Promise.resolve().then(()=>globalThis.navigator.locks.request(e,0===t?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:n.signal},async n=>{if(!n){if(0===t)throw jt&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",e),new It(`Acquiring an exclusive Navigator LockManager lock "${e}" immediately failed`);if(jt)try{const e=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(e,null,"  "))}catch(e){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",e)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await r()}jt&&console.log("@supabase/gotrue-js: navigatorLock: acquired",e,n.name);try{return await r()}finally{jt&&console.log("@supabase/gotrue-js: navigatorLock: released",e,n.name)}}))}!function(){if("object"!=typeof globalThis)try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch(e){"undefined"!=typeof self&&(self.globalThis=self)}}();const Pt={url:"http://localhost:9999",storageKey:"supabase.auth.token",autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:Te,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function Ct(e,t,r){return await r()}class xt{constructor(e){var t,r;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=xt.nextInstanceID,xt.nextInstanceID+=1,this.instanceID>0&&Xe()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const n=Object.assign(Object.assign({},Pt),e);if(this.logDebugMessages=!!n.debug,"function"==typeof n.debug&&(this.logger=n.debug),this.persistSession=n.persistSession,this.storageKey=n.storageKey,this.autoRefreshToken=n.autoRefreshToken,this.admin=new St({url:n.url,headers:n.headers,fetch:n.fetch}),this.url=n.url,this.headers=n.headers,this.fetch=tt(n.fetch),this.lock=n.lock||Ct,this.detectSessionInUrl=n.detectSessionInUrl,this.flowType=n.flowType,this.hasCustomAuthorizationHeader=n.hasCustomAuthorizationHeader,n.lock?this.lock=n.lock:Xe()&&(null===(t=null===globalThis||void 0===globalThis?void 0:globalThis.navigator)||void 0===t?void 0:t.locks)?this.lock=Et:this.lock=Ct,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?n.storage?this.storage=n.storage:et()?this.storage=Tt:(this.memoryStorage={},this.storage=At(this.memoryStorage)):(this.memoryStorage={},this.storage=At(this.memoryStorage)),Xe()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(e){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",e)}null===(r=this.broadcastChannel)||void 0===r||r.addEventListener("message",async e=>{this._debug("received broadcast notification from other tab or client",e),await this._notifyAllSubscribers(e.data.event,e.data.session,!1)})}this.initialize()}_debug(...e){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${_e}) ${(new Date).toISOString()}`,...e),this}async initialize(){return this.initializePromise||(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))()),await this.initializePromise}async _initialize(){var e;try{const t=function(e){const t={},r=new URL(e);if(r.hash&&"#"===r.hash[0])try{new URLSearchParams(r.hash.substring(1)).forEach((e,r)=>{t[r]=e})}catch(e){}return r.searchParams.forEach((e,r)=>{t[r]=e}),t}(window.location.href);let r="none";if(this._isImplicitGrantCallback(t)?r="implicit":await this._isPKCECallback(t)&&(r="pkce"),Xe()&&this.detectSessionInUrl&&"none"!==r){const{data:n,error:i}=await this._getSessionFromURL(t,r);if(i){if(this._debug("#_initialize()","error detecting session from URL",i),function(e){return Pe(e)&&"AuthImplicitGrantRedirectError"===e.name}(i)){const t=null===(e=i.details)||void 0===e?void 0:e.code;if("identity_already_exists"===t||"identity_not_found"===t||"single_identity_not_deletable"===t)return{error:i}}return await this._removeSession(),{error:i}}const{session:s,redirectType:o}=n;return this._debug("#_initialize()","detected session in URL",s,"redirect type",o),await this._saveSession(s),setTimeout(async()=>{"recovery"===o?await this._notifyAllSubscribers("PASSWORD_RECOVERY",s):await this._notifyAllSubscribers("SIGNED_IN",s)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(e){return Pe(e)?{error:e}:{error:new xe("Unexpected error during initialization",e)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(e){var t,r,n;try{const i=await pt(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:null!==(r=null===(t=null==e?void 0:e.options)||void 0===t?void 0:t.data)&&void 0!==r?r:{},gotrue_meta_security:{captcha_token:null===(n=null==e?void 0:e.options)||void 0===n?void 0:n.captchaToken}},xform:vt}),{data:s,error:o}=i;if(o||!s)return{data:{user:null,session:null},error:o};const a=s.session,c=s.user;return s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:c,session:a},error:null}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signUp(e){var t,r,n;try{let i;if("email"in e){const{email:r,password:n,options:s}=e;let o=null,a=null;"pkce"===this.flowType&&([o,a]=await ct(this.storage,this.storageKey)),i=await pt(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:null==s?void 0:s.emailRedirectTo,body:{email:r,password:n,data:null!==(t=null==s?void 0:s.data)&&void 0!==t?t:{},gotrue_meta_security:{captcha_token:null==s?void 0:s.captchaToken},code_challenge:o,code_challenge_method:a},xform:vt})}else{if(!("phone"in e))throw new Le("You must provide either an email or phone number and a password");{const{phone:t,password:s,options:o}=e;i=await pt(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:t,password:s,data:null!==(r=null==o?void 0:o.data)&&void 0!==r?r:{},channel:null!==(n=null==o?void 0:o.channel)&&void 0!==n?n:"sms",gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:vt})}}const{data:s,error:o}=i;if(o||!s)return{data:{user:null,session:null},error:o};const a=s.session,c=s.user;return s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:c,session:a},error:null}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithPassword(e){try{let t;if("email"in e){const{email:r,password:n,options:i}=e;t=await pt(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:r,password:n,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},xform:mt})}else{if(!("phone"in e))throw new Le("You must provide either an email or phone number and a password");{const{phone:r,password:n,options:i}=e;t=await pt(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:r,password:n,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},xform:mt})}}const{data:r,error:n}=t;return n?{data:{user:null,session:null},error:n}:r&&r.session&&r.user?(r.session&&(await this._saveSession(r.session),await this._notifyAllSubscribers("SIGNED_IN",r.session)),{data:Object.assign({user:r.user,session:r.session},r.weak_password?{weakPassword:r.weak_password}:null),error:n}):{data:{user:null,session:null},error:new De}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOAuth(e){var t,r,n,i;return await this._handleProviderSignIn(e.provider,{redirectTo:null===(t=e.options)||void 0===t?void 0:t.redirectTo,scopes:null===(r=e.options)||void 0===r?void 0:r.scopes,queryParams:null===(n=e.options)||void 0===n?void 0:n.queryParams,skipBrowserRedirect:null===(i=e.options)||void 0===i?void 0:i.skipBrowserRedirect})}async exchangeCodeForSession(e){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(e))}async signInWithWeb3(e){const{chain:t}=e;if("solana"===t)return await this.signInWithSolana(e);throw new Error(`@supabase/auth-js: Unsupported chain "${t}"`)}async signInWithSolana(e){var t,r,n,i,s,o,a,c,u,l,h,d;let f,g;if("message"in e)f=e.message,g=e.signature;else{const{chain:h,wallet:d,statement:p,options:v}=e;let m;if(Xe())if("object"==typeof d)m=d;else{const e=window;if(!("solana"in e)||"object"!=typeof e.solana||!("signIn"in e.solana&&"function"==typeof e.solana.signIn||"signMessage"in e.solana&&"function"==typeof e.solana.signMessage))throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");m=e.solana}else{if("object"!=typeof d||!(null==v?void 0:v.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");m=d}const y=new URL(null!==(t=null==v?void 0:v.url)&&void 0!==t?t:window.location.href);if("signIn"in m&&m.signIn){const e=await m.signIn(Object.assign(Object.assign(Object.assign({issuedAt:(new Date).toISOString()},null==v?void 0:v.signInWithSolana),{version:"1",domain:y.host,uri:y.href}),p?{statement:p}:null));let t;if(Array.isArray(e)&&e[0]&&"object"==typeof e[0])t=e[0];else{if(!(e&&"object"==typeof e&&"signedMessage"in e&&"signature"in e))throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");t=e}if(!("signedMessage"in t&&"signature"in t&&("string"==typeof t.signedMessage||t.signedMessage instanceof Uint8Array)&&t.signature instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");f="string"==typeof t.signedMessage?t.signedMessage:(new TextDecoder).decode(t.signedMessage),g=t.signature}else{if(!("signMessage"in m&&"function"==typeof m.signMessage&&"publicKey"in m&&"object"==typeof m&&m.publicKey&&"toBase58"in m.publicKey&&"function"==typeof m.publicKey.toBase58))throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");f=[`${y.host} wants you to sign in with your Solana account:`,m.publicKey.toBase58(),...p?["",p,""]:[""],"Version: 1",`URI: ${y.href}`,`Issued At: ${null!==(n=null===(r=null==v?void 0:v.signInWithSolana)||void 0===r?void 0:r.issuedAt)&&void 0!==n?n:(new Date).toISOString()}`,...(null===(i=null==v?void 0:v.signInWithSolana)||void 0===i?void 0:i.notBefore)?[`Not Before: ${v.signInWithSolana.notBefore}`]:[],...(null===(s=null==v?void 0:v.signInWithSolana)||void 0===s?void 0:s.expirationTime)?[`Expiration Time: ${v.signInWithSolana.expirationTime}`]:[],...(null===(o=null==v?void 0:v.signInWithSolana)||void 0===o?void 0:o.chainId)?[`Chain ID: ${v.signInWithSolana.chainId}`]:[],...(null===(a=null==v?void 0:v.signInWithSolana)||void 0===a?void 0:a.nonce)?[`Nonce: ${v.signInWithSolana.nonce}`]:[],...(null===(c=null==v?void 0:v.signInWithSolana)||void 0===c?void 0:c.requestId)?[`Request ID: ${v.signInWithSolana.requestId}`]:[],...(null===(l=null===(u=null==v?void 0:v.signInWithSolana)||void 0===u?void 0:u.resources)||void 0===l?void 0:l.length)?["Resources",...v.signInWithSolana.resources.map(e=>`- ${e}`)]:[]].join("\n");const e=await m.signMessage((new TextEncoder).encode(f),"utf8");if(!(e&&e instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");g=e}}try{const{data:t,error:r}=await pt(this.fetch,"POST",`${this.url}/token?grant_type=web3`,{headers:this.headers,body:Object.assign({chain:"solana",message:f,signature:Qe(g)},(null===(h=e.options)||void 0===h?void 0:h.captchaToken)?{gotrue_meta_security:{captcha_token:null===(d=e.options)||void 0===d?void 0:d.captchaToken}}:null),xform:vt});if(r)throw r;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign({},t),error:r}):{data:{user:null,session:null},error:new De}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async _exchangeCodeForSession(e){const t=await nt(this.storage,`${this.storageKey}-code-verifier`),[r,n]=(null!=t?t:"").split("/");try{const{data:t,error:i}=await pt(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:e,code_verifier:r},xform:vt});if(await it(this.storage,`${this.storageKey}-code-verifier`),i)throw i;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign(Object.assign({},t),{redirectType:null!=n?n:null}),error:i}):{data:{user:null,session:null,redirectType:null},error:new De}}catch(e){if(Pe(e))return{data:{user:null,session:null,redirectType:null},error:e};throw e}}async signInWithIdToken(e){try{const{options:t,provider:r,token:n,access_token:i,nonce:s}=e,o=await pt(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:r,id_token:n,access_token:i,nonce:s,gotrue_meta_security:{captcha_token:null==t?void 0:t.captchaToken}},xform:vt}),{data:a,error:c}=o;return c?{data:{user:null,session:null},error:c}:a&&a.session&&a.user?(a.session&&(await this._saveSession(a.session),await this._notifyAllSubscribers("SIGNED_IN",a.session)),{data:a,error:c}):{data:{user:null,session:null},error:new De}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOtp(e){var t,r,n,i,s;try{if("email"in e){const{email:n,options:i}=e;let s=null,o=null;"pkce"===this.flowType&&([s,o]=await ct(this.storage,this.storageKey));const{error:a}=await pt(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:n,data:null!==(t=null==i?void 0:i.data)&&void 0!==t?t:{},create_user:null===(r=null==i?void 0:i.shouldCreateUser)||void 0===r||r,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken},code_challenge:s,code_challenge_method:o},redirectTo:null==i?void 0:i.emailRedirectTo});return{data:{user:null,session:null},error:a}}if("phone"in e){const{phone:t,options:r}=e,{data:o,error:a}=await pt(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:t,data:null!==(n=null==r?void 0:r.data)&&void 0!==n?n:{},create_user:null===(i=null==r?void 0:r.shouldCreateUser)||void 0===i||i,gotrue_meta_security:{captcha_token:null==r?void 0:r.captchaToken},channel:null!==(s=null==r?void 0:r.channel)&&void 0!==s?s:"sms"}});return{data:{user:null,session:null,messageId:null==o?void 0:o.message_id},error:a}}throw new Le("You must provide either an email or phone number.")}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async verifyOtp(e){var t,r;try{let n,i;"options"in e&&(n=null===(t=e.options)||void 0===t?void 0:t.redirectTo,i=null===(r=e.options)||void 0===r?void 0:r.captchaToken);const{data:s,error:o}=await pt(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},e),{gotrue_meta_security:{captcha_token:i}}),redirectTo:n,xform:vt});if(o)throw o;if(!s)throw new Error("An error occurred on token verification.");const a=s.session,c=s.user;return(null==a?void 0:a.access_token)&&(await this._saveSession(a),await this._notifyAllSubscribers("recovery"==e.type?"PASSWORD_RECOVERY":"SIGNED_IN",a)),{data:{user:c,session:a},error:null}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithSSO(e){var t,r,n;try{let i=null,s=null;return"pkce"===this.flowType&&([i,s]=await ct(this.storage,this.storageKey)),await pt(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in e?{provider_id:e.providerId}:null),"domain"in e?{domain:e.domain}:null),{redirect_to:null!==(r=null===(t=e.options)||void 0===t?void 0:t.redirectTo)&&void 0!==r?r:void 0}),(null===(n=null==e?void 0:e.options)||void 0===n?void 0:n.captchaToken)?{gotrue_meta_security:{captcha_token:e.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:i,code_challenge_method:s}),headers:this.headers,xform:bt})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async e=>{const{data:{session:t},error:r}=e;if(r)throw r;if(!t)throw new $e;const{error:n}=await pt(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:t.access_token});return{data:{user:null,session:null},error:n}})}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async resend(e){try{const t=`${this.url}/resend`;if("email"in e){const{email:r,type:n,options:i}=e,{error:s}=await pt(this.fetch,"POST",t,{headers:this.headers,body:{email:r,type:n,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},redirectTo:null==i?void 0:i.emailRedirectTo});return{data:{user:null,session:null},error:s}}if("phone"in e){const{phone:r,type:n,options:i}=e,{data:s,error:o}=await pt(this.fetch,"POST",t,{headers:this.headers,body:{phone:r,type:n,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}}});return{data:{user:null,session:null,messageId:null==s?void 0:s.message_id},error:o}}throw new Le("You must provide either an email or phone number and a type")}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async e=>e))}async _acquireLock(e,t){this._debug("#_acquireLock","begin",e);try{if(this.lockAcquired){const e=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),r=(async()=>(await e,await t()))();return this.pendingInLock.push((async()=>{try{await r}catch(e){}})()),r}return await this.lock(`lock:${this.storageKey}`,e,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const e=t();for(this.pendingInLock.push((async()=>{try{await e}catch(e){}})()),await e;this.pendingInLock.length;){const e=[...this.pendingInLock];await Promise.all(e),this.pendingInLock.splice(0,e.length)}return await e}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(e){this._debug("#_useSession","begin");try{const t=await this.__loadSession();return await e(t)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",(new Error).stack);try{let e=null;const t=await nt(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",t),null!==t&&(this._isValidSession(t)?e=t:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!e)return{data:{session:null},error:null};const r=!!e.expires_at&&1e3*e.expires_at-Date.now()<9e4;if(this._debug("#__loadSession()",`session has${r?"":" not"} expired`,"expires_at",e.expires_at),!r){if(this.storage.isServer){let t=this.suppressGetSessionWarning;e=new Proxy(e,{get:(e,r,n)=>(t||"user"!==r||(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),t=!0,this.suppressGetSessionWarning=!0),Reflect.get(e,r,n))})}return{data:{session:e},error:null}}const{session:n,error:i}=await this._callRefreshToken(e.refresh_token);return i?{data:{session:null},error:i}:{data:{session:n},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(e){return e?await this._getUser(e):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(e){try{return e?await pt(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:e,xform:yt}):await this._useSession(async e=>{var t,r,n;const{data:i,error:s}=e;if(s)throw s;return(null===(t=i.session)||void 0===t?void 0:t.access_token)||this.hasCustomAuthorizationHeader?await pt(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:null!==(n=null===(r=i.session)||void 0===r?void 0:r.access_token)&&void 0!==n?n:void 0,xform:yt}):{data:{user:null},error:new $e}})}catch(e){if(Pe(e))return function(e){return Pe(e)&&"AuthSessionMissingError"===e.name}(e)&&(await this._removeSession(),await it(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:e};throw e}}async updateUser(e,t={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(e,t))}async _updateUser(e,t={}){try{return await this._useSession(async r=>{const{data:n,error:i}=r;if(i)throw i;if(!n.session)throw new $e;const s=n.session;let o=null,a=null;"pkce"===this.flowType&&null!=e.email&&([o,a]=await ct(this.storage,this.storageKey));const{data:c,error:u}=await pt(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:null==t?void 0:t.emailRedirectTo,body:Object.assign(Object.assign({},e),{code_challenge:o,code_challenge_method:a}),jwt:s.access_token,xform:yt});if(u)throw u;return s.user=c.user,await this._saveSession(s),await this._notifyAllSubscribers("USER_UPDATED",s),{data:{user:s.user},error:null}})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async setSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(e))}async _setSession(e){try{if(!e.access_token||!e.refresh_token)throw new $e;const t=Date.now()/1e3;let r=t,n=!0,i=null;const{payload:s}=ot(e.access_token);if(s.exp&&(r=s.exp,n=r<=t),n){const{session:t,error:r}=await this._callRefreshToken(e.refresh_token);if(r)return{data:{user:null,session:null},error:r};if(!t)return{data:{user:null,session:null},error:null};i=t}else{const{data:n,error:s}=await this._getUser(e.access_token);if(s)throw s;i={access_token:e.access_token,refresh_token:e.refresh_token,user:n.user,token_type:"bearer",expires_in:r-t,expires_at:r},await this._saveSession(i),await this._notifyAllSubscribers("SIGNED_IN",i)}return{data:{user:i.user,session:i},error:null}}catch(e){if(Pe(e))return{data:{session:null,user:null},error:e};throw e}}async refreshSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(e))}async _refreshSession(e){try{return await this._useSession(async t=>{var r;if(!e){const{data:n,error:i}=t;if(i)throw i;e=null!==(r=n.session)&&void 0!==r?r:void 0}if(!(null==e?void 0:e.refresh_token))throw new $e;const{session:n,error:i}=await this._callRefreshToken(e.refresh_token);return i?{data:{user:null,session:null},error:i}:n?{data:{user:n.user,session:n},error:null}:{data:{user:null,session:null},error:null}})}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async _getSessionFromURL(e,t){try{if(!Xe())throw new Ue("No browser detected.");if(e.error||e.error_description||e.error_code)throw new Ue(e.error_description||"Error in URL with unspecified error_description",{error:e.error||"unspecified_error",code:e.error_code||"unspecified_code"});switch(t){case"implicit":if("pkce"===this.flowType)throw new Ne("Not a valid PKCE flow url.");break;case"pkce":if("implicit"===this.flowType)throw new Ue("Not a valid implicit grant flow url.")}if("pkce"===t){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!e.code)throw new Ne("No code detected.");const{data:t,error:r}=await this._exchangeCodeForSession(e.code);if(r)throw r;const n=new URL(window.location.href);return n.searchParams.delete("code"),window.history.replaceState(window.history.state,"",n.toString()),{data:{session:t.session,redirectType:null},error:null}}const{provider_token:r,provider_refresh_token:n,access_token:i,refresh_token:s,expires_in:o,expires_at:a,token_type:c}=e;if(!(i&&o&&s&&c))throw new Ue("No session defined in URL");const u=Math.round(Date.now()/1e3),l=parseInt(o);let h=u+l;a&&(h=parseInt(a));const d=h-u;1e3*d<=Se&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${d}s, should have been closer to ${l}s`);const f=h-l;u-f>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",f,h,u):u-f<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",f,h,u);const{data:g,error:p}=await this._getUser(i);if(p)throw p;const v={provider_token:r,provider_refresh_token:n,access_token:i,expires_in:l,expires_at:h,refresh_token:s,token_type:c,user:g.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:v,redirectType:e.type},error:null}}catch(e){if(Pe(e))return{data:{session:null,redirectType:null},error:e};throw e}}_isImplicitGrantCallback(e){return Boolean(e.access_token||e.error_description)}async _isPKCECallback(e){const t=await nt(this.storage,`${this.storageKey}-code-verifier`);return!(!e.code||!t)}async signOut(e={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(e))}async _signOut({scope:e}={scope:"global"}){return await this._useSession(async t=>{var r;const{data:n,error:i}=t;if(i)return{error:i};const s=null===(r=n.session)||void 0===r?void 0:r.access_token;if(s){const{error:t}=await this.admin.signOut(s,e);if(t&&(!function(e){return Pe(e)&&"AuthApiError"===e.name}(t)||404!==t.status&&401!==t.status&&403!==t.status))return{error:t}}return"others"!==e&&(await this._removeSession(),await it(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(e){const t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}),r={id:t,callback:e,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",t),this.stateChangeEmitters.delete(t)}};return this._debug("#onAuthStateChange()","registered callback with id",t),this.stateChangeEmitters.set(t,r),(async()=>{await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(t)})})(),{data:{subscription:r}}}async _emitInitialSession(e){return await this._useSession(async t=>{var r,n;try{const{data:{session:n},error:i}=t;if(i)throw i;await(null===(r=this.stateChangeEmitters.get(e))||void 0===r?void 0:r.callback("INITIAL_SESSION",n)),this._debug("INITIAL_SESSION","callback id",e,"session",n)}catch(t){await(null===(n=this.stateChangeEmitters.get(e))||void 0===n?void 0:n.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",e,"error",t),console.error(t)}})}async resetPasswordForEmail(e,t={}){let r=null,n=null;"pkce"===this.flowType&&([r,n]=await ct(this.storage,this.storageKey,!0));try{return await pt(this.fetch,"POST",`${this.url}/recover`,{body:{email:e,code_challenge:r,code_challenge_method:n,gotrue_meta_security:{captcha_token:t.captchaToken}},headers:this.headers,redirectTo:t.redirectTo})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async getUserIdentities(){var e;try{const{data:t,error:r}=await this.getUser();if(r)throw r;return{data:{identities:null!==(e=t.user.identities)&&void 0!==e?e:[]},error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async linkIdentity(e){var t;try{const{data:r,error:n}=await this._useSession(async t=>{var r,n,i,s,o;const{data:a,error:c}=t;if(c)throw c;const u=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,e.provider,{redirectTo:null===(r=e.options)||void 0===r?void 0:r.redirectTo,scopes:null===(n=e.options)||void 0===n?void 0:n.scopes,queryParams:null===(i=e.options)||void 0===i?void 0:i.queryParams,skipBrowserRedirect:!0});return await pt(this.fetch,"GET",u,{headers:this.headers,jwt:null!==(o=null===(s=a.session)||void 0===s?void 0:s.access_token)&&void 0!==o?o:void 0})});if(n)throw n;return Xe()&&!(null===(t=e.options)||void 0===t?void 0:t.skipBrowserRedirect)&&window.location.assign(null==r?void 0:r.url),{data:{provider:e.provider,url:null==r?void 0:r.url},error:null}}catch(t){if(Pe(t))return{data:{provider:e.provider,url:null},error:t};throw t}}async unlinkIdentity(e){try{return await this._useSession(async t=>{var r,n;const{data:i,error:s}=t;if(s)throw s;return await pt(this.fetch,"DELETE",`${this.url}/user/identities/${e.identity_id}`,{headers:this.headers,jwt:null!==(n=null===(r=i.session)||void 0===r?void 0:r.access_token)&&void 0!==n?n:void 0})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _refreshAccessToken(e){const t=`#_refreshAccessToken(${e.substring(0,5)}...)`;this._debug(t,"begin");try{const i=Date.now();return await(r=async r=>(r>0&&await async function(e){return await new Promise(t=>{setTimeout(()=>t(null),e)})}(200*Math.pow(2,r-1)),this._debug(t,"refreshing attempt",r),await pt(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:e},headers:this.headers,xform:vt})),n=(e,t)=>{const r=200*Math.pow(2,e);return t&&qe(t)&&Date.now()+r-i<Se},new Promise((e,t)=>{(async()=>{for(let i=0;i<1/0;i++)try{const t=await r(i);if(!n(i,null))return void e(t)}catch(e){if(!n(i,e))return void t(e)}})()}))}catch(e){if(this._debug(t,"error",e),Pe(e))return{data:{session:null,user:null},error:e};throw e}finally{this._debug(t,"end")}var r,n}_isValidSession(e){return"object"==typeof e&&null!==e&&"access_token"in e&&"refresh_token"in e&&"expires_at"in e}async _handleProviderSignIn(e,t){const r=await this._getUrlForProvider(`${this.url}/authorize`,e,{redirectTo:t.redirectTo,scopes:t.scopes,queryParams:t.queryParams});return this._debug("#_handleProviderSignIn()","provider",e,"options",t,"url",r),Xe()&&!t.skipBrowserRedirect&&window.location.assign(r),{data:{provider:e,url:r},error:null}}async _recoverAndRefresh(){var e;const t="#_recoverAndRefresh()";this._debug(t,"begin");try{const r=await nt(this.storage,this.storageKey);if(this._debug(t,"session from storage",r),!this._isValidSession(r))return this._debug(t,"session is not valid"),void(null!==r&&await this._removeSession());const n=1e3*(null!==(e=r.expires_at)&&void 0!==e?e:1/0)-Date.now()<9e4;if(this._debug(t,`session has${n?"":" not"} expired with margin of 90000s`),n){if(this.autoRefreshToken&&r.refresh_token){const{error:e}=await this._callRefreshToken(r.refresh_token);e&&(console.error(e),qe(e)||(this._debug(t,"refresh failed with a non-retryable error, removing the session",e),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",r)}catch(e){return this._debug(t,"error",e),void console.error(e)}finally{this._debug(t,"end")}}async _callRefreshToken(e){var t,r;if(!e)throw new $e;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const n=`#_callRefreshToken(${e.substring(0,5)}...)`;this._debug(n,"begin");try{this.refreshingDeferred=new st;const{data:t,error:r}=await this._refreshAccessToken(e);if(r)throw r;if(!t.session)throw new $e;await this._saveSession(t.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",t.session);const n={session:t.session,error:null};return this.refreshingDeferred.resolve(n),n}catch(e){if(this._debug(n,"error",e),Pe(e)){const r={session:null,error:e};return qe(e)||await this._removeSession(),null===(t=this.refreshingDeferred)||void 0===t||t.resolve(r),r}throw null===(r=this.refreshingDeferred)||void 0===r||r.reject(e),e}finally{this.refreshingDeferred=null,this._debug(n,"end")}}async _notifyAllSubscribers(e,t,r=!0){const n=`#_notifyAllSubscribers(${e})`;this._debug(n,"begin",t,`broadcast = ${r}`);try{this.broadcastChannel&&r&&this.broadcastChannel.postMessage({event:e,session:t});const n=[],i=Array.from(this.stateChangeEmitters.values()).map(async r=>{try{await r.callback(e,t)}catch(e){n.push(e)}});if(await Promise.all(i),n.length>0){for(let e=0;e<n.length;e+=1)console.error(n[e]);throw n[0]}}finally{this._debug(n,"end")}}async _saveSession(e){this._debug("#_saveSession()",e),this.suppressGetSessionWarning=!0,await rt(this.storage,this.storageKey,e)}async _removeSession(){this._debug("#_removeSession()"),await it(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const e=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{e&&Xe()&&(null===window||void 0===window?void 0:window.removeEventListener)&&window.removeEventListener("visibilitychange",e)}catch(e){console.error("removing visibilitychange callback failed",e)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const e=setInterval(()=>this._autoRefreshTokenTick(),Se);this.autoRefreshTicker=e,e&&"object"==typeof e&&"function"==typeof e.unref?e.unref():"undefined"!=typeof Deno&&"function"==typeof Deno.unrefTimer&&Deno.unrefTimer(e),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const e=this.autoRefreshTicker;this.autoRefreshTicker=null,e&&clearInterval(e)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const e=Date.now();try{return await this._useSession(async t=>{const{data:{session:r}}=t;if(!r||!r.refresh_token||!r.expires_at)return void this._debug("#_autoRefreshTokenTick()","no session");const n=Math.floor((1e3*r.expires_at-e)/Se);this._debug("#_autoRefreshTokenTick()",`access token expires in ${n} ticks, a tick lasts 30000ms, refresh threshold is 3 ticks`),n<=3&&await this._callRefreshToken(r.refresh_token)})}catch(e){console.error("Auto refresh tick failed with error. This is likely a transient error.",e)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(e){if(!(e.isAcquireTimeout||e instanceof Ot))throw e;this._debug("auto refresh token tick lock not available")}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!Xe()||!(null===window||void 0===window?void 0:window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),null===window||void 0===window||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(e){console.error("_handleVisibilityChange",e)}}async _onVisibilityChanged(e){const t=`#_onVisibilityChanged(${e})`;this._debug(t,"visibilityState",document.visibilityState),"visible"===document.visibilityState?(this.autoRefreshToken&&this._startAutoRefresh(),e||(await this.initializePromise,await this._acquireLock(-1,async()=>{"visible"===document.visibilityState?await this._recoverAndRefresh():this._debug(t,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting")}))):"hidden"===document.visibilityState&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(e,t,r){const n=[`provider=${encodeURIComponent(t)}`];if((null==r?void 0:r.redirectTo)&&n.push(`redirect_to=${encodeURIComponent(r.redirectTo)}`),(null==r?void 0:r.scopes)&&n.push(`scopes=${encodeURIComponent(r.scopes)}`),"pkce"===this.flowType){const[e,t]=await ct(this.storage,this.storageKey),r=new URLSearchParams({code_challenge:`${encodeURIComponent(e)}`,code_challenge_method:`${encodeURIComponent(t)}`});n.push(r.toString())}if(null==r?void 0:r.queryParams){const e=new URLSearchParams(r.queryParams);n.push(e.toString())}return(null==r?void 0:r.skipBrowserRedirect)&&n.push(`skip_http_redirect=${r.skipBrowserRedirect}`),`${e}?${n.join("&")}`}async _unenroll(e){try{return await this._useSession(async t=>{var r;const{data:n,error:i}=t;return i?{data:null,error:i}:await pt(this.fetch,"DELETE",`${this.url}/factors/${e.factorId}`,{headers:this.headers,jwt:null===(r=null==n?void 0:n.session)||void 0===r?void 0:r.access_token})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _enroll(e){try{return await this._useSession(async t=>{var r,n;const{data:i,error:s}=t;if(s)return{data:null,error:s};const o=Object.assign({friendly_name:e.friendlyName,factor_type:e.factorType},"phone"===e.factorType?{phone:e.phone}:{issuer:e.issuer}),{data:a,error:c}=await pt(this.fetch,"POST",`${this.url}/factors`,{body:o,headers:this.headers,jwt:null===(r=null==i?void 0:i.session)||void 0===r?void 0:r.access_token});return c?{data:null,error:c}:("totp"===e.factorType&&(null===(n=null==a?void 0:a.totp)||void 0===n?void 0:n.qr_code)&&(a.totp.qr_code=`data:image/svg+xml;utf-8,${a.totp.qr_code}`),{data:a,error:null})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _verify(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var r;const{data:n,error:i}=t;if(i)return{data:null,error:i};const{data:s,error:o}=await pt(this.fetch,"POST",`${this.url}/factors/${e.factorId}/verify`,{body:{code:e.code,challenge_id:e.challengeId},headers:this.headers,jwt:null===(r=null==n?void 0:n.session)||void 0===r?void 0:r.access_token});return o?{data:null,error:o}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+s.expires_in},s)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",s),{data:s,error:o})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}})}async _challenge(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var r;const{data:n,error:i}=t;return i?{data:null,error:i}:await pt(this.fetch,"POST",`${this.url}/factors/${e.factorId}/challenge`,{body:{channel:e.channel},headers:this.headers,jwt:null===(r=null==n?void 0:n.session)||void 0===r?void 0:r.access_token})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}})}async _challengeAndVerify(e){const{data:t,error:r}=await this._challenge({factorId:e.factorId});return r?{data:null,error:r}:await this._verify({factorId:e.factorId,challengeId:t.id,code:e.code})}async _listFactors(){const{data:{user:e},error:t}=await this.getUser();if(t)return{data:null,error:t};const r=(null==e?void 0:e.factors)||[],n=r.filter(e=>"totp"===e.factor_type&&"verified"===e.status),i=r.filter(e=>"phone"===e.factor_type&&"verified"===e.status);return{data:{all:r,totp:n,phone:i},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async e=>{var t,r;const{data:{session:n},error:i}=e;if(i)return{data:null,error:i};if(!n)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:s}=ot(n.access_token);let o=null;s.aal&&(o=s.aal);let a=o;return(null!==(r=null===(t=n.user.factors)||void 0===t?void 0:t.filter(e=>"verified"===e.status))&&void 0!==r?r:[]).length>0&&(a="aal2"),{data:{currentLevel:o,nextLevel:a,currentAuthenticationMethods:s.amr||[]},error:null}}))}async fetchJwk(e,t={keys:[]}){let r=t.keys.find(t=>t.kid===e);if(r)return r;if(r=this.jwks.keys.find(t=>t.kid===e),r&&this.jwks_cached_at+6e5>Date.now())return r;const{data:n,error:i}=await pt(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(i)throw i;if(!n.keys||0===n.keys.length)throw new Me("JWKS is empty");if(this.jwks=n,this.jwks_cached_at=Date.now(),r=n.keys.find(t=>t.kid===e),!r)throw new Me("No matching signing key found in JWKS");return r}async getClaims(e,t={keys:[]}){try{let r=e;if(!r){const{data:e,error:t}=await this.getSession();if(t||!e.session)return{data:null,error:t};r=e.session.access_token}const{header:n,payload:i,signature:s,raw:{header:o,payload:a}}=ot(r);if(function(e){if(!e)throw new Error("Missing exp claim");if(e<=Math.floor(Date.now()/1e3))throw new Error("JWT has expired")}(i.exp),!n.kid||"HS256"===n.alg||!("crypto"in globalThis)||!("subtle"in globalThis.crypto)){const{error:e}=await this.getUser(r);if(e)throw e;return{data:{claims:i,header:n,signature:s},error:null}}const c=function(e){switch(e){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}(n.alg),u=await this.fetchJwk(n.kid,t),l=await crypto.subtle.importKey("jwk",u,c,!0,["verify"]);if(!await crypto.subtle.verify(c,l,s,function(e){const t=[];return function(e,t){for(let r=0;r<e.length;r+=1){let n=e.charCodeAt(r);if(n>55295&&n<=56319){const t=1024*(n-55296)&65535;n=65536+(e.charCodeAt(r+1)-56320&65535|t),r+=1}Ve(n,t)}}(e,e=>t.push(e)),new Uint8Array(t)}(`${o}.${a}`)))throw new Me("Invalid JWT signature");return{data:{claims:i,header:n,signature:s},error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}}xt.nextInstanceID=0;const Rt=xt;class $t extends Rt{constructor(e){super(e)}}class Dt{constructor(e,t,r){var n,i,s;if(this.supabaseUrl=e,this.supabaseKey=t,!e)throw new Error("supabaseUrl is required.");if(!t)throw new Error("supabaseKey is required.");const o=(a=e).endsWith("/")?a:a+"/";var a;const c=new URL(o);this.realtimeUrl=new URL("realtime/v1",c),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",c),this.storageUrl=new URL("storage/v1",c),this.functionsUrl=new URL("functions/v1",c);const u=`sb-${c.hostname.split(".")[0]}-auth-token`,l=function(e,t){var r,n;const{db:i,auth:s,realtime:o,global:a}=e,{db:c,auth:u,realtime:l,global:h}=t,d={db:Object.assign(Object.assign({},c),i),auth:Object.assign(Object.assign({},u),s),realtime:Object.assign(Object.assign({},l),o),global:Object.assign(Object.assign(Object.assign({},h),a),{headers:Object.assign(Object.assign({},null!==(r=null==h?void 0:h.headers)&&void 0!==r?r:{}),null!==(n=null==a?void 0:a.headers)&&void 0!==n?n:{})}),accessToken:()=>{return e=this,t=void 0,n=function*(){return""},new((r=void 0)||(r=Promise))(function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(o,a)}c((n=n.apply(e,t||[])).next())});var e,t,r,n}};return e.accessToken?d.accessToken=e.accessToken:delete d.accessToken,d}(null!=r?r:{},{db:ve,realtime:ye,auth:Object.assign(Object.assign({},me),{storageKey:u}),global:pe});this.storageKey=null!==(n=l.auth.storageKey)&&void 0!==n?n:"",this.headers=null!==(i=l.global.headers)&&void 0!==i?i:{},l.accessToken?(this.accessToken=l.accessToken,this.auth=new Proxy({},{get:(e,t)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(t)} is not possible`)}})):this.auth=this._initSupabaseAuthClient(null!==(s=l.auth)&&void 0!==s?s:{},this.headers,l.global.fetch),this.fetch=ke(t,this._getAccessToken.bind(this),l.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},l.realtime)),this.rest=new d(new URL("rest/v1",c).href,{headers:this.headers,schema:l.db.schema,fetch:this.fetch}),l.accessToken||this._listenForAuthEvents()}get functions(){return new l(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}get storage(){return new fe(this.storageUrl.href,this.headers,this.fetch)}from(e){return this.rest.from(e)}schema(e){return this.rest.schema(e)}rpc(e,t={},r={}){return this.rest.rpc(e,t,r)}channel(e,t={config:{}}){return this.realtime.channel(e,t)}getChannels(){return this.realtime.getChannels()}removeChannel(e){return this.realtime.removeChannel(e)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var e,t,r,n,i,s;return r=this,n=void 0,s=function*(){if(this.accessToken)return yield this.accessToken();const{data:r}=yield this.auth.getSession();return null!==(t=null===(e=r.session)||void 0===e?void 0:e.access_token)&&void 0!==t?t:null},new((i=void 0)||(i=Promise))(function(e,t){function o(e){try{c(s.next(e))}catch(e){t(e)}}function a(e){try{c(s.throw(e))}catch(e){t(e)}}function c(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i(function(e){e(r)})).then(o,a)}c((s=s.apply(r,n||[])).next())})}_initSupabaseAuthClient({autoRefreshToken:e,persistSession:t,detectSessionInUrl:r,storage:n,storageKey:i,flowType:s,lock:o,debug:a},c,u){const l={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new $t({url:this.authUrl.href,headers:Object.assign(Object.assign({},l),c),storageKey:i,autoRefreshToken:e,persistSession:t,detectSessionInUrl:r,storage:n,flowType:s,lock:o,debug:a,fetch:u,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(e){return new J(this.realtimeUrl.href,Object.assign(Object.assign({},e),{params:Object.assign({apikey:this.supabaseKey},null==e?void 0:e.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((e,t)=>{this._handleTokenChanged(e,"CLIENT",null==t?void 0:t.access_token)})}_handleTokenChanged(e,t,r){"TOKEN_REFRESHED"!==e&&"SIGNED_IN"!==e||this.changedAccessToken===r?"SIGNED_OUT"===e&&(this.realtime.setAuth(),"STORAGE"==t&&this.auth.signOut(),this.changedAccessToken=void 0):this.changedAccessToken=r}}function Lt(e){return Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lt(e)}function Ut(e,t,r){return(t=function(e){var t=function(e){if("object"!=Lt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=Lt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Lt(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Nt(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",i=r.toStringTag||"@@toStringTag";function s(r,n,i,s){var c=n&&n.prototype instanceof a?n:a,u=Object.create(c.prototype);return Bt(u,"_invoke",function(r,n,i){var s,a,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,r){return s=t,a=0,c=e,d.n=r,o}};function f(r,n){for(a=r,c=n,t=0;!h&&u&&!i&&t<l.length;t++){var i,s=l[t],f=d.p,g=s[2];r>3?(i=g===n)&&(c=s[(a=s[4])?5:(a=3,3)],s[4]=s[5]=e):s[0]<=f&&((i=r<2&&f<s[1])?(a=0,d.v=n,d.n=s[1]):f<g&&(i=r<3||s[0]>n||n>g)&&(s[4]=r,s[5]=n,d.n=g,a=0))}if(i||r>1)return o;throw h=!0,n}return function(i,l,g){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,g),a=l,c=g;(t=a<2?e:c)||!h;){s||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(u=2,s){if(a||(i="next"),t=s[i]){if(!(t=t.call(s,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=s.return)&&t.call(s),a<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),a=1);s=e}else if((t=(h=d.n<0)?c:r.call(n,d))!==o)break}catch(t){s=e,a=1,c=t}finally{u=1}}return{value:t,done:h}}}(r,i,s),!0),u}var o={};function a(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][n]?t(t([][n]())):(Bt(t={},n,function(){return this}),t),h=u.prototype=a.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Bt(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,Bt(h,"constructor",u),Bt(u,"constructor",c),c.displayName="GeneratorFunction",Bt(u,i,"GeneratorFunction"),Bt(h),Bt(h,i,"Generator"),Bt(h,n,function(){return this}),Bt(h,"toString",function(){return"[object Generator]"}),(Nt=function(){return{w:s,m:d}})()}function Bt(e,t,r,n){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}Bt=function(e,t,r,n){if(t)i?i(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r;else{var s=function(t,r){Bt(e,t,function(e){return this._invoke(t,r,e)})};s("next",0),s("throw",1),s("return",2)}},Bt(e,t,r,n)}function qt(e,t,r,n,i,s,o){try{var a=e[s](o),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,i)}function Ft(e){return function(){var t=this,r=arguments;return new Promise(function(n,i){var s=e.apply(t,r);function o(e){qt(s,n,i,o,a,"next",e)}function a(e){qt(s,n,i,o,a,"throw",e)}o(void 0)})}}var Mt=new Dt("https://tpjnyiyvpyzzbzhajbjh.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRwam55aXl2cHl6emJ6aGFqYmpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NDA1NTQsImV4cCI6MjA2NzIxNjU1NH0.cflFdHytlTUA_H_AP7E3Kry9-S-xw45pIRoJQtfk4AE",{auth:{storage:{getItem:function(e){return Ft(Nt().m(function t(){var r;return Nt().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.get(e);case 1:return r=t.v,t.a(2,r[e]||null)}},t)}))()},setItem:function(e,t){return Ft(Nt().m(function r(){return Nt().w(function(r){for(;;)switch(r.n){case 0:return r.n=1,chrome.storage.local.set(Ut({},e,t));case 1:return r.a(2)}},r)}))()},removeItem:function(e){return Ft(Nt().m(function t(){return Nt().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.remove(e);case 1:return t.a(2)}},t)}))()}},autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0}});function zt(e){return zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zt(e)}function Kt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function Wt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Kt(Object(r),!0).forEach(function(t){Jt(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Kt(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function Jt(e,t,r){return(t=tr(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Gt(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",i=r.toStringTag||"@@toStringTag";function s(r,n,i,s){var c=n&&n.prototype instanceof a?n:a,u=Object.create(c.prototype);return Ht(u,"_invoke",function(r,n,i){var s,a,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,r){return s=t,a=0,c=e,d.n=r,o}};function f(r,n){for(a=r,c=n,t=0;!h&&u&&!i&&t<l.length;t++){var i,s=l[t],f=d.p,g=s[2];r>3?(i=g===n)&&(c=s[(a=s[4])?5:(a=3,3)],s[4]=s[5]=e):s[0]<=f&&((i=r<2&&f<s[1])?(a=0,d.v=n,d.n=s[1]):f<g&&(i=r<3||s[0]>n||n>g)&&(s[4]=r,s[5]=n,d.n=g,a=0))}if(i||r>1)return o;throw h=!0,n}return function(i,l,g){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,g),a=l,c=g;(t=a<2?e:c)||!h;){s||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(u=2,s){if(a||(i="next"),t=s[i]){if(!(t=t.call(s,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=s.return)&&t.call(s),a<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),a=1);s=e}else if((t=(h=d.n<0)?c:r.call(n,d))!==o)break}catch(t){s=e,a=1,c=t}finally{u=1}}return{value:t,done:h}}}(r,i,s),!0),u}var o={};function a(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][n]?t(t([][n]())):(Ht(t={},n,function(){return this}),t),h=u.prototype=a.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Ht(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,Ht(h,"constructor",u),Ht(u,"constructor",c),c.displayName="GeneratorFunction",Ht(u,i,"GeneratorFunction"),Ht(h),Ht(h,i,"Generator"),Ht(h,n,function(){return this}),Ht(h,"toString",function(){return"[object Generator]"}),(Gt=function(){return{w:s,m:d}})()}function Ht(e,t,r,n){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}Ht=function(e,t,r,n){if(t)i?i(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r;else{var s=function(t,r){Ht(e,t,function(e){return this._invoke(t,r,e)})};s("next",0),s("throw",1),s("return",2)}},Ht(e,t,r,n)}function Vt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,i,s,o,a=[],c=!0,u=!1;try{if(s=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=s.call(r)).done)&&(a.push(n.value),a.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(u)throw i}}return a}}(e,t)||Yt(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yt(e,t){if(e){if("string"==typeof e)return Qt(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Qt(e,t):void 0}}function Qt(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function Xt(e,t,r,n,i,s,o){try{var a=e[s](o),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,i)}function Zt(e){return function(){var t=this,r=arguments;return new Promise(function(n,i){var s=e.apply(t,r);function o(e){Xt(s,n,i,o,a,"next",e)}function a(e){Xt(s,n,i,o,a,"throw",e)}o(void 0)})}}function er(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,tr(n.key),n)}}function tr(e){var t=function(e){if("object"!=zt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=zt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==zt(t)?t:t+""}var rr=new(function(){return e=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)},t=[{key:"getData",value:(N=Zt(Gt().m(function e(){var t,r,n,i,s,o,a,c,u,l,h,d,f,g,p=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(t=e.v,r=t.data,!t.error&&r.session){e.n=2;break}return e.a(2,this.getDefaultData());case 2:return n=r.session.user,console.log("Fetching data for user:",n.id),e.n=3,Promise.all([Mt.from("links").select("*").eq("user_id",n.id),Mt.from("collections").select("*").eq("user_id",n.id)]);case 3:return i=e.v,s=Vt(i,2),o=s[0],a=s[1],o.error&&console.error("Error fetching links:",o.error),a.error&&console.error("Error fetching collections:",a.error),c=(o.data||[]).map(function(e){return console.log("Storage: getData highlights for link",e.id,e.highlights),{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:p.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}),u=(a.data||[]).map(function(e){return{id:e.id,name:e.name,description:e.description,color:e.color,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}}),h=c,d=u,e.n=4,this.getSmartCollections();case 4:return f=e.v,g=this.getDefaultCategories(),l={links:h,collections:d,smartCollections:f,categories:g,settings:{defaultCategory:"general",autoSummarize:!0,enableSmartCollections:!0}},console.log("Data fetched from Supabase:",l),e.a(2,l)}},e,this)})),function(){return N.apply(this,arguments)})},{key:"addLink",value:(U=Zt(Gt().m(function e(t){var r,n,i,s,o,a,c,u;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(n=e.v,i=n.data,s=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}return console.error("User not logged in"),e.a(2,{success:!1,error:"User not logged in."});case 2:return o={user_id:s.id,collection_id:t.collectionId||null,url:t.url,title:t.title,favicon:t.favicon,domain:t.domain,user_note:t.userNote,ai_summary:t.aiSummary,category:t.category,is_in_inbox:t.isInInbox||!1,highlights:t.highlights?JSON.stringify(t.highlights):null},console.log("Storage: addLink dbLink.highlights:",o.highlights),e.n=3,Mt.from("links").insert(o).select("id").single();case 3:if(a=e.v,c=a.data,!(u=a.error)){e.n=4;break}return console.error("Supabase addLink error:",u),e.a(2,{success:!1,error:u.message||"Database error occurred."});case 4:return e.a(2,{success:!0,linkId:c.id})}},e)})),function(e){return U.apply(this,arguments)})},{key:"updateLink",value:(L=Zt(Gt().m(function e(t,r){var n,i,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return n=Wt(Wt({},r),{},{updated_at:new Date}),void 0!==r.highlights&&(n.highlights=r.highlights?JSON.stringify(r.highlights):null),delete n.collectionId,delete n.userNote,delete n.aiSummary,delete n.isInInbox,delete n.createdAt,delete n.updatedAt,void 0!==r.collectionId&&(n.collection_id=r.collectionId),void 0!==r.userNote&&(n.user_note=r.userNote),void 0!==r.aiSummary&&(n.ai_summary=r.aiSummary),void 0!==r.isInInbox&&(n.is_in_inbox=r.isInInbox),console.log("Storage: updateLink dbUpdates.highlights:",n.highlights),e.n=1,Mt.from("links").update(n).eq("id",t);case 1:if(i=e.v,!(s=i.error)){e.n=2;break}throw s;case 2:return e.a(2)}},e)})),function(e,t){return L.apply(this,arguments)})},{key:"deleteLink",value:(D=Zt(Gt().m(function e(t){var r,n;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("links").delete().eq("id",t);case 1:if(r=e.v,!(n=r.error)){e.n=2;break}throw n;case 2:return e.a(2)}},e)})),function(e){return D.apply(this,arguments)})},{key:"addCollection",value:($=Zt(Gt().m(function e(t){var r,n,i,s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(n=e.v,i=n.data,s=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}throw new Error("User not logged in.");case 2:return o={user_id:s.id,name:t.name,description:t.description,color:t.color},e.n=3,Mt.from("collections").insert(o);case 3:if(a=e.v,!(c=a.error)){e.n=4;break}throw c;case 4:return e.a(2)}},e)})),function(e){return $.apply(this,arguments)})},{key:"updateCollection",value:(R=Zt(Gt().m(function e(t,r){var n,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("collections").update(Wt(Wt({},r),{},{updatedAt:new Date})).eq("id",t);case 1:if(n=e.v,!(i=n.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return R.apply(this,arguments)})},{key:"deleteCollection",value:(x=Zt(Gt().m(function e(t){var r,n;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("collections").delete().eq("id",t);case 1:if(r=e.v,!(n=r.error)){e.n=2;break}throw n;case 2:return e.a(2)}},e)})),function(e){return x.apply(this,arguments)})},{key:"searchLinks",value:(C=Zt(Gt().m(function e(t){var r,n,i,s,o,a,c,u,l=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(n=e.v,i=n.data,s=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:if(t.trim()){e.n=3;break}return e.a(2,[]);case 3:return e.p=3,e.n=4,Mt.rpc("search_user_links",{search_query:t.trim(),user_uuid:s.id,result_limit:50});case 4:if(o=e.v,a=o.data,!(c=o.error)){e.n=5;break}return console.error("Search error:",c),e.a(2,[]);case 5:return e.a(2,(a||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:l.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain,searchRank:e.rank,searchHeadline:e.headline}}));case 6:return e.p=6,u=e.v,console.error("Search failed:",u),e.a(2,[])}},e,null,[[3,6]])})),function(e){return C.apply(this,arguments)})},{key:"getUserTags",value:(P=Zt(Gt().m(function e(){var t,r,n,i,s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(r=e.v,n=r.data,i=null===(t=n.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,Mt.rpc("get_user_tags_with_counts",{user_uuid:i.id});case 3:if(s=e.v,o=s.data,!(a=s.error)){e.n=4;break}return console.error("Error fetching user tags:",a),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,name:e.name,usageCount:e.usage_count||0}}));case 5:return e.p=5,c=e.v,console.error("Failed to get user tags:",c),e.a(2,[])}},e,null,[[2,5]])})),function(){return P.apply(this,arguments)})},{key:"getLinkTags",value:(E=Zt(Gt().m(function e(t){var r,n,i,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Mt.rpc("get_link_tags",{link_uuid:t});case 1:if(r=e.v,n=r.data,!(i=r.error)){e.n=2;break}return console.error("Error fetching link tags:",i),e.a(2,[]);case 2:return e.a(2,n||[]);case 3:return e.p=3,s=e.v,console.error("Failed to get link tags:",s),e.a(2,[])}},e,null,[[0,3]])})),function(e){return E.apply(this,arguments)})},{key:"addTagsToLink",value:(I=Zt(Gt().m(function e(t,r){var n,i,s,o,a,c,u;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(i=e.v,s=i.data,o=null===(n=s.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,{success:!1,error:"User not logged in."});case 2:return e.p=2,e.n=3,Mt.rpc("add_tags_to_link",{link_uuid:t,tag_names:r,user_uuid:o.id});case 3:if(a=e.v,!(c=a.error)){e.n=4;break}return console.error("Error adding tags to link:",c),e.a(2,{success:!1,error:c.message||"Failed to add tags."});case 4:return e.a(2,{success:!0});case 5:return e.p=5,u=e.v,console.error("Failed to add tags to link:",u),e.a(2,{success:!1,error:u.message})}},e,null,[[2,5]])})),function(e,t){return I.apply(this,arguments)})},{key:"getLinksByTag",value:(O=Zt(Gt().m(function e(t){var r,n,i,s,o,a,c,u,l=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(n=e.v,i=n.data,s=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,Mt.rpc("get_links_by_tag",{user_uuid:s.id,tag_name:t});case 3:if(o=e.v,a=o.data,!(c=o.error)){e.n=4;break}return console.error("Error fetching links by tag:",c),e.a(2,[]);case 4:return e.a(2,(a||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:l.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}));case 5:return e.p=5,u=e.v,console.error("Failed to get links by tag:",u),e.a(2,[])}},e,null,[[2,5]])})),function(e){return O.apply(this,arguments)})},{key:"cleanupUnusedTags",value:(j=Zt(Gt().m(function e(){var t,r,n,i,s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(r=e.v,n=r.data,i=null===(t=n.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,0);case 2:return e.p=2,e.n=3,Mt.rpc("cleanup_unused_tags",{user_uuid:i.id});case 3:if(s=e.v,o=s.data,!(a=s.error)){e.n=4;break}return console.error("Error cleaning up unused tags:",a),e.a(2,0);case 4:return e.a(2,o||0);case 5:return e.p=5,c=e.v,console.error("Failed to cleanup unused tags:",c),e.a(2,0)}},e,null,[[2,5]])})),function(){return j.apply(this,arguments)})},{key:"moveToInbox",value:(A=Zt(Gt().m(function e(t){var r,n;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("links").update({is_in_inbox:!0,collection_id:null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(r=e.v,!(n=r.error)){e.n=2;break}throw n;case 2:return e.a(2)}},e)})),function(e){return A.apply(this,arguments)})},{key:"moveFromInbox",value:(T=Zt(Gt().m(function e(t,r){var n,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("links").update({is_in_inbox:!1,collection_id:r||null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(n=e.v,!(i=n.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return T.apply(this,arguments)})},{key:"getInboxLinks",value:(S=Zt(Gt().m(function e(){var t,r,n,i,s,o,a,c=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(r=e.v,n=r.data,i=null===(t=n.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,Mt.from("links").select("*").eq("user_id",i.id).eq("is_in_inbox",!0).order("created_at",{ascending:!1});case 3:if(s=e.v,o=s.data,!(a=s.error)){e.n=4;break}return console.error("Error fetching inbox links:",a),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:c.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}))}},e)})),function(){return S.apply(this,arguments)})},{key:"bulkMoveFromInbox",value:(_=Zt(Gt().m(function e(t,r){var n,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("links").update({is_in_inbox:!1,collection_id:r||null,updated_at:(new Date).toISOString()}).in("id",t);case 1:if(n=e.v,!(i=n.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return _.apply(this,arguments)})},{key:"toggleCollectionSharing",value:(k=Zt(Gt().m(function e(t,r){var n,i,s,o,a,c,u,l,h;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(i=e.v,s=i.data,o=null===(n=s.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,{success:!1,message:"User not logged in."});case 2:return e.p=2,e.n=3,Mt.rpc("toggle_collection_sharing",{collection_uuid:t,user_uuid:o.id,make_public:r});case 3:if(a=e.v,c=a.data,!(u=a.error)){e.n=4;break}return console.error("Error toggling collection sharing:",u),e.a(2,{success:!1,message:u.message||"Failed to update sharing settings."});case 4:return l=null==c?void 0:c[0],e.a(2,{success:(null==l?void 0:l.success)||!1,shareToken:null==l?void 0:l.share_token,message:(null==l?void 0:l.message)||"Sharing settings updated."});case 5:return e.p=5,h=e.v,console.error("Failed to toggle collection sharing:",h),e.a(2,{success:!1,message:h.message})}},e,null,[[2,5]])})),function(e,t){return k.apply(this,arguments)})},{key:"getCollectionSharingInfo",value:(w=Zt(Gt().m(function e(t){var r,n,i,s,o,a,c,u;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(n=e.v,i=n.data,s=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,null);case 2:return e.p=2,e.n=3,Mt.from("collections").select("is_public, share_token, view_count").eq("id",t).eq("user_id",s.id).single();case 3:if(o=e.v,a=o.data,!(c=o.error)){e.n=4;break}return console.error("Error fetching collection sharing info:",c),e.a(2,null);case 4:return e.a(2,{isPublic:a.is_public||!1,shareToken:a.share_token,viewCount:a.view_count||0});case 5:return e.p=5,u=e.v,console.error("Failed to get collection sharing info:",u),e.a(2,null)}},e,null,[[2,5]])})),function(e){return w.apply(this,arguments)})},{key:"getSmartCollections",value:(b=Zt(Gt().m(function e(){var t;return Gt().w(function(e){for(;;)if(0===e.n)return t=this.getDefaultSmartCollections(),e.a(2,t)},e,this)})),function(){return b.apply(this,arguments)})},{key:"generateAISmartCollections",value:(y=Zt(Gt().m(function e(t){var r,n,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,!(t.length>5)){e.n=3;break}return e.n=1,s.e(508).then(s.bind(s,508));case 1:return r=e.v,n=r.aiService,e.n=2,n.generateSmartCollectionSuggestions(t);case 2:return e.a(2,e.v);case 3:e.n=5;break;case 4:e.p=4,i=e.v,console.error("Failed to generate AI smart collection suggestions:",i);case 5:return e.a(2,[])}},e,null,[[0,4]])})),function(e){return y.apply(this,arguments)})},{key:"createSmartCollection",value:(m=Zt(Gt().m(function e(t){return Gt().w(function(e){for(;;)switch(e.n){case 0:console.log("Creating smart collection:",t);case 1:return e.a(2)}},e)})),function(e){return m.apply(this,arguments)})},{key:"updateSmartCollection",value:(v=Zt(Gt().m(function e(t,r){return Gt().w(function(e){for(;;)switch(e.n){case 0:console.log("Updating smart collection:",t,r);case 1:return e.a(2)}},e)})),function(e,t){return v.apply(this,arguments)})},{key:"deleteSmartCollection",value:(p=Zt(Gt().m(function e(t){return Gt().w(function(e){for(;;)switch(e.n){case 0:console.log("Deleting smart collection:",t);case 1:return e.a(2)}},e)})),function(e){return p.apply(this,arguments)})},{key:"getSmartCollectionLinks",value:(g=Zt(Gt().m(function e(t){var r,n,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,this.getSmartCollections();case 1:if(r=e.v,n=r.find(function(e){return e.id===t})){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,this.getData();case 3:return i=e.v.links,e.a(2,this.filterLinksForSmartCollection(i,n))}},e,this)})),function(e){return g.apply(this,arguments)})},{key:"filterLinksForSmartCollection",value:function(e,t){var r,n,i,s,o=this,a=function(e){return function(e){if(Array.isArray(e))return Qt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Yt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e);if(null!==(r=t.filters)&&void 0!==r&&r.dateRange){var c=t.filters.dateRange,u=c.start,l=c.end;a=a.filter(function(e){var t=e.createdAt;return!(u&&t<u||l&&t>l)})}switch(null!==(n=t.filters)&&void 0!==n&&null!==(n=n.categories)&&void 0!==n&&n.length&&(a=a.filter(function(e){return t.filters.categories.includes(e.category)})),null!==(i=t.filters)&&void 0!==i&&null!==(i=i.domains)&&void 0!==i&&i.length&&(a=a.filter(function(e){return t.filters.domains.some(function(t){return e.domain.includes(t)})})),null!==(s=t.filters)&&void 0!==s&&null!==(s=s.contentType)&&void 0!==s&&s.length&&(a=a.filter(function(e){var r=o.detectContentTypeFromDomain(e.domain);return t.filters.contentType.includes(r)})),t.id){case"recent-reads":return a.filter(function(e){return e.createdAt>=new Date(Date.now()-6048e5)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()}).slice(0,20);case"ai-related":return a.filter(function(e){return o.isAIRelated(e)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"unread":return a.filter(function(e){return!e.userNote||""===e.userNote.trim()}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"tutorials":return a.filter(function(e){return o.isTutorial(e)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"github-repos":return a.filter(function(e){return e.domain.includes("github.com")}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});default:return a}}},{key:"detectContentTypeFromDomain",value:function(e){return e.includes("youtube.com")||e.includes("vimeo.com")?"video":e.includes("github.com")?"tool":e.includes("docs.")||e.includes("documentation")?"documentation":e.includes("medium.com")||e.includes("blog")?"blog":e.includes("news")||e.includes("cnn.com")?"news":"article"}},{key:"isAIRelated",value:function(e){var t="".concat(e.title," ").concat(e.userNote," ").concat(e.aiSummary||"").toLowerCase();return["artificial intelligence","machine learning","deep learning","neural network","ai","ml","gpt","chatgpt","openai","tensorflow","pytorch","llm","natural language processing","nlp","computer vision","reinforcement learning"].some(function(e){return t.includes(e)})}},{key:"isTutorial",value:function(e){var t="".concat(e.title," ").concat(e.userNote).toLowerCase();return["tutorial","how to","guide","step by step","learn","course","introduction to","getting started","beginner","walkthrough"].some(function(e){return t.includes(e)})}},{key:"getDefaultSmartCollections",value:function(){var e=new Date;return[{id:"recent-reads",name:"📚 Recent Reads",description:"Links saved in the last 7 days",query:"created_at >= now() - interval '7 days'",isSystem:!0,autoUpdate:!0,icon:"📚",color:"#3b82f6",filters:{dateRange:{start:new Date(Date.now()-6048e5)}},createdAt:e,updatedAt:e},{id:"ai-related",name:"🤖 AI & Machine Learning",description:"Content related to artificial intelligence and machine learning",query:"title ILIKE '%ai%' OR title ILIKE '%machine learning%' OR title ILIKE '%neural%'",isSystem:!0,autoUpdate:!0,icon:"🤖",color:"#8b5cf6",createdAt:e,updatedAt:e},{id:"unread",name:"📖 To Read",description:"Links without notes (likely unread)",query:"user_note IS NULL OR user_note = ''",isSystem:!0,autoUpdate:!0,icon:"📖",color:"#f59e0b",createdAt:e,updatedAt:e},{id:"tutorials",name:"🎓 Tutorials & Guides",description:"Educational content and tutorials",query:"title ILIKE '%tutorial%' OR title ILIKE '%guide%' OR title ILIKE '%how to%'",isSystem:!0,autoUpdate:!0,icon:"🎓",color:"#10b981",createdAt:e,updatedAt:e},{id:"github-repos",name:"⭐ GitHub Repositories",description:"GitHub repositories and projects",query:"domain LIKE '%github.com%'",isSystem:!0,autoUpdate:!0,icon:"⭐",color:"#6b7280",filters:{domains:["github.com"]},createdAt:e,updatedAt:e}]}},{key:"getDefaultCategories",value:function(){return[{id:"general",name:"General",color:"#6b7280",isDefault:!0},{id:"work",name:"Work",color:"#3b82f6"},{id:"personal",name:"Personal",color:"#10b981"},{id:"learning",name:"Learning",color:"#f59e0b"}]}},{key:"getDefaultData",value:function(){return{links:[],collections:[],smartCollections:[],categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0,enableSmartCollections:!0}}}},{key:"getLinkByUrl",value:(f=Zt(Gt().m(function e(t){var r,n,i,s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(n=e.v,i=n.data,s=null===(r=i.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,null);case 2:return e.n=3,Mt.from("links").select("*").eq("user_id",s.id).eq("url",t).single();case 3:if(o=e.v,a=o.data,!(c=o.error)){e.n=5;break}if("PGRST116"!==c.code){e.n=4;break}return e.a(2,null);case 4:throw c;case 5:return e.a(2,{id:a.id,url:a.url,title:a.title,favicon:a.favicon,userNote:a.user_note||"",aiSummary:a.ai_summary,category:a.category,collectionId:a.collection_id,isInInbox:a.is_in_inbox||!1,highlights:this.parseHighlights(a.highlights),createdAt:new Date(a.created_at),updatedAt:new Date(a.updated_at),domain:a.domain})}},e,this)})),function(e){return f.apply(this,arguments)})},{key:"parseHighlights",value:function(e){if(!e)return console.log("Storage: No highlights data found"),[];if("string"==typeof e)try{var t=JSON.parse(e),r=Array.isArray(t)?t:[];return console.log("Storage: Parsed highlights from JSON:",r.length,"highlights",r),r}catch(e){return console.warn("Failed to parse highlights JSON:",e),[]}return Array.isArray(e)?(console.log("Storage: Found highlights array:",e.length,"highlights",e),e):(console.log("Storage: Highlights data in unexpected format:",zt(e),e),[])}},{key:"logActivity",value:(d=Zt(Gt().m(function e(t,r,n,i){var s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivities();case 1:return s=e.v,o={id:Date.now().toString(),type:t,linkId:r,collectionId:n,metadata:i,createdAt:new Date},s.push(o),a=s.slice(-1e3),e.n=2,chrome.storage.local.set({nest_activities:a});case 2:return e.n=3,this.updateStreaks(t);case 3:console.log("Activity logged:",o),e.n=5;break;case 4:e.p=4,c=e.v,console.error("Failed to log activity:",c);case 5:return e.a(2)}},e,this,[[0,4]])})),function(e,t,r,n){return d.apply(this,arguments)})},{key:"getActivities",value:(h=Zt(Gt().m(function e(){var t,r,n,i,s=arguments;return Gt().w(function(e){for(;;)switch(e.n){case 0:return t=s.length>0&&void 0!==s[0]?s[0]:100,e.p=1,e.n=2,chrome.storage.local.get("nest_activities");case 2:return r=e.v,n=r.nest_activities||[],e.a(2,n.slice(-t).reverse());case 3:return e.p=3,i=e.v,console.error("Failed to get activities:",i),e.a(2,[])}},e,null,[[1,3]])})),function(){return h.apply(this,arguments)})},{key:"getActivityStats",value:(l=Zt(Gt().m(function e(){var t,r,n,i,s,o;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivities(1e3);case 1:return n=e.v,e.n=2,this.getStreaks();case 2:return i=e.v,s={totalSaves:n.filter(function(e){return"save"===e.type}).length,totalReads:n.filter(function(e){return"read"===e.type}).length,totalHighlights:n.filter(function(e){return"highlight"===e.type}).length,totalOrganizations:n.filter(function(e){return"organize"===e.type}).length,totalSearches:n.filter(function(e){return"search"===e.type}).length,activeDays:this.getUniqueDays(n).length,currentStreak:(null===(t=i.find(function(e){return"daily_save"===e.type}))||void 0===t?void 0:t.currentCount)||0,bestStreak:(null===(r=i.find(function(e){return"daily_save"===e.type}))||void 0===r?void 0:r.bestCount)||0,thisWeekActivity:this.getThisWeekActivity(n),lastActiveDate:n.length>0?new Date(n[0].createdAt):void 0},e.a(2,s);case 3:return e.p=3,o=e.v,console.error("Failed to get activity stats:",o),e.a(2,{totalSaves:0,totalReads:0,totalHighlights:0,totalOrganizations:0,totalSearches:0,activeDays:0,currentStreak:0,bestStreak:0,thisWeekActivity:0})}},e,this,[[0,3]])})),function(){return l.apply(this,arguments)})},{key:"getStreaks",value:(u=Zt(Gt().m(function e(){var t,r;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_streaks");case 1:return t=e.v,e.a(2,t.nest_streaks||[]);case 2:return e.p=2,r=e.v,console.error("Failed to get streaks:",r),e.a(2,[])}},e,null,[[0,2]])})),function(){return u.apply(this,arguments)})},{key:"updateStreaks",value:(c=Zt(Gt().m(function e(t){var r,n,i,s,o,a,c,u,l;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getStreaks();case 1:return r=e.v,n=(new Date).toDateString(),"save"===t&&((i=r.find(function(e){return"daily_save"===e.type}))||(i={id:"daily_save",type:"daily_save",currentCount:0,bestCount:0,lastActivityAt:new Date,createdAt:new Date},r.push(i)),s=new Date(i.lastActivityAt).toDateString(),o=new Date(Date.now()-864e5).toDateString(),s===n||(s===o?(i.currentCount++,i.lastActivityAt=new Date):(i.currentCount=1,i.lastActivityAt=new Date)),i.currentCount>i.bestCount&&(i.bestCount=i.currentCount)),"organize"===t&&((a=r.find(function(e){return"weekly_organize"===e.type}))||(a={id:"weekly_organize",type:"weekly_organize",currentCount:0,bestCount:0,lastActivityAt:new Date,createdAt:new Date},r.push(a)),c=this.getWeekNumber(new Date),u=this.getWeekNumber(new Date(a.lastActivityAt)),c===u||(c===u+1?(a.currentCount++,a.lastActivityAt=new Date):(a.currentCount=1,a.lastActivityAt=new Date)),a.currentCount>a.bestCount&&(a.bestCount=a.currentCount)),e.n=2,chrome.storage.local.set({nest_streaks:r});case 2:e.n=4;break;case 3:e.p=3,l=e.v,console.error("Failed to update streaks:",l);case 4:return e.a(2)}},e,this,[[0,3]])})),function(e){return c.apply(this,arguments)})},{key:"getUniqueDays",value:function(e){var t=new Set;return e.forEach(function(e){var r=new Date(e.createdAt).toDateString();t.add(r)}),Array.from(t)}},{key:"getThisWeekActivity",value:function(e){var t=new Date(Date.now()-6048e5);return e.filter(function(e){return new Date(e.createdAt)>=t}).length}},{key:"getWeekNumber",value:function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)}},{key:"shouldShowNudge",value:(a=Zt(Gt().m(function e(){var t,r,n,i,s,o;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivityStats();case 1:return t=e.v,e.n=2,this.getActivities(50);case 2:if(r=e.v,n=(new Date).toDateString(),0!==r.filter(function(e){return new Date(e.createdAt).toDateString()===n&&"save"===e.type}).length){e.n=5;break}if(!(t.currentStreak>0)){e.n=3;break}return e.a(2,{show:!0,type:"streak_reminder",message:"You have a ".concat(t.currentStreak,"-day saving streak! Don't break it - save something today.")});case 3:if(!t.lastActiveDate){e.n=4;break}if(!((i=Math.floor((Date.now()-t.lastActiveDate.getTime())/864e5))>=3)){e.n=4;break}return e.a(2,{show:!0,type:"inactive_reminder",message:"Welcome back! You haven't saved anything in ".concat(i," days. Found something interesting?")});case 4:if(!((s=(new Date).getHours())>=10&&s<=20)){e.n=5;break}return e.a(2,{show:!0,type:"daily_reminder",message:"Discover something new today? Save it to Nest!"});case 5:return e.a(2,{show:!1});case 6:return e.p=6,o=e.v,console.error("Failed to check nudge status:",o),e.a(2,{show:!1})}},e,this,[[0,6]])})),function(){return a.apply(this,arguments)})}],r=[{key:"getPublicCollection",value:(o=Zt(Gt().m(function e(t){var r,n,i,s,o;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Mt.rpc("get_public_collection",{token:t});case 1:if(r=e.v,n=r.data,!(i=r.error)){e.n=2;break}return console.error("Error fetching public collection:",i),e.a(2,null);case 2:if(s=null==n?void 0:n[0]){e.n=3;break}return e.a(2,null);case 3:return e.a(2,{id:s.id,name:s.name,description:s.description,viewCount:s.view_count||0,createdAt:new Date(s.created_at),ownerEmail:s.owner_email});case 4:return e.p=4,o=e.v,console.error("Failed to get public collection:",o),e.a(2,null)}},e,null,[[0,4]])})),function(e){return o.apply(this,arguments)})},{key:"getPublicCollectionLinks",value:(i=Zt(Gt().m(function e(t){var r,n,i,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Mt.rpc("get_public_collection_links",{token:t});case 1:if(r=e.v,n=r.data,!(i=r.error)){e.n=2;break}return console.error("Error fetching public collection links:",i),e.a(2,[]);case 2:return e.a(2,(n||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,domain:e.domain,userNote:e.user_note,aiSummary:e.ai_summary,category:e.category,createdAt:new Date(e.created_at),tags:e.tag_names||[]}}));case 3:return e.p=3,s=e.v,console.error("Failed to get public collection links:",s),e.a(2,[])}},e,null,[[0,3]])})),function(e){return i.apply(this,arguments)})},{key:"incrementViewCount",value:(n=Zt(Gt().m(function e(t){var r,n,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Mt.rpc("increment_collection_views",{token:t});case 1:r=e.v,(n=r.error)&&console.error("Error incrementing view count:",n),e.n=3;break;case 2:e.p=2,i=e.v,console.error("Failed to increment view count:",i);case 3:return e.a(2)}},e,null,[[0,2]])})),function(e){return n.apply(this,arguments)})}],t&&er(e.prototype,t),r&&er(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,r,n,i,o,a,c,u,l,h,d,f,g,p,v,m,y,b,w,k,_,S,T,A,j,O,I,E,P,C,x,R,$,D,L,U,N}()),nr=s(508);function ir(e){return function(e){if(Array.isArray(e))return ar(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||or(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function sr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,i,s,o,a=[],c=!0,u=!1;try{if(s=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=s.call(r)).done)&&(a.push(n.value),a.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(u)throw i}}return a}}(e,t)||or(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function or(e,t){if(e){if("string"==typeof e)return ar(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ar(e,t):void 0}}function ar(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function cr(){var e,t,r="function"==typeof Symbol?Symbol:{},n=r.iterator||"@@iterator",i=r.toStringTag||"@@toStringTag";function s(r,n,i,s){var c=n&&n.prototype instanceof a?n:a,u=Object.create(c.prototype);return ur(u,"_invoke",function(r,n,i){var s,a,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,r){return s=t,a=0,c=e,d.n=r,o}};function f(r,n){for(a=r,c=n,t=0;!h&&u&&!i&&t<l.length;t++){var i,s=l[t],f=d.p,g=s[2];r>3?(i=g===n)&&(c=s[(a=s[4])?5:(a=3,3)],s[4]=s[5]=e):s[0]<=f&&((i=r<2&&f<s[1])?(a=0,d.v=n,d.n=s[1]):f<g&&(i=r<3||s[0]>n||n>g)&&(s[4]=r,s[5]=n,d.n=g,a=0))}if(i||r>1)return o;throw h=!0,n}return function(i,l,g){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,g),a=l,c=g;(t=a<2?e:c)||!h;){s||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(u=2,s){if(a||(i="next"),t=s[i]){if(!(t=t.call(s,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=s.return)&&t.call(s),a<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),a=1);s=e}else if((t=(h=d.n<0)?c:r.call(n,d))!==o)break}catch(t){s=e,a=1,c=t}finally{u=1}}return{value:t,done:h}}}(r,i,s),!0),u}var o={};function a(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][n]?t(t([][n]())):(ur(t={},n,function(){return this}),t),h=u.prototype=a.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,ur(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,ur(h,"constructor",u),ur(u,"constructor",c),c.displayName="GeneratorFunction",ur(u,i,"GeneratorFunction"),ur(h),ur(h,i,"Generator"),ur(h,n,function(){return this}),ur(h,"toString",function(){return"[object Generator]"}),(cr=function(){return{w:s,m:d}})()}function ur(e,t,r,n){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}ur=function(e,t,r,n){if(t)i?i(e,t,{value:r,enumerable:!n,configurable:!n,writable:!n}):e[t]=r;else{var s=function(t,r){ur(e,t,function(e){return this._invoke(t,r,e)})};s("next",0),s("throw",1),s("return",2)}},ur(e,t,r,n)}function lr(e,t,r,n,i,s,o){try{var a=e[s](o),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,i)}function hr(e){return function(){var t=this,r=arguments;return new Promise(function(n,i){var s=e.apply(t,r);function o(e){lr(s,n,i,o,a,"next",e)}function a(e){lr(s,n,i,o,a,"throw",e)}o(void 0)})}}function dr(e,t){return fr.apply(this,arguments)}function fr(){return(fr=hr(cr().m(function e(t,r){var n,i,s,o,a,c,u,l,h,d,f,g,p,v,m,y,b,w;return cr().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,n=r||t.url,i=t.title||"Untitled",n&&!n.startsWith("chrome://")&&!n.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot save this type of page."});case 1:if(s="",!t.id){e.n=5;break}return e.p=2,e.n=3,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 3:o=e.v,s=(null==o?void 0:o.content)||"",e.n=5;break;case 4:e.p=4,m=e.v,console.log("Could not extract page content:",m);case 5:return a=new URL(n).hostname,e.n=6,Promise.all([chrome.storage.local.get("nest_settings")]);case 6:return c=e.v,u=sr(c,1),l=u[0],(h=l.nest_settings||{}).openaiApiKey?(nr.aiService.updateApiKey(h.openaiApiKey),console.log("Background: AI service configured with user API key")):console.log("Background: No OpenAI API key found, using rule-based analysis"),console.log("Background: Starting AI analysis..."),e.n=7,nr.aiService.analyzeContent(s,i,n);case 7:return d=e.v,console.log("Background: AI analysis complete:",d),f="general",h.autoCategorization&&d.categorySuggestions.length>0&&(f=d.categorySuggestions[0].category,console.log("Background: Auto-categorization enabled, using AI category:",f)),g={url:n,title:i,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(a,"&sz=32"),userNote:"",aiSummary:!1!==h.autoSummarize?d.summary:void 0,category:f,domain:a,isInInbox:!0},console.log("Background: saveCurrentPage newLink:",JSON.stringify(g)),e.n=8,rr.addLink(g);case 8:if(p=e.v,console.log("Background: saveCurrentPage result:",p),p.success){e.n=9;break}throw new Error(p.error||"Failed to save link to database.");case 9:if(!(h.autoTagging&&p.linkId&&d.tagSuggestions.length>0)){e.n=13;break}if(e.p=10,!((v=d.tagSuggestions.filter(function(e){return e.confidence>.6}).map(function(e){return e.tag}).slice(0,5)).length>0)){e.n=11;break}return console.log("Background: Auto-tagging enabled, applying tags:",v),e.n=11,rr.addTagsToLink(p.linkId,v);case 11:e.n=13;break;case 12:e.p=12,y=e.v,console.error("Failed to apply auto-tags:",y);case 13:if(!p.linkId){e.n=14;break}return e.n=14,rr.logActivity("save",p.linkId,void 0,{domain:a,category:g.category,hasAISummary:!!d.summary,autoTagged:h.autoTagging,autoCategorized:h.autoCategorization});case 14:return chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Saved to Nest",message:'"'.concat(i,'" has been saved with AI suggestions.')}),e.p=15,e.n=16,chrome.runtime.sendMessage({action:"refreshSidebar"});case 16:e.n=18;break;case 17:e.p=17,b=e.v,console.log("Could not send refresh message to sidebar:",b);case 18:return e.a(2,{success:!0,linkId:p.linkId,aiAnalysis:d});case 19:return e.p=19,w=e.v,console.error("Failed to save current page:",w),e.a(2,{success:!1,error:w.message})}},e,null,[[15,17],[10,12],[2,4],[0,19]])}))).apply(this,arguments)}function gr(e){return pr.apply(this,arguments)}function pr(){return(pr=hr(cr().m(function e(t){var r,n,i,s,o,a,c,u,l,h,d;return cr().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,r=t.url,n=t.title||"Untitled",r&&!r.startsWith("chrome://")&&!r.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot analyze this type of page."});case 1:return e.n=2,Promise.all([chrome.storage.local.get("nest_settings")]);case 2:if(i=e.v,s=sr(i,1),o=s[0],(a=o.nest_settings||{}).openaiApiKey&&(nr.aiService.updateApiKey(a.openaiApiKey),console.log("Background: AI service configured with user API key for analysis")),c="",!t.id){e.n=6;break}return e.p=3,e.n=4,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 4:u=e.v,c=(null==u?void 0:u.content)||"",e.n=6;break;case 5:e.p=5,h=e.v,console.log("Could not extract page content:",h);case 6:return e.n=7,nr.aiService.analyzeContent(c,n,r);case 7:return l=e.v,e.a(2,{success:!0,analysis:l});case 8:return e.p=8,d=e.v,console.error("Failed to analyze page with AI:",d),e.a(2,{success:!1,error:d.message})}},e,null,[[3,5],[0,8]])}))).apply(this,arguments)}function vr(e,t,r,n){return mr.apply(this,arguments)}function mr(){return(mr=hr(cr().m(function e(t,r,n,i){var s,o,a,c,u,l,h,d,f,g,p,v,m,y,b,w,k,_,S,T,A;return cr().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,s=t.url,o=t.title||"Untitled",s&&!s.startsWith("chrome://")&&!s.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot save highlights from this type of page."});case 1:return e.n=2,rr.getLinkByUrl(s);case 2:if(!(a=e.v)){e.n=4;break}return c={id:Date.now().toString(),selectedText:r,context:n,position:i,createdAt:new Date,updatedAt:new Date},u=[].concat(ir(a.highlights||[]),[c]),e.n=3,rr.updateLink(a.id,{highlights:u});case 3:return console.log("Background: Added highlight to existing link"),e.a(2,{success:!0,highlightId:c.id});case 4:return l=new URL(s).hostname,e.n=5,Promise.all([chrome.storage.local.get("nest_settings")]);case 5:if(h=e.v,d=sr(h,1),f=d[0],(g=f.nest_settings||{}).openaiApiKey&&(nr.aiService.updateApiKey(g.openaiApiKey),console.log("Background: AI service configured with user API key")),p="",!t.id){e.n=9;break}return e.p=6,e.n=7,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 7:v=e.v,p=(null==v?void 0:v.content)||"",e.n=9;break;case 8:e.p=8,S=e.v,console.log("Could not extract page content:",S);case 9:return e.n=10,nr.aiService.analyzeContent(p,o,s);case 10:return m=e.v,y="general",g.autoCategorization&&m.categorySuggestions.length>0&&(y=m.categorySuggestions[0].category,console.log("Background: Auto-categorization enabled, using AI category:",y)),b={id:Date.now().toString(),selectedText:r,context:n,position:i,createdAt:new Date,updatedAt:new Date},w={url:s,title:o,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(l,"&sz=32"),userNote:"",aiSummary:!1!==g.autoSummarize?m.summary:void 0,category:y,domain:l,isInInbox:!0,highlights:[b]},e.n=11,rr.addLink(w);case 11:if((k=e.v).success){e.n=12;break}throw new Error(k.error||"Failed to save highlight to database.");case 12:if(!(g.autoTagging&&k.linkId&&m.tagSuggestions.length>0)){e.n=16;break}if(e.p=13,!((_=m.tagSuggestions.filter(function(e){return e.confidence>.6}).map(function(e){return e.tag}).slice(0,5)).length>0)){e.n=14;break}return console.log("Background: Auto-tagging enabled, applying tags:",_),e.n=14,rr.addTagsToLink(k.linkId,_);case 14:e.n=16;break;case 15:e.p=15,T=e.v,console.error("Failed to apply auto-tags:",T);case 16:return console.log("Background: Created new link with highlight"),e.a(2,{success:!0,highlightId:b.id});case 17:e.n=19;break;case 18:return e.p=18,A=e.v,console.error("Failed to save highlight:",A),e.a(2,{success:!1,error:A.message});case 19:return e.a(2)}},e,null,[[13,15],[6,8],[0,18]])}))).apply(this,arguments)}function yr(e){return br.apply(this,arguments)}function br(){return(br=hr(cr().m(function e(t){var r,n;return cr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.tabs.sendMessage(t,{action:"getPageContent"});case 1:return r=e.v,e.a(2,{content:(null==r?void 0:r.content)||""});case 2:return e.p=2,n=e.v,console.log("Could not get page content:",n),e.a(2,{content:""})}},e,null,[[0,2]])}))).apply(this,arguments)}function wr(e){return kr.apply(this,arguments)}function kr(){return(kr=hr(cr().m(function e(t){var r,n,i;return cr().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,r=t.url,n=t.title||"Untitled",r&&!r.startsWith("chrome://")&&!r.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot get info for this type of page."});case 1:return e.a(2,{success:!0,pageInfo:{title:n,url:r,domain:new URL(r).hostname,favicon:t.favIconUrl}});case 2:return e.p=2,i=e.v,console.error("Failed to get page info:",i),e.a(2,{success:!1,error:i.message})}},e,null,[[0,2]])}))).apply(this,arguments)}function _r(e,t){return Sr.apply(this,arguments)}function Sr(){return Sr=hr(cr().m(function e(t,r){var n,i,s,o,a,c,u,l,h,d,f,g,p,v,m,y,b,w,k,_=arguments;return cr().w(function(e){for(;;)switch(e.n){case 0:if(n=_.length>2&&void 0!==_[2]?_[2]:[],e.p=1,i=t.url,s=t.title||"Untitled",i&&!i.startsWith("chrome://")&&!i.startsWith("chrome-extension://")){e.n=2;break}return e.a(2,{success:!1,error:"Cannot save this type of page."});case 2:if(o="",!t.id){e.n=6;break}return e.p=3,e.n=4,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 4:a=e.v,o=(null==a?void 0:a.content)||"",e.n=6;break;case 5:e.p=5,y=e.v,console.log("Could not extract page content:",y);case 6:return c=new URL(i).hostname,e.n=7,Promise.all([chrome.storage.local.get("nest_settings")]);case 7:return u=e.v,l=sr(u,1),h=l[0],(d=h.nest_settings||{}).openaiApiKey&&(nr.aiService.updateApiKey(d.openaiApiKey),console.log("Background: AI service configured with user API key")),e.n=8,nr.aiService.analyzeContent(o,s,i);case 8:return f=e.v,g="general",d.autoCategorization&&f.categorySuggestions.length>0&&(g=f.categorySuggestions[0].category,console.log("Background: Auto-categorization enabled, using AI category:",g)),p={url:i,title:s,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(c,"&sz=32"),userNote:r,aiSummary:!1!==d.autoSummarize?f.summary:void 0,category:g,domain:c,isInInbox:!0},e.n=9,rr.addLink(p);case 9:if((v=e.v).success){e.n=10;break}throw new Error(v.error||"Failed to save link to database.");case 10:if(m=ir(n),d.autoTagging&&f.tagSuggestions.length>0&&(f.tagSuggestions.filter(function(e){return e.confidence>.6}).map(function(e){return e.tag}).slice(0,3).forEach(function(e){m.some(function(t){return t.toLowerCase()===e.toLowerCase()})||m.push(e)}),console.log("Background: Auto-tagging enabled, combined tags:",m)),!(m.length>0&&v.linkId)){e.n=14;break}return e.p=11,e.n=12,rr.addTagsToLink(v.linkId,m);case 12:e.n=14;break;case 13:e.p=13,b=e.v,console.error("Failed to add tags:",b);case 14:if(!v.linkId){e.n=15;break}return e.n=15,rr.logActivity("save",v.linkId,void 0,{domain:c,category:p.category,reason:r.substring(0,100),tags:n,withContext:!0});case 15:return chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Saved to Nest",message:'"'.concat(s,'" saved with context: ').concat(r.substring(0,50),"...")}),e.p=16,e.n=17,chrome.runtime.sendMessage({action:"refreshSidebar"});case 17:e.n=19;break;case 18:e.p=18,w=e.v,console.log("Could not send refresh message to sidebar:",w);case 19:return e.a(2,{success:!0,linkId:v.linkId});case 20:return e.p=20,k=e.v,console.error("Failed to save with context:",k),e.a(2,{success:!1,error:k.message})}},e,null,[[16,18],[11,13],[3,5],[1,20]])})),Sr.apply(this,arguments)}function Tr(e){return Ar.apply(this,arguments)}function Ar(){return(Ar=hr(cr().m(function e(t){var r,n;return cr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Getting highlights for page:",t),e.n=1,rr.getLinkByUrl(t);case 1:if(!((r=e.v)&&r.highlights&&r.highlights.length>0)){e.n=2;break}return console.log("Background: Found",r.highlights.length,"highlights for page"),e.a(2,{success:!0,highlights:r.highlights});case 2:return console.log("Background: No highlights found for page"),e.a(2,{success:!0,highlights:[]});case 3:e.n=5;break;case 4:return e.p=4,n=e.v,console.error("Background: Failed to get highlights for page:",n),e.a(2,{success:!1,error:n.message});case 5:return e.a(2)}},e,null,[[0,4]])}))).apply(this,arguments)}function jr(e,t){return Or.apply(this,arguments)}function Or(){return(Or=hr(cr().m(function e(t,r){var n,i,s,o;return cr().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Removing highlight from storage:",t,"for URL:",r),e.n=1,rr.getLinkByUrl(r);case 1:if(!(n=e.v)||!n.highlights){e.n=7;break}return i=n.highlights.filter(function(e){return e.id!==t}),e.n=2,rr.updateLink(n.id,{highlights:i});case 2:return console.log("Background: Highlight removed from storage successfully"),e.p=3,e.n=4,chrome.runtime.sendMessage({action:"refreshSidebar"});case 4:e.n=6;break;case 5:e.p=5,s=e.v,console.log("Could not send refresh message to sidebar:",s);case 6:return e.a(2,{success:!0});case 7:return console.log("Background: Link not found for URL:",r),e.a(2,{success:!1,error:"Link not found"});case 8:e.n=10;break;case 9:return e.p=9,o=e.v,console.error("Background: Failed to remove highlight from storage:",o),e.a(2,{success:!1,error:o.message});case 10:return e.a(2)}},e,null,[[3,5],[0,9]])}))).apply(this,arguments)}chrome.runtime.onInstalled.addListener(function(){chrome.contextMenus.create({id:"saveToNest",title:"Save to Nest",contexts:["page","link"]}),chrome.contextMenus.create({id:"saveHighlight",title:"Save highlight to Nest",contexts:["selection"]}),console.log("Nest extension installed")}),chrome.contextMenus.onClicked.addListener(function(){var e=hr(cr().m(function e(t,r){var n;return cr().w(function(e){for(;;)switch(e.n){case 0:if(console.log("Background: Context menu clicked:",t.menuItemId),"saveToNest"!==t.menuItemId||!r){e.n=2;break}return n=t.linkUrl||r.url,e.n=1,dr(r,n);case 1:e.n=3;break;case 2:if("saveHighlight"!==t.menuItemId||!r||!t.selectionText){e.n=3;break}return e.n=3,vr(r,t.selectionText,"",null);case 3:return e.a(2)}},e)}));return function(t,r){return e.apply(this,arguments)}}()),chrome.runtime.onMessage.addListener(function(){var e=hr(cr().m(function e(t,r,n){var i,s,o,a;return cr().w(function(e){for(;;)switch(e.n){case 0:if("saveScreenshot"!==t.action){e.n=5;break}return e.p=1,i={id:Date.now().toString(),dataURL:t.screenshot,url:t.url,title:t.title,domain:new URL(t.url).hostname,createdAt:new Date,updatedAt:new Date,type:"screenshot"},e.n=2,chrome.storage.local.get("nest_screenshots");case 2:return s=e.v,(o=s.nest_screenshots||[]).push(i),e.n=3,chrome.storage.local.set({nest_screenshots:o});case 3:chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Screenshot Saved",message:"Screenshot saved to Nest successfully!"}),n({success:!0}),e.n=5;break;case 4:e.p=4,a=e.v,console.error("Failed to save screenshot:",a),n({success:!1,error:a.message});case 5:return e.a(2,!0)}},e,null,[[1,4]])}));return function(t,r,n){return e.apply(this,arguments)}}()),chrome.action.onClicked.addListener(function(){var e=hr(cr().m(function e(t){return cr().w(function(e){for(;;)switch(e.n){case 0:console.log("Action clicked, but popup should handle this");case 1:return e.a(2)}},e)}));return function(t){return e.apply(this,arguments)}}()),chrome.runtime.onMessage.addListener(function(e,t,r){return console.log("Background: Message received:",e),hr(cr().m(function n(){var i,s,o,a,c,u,l,h,d,f,g,p,v,m,y;return cr().w(function(n){for(;;)switch(n.n){case 0:if(n.p=0,"saveCurrentPage"!==e.action){n.n=5;break}return n.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if(!(i=n.v)[0]){n.n=3;break}return n.n=2,dr(i[0]);case 2:s=n.v,r(s),n.n=4;break;case 3:r({success:!1,error:"No active tab found."});case 4:n.n=36;break;case 5:if("saveHighlight"!==e.action){n.n=12;break}if(o=null,!t.tab){n.n=6;break}o=t.tab,n.n=8;break;case 6:return n.n=7,chrome.tabs.query({active:!0,currentWindow:!0});case 7:(a=n.v)[0]&&(o=a[0]);case 8:if(!o){n.n=10;break}return n.n=9,vr(o,e.selectedText,e.context,e.position);case 9:c=n.v,r(c),n.n=11;break;case 10:r({success:!1,error:"No active tab found."});case 11:n.n=36;break;case 12:if("getPageContent"!==e.action){n.n=16;break}if(!t.tab||!t.tab.id){n.n=14;break}return n.n=13,yr(t.tab.id);case 13:u=n.v,r(u),n.n=15;break;case 14:r({content:""});case 15:n.n=36;break;case 16:if("analyzePageWithAI"!==e.action){n.n=21;break}return n.n=17,chrome.tabs.query({active:!0,currentWindow:!0});case 17:if(!(l=n.v)[0]){n.n=19;break}return n.n=18,gr(l[0]);case 18:h=n.v,r(h),n.n=20;break;case 19:r({success:!1,error:"No active tab found."});case 20:n.n=36;break;case 21:if("saveWithContext"!==e.action){n.n=26;break}return n.n=22,chrome.tabs.query({active:!0,currentWindow:!0});case 22:if(!(d=n.v)[0]){n.n=24;break}return n.n=23,_r(d[0],e.reason,e.tags);case 23:f=n.v,r(f),n.n=25;break;case 24:r({success:!1,error:"No active tab found."});case 25:n.n=36;break;case 26:if("getPageInfo"!==e.action){n.n=31;break}return n.n=27,chrome.tabs.query({active:!0,currentWindow:!0});case 27:if(!(g=n.v)[0]){n.n=29;break}return n.n=28,wr(g[0]);case 28:p=n.v,r(p),n.n=30;break;case 29:r({success:!1,error:"No active tab found."});case 30:n.n=36;break;case 31:if("getHighlightsForPage"!==e.action){n.n=33;break}return n.n=32,Tr(e.url);case 32:v=n.v,r(v),n.n=36;break;case 33:if("removeHighlightFromStorage"!==e.action){n.n=35;break}return n.n=34,jr(e.highlightId,e.url);case 34:m=n.v,r(m),n.n=36;break;case 35:r({success:!1,error:"Unknown action"});case 36:n.n=38;break;case 37:n.p=37,y=n.v,console.error("Background script error:",y),r({success:!1,error:y.message});case 38:return n.a(2)}},n,null,[[0,37]])}))(),!0}),chrome.commands.onCommand.addListener(function(){var e=hr(cr().m(function e(t){var r,n;return cr().w(function(e){for(;;)switch(e.n){case 0:if("save-page"!==t){e.n=3;break}return e.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if(!(r=e.v)[0]){e.n=2;break}return e.n=2,dr(r[0]);case 2:e.n=5;break;case 3:if("open-command-palette"!==t){e.n=5;break}return e.n=4,chrome.tabs.query({active:!0,currentWindow:!0});case 4:if(!(n=e.v)[0]){e.n=5;break}return e.n=5,chrome.sidePanel.open({tabId:n[0].id});case 5:return e.a(2)}},e)}));return function(t){return e.apply(this,arguments)}}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUksQ0FBRnNLLEVBQUFwTCxFQUFBLGVBQUFvTCxFQUFBcEwsRUFBQSxFQUNIdTRDLE9BQU8wWCxVQUFVNy9CLEtBQUssQ0FBRTY4QixNQUFPdkMsRUFBSyxHQUFHai9DLEtBQUssY0FBQUwsRUFBQXJLLEVBQUEsS0FBQXdKLEVBQUEsSUFJdkQsZ0JBQUFpSSxHQUFBLE9BQUFqRixFQUFBOUssTUFBQSxLQUFBRCxVQUFBLEVBZG9DLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvZnVuY3Rpb25zLWpzL2Rpc3QvbW9kdWxlL3R5cGVzLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvY2pzL1Bvc3RncmVzdFF1ZXJ5QnVpbGRlci5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3Bvc3RncmVzdC1qcy9kaXN0L2Nqcy9Qb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvY2pzL1Bvc3RncmVzdENsaWVudC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9zcmMvdXRpbHMvYWkudHMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMvZGlzdC9janMvdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3Bvc3RncmVzdC1qcy9kaXN0L2Nqcy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMvZGlzdC9janMvUG9zdGdyZXN0QnVpbGRlci5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3Bvc3RncmVzdC1qcy9kaXN0L2Nqcy9Qb3N0Z3Jlc3RFcnJvci5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3Bvc3RncmVzdC1qcy9kaXN0L2Nqcy9Qb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvbm9kZS1mZXRjaC9icm93c2VyLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2Z1bmN0aW9ucy1qcy9kaXN0L21vZHVsZS9GdW5jdGlvbnNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9mdW5jdGlvbnMtanMvZGlzdC9tb2R1bGUvaGVscGVyLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvZXNtL3dyYXBwZXIubWpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9pc293cy9fZXNtL25hdGl2ZS5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvaXNvd3MvX2VzbS91dGlscy5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2xpYi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvdHJhbnNmb3JtZXJzLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcmVhbHRpbWUtanMvZGlzdC9tb2R1bGUvbGliL3NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvdGltZXIuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvcHVzaC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL1JlYWx0aW1lUHJlc2VuY2UuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9SZWFsdGltZUNoYW5uZWwuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9SZWFsdGltZUNsaWVudC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9zdG9yYWdlLWpzL2Rpc3QvbW9kdWxlL2xpYi9mZXRjaC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvcGFja2FnZXMvU3RvcmFnZUZpbGVBcGkuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9zdG9yYWdlLWpzL2Rpc3QvbW9kdWxlL2xpYi92ZXJzaW9uLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9saWIvY29uc3RhbnRzLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9wYWNrYWdlcy9TdG9yYWdlQnVja2V0QXBpLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9TdG9yYWdlQ2xpZW50LmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvbGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2xpYi9mZXRjaC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9iYXNlNjR1cmwuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9oZWxwZXJzLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvYXV0aC1qcy9kaXN0L21vZHVsZS9saWIvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi90eXBlcy5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvR29UcnVlQWRtaW5BcGkuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9sb2NhbC1zdG9yYWdlLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvYXV0aC1qcy9kaXN0L21vZHVsZS9saWIvbG9ja3MuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9wb2x5ZmlsbHMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL0dvVHJ1ZUNsaWVudC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvQXV0aEFkbWluQXBpLmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvYXV0aC1qcy9kaXN0L21vZHVsZS9BdXRoQ2xpZW50LmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvbGliL1N1cGFiYXNlQXV0aENsaWVudC5qcyIsIndlYnBhY2s6Ly9uZXN0LWNocm9tZS1leHRlbnNpb24vLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL1N1cGFiYXNlQ2xpZW50LmpzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvbGliL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vc3JjL3V0aWxzL3N1cGFiYXNlLnRzIiwid2VicGFjazovL25lc3QtY2hyb21lLWV4dGVuc2lvbi8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vc3JjL3V0aWxzL3N0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vbmVzdC1jaHJvbWUtZXh0ZW5zaW9uLy4vc3JjL2JhY2tncm91bmQvYmFja2dyb3VuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJuZXN0LWNocm9tZS1leHRlbnNpb246XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJleHBvcnQgY2xhc3MgRnVuY3Rpb25zRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgbmFtZSA9ICdGdW5jdGlvbnNFcnJvcicsIGNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uc0ZldGNoRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbnNFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgICAgICBzdXBlcignRmFpbGVkIHRvIHNlbmQgYSByZXF1ZXN0IHRvIHRoZSBFZGdlIEZ1bmN0aW9uJywgJ0Z1bmN0aW9uc0ZldGNoRXJyb3InLCBjb250ZXh0KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRnVuY3Rpb25zUmVsYXlFcnJvciBleHRlbmRzIEZ1bmN0aW9uc0Vycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKCdSZWxheSBFcnJvciBpbnZva2luZyB0aGUgRWRnZSBGdW5jdGlvbicsICdGdW5jdGlvbnNSZWxheUVycm9yJywgY29udGV4dCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uc0h0dHBFcnJvciBleHRlbmRzIEZ1bmN0aW9uc0Vycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKCdFZGdlIEZ1bmN0aW9uIHJldHVybmVkIGEgbm9uLTJ4eCBzdGF0dXMgY29kZScsICdGdW5jdGlvbnNIdHRwRXJyb3InLCBjb250ZXh0KTtcbiAgICB9XG59XG4vLyBEZWZpbmUgdGhlIGVudW0gZm9yIHRoZSAncmVnaW9uJyBwcm9wZXJ0eVxuZXhwb3J0IHZhciBGdW5jdGlvblJlZ2lvbjtcbihmdW5jdGlvbiAoRnVuY3Rpb25SZWdpb24pIHtcbiAgICBGdW5jdGlvblJlZ2lvbltcIkFueVwiXSA9IFwiYW55XCI7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJBcE5vcnRoZWFzdDFcIl0gPSBcImFwLW5vcnRoZWFzdC0xXCI7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJBcE5vcnRoZWFzdDJcIl0gPSBcImFwLW5vcnRoZWFzdC0yXCI7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJBcFNvdXRoMVwiXSA9IFwiYXAtc291dGgtMVwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiQXBTb3V0aGVhc3QxXCJdID0gXCJhcC1zb3V0aGVhc3QtMVwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiQXBTb3V0aGVhc3QyXCJdID0gXCJhcC1zb3V0aGVhc3QtMlwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiQ2FDZW50cmFsMVwiXSA9IFwiY2EtY2VudHJhbC0xXCI7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJFdUNlbnRyYWwxXCJdID0gXCJldS1jZW50cmFsLTFcIjtcbiAgICBGdW5jdGlvblJlZ2lvbltcIkV1V2VzdDFcIl0gPSBcImV1LXdlc3QtMVwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiRXVXZXN0MlwiXSA9IFwiZXUtd2VzdC0yXCI7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJFdVdlc3QzXCJdID0gXCJldS13ZXN0LTNcIjtcbiAgICBGdW5jdGlvblJlZ2lvbltcIlNhRWFzdDFcIl0gPSBcInNhLWVhc3QtMVwiO1xuICAgIEZ1bmN0aW9uUmVnaW9uW1wiVXNFYXN0MVwiXSA9IFwidXMtZWFzdC0xXCI7XG4gICAgRnVuY3Rpb25SZWdpb25bXCJVc1dlc3QxXCJdID0gXCJ1cy13ZXN0LTFcIjtcbiAgICBGdW5jdGlvblJlZ2lvbltcIlVzV2VzdDJcIl0gPSBcInVzLXdlc3QtMlwiO1xufSkoRnVuY3Rpb25SZWdpb24gfHwgKEZ1bmN0aW9uUmVnaW9uID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdEZpbHRlckJ1aWxkZXJcIikpO1xuY2xhc3MgUG9zdGdyZXN0UXVlcnlCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIHsgaGVhZGVycyA9IHt9LCBzY2hlbWEsIGZldGNoLCB9KSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgdGhpcy5mZXRjaCA9IGZldGNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgU0VMRUNUIHF1ZXJ5IG9uIHRoZSB0YWJsZSBvciB2aWV3LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbnMgLSBUaGUgY29sdW1ucyB0byByZXRyaWV2ZSwgc2VwYXJhdGVkIGJ5IGNvbW1hcy4gQ29sdW1ucyBjYW4gYmUgcmVuYW1lZCB3aGVuIHJldHVybmVkIHdpdGggYGN1c3RvbU5hbWU6Y29sdW1uTmFtZWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuaGVhZCAtIFdoZW4gc2V0IHRvIGB0cnVlYCwgYGRhdGFgIHdpbGwgbm90IGJlIHJldHVybmVkLlxuICAgICAqIFVzZWZ1bCBpZiB5b3Ugb25seSBuZWVkIHRoZSBjb3VudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmNvdW50IC0gQ291bnQgYWxnb3JpdGhtIHRvIHVzZSB0byBjb3VudCByb3dzIGluIHRoZSB0YWJsZSBvciB2aWV3LlxuICAgICAqXG4gICAgICogYFwiZXhhY3RcImA6IEV4YWN0IGJ1dCBzbG93IGNvdW50IGFsZ29yaXRobS4gUGVyZm9ybXMgYSBgQ09VTlQoKilgIHVuZGVyIHRoZVxuICAgICAqIGhvb2QuXG4gICAgICpcbiAgICAgKiBgXCJwbGFubmVkXCJgOiBBcHByb3hpbWF0ZWQgYnV0IGZhc3QgY291bnQgYWxnb3JpdGhtLiBVc2VzIHRoZSBQb3N0Z3Jlc1xuICAgICAqIHN0YXRpc3RpY3MgdW5kZXIgdGhlIGhvb2QuXG4gICAgICpcbiAgICAgKiBgXCJlc3RpbWF0ZWRcImA6IFVzZXMgZXhhY3QgY291bnQgZm9yIGxvdyBudW1iZXJzIGFuZCBwbGFubmVkIGNvdW50IGZvciBoaWdoXG4gICAgICogbnVtYmVycy5cbiAgICAgKi9cbiAgICBzZWxlY3QoY29sdW1ucywgeyBoZWFkID0gZmFsc2UsIGNvdW50LCB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gaGVhZCA/ICdIRUFEJyA6ICdHRVQnO1xuICAgICAgICAvLyBSZW1vdmUgd2hpdGVzcGFjZXMgZXhjZXB0IHdoZW4gcXVvdGVkXG4gICAgICAgIGxldCBxdW90ZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY2xlYW5lZENvbHVtbnMgPSAoY29sdW1ucyAhPT0gbnVsbCAmJiBjb2x1bW5zICE9PSB2b2lkIDAgPyBjb2x1bW5zIDogJyonKVxuICAgICAgICAgICAgLnNwbGl0KCcnKVxuICAgICAgICAgICAgLm1hcCgoYykgPT4ge1xuICAgICAgICAgICAgaWYgKC9cXHMvLnRlc3QoYykgJiYgIXF1b3RlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgcXVvdGVkID0gIXF1b3RlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJycpO1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuc2V0KCdzZWxlY3QnLCBjbGVhbmVkQ29sdW1ucyk7XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzWydQcmVmZXInXSA9IGBjb3VudD0ke2NvdW50fWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEuZGVmYXVsdCh7XG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLnNjaGVtYSxcbiAgICAgICAgICAgIGZldGNoOiB0aGlzLmZldGNoLFxuICAgICAgICAgICAgYWxsb3dFbXB0eTogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGFuIElOU0VSVCBpbnRvIHRoZSB0YWJsZSBvciB2aWV3LlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgaW5zZXJ0ZWQgcm93cyBhcmUgbm90IHJldHVybmVkLiBUbyByZXR1cm4gaXQsIGNoYWluIHRoZSBjYWxsXG4gICAgICogd2l0aCBgLnNlbGVjdCgpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZXMgLSBUaGUgdmFsdWVzIHRvIGluc2VydC4gUGFzcyBhbiBvYmplY3QgdG8gaW5zZXJ0IGEgc2luZ2xlIHJvd1xuICAgICAqIG9yIGFuIGFycmF5IHRvIGluc2VydCBtdWx0aXBsZSByb3dzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBOYW1lZCBwYXJhbWV0ZXJzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jb3VudCAtIENvdW50IGFsZ29yaXRobSB0byB1c2UgdG8gY291bnQgaW5zZXJ0ZWQgcm93cy5cbiAgICAgKlxuICAgICAqIGBcImV4YWN0XCJgOiBFeGFjdCBidXQgc2xvdyBjb3VudCBhbGdvcml0aG0uIFBlcmZvcm1zIGEgYENPVU5UKCopYCB1bmRlciB0aGVcbiAgICAgKiBob29kLlxuICAgICAqXG4gICAgICogYFwicGxhbm5lZFwiYDogQXBwcm94aW1hdGVkIGJ1dCBmYXN0IGNvdW50IGFsZ29yaXRobS4gVXNlcyB0aGUgUG9zdGdyZXNcbiAgICAgKiBzdGF0aXN0aWNzIHVuZGVyIHRoZSBob29kLlxuICAgICAqXG4gICAgICogYFwiZXN0aW1hdGVkXCJgOiBVc2VzIGV4YWN0IGNvdW50IGZvciBsb3cgbnVtYmVycyBhbmQgcGxhbm5lZCBjb3VudCBmb3IgaGlnaFxuICAgICAqIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kZWZhdWx0VG9OdWxsIC0gTWFrZSBtaXNzaW5nIGZpZWxkcyBkZWZhdWx0IHRvIGBudWxsYC5cbiAgICAgKiBPdGhlcndpc2UsIHVzZSB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGNvbHVtbi4gT25seSBhcHBsaWVzIGZvciBidWxrXG4gICAgICogaW5zZXJ0cy5cbiAgICAgKi9cbiAgICBpbnNlcnQodmFsdWVzLCB7IGNvdW50LCBkZWZhdWx0VG9OdWxsID0gdHJ1ZSwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgY29uc3QgcHJlZmVyc0hlYWRlcnMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyc1snUHJlZmVyJ10pIHtcbiAgICAgICAgICAgIHByZWZlcnNIZWFkZXJzLnB1c2godGhpcy5oZWFkZXJzWydQcmVmZXInXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50KSB7XG4gICAgICAgICAgICBwcmVmZXJzSGVhZGVycy5wdXNoKGBjb3VudD0ke2NvdW50fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVmYXVsdFRvTnVsbCkge1xuICAgICAgICAgICAgcHJlZmVyc0hlYWRlcnMucHVzaCgnbWlzc2luZz1kZWZhdWx0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oZWFkZXJzWydQcmVmZXInXSA9IHByZWZlcnNIZWFkZXJzLmpvaW4oJywnKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICAgICAgY29uc3QgY29sdW1ucyA9IHZhbHVlcy5yZWR1Y2UoKGFjYywgeCkgPT4gYWNjLmNvbmNhdChPYmplY3Qua2V5cyh4KSksIFtdKTtcbiAgICAgICAgICAgIGlmIChjb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1bmlxdWVDb2x1bW5zID0gWy4uLm5ldyBTZXQoY29sdW1ucyldLm1hcCgoY29sdW1uKSA9PiBgXCIke2NvbHVtbn1cImApO1xuICAgICAgICAgICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5zZXQoJ2NvbHVtbnMnLCB1bmlxdWVDb2x1bW5zLmpvaW4oJywnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEuZGVmYXVsdCh7XG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLnNjaGVtYSxcbiAgICAgICAgICAgIGJvZHk6IHZhbHVlcyxcbiAgICAgICAgICAgIGZldGNoOiB0aGlzLmZldGNoLFxuICAgICAgICAgICAgYWxsb3dFbXB0eTogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGFuIFVQU0VSVCBvbiB0aGUgdGFibGUgb3Igdmlldy4gRGVwZW5kaW5nIG9uIHRoZSBjb2x1bW4ocykgcGFzc2VkXG4gICAgICogdG8gYG9uQ29uZmxpY3RgLCBgLnVwc2VydCgpYCBhbGxvd3MgeW91IHRvIHBlcmZvcm0gdGhlIGVxdWl2YWxlbnQgb2ZcbiAgICAgKiBgLmluc2VydCgpYCBpZiBhIHJvdyB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGBvbkNvbmZsaWN0YCBjb2x1bW5zIGRvZXNuJ3RcbiAgICAgKiBleGlzdCwgb3IgaWYgaXQgZG9lcyBleGlzdCwgcGVyZm9ybSBhbiBhbHRlcm5hdGl2ZSBhY3Rpb24gZGVwZW5kaW5nIG9uXG4gICAgICogYGlnbm9yZUR1cGxpY2F0ZXNgLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgdXBzZXJ0ZWQgcm93cyBhcmUgbm90IHJldHVybmVkLiBUbyByZXR1cm4gaXQsIGNoYWluIHRoZSBjYWxsXG4gICAgICogd2l0aCBgLnNlbGVjdCgpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZXMgLSBUaGUgdmFsdWVzIHRvIHVwc2VydCB3aXRoLiBQYXNzIGFuIG9iamVjdCB0byB1cHNlcnQgYVxuICAgICAqIHNpbmdsZSByb3cgb3IgYW4gYXJyYXkgdG8gdXBzZXJ0IG11bHRpcGxlIHJvd3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLm9uQ29uZmxpY3QgLSBDb21tYS1zZXBhcmF0ZWQgVU5JUVVFIGNvbHVtbihzKSB0byBzcGVjaWZ5IGhvd1xuICAgICAqIGR1cGxpY2F0ZSByb3dzIGFyZSBkZXRlcm1pbmVkLiBUd28gcm93cyBhcmUgZHVwbGljYXRlcyBpZiBhbGwgdGhlXG4gICAgICogYG9uQ29uZmxpY3RgIGNvbHVtbnMgYXJlIGVxdWFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuaWdub3JlRHVwbGljYXRlcyAtIElmIGB0cnVlYCwgZHVwbGljYXRlIHJvd3MgYXJlIGlnbm9yZWQuIElmXG4gICAgICogYGZhbHNlYCwgZHVwbGljYXRlIHJvd3MgYXJlIG1lcmdlZCB3aXRoIGV4aXN0aW5nIHJvd3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jb3VudCAtIENvdW50IGFsZ29yaXRobSB0byB1c2UgdG8gY291bnQgdXBzZXJ0ZWQgcm93cy5cbiAgICAgKlxuICAgICAqIGBcImV4YWN0XCJgOiBFeGFjdCBidXQgc2xvdyBjb3VudCBhbGdvcml0aG0uIFBlcmZvcm1zIGEgYENPVU5UKCopYCB1bmRlciB0aGVcbiAgICAgKiBob29kLlxuICAgICAqXG4gICAgICogYFwicGxhbm5lZFwiYDogQXBwcm94aW1hdGVkIGJ1dCBmYXN0IGNvdW50IGFsZ29yaXRobS4gVXNlcyB0aGUgUG9zdGdyZXNcbiAgICAgKiBzdGF0aXN0aWNzIHVuZGVyIHRoZSBob29kLlxuICAgICAqXG4gICAgICogYFwiZXN0aW1hdGVkXCJgOiBVc2VzIGV4YWN0IGNvdW50IGZvciBsb3cgbnVtYmVycyBhbmQgcGxhbm5lZCBjb3VudCBmb3IgaGlnaFxuICAgICAqIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kZWZhdWx0VG9OdWxsIC0gTWFrZSBtaXNzaW5nIGZpZWxkcyBkZWZhdWx0IHRvIGBudWxsYC5cbiAgICAgKiBPdGhlcndpc2UsIHVzZSB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGNvbHVtbi4gVGhpcyBvbmx5IGFwcGxpZXMgd2hlblxuICAgICAqIGluc2VydGluZyBuZXcgcm93cywgbm90IHdoZW4gbWVyZ2luZyB3aXRoIGV4aXN0aW5nIHJvd3MgdW5kZXJcbiAgICAgKiBgaWdub3JlRHVwbGljYXRlczogZmFsc2VgLiBUaGlzIGFsc28gb25seSBhcHBsaWVzIHdoZW4gZG9pbmcgYnVsayB1cHNlcnRzLlxuICAgICAqL1xuICAgIHVwc2VydCh2YWx1ZXMsIHsgb25Db25mbGljdCwgaWdub3JlRHVwbGljYXRlcyA9IGZhbHNlLCBjb3VudCwgZGVmYXVsdFRvTnVsbCA9IHRydWUsIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgIGNvbnN0IHByZWZlcnNIZWFkZXJzID0gW2ByZXNvbHV0aW9uPSR7aWdub3JlRHVwbGljYXRlcyA/ICdpZ25vcmUnIDogJ21lcmdlJ30tZHVwbGljYXRlc2BdO1xuICAgICAgICBpZiAob25Db25mbGljdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLnNldCgnb25fY29uZmxpY3QnLCBvbkNvbmZsaWN0KTtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyc1snUHJlZmVyJ10pIHtcbiAgICAgICAgICAgIHByZWZlcnNIZWFkZXJzLnB1c2godGhpcy5oZWFkZXJzWydQcmVmZXInXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50KSB7XG4gICAgICAgICAgICBwcmVmZXJzSGVhZGVycy5wdXNoKGBjb3VudD0ke2NvdW50fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVmYXVsdFRvTnVsbCkge1xuICAgICAgICAgICAgcHJlZmVyc0hlYWRlcnMucHVzaCgnbWlzc2luZz1kZWZhdWx0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oZWFkZXJzWydQcmVmZXInXSA9IHByZWZlcnNIZWFkZXJzLmpvaW4oJywnKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICAgICAgY29uc3QgY29sdW1ucyA9IHZhbHVlcy5yZWR1Y2UoKGFjYywgeCkgPT4gYWNjLmNvbmNhdChPYmplY3Qua2V5cyh4KSksIFtdKTtcbiAgICAgICAgICAgIGlmIChjb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1bmlxdWVDb2x1bW5zID0gWy4uLm5ldyBTZXQoY29sdW1ucyldLm1hcCgoY29sdW1uKSA9PiBgXCIke2NvbHVtbn1cImApO1xuICAgICAgICAgICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5zZXQoJ2NvbHVtbnMnLCB1bmlxdWVDb2x1bW5zLmpvaW4oJywnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEuZGVmYXVsdCh7XG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLnNjaGVtYSxcbiAgICAgICAgICAgIGJvZHk6IHZhbHVlcyxcbiAgICAgICAgICAgIGZldGNoOiB0aGlzLmZldGNoLFxuICAgICAgICAgICAgYWxsb3dFbXB0eTogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGFuIFVQREFURSBvbiB0aGUgdGFibGUgb3Igdmlldy5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQsIHVwZGF0ZWQgcm93cyBhcmUgbm90IHJldHVybmVkLiBUbyByZXR1cm4gaXQsIGNoYWluIHRoZSBjYWxsXG4gICAgICogd2l0aCBgLnNlbGVjdCgpYCBhZnRlciBmaWx0ZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlcyAtIFRoZSB2YWx1ZXMgdG8gdXBkYXRlIHdpdGhcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuY291bnQgLSBDb3VudCBhbGdvcml0aG0gdG8gdXNlIHRvIGNvdW50IHVwZGF0ZWQgcm93cy5cbiAgICAgKlxuICAgICAqIGBcImV4YWN0XCJgOiBFeGFjdCBidXQgc2xvdyBjb3VudCBhbGdvcml0aG0uIFBlcmZvcm1zIGEgYENPVU5UKCopYCB1bmRlciB0aGVcbiAgICAgKiBob29kLlxuICAgICAqXG4gICAgICogYFwicGxhbm5lZFwiYDogQXBwcm94aW1hdGVkIGJ1dCBmYXN0IGNvdW50IGFsZ29yaXRobS4gVXNlcyB0aGUgUG9zdGdyZXNcbiAgICAgKiBzdGF0aXN0aWNzIHVuZGVyIHRoZSBob29kLlxuICAgICAqXG4gICAgICogYFwiZXN0aW1hdGVkXCJgOiBVc2VzIGV4YWN0IGNvdW50IGZvciBsb3cgbnVtYmVycyBhbmQgcGxhbm5lZCBjb3VudCBmb3IgaGlnaFxuICAgICAqIG51bWJlcnMuXG4gICAgICovXG4gICAgdXBkYXRlKHZhbHVlcywgeyBjb3VudCwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQQVRDSCc7XG4gICAgICAgIGNvbnN0IHByZWZlcnNIZWFkZXJzID0gW107XG4gICAgICAgIGlmICh0aGlzLmhlYWRlcnNbJ1ByZWZlciddKSB7XG4gICAgICAgICAgICBwcmVmZXJzSGVhZGVycy5wdXNoKHRoaXMuaGVhZGVyc1snUHJlZmVyJ10pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgcHJlZmVyc0hlYWRlcnMucHVzaChgY291bnQ9JHtjb3VudH1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhlYWRlcnNbJ1ByZWZlciddID0gcHJlZmVyc0hlYWRlcnMuam9pbignLCcpO1xuICAgICAgICByZXR1cm4gbmV3IFBvc3RncmVzdEZpbHRlckJ1aWxkZXJfMS5kZWZhdWx0KHtcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMuc2NoZW1hLFxuICAgICAgICAgICAgYm9keTogdmFsdWVzLFxuICAgICAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgICAgICBhbGxvd0VtcHR5OiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBERUxFVEUgb24gdGhlIHRhYmxlIG9yIHZpZXcuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCBkZWxldGVkIHJvd3MgYXJlIG5vdCByZXR1cm5lZC4gVG8gcmV0dXJuIGl0LCBjaGFpbiB0aGUgY2FsbFxuICAgICAqIHdpdGggYC5zZWxlY3QoKWAgYWZ0ZXIgZmlsdGVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuY291bnQgLSBDb3VudCBhbGdvcml0aG0gdG8gdXNlIHRvIGNvdW50IGRlbGV0ZWQgcm93cy5cbiAgICAgKlxuICAgICAqIGBcImV4YWN0XCJgOiBFeGFjdCBidXQgc2xvdyBjb3VudCBhbGdvcml0aG0uIFBlcmZvcm1zIGEgYENPVU5UKCopYCB1bmRlciB0aGVcbiAgICAgKiBob29kLlxuICAgICAqXG4gICAgICogYFwicGxhbm5lZFwiYDogQXBwcm94aW1hdGVkIGJ1dCBmYXN0IGNvdW50IGFsZ29yaXRobS4gVXNlcyB0aGUgUG9zdGdyZXNcbiAgICAgKiBzdGF0aXN0aWNzIHVuZGVyIHRoZSBob29kLlxuICAgICAqXG4gICAgICogYFwiZXN0aW1hdGVkXCJgOiBVc2VzIGV4YWN0IGNvdW50IGZvciBsb3cgbnVtYmVycyBhbmQgcGxhbm5lZCBjb3VudCBmb3IgaGlnaFxuICAgICAqIG51bWJlcnMuXG4gICAgICovXG4gICAgZGVsZXRlKHsgY291bnQsIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBtZXRob2QgPSAnREVMRVRFJztcbiAgICAgICAgY29uc3QgcHJlZmVyc0hlYWRlcnMgPSBbXTtcbiAgICAgICAgaWYgKGNvdW50KSB7XG4gICAgICAgICAgICBwcmVmZXJzSGVhZGVycy5wdXNoKGBjb3VudD0ke2NvdW50fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhlYWRlcnNbJ1ByZWZlciddKSB7XG4gICAgICAgICAgICBwcmVmZXJzSGVhZGVycy51bnNoaWZ0KHRoaXMuaGVhZGVyc1snUHJlZmVyJ10pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVhZGVyc1snUHJlZmVyJ10gPSBwcmVmZXJzSGVhZGVycy5qb2luKCcsJyk7XG4gICAgICAgIHJldHVybiBuZXcgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgdXJsOiB0aGlzLnVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWEsXG4gICAgICAgICAgICBmZXRjaDogdGhpcy5mZXRjaCxcbiAgICAgICAgICAgIGFsbG93RW1wdHk6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb3N0Z3Jlc3RRdWVyeUJ1aWxkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBQb3N0Z3Jlc3RCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0QnVpbGRlclwiKSk7XG5jbGFzcyBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyIGV4dGVuZHMgUG9zdGdyZXN0QnVpbGRlcl8xLmRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBTRUxFQ1Qgb24gdGhlIHF1ZXJ5IHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQsIGAuaW5zZXJ0KClgLCBgLnVwZGF0ZSgpYCwgYC51cHNlcnQoKWAsIGFuZCBgLmRlbGV0ZSgpYCBkbyBub3RcbiAgICAgKiByZXR1cm4gbW9kaWZpZWQgcm93cy4gQnkgY2FsbGluZyB0aGlzIG1ldGhvZCwgbW9kaWZpZWQgcm93cyBhcmUgcmV0dXJuZWQgaW5cbiAgICAgKiBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1ucyAtIFRoZSBjb2x1bW5zIHRvIHJldHJpZXZlLCBzZXBhcmF0ZWQgYnkgY29tbWFzXG4gICAgICovXG4gICAgc2VsZWN0KGNvbHVtbnMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHdoaXRlc3BhY2VzIGV4Y2VwdCB3aGVuIHF1b3RlZFxuICAgICAgICBsZXQgcXVvdGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNsZWFuZWRDb2x1bW5zID0gKGNvbHVtbnMgIT09IG51bGwgJiYgY29sdW1ucyAhPT0gdm9pZCAwID8gY29sdW1ucyA6ICcqJylcbiAgICAgICAgICAgIC5zcGxpdCgnJylcbiAgICAgICAgICAgIC5tYXAoKGMpID0+IHtcbiAgICAgICAgICAgIGlmICgvXFxzLy50ZXN0KGMpICYmICFxdW90ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1wiJykge1xuICAgICAgICAgICAgICAgIHF1b3RlZCA9ICFxdW90ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcnKTtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLnNldCgnc2VsZWN0JywgY2xlYW5lZENvbHVtbnMpO1xuICAgICAgICBpZiAodGhpcy5oZWFkZXJzWydQcmVmZXInXSkge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzWydQcmVmZXInXSArPSAnLCc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oZWFkZXJzWydQcmVmZXInXSArPSAncmV0dXJuPXJlcHJlc2VudGF0aW9uJztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9yZGVyIHRoZSBxdWVyeSByZXN1bHQgYnkgYGNvbHVtbmAuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGNhbGwgdGhpcyBtZXRob2QgbXVsdGlwbGUgdGltZXMgdG8gb3JkZXIgYnkgbXVsdGlwbGUgY29sdW1ucy5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gb3JkZXIgcmVmZXJlbmNlZCB0YWJsZXMsIGJ1dCBpdCBvbmx5IGFmZmVjdHMgdGhlIG9yZGVyaW5nIG9mIHRoZVxuICAgICAqIHBhcmVudCB0YWJsZSBpZiB5b3UgdXNlIGAhaW5uZXJgIGluIHRoZSBxdWVyeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIG9yZGVyIGJ5XG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBOYW1lZCBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYXNjZW5kaW5nIC0gSWYgYHRydWVgLCB0aGUgcmVzdWx0IHdpbGwgYmUgaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgICogQHBhcmFtIG9wdGlvbnMubnVsbHNGaXJzdCAtIElmIGB0cnVlYCwgYG51bGxgcyBhcHBlYXIgZmlyc3QuIElmIGBmYWxzZWAsXG4gICAgICogYG51bGxgcyBhcHBlYXIgbGFzdC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZWZlcmVuY2VkVGFibGUgLSBTZXQgdGhpcyB0byBvcmRlciBhIHJlZmVyZW5jZWQgdGFibGUgYnlcbiAgICAgKiBpdHMgY29sdW1uc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmZvcmVpZ25UYWJsZSAtIERlcHJlY2F0ZWQsIHVzZSBgb3B0aW9ucy5yZWZlcmVuY2VkVGFibGVgXG4gICAgICogaW5zdGVhZFxuICAgICAqL1xuICAgIG9yZGVyKGNvbHVtbiwgeyBhc2NlbmRpbmcgPSB0cnVlLCBudWxsc0ZpcnN0LCBmb3JlaWduVGFibGUsIHJlZmVyZW5jZWRUYWJsZSA9IGZvcmVpZ25UYWJsZSwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHJlZmVyZW5jZWRUYWJsZSA/IGAke3JlZmVyZW5jZWRUYWJsZX0ub3JkZXJgIDogJ29yZGVyJztcbiAgICAgICAgY29uc3QgZXhpc3RpbmdPcmRlciA9IHRoaXMudXJsLnNlYXJjaFBhcmFtcy5nZXQoa2V5KTtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLnNldChrZXksIGAke2V4aXN0aW5nT3JkZXIgPyBgJHtleGlzdGluZ09yZGVyfSxgIDogJyd9JHtjb2x1bW59LiR7YXNjZW5kaW5nID8gJ2FzYycgOiAnZGVzYyd9JHtudWxsc0ZpcnN0ID09PSB1bmRlZmluZWQgPyAnJyA6IG51bGxzRmlyc3QgPyAnLm51bGxzZmlyc3QnIDogJy5udWxsc2xhc3QnfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGltaXQgdGhlIHF1ZXJ5IHJlc3VsdCBieSBgY291bnRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvdW50IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gcmV0dXJuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBOYW1lZCBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9wdGlvbnMucmVmZXJlbmNlZFRhYmxlIC0gU2V0IHRoaXMgdG8gbGltaXQgcm93cyBvZiByZWZlcmVuY2VkXG4gICAgICogdGFibGVzIGluc3RlYWQgb2YgdGhlIHBhcmVudCB0YWJsZVxuICAgICAqIEBwYXJhbSBvcHRpb25zLmZvcmVpZ25UYWJsZSAtIERlcHJlY2F0ZWQsIHVzZSBgb3B0aW9ucy5yZWZlcmVuY2VkVGFibGVgXG4gICAgICogaW5zdGVhZFxuICAgICAqL1xuICAgIGxpbWl0KGNvdW50LCB7IGZvcmVpZ25UYWJsZSwgcmVmZXJlbmNlZFRhYmxlID0gZm9yZWlnblRhYmxlLCB9ID0ge30pIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdHlwZW9mIHJlZmVyZW5jZWRUYWJsZSA9PT0gJ3VuZGVmaW5lZCcgPyAnbGltaXQnIDogYCR7cmVmZXJlbmNlZFRhYmxlfS5saW1pdGA7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5zZXQoa2V5LCBgJHtjb3VudH1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbWl0IHRoZSBxdWVyeSByZXN1bHQgYnkgc3RhcnRpbmcgYXQgYW4gb2Zmc2V0IGBmcm9tYCBhbmQgZW5kaW5nIGF0IHRoZSBvZmZzZXQgYHRvYC5cbiAgICAgKiBPbmx5IHJlY29yZHMgd2l0aGluIHRoaXMgcmFuZ2UgYXJlIHJldHVybmVkLlxuICAgICAqIFRoaXMgcmVzcGVjdHMgdGhlIHF1ZXJ5IG9yZGVyIGFuZCBpZiB0aGVyZSBpcyBubyBvcmRlciBjbGF1c2UgdGhlIHJhbmdlIGNvdWxkIGJlaGF2ZSB1bmV4cGVjdGVkbHkuXG4gICAgICogVGhlIGBmcm9tYCBhbmQgYHRvYCB2YWx1ZXMgYXJlIDAtYmFzZWQgYW5kIGluY2x1c2l2ZTogYHJhbmdlKDEsIDMpYCB3aWxsIGluY2x1ZGUgdGhlIHNlY29uZCwgdGhpcmRcbiAgICAgKiBhbmQgZm91cnRoIHJvd3Mgb2YgdGhlIHF1ZXJ5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZyb20gLSBUaGUgc3RhcnRpbmcgaW5kZXggZnJvbSB3aGljaCB0byBsaW1pdCB0aGUgcmVzdWx0XG4gICAgICogQHBhcmFtIHRvIC0gVGhlIGxhc3QgaW5kZXggdG8gd2hpY2ggdG8gbGltaXQgdGhlIHJlc3VsdFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLnJlZmVyZW5jZWRUYWJsZSAtIFNldCB0aGlzIHRvIGxpbWl0IHJvd3Mgb2YgcmVmZXJlbmNlZFxuICAgICAqIHRhYmxlcyBpbnN0ZWFkIG9mIHRoZSBwYXJlbnQgdGFibGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5mb3JlaWduVGFibGUgLSBEZXByZWNhdGVkLCB1c2UgYG9wdGlvbnMucmVmZXJlbmNlZFRhYmxlYFxuICAgICAqIGluc3RlYWRcbiAgICAgKi9cbiAgICByYW5nZShmcm9tLCB0bywgeyBmb3JlaWduVGFibGUsIHJlZmVyZW5jZWRUYWJsZSA9IGZvcmVpZ25UYWJsZSwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGtleU9mZnNldCA9IHR5cGVvZiByZWZlcmVuY2VkVGFibGUgPT09ICd1bmRlZmluZWQnID8gJ29mZnNldCcgOiBgJHtyZWZlcmVuY2VkVGFibGV9Lm9mZnNldGA7XG4gICAgICAgIGNvbnN0IGtleUxpbWl0ID0gdHlwZW9mIHJlZmVyZW5jZWRUYWJsZSA9PT0gJ3VuZGVmaW5lZCcgPyAnbGltaXQnIDogYCR7cmVmZXJlbmNlZFRhYmxlfS5saW1pdGA7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5zZXQoa2V5T2Zmc2V0LCBgJHtmcm9tfWApO1xuICAgICAgICAvLyBSYW5nZSBpcyBpbmNsdXNpdmUsIHNvIGFkZCAxXG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5zZXQoa2V5TGltaXQsIGAke3RvIC0gZnJvbSArIDF9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIEFib3J0U2lnbmFsIGZvciB0aGUgZmV0Y2ggcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaWduYWwgLSBUaGUgQWJvcnRTaWduYWwgdG8gdXNlIGZvciB0aGUgZmV0Y2ggcmVxdWVzdFxuICAgICAqL1xuICAgIGFib3J0U2lnbmFsKHNpZ25hbCkge1xuICAgICAgICB0aGlzLnNpZ25hbCA9IHNpZ25hbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBgZGF0YWAgYXMgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXkgb2Ygb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIFF1ZXJ5IHJlc3VsdCBtdXN0IGJlIG9uZSByb3cgKGUuZy4gdXNpbmcgYC5saW1pdCgxKWApLCBvdGhlcndpc2UgdGhpc1xuICAgICAqIHJldHVybnMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgc2luZ2xlKCkge1xuICAgICAgICB0aGlzLmhlYWRlcnNbJ0FjY2VwdCddID0gJ2FwcGxpY2F0aW9uL3ZuZC5wZ3JzdC5vYmplY3QranNvbic7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYGRhdGFgIGFzIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGFuIGFycmF5IG9mIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBRdWVyeSByZXN1bHQgbXVzdCBiZSB6ZXJvIG9yIG9uZSByb3cgKGUuZy4gdXNpbmcgYC5saW1pdCgxKWApLCBvdGhlcndpc2VcbiAgICAgKiB0aGlzIHJldHVybnMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgbWF5YmVTaW5nbGUoKSB7XG4gICAgICAgIC8vIFRlbXBvcmFyeSBwYXJ0aWFsIGZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3N1cGFiYXNlL3Bvc3RncmVzdC1qcy9pc3N1ZXMvMzYxXG4gICAgICAgIC8vIElzc3VlIHBlcnNpc3RzIGUuZy4gZm9yIGAuaW5zZXJ0KFsuLi5dKS5zZWxlY3QoKS5tYXliZVNpbmdsZSgpYFxuICAgICAgICBpZiAodGhpcy5tZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcnNbJ0FjY2VwdCddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzWydBY2NlcHQnXSA9ICdhcHBsaWNhdGlvbi92bmQucGdyc3Qub2JqZWN0K2pzb24nO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNNYXliZVNpbmdsZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYGRhdGFgIGFzIGEgc3RyaW5nIGluIENTViBmb3JtYXQuXG4gICAgICovXG4gICAgY3N2KCkge1xuICAgICAgICB0aGlzLmhlYWRlcnNbJ0FjY2VwdCddID0gJ3RleHQvY3N2JztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBgZGF0YWAgYXMgYW4gb2JqZWN0IGluIFtHZW9KU09OXShodHRwczovL2dlb2pzb24ub3JnKSBmb3JtYXQuXG4gICAgICovXG4gICAgZ2VvanNvbigpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzWydBY2NlcHQnXSA9ICdhcHBsaWNhdGlvbi9nZW8ranNvbic7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYGRhdGFgIGFzIHRoZSBFWFBMQUlOIHBsYW4gZm9yIHRoZSBxdWVyeS5cbiAgICAgKlxuICAgICAqIFlvdSBuZWVkIHRvIGVuYWJsZSB0aGVcbiAgICAgKiBbZGJfcGxhbl9lbmFibGVkXShodHRwczovL3N1cGFiYXNlLmNvbS9kb2NzL2d1aWRlcy9kYXRhYmFzZS9kZWJ1Z2dpbmctcGVyZm9ybWFuY2UjZW5hYmxpbmctZXhwbGFpbilcbiAgICAgKiBzZXR0aW5nIGJlZm9yZSB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYW5hbHl6ZSAtIElmIGB0cnVlYCwgdGhlIHF1ZXJ5IHdpbGwgYmUgZXhlY3V0ZWQgYW5kIHRoZVxuICAgICAqIGFjdHVhbCBydW4gdGltZSB3aWxsIGJlIHJldHVybmVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy52ZXJib3NlIC0gSWYgYHRydWVgLCB0aGUgcXVlcnkgaWRlbnRpZmllciB3aWxsIGJlIHJldHVybmVkXG4gICAgICogYW5kIGBkYXRhYCB3aWxsIGluY2x1ZGUgdGhlIG91dHB1dCBjb2x1bW5zIG9mIHRoZSBxdWVyeVxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc2V0dGluZ3MgLSBJZiBgdHJ1ZWAsIGluY2x1ZGUgaW5mb3JtYXRpb24gb24gY29uZmlndXJhdGlvblxuICAgICAqIHBhcmFtZXRlcnMgdGhhdCBhZmZlY3QgcXVlcnkgcGxhbm5pbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmJ1ZmZlcnMgLSBJZiBgdHJ1ZWAsIGluY2x1ZGUgaW5mb3JtYXRpb24gb24gYnVmZmVyIHVzYWdlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy53YWwgLSBJZiBgdHJ1ZWAsIGluY2x1ZGUgaW5mb3JtYXRpb24gb24gV0FMIHJlY29yZCBnZW5lcmF0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5mb3JtYXQgLSBUaGUgZm9ybWF0IG9mIHRoZSBvdXRwdXQsIGNhbiBiZSBgXCJ0ZXh0XCJgIChkZWZhdWx0KVxuICAgICAqIG9yIGBcImpzb25cImBcbiAgICAgKi9cbiAgICBleHBsYWluKHsgYW5hbHl6ZSA9IGZhbHNlLCB2ZXJib3NlID0gZmFsc2UsIHNldHRpbmdzID0gZmFsc2UsIGJ1ZmZlcnMgPSBmYWxzZSwgd2FsID0gZmFsc2UsIGZvcm1hdCA9ICd0ZXh0JywgfSA9IHt9KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFtcbiAgICAgICAgICAgIGFuYWx5emUgPyAnYW5hbHl6ZScgOiBudWxsLFxuICAgICAgICAgICAgdmVyYm9zZSA/ICd2ZXJib3NlJyA6IG51bGwsXG4gICAgICAgICAgICBzZXR0aW5ncyA/ICdzZXR0aW5ncycgOiBudWxsLFxuICAgICAgICAgICAgYnVmZmVycyA/ICdidWZmZXJzJyA6IG51bGwsXG4gICAgICAgICAgICB3YWwgPyAnd2FsJyA6IG51bGwsXG4gICAgICAgIF1cbiAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgIC5qb2luKCd8Jyk7XG4gICAgICAgIC8vIEFuIEFjY2VwdCBoZWFkZXIgY2FuIGNhcnJ5IG11bHRpcGxlIG1lZGlhIHR5cGVzIGJ1dCBwb3N0Z3Jlc3QtanMgYWx3YXlzIHNlbmRzIG9uZVxuICAgICAgICBjb25zdCBmb3JNZWRpYXR5cGUgPSAoX2EgPSB0aGlzLmhlYWRlcnNbJ0FjY2VwdCddKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgIHRoaXMuaGVhZGVyc1snQWNjZXB0J10gPSBgYXBwbGljYXRpb24vdm5kLnBncnN0LnBsYW4rJHtmb3JtYXR9OyBmb3I9XCIke2Zvck1lZGlhdHlwZX1cIjsgb3B0aW9ucz0ke29wdGlvbnN9O2A7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdqc29uJylcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUm9sbGJhY2sgdGhlIHF1ZXJ5LlxuICAgICAqXG4gICAgICogYGRhdGFgIHdpbGwgc3RpbGwgYmUgcmV0dXJuZWQsIGJ1dCB0aGUgcXVlcnkgaXMgbm90IGNvbW1pdHRlZC5cbiAgICAgKi9cbiAgICByb2xsYmFjaygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoKChfYSA9IHRoaXMuaGVhZGVyc1snUHJlZmVyJ10pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKS50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzWydQcmVmZXInXSArPSAnLHR4PXJvbGxiYWNrJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1snUHJlZmVyJ10gPSAndHg9cm9sbGJhY2snO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGUgdHlwZSBvZiB0aGUgcmV0dXJuZWQgYGRhdGFgLlxuICAgICAqXG4gICAgICogQHR5cGVQYXJhbSBOZXdSZXN1bHQgLSBUaGUgbmV3IHJlc3VsdCB0eXBlIHRvIG92ZXJyaWRlIHdpdGhcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2Ugb3ZlcnJpZGVUeXBlczx5b3VyVHlwZSwgeyBtZXJnZTogZmFsc2UgfT4oKSBtZXRob2QgYXQgdGhlIGVuZCBvZiB5b3VyIGNhbGwgY2hhaW4gaW5zdGVhZFxuICAgICAqL1xuICAgIHJldHVybnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qb3N0Z3Jlc3RFcnJvciA9IGV4cG9ydHMuUG9zdGdyZXN0QnVpbGRlciA9IGV4cG9ydHMuUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlciA9IGV4cG9ydHMuUG9zdGdyZXN0RmlsdGVyQnVpbGRlciA9IGV4cG9ydHMuUG9zdGdyZXN0UXVlcnlCdWlsZGVyID0gZXhwb3J0cy5Qb3N0Z3Jlc3RDbGllbnQgPSB2b2lkIDA7XG4vLyBBbHdheXMgdXBkYXRlIHdyYXBwZXIubWpzIHdoZW4gdXBkYXRpbmcgdGhpcyBmaWxlLlxuY29uc3QgUG9zdGdyZXN0Q2xpZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0Q2xpZW50XCIpKTtcbmV4cG9ydHMuUG9zdGdyZXN0Q2xpZW50ID0gUG9zdGdyZXN0Q2xpZW50XzEuZGVmYXVsdDtcbmNvbnN0IFBvc3RncmVzdFF1ZXJ5QnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdFF1ZXJ5QnVpbGRlclwiKSk7XG5leHBvcnRzLlBvc3RncmVzdFF1ZXJ5QnVpbGRlciA9IFBvc3RncmVzdFF1ZXJ5QnVpbGRlcl8xLmRlZmF1bHQ7XG5jb25zdCBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0RmlsdGVyQnVpbGRlclwiKSk7XG5leHBvcnRzLlBvc3RncmVzdEZpbHRlckJ1aWxkZXIgPSBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEuZGVmYXVsdDtcbmNvbnN0IFBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Qb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXCIpKTtcbmV4cG9ydHMuUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlciA9IFBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXJfMS5kZWZhdWx0O1xuY29uc3QgUG9zdGdyZXN0QnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdEJ1aWxkZXJcIikpO1xuZXhwb3J0cy5Qb3N0Z3Jlc3RCdWlsZGVyID0gUG9zdGdyZXN0QnVpbGRlcl8xLmRlZmF1bHQ7XG5jb25zdCBQb3N0Z3Jlc3RFcnJvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdEVycm9yXCIpKTtcbmV4cG9ydHMuUG9zdGdyZXN0RXJyb3IgPSBQb3N0Z3Jlc3RFcnJvcl8xLmRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgUG9zdGdyZXN0Q2xpZW50OiBQb3N0Z3Jlc3RDbGllbnRfMS5kZWZhdWx0LFxuICAgIFBvc3RncmVzdFF1ZXJ5QnVpbGRlcjogUG9zdGdyZXN0UXVlcnlCdWlsZGVyXzEuZGVmYXVsdCxcbiAgICBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyOiBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEuZGVmYXVsdCxcbiAgICBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyOiBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXzEuZGVmYXVsdCxcbiAgICBQb3N0Z3Jlc3RCdWlsZGVyOiBQb3N0Z3Jlc3RCdWlsZGVyXzEuZGVmYXVsdCxcbiAgICBQb3N0Z3Jlc3RFcnJvcjogUG9zdGdyZXN0RXJyb3JfMS5kZWZhdWx0LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgUG9zdGdyZXN0UXVlcnlCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0UXVlcnlCdWlsZGVyXCIpKTtcbmNvbnN0IFBvc3RncmVzdEZpbHRlckJ1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Qb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXCIpKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuLyoqXG4gKiBQb3N0Z1JFU1QgY2xpZW50LlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0YWJhc2UgLSBUeXBlcyBmb3IgdGhlIHNjaGVtYSBmcm9tIHRoZSBbdHlwZVxuICogZ2VuZXJhdG9yXShodHRwczovL3N1cGFiYXNlLmNvbS9kb2NzL3JlZmVyZW5jZS9qYXZhc2NyaXB0L25leHQvdHlwZXNjcmlwdC1zdXBwb3J0KVxuICpcbiAqIEB0eXBlUGFyYW0gU2NoZW1hTmFtZSAtIFBvc3RncmVzIHNjaGVtYSB0byBzd2l0Y2ggdG8uIE11c3QgYmUgYSBzdHJpbmdcbiAqIGxpdGVyYWwsIHRoZSBzYW1lIG9uZSBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLiBJZiB0aGUgc2NoZW1hIGlzIG5vdFxuICogYFwicHVibGljXCJgLCB0aGlzIG11c3QgYmUgc3VwcGxpZWQgbWFudWFsbHkuXG4gKi9cbmNsYXNzIFBvc3RncmVzdENsaWVudCB7XG4gICAgLy8gVE9ETzogQWRkIGJhY2sgc2hvdWxkVGhyb3dPbkVycm9yIG9uY2Ugd2UgZmlndXJlIG91dCB0aGUgdHlwaW5nc1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQb3N0Z1JFU1QgY2xpZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybCAtIFVSTCBvZiB0aGUgUG9zdGdSRVNUIGVuZHBvaW50XG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBOYW1lZCBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9wdGlvbnMuaGVhZGVycyAtIEN1c3RvbSBoZWFkZXJzXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc2NoZW1hIC0gUG9zdGdyZXMgc2NoZW1hIHRvIHN3aXRjaCB0b1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmZldGNoIC0gQ3VzdG9tIGZldGNoXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodXJsLCB7IGhlYWRlcnMgPSB7fSwgc2NoZW1hLCBmZXRjaCwgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbnN0YW50c18xLkRFRkFVTFRfSEVBREVSUyksIGhlYWRlcnMpO1xuICAgICAgICB0aGlzLnNjaGVtYU5hbWUgPSBzY2hlbWE7XG4gICAgICAgIHRoaXMuZmV0Y2ggPSBmZXRjaDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhIHF1ZXJ5IG9uIGEgdGFibGUgb3IgYSB2aWV3LlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlbGF0aW9uIC0gVGhlIHRhYmxlIG9yIHZpZXcgbmFtZSB0byBxdWVyeVxuICAgICAqL1xuICAgIGZyb20ocmVsYXRpb24pIHtcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHt0aGlzLnVybH0vJHtyZWxhdGlvbn1gKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXJfMS5kZWZhdWx0KHVybCwge1xuICAgICAgICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5oZWFkZXJzKSxcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWFOYW1lLFxuICAgICAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgYSBzY2hlbWEgdG8gcXVlcnkgb3IgcGVyZm9ybSBhbiBmdW5jdGlvbiAocnBjKSBjYWxsLlxuICAgICAqXG4gICAgICogVGhlIHNjaGVtYSBuZWVkcyB0byBiZSBvbiB0aGUgbGlzdCBvZiBleHBvc2VkIHNjaGVtYXMgaW5zaWRlIFN1cGFiYXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjaGVtYSAtIFRoZSBzY2hlbWEgdG8gcXVlcnlcbiAgICAgKi9cbiAgICBzY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9zdGdyZXN0Q2xpZW50KHRoaXMudXJsLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgICBmZXRjaDogdGhpcy5mZXRjaCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBmdW5jdGlvbiBjYWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIG5hbWUgdG8gY2FsbFxuICAgICAqIEBwYXJhbSBhcmdzIC0gVGhlIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBmdW5jdGlvbiBjYWxsXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBOYW1lZCBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9wdGlvbnMuaGVhZCAtIFdoZW4gc2V0IHRvIGB0cnVlYCwgYGRhdGFgIHdpbGwgbm90IGJlIHJldHVybmVkLlxuICAgICAqIFVzZWZ1bCBpZiB5b3Ugb25seSBuZWVkIHRoZSBjb3VudC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5nZXQgLSBXaGVuIHNldCB0byBgdHJ1ZWAsIHRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aXRoXG4gICAgICogcmVhZC1vbmx5IGFjY2VzcyBtb2RlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmNvdW50IC0gQ291bnQgYWxnb3JpdGhtIHRvIHVzZSB0byBjb3VudCByb3dzIHJldHVybmVkIGJ5IHRoZVxuICAgICAqIGZ1bmN0aW9uLiBPbmx5IGFwcGxpY2FibGUgZm9yIFtzZXQtcmV0dXJuaW5nXG4gICAgICogZnVuY3Rpb25zXShodHRwczovL3d3dy5wb3N0Z3Jlc3FsLm9yZy9kb2NzL2N1cnJlbnQvZnVuY3Rpb25zLXNyZi5odG1sKS5cbiAgICAgKlxuICAgICAqIGBcImV4YWN0XCJgOiBFeGFjdCBidXQgc2xvdyBjb3VudCBhbGdvcml0aG0uIFBlcmZvcm1zIGEgYENPVU5UKCopYCB1bmRlciB0aGVcbiAgICAgKiBob29kLlxuICAgICAqXG4gICAgICogYFwicGxhbm5lZFwiYDogQXBwcm94aW1hdGVkIGJ1dCBmYXN0IGNvdW50IGFsZ29yaXRobS4gVXNlcyB0aGUgUG9zdGdyZXNcbiAgICAgKiBzdGF0aXN0aWNzIHVuZGVyIHRoZSBob29kLlxuICAgICAqXG4gICAgICogYFwiZXN0aW1hdGVkXCJgOiBVc2VzIGV4YWN0IGNvdW50IGZvciBsb3cgbnVtYmVycyBhbmQgcGxhbm5lZCBjb3VudCBmb3IgaGlnaFxuICAgICAqIG51bWJlcnMuXG4gICAgICovXG4gICAgcnBjKGZuLCBhcmdzID0ge30sIHsgaGVhZCA9IGZhbHNlLCBnZXQgPSBmYWxzZSwgY291bnQsIH0gPSB7fSkge1xuICAgICAgICBsZXQgbWV0aG9kO1xuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke3RoaXMudXJsfS9ycGMvJHtmbn1gKTtcbiAgICAgICAgbGV0IGJvZHk7XG4gICAgICAgIGlmIChoZWFkIHx8IGdldCkge1xuICAgICAgICAgICAgbWV0aG9kID0gaGVhZCA/ICdIRUFEJyA6ICdHRVQnO1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoYXJncylcbiAgICAgICAgICAgICAgICAvLyBwYXJhbXMgd2l0aCB1bmRlZmluZWQgdmFsdWUgbmVlZHMgdG8gYmUgZmlsdGVyZWQgb3V0LCBvdGhlcndpc2UgaXQnbGxcbiAgICAgICAgICAgICAgICAvLyBzaG93IHVwIGFzIGA/cGFyYW09dW5kZWZpbmVkYFxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgLy8gYXJyYXkgdmFsdWVzIG5lZWQgc3BlY2lhbCBzeW50YXhcbiAgICAgICAgICAgICAgICAubWFwKChbbmFtZSwgdmFsdWVdKSA9PiBbbmFtZSwgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBgeyR7dmFsdWUuam9pbignLCcpfX1gIDogYCR7dmFsdWV9YF0pXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgICAgIGJvZHkgPSBhcmdzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmhlYWRlcnMpO1xuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbJ1ByZWZlciddID0gYGNvdW50PSR7Y291bnR9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFBvc3RncmVzdEZpbHRlckJ1aWxkZXJfMS5kZWZhdWx0KHtcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMuc2NoZW1hTmFtZSxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBmZXRjaDogdGhpcy5mZXRjaCxcbiAgICAgICAgICAgIGFsbG93RW1wdHk6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQb3N0Z3Jlc3RDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb3N0Z3Jlc3RDbGllbnQuanMubWFwIiwiLy8gQUkgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIHN1bW1hcml6YXRpb24sIHRhZ2dpbmcsIGFuZCBjYXRlZ29yaXphdGlvblxuaW1wb3J0IHsgQUlUYWdTdWdnZXN0aW9uLCBBSUNhdGVnb3J5U3VnZ2VzdGlvbiwgQUlBbmFseXNpc1Jlc3VsdCwgU2F2ZWRMaW5rLCBIaWdobGlnaHQsIEFJSW5zaWdodCwgQ3Jvc3NSZWZlcmVuY2UsIEtub3dsZWRnZUdyYXBoLCBLbm93bGVkZ2VOb2RlLCBLbm93bGVkZ2VFZGdlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFJQ29uZmlnIHtcbiAgYXBpS2V5Pzogc3RyaW5nO1xuICBtb2RlbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEFJU2VydmljZSB7XG4gIHByaXZhdGUgYXBpS2V5OiBzdHJpbmc7XG4gIHByaXZhdGUgbW9kZWw6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEFJQ29uZmlnID0ge30pIHtcbiAgICB0aGlzLmFwaUtleSA9IGNvbmZpZy5hcGlLZXkgfHwgJyc7XG4gICAgdGhpcy5tb2RlbCA9IGNvbmZpZy5tb2RlbCB8fCAnZ3B0LTMuNS10dXJibyc7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBjb21wcmVoZW5zaXZlIEFJIGFuYWx5c2lzIG9mIGNvbnRlbnRcbiAgICovXG4gIGFzeW5jIGFuYWx5emVDb250ZW50KGNvbnRlbnQ6IHN0cmluZywgdGl0bGU6IHN0cmluZywgdXJsOiBzdHJpbmcpOiBQcm9taXNlPEFJQW5hbHlzaXNSZXN1bHQ+IHtcbiAgICBpZiAoIXRoaXMuYXBpS2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZVJ1bGVCYXNlZEFuYWx5c2lzKGNvbnRlbnQsIHRpdGxlLCB1cmwpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2FsbE9wZW5BSUZvckFuYWx5c2lzKGNvbnRlbnQsIHRpdGxlLCB1cmwpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdBSSBhbmFseXNpcyBmYWlsZWQsIGZhbGxpbmcgYmFjayB0byBydWxlLWJhc2VkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlUnVsZUJhc2VkQW5hbHlzaXMoY29udGVudCwgdGl0bGUsIHVybCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHN1bW1hcnkgKGV4aXN0aW5nIGZ1bmN0aW9uYWxpdHkpXG4gICAqL1xuICBhc3luYyBnZW5lcmF0ZVN1bW1hcnkoY29udGVudDogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCF0aGlzLmFwaUtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVQbGFjZWhvbGRlclN1bW1hcnkoY29udGVudCwgdGl0bGUsIHVybCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jYWxsT3BlbkFJKGNvbnRlbnQsIHRpdGxlLCB1cmwpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdBSSBzdW1tYXJ5IGdlbmVyYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlUGxhY2Vob2xkZXJTdW1tYXJ5KGNvbnRlbnQsIHRpdGxlLCB1cmwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSdWxlLWJhc2VkIGNvbnRlbnQgYW5hbHlzaXMgd2l0aCBpbnRlbGxpZ2VudCB0YWcgYW5kIGNhdGVnb3J5IHN1Z2dlc3Rpb25zXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlUnVsZUJhc2VkQW5hbHlzaXMoY29udGVudDogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZyk6IEFJQW5hbHlzaXNSZXN1bHQge1xuICAgIGNvbnN0IGRvbWFpbiA9IG5ldyBVUkwodXJsKS5ob3N0bmFtZTtcbiAgICBjb25zdCBjb250ZW50TG93ZXIgPSBjb250ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgdGl0bGVMb3dlciA9IHRpdGxlLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgZnVsbFRleHQgPSBgJHt0aXRsZUxvd2VyfSAke2NvbnRlbnRMb3dlcn1gO1xuXG4gICAgLy8gQW5hbHl6ZSBjb250ZW50IHR5cGVcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHRoaXMuZGV0ZWN0Q29udGVudFR5cGUoZG9tYWluLCB0aXRsZSwgY29udGVudCk7XG4gICAgXG4gICAgLy8gR2VuZXJhdGUgdGFnIHN1Z2dlc3Rpb25zIGJhc2VkIG9uIGNvbnRlbnQgYW5hbHlzaXNcbiAgICBjb25zdCB0YWdTdWdnZXN0aW9ucyA9IHRoaXMuZ2VuZXJhdGVSdWxlQmFzZWRUYWdzKGZ1bGxUZXh0LCBkb21haW4sIGNvbnRlbnRUeXBlKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBjYXRlZ29yeSBzdWdnZXN0aW9uc1xuICAgIGNvbnN0IGNhdGVnb3J5U3VnZ2VzdGlvbnMgPSB0aGlzLmdlbmVyYXRlUnVsZUJhc2VkQ2F0ZWdvcmllcyhmdWxsVGV4dCwgZG9tYWluLCBjb250ZW50VHlwZSk7XG4gICAgXG4gICAgLy8gRXh0cmFjdCBtYWluIHRvcGljc1xuICAgIGNvbnN0IHRvcGljcyA9IHRoaXMuZXh0cmFjdFRvcGljcyhmdWxsVGV4dCk7XG4gICAgXG4gICAgLy8gRXN0aW1hdGUgY29tcGxleGl0eSBhbmQgcmVhZGluZyB0aW1lXG4gICAgY29uc3QgY29tcGxleGl0eSA9IHRoaXMuZXN0aW1hdGVDb21wbGV4aXR5KGNvbnRlbnQpO1xuICAgIGNvbnN0IHJlYWRpbmdUaW1lID0gdGhpcy5lc3RpbWF0ZVJlYWRpbmdUaW1lKGNvbnRlbnQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1bW1hcnk6IHRoaXMuZ2VuZXJhdGVQbGFjZWhvbGRlclN1bW1hcnkoY29udGVudCwgdGl0bGUsIHVybCksXG4gICAgICB0YWdTdWdnZXN0aW9ucyxcbiAgICAgIGNhdGVnb3J5U3VnZ2VzdGlvbnMsXG4gICAgICBjb250ZW50VHlwZSxcbiAgICAgIHRvcGljcyxcbiAgICAgIGNvbXBsZXhpdHksXG4gICAgICByZWFkaW5nVGltZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0IGNvbnRlbnQgdHlwZSBiYXNlZCBvbiBkb21haW4gYW5kIGNvbnRlbnRcbiAgICovXG4gIHByaXZhdGUgZGV0ZWN0Q29udGVudFR5cGUoZG9tYWluOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IEFJQW5hbHlzaXNSZXN1bHRbJ2NvbnRlbnRUeXBlJ10ge1xuICAgIGNvbnN0IHRpdGxlTG93ZXIgPSB0aXRsZS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGNvbnRlbnRMb3dlciA9IGNvbnRlbnQudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIFZpZGVvIHBsYXRmb3Jtc1xuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ3lvdXR1YmUuY29tJykgfHwgZG9tYWluLmluY2x1ZGVzKCd2aW1lby5jb20nKSB8fCBkb21haW4uaW5jbHVkZXMoJ3R3aXRjaC50dicpKSB7XG4gICAgICByZXR1cm4gJ3ZpZGVvJztcbiAgICB9XG5cbiAgICAvLyBEb2N1bWVudGF0aW9uIHNpdGVzXG4gICAgaWYgKGRvbWFpbi5pbmNsdWRlcygnZG9jcy4nKSB8fCB0aXRsZUxvd2VyLmluY2x1ZGVzKCdkb2N1bWVudGF0aW9uJykgfHwgXG4gICAgICAgIGNvbnRlbnRMb3dlci5pbmNsdWRlcygnYXBpIHJlZmVyZW5jZScpIHx8IGNvbnRlbnRMb3dlci5pbmNsdWRlcygnZ2V0dGluZyBzdGFydGVkJykpIHtcbiAgICAgIHJldHVybiAnZG9jdW1lbnRhdGlvbic7XG4gICAgfVxuXG4gICAgLy8gVHV0b3JpYWwgaW5kaWNhdG9yc1xuICAgIGlmICh0aXRsZUxvd2VyLmluY2x1ZGVzKCd0dXRvcmlhbCcpIHx8IHRpdGxlTG93ZXIuaW5jbHVkZXMoJ2hvdyB0bycpIHx8IFxuICAgICAgICB0aXRsZUxvd2VyLmluY2x1ZGVzKCdndWlkZScpIHx8IGNvbnRlbnRMb3dlci5pbmNsdWRlcygnc3RlcCBieSBzdGVwJykpIHtcbiAgICAgIHJldHVybiAndHV0b3JpYWwnO1xuICAgIH1cblxuICAgIC8vIE5ld3Mgc2l0ZXNcbiAgICBpZiAoZG9tYWluLmluY2x1ZGVzKCduZXdzJykgfHwgZG9tYWluLmluY2x1ZGVzKCdjbm4uY29tJykgfHwgZG9tYWluLmluY2x1ZGVzKCdiYmMuY29tJykgfHxcbiAgICAgICAgZG9tYWluLmluY2x1ZGVzKCd0ZWNoY3J1bmNoLmNvbScpIHx8IGRvbWFpbi5pbmNsdWRlcygncmV1dGVycy5jb20nKSkge1xuICAgICAgcmV0dXJuICduZXdzJztcbiAgICB9XG5cbiAgICAvLyBCbG9nIGluZGljYXRvcnNcbiAgICBpZiAoZG9tYWluLmluY2x1ZGVzKCdtZWRpdW0uY29tJykgfHwgZG9tYWluLmluY2x1ZGVzKCdibG9nJykgfHwgXG4gICAgICAgIHRpdGxlTG93ZXIuaW5jbHVkZXMoJ3Rob3VnaHRzIG9uJykgfHwgY29udGVudExvd2VyLmluY2x1ZGVzKCdwdWJsaXNoZWQnKSkge1xuICAgICAgcmV0dXJuICdibG9nJztcbiAgICB9XG5cbiAgICAvLyBSZXNlYXJjaCBwYXBlcnNcbiAgICBpZiAoZG9tYWluLmluY2x1ZGVzKCdhcnhpdi5vcmcnKSB8fCBkb21haW4uaW5jbHVkZXMoJ3NjaG9sYXIuZ29vZ2xlJykgfHxcbiAgICAgICAgdGl0bGVMb3dlci5pbmNsdWRlcygncmVzZWFyY2gnKSB8fCBjb250ZW50TG93ZXIuaW5jbHVkZXMoJ2Fic3RyYWN0JykpIHtcbiAgICAgIHJldHVybiAncmVzZWFyY2gnO1xuICAgIH1cblxuICAgIC8vIFRvb2xzIGFuZCBhcHBsaWNhdGlvbnNcbiAgICBpZiAoZG9tYWluLmluY2x1ZGVzKCdnaXRodWIuY29tJykgfHwgdGl0bGVMb3dlci5pbmNsdWRlcygndG9vbCcpIHx8IFxuICAgICAgICB0aXRsZUxvd2VyLmluY2x1ZGVzKCdhcHAnKSB8fCBjb250ZW50TG93ZXIuaW5jbHVkZXMoJ2Rvd25sb2FkJykpIHtcbiAgICAgIHJldHVybiAndG9vbCc7XG4gICAgfVxuXG4gICAgLy8gUmVmZXJlbmNlIG1hdGVyaWFsc1xuICAgIGlmICh0aXRsZUxvd2VyLmluY2x1ZGVzKCdyZWZlcmVuY2UnKSB8fCB0aXRsZUxvd2VyLmluY2x1ZGVzKCdjaGVhdCBzaGVldCcpIHx8XG4gICAgICAgIGNvbnRlbnRMb3dlci5pbmNsdWRlcygncXVpY2sgcmVmZXJlbmNlJykpIHtcbiAgICAgIHJldHVybiAncmVmZXJlbmNlJztcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHRvIGFydGljbGVcbiAgICByZXR1cm4gJ2FydGljbGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGludGVsbGlnZW50IHRhZyBzdWdnZXN0aW9ucyB1c2luZyBydWxlLWJhc2VkIGFuYWx5c2lzXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlUnVsZUJhc2VkVGFncyhmdWxsVGV4dDogc3RyaW5nLCBkb21haW46IHN0cmluZywgY29udGVudFR5cGU6IHN0cmluZyk6IEFJVGFnU3VnZ2VzdGlvbltdIHtcbiAgICBjb25zdCBzdWdnZXN0aW9uczogQUlUYWdTdWdnZXN0aW9uW10gPSBbXTtcblxuICAgIC8vIFRlY2hub2xvZ3kgdGFnc1xuICAgIGNvbnN0IHRlY2hLZXl3b3JkcyA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogWydqYXZhc2NyaXB0JywgJ2pzJywgJ25vZGUuanMnLCAncmVhY3QnLCAndnVlJywgJ2FuZ3VsYXInXSxcbiAgICAgICdweXRob24nOiBbJ3B5dGhvbicsICdkamFuZ28nLCAnZmxhc2snLCAncGFuZGFzJywgJ251bXB5J10sXG4gICAgICAnd2ViLWRldmVsb3BtZW50JzogWydodG1sJywgJ2NzcycsICdmcm9udGVuZCcsICdiYWNrZW5kJywgJ2Z1bGwtc3RhY2snXSxcbiAgICAgICdtYWNoaW5lLWxlYXJuaW5nJzogWydtbCcsICdhaScsICduZXVyYWwgbmV0d29yaycsICdkZWVwIGxlYXJuaW5nJywgJ3RlbnNvcmZsb3cnXSxcbiAgICAgICdkYXRhLXNjaWVuY2UnOiBbJ2RhdGEgc2NpZW5jZScsICdhbmFseXRpY3MnLCAndmlzdWFsaXphdGlvbicsICdzdGF0aXN0aWNzJ10sXG4gICAgICAnbW9iaWxlJzogWydhbmRyb2lkJywgJ2lvcycsICdyZWFjdCBuYXRpdmUnLCAnZmx1dHRlcicsICdtb2JpbGUgYXBwJ10sXG4gICAgICAnZGV2b3BzJzogWydkb2NrZXInLCAna3ViZXJuZXRlcycsICdhd3MnLCAnY2xvdWQnLCAnZGVwbG95bWVudCddLFxuICAgICAgJ2RhdGFiYXNlJzogWydzcWwnLCAncG9zdGdyZXNxbCcsICdtb25nb2RiJywgJ2RhdGFiYXNlIGRlc2lnbiddLFxuICAgICAgJ3NlY3VyaXR5JzogWydjeWJlcnNlY3VyaXR5JywgJ2VuY3J5cHRpb24nLCAndnVsbmVyYWJpbGl0eScsICdwZW5ldHJhdGlvbiB0ZXN0aW5nJ11cbiAgICB9O1xuXG4gICAgLy8gSW5kdXN0cnkvZG9tYWluIHRhZ3NcbiAgICBjb25zdCBkb21haW5UYWdzID0ge1xuICAgICAgJ2dpdGh1Yi5jb20nOiBbeyB0YWc6ICdnaXRodWInLCBjb25maWRlbmNlOiAwLjksIHJlYXNvbjogJ0dpdEh1YiByZXBvc2l0b3J5JyB9XSxcbiAgICAgICdzdGFja292ZXJmbG93LmNvbSc6IFt7IHRhZzogJ3Byb2dyYW1taW5nJywgY29uZmlkZW5jZTogMC44LCByZWFzb246ICdTdGFjayBPdmVyZmxvdyBjb250ZW50JyB9XSxcbiAgICAgICdtZWRpdW0uY29tJzogW3sgdGFnOiAnYmxvZycsIGNvbmZpZGVuY2U6IDAuNywgcmVhc29uOiAnTWVkaXVtIGFydGljbGUnIH1dLFxuICAgICAgJ3lvdXR1YmUuY29tJzogW3sgdGFnOiAndmlkZW8nLCBjb25maWRlbmNlOiAwLjksIHJlYXNvbjogJ1lvdVR1YmUgdmlkZW8nIH1dLFxuICAgICAgJ2xpbmtlZGluLmNvbSc6IFt7IHRhZzogJ2NhcmVlcicsIGNvbmZpZGVuY2U6IDAuNywgcmVhc29uOiAnTGlua2VkSW4gY29udGVudCcgfV1cbiAgICB9O1xuXG4gICAgLy8gQWRkIGRvbWFpbi1zcGVjaWZpYyB0YWdzXG4gICAgZm9yIChjb25zdCBbZG9tYWluUGF0dGVybiwgdGFnc10gb2YgT2JqZWN0LmVudHJpZXMoZG9tYWluVGFncykpIHtcbiAgICAgIGlmIChkb21haW4uaW5jbHVkZXMoZG9tYWluUGF0dGVybikpIHtcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCguLi50YWdzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgdGVjaG5vbG9neSB0YWdzIGJhc2VkIG9uIGNvbnRlbnQgYW5hbHlzaXNcbiAgICBmb3IgKGNvbnN0IFt0YWcsIGtleXdvcmRzXSBvZiBPYmplY3QuZW50cmllcyh0ZWNoS2V5d29yZHMpKSB7XG4gICAgICBjb25zdCBtYXRjaGVzID0ga2V5d29yZHMuZmlsdGVyKGtleXdvcmQgPT4gZnVsbFRleHQuaW5jbHVkZXMoa2V5d29yZCkpLmxlbmd0aDtcbiAgICAgIGlmIChtYXRjaGVzID4gMCkge1xuICAgICAgICBjb25zdCBjb25maWRlbmNlID0gTWF0aC5taW4oMC45LCAwLjQgKyAobWF0Y2hlcyAqIDAuMSkpO1xuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgICB0YWcsXG4gICAgICAgICAgY29uZmlkZW5jZSxcbiAgICAgICAgICByZWFzb246IGBGb3VuZCAke21hdGNoZXN9IHJlbGF0ZWQga2V5d29yZChzKWBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29udGVudC10eXBlIHNwZWNpZmljIHRhZ3NcbiAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgIHRhZzogY29udGVudFR5cGUgfHwgJ2dlbmVyYWwnLFxuICAgICAgY29uZmlkZW5jZTogMC42LFxuICAgICAgcmVhc29uOiBgRGV0ZWN0ZWQgYXMgJHtjb250ZW50VHlwZX0gY29udGVudGBcbiAgICB9KTtcblxuICAgIC8vIExlYXJuaW5nIGFuZCBza2lsbCBsZXZlbCB0YWdzXG4gICAgaWYgKGZ1bGxUZXh0LmluY2x1ZGVzKCdiZWdpbm5lcicpIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCdnZXR0aW5nIHN0YXJ0ZWQnKSkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaCh7IHRhZzogJ2JlZ2lubmVyJywgY29uZmlkZW5jZTogMC43LCByZWFzb246ICdCZWdpbm5lci1mcmllbmRseSBjb250ZW50JyB9KTtcbiAgICB9XG4gICAgaWYgKGZ1bGxUZXh0LmluY2x1ZGVzKCdhZHZhbmNlZCcpIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCdleHBlcnQnKSkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaCh7IHRhZzogJ2FkdmFuY2VkJywgY29uZmlkZW5jZTogMC43LCByZWFzb246ICdBZHZhbmNlZCBjb250ZW50JyB9KTtcbiAgICB9XG5cbiAgICAvLyBCdXNpbmVzcyBhbmQgcHJvZHVjdGl2aXR5IHRhZ3NcbiAgICBjb25zdCBidXNpbmVzc0tleXdvcmRzID0gWydwcm9kdWN0aXZpdHknLCAnYnVzaW5lc3MnLCAnc3RhcnR1cCcsICdtYXJrZXRpbmcnLCAnc2FsZXMnLCAnZmluYW5jZSddO1xuICAgIGZvciAoY29uc3Qga2V5d29yZCBvZiBidXNpbmVzc0tleXdvcmRzKSB7XG4gICAgICBpZiAoZnVsbFRleHQuaW5jbHVkZXMoa2V5d29yZCkpIHtcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCh7XG4gICAgICAgICAgdGFnOiBrZXl3b3JkLFxuICAgICAgICAgIGNvbmZpZGVuY2U6IDAuNixcbiAgICAgICAgICByZWFzb246IGBDb250ZW50IHJlbGF0ZWQgdG8gJHtrZXl3b3JkfWBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXMgYW5kIHNvcnQgYnkgY29uZmlkZW5jZVxuICAgIGNvbnN0IHVuaXF1ZVN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbnMuZmlsdGVyKChpdGVtLCBpbmRleCwgYXJyKSA9PiBcbiAgICAgIGFyci5maW5kSW5kZXgodCA9PiB0LnRhZyA9PT0gaXRlbS50YWcpID09PSBpbmRleFxuICAgICk7XG5cbiAgICByZXR1cm4gdW5pcXVlU3VnZ2VzdGlvbnNcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmNvbmZpZGVuY2UgLSBhLmNvbmZpZGVuY2UpXG4gICAgICAuc2xpY2UoMCwgOCk7IC8vIExpbWl0IHRvIHRvcCA4IHN1Z2dlc3Rpb25zXG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgY2F0ZWdvcnkgc3VnZ2VzdGlvbnNcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVSdWxlQmFzZWRDYXRlZ29yaWVzKGZ1bGxUZXh0OiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nLCBjb250ZW50VHlwZTogc3RyaW5nKTogQUlDYXRlZ29yeVN1Z2dlc3Rpb25bXSB7XG4gICAgY29uc3Qgc3VnZ2VzdGlvbnM6IEFJQ2F0ZWdvcnlTdWdnZXN0aW9uW10gPSBbXTtcblxuICAgIC8vIFdvcmstcmVsYXRlZCBrZXl3b3Jkc1xuICAgIGlmIChmdWxsVGV4dC5pbmNsdWRlcygnd29yaycpIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCdqb2InKSB8fCBmdWxsVGV4dC5pbmNsdWRlcygnY2FyZWVyJykgfHxcbiAgICAgICAgZnVsbFRleHQuaW5jbHVkZXMoJ3Byb2Zlc3Npb25hbCcpIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCdidXNpbmVzcycpKSB7XG4gICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgY2F0ZWdvcnk6ICd3b3JrJyxcbiAgICAgICAgY29uZmlkZW5jZTogMC44LFxuICAgICAgICByZWFzb246ICdDb250YWlucyB3b3JrLXJlbGF0ZWQgY29udGVudCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIExlYXJuaW5nIGFuZCBlZHVjYXRpb25cbiAgICBpZiAoY29udGVudFR5cGUgPT09ICd0dXRvcmlhbCcgfHwgY29udGVudFR5cGUgPT09ICdkb2N1bWVudGF0aW9uJyB8fCBcbiAgICAgICAgZnVsbFRleHQuaW5jbHVkZXMoJ2xlYXJuJykgfHwgZnVsbFRleHQuaW5jbHVkZXMoJ2VkdWNhdGlvbicpIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCdjb3Vyc2UnKSkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaCh7XG4gICAgICAgIGNhdGVnb3J5OiAnbGVhcm5pbmcnLFxuICAgICAgICBjb25maWRlbmNlOiAwLjksXG4gICAgICAgIHJlYXNvbjogJ0VkdWNhdGlvbmFsIGNvbnRlbnQgZGV0ZWN0ZWQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBQZXJzb25hbCBpbnRlcmVzdHNcbiAgICBpZiAoZnVsbFRleHQuaW5jbHVkZXMoJ2hvYmJ5JykgfHwgZnVsbFRleHQuaW5jbHVkZXMoJ3BlcnNvbmFsJykgfHwgXG4gICAgICAgIGZ1bGxUZXh0LmluY2x1ZGVzKCdsaWZlc3R5bGUnKSB8fCBmdWxsVGV4dC5pbmNsdWRlcygnZW50ZXJ0YWlubWVudCcpKSB7XG4gICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgY2F0ZWdvcnk6ICdwZXJzb25hbCcsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuNyxcbiAgICAgICAgcmVhc29uOiAnUGVyc29uYWwgaW50ZXJlc3QgY29udGVudCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRlY2hub2xvZ3kgYW5kIGRldmVsb3BtZW50XG4gICAgaWYgKGRvbWFpbi5pbmNsdWRlcygnZ2l0aHViLmNvbScpIHx8IGRvbWFpbi5pbmNsdWRlcygnc3RhY2tvdmVyZmxvdy5jb20nKSB8fFxuICAgICAgICBmdWxsVGV4dC5pbmNsdWRlcygncHJvZ3JhbW1pbmcnKSB8fCBmdWxsVGV4dC5pbmNsdWRlcygnZGV2ZWxvcG1lbnQnKSkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaCh7XG4gICAgICAgIGNhdGVnb3J5OiAnd29yaycsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuOCxcbiAgICAgICAgcmVhc29uOiAnVGVjaG5pY2FsL2RldmVsb3BtZW50IGNvbnRlbnQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBOZXdzIGFuZCBjdXJyZW50IGV2ZW50c1xuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ25ld3MnIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCdicmVha2luZycpIHx8IGZ1bGxUZXh0LmluY2x1ZGVzKCd1cGRhdGUnKSkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaCh7XG4gICAgICAgIGNhdGVnb3J5OiAnZ2VuZXJhbCcsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuNyxcbiAgICAgICAgcmVhc29uOiAnTmV3cyBvciBjdXJyZW50IGV2ZW50cydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgY2F0ZWdvcnkgaWYgbm8gc3BlY2lmaWMgbWF0Y2hlc1xuICAgIGlmIChzdWdnZXN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICBjYXRlZ29yeTogJ2dlbmVyYWwnLFxuICAgICAgICBjb25maWRlbmNlOiAwLjUsXG4gICAgICAgIHJlYXNvbjogJ0dlbmVyYWwgY29udGVudCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzdWdnZXN0aW9ucy5zb3J0KChhLCBiKSA9PiBiLmNvbmZpZGVuY2UgLSBhLmNvbmZpZGVuY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3QgbWFpbiB0b3BpY3MgZnJvbSBjb250ZW50XG4gICAqL1xuICBwcml2YXRlIGV4dHJhY3RUb3BpY3MoZnVsbFRleHQ6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBjb21tb25Ub3BpY3MgPSBbXG4gICAgICAnYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UnLCAnbWFjaGluZSBsZWFybmluZycsICd3ZWIgZGV2ZWxvcG1lbnQnLCAnbW9iaWxlIGRldmVsb3BtZW50JyxcbiAgICAgICdkYXRhIHNjaWVuY2UnLCAnY3liZXJzZWN1cml0eScsICdjbG91ZCBjb21wdXRpbmcnLCAnYmxvY2tjaGFpbicsICdjcnlwdG9jdXJyZW5jeScsXG4gICAgICAnc3RhcnR1cCcsICdwcm9kdWN0aXZpdHknLCAnbGVhZGVyc2hpcCcsICdkZXNpZ24nLCAnbWFya2V0aW5nJywgJ3NhbGVzJyxcbiAgICAgICdwcm9ncmFtbWluZycsICdzb2Z0d2FyZSBlbmdpbmVlcmluZycsICdkZXZvcHMnLCAnZGF0YWJhc2UnLCAnZnJvbnRlbmQnLFxuICAgICAgJ2JhY2tlbmQnLCAnZnVsbC1zdGFjaycsICdhcGknLCAnbWljcm9zZXJ2aWNlcycsICdhcmNoaXRlY3R1cmUnXG4gICAgXTtcblxuICAgIHJldHVybiBjb21tb25Ub3BpY3MuZmlsdGVyKHRvcGljID0+IGZ1bGxUZXh0LmluY2x1ZGVzKHRvcGljKSkuc2xpY2UoMCwgNSk7XG4gIH1cblxuICAvKipcbiAgICogRXN0aW1hdGUgY29udGVudCBjb21wbGV4aXR5XG4gICAqL1xuICBwcml2YXRlIGVzdGltYXRlQ29tcGxleGl0eShjb250ZW50OiBzdHJpbmcpOiAnYmVnaW5uZXInIHwgJ2ludGVybWVkaWF0ZScgfCAnYWR2YW5jZWQnIHtcbiAgICBjb25zdCB0ZWNoVGVybXMgPSBbJ2FsZ29yaXRobScsICdhcmNoaXRlY3R1cmUnLCAnb3B0aW1pemF0aW9uJywgJ3NjYWxhYmlsaXR5JywgJ3BlcmZvcm1hbmNlJ107XG4gICAgY29uc3QgYmVnaW5uZXJUZXJtcyA9IFsnaW50cm9kdWN0aW9uJywgJ2Jhc2ljcycsICdnZXR0aW5nIHN0YXJ0ZWQnLCAnYmVnaW5uZXInLCAnc2ltcGxlJ107XG4gICAgY29uc3QgYWR2YW5jZWRUZXJtcyA9IFsnYWR2YW5jZWQnLCAnZXhwZXJ0JywgJ2NvbXBsZXgnLCAnc29waGlzdGljYXRlZCcsICdlbnRlcnByaXNlJ107XG5cbiAgICBjb25zdCBjb250ZW50TG93ZXIgPSBjb250ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgdGVjaFNjb3JlID0gdGVjaFRlcm1zLmZpbHRlcih0ZXJtID0+IGNvbnRlbnRMb3dlci5pbmNsdWRlcyh0ZXJtKSkubGVuZ3RoO1xuICAgIGNvbnN0IGJlZ2lubmVyU2NvcmUgPSBiZWdpbm5lclRlcm1zLmZpbHRlcih0ZXJtID0+IGNvbnRlbnRMb3dlci5pbmNsdWRlcyh0ZXJtKSkubGVuZ3RoO1xuICAgIGNvbnN0IGFkdmFuY2VkU2NvcmUgPSBhZHZhbmNlZFRlcm1zLmZpbHRlcih0ZXJtID0+IGNvbnRlbnRMb3dlci5pbmNsdWRlcyh0ZXJtKSkubGVuZ3RoO1xuXG4gICAgaWYgKGJlZ2lubmVyU2NvcmUgPiAwIHx8IHRlY2hTY29yZSA9PT0gMCkgcmV0dXJuICdiZWdpbm5lcic7XG4gICAgaWYgKGFkdmFuY2VkU2NvcmUgPiAxIHx8IHRlY2hTY29yZSA+IDMpIHJldHVybiAnYWR2YW5jZWQnO1xuICAgIHJldHVybiAnaW50ZXJtZWRpYXRlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBFc3RpbWF0ZSByZWFkaW5nIHRpbWUgaW4gbWludXRlc1xuICAgKi9cbiAgcHJpdmF0ZSBlc3RpbWF0ZVJlYWRpbmdUaW1lKGNvbnRlbnQ6IHN0cmluZyk6IG51bWJlciB7XG4gICAgY29uc3Qgd29yZHNQZXJNaW51dGUgPSAyMDA7XG4gICAgY29uc3Qgd29yZENvdW50ID0gY29udGVudC5zcGxpdCgvXFxzKy8pLmxlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5tYXgoMSwgTWF0aC5yb3VuZCh3b3JkQ291bnQgLyB3b3Jkc1Blck1pbnV0ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuaGFuY2VkIE9wZW5BSSBjYWxsIGZvciBjb21wcmVoZW5zaXZlIGFuYWx5c2lzXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGNhbGxPcGVuQUlGb3JBbmFseXNpcyhjb250ZW50OiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogUHJvbWlzZTxBSUFuYWx5c2lzUmVzdWx0PiB7XG4gICAgY29uc3QgcHJvbXB0ID0gYEFuYWx5emUgdGhpcyB3ZWIgY29udGVudCBhbmQgcHJvdmlkZSBhIEpTT04gcmVzcG9uc2Ugd2l0aCB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZTpcblxue1xuICBcInN1bW1hcnlcIjogXCIxLTIgc2VudGVuY2Ugc3VtbWFyeVwiLFxuICBcInRhZ1N1Z2dlc3Rpb25zXCI6IFtcbiAgICB7XCJ0YWdcIjogXCJ0YWctbmFtZVwiLCBcImNvbmZpZGVuY2VcIjogMC44LCBcInJlYXNvblwiOiBcIndoeSB0aGlzIHRhZyBmaXRzXCJ9XG4gIF0sXG4gIFwiY2F0ZWdvcnlTdWdnZXN0aW9uc1wiOiBbXG4gICAge1wiY2F0ZWdvcnlcIjogXCJ3b3JrfGxlYXJuaW5nfHBlcnNvbmFsfGdlbmVyYWxcIiwgXCJjb25maWRlbmNlXCI6IDAuOSwgXCJyZWFzb25cIjogXCJleHBsYW5hdGlvblwifVxuICBdLFxuICBcImNvbnRlbnRUeXBlXCI6IFwiYXJ0aWNsZXx0dXRvcmlhbHxkb2N1bWVudGF0aW9ufHZpZGVvfHRvb2x8cmVmZXJlbmNlfGJsb2d8bmV3c3xyZXNlYXJjaHxvdGhlclwiLFxuICBcInRvcGljc1wiOiBbXCJtYWluXCIsIFwidG9waWNzXCIsIFwiY292ZXJlZFwiXSxcbiAgXCJjb21wbGV4aXR5XCI6IFwiYmVnaW5uZXJ8aW50ZXJtZWRpYXRlfGFkdmFuY2VkXCIsXG4gIFwicmVhZGluZ1RpbWVcIjogNVxufVxuXG5Db250ZW50IHRvIGFuYWx5emU6XG5UaXRsZTogJHt0aXRsZX1cblVSTDogJHt1cmx9XG5Db250ZW50OiAke2NvbnRlbnQuc3Vic3RyaW5nKDAsIDIwMDApfS4uLlxuXG5Gb2N1cyBvbjpcbi0gUmVsZXZhbnQsIHNwZWNpZmljIHRhZ3MgKHRlY2hub2xvZ3ksIHNraWxscywgZG9tYWlucylcbi0gQXBwcm9wcmlhdGUgY2F0ZWdvcnkgKHdvcmsvbGVhcm5pbmcvcGVyc29uYWwvZ2VuZXJhbClcbi0gQ29udGVudCB0eXBlIGFuZCBjb21wbGV4aXR5XG4tIE1haW4gdG9waWNzIGFuZCB0aGVtZXNgO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuYXBpS2V5fWAsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBtb2RlbDogdGhpcy5tb2RlbCxcbiAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgICBjb250ZW50OiBwcm9tcHRcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG1heF90b2tlbnM6IDUwMCxcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuM1xuICAgICAgfSlcbiAgICB9KTtcblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgY29uc3QgYWlSZXNwb25zZSA9IGRhdGEuY2hvaWNlc1swXT8ubWVzc2FnZT8uY29udGVudDtcblxuICAgIGlmIChhaVJlc3BvbnNlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGFpUmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1bW1hcnk6IHBhcnNlZC5zdW1tYXJ5LFxuICAgICAgICAgIHRhZ1N1Z2dlc3Rpb25zOiBwYXJzZWQudGFnU3VnZ2VzdGlvbnMgfHwgW10sXG4gICAgICAgICAgY2F0ZWdvcnlTdWdnZXN0aW9uczogcGFyc2VkLmNhdGVnb3J5U3VnZ2VzdGlvbnMgfHwgW10sXG4gICAgICAgICAgY29udGVudFR5cGU6IHBhcnNlZC5jb250ZW50VHlwZSxcbiAgICAgICAgICB0b3BpY3M6IHBhcnNlZC50b3BpY3MgfHwgW10sXG4gICAgICAgICAgY29tcGxleGl0eTogcGFyc2VkLmNvbXBsZXhpdHksXG4gICAgICAgICAgcmVhZGluZ1RpbWU6IHBhcnNlZC5yZWFkaW5nVGltZVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHBhcnNlIEFJIHJlc3BvbnNlOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayB0byBydWxlLWJhc2VkIGFuYWx5c2lzXG4gICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVSdWxlQmFzZWRBbmFseXNpcyhjb250ZW50LCB0aXRsZSwgdXJsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcmlnaW5hbCBPcGVuQUkgY2FsbCBmb3Igc3VtbWFyeSBvbmx5IChtYWludGFpbmluZyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5KVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBjYWxsT3BlbkFJKGNvbnRlbnQ6IHN0cmluZywgdGl0bGU6IHN0cmluZywgdXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHByb21wdCA9IGBTdW1tYXJpemUgdGhpcyB3ZWIgcGFnZSBpbiAxLTIgc2VudGVuY2VzOlxuVGl0bGU6ICR7dGl0bGV9XG5VUkw6ICR7dXJsfVxuQ29udGVudDogJHtjb250ZW50LnN1YnN0cmluZygwLCAxMDAwKX0uLi5gO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuYXBpS2V5fWAsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBtb2RlbDogdGhpcy5tb2RlbCxcbiAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgICBjb250ZW50OiBwcm9tcHRcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG1heF90b2tlbnM6IDEwMCxcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuM1xuICAgICAgfSlcbiAgICB9KTtcblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIGRhdGEuY2hvaWNlc1swXT8ubWVzc2FnZT8uY29udGVudCB8fCB0aGlzLmdlbmVyYXRlUGxhY2Vob2xkZXJTdW1tYXJ5KGNvbnRlbnQsIHRpdGxlLCB1cmwpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVBsYWNlaG9sZGVyU3VtbWFyeShjb250ZW50OiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBkb21haW4gPSBuZXcgVVJMKHVybCkuaG9zdG5hbWU7XG4gICAgY29uc3QgY29udGVudExlbmd0aCA9IGNvbnRlbnQubGVuZ3RoO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIGEgc2ltcGxlIHJ1bGUtYmFzZWQgc3VtbWFyeVxuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ2dpdGh1Yi5jb20nKSkge1xuICAgICAgcmV0dXJuIGBHaXRIdWIgcmVwb3NpdG9yeSBvciBwcm9qZWN0IHBhZ2U6ICR7dGl0bGV9YDtcbiAgICB9IGVsc2UgaWYgKGRvbWFpbi5pbmNsdWRlcygnc3RhY2tvdmVyZmxvdy5jb20nKSkge1xuICAgICAgcmV0dXJuIGBTdGFjayBPdmVyZmxvdyBkaXNjdXNzaW9uIGFib3V0IHByb2dyYW1taW5nIG9yIHRlY2huaWNhbCB0b3BpY3NgO1xuICAgIH0gZWxzZSBpZiAoZG9tYWluLmluY2x1ZGVzKCdtZWRpdW0uY29tJykgfHwgZG9tYWluLmluY2x1ZGVzKCdibG9nJykpIHtcbiAgICAgIHJldHVybiBgQmxvZyBhcnRpY2xlOiAke3RpdGxlLnN1YnN0cmluZygwLCA1MCl9Li4uYDtcbiAgICB9IGVsc2UgaWYgKGRvbWFpbi5pbmNsdWRlcygneW91dHViZS5jb20nKSkge1xuICAgICAgcmV0dXJuIGBWaWRlbyBjb250ZW50OiAke3RpdGxlfWA7XG4gICAgfSBlbHNlIGlmIChkb21haW4uaW5jbHVkZXMoJ25ld3MnKSB8fCBkb21haW4uaW5jbHVkZXMoJ2FydGljbGUnKSkge1xuICAgICAgcmV0dXJuIGBOZXdzIGFydGljbGUgZnJvbSAke2RvbWFpbn1gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYFdlYiBwYWdlIGZyb20gJHtkb21haW59ICgke01hdGgucm91bmQoY29udGVudExlbmd0aCAvIDEwMCl9IHBhcmFncmFwaHMpYDtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVBcGlLZXkoYXBpS2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBzbWFydCBjb2xsZWN0aW9uIHF1ZXJpZXMgYmFzZWQgb24gdXNlcidzIGxpbmsgcGF0dGVybnNcbiAgICovXG4gIGFzeW5jIGdlbmVyYXRlU21hcnRDb2xsZWN0aW9uU3VnZ2VzdGlvbnMobGlua3M6IFNhdmVkTGlua1tdKTogUHJvbWlzZTxTbWFydENvbGxlY3Rpb25bXT4ge1xuICAgIC8vIEFuYWx5emUgdXNlcidzIGxpbmsgcGF0dGVybnMgdG8gc3VnZ2VzdCBzbWFydCBjb2xsZWN0aW9uc1xuICAgIGNvbnN0IGRvbWFpbkFuYWx5c2lzID0gdGhpcy5hbmFseXplRG9tYWlucyhsaW5rcyk7XG4gICAgY29uc3QgdG9waWNBbmFseXNpcyA9IHRoaXMuYW5hbHl6ZVRvcGljcyhsaW5rcyk7XG4gICAgY29uc3QgdGltZUFuYWx5c2lzID0gdGhpcy5hbmFseXplVGltZVBhdHRlcm5zKGxpbmtzKTtcbiAgICBcbiAgICBjb25zdCBzdWdnZXN0aW9uczogU21hcnRDb2xsZWN0aW9uW10gPSBbXTtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgLy8gRG9tYWluLWJhc2VkIGNvbGxlY3Rpb25zXG4gICAgZm9yIChjb25zdCBbZG9tYWluLCBjb3VudF0gb2YgT2JqZWN0LmVudHJpZXMoZG9tYWluQW5hbHlzaXMpKSB7XG4gICAgICBpZiAoY291bnQgPj0gMykgeyAvLyBNaW5pbXVtIHRocmVzaG9sZCBmb3Igc3VnZ2VzdGluZyBkb21haW4gY29sbGVjdGlvblxuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgICBpZDogYGRvbWFpbi0ke2RvbWFpbi5yZXBsYWNlKC9cXC4vZywgJy0nKX1gLFxuICAgICAgICAgIG5hbWU6IGDwn5OMICR7dGhpcy5nZXREb21haW5EaXNwbGF5TmFtZShkb21haW4pfWAsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBMaW5rcyBmcm9tICR7ZG9tYWlufSAoJHtjb3VudH0gbGlua3MpYCxcbiAgICAgICAgICBxdWVyeTogYGRvbWFpbiBMSUtFICclJHtkb21haW59JSdgLFxuICAgICAgICAgIGlzU3lzdGVtOiB0cnVlLFxuICAgICAgICAgIGF1dG9VcGRhdGU6IHRydWUsXG4gICAgICAgICAgaWNvbjogdGhpcy5nZXREb21haW5JY29uKGRvbWFpbiksXG4gICAgICAgICAgY29sb3I6IHRoaXMuZ2V0RG9tYWluQ29sb3IoZG9tYWluKSxcbiAgICAgICAgICBmaWx0ZXJzOiB7XG4gICAgICAgICAgICBkb21haW5zOiBbZG9tYWluXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICAgICAgdXBkYXRlZEF0OiBub3dcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVG9waWMtYmFzZWQgY29sbGVjdGlvbnNcbiAgICBmb3IgKGNvbnN0IFt0b3BpYywgY291bnRdIG9mIE9iamVjdC5lbnRyaWVzKHRvcGljQW5hbHlzaXMpKSB7XG4gICAgICBpZiAoY291bnQgPj0gMikge1xuICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgICBpZDogYHRvcGljLSR7dG9waWMudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csICctJyl9YCxcbiAgICAgICAgICBuYW1lOiBg8J+OryAke3RvcGljfWAsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBDb250ZW50IHJlbGF0ZWQgdG8gJHt0b3BpYy50b0xvd2VyQ2FzZSgpfSAoJHtjb3VudH0gbGlua3MpYCxcbiAgICAgICAgICBxdWVyeTogYHRpdGxlIElMSUtFICclJHt0b3BpY30lJyBPUiB1c2VyX25vdGUgSUxJS0UgJyUke3RvcGljfSUnIE9SIGFpX3N1bW1hcnkgSUxJS0UgJyUke3RvcGljfSUnYCxcbiAgICAgICAgICBpc1N5c3RlbTogdHJ1ZSxcbiAgICAgICAgICBhdXRvVXBkYXRlOiB0cnVlLFxuICAgICAgICAgIGljb246IHRoaXMuZ2V0VG9waWNJY29uKHRvcGljKSxcbiAgICAgICAgICBjb2xvcjogdGhpcy5nZXRUb3BpY0NvbG9yKHRvcGljKSxcbiAgICAgICAgICBjcmVhdGVkQXQ6IG5vdyxcbiAgICAgICAgICB1cGRhdGVkQXQ6IG5vd1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaW1lLWJhc2VkIGNvbGxlY3Rpb25zXG4gICAgaWYgKHRpbWVBbmFseXNpcy5yZWNlbnRBY3Rpdml0eSA+IDUpIHtcbiAgICAgIHN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICBpZDogJ3JlY2VudC1hY3Rpdml0eScsXG4gICAgICAgIG5hbWU6ICfwn5SlIFJlY2VudCBBY3Rpdml0eScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTGlua3Mgc2F2ZWQgaW4gdGhlIGxhc3QgMyBkYXlzJyxcbiAgICAgICAgcXVlcnk6ICdjcmVhdGVkX2F0ID49IG5vdygpIC0gaW50ZXJ2YWwgXFwnMyBkYXlzXFwnJyxcbiAgICAgICAgaXNTeXN0ZW06IHRydWUsXG4gICAgICAgIGF1dG9VcGRhdGU6IHRydWUsXG4gICAgICAgIGljb246ICfwn5SlJyxcbiAgICAgICAgY29sb3I6ICcjZWY0NDQ0JyxcbiAgICAgICAgZmlsdGVyczoge1xuICAgICAgICAgIGRhdGVSYW5nZToge1xuICAgICAgICAgICAgc3RhcnQ6IG5ldyBEYXRlKERhdGUubm93KCkgLSAzICogMjQgKiA2MCAqIDYwICogMTAwMClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgICB1cGRhdGVkQXQ6IG5vd1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Z2dlc3Rpb25zLnNsaWNlKDAsIDgpOyAvLyBMaW1pdCBzdWdnZXN0aW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIEFuYWx5emUgZG9tYWlucyBpbiB1c2VyJ3MgbGlua3NcbiAgICovXG4gIHByaXZhdGUgYW5hbHl6ZURvbWFpbnMobGlua3M6IFNhdmVkTGlua1tdKTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XG4gICAgY29uc3QgZG9tYWluQ291bnRzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gICAgXG4gICAgbGlua3MuZm9yRWFjaChsaW5rID0+IHtcbiAgICAgIGNvbnN0IGRvbWFpbiA9IGxpbmsuZG9tYWluO1xuICAgICAgZG9tYWluQ291bnRzW2RvbWFpbl0gPSAoZG9tYWluQ291bnRzW2RvbWFpbl0gfHwgMCkgKyAxO1xuICAgIH0pO1xuXG4gICAgLy8gU29ydCBieSBjb3VudCBhbmQgcmV0dXJuIHRvcCBkb21haW5zXG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgIE9iamVjdC5lbnRyaWVzKGRvbWFpbkNvdW50cylcbiAgICAgICAgLnNvcnQoKFssYV0sIFssYl0pID0+IGIgLSBhKVxuICAgICAgICAuc2xpY2UoMCwgMTApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIHRvcGljcyBpbiB1c2VyJ3MgbGlua3NcbiAgICovXG4gIHByaXZhdGUgYW5hbHl6ZVRvcGljcyhsaW5rczogU2F2ZWRMaW5rW10pOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHtcbiAgICBjb25zdCB0b3BpY0NvdW50czogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuICAgIGNvbnN0IGNvbW1vblRvcGljcyA9IFtcbiAgICAgICdSZWFjdCcsICdKYXZhU2NyaXB0JywgJ1R5cGVTY3JpcHQnLCAnUHl0aG9uJywgJ05vZGUuanMnLCAnQVBJJywgJ0RhdGFiYXNlJyxcbiAgICAgICdNYWNoaW5lIExlYXJuaW5nJywgJ0FJJywgJ0Rlc2lnbicsICdVSS9VWCcsICdDU1MnLCAnSFRNTCcsICdCYWNrZW5kJyxcbiAgICAgICdGcm9udGVuZCcsICdEZXZPcHMnLCAnQ2xvdWQnLCAnQVdTJywgJ0RvY2tlcicsICdLdWJlcm5ldGVzJywgJ0dpdCcsXG4gICAgICAnVGVzdGluZycsICdTZWN1cml0eScsICdQZXJmb3JtYW5jZScsICdNb2JpbGUnLCAnaU9TJywgJ0FuZHJvaWQnLFxuICAgICAgJ1R1dG9yaWFsJywgJ0d1aWRlJywgJ0RvY3VtZW50YXRpb24nLCAnVG9vbCcsICdGcmFtZXdvcmsnLCAnTGlicmFyeSdcbiAgICBdO1xuXG4gICAgbGlua3MuZm9yRWFjaChsaW5rID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBgJHtsaW5rLnRpdGxlfSAke2xpbmsudXNlck5vdGV9ICR7bGluay5haVN1bW1hcnkgfHwgJyd9YC50b0xvd2VyQ2FzZSgpO1xuICAgICAgXG4gICAgICBjb21tb25Ub3BpY3MuZm9yRWFjaCh0b3BpYyA9PiB7XG4gICAgICAgIGlmIChjb250ZW50LmluY2x1ZGVzKHRvcGljLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgdG9waWNDb3VudHNbdG9waWNdID0gKHRvcGljQ291bnRzW3RvcGljXSB8fCAwKSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgIE9iamVjdC5lbnRyaWVzKHRvcGljQ291bnRzKVxuICAgICAgICAuc29ydCgoWyxhXSwgWyxiXSkgPT4gYiAtIGEpXG4gICAgICAgIC5zbGljZSgwLCA4KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQW5hbHl6ZSB0aW1lIHBhdHRlcm5zIGluIHVzZXIncyBsaW5rc1xuICAgKi9cbiAgcHJpdmF0ZSBhbmFseXplVGltZVBhdHRlcm5zKGxpbmtzOiBTYXZlZExpbmtbXSk6IHsgcmVjZW50QWN0aXZpdHk6IG51bWJlcjsgd2Vla2x5UGF0dGVybjogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB9IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHRocmVlRGF5c0FnbyA9IG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgLSAzICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgXG4gICAgY29uc3QgcmVjZW50QWN0aXZpdHkgPSBsaW5rcy5maWx0ZXIobGluayA9PiBsaW5rLmNyZWF0ZWRBdCA+PSB0aHJlZURheXNBZ28pLmxlbmd0aDtcbiAgICBcbiAgICBjb25zdCB3ZWVrbHlQYXR0ZXJuOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gICAgbGlua3MuZm9yRWFjaChsaW5rID0+IHtcbiAgICAgIGNvbnN0IGRheU9mV2VlayA9IGxpbmsuY3JlYXRlZEF0LnRvTG9jYWxlRGF0ZVN0cmluZygnZW4tVVMnLCB7IHdlZWtkYXk6ICdsb25nJyB9KTtcbiAgICAgIHdlZWtseVBhdHRlcm5bZGF5T2ZXZWVrXSA9ICh3ZWVrbHlQYXR0ZXJuW2RheU9mV2Vla10gfHwgMCkgKyAxO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgcmVjZW50QWN0aXZpdHksIHdlZWtseVBhdHRlcm4gfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGlzcGxheSBuYW1lIGZvciBkb21haW5cbiAgICovXG4gIHByaXZhdGUgZ2V0RG9tYWluRGlzcGxheU5hbWUoZG9tYWluOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRpc3BsYXlOYW1lczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICdnaXRodWIuY29tJzogJ0dpdEh1YicsXG4gICAgICAnc3RhY2tvdmVyZmxvdy5jb20nOiAnU3RhY2sgT3ZlcmZsb3cnLFxuICAgICAgJ21lZGl1bS5jb20nOiAnTWVkaXVtJyxcbiAgICAgICd5b3V0dWJlLmNvbSc6ICdZb3VUdWJlJyxcbiAgICAgICd0d2l0dGVyLmNvbSc6ICdUd2l0dGVyJyxcbiAgICAgICdsaW5rZWRpbi5jb20nOiAnTGlua2VkSW4nLFxuICAgICAgJ3JlZGRpdC5jb20nOiAnUmVkZGl0JyxcbiAgICAgICdkZXYudG8nOiAnRGV2LnRvJyxcbiAgICAgICdoYXNobm9kZS5jb20nOiAnSGFzaG5vZGUnLFxuICAgICAgJ2RvY3MuZ29vZ2xlLmNvbSc6ICdHb29nbGUgRG9jcydcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBkaXNwbGF5TmFtZXNbZG9tYWluXSB8fCBkb21haW4ucmVwbGFjZSgnd3d3LicsICcnKS5zcGxpdCgnLicpWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBpY29uIGZvciBkb21haW5cbiAgICovXG4gIHByaXZhdGUgZ2V0RG9tYWluSWNvbihkb21haW46IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgaWNvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnZ2l0aHViLmNvbSc6ICfirZAnLFxuICAgICAgJ3N0YWNrb3ZlcmZsb3cuY29tJzogJ/CfkqwnLFxuICAgICAgJ21lZGl1bS5jb20nOiAn4pyN77iPJyxcbiAgICAgICd5b3V0dWJlLmNvbSc6ICfwn5O6JyxcbiAgICAgICd0d2l0dGVyLmNvbSc6ICfwn5CmJyxcbiAgICAgICdsaW5rZWRpbi5jb20nOiAn8J+SvCcsXG4gICAgICAncmVkZGl0LmNvbSc6ICfwn6SWJyxcbiAgICAgICdkZXYudG8nOiAn8J+RqOKAjfCfkrsnLFxuICAgICAgJ2hhc2hub2RlLmNvbSc6ICfwn5OdJyxcbiAgICAgICdkb2NzLmdvb2dsZS5jb20nOiAn8J+ThCdcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBpY29uc1tkb21haW5dIHx8ICfwn4yQJztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY29sb3IgZm9yIGRvbWFpblxuICAgKi9cbiAgcHJpdmF0ZSBnZXREb21haW5Db2xvcihkb21haW46IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgY29sb3JzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgJ2dpdGh1Yi5jb20nOiAnIzI0MjkyZScsXG4gICAgICAnc3RhY2tvdmVyZmxvdy5jb20nOiAnI2Y0ODAyNCcsXG4gICAgICAnbWVkaXVtLmNvbSc6ICcjMDBhYjZjJyxcbiAgICAgICd5b3V0dWJlLmNvbSc6ICcjZmYwMDAwJyxcbiAgICAgICd0d2l0dGVyLmNvbSc6ICcjMWRhMWYyJyxcbiAgICAgICdsaW5rZWRpbi5jb20nOiAnIzAwNzdiNScsXG4gICAgICAncmVkZGl0LmNvbSc6ICcjZmY0NTAwJyxcbiAgICAgICdkZXYudG8nOiAnIzBhMGEwYScsXG4gICAgICAnaGFzaG5vZGUuY29tJzogJyMyOTYyZmYnLFxuICAgICAgJ2RvY3MuZ29vZ2xlLmNvbSc6ICcjNDI4NWY0J1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIGNvbG9yc1tkb21haW5dIHx8ICcjNmI3MjgwJztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgaWNvbiBmb3IgdG9waWNcbiAgICovXG4gIHByaXZhdGUgZ2V0VG9waWNJY29uKHRvcGljOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGljb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgJ1JlYWN0JzogJ+Kam++4jycsXG4gICAgICAnSmF2YVNjcmlwdCc6ICfwn5+oJyxcbiAgICAgICdUeXBlU2NyaXB0JzogJ/CflLcnLFxuICAgICAgJ1B5dGhvbic6ICfwn5CNJyxcbiAgICAgICdOb2RlLmpzJzogJ/Cfn6InLFxuICAgICAgJ0FQSSc6ICfwn5SMJyxcbiAgICAgICdEYXRhYmFzZSc6ICfwn5eE77iPJyxcbiAgICAgICdNYWNoaW5lIExlYXJuaW5nJzogJ/CfpJYnLFxuICAgICAgJ0FJJzogJ/Cfp6AnLFxuICAgICAgJ0Rlc2lnbic6ICfwn46oJyxcbiAgICAgICdVSS9VWCc6ICfinKgnLFxuICAgICAgJ0NTUyc6ICfwn46oJyxcbiAgICAgICdIVE1MJzogJ/Cfk4QnLFxuICAgICAgJ0JhY2tlbmQnOiAn4pqZ77iPJyxcbiAgICAgICdGcm9udGVuZCc6ICfwn5al77iPJyxcbiAgICAgICdEZXZPcHMnOiAn8J+UpycsXG4gICAgICAnQ2xvdWQnOiAn4piB77iPJyxcbiAgICAgICdBV1MnOiAn8J+foCcsXG4gICAgICAnRG9ja2VyJzogJ/CfkLMnLFxuICAgICAgJ1NlY3VyaXR5JzogJ/CflJInLFxuICAgICAgJ01vYmlsZSc6ICfwn5OxJyxcbiAgICAgICdUdXRvcmlhbCc6ICfwn5OaJyxcbiAgICAgICdUb29sJzogJ/Cfm6DvuI8nXG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gaWNvbnNbdG9waWNdIHx8ICfwn4+377iPJztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY29sb3IgZm9yIHRvcGljXG4gICAqL1xuICBwcml2YXRlIGdldFRvcGljQ29sb3IodG9waWM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgY29sb3JzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgJ1JlYWN0JzogJyM2MWRhZmInLFxuICAgICAgJ0phdmFTY3JpcHQnOiAnI2Y3ZGYxZScsXG4gICAgICAnVHlwZVNjcmlwdCc6ICcjMzE3OGM2JyxcbiAgICAgICdQeXRob24nOiAnIzM3NzZhYicsXG4gICAgICAnTm9kZS5qcyc6ICcjMzM5OTMzJyxcbiAgICAgICdBUEknOiAnI2ZmNmI2YicsXG4gICAgICAnRGF0YWJhc2UnOiAnIzMzNjc5MScsXG4gICAgICAnTWFjaGluZSBMZWFybmluZyc6ICcjZmY5NTAwJyxcbiAgICAgICdBSSc6ICcjOGI1Y2Y2JyxcbiAgICAgICdEZXNpZ24nOiAnI2U5MWU2MycsXG4gICAgICAnVUkvVVgnOiAnIzljMjdiMCcsXG4gICAgICAnQ1NTJzogJyMxNTcyYjYnLFxuICAgICAgJ0hUTUwnOiAnI2UzNGYyNicsXG4gICAgICAnQmFja2VuZCc6ICcjNGNhZjUwJyxcbiAgICAgICdGcm9udGVuZCc6ICcjMjE5NmYzJyxcbiAgICAgICdEZXZPcHMnOiAnI2ZmNTcyMicsXG4gICAgICAnQ2xvdWQnOiAnIzYwN2Q4YicsXG4gICAgICAnU2VjdXJpdHknOiAnIzc5NTU0OCcsXG4gICAgICAnTW9iaWxlJzogJyMwMGJjZDQnLFxuICAgICAgJ1R1dG9yaWFsJzogJyNmZjk4MDAnLFxuICAgICAgJ1Rvb2wnOiAnIzYwN2Q4YidcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBjb2xvcnNbdG9waWNdIHx8ICcjNmI3MjgwJztcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmhhbmNlZCBjb250ZW50IGFuYWx5c2lzIGZvciBzbWFydCBjb2xsZWN0aW9uIG1hdGNoaW5nXG4gICAqL1xuICBhc3luYyBhbmFseXplRm9yU21hcnRDb2xsZWN0aW9ucyhsaW5rOiBTYXZlZExpbmspOiBQcm9taXNlPHtcbiAgICBtYXRjaGluZ0NvbGxlY3Rpb25zOiBzdHJpbmdbXTtcbiAgICBzdWdnZXN0ZWRUYWdzOiBzdHJpbmdbXTtcbiAgICBjb250ZW50U2lnbmFsczogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgfT4ge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBgJHtsaW5rLnRpdGxlfSAke2xpbmsudXNlck5vdGV9ICR7bGluay5haVN1bW1hcnkgfHwgJyd9YC50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGRvbWFpbiA9IGxpbmsuZG9tYWluO1xuICAgIFxuICAgIGNvbnN0IG1hdGNoaW5nQ29sbGVjdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3Qgc3VnZ2VzdGVkVGFnczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBjb250ZW50U2lnbmFsczogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuXG4gICAgLy8gQ2hlY2sgZm9yIEFJL01MIGNvbnRlbnRcbiAgICBjb25zdCBhaUtleXdvcmRzID0gWydhaScsICdhcnRpZmljaWFsIGludGVsbGlnZW5jZScsICdtYWNoaW5lIGxlYXJuaW5nJywgJ21sJywgJ25ldXJhbCcsICdkZWVwIGxlYXJuaW5nJ107XG4gICAgY29uc3QgYWlTY29yZSA9IGFpS2V5d29yZHMuZmlsdGVyKGtleXdvcmQgPT4gY29udGVudC5pbmNsdWRlcyhrZXl3b3JkKSkubGVuZ3RoO1xuICAgIGlmIChhaVNjb3JlID4gMCkge1xuICAgICAgbWF0Y2hpbmdDb2xsZWN0aW9ucy5wdXNoKCdhaS1yZWxhdGVkJyk7XG4gICAgICBzdWdnZXN0ZWRUYWdzLnB1c2goJ0FJJyk7XG4gICAgICBjb250ZW50U2lnbmFscy5haSA9IGFpU2NvcmU7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIHR1dG9yaWFsIGNvbnRlbnRcbiAgICBjb25zdCB0dXRvcmlhbEtleXdvcmRzID0gWyd0dXRvcmlhbCcsICdob3cgdG8nLCAnZ3VpZGUnLCAnd2Fsa3Rocm91Z2gnLCAnc3RlcCBieSBzdGVwJ107XG4gICAgY29uc3QgdHV0b3JpYWxTY29yZSA9IHR1dG9yaWFsS2V5d29yZHMuZmlsdGVyKGtleXdvcmQgPT4gY29udGVudC5pbmNsdWRlcyhrZXl3b3JkKSkubGVuZ3RoO1xuICAgIGlmICh0dXRvcmlhbFNjb3JlID4gMCkge1xuICAgICAgbWF0Y2hpbmdDb2xsZWN0aW9ucy5wdXNoKCd0dXRvcmlhbHMnKTtcbiAgICAgIHN1Z2dlc3RlZFRhZ3MucHVzaCgndHV0b3JpYWwnKTtcbiAgICAgIGNvbnRlbnRTaWduYWxzLnR1dG9yaWFsID0gdHV0b3JpYWxTY29yZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgR2l0SHViIHJlcG9zaXRvcmllc1xuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ2dpdGh1Yi5jb20nKSkge1xuICAgICAgbWF0Y2hpbmdDb2xsZWN0aW9ucy5wdXNoKCdnaXRodWItcmVwb3MnKTtcbiAgICAgIHN1Z2dlc3RlZFRhZ3MucHVzaCgnZ2l0aHViJywgJ3JlcG9zaXRvcnknKTtcbiAgICAgIGNvbnRlbnRTaWduYWxzLmdpdGh1YiA9IDE7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIHJlY2VudCBjb250ZW50IChsYXN0IDcgZGF5cylcbiAgICBjb25zdCBkYXlzU2luY2VDcmVhdGVkID0gKERhdGUubm93KCkgLSBsaW5rLmNyZWF0ZWRBdC5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpO1xuICAgIGlmIChkYXlzU2luY2VDcmVhdGVkIDw9IDcpIHtcbiAgICAgIG1hdGNoaW5nQ29sbGVjdGlvbnMucHVzaCgncmVjZW50LXJlYWRzJyk7XG4gICAgICBjb250ZW50U2lnbmFscy5yZWNlbnQgPSBNYXRoLm1heCgwLCA3IC0gZGF5c1NpbmNlQ3JlYXRlZCkgLyA3O1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciB1bnJlYWQgY29udGVudCAobm8gdXNlciBub3RlcylcbiAgICBpZiAoIWxpbmsudXNlck5vdGUgfHwgbGluay51c2VyTm90ZS50cmltKCkgPT09ICcnKSB7XG4gICAgICBtYXRjaGluZ0NvbGxlY3Rpb25zLnB1c2goJ3VucmVhZCcpO1xuICAgICAgY29udGVudFNpZ25hbHMudW5yZWFkID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hpbmdDb2xsZWN0aW9ucyxcbiAgICAgIHN1Z2dlc3RlZFRhZ3MsXG4gICAgICBjb250ZW50U2lnbmFsc1xuICAgIH07XG4gIH1cbn1cblxuLy8gRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgQUkgc2VydmljZSAoZm9yIG5ldyBmZWF0dXJlcylcbmV4cG9ydCBjb25zdCBjcmVhdGVBSVNlcnZpY2UgPSAoYXBpS2V5Pzogc3RyaW5nKSA9PiB7XG4gIGlmIChhcGlLZXkpIHtcbiAgICByZXR1cm4gbmV3IE9wZW5BSVNlcnZpY2UoYXBpS2V5KTtcbiAgfVxuICBcbiAgLy8gUmV0dXJuIGEgbm8tb3Agc2VydmljZSBpZiBubyBBUEkga2V5XG4gIHJldHVybiB7XG4gICAgYXN5bmMgZ2VuZXJhdGVJbnNpZ2h0cygpIHsgcmV0dXJuIFtdOyB9LFxuICAgIGFzeW5jIGdlbmVyYXRlUXVlc3Rpb25zKCkgeyByZXR1cm4gW107IH0sXG4gICAgYXN5bmMgZ2VuZXJhdGVGbGFzaGNhcmRzKCkgeyByZXR1cm4gW107IH0sXG4gICAgYXN5bmMgZmluZENyb3NzUmVmZXJlbmNlcygpIHsgcmV0dXJuIFtdOyB9LFxuICAgIGFzeW5jIGdlbmVyYXRlUmVjb21tZW5kYXRpb25zKCkgeyByZXR1cm4gW107IH0sXG4gICAgYXN5bmMgdXBkYXRlS25vd2xlZGdlR3JhcGgoaXRlbXM6IGFueVtdKSB7IFxuICAgICAgcmV0dXJuIHsgbm9kZXM6IFtdLCBlZGdlczogW10sIGxhc3RVcGRhdGVkOiBEYXRlLm5vdygpIH07IFxuICAgIH0sXG4gICAgYXN5bmMgZXh0cmFjdEtleVRvcGljcygpIHsgcmV0dXJuIFtdOyB9LFxuICAgIGNhbGN1bGF0ZUtub3dsZWRnZUdyb3d0aCgpIHsgcmV0dXJuIDA7IH1cbiAgfTtcbn07XG5cbi8vIE9wZW5BSSBzZXJ2aWNlIGltcGxlbWVudGF0aW9uIGZvciBuZXcgZmVhdHVyZXNcbmNsYXNzIE9wZW5BSVNlcnZpY2Uge1xuICBwcml2YXRlIGFwaUtleTogc3RyaW5nO1xuICBwcml2YXRlIGJhc2VVUkwgPSAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSc7XG5cbiAgY29uc3RydWN0b3IoYXBpS2V5OiBzdHJpbmcpIHtcbiAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlSW5zaWdodHMoaXRlbTogYW55KTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIGlmICghdGhpcy5hcGlLZXkpIHJldHVybiBbXTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gJ3RleHQnIGluIGl0ZW0gPyBpdGVtLnRleHQgOiBgJHtpdGVtLnRpdGxlfSAtICR7aXRlbS5kZXNjcmlwdGlvbiB8fCAnJ31gO1xuICAgICAgY29uc3QgdXJsID0gJ3VybCcgaW4gaXRlbSA/IGl0ZW0udXJsIDogKGl0ZW0gYXMgYW55KS51cmw7XG5cbiAgICAgIGNvbnN0IHByb21wdCA9IGBBbmFseXplIHRoaXMgY29udGVudCBhbmQgZ2VuZXJhdGUgMyB0eXBlcyBvZiBpbnNpZ2h0czpcbjEuIEEgdGhvdWdodC1wcm92b2tpbmcgcXVlc3Rpb25cbjIuIEEga2V5IHN1bW1hcnkgcG9pbnRcbjMuIEEgcG90ZW50aWFsIGNvbm5lY3Rpb24gdG8gb3RoZXIgdG9waWNzXG5cbkNvbnRlbnQ6IFwiJHtjb250ZW50fVwiXG5VUkw6ICR7dXJsfVxuXG5SZXR1cm4gYXMgSlNPTiBhcnJheSB3aXRoIG9iamVjdHMgY29udGFpbmluZzogdHlwZSwgY29udGVudCwgbWV0YWRhdGFgO1xuXG4gICAgICBjb25zdCBpbnNpZ2h0cyA9IGF3YWl0IHRoaXMuY2FsbE9wZW5BSShwcm9tcHQpO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VJbnNpZ2h0cyhpbnNpZ2h0cyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgaW5zaWdodHM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlUXVlc3Rpb25zKGNvbnRlbnQ6IHN0cmluZywgZGlmZmljdWx0eTogc3RyaW5nID0gJ21lZGl1bScpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgaWYgKCF0aGlzLmFwaUtleSkgcmV0dXJuIFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByb21wdCA9IGBHZW5lcmF0ZSAzICR7ZGlmZmljdWx0eX0gbGV2ZWwgcXVlc3Rpb25zIGJhc2VkIG9uIHRoaXMgY29udGVudCB0aGF0IHdvdWxkIGhlbHAgd2l0aCByZXRlbnRpb24gYW5kIHVuZGVyc3RhbmRpbmc6XG5cbkNvbnRlbnQ6IFwiJHtjb250ZW50fVwiXG5cblF1ZXN0aW9ucyBzaG91bGQgYmU6XG4tICR7ZGlmZmljdWx0eSA9PT0gJ2Vhc3knID8gJ1JlY2FsbC1iYXNlZCwgYXNraW5nIGZvciBiYXNpYyBmYWN0cycgOiAnJ31cbi0gJHtkaWZmaWN1bHR5ID09PSAnbWVkaXVtJyA/ICdBcHBsaWNhdGlvbi1iYXNlZCwgYXNraW5nIGhvdyBjb25jZXB0cyBhcHBseScgOiAnJ31cbi0gJHtkaWZmaWN1bHR5ID09PSAnaGFyZCcgPyAnQW5hbHlzaXMtYmFzZWQsIGFza2luZyBmb3IgZXZhbHVhdGlvbiBhbmQgc3ludGhlc2lzJyA6ICcnfVxuXG5SZXR1cm4gYXMgSlNPTiBhcnJheSB3aXRoIHR5cGU6IFwicXVlc3Rpb25cIiwgY29udGVudDogXCJ0aGUgcXVlc3Rpb25cIiwgbWV0YWRhdGE6IHtkaWZmaWN1bHR5LCB0b3BpY31gO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2FsbE9wZW5BSShwcm9tcHQpO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VJbnNpZ2h0cyhyZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgcXVlc3Rpb25zOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZW5lcmF0ZUZsYXNoY2FyZHMoY29udGVudDogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIGlmICghdGhpcy5hcGlLZXkpIHJldHVybiBbXTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBwcm9tcHQgPSBgQ3JlYXRlIDMgZmxhc2hjYXJkIHBhaXJzIGZyb20gdGhpcyBjb250ZW50LiBFYWNoIHNob3VsZCBoYXZlIGEgcXVlc3Rpb24vcHJvbXB0IGFuZCBhbnN3ZXI6XG5cbkNvbnRlbnQ6IFwiJHtjb250ZW50fVwiXG5cblJldHVybiBhcyBKU09OIGFycmF5IHdpdGggdHlwZTogXCJmbGFzaGNhcmRcIiwgY29udGVudDogXCJRdWVzdGlvbjogW3F1ZXN0aW9uXVxcbkFuc3dlcjogW2Fuc3dlcl1cIiwgbWV0YWRhdGE6IHt0b3BpY31gO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2FsbE9wZW5BSShwcm9tcHQpO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VJbnNpZ2h0cyhyZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgZmxhc2hjYXJkczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZmluZENyb3NzUmVmZXJlbmNlcyhpdGVtOiBhbnksIGFsbEl0ZW1zOiBhbnlbXSk6IFByb21pc2U8YW55W10+IHtcbiAgICBpZiAoIXRoaXMuYXBpS2V5IHx8IGFsbEl0ZW1zLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGl0ZW1Db250ZW50ID0gJ3RleHQnIGluIGl0ZW0gPyBpdGVtLnRleHQgOiBgJHtpdGVtLnRpdGxlfSAtICR7aXRlbS5kZXNjcmlwdGlvbiB8fCAnJ31gO1xuICAgICAgY29uc3Qgb3RoZXJJdGVtcyA9IGFsbEl0ZW1zLmZpbHRlcihvdGhlciA9PiBvdGhlci5pZCAhPT0gaXRlbS5pZCkuc2xpY2UoMCwgMTApO1xuXG4gICAgICBjb25zdCBwcm9tcHQgPSBgQW5hbHl6ZSB0aGUgbWFpbiBpdGVtIGFuZCBmaW5kIHBvdGVudGlhbCByZWxhdGlvbnNoaXBzIHdpdGggb3RoZXIgaXRlbXM6XG5cbk1haW4gaXRlbTogXCIke2l0ZW1Db250ZW50fVwiXG5cbk90aGVyIGl0ZW1zOlxuJHtvdGhlckl0ZW1zLm1hcCgob3RoZXIsIGkpID0+IFxuICBgJHtpICsgMX0uICR7b3RoZXIuaWR9OiAkeyd0ZXh0JyBpbiBvdGhlciA/IG90aGVyLnRleHQgOiBgJHtvdGhlci50aXRsZX0gLSAke290aGVyLmRlc2NyaXB0aW9uIHx8ICcnfWB9YFxuKS5qb2luKCdcXG4nKX1cblxuRm9yIGVhY2ggcmVsYXRpb25zaGlwIGZvdW5kLCByZXR1cm4gSlNPTiB3aXRoOlxuLSB0YXJnZXRJZDogdGhlIGl0ZW0gSURcbi0gcmVsYXRpb25zaGlwVHlwZTogXCJyZWxhdGVkXCIgfCBcImNvbnRyYWRpY3RzXCIgfCBcInN1cHBvcnRzXCIgfCBcImNpdGVzXCIgfCBcImJ1aWxkcy1vblwiXG4tIHN0cmVuZ3RoOiAwLTEgY29uZmlkZW5jZSBzY29yZVxuLSBub3RlOiBicmllZiBleHBsYW5hdGlvblxuXG5Pbmx5IHJldHVybiByZWxhdGlvbnNoaXBzIHdpdGggc3RyZW5ndGggPiAwLjNgO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2FsbE9wZW5BSShwcm9tcHQpO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VDcm9zc1JlZmVyZW5jZXMocmVzcG9uc2UsIGl0ZW0uaWQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmaW5kaW5nIGNyb3NzIHJlZmVyZW5jZXM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlUmVjb21tZW5kYXRpb25zKHVzZXJIaXN0b3J5OiBhbnlbXSk6IFByb21pc2U8YW55W10+IHtcbiAgICBpZiAoIXRoaXMuYXBpS2V5KSByZXR1cm4gW107XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVjZW50SXRlbXMgPSB1c2VySGlzdG9yeS5zbGljZSgtMTApO1xuICAgICAgY29uc3QgdG9waWNzID0gYXdhaXQgdGhpcy5leHRyYWN0S2V5VG9waWNzKFxuICAgICAgICByZWNlbnRJdGVtcy5tYXAoaXRlbSA9PiAndGV4dCcgaW4gaXRlbSA/IGl0ZW0udGV4dCA6IGAke2l0ZW0udGl0bGV9IC0gJHtpdGVtLmRlc2NyaXB0aW9uIHx8ICcnfWApLmpvaW4oJyAnKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgcHJvbXB0ID0gYEJhc2VkIG9uIHRoZSB1c2VyJ3MgcmVhZGluZyBoaXN0b3J5IGFuZCBpbnRlcmVzdHMsIHN1Z2dlc3QgNSBjb250ZW50IHJlY29tbWVuZGF0aW9uczpcblxuUmVjZW50IHJlYWRpbmcgdG9waWNzOiAke3RvcGljcy5qb2luKCcsICcpfVxuXG5SZWNlbnQgaXRlbXM6XG4ke3JlY2VudEl0ZW1zLm1hcChpdGVtID0+IFxuICAndGV4dCcgaW4gaXRlbSA/IGBIaWdobGlnaHQ6IFwiJHtpdGVtLnRleHR9XCJgIDogYExpbms6IFwiJHtpdGVtLnRpdGxlfVwiYFxuKS5qb2luKCdcXG4nKX1cblxuU3VnZ2VzdDpcbjEuIFNwZWNpZmljIHRvcGljcyB0byBleHBsb3JlIG5leHRcbjIuIFR5cGVzIG9mIGNvbnRlbnQgdGhhdCB3b3VsZCBjb21wbGVtZW50IHRoZWlyIHJlYWRpbmdcbjMuIEFyZWFzIGZvciBkZWVwZXIgc3R1ZHlcblxuUmV0dXJuIGFzIEpTT04gYXJyYXkgd2l0aCB0eXBlOiBcInJlY29tbWVuZGF0aW9uXCIsIGNvbnRlbnQ6IHN1Z2dlc3Rpb24sIG1ldGFkYXRhOiB7dG9waWMsIGNvbmZpZGVuY2V9YDtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNhbGxPcGVuQUkocHJvbXB0KTtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlSW5zaWdodHMocmVzcG9uc2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIHJlY29tbWVuZGF0aW9uczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlS25vd2xlZGdlR3JhcGgoaXRlbXM6IGFueVtdKTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCBub2RlczogYW55W10gPSBbXTtcbiAgICBjb25zdCBlZGdlczogYW55W10gPSBbXTtcbiAgICBjb25zdCB0b3BpY0NvdW50cyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XG5cbiAgICAvLyBFeHRyYWN0IHRvcGljcyBhbmQgY3JlYXRlIG5vZGVzXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gJ3RleHQnIGluIGl0ZW0gPyBpdGVtLnRleHQgOiBgJHtpdGVtLnRpdGxlfSAtICR7aXRlbS5kZXNjcmlwdGlvbiB8fCAnJ31gO1xuICAgICAgY29uc3QgdG9waWNzID0gYXdhaXQgdGhpcy5leHRyYWN0S2V5VG9waWNzKGNvbnRlbnQpO1xuICAgICAgXG4gICAgICAvLyBBZGQgaXRlbSBub2RlXG4gICAgICBub2Rlcy5wdXNoKHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIHR5cGU6ICd0ZXh0JyBpbiBpdGVtID8gJ2hpZ2hsaWdodCcgOiAnbGluaycsXG4gICAgICAgIGxhYmVsOiAndGV4dCcgaW4gaXRlbSA/IGl0ZW0udGV4dC5zbGljZSgwLCA1MCkgKyAnLi4uJyA6IGl0ZW0udGl0bGUsXG4gICAgICAgIHdlaWdodDogMSxcbiAgICAgICAgbWV0YWRhdGE6IHsgdG9waWNzIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBDb3VudCB0b3BpYyBmcmVxdWVuY2llc1xuICAgICAgdG9waWNzLmZvckVhY2godG9waWMgPT4ge1xuICAgICAgICB0b3BpY0NvdW50cy5zZXQodG9waWMsICh0b3BpY0NvdW50cy5nZXQodG9waWMpIHx8IDApICsgMSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgdG9waWMgbm9kZXNcbiAgICB0b3BpY0NvdW50cy5mb3JFYWNoKChjb3VudCwgdG9waWMpID0+IHtcbiAgICAgIGlmIChjb3VudCA+IDEpIHtcbiAgICAgICAgbm9kZXMucHVzaCh7XG4gICAgICAgICAgaWQ6IGB0b3BpYy0ke3RvcGljfWAsXG4gICAgICAgICAgdHlwZTogJ3RvcGljJyxcbiAgICAgICAgICBsYWJlbDogdG9waWMsXG4gICAgICAgICAgd2VpZ2h0OiBjb3VudCxcbiAgICAgICAgICBtZXRhZGF0YTogeyBmcmVxdWVuY3k6IGNvdW50IH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbm9kZXMsXG4gICAgICBlZGdlcyxcbiAgICAgIGxhc3RVcGRhdGVkOiBEYXRlLm5vdygpXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGV4dHJhY3RLZXlUb3BpY3MoY29udGVudDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGlmICghdGhpcy5hcGlLZXkpIHtcbiAgICAgIC8vIEZhbGxiYWNrOiBzaW1wbGUga2V5d29yZCBleHRyYWN0aW9uXG4gICAgICBjb25zdCB3b3JkcyA9IGNvbnRlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvXFxiXFx3K1xcYi9nKSB8fCBbXTtcbiAgICAgIGNvbnN0IHdvcmRDb3VudHMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuICAgICAgd29yZHMuZm9yRWFjaCh3b3JkID0+IHtcbiAgICAgICAgaWYgKHdvcmQubGVuZ3RoID4gNCkge1xuICAgICAgICAgIHdvcmRDb3VudHMuc2V0KHdvcmQsICh3b3JkQ291bnRzLmdldCh3b3JkKSB8fCAwKSArIDEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHdvcmRDb3VudHMuZW50cmllcygpKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pXG4gICAgICAgIC5zbGljZSgwLCA1KVxuICAgICAgICAubWFwKChbd29yZF0pID0+IHdvcmQpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBwcm9tcHQgPSBgRXh0cmFjdCAzLTUga2V5IHRvcGljcy90aGVtZXMgZnJvbSB0aGlzIGNvbnRlbnQuIFJldHVybiBhcyBjb21tYS1zZXBhcmF0ZWQgbGlzdDpcblxuQ29udGVudDogXCIke2NvbnRlbnQuc2xpY2UoMCwgMTAwMCl9XCJgO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2FsbE9wZW5BSShwcm9tcHQpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnNwbGl0KCcsJykubWFwKCh0b3BpYzogc3RyaW5nKSA9PiB0b3BpYy50cmltKCkpLmZpbHRlcigodG9waWM6IHN0cmluZykgPT4gdG9waWMubGVuZ3RoID4gMCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGV4dHJhY3RpbmcgdG9waWNzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBjYWxjdWxhdGVLbm93bGVkZ2VHcm93dGgoYW5hbHl0aWNzOiBhbnlbXSk6IG51bWJlciB7XG4gICAgaWYgKGFuYWx5dGljcy5sZW5ndGggPT09IDApIHJldHVybiAwO1xuICAgIFxuICAgIGNvbnN0IHJlY2VudCA9IGFuYWx5dGljcy5zbGljZSgtNyk7XG4gICAgY29uc3Qgb2xkZXIgPSBhbmFseXRpY3Muc2xpY2UoLTE0LCAtNyk7XG4gICAgXG4gICAgY29uc3QgcmVjZW50U2NvcmUgPSByZWNlbnQucmVkdWNlKChzdW0sIGRheSkgPT4gc3VtICsgKGRheS5saW5rc1JlYWQgfHwgMCkgKyAoZGF5LmhpZ2hsaWdodHNNYWRlIHx8IDApLCAwKTtcbiAgICBjb25zdCBvbGRlclNjb3JlID0gb2xkZXIucmVkdWNlKChzdW0sIGRheSkgPT4gc3VtICsgKGRheS5saW5rc1JlYWQgfHwgMCkgKyAoZGF5LmhpZ2hsaWdodHNNYWRlIHx8IDApLCAwKTtcbiAgICBcbiAgICBpZiAob2xkZXJTY29yZSA9PT0gMCkgcmV0dXJuIHJlY2VudFNjb3JlID4gMCA/IDEgOiAwO1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbigyLCByZWNlbnRTY29yZSAvIG9sZGVyU2NvcmUpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgY2FsbE9wZW5BSShwcm9tcHQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVUkx9L2NoYXQvY29tcGxldGlvbnNgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5hcGlLZXl9YCxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1vZGVsOiAnZ3B0LTMuNS10dXJibycsXG4gICAgICAgIG1lc3NhZ2VzOiBbeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHByb21wdCB9XSxcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICAgICAgbWF4X3Rva2VuczogNTAwLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wZW5BSSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiBkYXRhLmNob2ljZXNbMF0/Lm1lc3NhZ2U/LmNvbnRlbnQgfHwgJyc7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlSW5zaWdodHMocmVzcG9uc2U6IHN0cmluZyk6IGFueVtdIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXJzZWQpID8gcGFyc2VkLm1hcChpbnNpZ2h0ID0+ICh7XG4gICAgICAgIGlkOiBgaW5zaWdodC0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKX1gLFxuICAgICAgICAuLi5pbnNpZ2h0LFxuICAgICAgICBjcmVhdGVkQXQ6IERhdGUubm93KCksXG4gICAgICB9KSkgOiBbXTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIGlkOiBgaW5zaWdodC0ke0RhdGUubm93KCl9YCxcbiAgICAgICAgdHlwZTogJ3N1bW1hcnknLFxuICAgICAgICBjb250ZW50OiByZXNwb25zZS5zbGljZSgwLCAyMDApLFxuICAgICAgICBjcmVhdGVkQXQ6IERhdGUubm93KCksXG4gICAgICB9XTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHBhcnNlQ3Jvc3NSZWZlcmVuY2VzKHJlc3BvbnNlOiBzdHJpbmcsIHNvdXJjZUlkOiBzdHJpbmcpOiBhbnlbXSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocGFyc2VkKSA/IHBhcnNlZC5tYXAocmVmID0+ICh7XG4gICAgICAgIGlkOiBgcmVmLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpfWAsXG4gICAgICAgIC4uLnJlZixcbiAgICAgICAgY3JlYXRlZEF0OiBEYXRlLm5vdygpLFxuICAgICAgfSkpIDogW107XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbn1cblxuLy8gU2luZ2xlIGV4cG9ydCBvZiBjb25maWd1cmVkIGFpU2VydmljZSBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IGFpU2VydmljZSA9IG5ldyBBSVNlcnZpY2UoeyBhcGlLZXk6ICcnIH0pOyAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9ICcwLjAuMC1hdXRvbWF0ZWQnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVGQVVMVF9IRUFERVJTID0gdm9pZCAwO1xuY29uc3QgdmVyc2lvbl8xID0gcmVxdWlyZShcIi4vdmVyc2lvblwiKTtcbmV4cG9ydHMuREVGQVVMVF9IRUFERVJTID0geyAnWC1DbGllbnQtSW5mbyc6IGBwb3N0Z3Jlc3QtanMvJHt2ZXJzaW9uXzEudmVyc2lvbn1gIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBub2RlX2ZldGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIkBzdXBhYmFzZS9ub2RlLWZldGNoXCIpKTtcbmNvbnN0IFBvc3RncmVzdEVycm9yXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0RXJyb3JcIikpO1xuY2xhc3MgUG9zdGdyZXN0QnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoYnVpbGRlcikge1xuICAgICAgICB0aGlzLnNob3VsZFRocm93T25FcnJvciA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IGJ1aWxkZXIubWV0aG9kO1xuICAgICAgICB0aGlzLnVybCA9IGJ1aWxkZXIudXJsO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBidWlsZGVyLmhlYWRlcnM7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gYnVpbGRlci5zY2hlbWE7XG4gICAgICAgIHRoaXMuYm9keSA9IGJ1aWxkZXIuYm9keTtcbiAgICAgICAgdGhpcy5zaG91bGRUaHJvd09uRXJyb3IgPSBidWlsZGVyLnNob3VsZFRocm93T25FcnJvcjtcbiAgICAgICAgdGhpcy5zaWduYWwgPSBidWlsZGVyLnNpZ25hbDtcbiAgICAgICAgdGhpcy5pc01heWJlU2luZ2xlID0gYnVpbGRlci5pc01heWJlU2luZ2xlO1xuICAgICAgICBpZiAoYnVpbGRlci5mZXRjaCkge1xuICAgICAgICAgICAgdGhpcy5mZXRjaCA9IGJ1aWxkZXIuZmV0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5mZXRjaCA9IG5vZGVfZmV0Y2hfMS5kZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mZXRjaCA9IGZldGNoO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHRoZXJlJ3MgYW4gZXJyb3Igd2l0aCB0aGUgcXVlcnksIHRocm93T25FcnJvciB3aWxsIHJlamVjdCB0aGUgcHJvbWlzZSBieVxuICAgICAqIHRocm93aW5nIHRoZSBlcnJvciBpbnN0ZWFkIG9mIHJldHVybmluZyBpdCBhcyBwYXJ0IG9mIGEgc3VjY2Vzc2Z1bCByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc3VwYWJhc2Uvc3VwYWJhc2UtanMvaXNzdWVzLzkyfVxuICAgICAqL1xuICAgIHRocm93T25FcnJvcigpIHtcbiAgICAgICAgdGhpcy5zaG91bGRUaHJvd09uRXJyb3IgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGFuIEhUVFAgaGVhZGVyIGZvciB0aGUgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBzZXRIZWFkZXIobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5oZWFkZXJzKTtcbiAgICAgICAgdGhpcy5oZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vcG9zdGdyZXN0Lm9yZy9lbi9zdGFibGUvYXBpLmh0bWwjc3dpdGNoaW5nLXNjaGVtYXNcbiAgICAgICAgaWYgKHRoaXMuc2NoZW1hID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHNraXBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChbJ0dFVCcsICdIRUFEJ10uaW5jbHVkZXModGhpcy5tZXRob2QpKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcnNbJ0FjY2VwdC1Qcm9maWxlJ10gPSB0aGlzLnNjaGVtYTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1snQ29udGVudC1Qcm9maWxlJ10gPSB0aGlzLnNjaGVtYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tZXRob2QgIT09ICdHRVQnICYmIHRoaXMubWV0aG9kICE9PSAnSEVBRCcpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTk9URTogSW52b2tlIHcvbyBgdGhpc2AgdG8gYXZvaWQgaWxsZWdhbCBpbnZvY2F0aW9uIGVycm9yLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vc3VwYWJhc2UvcG9zdGdyZXN0LWpzL3B1bGwvMjQ3XG4gICAgICAgIGNvbnN0IF9mZXRjaCA9IHRoaXMuZmV0Y2g7XG4gICAgICAgIGxldCByZXMgPSBfZmV0Y2godGhpcy51cmwudG9TdHJpbmcoKSwge1xuICAgICAgICAgICAgbWV0aG9kOiB0aGlzLm1ldGhvZCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHRoaXMuYm9keSksXG4gICAgICAgICAgICBzaWduYWw6IHRoaXMuc2lnbmFsLFxuICAgICAgICB9KS50aGVuKGFzeW5jIChyZXMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBkYXRhID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBjb3VudCA9IG51bGw7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gcmVzLnN0YXR1cztcbiAgICAgICAgICAgIGxldCBzdGF0dXNUZXh0ID0gcmVzLnN0YXR1c1RleHQ7XG4gICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWV0aG9kICE9PSAnSEVBRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJlZmVyOiByZXR1cm49bWluaW1hbFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaGVhZGVyc1snQWNjZXB0J10gPT09ICd0ZXh0L2NzdicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBib2R5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaGVhZGVyc1snQWNjZXB0J10gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyc1snQWNjZXB0J10uaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL3ZuZC5wZ3JzdC5wbGFuK3RleHQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGJvZHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudEhlYWRlciA9IChfYSA9IHRoaXMuaGVhZGVyc1snUHJlZmVyJ10pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXRjaCgvY291bnQ9KGV4YWN0fHBsYW5uZWR8ZXN0aW1hdGVkKS8pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRSYW5nZSA9IChfYiA9IHJlcy5oZWFkZXJzLmdldCgnY29udGVudC1yYW5nZScpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICBpZiAoY291bnRIZWFkZXIgJiYgY29udGVudFJhbmdlICYmIGNvbnRlbnRSYW5nZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ID0gcGFyc2VJbnQoY29udGVudFJhbmdlWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGVtcG9yYXJ5IHBhcnRpYWwgZml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vc3VwYWJhc2UvcG9zdGdyZXN0LWpzL2lzc3Vlcy8zNjFcbiAgICAgICAgICAgICAgICAvLyBJc3N1ZSBwZXJzaXN0cyBlLmcuIGZvciBgLmluc2VydChbLi4uXSkuc2VsZWN0KCkubWF5YmVTaW5nbGUoKWBcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc01heWJlU2luZ2xlICYmIHRoaXMubWV0aG9kID09PSAnR0VUJyAmJiBBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Qb3N0Z1JFU1QvcG9zdGdyZXN0L2Jsb2IvYTg2N2Q3OWM0MjQxOWFmMTZjMThjM2ZiMDE5ZWJhOGRmOTkyNjI2Zi9zcmMvUG9zdGdSRVNUL0Vycm9yLmhzI0w1NTNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAnUEdSU1QxMTYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGBSZXN1bHRzIGNvbnRhaW4gJHtkYXRhLmxlbmd0aH0gcm93cywgYXBwbGljYXRpb24vdm5kLnBncnN0Lm9iamVjdCtqc29uIHJlcXVpcmVzIDEgcm93YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdKU09OIG9iamVjdCByZXF1ZXN0ZWQsIG11bHRpcGxlIChvciBubykgcm93cyByZXR1cm5lZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSA0MDY7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gJ05vdCBBY2NlcHRhYmxlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGFbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3N1cGFiYXNlL3Bvc3RncmVzdC1qcy9pc3N1ZXMvMjk1XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVycm9yKSAmJiByZXMuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IDIwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSAnT0snO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vc3VwYWJhc2UvcG9zdGdyZXN0LWpzL2lzc3Vlcy8yOTVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDQwNCAmJiBib2R5ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gMjA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICdObyBDb250ZW50JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGJvZHksXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvciAmJiB0aGlzLmlzTWF5YmVTaW5nbGUgJiYgKChfYyA9IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5kZXRhaWxzKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuaW5jbHVkZXMoJzAgcm93cycpKSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IDIwMDtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICdPSyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvciAmJiB0aGlzLnNob3VsZFRocm93T25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUG9zdGdyZXN0RXJyb3JfMS5kZWZhdWx0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwb3N0Z3Jlc3RSZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIGNvdW50LFxuICAgICAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0Z3Jlc3RSZXNwb25zZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRUaHJvd09uRXJyb3IpIHtcbiAgICAgICAgICAgIHJlcyA9IHJlcy5jYXRjaCgoZmV0Y2hFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgICAgIHJldHVybiAoe1xuICAgICAgICAgICAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYCR7KF9hID0gZmV0Y2hFcnJvciA9PT0gbnVsbCB8fCBmZXRjaEVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmZXRjaEVycm9yLm5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdGZXRjaEVycm9yJ306ICR7ZmV0Y2hFcnJvciA9PT0gbnVsbCB8fCBmZXRjaEVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmZXRjaEVycm9yLm1lc3NhZ2V9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGAkeyhfYiA9IGZldGNoRXJyb3IgPT09IG51bGwgfHwgZmV0Y2hFcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmV0Y2hFcnJvci5zdGFjaykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyd9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpbnQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogYCR7KF9jID0gZmV0Y2hFcnJvciA9PT0gbnVsbCB8fCBmZXRjaEVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmZXRjaEVycm9yLmNvZGUpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnfWAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6ICcnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcy50aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhlIHR5cGUgb2YgdGhlIHJldHVybmVkIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIEB0eXBlUGFyYW0gTmV3UmVzdWx0IC0gVGhlIG5ldyByZXN1bHQgdHlwZSB0byBvdmVycmlkZSB3aXRoXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIG92ZXJyaWRlVHlwZXM8eW91clR5cGUsIHsgbWVyZ2U6IGZhbHNlIH0+KCkgbWV0aG9kIGF0IHRoZSBlbmQgb2YgeW91ciBjYWxsIGNoYWluIGluc3RlYWRcbiAgICAgKi9cbiAgICByZXR1cm5zKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhlIHR5cGUgb2YgdGhlIHJldHVybmVkIGBkYXRhYCBmaWVsZCBpbiB0aGUgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBAdHlwZVBhcmFtIE5ld1Jlc3VsdCAtIFRoZSBuZXcgdHlwZSB0byBjYXN0IHRoZSByZXNwb25zZSBkYXRhIHRvXG4gICAgICogQHR5cGVQYXJhbSBPcHRpb25zIC0gT3B0aW9uYWwgdHlwZSBjb25maWd1cmF0aW9uIChkZWZhdWx0cyB0byB7IG1lcmdlOiB0cnVlIH0pXG4gICAgICogQHR5cGVQYXJhbSBPcHRpb25zLm1lcmdlIC0gV2hlbiB0cnVlLCBtZXJnZXMgdGhlIG5ldyB0eXBlIHdpdGggZXhpc3RpbmcgcmV0dXJuIHR5cGUuIFdoZW4gZmFsc2UsIHJlcGxhY2VzIHRoZSBleGlzdGluZyB0eXBlcyBlbnRpcmVseSAoZGVmYXVsdHMgdG8gdHJ1ZSlcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAvLyBNZXJnZSB3aXRoIGV4aXN0aW5nIHR5cGVzIChkZWZhdWx0IGJlaGF2aW9yKVxuICAgICAqIGNvbnN0IHF1ZXJ5ID0gc3VwYWJhc2VcbiAgICAgKiAgIC5mcm9tKCd1c2VycycpXG4gICAgICogICAuc2VsZWN0KClcbiAgICAgKiAgIC5vdmVycmlkZVR5cGVzPHsgY3VzdG9tX2ZpZWxkOiBzdHJpbmcgfT4oKVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBleGlzdGluZyB0eXBlcyBjb21wbGV0ZWx5XG4gICAgICogY29uc3QgcmVwbGFjZVF1ZXJ5ID0gc3VwYWJhc2VcbiAgICAgKiAgIC5mcm9tKCd1c2VycycpXG4gICAgICogICAuc2VsZWN0KClcbiAgICAgKiAgIC5vdmVycmlkZVR5cGVzPHsgaWQ6IG51bWJlcjsgbmFtZTogc3RyaW5nIH0sIHsgbWVyZ2U6IGZhbHNlIH0+KClcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyBBIFBvc3RncmVzdEJ1aWxkZXIgaW5zdGFuY2Ugd2l0aCB0aGUgbmV3IHR5cGVcbiAgICAgKi9cbiAgICBvdmVycmlkZVR5cGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQb3N0Z3Jlc3RCdWlsZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UG9zdGdyZXN0QnVpbGRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogRXJyb3IgZm9ybWF0XG4gKlxuICoge0BsaW5rIGh0dHBzOi8vcG9zdGdyZXN0Lm9yZy9lbi9zdGFibGUvYXBpLmh0bWw/aGlnaGxpZ2h0PW9wdGlvbnMjZXJyb3JzLWFuZC1odHRwLXN0YXR1cy1jb2Rlc31cbiAqL1xuY2xhc3MgUG9zdGdyZXN0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgICAgICBzdXBlcihjb250ZXh0Lm1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnUG9zdGdyZXN0RXJyb3InO1xuICAgICAgICB0aGlzLmRldGFpbHMgPSBjb250ZXh0LmRldGFpbHM7XG4gICAgICAgIHRoaXMuaGludCA9IGNvbnRleHQuaGludDtcbiAgICAgICAgdGhpcy5jb2RlID0gY29udGV4dC5jb2RlO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFBvc3RncmVzdEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UG9zdGdyZXN0RXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlclwiKSk7XG5jbGFzcyBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyIGV4dGVuZHMgUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlcl8xLmRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBgY29sdW1uYCBpcyBlcXVhbCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogVG8gY2hlY2sgaWYgdGhlIHZhbHVlIG9mIGBjb2x1bW5gIGlzIE5VTEwsIHlvdSBzaG91bGQgdXNlIGAuaXMoKWAgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIGVxKGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBlcS4ke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIGlzIG5vdCBlcXVhbCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgbmVxKGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBuZXEuJHt2YWx1ZX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBgY29sdW1uYCBpcyBncmVhdGVyIHRoYW4gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIGd0KGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBndC4ke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgZ3RlKGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBndGUuJHt2YWx1ZX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBgY29sdW1uYCBpcyBsZXNzIHRoYW4gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIGx0KGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBsdC4ke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgbHRlKGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBsdGUuJHt2YWx1ZX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBgY29sdW1uYCBtYXRjaGVzIGBwYXR0ZXJuYCBjYXNlLXNlbnNpdGl2ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHBhdHRlcm4gLSBUaGUgcGF0dGVybiB0byBtYXRjaCB3aXRoXG4gICAgICovXG4gICAgbGlrZShjb2x1bW4sIHBhdHRlcm4pIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBsaWtlLiR7cGF0dGVybn1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBgY29sdW1uYCBtYXRjaGVzIGFsbCBvZiBgcGF0dGVybnNgIGNhc2Utc2Vuc2l0aXZlbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gcGF0dGVybnMgLSBUaGUgcGF0dGVybnMgdG8gbWF0Y2ggd2l0aFxuICAgICAqL1xuICAgIGxpa2VBbGxPZihjb2x1bW4sIHBhdHRlcm5zKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgbGlrZShhbGwpLnske3BhdHRlcm5zLmpvaW4oJywnKX19YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgYGNvbHVtbmAgbWF0Y2hlcyBhbnkgb2YgYHBhdHRlcm5zYCBjYXNlLXNlbnNpdGl2ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHBhdHRlcm5zIC0gVGhlIHBhdHRlcm5zIHRvIG1hdGNoIHdpdGhcbiAgICAgKi9cbiAgICBsaWtlQW55T2YoY29sdW1uLCBwYXR0ZXJucykge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGxpa2UoYW55KS57JHtwYXR0ZXJucy5qb2luKCcsJyl9fWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIG1hdGNoZXMgYHBhdHRlcm5gIGNhc2UtaW5zZW5zaXRpdmVseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSBwYXR0ZXJuIC0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd2l0aFxuICAgICAqL1xuICAgIGlsaWtlKGNvbHVtbiwgcGF0dGVybikge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGlsaWtlLiR7cGF0dGVybn1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGVyZSBgY29sdW1uYCBtYXRjaGVzIGFsbCBvZiBgcGF0dGVybnNgIGNhc2UtaW5zZW5zaXRpdmVseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSBwYXR0ZXJucyAtIFRoZSBwYXR0ZXJucyB0byBtYXRjaCB3aXRoXG4gICAgICovXG4gICAgaWxpa2VBbGxPZihjb2x1bW4sIHBhdHRlcm5zKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgaWxpa2UoYWxsKS57JHtwYXR0ZXJucy5qb2luKCcsJyl9fWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIG1hdGNoZXMgYW55IG9mIGBwYXR0ZXJuc2AgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHBhdHRlcm5zIC0gVGhlIHBhdHRlcm5zIHRvIG1hdGNoIHdpdGhcbiAgICAgKi9cbiAgICBpbGlrZUFueU9mKGNvbHVtbiwgcGF0dGVybnMpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBpbGlrZShhbnkpLnske3BhdHRlcm5zLmpvaW4oJywnKX19YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgYGNvbHVtbmAgSVMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEZvciBub24tYm9vbGVhbiBjb2x1bW5zLCB0aGlzIGlzIG9ubHkgcmVsZXZhbnQgZm9yIGNoZWNraW5nIGlmIHRoZSB2YWx1ZSBvZlxuICAgICAqIGBjb2x1bW5gIGlzIE5VTEwgYnkgc2V0dGluZyBgdmFsdWVgIHRvIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEZvciBib29sZWFuIGNvbHVtbnMsIHlvdSBjYW4gYWxzbyBzZXQgYHZhbHVlYCB0byBgdHJ1ZWAgb3IgYGZhbHNlYCBhbmQgaXRcbiAgICAgKiB3aWxsIGJlaGF2ZSB0aGUgc2FtZSB3YXkgYXMgYC5lcSgpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIGlzKGNvbHVtbiwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBpcy4ke3ZhbHVlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIGlzIGluY2x1ZGVkIGluIHRoZSBgdmFsdWVzYCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSB2YWx1ZXMgLSBUaGUgdmFsdWVzIGFycmF5IHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgaW4oY29sdW1uLCB2YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgY2xlYW5lZFZhbHVlcyA9IEFycmF5LmZyb20obmV3IFNldCh2YWx1ZXMpKVxuICAgICAgICAgICAgLm1hcCgocykgPT4ge1xuICAgICAgICAgICAgLy8gaGFuZGxlIHBvc3RncmVzdCByZXNlcnZlZCBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAvLyBodHRwczovL3Bvc3RncmVzdC5vcmcvZW4vdjcuMC4wL2FwaS5odG1sI3Jlc2VydmVkLWNoYXJhY3RlcnNcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycgJiYgbmV3IFJlZ0V4cCgnWywoKV0nKS50ZXN0KHMpKVxuICAgICAgICAgICAgICAgIHJldHVybiBgXCIke3N9XCJgO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtzfWA7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignLCcpO1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGluLigke2NsZWFuZWRWYWx1ZXN9KWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSByZWxldmFudCBmb3IganNvbmIsIGFycmF5LCBhbmQgcmFuZ2UgY29sdW1ucy4gTWF0Y2ggb25seSByb3dzIHdoZXJlXG4gICAgICogYGNvbHVtbmAgY29udGFpbnMgZXZlcnkgZWxlbWVudCBhcHBlYXJpbmcgaW4gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUganNvbmIsIGFycmF5LCBvciByYW5nZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIGpzb25iLCBhcnJheSwgb3IgcmFuZ2UgdmFsdWUgdG8gZmlsdGVyIHdpdGhcbiAgICAgKi9cbiAgICBjb250YWlucyhjb2x1bW4sIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyByYW5nZSB0eXBlcyBjYW4gYmUgaW5jbHVzaXZlICdbJywgJ10nIG9yIGV4Y2x1c2l2ZSAnKCcsICcpJyBzbyBqdXN0XG4gICAgICAgICAgICAvLyBrZWVwIGl0IHNpbXBsZSBhbmQgYWNjZXB0IGEgc3RyaW5nXG4gICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGNzLiR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIC8vIGFycmF5XG4gICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGNzLnske3ZhbHVlLmpvaW4oJywnKX19YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBqc29uXG4gICAgICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGNzLiR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbGV2YW50IGZvciBqc29uYiwgYXJyYXksIGFuZCByYW5nZSBjb2x1bW5zLiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmVcbiAgICAgKiBldmVyeSBlbGVtZW50IGFwcGVhcmluZyBpbiBgY29sdW1uYCBpcyBjb250YWluZWQgYnkgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUganNvbmIsIGFycmF5LCBvciByYW5nZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIGpzb25iLCBhcnJheSwgb3IgcmFuZ2UgdmFsdWUgdG8gZmlsdGVyIHdpdGhcbiAgICAgKi9cbiAgICBjb250YWluZWRCeShjb2x1bW4sIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyByYW5nZVxuICAgICAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBjZC4ke3ZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAvLyBhcnJheVxuICAgICAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBjZC57JHt2YWx1ZS5qb2luKCcsJyl9fWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8ganNvblxuICAgICAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBjZC4ke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSByZWxldmFudCBmb3IgcmFuZ2UgY29sdW1ucy4gTWF0Y2ggb25seSByb3dzIHdoZXJlIGV2ZXJ5IGVsZW1lbnQgaW5cbiAgICAgKiBgY29sdW1uYCBpcyBncmVhdGVyIHRoYW4gYW55IGVsZW1lbnQgaW4gYHJhbmdlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgcmFuZ2UgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSByYW5nZSAtIFRoZSByYW5nZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIHJhbmdlR3QoY29sdW1uLCByYW5nZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYHNyLiR7cmFuZ2V9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbGV2YW50IGZvciByYW5nZSBjb2x1bW5zLiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgZXZlcnkgZWxlbWVudCBpblxuICAgICAqIGBjb2x1bW5gIGlzIGVpdGhlciBjb250YWluZWQgaW4gYHJhbmdlYCBvciBncmVhdGVyIHRoYW4gYW55IGVsZW1lbnQgaW5cbiAgICAgKiBgcmFuZ2VgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSByYW5nZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHJhbmdlIC0gVGhlIHJhbmdlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgcmFuZ2VHdGUoY29sdW1uLCByYW5nZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYG54bC4ke3JhbmdlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSByZWxldmFudCBmb3IgcmFuZ2UgY29sdW1ucy4gTWF0Y2ggb25seSByb3dzIHdoZXJlIGV2ZXJ5IGVsZW1lbnQgaW5cbiAgICAgKiBgY29sdW1uYCBpcyBsZXNzIHRoYW4gYW55IGVsZW1lbnQgaW4gYHJhbmdlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgcmFuZ2UgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSByYW5nZSAtIFRoZSByYW5nZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIHJhbmdlTHQoY29sdW1uLCByYW5nZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYHNsLiR7cmFuZ2V9YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHJlbGV2YW50IGZvciByYW5nZSBjb2x1bW5zLiBNYXRjaCBvbmx5IHJvd3Mgd2hlcmUgZXZlcnkgZWxlbWVudCBpblxuICAgICAqIGBjb2x1bW5gIGlzIGVpdGhlciBjb250YWluZWQgaW4gYHJhbmdlYCBvciBsZXNzIHRoYW4gYW55IGVsZW1lbnQgaW5cbiAgICAgKiBgcmFuZ2VgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbHVtbiAtIFRoZSByYW5nZSBjb2x1bW4gdG8gZmlsdGVyIG9uXG4gICAgICogQHBhcmFtIHJhbmdlIC0gVGhlIHJhbmdlIHRvIGZpbHRlciB3aXRoXG4gICAgICovXG4gICAgcmFuZ2VMdGUoY29sdW1uLCByYW5nZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYG54ci4ke3JhbmdlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSByZWxldmFudCBmb3IgcmFuZ2UgY29sdW1ucy4gTWF0Y2ggb25seSByb3dzIHdoZXJlIGBjb2x1bW5gIGlzXG4gICAgICogbXV0dWFsbHkgZXhjbHVzaXZlIHRvIGByYW5nZWAgYW5kIHRoZXJlIGNhbiBiZSBubyBlbGVtZW50IGJldHdlZW4gdGhlIHR3b1xuICAgICAqIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgcmFuZ2UgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSByYW5nZSAtIFRoZSByYW5nZSB0byBmaWx0ZXIgd2l0aFxuICAgICAqL1xuICAgIHJhbmdlQWRqYWNlbnQoY29sdW1uLCByYW5nZSkge1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYGFkai4ke3JhbmdlfWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSByZWxldmFudCBmb3IgYXJyYXkgYW5kIHJhbmdlIGNvbHVtbnMuIE1hdGNoIG9ubHkgcm93cyB3aGVyZVxuICAgICAqIGBjb2x1bW5gIGFuZCBgdmFsdWVgIGhhdmUgYW4gZWxlbWVudCBpbiBjb21tb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGFycmF5IG9yIHJhbmdlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgYXJyYXkgb3IgcmFuZ2UgdmFsdWUgdG8gZmlsdGVyIHdpdGhcbiAgICAgKi9cbiAgICBvdmVybGFwcyhjb2x1bW4sIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyByYW5nZVxuICAgICAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBvdi4ke3ZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gYXJyYXlcbiAgICAgICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgb3YueyR7dmFsdWUuam9pbignLCcpfX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSByZWxldmFudCBmb3IgdGV4dCBhbmQgdHN2ZWN0b3IgY29sdW1ucy4gTWF0Y2ggb25seSByb3dzIHdoZXJlXG4gICAgICogYGNvbHVtbmAgbWF0Y2hlcyB0aGUgcXVlcnkgc3RyaW5nIGluIGBxdWVyeWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIHRleHQgb3IgdHN2ZWN0b3IgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSBxdWVyeSAtIFRoZSBxdWVyeSB0ZXh0IHRvIG1hdGNoIHdpdGhcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jb25maWcgLSBUaGUgdGV4dCBzZWFyY2ggY29uZmlndXJhdGlvbiB0byB1c2VcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50eXBlIC0gQ2hhbmdlIGhvdyB0aGUgYHF1ZXJ5YCB0ZXh0IGlzIGludGVycHJldGVkXG4gICAgICovXG4gICAgdGV4dFNlYXJjaChjb2x1bW4sIHF1ZXJ5LCB7IGNvbmZpZywgdHlwZSB9ID0ge30pIHtcbiAgICAgICAgbGV0IHR5cGVQYXJ0ID0gJyc7XG4gICAgICAgIGlmICh0eXBlID09PSAncGxhaW4nKSB7XG4gICAgICAgICAgICB0eXBlUGFydCA9ICdwbCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ3BocmFzZScpIHtcbiAgICAgICAgICAgIHR5cGVQYXJ0ID0gJ3BoJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnd2Vic2VhcmNoJykge1xuICAgICAgICAgICAgdHlwZVBhcnQgPSAndyc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZmlnUGFydCA9IGNvbmZpZyA9PT0gdW5kZWZpbmVkID8gJycgOiBgKCR7Y29uZmlnfSlgO1xuICAgICAgICB0aGlzLnVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGNvbHVtbiwgYCR7dHlwZVBhcnR9ZnRzJHtjb25maWdQYXJ0fS4ke3F1ZXJ5fWApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWF0Y2ggb25seSByb3dzIHdoZXJlIGVhY2ggY29sdW1uIGluIGBxdWVyeWAga2V5cyBpcyBlcXVhbCB0byBpdHNcbiAgICAgKiBhc3NvY2lhdGVkIHZhbHVlLiBTaG9ydGhhbmQgZm9yIG11bHRpcGxlIGAuZXEoKWBzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIG9iamVjdCB0byBmaWx0ZXIgd2l0aCwgd2l0aCBjb2x1bW4gbmFtZXMgYXMga2V5cyBtYXBwZWRcbiAgICAgKiB0byB0aGVpciBmaWx0ZXIgdmFsdWVzXG4gICAgICovXG4gICAgbWF0Y2gocXVlcnkpIHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMocXVlcnkpLmZvckVhY2goKFtjb2x1bW4sIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBlcS4ke3ZhbHVlfWApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGljaCBkb2Vzbid0IHNhdGlzZnkgdGhlIGZpbHRlci5cbiAgICAgKlxuICAgICAqIFVubGlrZSBtb3N0IGZpbHRlcnMsIGBvcGVhcmF0b3JgIGFuZCBgdmFsdWVgIGFyZSB1c2VkIGFzLWlzIGFuZCBuZWVkIHRvXG4gICAgICogZm9sbG93IFtQb3N0Z1JFU1RcbiAgICAgKiBzeW50YXhdKGh0dHBzOi8vcG9zdGdyZXN0Lm9yZy9lbi9zdGFibGUvYXBpLmh0bWwjb3BlcmF0b3JzKS4gWW91IGFsc28gbmVlZFxuICAgICAqIHRvIG1ha2Ugc3VyZSB0aGV5IGFyZSBwcm9wZXJseSBzYW5pdGl6ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sdW1uIC0gVGhlIGNvbHVtbiB0byBmaWx0ZXIgb25cbiAgICAgKiBAcGFyYW0gb3BlcmF0b3IgLSBUaGUgb3BlcmF0b3IgdG8gYmUgbmVnYXRlZCB0byBmaWx0ZXIgd2l0aCwgZm9sbG93aW5nXG4gICAgICogUG9zdGdSRVNUIHN5bnRheFxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBmaWx0ZXIgd2l0aCwgZm9sbG93aW5nIFBvc3RnUkVTVCBzeW50YXhcbiAgICAgKi9cbiAgICBub3QoY29sdW1uLCBvcGVyYXRvciwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy51cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChjb2x1bW4sIGBub3QuJHtvcGVyYXRvcn0uJHt2YWx1ZX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1hdGNoIG9ubHkgcm93cyB3aGljaCBzYXRpc2Z5IGF0IGxlYXN0IG9uZSBvZiB0aGUgZmlsdGVycy5cbiAgICAgKlxuICAgICAqIFVubGlrZSBtb3N0IGZpbHRlcnMsIGBmaWx0ZXJzYCBpcyB1c2VkIGFzLWlzIGFuZCBuZWVkcyB0byBmb2xsb3cgW1Bvc3RnUkVTVFxuICAgICAqIHN5bnRheF0oaHR0cHM6Ly9wb3N0Z3Jlc3Qub3JnL2VuL3N0YWJsZS9hcGkuaHRtbCNvcGVyYXRvcnMpLiBZb3UgYWxzbyBuZWVkXG4gICAgICogdG8gbWFrZSBzdXJlIGl0J3MgcHJvcGVybHkgc2FuaXRpemVkLlxuICAgICAqXG4gICAgICogSXQncyBjdXJyZW50bHkgbm90IHBvc3NpYmxlIHRvIGRvIGFuIGAub3IoKWAgZmlsdGVyIGFjcm9zcyBtdWx0aXBsZSB0YWJsZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmlsdGVycyAtIFRoZSBmaWx0ZXJzIHRvIHVzZSwgZm9sbG93aW5nIFBvc3RnUkVTVCBzeW50YXhcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZWZlcmVuY2VkVGFibGUgLSBTZXQgdGhpcyB0byBmaWx0ZXIgb24gcmVmZXJlbmNlZCB0YWJsZXNcbiAgICAgKiBpbnN0ZWFkIG9mIHRoZSBwYXJlbnQgdGFibGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5mb3JlaWduVGFibGUgLSBEZXByZWNhdGVkLCB1c2UgYHJlZmVyZW5jZWRUYWJsZWAgaW5zdGVhZFxuICAgICAqL1xuICAgIG9yKGZpbHRlcnMsIHsgZm9yZWlnblRhYmxlLCByZWZlcmVuY2VkVGFibGUgPSBmb3JlaWduVGFibGUsIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBrZXkgPSByZWZlcmVuY2VkVGFibGUgPyBgJHtyZWZlcmVuY2VkVGFibGV9Lm9yYCA6ICdvcic7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCBgKCR7ZmlsdGVyc30pYCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBvbmx5IHJvd3Mgd2hpY2ggc2F0aXNmeSB0aGUgZmlsdGVyLiBUaGlzIGlzIGFuIGVzY2FwZSBoYXRjaCAtIHlvdVxuICAgICAqIHNob3VsZCB1c2UgdGhlIHNwZWNpZmljIGZpbHRlciBtZXRob2RzIHdoZXJldmVyIHBvc3NpYmxlLlxuICAgICAqXG4gICAgICogVW5saWtlIG1vc3QgZmlsdGVycywgYG9wZWFyYXRvcmAgYW5kIGB2YWx1ZWAgYXJlIHVzZWQgYXMtaXMgYW5kIG5lZWQgdG9cbiAgICAgKiBmb2xsb3cgW1Bvc3RnUkVTVFxuICAgICAqIHN5bnRheF0oaHR0cHM6Ly9wb3N0Z3Jlc3Qub3JnL2VuL3N0YWJsZS9hcGkuaHRtbCNvcGVyYXRvcnMpLiBZb3UgYWxzbyBuZWVkXG4gICAgICogdG8gbWFrZSBzdXJlIHRoZXkgYXJlIHByb3Blcmx5IHNhbml0aXplZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2x1bW4gLSBUaGUgY29sdW1uIHRvIGZpbHRlciBvblxuICAgICAqIEBwYXJhbSBvcGVyYXRvciAtIFRoZSBvcGVyYXRvciB0byBmaWx0ZXIgd2l0aCwgZm9sbG93aW5nIFBvc3RnUkVTVCBzeW50YXhcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gZmlsdGVyIHdpdGgsIGZvbGxvd2luZyBQb3N0Z1JFU1Qgc3ludGF4XG4gICAgICovXG4gICAgZmlsdGVyKGNvbHVtbiwgb3BlcmF0b3IsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoY29sdW1uLCBgJHtvcGVyYXRvcn0uJHt2YWx1ZX1gKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUG9zdGdyZXN0RmlsdGVyQnVpbGRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBvc3RncmVzdEZpbHRlckJ1aWxkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgZ2V0R2xvYmFsID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gdGhlIG9ubHkgcmVsaWFibGUgbWVhbnMgdG8gZ2V0IHRoZSBnbG9iYWwgb2JqZWN0IGlzXG4gICAgLy8gYEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKClgXG4gICAgLy8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gc2VsZjsgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gd2luZG93OyB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBnbG9iYWw7IH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCcpO1xufVxuXG52YXIgZ2xvYmFsT2JqZWN0ID0gZ2V0R2xvYmFsKCk7XG5cbmV4cG9ydCBjb25zdCBmZXRjaCA9IGdsb2JhbE9iamVjdC5mZXRjaDtcblxuZXhwb3J0IGRlZmF1bHQgZ2xvYmFsT2JqZWN0LmZldGNoLmJpbmQoZ2xvYmFsT2JqZWN0KTtcblxuZXhwb3J0IGNvbnN0IEhlYWRlcnMgPSBnbG9iYWxPYmplY3QuSGVhZGVycztcbmV4cG9ydCBjb25zdCBSZXF1ZXN0ID0gZ2xvYmFsT2JqZWN0LlJlcXVlc3Q7XG5leHBvcnQgY29uc3QgUmVzcG9uc2UgPSBnbG9iYWxPYmplY3QuUmVzcG9uc2U7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdTQ1JJUFQnKVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAoIXNjcmlwdFVybCB8fCAhL15odHRwKHM/KTovLnRlc3Qoc2NyaXB0VXJsKSkpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoL15ibG9iOi8sIFwiXCIpLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0NDcxOiAwLFxuXHQ1MDg6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rbmVzdF9jaHJvbWVfZXh0ZW5zaW9uXCJdID0gc2VsZltcIndlYnBhY2tDaHVua25lc3RfY2hyb21lX2V4dGVuc2lvblwiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyByZXNvbHZlRmV0Y2ggfSBmcm9tICcuL2hlbHBlcic7XG5pbXBvcnQgeyBGdW5jdGlvbnNGZXRjaEVycm9yLCBGdW5jdGlvbnNIdHRwRXJyb3IsIEZ1bmN0aW9uc1JlbGF5RXJyb3IsIEZ1bmN0aW9uUmVnaW9uLCB9IGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uc0NsaWVudCB7XG4gICAgY29uc3RydWN0b3IodXJsLCB7IGhlYWRlcnMgPSB7fSwgY3VzdG9tRmV0Y2gsIHJlZ2lvbiA9IEZ1bmN0aW9uUmVnaW9uLkFueSwgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLnJlZ2lvbiA9IHJlZ2lvbjtcbiAgICAgICAgdGhpcy5mZXRjaCA9IHJlc29sdmVGZXRjaChjdXN0b21GZXRjaCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGF1dGhvcml6YXRpb24gaGVhZGVyXG4gICAgICogQHBhcmFtIHRva2VuIC0gdGhlIG5ldyBqd3QgdG9rZW4gc2VudCBpbiB0aGUgYXV0aG9yaXNhdGlvbiBoZWFkZXJcbiAgICAgKi9cbiAgICBzZXRBdXRoKHRva2VuKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5BdXRob3JpemF0aW9uID0gYEJlYXJlciAke3Rva2VufWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYSBmdW5jdGlvblxuICAgICAqIEBwYXJhbSBmdW5jdGlvbk5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgRnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgaW52b2tpbmcgdGhlIEZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGludm9rZShmdW5jdGlvbk5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgaGVhZGVycywgbWV0aG9kLCBib2R5OiBmdW5jdGlvbkFyZ3MgfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICAgICAgbGV0IF9oZWFkZXJzID0ge307XG4gICAgICAgICAgICAgICAgbGV0IHsgcmVnaW9uIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgICAgIGlmICghcmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbiA9IHRoaXMucmVnaW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgcmVnaW9uIGFzIHF1ZXJ5IHBhcmFtZXRlciB1c2luZyBVUkwgQVBJXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHt0aGlzLnVybH0vJHtmdW5jdGlvbk5hbWV9YCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lvbiAmJiByZWdpb24gIT09ICdhbnknKSB7XG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXJzWyd4LXJlZ2lvbiddID0gcmVnaW9uO1xuICAgICAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnZm9yY2VGdW5jdGlvblJlZ2lvbicsIHJlZ2lvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBib2R5O1xuICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbkFyZ3MgJiZcbiAgICAgICAgICAgICAgICAgICAgKChoZWFkZXJzICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpKSB8fCAhaGVhZGVycykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgZnVuY3Rpb25BcmdzIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uQXJncyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aWxsIHdvcmsgZm9yIEZpbGUgYXMgRmlsZSBpbmhlcml0cyBCbG9iXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbHNvIHdvcmtzIGZvciBBcnJheUJ1ZmZlciBhcyBpdCBpcyB0aGUgc2FtZSB1bmRlcmx5aW5nIHN0cnVjdHVyZSBhcyBhIEJsb2JcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IGZ1bmN0aW9uQXJncztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZnVuY3Rpb25BcmdzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGxhaW4gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBfaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAndGV4dC9wbGFpbic7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gZnVuY3Rpb25BcmdzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgJiYgZnVuY3Rpb25BcmdzIGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IHNldCBjb250ZW50LXR5cGUgaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVxdWVzdCB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIHRoZSByaWdodCBib3VuZGFyeSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IGZ1bmN0aW9uQXJncztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQsIGFzc3VtZSB0aGlzIGlzIEpTT05cbiAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShmdW5jdGlvbkFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5mZXRjaCh1cmwudG9TdHJpbmcoKSwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCB8fCAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIC8vIGhlYWRlcnMgcHJpb3JpdHkgaXMgKGhpZ2ggdG8gbG93KTpcbiAgICAgICAgICAgICAgICAgICAgLy8gMS4gaW52b2tlLWxldmVsIGhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgLy8gMi4gY2xpZW50LWxldmVsIGhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgLy8gMy4gZGVmYXVsdCBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBfaGVhZGVycyksIHRoaXMuaGVhZGVycyksIGhlYWRlcnMpLFxuICAgICAgICAgICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKChmZXRjaEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBGdW5jdGlvbnNGZXRjaEVycm9yKGZldGNoRXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUmVsYXlFcnJvciA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXJlbGF5LWVycm9yJyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVsYXlFcnJvciAmJiBpc1JlbGF5RXJyb3IgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRnVuY3Rpb25zUmVsYXlFcnJvcihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZ1bmN0aW9uc0h0dHBFcnJvcihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCByZXNwb25zZVR5cGUgPSAoKF9hID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAndGV4dC9wbGFpbicpLnNwbGl0KCc7JylbMF0udHJpbSgpO1xuICAgICAgICAgICAgICAgIGxldCBkYXRhO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0geWllbGQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZVR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSB5aWVsZCByZXNwb25zZS5ibG9iKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQvZXZlbnQtc3RyZWFtJykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ211bHRpcGFydC9mb3JtLWRhdGEnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSB5aWVsZCByZXNwb25zZS5mb3JtRGF0YSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSB5aWVsZCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsLCByZXNwb25zZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBlcnJvciBpbnN0YW5jZW9mIEZ1bmN0aW9uc0h0dHBFcnJvciB8fCBlcnJvciBpbnN0YW5jZW9mIEZ1bmN0aW9uc1JlbGF5RXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZXJyb3IuY29udGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RnVuY3Rpb25zQ2xpZW50LmpzLm1hcCIsImV4cG9ydCBjb25zdCByZXNvbHZlRmV0Y2ggPSAoY3VzdG9tRmV0Y2gpID0+IHtcbiAgICBsZXQgX2ZldGNoO1xuICAgIGlmIChjdXN0b21GZXRjaCkge1xuICAgICAgICBfZmV0Y2ggPSBjdXN0b21GZXRjaDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfZmV0Y2ggPSAoLi4uYXJncykgPT4gaW1wb3J0KCdAc3VwYWJhc2Uvbm9kZS1mZXRjaCcpLnRoZW4oKHsgZGVmYXVsdDogZmV0Y2ggfSkgPT4gZmV0Y2goLi4uYXJncykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgX2ZldGNoID0gZmV0Y2g7XG4gICAgfVxuICAgIHJldHVybiAoLi4uYXJncykgPT4gX2ZldGNoKC4uLmFyZ3MpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlci5qcy5tYXAiLCJpbXBvcnQgaW5kZXggZnJvbSAnLi4vY2pzL2luZGV4LmpzJ1xuY29uc3Qge1xuICBQb3N0Z3Jlc3RDbGllbnQsXG4gIFBvc3RncmVzdFF1ZXJ5QnVpbGRlcixcbiAgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcixcbiAgUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlcixcbiAgUG9zdGdyZXN0QnVpbGRlcixcbiAgUG9zdGdyZXN0RXJyb3IsXG59ID0gaW5kZXhcblxuZXhwb3J0IHtcbiAgUG9zdGdyZXN0QnVpbGRlcixcbiAgUG9zdGdyZXN0Q2xpZW50LFxuICBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyLFxuICBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXIsXG4gIFBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXIsXG4gIFBvc3RncmVzdEVycm9yLFxufVxuXG4vLyBjb21wYXRpYmlsaXR5IHdpdGggQ0pTIG91dHB1dFxuZXhwb3J0IGRlZmF1bHQge1xuICBQb3N0Z3Jlc3RDbGllbnQsXG4gIFBvc3RncmVzdFF1ZXJ5QnVpbGRlcixcbiAgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcixcbiAgUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlcixcbiAgUG9zdGdyZXN0QnVpbGRlcixcbiAgUG9zdGdyZXN0RXJyb3IsXG59XG4iLCJpbXBvcnQgeyBnZXROYXRpdmVXZWJTb2NrZXQgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuZXhwb3J0IGNvbnN0IFdlYlNvY2tldCA9IGdldE5hdGl2ZVdlYlNvY2tldCgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF0aXZlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXROYXRpdmVXZWJTb2NrZXQoKSB7XG4gICAgaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBXZWJTb2NrZXQ7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwuV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZ2xvYmFsLldlYlNvY2tldDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5XZWJTb2NrZXQgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3cuV2ViU29ja2V0O1xuICAgIGlmICh0eXBlb2Ygc2VsZi5XZWJTb2NrZXQgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBzZWxmLldlYlNvY2tldDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJgV2ViU29ja2V0YCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnRcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX1ZFUlNJT04gPSBgcmVhbHRpbWUtanMvJHt2ZXJzaW9ufWA7XG5leHBvcnQgY29uc3QgVlNOID0gJzEuMC4wJztcbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gdmVyc2lvbjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1RJTUVPVVQgPSAxMDAwMDtcbmV4cG9ydCBjb25zdCBXU19DTE9TRV9OT1JNQUwgPSAxMDAwO1xuZXhwb3J0IHZhciBTT0NLRVRfU1RBVEVTO1xuKGZ1bmN0aW9uIChTT0NLRVRfU1RBVEVTKSB7XG4gICAgU09DS0VUX1NUQVRFU1tTT0NLRVRfU1RBVEVTW1wiY29ubmVjdGluZ1wiXSA9IDBdID0gXCJjb25uZWN0aW5nXCI7XG4gICAgU09DS0VUX1NUQVRFU1tTT0NLRVRfU1RBVEVTW1wib3BlblwiXSA9IDFdID0gXCJvcGVuXCI7XG4gICAgU09DS0VUX1NUQVRFU1tTT0NLRVRfU1RBVEVTW1wiY2xvc2luZ1wiXSA9IDJdID0gXCJjbG9zaW5nXCI7XG4gICAgU09DS0VUX1NUQVRFU1tTT0NLRVRfU1RBVEVTW1wiY2xvc2VkXCJdID0gM10gPSBcImNsb3NlZFwiO1xufSkoU09DS0VUX1NUQVRFUyB8fCAoU09DS0VUX1NUQVRFUyA9IHt9KSk7XG5leHBvcnQgdmFyIENIQU5ORUxfU1RBVEVTO1xuKGZ1bmN0aW9uIChDSEFOTkVMX1NUQVRFUykge1xuICAgIENIQU5ORUxfU1RBVEVTW1wiY2xvc2VkXCJdID0gXCJjbG9zZWRcIjtcbiAgICBDSEFOTkVMX1NUQVRFU1tcImVycm9yZWRcIl0gPSBcImVycm9yZWRcIjtcbiAgICBDSEFOTkVMX1NUQVRFU1tcImpvaW5lZFwiXSA9IFwiam9pbmVkXCI7XG4gICAgQ0hBTk5FTF9TVEFURVNbXCJqb2luaW5nXCJdID0gXCJqb2luaW5nXCI7XG4gICAgQ0hBTk5FTF9TVEFURVNbXCJsZWF2aW5nXCJdID0gXCJsZWF2aW5nXCI7XG59KShDSEFOTkVMX1NUQVRFUyB8fCAoQ0hBTk5FTF9TVEFURVMgPSB7fSkpO1xuZXhwb3J0IHZhciBDSEFOTkVMX0VWRU5UUztcbihmdW5jdGlvbiAoQ0hBTk5FTF9FVkVOVFMpIHtcbiAgICBDSEFOTkVMX0VWRU5UU1tcImNsb3NlXCJdID0gXCJwaHhfY2xvc2VcIjtcbiAgICBDSEFOTkVMX0VWRU5UU1tcImVycm9yXCJdID0gXCJwaHhfZXJyb3JcIjtcbiAgICBDSEFOTkVMX0VWRU5UU1tcImpvaW5cIl0gPSBcInBoeF9qb2luXCI7XG4gICAgQ0hBTk5FTF9FVkVOVFNbXCJyZXBseVwiXSA9IFwicGh4X3JlcGx5XCI7XG4gICAgQ0hBTk5FTF9FVkVOVFNbXCJsZWF2ZVwiXSA9IFwicGh4X2xlYXZlXCI7XG4gICAgQ0hBTk5FTF9FVkVOVFNbXCJhY2Nlc3NfdG9rZW5cIl0gPSBcImFjY2Vzc190b2tlblwiO1xufSkoQ0hBTk5FTF9FVkVOVFMgfHwgKENIQU5ORUxfRVZFTlRTID0ge30pKTtcbmV4cG9ydCB2YXIgVFJBTlNQT1JUUztcbihmdW5jdGlvbiAoVFJBTlNQT1JUUykge1xuICAgIFRSQU5TUE9SVFNbXCJ3ZWJzb2NrZXRcIl0gPSBcIndlYnNvY2tldFwiO1xufSkoVFJBTlNQT1JUUyB8fCAoVFJBTlNQT1JUUyA9IHt9KSk7XG5leHBvcnQgdmFyIENPTk5FQ1RJT05fU1RBVEU7XG4oZnVuY3Rpb24gKENPTk5FQ1RJT05fU1RBVEUpIHtcbiAgICBDT05ORUNUSU9OX1NUQVRFW1wiQ29ubmVjdGluZ1wiXSA9IFwiY29ubmVjdGluZ1wiO1xuICAgIENPTk5FQ1RJT05fU1RBVEVbXCJPcGVuXCJdID0gXCJvcGVuXCI7XG4gICAgQ09OTkVDVElPTl9TVEFURVtcIkNsb3NpbmdcIl0gPSBcImNsb3NpbmdcIjtcbiAgICBDT05ORUNUSU9OX1NUQVRFW1wiQ2xvc2VkXCJdID0gXCJjbG9zZWRcIjtcbn0pKENPTk5FQ1RJT05fU1RBVEUgfHwgKENPTk5FQ1RJT05fU1RBVEUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIi8qKlxuICogSGVscGVycyB0byBjb252ZXJ0IHRoZSBjaGFuZ2UgUGF5bG9hZCBpbnRvIG5hdGl2ZSBKUyB0eXBlcy5cbiAqL1xuLy8gQWRhcHRlZCBmcm9tIGVwZ3NxbCAoc3JjL2VwZ3NxbF9iaW5hcnkuZXJsKSwgdGhpcyBtb2R1bGUgbGljZW5zZWQgdW5kZXJcbi8vIDMtY2xhdXNlIEJTRCBmb3VuZCBoZXJlOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXBnc3FsL2VwZ3NxbC9kZXZlbC9MSUNFTlNFXG5leHBvcnQgdmFyIFBvc3RncmVzVHlwZXM7XG4oZnVuY3Rpb24gKFBvc3RncmVzVHlwZXMpIHtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wiYWJzdGltZVwiXSA9IFwiYWJzdGltZVwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJib29sXCJdID0gXCJib29sXCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcImRhdGVcIl0gPSBcImRhdGVcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wiZGF0ZXJhbmdlXCJdID0gXCJkYXRlcmFuZ2VcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wiZmxvYXQ0XCJdID0gXCJmbG9hdDRcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wiZmxvYXQ4XCJdID0gXCJmbG9hdDhcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wiaW50MlwiXSA9IFwiaW50MlwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJpbnQ0XCJdID0gXCJpbnQ0XCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcImludDRyYW5nZVwiXSA9IFwiaW50NHJhbmdlXCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcImludDhcIl0gPSBcImludDhcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wiaW50OHJhbmdlXCJdID0gXCJpbnQ4cmFuZ2VcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wianNvblwiXSA9IFwianNvblwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJqc29uYlwiXSA9IFwianNvbmJcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wibW9uZXlcIl0gPSBcIm1vbmV5XCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcIm51bWVyaWNcIl0gPSBcIm51bWVyaWNcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wib2lkXCJdID0gXCJvaWRcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1wicmVsdGltZVwiXSA9IFwicmVsdGltZVwiO1xuICAgIFBvc3RncmVzVHlwZXNbXCJ0ZXh0XCJdID0gXCJ0ZXh0XCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcInRpbWVcIl0gPSBcInRpbWVcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1widGltZXN0YW1wXCJdID0gXCJ0aW1lc3RhbXBcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1widGltZXN0YW1wdHpcIl0gPSBcInRpbWVzdGFtcHR6XCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcInRpbWV0elwiXSA9IFwidGltZXR6XCI7XG4gICAgUG9zdGdyZXNUeXBlc1tcInRzcmFuZ2VcIl0gPSBcInRzcmFuZ2VcIjtcbiAgICBQb3N0Z3Jlc1R5cGVzW1widHN0enJhbmdlXCJdID0gXCJ0c3R6cmFuZ2VcIjtcbn0pKFBvc3RncmVzVHlwZXMgfHwgKFBvc3RncmVzVHlwZXMgPSB7fSkpO1xuLyoqXG4gKiBUYWtlcyBhbiBhcnJheSBvZiBjb2x1bW5zIGFuZCBhbiBvYmplY3Qgb2Ygc3RyaW5nIHZhbHVlcyB0aGVuIGNvbnZlcnRzIGVhY2ggc3RyaW5nIHZhbHVlXG4gKiB0byBpdHMgbWFwcGVkIHR5cGUuXG4gKlxuICogQHBhcmFtIHt7bmFtZTogU3RyaW5nLCB0eXBlOiBTdHJpbmd9W119IGNvbHVtbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFRoZSBtYXAgb2YgdmFyaW91cyBvcHRpb25zIHRoYXQgY2FuIGJlIGFwcGxpZWQgdG8gdGhlIG1hcHBlclxuICogQHBhcmFtIHtBcnJheX0gb3B0aW9ucy5za2lwVHlwZXMgVGhlIGFycmF5IG9mIHR5cGVzIHRoYXQgc2hvdWxkIG5vdCBiZSBjb252ZXJ0ZWRcbiAqXG4gKiBAZXhhbXBsZSBjb252ZXJ0Q2hhbmdlRGF0YShbe25hbWU6ICdmaXJzdF9uYW1lJywgdHlwZTogJ3RleHQnfSwge25hbWU6ICdhZ2UnLCB0eXBlOiAnaW50NCd9XSwge2ZpcnN0X25hbWU6ICdQYXVsJywgYWdlOiczMyd9LCB7fSlcbiAqIC8vPT57IGZpcnN0X25hbWU6ICdQYXVsJywgYWdlOiAzMyB9XG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0Q2hhbmdlRGF0YSA9IChjb2x1bW5zLCByZWNvcmQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBza2lwVHlwZXMgPSAoX2EgPSBvcHRpb25zLnNraXBUeXBlcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHJlY29yZCkucmVkdWNlKChhY2MsIHJlY19rZXkpID0+IHtcbiAgICAgICAgYWNjW3JlY19rZXldID0gY29udmVydENvbHVtbihyZWNfa2V5LCBjb2x1bW5zLCByZWNvcmQsIHNraXBUeXBlcyk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufTtcbi8qKlxuICogQ29udmVydHMgdGhlIHZhbHVlIG9mIGFuIGluZGl2aWR1YWwgY29sdW1uLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb2x1bW5OYW1lIFRoZSBjb2x1bW4gdGhhdCB5b3Ugd2FudCB0byBjb252ZXJ0XG4gKiBAcGFyYW0ge3tuYW1lOiBTdHJpbmcsIHR5cGU6IFN0cmluZ31bXX0gY29sdW1ucyBBbGwgb2YgdGhlIGNvbHVtbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWNvcmQgVGhlIG1hcCBvZiBzdHJpbmcgdmFsdWVzXG4gKiBAcGFyYW0ge0FycmF5fSBza2lwVHlwZXMgQW4gYXJyYXkgb2YgdHlwZXMgdGhhdCBzaG91bGQgbm90IGJlIGNvbnZlcnRlZFxuICogQHJldHVybiB7b2JqZWN0fSBVc2VsZXNzIGluZm9ybWF0aW9uXG4gKlxuICogQGV4YW1wbGUgY29udmVydENvbHVtbignYWdlJywgW3tuYW1lOiAnZmlyc3RfbmFtZScsIHR5cGU6ICd0ZXh0J30sIHtuYW1lOiAnYWdlJywgdHlwZTogJ2ludDQnfV0sIHtmaXJzdF9uYW1lOiAnUGF1bCcsIGFnZTogJzMzJ30sIFtdKVxuICogLy89PiAzM1xuICogQGV4YW1wbGUgY29udmVydENvbHVtbignYWdlJywgW3tuYW1lOiAnZmlyc3RfbmFtZScsIHR5cGU6ICd0ZXh0J30sIHtuYW1lOiAnYWdlJywgdHlwZTogJ2ludDQnfV0sIHtmaXJzdF9uYW1lOiAnUGF1bCcsIGFnZTogJzMzJ30sIFsnaW50NCddKVxuICogLy89PiBcIjMzXCJcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnZlcnRDb2x1bW4gPSAoY29sdW1uTmFtZSwgY29sdW1ucywgcmVjb3JkLCBza2lwVHlwZXMpID0+IHtcbiAgICBjb25zdCBjb2x1bW4gPSBjb2x1bW5zLmZpbmQoKHgpID0+IHgubmFtZSA9PT0gY29sdW1uTmFtZSk7XG4gICAgY29uc3QgY29sVHlwZSA9IGNvbHVtbiA9PT0gbnVsbCB8fCBjb2x1bW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbHVtbi50eXBlO1xuICAgIGNvbnN0IHZhbHVlID0gcmVjb3JkW2NvbHVtbk5hbWVdO1xuICAgIGlmIChjb2xUeXBlICYmICFza2lwVHlwZXMuaW5jbHVkZXMoY29sVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRDZWxsKGNvbFR5cGUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vb3AodmFsdWUpO1xufTtcbi8qKlxuICogSWYgdGhlIHZhbHVlIG9mIHRoZSBjZWxsIGlzIGBudWxsYCwgcmV0dXJucyBudWxsLlxuICogT3RoZXJ3aXNlIGNvbnZlcnRzIHRoZSBzdHJpbmcgdmFsdWUgdG8gdGhlIGNvcnJlY3QgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIEEgcG9zdGdyZXMgY29sdW1uIHR5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBUaGUgY2VsbCB2YWx1ZVxuICpcbiAqIEBleGFtcGxlIGNvbnZlcnRDZWxsKCdib29sJywgJ3QnKVxuICogLy89PiB0cnVlXG4gKiBAZXhhbXBsZSBjb252ZXJ0Q2VsbCgnaW50OCcsICcxMCcpXG4gKiAvLz0+IDEwXG4gKiBAZXhhbXBsZSBjb252ZXJ0Q2VsbCgnX2ludDQnLCAnezEsMiwzLDR9JylcbiAqIC8vPT4gWzEsMiwzLDRdXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0Q2VsbCA9ICh0eXBlLCB2YWx1ZSkgPT4ge1xuICAgIC8vIGlmIGRhdGEgdHlwZSBpcyBhbiBhcnJheVxuICAgIGlmICh0eXBlLmNoYXJBdCgwKSA9PT0gJ18nKSB7XG4gICAgICAgIGNvbnN0IGRhdGFUeXBlID0gdHlwZS5zbGljZSgxLCB0eXBlLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiB0b0FycmF5KHZhbHVlLCBkYXRhVHlwZSk7XG4gICAgfVxuICAgIC8vIElmIG5vdCBudWxsLCBjb252ZXJ0IHRvIGNvcnJlY3QgdHlwZS5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLmJvb2w6XG4gICAgICAgICAgICByZXR1cm4gdG9Cb29sZWFuKHZhbHVlKTtcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLmZsb2F0NDpcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLmZsb2F0ODpcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLmludDI6XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5pbnQ0OlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuaW50ODpcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLm51bWVyaWM6XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5vaWQ6XG4gICAgICAgICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuanNvbjpcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLmpzb25iOlxuICAgICAgICAgICAgcmV0dXJuIHRvSnNvbih2YWx1ZSk7XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy50aW1lc3RhbXA6XG4gICAgICAgICAgICByZXR1cm4gdG9UaW1lc3RhbXBTdHJpbmcodmFsdWUpOyAvLyBGb3JtYXQgdG8gYmUgY29uc2lzdGVudCB3aXRoIFBvc3RnUkVTVFxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuYWJzdGltZTogLy8gVG8gYWxsb3cgdXNlcnMgdG8gY2FzdCBpdCBiYXNlZCBvbiBUaW1lem9uZVxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuZGF0ZTogLy8gVG8gYWxsb3cgdXNlcnMgdG8gY2FzdCBpdCBiYXNlZCBvbiBUaW1lem9uZVxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuZGF0ZXJhbmdlOlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuaW50NHJhbmdlOlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMuaW50OHJhbmdlOlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMubW9uZXk6XG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy5yZWx0aW1lOiAvLyBUbyBhbGxvdyB1c2VycyB0byBjYXN0IGl0IGJhc2VkIG9uIFRpbWV6b25lXG4gICAgICAgIGNhc2UgUG9zdGdyZXNUeXBlcy50ZXh0OlxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMudGltZTogLy8gVG8gYWxsb3cgdXNlcnMgdG8gY2FzdCBpdCBiYXNlZCBvbiBUaW1lem9uZVxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMudGltZXN0YW1wdHo6IC8vIFRvIGFsbG93IHVzZXJzIHRvIGNhc3QgaXQgYmFzZWQgb24gVGltZXpvbmVcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLnRpbWV0ejogLy8gVG8gYWxsb3cgdXNlcnMgdG8gY2FzdCBpdCBiYXNlZCBvbiBUaW1lem9uZVxuICAgICAgICBjYXNlIFBvc3RncmVzVHlwZXMudHNyYW5nZTpcbiAgICAgICAgY2FzZSBQb3N0Z3Jlc1R5cGVzLnRzdHpyYW5nZTpcbiAgICAgICAgICAgIHJldHVybiBub29wKHZhbHVlKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgdmFsdWUgZm9yIHJlbWFpbmluZyB0eXBlc1xuICAgICAgICAgICAgcmV0dXJuIG5vb3AodmFsdWUpO1xuICAgIH1cbn07XG5jb25zdCBub29wID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbmV4cG9ydCBjb25zdCB0b0Jvb2xlYW4gPSAodmFsdWUpID0+IHtcbiAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn07XG5leHBvcnQgY29uc3QgdG9OdW1iZXIgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICBpZiAoIU51bWJlci5pc05hTihwYXJzZWRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuZXhwb3J0IGNvbnN0IHRvSnNvbiA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgSlNPTiBwYXJzZSBlcnJvcjogJHtlcnJvcn1gKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIFBvc3RncmVzIEFycmF5IGludG8gYSBuYXRpdmUgSlMgYXJyYXlcbiAqXG4gKiBAZXhhbXBsZSB0b0FycmF5KCd7fScsICdpbnQ0JylcbiAqIC8vPT4gW11cbiAqIEBleGFtcGxlIHRvQXJyYXkoJ3tcIlsyMDIxLTAxLTAxLDIwMjEtMTItMzEpXCIsXCIoMjAyMS0wMS0wMSwyMDIxLTEyLTMyXVwifScsICdkYXRlcmFuZ2UnKVxuICogLy89PiBbJ1syMDIxLTAxLTAxLDIwMjEtMTItMzEpJywgJygyMDIxLTAxLTAxLDIwMjEtMTItMzJdJ11cbiAqIEBleGFtcGxlIHRvQXJyYXkoWzEsMiwzLDRdLCAnaW50NCcpXG4gKiAvLz0+IFsxLDIsMyw0XVxuICovXG5leHBvcnQgY29uc3QgdG9BcnJheSA9ICh2YWx1ZSwgdHlwZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgbGFzdElkeCA9IHZhbHVlLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgY2xvc2VCcmFjZSA9IHZhbHVlW2xhc3RJZHhdO1xuICAgIGNvbnN0IG9wZW5CcmFjZSA9IHZhbHVlWzBdO1xuICAgIC8vIENvbmZpcm0gdmFsdWUgaXMgYSBQb3N0Z3JlcyBhcnJheSBieSBjaGVja2luZyBjdXJseSBicmFja2V0c1xuICAgIGlmIChvcGVuQnJhY2UgPT09ICd7JyAmJiBjbG9zZUJyYWNlID09PSAnfScpIHtcbiAgICAgICAgbGV0IGFycjtcbiAgICAgICAgY29uc3QgdmFsVHJpbSA9IHZhbHVlLnNsaWNlKDEsIGxhc3RJZHgpO1xuICAgICAgICAvLyBUT0RPOiBmaW5kIGEgYmV0dGVyIHNvbHV0aW9uIHRvIHNlcGFyYXRlIFBvc3RncmVzIGFycmF5IGRhdGFcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGFyciA9IEpTT04ucGFyc2UoJ1snICsgdmFsVHJpbSArICddJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgIC8vIFdBUk5JTkc6IHNwbGl0dGluZyBvbiBjb21tYSBkb2VzIG5vdCBjb3ZlciBhbGwgZWRnZSBjYXNlc1xuICAgICAgICAgICAgYXJyID0gdmFsVHJpbSA/IHZhbFRyaW0uc3BsaXQoJywnKSA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnIubWFwKCh2YWwpID0+IGNvbnZlcnRDZWxsKHR5cGUsIHZhbCkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuLyoqXG4gKiBGaXhlcyB0aW1lc3RhbXAgdG8gYmUgSVNPLTg2MDEuIFN3YXBzIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBkYXRlIGFuZCB0aW1lIGZvciBhICdUJ1xuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdXBhYmFzZS9zdXBhYmFzZS9pc3N1ZXMvMThcbiAqXG4gKiBAZXhhbXBsZSB0b1RpbWVzdGFtcFN0cmluZygnMjAxOS0wOS0xMCAwMDowMDowMCcpXG4gKiAvLz0+ICcyMDE5LTA5LTEwVDAwOjAwOjAwJ1xuICovXG5leHBvcnQgY29uc3QgdG9UaW1lc3RhbXBTdHJpbmcgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgnICcsICdUJyk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5leHBvcnQgY29uc3QgaHR0cEVuZHBvaW50VVJMID0gKHNvY2tldFVybCkgPT4ge1xuICAgIGxldCB1cmwgPSBzb2NrZXRVcmw7XG4gICAgdXJsID0gdXJsLnJlcGxhY2UoL153cy9pLCAnaHR0cCcpO1xuICAgIHVybCA9IHVybC5yZXBsYWNlKC8oXFwvc29ja2V0XFwvd2Vic29ja2V0fFxcL3NvY2tldHxcXC93ZWJzb2NrZXQpXFwvPyQvaSwgJycpO1xuICAgIHJldHVybiB1cmwucmVwbGFjZSgvXFwvKyQvLCAnJyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNmb3JtZXJzLmpzLm1hcCIsIi8vIFRoaXMgZmlsZSBkcmF3cyBoZWF2aWx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peC9jb21taXQvY2YwOThlOWNmN2E0NGVlNjQ3OWQzMWQ5MTFhOTdkM2M3NDMwYzZmZVxuLy8gTGljZW5zZTogaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peC9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJpYWxpemVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5IRUFERVJfTEVOR1RIID0gMTtcbiAgICB9XG4gICAgZGVjb2RlKHJhd1BheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChyYXdQYXlsb2FkLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuX2JpbmFyeURlY29kZShyYXdQYXlsb2FkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiByYXdQYXlsb2FkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKEpTT04ucGFyc2UocmF3UGF5bG9hZCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsYmFjayh7fSk7XG4gICAgfVxuICAgIF9iaW5hcnlEZWNvZGUoYnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2Rlcik7XG4gICAgfVxuICAgIF9kZWNvZGVCcm9hZGNhc3QoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKSB7XG4gICAgICAgIGNvbnN0IHRvcGljU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSk7XG4gICAgICAgIGNvbnN0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoMik7XG4gICAgICAgIGxldCBvZmZzZXQgPSB0aGlzLkhFQURFUl9MRU5HVEggKyAyO1xuICAgICAgICBjb25zdCB0b3BpYyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHRvcGljU2l6ZSkpO1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemU7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZXZlbnRTaXplKSk7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZTtcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpKSk7XG4gICAgICAgIHJldHVybiB7IHJlZjogbnVsbCwgdG9waWM6IHRvcGljLCBldmVudDogZXZlbnQsIHBheWxvYWQ6IGRhdGEgfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJpYWxpemVyLmpzLm1hcCIsIi8qKlxuICogQ3JlYXRlcyBhIHRpbWVyIHRoYXQgYWNjZXB0cyBhIGB0aW1lckNhbGNgIGZ1bmN0aW9uIHRvIHBlcmZvcm0gY2FsY3VsYXRlZCB0aW1lb3V0IHJldHJpZXMsIHN1Y2ggYXMgZXhwb25lbnRpYWwgYmFja29mZi5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAgbGV0IHJlY29ubmVjdFRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHRoaXMuY29ubmVjdCgpLCBmdW5jdGlvbih0cmllcyl7XG4gKiAgICAgIHJldHVybiBbMTAwMCwgNTAwMCwgMTAwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAqICAgIH0pXG4gKiAgICByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciAxMDAwXG4gKiAgICByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciA1MDAwXG4gKiAgICByZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gKiAgICByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciAxMDAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVyIHtcbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFjaywgdGltZXJDYWxjKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgdGhpcy50aW1lckNhbGMgPSB0aW1lckNhbGM7XG4gICAgICAgIHRoaXMudGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudHJpZXMgPSAwO1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMudGltZXJDYWxjID0gdGltZXJDYWxjO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy50cmllcyA9IDA7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICB9XG4gICAgLy8gQ2FuY2VscyBhbnkgcHJldmlvdXMgc2NoZWR1bGVUaW1lb3V0IGFuZCBzY2hlZHVsZXMgY2FsbGJhY2tcbiAgICBzY2hlZHVsZVRpbWVvdXQoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50cmllcyA9IHRoaXMudHJpZXMgKyAxO1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFjaygpO1xuICAgICAgICB9LCB0aGlzLnRpbWVyQ2FsYyh0aGlzLnRyaWVzICsgMSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVyLmpzLm1hcCIsImltcG9ydCB7IERFRkFVTFRfVElNRU9VVCB9IGZyb20gJy4uL2xpYi9jb25zdGFudHMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHVzaCB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIFB1c2hcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaGFubmVsIFRoZSBDaGFubmVsXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCwgZm9yIGV4YW1wbGUgYFwicGh4X2pvaW5cImBcbiAgICAgKiBAcGFyYW0gcGF5bG9hZCBUaGUgcGF5bG9hZCwgZm9yIGV4YW1wbGUgYHt1c2VyX2lkOiAxMjN9YFxuICAgICAqIEBwYXJhbSB0aW1lb3V0IFRoZSBwdXNoIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2hhbm5lbCwgZXZlbnQsIHBheWxvYWQgPSB7fSwgdGltZW91dCA9IERFRkFVTFRfVElNRU9VVCkge1xuICAgICAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIHRoaXMuc2VudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRpbWVvdXRUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZWYgPSAnJztcbiAgICAgICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsO1xuICAgICAgICB0aGlzLnJlY0hvb2tzID0gW107XG4gICAgICAgIHRoaXMucmVmRXZlbnQgPSBudWxsO1xuICAgIH1cbiAgICByZXNlbmQodGltZW91dCkge1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICB0aGlzLl9jYW5jZWxSZWZFdmVudCgpO1xuICAgICAgICB0aGlzLnJlZiA9ICcnO1xuICAgICAgICB0aGlzLnJlZkV2ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZW5kKCk7XG4gICAgfVxuICAgIHNlbmQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNSZWNlaXZlZCgndGltZW91dCcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFydFRpbWVvdXQoKTtcbiAgICAgICAgdGhpcy5zZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jaGFubmVsLnNvY2tldC5wdXNoKHtcbiAgICAgICAgICAgIHRvcGljOiB0aGlzLmNoYW5uZWwudG9waWMsXG4gICAgICAgICAgICBldmVudDogdGhpcy5ldmVudCxcbiAgICAgICAgICAgIHBheWxvYWQ6IHRoaXMucGF5bG9hZCxcbiAgICAgICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgICAgICBqb2luX3JlZjogdGhpcy5jaGFubmVsLl9qb2luUmVmKCksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGVQYXlsb2FkKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5wYXlsb2FkID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBheWxvYWQpLCBwYXlsb2FkKTtcbiAgICB9XG4gICAgcmVjZWl2ZShzdGF0dXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuX2hhc1JlY2VpdmVkKHN0YXR1cykpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKChfYSA9IHRoaXMucmVjZWl2ZWRSZXNwKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVjSG9va3MucHVzaCh7IHN0YXR1cywgY2FsbGJhY2sgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdGFydFRpbWVvdXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXRUaW1lcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVmID0gdGhpcy5jaGFubmVsLnNvY2tldC5fbWFrZVJlZigpO1xuICAgICAgICB0aGlzLnJlZkV2ZW50ID0gdGhpcy5jaGFubmVsLl9yZXBseUV2ZW50TmFtZSh0aGlzLnJlZik7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKHBheWxvYWQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NhbmNlbFJlZkV2ZW50KCk7XG4gICAgICAgICAgICB0aGlzLl9jYW5jZWxUaW1lb3V0KCk7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IHBheWxvYWQ7XG4gICAgICAgICAgICB0aGlzLl9tYXRjaFJlY2VpdmUocGF5bG9hZCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2hhbm5lbC5fb24odGhpcy5yZWZFdmVudCwge30sIGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy50aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcigndGltZW91dCcsIHt9KTtcbiAgICAgICAgfSwgdGhpcy50aW1lb3V0KTtcbiAgICB9XG4gICAgdHJpZ2dlcihzdGF0dXMsIHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0aGlzLnJlZkV2ZW50KVxuICAgICAgICAgICAgdGhpcy5jaGFubmVsLl90cmlnZ2VyKHRoaXMucmVmRXZlbnQsIHsgc3RhdHVzLCByZXNwb25zZSB9KTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fY2FuY2VsUmVmRXZlbnQoKTtcbiAgICAgICAgdGhpcy5fY2FuY2VsVGltZW91dCgpO1xuICAgIH1cbiAgICBfY2FuY2VsUmVmRXZlbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5yZWZFdmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhbm5lbC5fb2ZmKHRoaXMucmVmRXZlbnQsIHt9KTtcbiAgICB9XG4gICAgX2NhbmNlbFRpbWVvdXQoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRUaW1lcik7XG4gICAgICAgIHRoaXMudGltZW91dFRpbWVyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBfbWF0Y2hSZWNlaXZlKHsgc3RhdHVzLCByZXNwb25zZSwgfSkge1xuICAgICAgICB0aGlzLnJlY0hvb2tzXG4gICAgICAgICAgICAuZmlsdGVyKChoKSA9PiBoLnN0YXR1cyA9PT0gc3RhdHVzKVxuICAgICAgICAgICAgLmZvckVhY2goKGgpID0+IGguY2FsbGJhY2socmVzcG9uc2UpKTtcbiAgICB9XG4gICAgX2hhc1JlY2VpdmVkKHN0YXR1cykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlZFJlc3AgJiYgdGhpcy5yZWNlaXZlZFJlc3Auc3RhdHVzID09PSBzdGF0dXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVzaC5qcy5tYXAiLCIvKlxuICBUaGlzIGZpbGUgZHJhd3MgaGVhdmlseSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9waG9lbml4ZnJhbWV3b3JrL3Bob2VuaXgvYmxvYi9kMzQ0ZWMwYTczMmFiNGVlMjA0MjE1YjMxZGU2OWNmNGJlNzJlM2JmL2Fzc2V0cy9qcy9waG9lbml4L3ByZXNlbmNlLmpzXG4gIExpY2Vuc2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9waG9lbml4ZnJhbWV3b3JrL3Bob2VuaXgvYmxvYi9kMzQ0ZWMwYTczMmFiNGVlMjA0MjE1YjMxZGU2OWNmNGJlNzJlM2JmL0xJQ0VOU0UubWRcbiovXG5leHBvcnQgdmFyIFJFQUxUSU1FX1BSRVNFTkNFX0xJU1RFTl9FVkVOVFM7XG4oZnVuY3Rpb24gKFJFQUxUSU1FX1BSRVNFTkNFX0xJU1RFTl9FVkVOVFMpIHtcbiAgICBSRUFMVElNRV9QUkVTRU5DRV9MSVNURU5fRVZFTlRTW1wiU1lOQ1wiXSA9IFwic3luY1wiO1xuICAgIFJFQUxUSU1FX1BSRVNFTkNFX0xJU1RFTl9FVkVOVFNbXCJKT0lOXCJdID0gXCJqb2luXCI7XG4gICAgUkVBTFRJTUVfUFJFU0VOQ0VfTElTVEVOX0VWRU5UU1tcIkxFQVZFXCJdID0gXCJsZWF2ZVwiO1xufSkoUkVBTFRJTUVfUFJFU0VOQ0VfTElTVEVOX0VWRU5UUyB8fCAoUkVBTFRJTUVfUFJFU0VOQ0VfTElTVEVOX0VWRU5UUyA9IHt9KSk7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWFsdGltZVByZXNlbmNlIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgUHJlc2VuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2hhbm5lbCAtIFRoZSBSZWFsdGltZUNoYW5uZWxcbiAgICAgKiBAcGFyYW0gb3B0cyAtIFRoZSBvcHRpb25zLFxuICAgICAqICAgICAgICBmb3IgZXhhbXBsZSBge2V2ZW50czoge3N0YXRlOiAnc3RhdGUnLCBkaWZmOiAnZGlmZid9fWBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjaGFubmVsLCBvcHRzKSB7XG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXTtcbiAgICAgICAgdGhpcy5qb2luUmVmID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYWxsZXIgPSB7XG4gICAgICAgICAgICBvbkpvaW46ICgpID0+IHsgfSxcbiAgICAgICAgICAgIG9uTGVhdmU6ICgpID0+IHsgfSxcbiAgICAgICAgICAgIG9uU3luYzogKCkgPT4geyB9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBldmVudHMgPSAob3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLmV2ZW50cykgfHwge1xuICAgICAgICAgICAgc3RhdGU6ICdwcmVzZW5jZV9zdGF0ZScsXG4gICAgICAgICAgICBkaWZmOiAncHJlc2VuY2VfZGlmZicsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2hhbm5lbC5fb24oZXZlbnRzLnN0YXRlLCB7fSwgKG5ld1N0YXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IG9uSm9pbiwgb25MZWF2ZSwgb25TeW5jIH0gPSB0aGlzLmNhbGxlcjtcbiAgICAgICAgICAgIHRoaXMuam9pblJlZiA9IHRoaXMuY2hhbm5lbC5fam9pblJlZigpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFJlYWx0aW1lUHJlc2VuY2Uuc3luY1N0YXRlKHRoaXMuc3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nRGlmZnMuZm9yRWFjaCgoZGlmZikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBSZWFsdGltZVByZXNlbmNlLnN5bmNEaWZmKHRoaXMuc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW107XG4gICAgICAgICAgICBvblN5bmMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hhbm5lbC5fb24oZXZlbnRzLmRpZmYsIHt9LCAoZGlmZikgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBvbkpvaW4sIG9uTGVhdmUsIG9uU3luYyB9ID0gdGhpcy5jYWxsZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5pblBlbmRpbmdTeW5jU3RhdGUoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goZGlmZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gUmVhbHRpbWVQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpO1xuICAgICAgICAgICAgICAgIG9uU3luYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbkpvaW4oKGtleSwgY3VycmVudFByZXNlbmNlcywgbmV3UHJlc2VuY2VzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwuX3RyaWdnZXIoJ3ByZXNlbmNlJywge1xuICAgICAgICAgICAgICAgIGV2ZW50OiAnam9pbicsXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQcmVzZW5jZXMsXG4gICAgICAgICAgICAgICAgbmV3UHJlc2VuY2VzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uTGVhdmUoKGtleSwgY3VycmVudFByZXNlbmNlcywgbGVmdFByZXNlbmNlcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGFubmVsLl90cmlnZ2VyKCdwcmVzZW5jZScsIHtcbiAgICAgICAgICAgICAgICBldmVudDogJ2xlYXZlJyxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgY3VycmVudFByZXNlbmNlcyxcbiAgICAgICAgICAgICAgICBsZWZ0UHJlc2VuY2VzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uU3luYygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwuX3RyaWdnZXIoJ3ByZXNlbmNlJywgeyBldmVudDogJ3N5bmMnIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzeW5jIHRoZSBsaXN0IG9mIHByZXNlbmNlcyBvbiB0aGUgc2VydmVyIHdpdGggdGhlXG4gICAgICogY2xpZW50J3Mgc3RhdGUuXG4gICAgICpcbiAgICAgKiBBbiBvcHRpb25hbCBgb25Kb2luYCBhbmQgYG9uTGVhdmVgIGNhbGxiYWNrIGNhbiBiZSBwcm92aWRlZCB0b1xuICAgICAqIHJlYWN0IHRvIGNoYW5nZXMgaW4gdGhlIGNsaWVudCdzIGxvY2FsIHByZXNlbmNlcyBhY3Jvc3NcbiAgICAgKiBkaXNjb25uZWN0cyBhbmQgcmVjb25uZWN0cyB3aXRoIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzdGF0aWMgc3luY1N0YXRlKGN1cnJlbnRTdGF0ZSwgbmV3U3RhdGUsIG9uSm9pbiwgb25MZWF2ZSkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuY2xvbmVEZWVwKGN1cnJlbnRTdGF0ZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkU3RhdGUgPSB0aGlzLnRyYW5zZm9ybVN0YXRlKG5ld1N0YXRlKTtcbiAgICAgICAgY29uc3Qgam9pbnMgPSB7fTtcbiAgICAgICAgY29uc3QgbGVhdmVzID0ge307XG4gICAgICAgIHRoaXMubWFwKHN0YXRlLCAoa2V5LCBwcmVzZW5jZXMpID0+IHtcbiAgICAgICAgICAgIGlmICghdHJhbnNmb3JtZWRTdGF0ZVtrZXldKSB7XG4gICAgICAgICAgICAgICAgbGVhdmVzW2tleV0gPSBwcmVzZW5jZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1hcCh0cmFuc2Zvcm1lZFN0YXRlLCAoa2V5LCBuZXdQcmVzZW5jZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQcmVzZW5jZXMgPSBzdGF0ZVtrZXldO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRQcmVzZW5jZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdQcmVzZW5jZVJlZnMgPSBuZXdQcmVzZW5jZXMubWFwKChtKSA9PiBtLnByZXNlbmNlX3JlZik7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VyUHJlc2VuY2VSZWZzID0gY3VycmVudFByZXNlbmNlcy5tYXAoKG0pID0+IG0ucHJlc2VuY2VfcmVmKTtcbiAgICAgICAgICAgICAgICBjb25zdCBqb2luZWRQcmVzZW5jZXMgPSBuZXdQcmVzZW5jZXMuZmlsdGVyKChtKSA9PiBjdXJQcmVzZW5jZVJlZnMuaW5kZXhPZihtLnByZXNlbmNlX3JlZikgPCAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0UHJlc2VuY2VzID0gY3VycmVudFByZXNlbmNlcy5maWx0ZXIoKG0pID0+IG5ld1ByZXNlbmNlUmVmcy5pbmRleE9mKG0ucHJlc2VuY2VfcmVmKSA8IDApO1xuICAgICAgICAgICAgICAgIGlmIChqb2luZWRQcmVzZW5jZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBqb2luc1trZXldID0gam9pbmVkUHJlc2VuY2VzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGVmdFByZXNlbmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlYXZlc1trZXldID0gbGVmdFByZXNlbmNlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBqb2luc1trZXldID0gbmV3UHJlc2VuY2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY0RpZmYoc3RhdGUsIHsgam9pbnMsIGxlYXZlcyB9LCBvbkpvaW4sIG9uTGVhdmUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHN5bmMgYSBkaWZmIG9mIHByZXNlbmNlIGpvaW4gYW5kIGxlYXZlIGV2ZW50cyBmcm9tIHRoZVxuICAgICAqIHNlcnZlciwgYXMgdGhleSBoYXBwZW4uXG4gICAgICpcbiAgICAgKiBMaWtlIGBzeW5jU3RhdGVgLCBgc3luY0RpZmZgIGFjY2VwdHMgb3B0aW9uYWwgYG9uSm9pbmAgYW5kXG4gICAgICogYG9uTGVhdmVgIGNhbGxiYWNrcyB0byByZWFjdCB0byBhIHVzZXIgam9pbmluZyBvciBsZWF2aW5nIGZyb20gYVxuICAgICAqIGRldmljZS5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHN0YXRpYyBzeW5jRGlmZihzdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKSB7XG4gICAgICAgIGNvbnN0IHsgam9pbnMsIGxlYXZlcyB9ID0ge1xuICAgICAgICAgICAgam9pbnM6IHRoaXMudHJhbnNmb3JtU3RhdGUoZGlmZi5qb2lucyksXG4gICAgICAgICAgICBsZWF2ZXM6IHRoaXMudHJhbnNmb3JtU3RhdGUoZGlmZi5sZWF2ZXMpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIW9uSm9pbikge1xuICAgICAgICAgICAgb25Kb2luID0gKCkgPT4geyB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghb25MZWF2ZSkge1xuICAgICAgICAgICAgb25MZWF2ZSA9ICgpID0+IHsgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcChqb2lucywgKGtleSwgbmV3UHJlc2VuY2VzKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UHJlc2VuY2VzID0gKF9hID0gc3RhdGVba2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgICAgICBzdGF0ZVtrZXldID0gdGhpcy5jbG9uZURlZXAobmV3UHJlc2VuY2VzKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UHJlc2VuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBqb2luZWRQcmVzZW5jZVJlZnMgPSBzdGF0ZVtrZXldLm1hcCgobSkgPT4gbS5wcmVzZW5jZV9yZWYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1clByZXNlbmNlcyA9IGN1cnJlbnRQcmVzZW5jZXMuZmlsdGVyKChtKSA9PiBqb2luZWRQcmVzZW5jZVJlZnMuaW5kZXhPZihtLnByZXNlbmNlX3JlZikgPCAwKTtcbiAgICAgICAgICAgICAgICBzdGF0ZVtrZXldLnVuc2hpZnQoLi4uY3VyUHJlc2VuY2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uSm9pbihrZXksIGN1cnJlbnRQcmVzZW5jZXMsIG5ld1ByZXNlbmNlcyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1hcChsZWF2ZXMsIChrZXksIGxlZnRQcmVzZW5jZXMpID0+IHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50UHJlc2VuY2VzID0gc3RhdGVba2V5XTtcbiAgICAgICAgICAgIGlmICghY3VycmVudFByZXNlbmNlcylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBwcmVzZW5jZVJlZnNUb1JlbW92ZSA9IGxlZnRQcmVzZW5jZXMubWFwKChtKSA9PiBtLnByZXNlbmNlX3JlZik7XG4gICAgICAgICAgICBjdXJyZW50UHJlc2VuY2VzID0gY3VycmVudFByZXNlbmNlcy5maWx0ZXIoKG0pID0+IHByZXNlbmNlUmVmc1RvUmVtb3ZlLmluZGV4T2YobS5wcmVzZW5jZV9yZWYpIDwgMCk7XG4gICAgICAgICAgICBzdGF0ZVtrZXldID0gY3VycmVudFByZXNlbmNlcztcbiAgICAgICAgICAgIG9uTGVhdmUoa2V5LCBjdXJyZW50UHJlc2VuY2VzLCBsZWZ0UHJlc2VuY2VzKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UHJlc2VuY2VzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICBkZWxldGUgc3RhdGVba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHN0YXRpYyBtYXAob2JqLCBmdW5jKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLm1hcCgoa2V5KSA9PiBmdW5jKGtleSwgb2JqW2tleV0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlICdtZXRhcycga2V5XG4gICAgICogQ2hhbmdlICdwaHhfcmVmJyB0byAncHJlc2VuY2VfcmVmJ1xuICAgICAqIFJlbW92ZSAncGh4X3JlZicgYW5kICdwaHhfcmVmX3ByZXYnXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIHJldHVybnMge1xuICAgICAqICBhYmMxMjM6IFtcbiAgICAgKiAgICB7IHByZXNlbmNlX3JlZjogJzInLCB1c2VyX2lkOiAxIH0sXG4gICAgICogICAgeyBwcmVzZW5jZV9yZWY6ICczJywgdXNlcl9pZDogMiB9XG4gICAgICogIF1cbiAgICAgKiB9XG4gICAgICogUmVhbHRpbWVQcmVzZW5jZS50cmFuc2Zvcm1TdGF0ZSh7XG4gICAgICogIGFiYzEyMzoge1xuICAgICAqICAgIG1ldGFzOiBbXG4gICAgICogICAgICB7IHBoeF9yZWY6ICcyJywgcGh4X3JlZl9wcmV2OiAnMScgdXNlcl9pZDogMSB9LFxuICAgICAqICAgICAgeyBwaHhfcmVmOiAnMycsIHVzZXJfaWQ6IDIgfVxuICAgICAqICAgIF1cbiAgICAgKiAgfVxuICAgICAqIH0pXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzdGF0aWMgdHJhbnNmb3JtU3RhdGUoc3RhdGUpIHtcbiAgICAgICAgc3RhdGUgPSB0aGlzLmNsb25lRGVlcChzdGF0ZSk7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzdGF0ZSkucmVkdWNlKChuZXdTdGF0ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcmVzZW5jZXMgPSBzdGF0ZVtrZXldO1xuICAgICAgICAgICAgaWYgKCdtZXRhcycgaW4gcHJlc2VuY2VzKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhdGVba2V5XSA9IHByZXNlbmNlcy5tZXRhcy5tYXAoKHByZXNlbmNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlWydwcmVzZW5jZV9yZWYnXSA9IHByZXNlbmNlWydwaHhfcmVmJ107XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcmVzZW5jZVsncGh4X3JlZiddO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHJlc2VuY2VbJ3BoeF9yZWZfcHJldiddO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJlc2VuY2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZVtrZXldID0gcHJlc2VuY2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgICB9LCB7fSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBzdGF0aWMgY2xvbmVEZWVwKG9iaikge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG9uSm9pbihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNhbGxlci5vbkpvaW4gPSBjYWxsYmFjaztcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG9uTGVhdmUoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jYWxsZXIub25MZWF2ZSA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgb25TeW5jKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2FsbGVyLm9uU3luYyA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgaW5QZW5kaW5nU3luY1N0YXRlKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuam9pblJlZiB8fCB0aGlzLmpvaW5SZWYgIT09IHRoaXMuY2hhbm5lbC5fam9pblJlZigpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlYWx0aW1lUHJlc2VuY2UuanMubWFwIiwiaW1wb3J0IHsgQ0hBTk5FTF9FVkVOVFMsIENIQU5ORUxfU1RBVEVTIH0gZnJvbSAnLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCBQdXNoIGZyb20gJy4vbGliL3B1c2gnO1xuaW1wb3J0IFRpbWVyIGZyb20gJy4vbGliL3RpbWVyJztcbmltcG9ydCBSZWFsdGltZVByZXNlbmNlIGZyb20gJy4vUmVhbHRpbWVQcmVzZW5jZSc7XG5pbXBvcnQgKiBhcyBUcmFuc2Zvcm1lcnMgZnJvbSAnLi9saWIvdHJhbnNmb3JtZXJzJztcbmltcG9ydCB7IGh0dHBFbmRwb2ludFVSTCB9IGZyb20gJy4vbGliL3RyYW5zZm9ybWVycyc7XG5leHBvcnQgdmFyIFJFQUxUSU1FX1BPU1RHUkVTX0NIQU5HRVNfTElTVEVOX0VWRU5UO1xuKGZ1bmN0aW9uIChSRUFMVElNRV9QT1NUR1JFU19DSEFOR0VTX0xJU1RFTl9FVkVOVCkge1xuICAgIFJFQUxUSU1FX1BPU1RHUkVTX0NIQU5HRVNfTElTVEVOX0VWRU5UW1wiQUxMXCJdID0gXCIqXCI7XG4gICAgUkVBTFRJTUVfUE9TVEdSRVNfQ0hBTkdFU19MSVNURU5fRVZFTlRbXCJJTlNFUlRcIl0gPSBcIklOU0VSVFwiO1xuICAgIFJFQUxUSU1FX1BPU1RHUkVTX0NIQU5HRVNfTElTVEVOX0VWRU5UW1wiVVBEQVRFXCJdID0gXCJVUERBVEVcIjtcbiAgICBSRUFMVElNRV9QT1NUR1JFU19DSEFOR0VTX0xJU1RFTl9FVkVOVFtcIkRFTEVURVwiXSA9IFwiREVMRVRFXCI7XG59KShSRUFMVElNRV9QT1NUR1JFU19DSEFOR0VTX0xJU1RFTl9FVkVOVCB8fCAoUkVBTFRJTUVfUE9TVEdSRVNfQ0hBTkdFU19MSVNURU5fRVZFTlQgPSB7fSkpO1xuZXhwb3J0IHZhciBSRUFMVElNRV9MSVNURU5fVFlQRVM7XG4oZnVuY3Rpb24gKFJFQUxUSU1FX0xJU1RFTl9UWVBFUykge1xuICAgIFJFQUxUSU1FX0xJU1RFTl9UWVBFU1tcIkJST0FEQ0FTVFwiXSA9IFwiYnJvYWRjYXN0XCI7XG4gICAgUkVBTFRJTUVfTElTVEVOX1RZUEVTW1wiUFJFU0VOQ0VcIl0gPSBcInByZXNlbmNlXCI7XG4gICAgUkVBTFRJTUVfTElTVEVOX1RZUEVTW1wiUE9TVEdSRVNfQ0hBTkdFU1wiXSA9IFwicG9zdGdyZXNfY2hhbmdlc1wiO1xuICAgIFJFQUxUSU1FX0xJU1RFTl9UWVBFU1tcIlNZU1RFTVwiXSA9IFwic3lzdGVtXCI7XG59KShSRUFMVElNRV9MSVNURU5fVFlQRVMgfHwgKFJFQUxUSU1FX0xJU1RFTl9UWVBFUyA9IHt9KSk7XG5leHBvcnQgdmFyIFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVM7XG4oZnVuY3Rpb24gKFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMpIHtcbiAgICBSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTW1wiU1VCU0NSSUJFRFwiXSA9IFwiU1VCU0NSSUJFRFwiO1xuICAgIFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVNbXCJUSU1FRF9PVVRcIl0gPSBcIlRJTUVEX09VVFwiO1xuICAgIFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVNbXCJDTE9TRURcIl0gPSBcIkNMT1NFRFwiO1xuICAgIFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVNbXCJDSEFOTkVMX0VSUk9SXCJdID0gXCJDSEFOTkVMX0VSUk9SXCI7XG59KShSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTIHx8IChSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTID0ge30pKTtcbmV4cG9ydCBjb25zdCBSRUFMVElNRV9DSEFOTkVMX1NUQVRFUyA9IENIQU5ORUxfU1RBVEVTO1xuLyoqIEEgY2hhbm5lbCBpcyB0aGUgYmFzaWMgYnVpbGRpbmcgYmxvY2sgb2YgUmVhbHRpbWVcbiAqIGFuZCBuYXJyb3dzIHRoZSBzY29wZSBvZiBkYXRhIGZsb3cgdG8gc3Vic2NyaWJlZCBjbGllbnRzLlxuICogWW91IGNhbiB0aGluayBvZiBhIGNoYW5uZWwgYXMgYSBjaGF0cm9vbSB3aGVyZSBwYXJ0aWNpcGFudHMgYXJlIGFibGUgdG8gc2VlIHdobydzIG9ubGluZVxuICogYW5kIHNlbmQgYW5kIHJlY2VpdmUgbWVzc2FnZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWx0aW1lQ2hhbm5lbCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFRvcGljIG5hbWUgY2FuIGJlIGFueSBzdHJpbmcuICovXG4gICAgdG9waWMsIHBhcmFtcyA9IHsgY29uZmlnOiB7fSB9LCBzb2NrZXQpIHtcbiAgICAgICAgdGhpcy50b3BpYyA9IHRvcGljO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgICAgIHRoaXMuYmluZGluZ3MgPSB7fTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmNsb3NlZDtcbiAgICAgICAgdGhpcy5qb2luZWRPbmNlID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHVzaEJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnN1YlRvcGljID0gdG9waWMucmVwbGFjZSgvXnJlYWx0aW1lOi9pLCAnJyk7XG4gICAgICAgIHRoaXMucGFyYW1zLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgYnJvYWRjYXN0OiB7IGFjazogZmFsc2UsIHNlbGY6IGZhbHNlIH0sXG4gICAgICAgICAgICBwcmVzZW5jZTogeyBrZXk6ICcnIH0sXG4gICAgICAgICAgICBwcml2YXRlOiBmYWxzZSxcbiAgICAgICAgfSwgcGFyYW1zLmNvbmZpZyk7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHRoaXMuc29ja2V0LnRpbWVvdXQ7XG4gICAgICAgIHRoaXMuam9pblB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5qb2luLCB0aGlzLnBhcmFtcywgdGhpcy50aW1lb3V0KTtcbiAgICAgICAgdGhpcy5yZWpvaW5UaW1lciA9IG5ldyBUaW1lcigoKSA9PiB0aGlzLl9yZWpvaW5VbnRpbENvbm5lY3RlZCgpLCB0aGlzLnNvY2tldC5yZWNvbm5lY3RBZnRlck1zKTtcbiAgICAgICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKCdvaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5qb2luZWQ7XG4gICAgICAgICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLnB1c2hCdWZmZXIuZm9yRWFjaCgocHVzaEV2ZW50KSA9PiBwdXNoRXZlbnQuc2VuZCgpKTtcbiAgICAgICAgICAgIHRoaXMucHVzaEJ1ZmZlciA9IFtdO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25DbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5sb2coJ2NoYW5uZWwnLCBgY2xvc2UgJHt0aGlzLnRvcGljfSAke3RoaXMuX2pvaW5SZWYoKX1gKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5jbG9zZWQ7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25FcnJvcigocmVhc29uKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNMZWF2aW5nKCkgfHwgdGhpcy5faXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmxvZygnY2hhbm5lbCcsIGBlcnJvciAke3RoaXMudG9waWN9YCwgcmVhc29uKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkO1xuICAgICAgICAgICAgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuam9pblB1c2gucmVjZWl2ZSgndGltZW91dCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNKb2luaW5nKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5sb2coJ2NoYW5uZWwnLCBgdGltZW91dCAke3RoaXMudG9waWN9YCwgdGhpcy5qb2luUHVzaC50aW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkO1xuICAgICAgICAgICAgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX29uKENIQU5ORUxfRVZFTlRTLnJlcGx5LCB7fSwgKHBheWxvYWQsIHJlZikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcih0aGlzLl9yZXBseUV2ZW50TmFtZShyZWYpLCBwYXlsb2FkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJlc2VuY2UgPSBuZXcgUmVhbHRpbWVQcmVzZW5jZSh0aGlzKTtcbiAgICAgICAgdGhpcy5icm9hZGNhc3RFbmRwb2ludFVSTCA9XG4gICAgICAgICAgICBodHRwRW5kcG9pbnRVUkwodGhpcy5zb2NrZXQuZW5kUG9pbnQpICsgJy9hcGkvYnJvYWRjYXN0JztcbiAgICAgICAgdGhpcy5wcml2YXRlID0gdGhpcy5wYXJhbXMuY29uZmlnLnByaXZhdGUgfHwgZmFsc2U7XG4gICAgfVxuICAgIC8qKiBTdWJzY3JpYmUgcmVnaXN0ZXJzIHlvdXIgY2xpZW50IHdpdGggdGhlIHNlcnZlciAqL1xuICAgIHN1YnNjcmliZShjYWxsYmFjaywgdGltZW91dCA9IHRoaXMudGltZW91dCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoIXRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSBDSEFOTkVMX1NUQVRFUy5jbG9zZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY29uZmlnOiB7IGJyb2FkY2FzdCwgcHJlc2VuY2UsIHByaXZhdGU6IGlzUHJpdmF0ZSB9LCB9ID0gdGhpcy5wYXJhbXM7XG4gICAgICAgICAgICB0aGlzLl9vbkVycm9yKChlKSA9PiBjYWxsYmFjayA9PT0gbnVsbCB8fCBjYWxsYmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FsbGJhY2soUkVBTFRJTUVfU1VCU0NSSUJFX1NUQVRFUy5DSEFOTkVMX0VSUk9SLCBlKSk7XG4gICAgICAgICAgICB0aGlzLl9vbkNsb3NlKCgpID0+IGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTLkNMT1NFRCkpO1xuICAgICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW5QYXlsb2FkID0ge307XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgYnJvYWRjYXN0LFxuICAgICAgICAgICAgICAgIHByZXNlbmNlLFxuICAgICAgICAgICAgICAgIHBvc3RncmVzX2NoYW5nZXM6IChfYiA9IChfYSA9IHRoaXMuYmluZGluZ3MucG9zdGdyZXNfY2hhbmdlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hcCgocikgPT4gci5maWx0ZXIpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXSxcbiAgICAgICAgICAgICAgICBwcml2YXRlOiBpc1ByaXZhdGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0LmFjY2Vzc1Rva2VuVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlblBheWxvYWQuYWNjZXNzX3Rva2VuID0gdGhpcy5zb2NrZXQuYWNjZXNzVG9rZW5WYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlSm9pblBheWxvYWQoT2JqZWN0LmFzc2lnbih7IGNvbmZpZyB9LCBhY2Nlc3NUb2tlblBheWxvYWQpKTtcbiAgICAgICAgICAgIHRoaXMuam9pbmVkT25jZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9yZWpvaW4odGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLmpvaW5QdXNoXG4gICAgICAgICAgICAgICAgLnJlY2VpdmUoJ29rJywgYXN5bmMgKHsgcG9zdGdyZXNfY2hhbmdlcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LnNldEF1dGgoKTtcbiAgICAgICAgICAgICAgICBpZiAocG9zdGdyZXNfY2hhbmdlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTLlNVQlNDUklCRUQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGllbnRQb3N0Z3Jlc0JpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5wb3N0Z3Jlc19jaGFuZ2VzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiaW5kaW5nc0xlbiA9IChfYSA9IGNsaWVudFBvc3RncmVzQmluZGluZ3MgPT09IG51bGwgfHwgY2xpZW50UG9zdGdyZXNCaW5kaW5ncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xpZW50UG9zdGdyZXNCaW5kaW5ncy5sZW5ndGgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Bvc3RncmVzQmluZGluZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5kaW5nc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGllbnRQb3N0Z3Jlc0JpbmRpbmcgPSBjbGllbnRQb3N0Z3Jlc0JpbmRpbmdzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBmaWx0ZXI6IHsgZXZlbnQsIHNjaGVtYSwgdGFibGUsIGZpbHRlciB9LCB9ID0gY2xpZW50UG9zdGdyZXNCaW5kaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VydmVyUG9zdGdyZXNGaWx0ZXIgPSBwb3N0Z3Jlc19jaGFuZ2VzICYmIHBvc3RncmVzX2NoYW5nZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VydmVyUG9zdGdyZXNGaWx0ZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJQb3N0Z3Jlc0ZpbHRlci5ldmVudCA9PT0gZXZlbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJQb3N0Z3Jlc0ZpbHRlci5zY2hlbWEgPT09IHNjaGVtYSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclBvc3RncmVzRmlsdGVyLnRhYmxlID09PSB0YWJsZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclBvc3RncmVzRmlsdGVyLmZpbHRlciA9PT0gZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UG9zdGdyZXNCaW5kaW5ncy5wdXNoKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY2xpZW50UG9zdGdyZXNCaW5kaW5nKSwgeyBpZDogc2VydmVyUG9zdGdyZXNGaWx0ZXIuaWQgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTLkNIQU5ORUxfRVJST1IsIG5ldyBFcnJvcignbWlzbWF0Y2ggYmV0d2VlbiBzZXJ2ZXIgYW5kIGNsaWVudCBiaW5kaW5ncyBmb3IgcG9zdGdyZXMgY2hhbmdlcycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kaW5ncy5wb3N0Z3Jlc19jaGFuZ2VzID0gbmV3UG9zdGdyZXNCaW5kaW5ncztcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soUkVBTFRJTUVfU1VCU0NSSUJFX1NUQVRFUy5TVUJTQ1JJQkVEKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlY2VpdmUoJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWQ7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMuQ0hBTk5FTF9FUlJPUiwgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KE9iamVjdC52YWx1ZXMoZXJyb3IpLmpvaW4oJywgJykgfHwgJ2Vycm9yJykpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZWNlaXZlKCd0aW1lb3V0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhSRUFMVElNRV9TVUJTQ1JJQkVfU1RBVEVTLlRJTUVEX09VVCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHByZXNlbmNlU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXNlbmNlLnN0YXRlO1xuICAgIH1cbiAgICBhc3luYyB0cmFjayhwYXlsb2FkLCBvcHRzID0ge30pIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiAncHJlc2VuY2UnLFxuICAgICAgICAgICAgZXZlbnQ6ICd0cmFjaycsXG4gICAgICAgICAgICBwYXlsb2FkLFxuICAgICAgICB9LCBvcHRzLnRpbWVvdXQgfHwgdGhpcy50aW1lb3V0KTtcbiAgICB9XG4gICAgYXN5bmMgdW50cmFjayhvcHRzID0ge30pIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiAncHJlc2VuY2UnLFxuICAgICAgICAgICAgZXZlbnQ6ICd1bnRyYWNrJyxcbiAgICAgICAgfSwgb3B0cyk7XG4gICAgfVxuICAgIG9uKHR5cGUsIGZpbHRlciwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uKHR5cGUsIGZpbHRlciwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIG1lc3NhZ2UgaW50byB0aGUgY2hhbm5lbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIEFyZ3VtZW50cyB0byBzZW5kIHRvIGNoYW5uZWxcbiAgICAgKiBAcGFyYW0gYXJncy50eXBlIFRoZSB0eXBlIG9mIGV2ZW50IHRvIHNlbmRcbiAgICAgKiBAcGFyYW0gYXJncy5ldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgYmVpbmcgc2VudFxuICAgICAqIEBwYXJhbSBhcmdzLnBheWxvYWQgUGF5bG9hZCB0byBiZSBzZW50XG4gICAgICogQHBhcmFtIG9wdHMgT3B0aW9ucyB0byBiZSB1c2VkIGR1cmluZyB0aGUgc2VuZCBwcm9jZXNzXG4gICAgICovXG4gICAgYXN5bmMgc2VuZChhcmdzLCBvcHRzID0ge30pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCF0aGlzLl9jYW5QdXNoKCkgJiYgYXJncy50eXBlID09PSAnYnJvYWRjYXN0Jykge1xuICAgICAgICAgICAgY29uc3QgeyBldmVudCwgcGF5bG9hZDogZW5kcG9pbnRfcGF5bG9hZCB9ID0gYXJncztcbiAgICAgICAgICAgIGNvbnN0IGF1dGhvcml6YXRpb24gPSB0aGlzLnNvY2tldC5hY2Nlc3NUb2tlblZhbHVlXG4gICAgICAgICAgICAgICAgPyBgQmVhcmVyICR7dGhpcy5zb2NrZXQuYWNjZXNzVG9rZW5WYWx1ZX1gXG4gICAgICAgICAgICAgICAgOiAnJztcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBhdXRob3JpemF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBhcGlrZXk6IHRoaXMuc29ja2V0LmFwaUtleSA/IHRoaXMuc29ja2V0LmFwaUtleSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcGljOiB0aGlzLnN1YlRvcGljLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IGVuZHBvaW50X3BheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZTogdGhpcy5wcml2YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fZmV0Y2hXaXRoVGltZW91dCh0aGlzLmJyb2FkY2FzdEVuZHBvaW50VVJMLCBvcHRpb25zLCAoX2EgPSBvcHRzLnRpbWVvdXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMudGltZW91dCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgKChfYiA9IHJlc3BvbnNlLmJvZHkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYW5jZWwoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLm9rID8gJ29rJyA6ICdlcnJvcic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndGltZWQgb3V0JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZXJyb3InO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgICAgIGNvbnN0IHB1c2ggPSB0aGlzLl9wdXNoKGFyZ3MudHlwZSwgYXJncywgb3B0cy50aW1lb3V0IHx8IHRoaXMudGltZW91dCk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MudHlwZSA9PT0gJ2Jyb2FkY2FzdCcgJiYgISgoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLnBhcmFtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbmZpZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmJyb2FkY2FzdCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmFjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgnb2snKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHVzaC5yZWNlaXZlKCdvaycsICgpID0+IHJlc29sdmUoJ29rJykpO1xuICAgICAgICAgICAgICAgIHB1c2gucmVjZWl2ZSgnZXJyb3InLCAoKSA9PiByZXNvbHZlKCdlcnJvcicpKTtcbiAgICAgICAgICAgICAgICBwdXNoLnJlY2VpdmUoJ3RpbWVvdXQnLCAoKSA9PiByZXNvbHZlKCd0aW1lZCBvdXQnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVKb2luUGF5bG9hZChwYXlsb2FkKSB7XG4gICAgICAgIHRoaXMuam9pblB1c2gudXBkYXRlUGF5bG9hZChwYXlsb2FkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGVhdmVzIHRoZSBjaGFubmVsLlxuICAgICAqXG4gICAgICogVW5zdWJzY3JpYmVzIGZyb20gc2VydmVyIGV2ZW50cywgYW5kIGluc3RydWN0cyBjaGFubmVsIHRvIHRlcm1pbmF0ZSBvbiBzZXJ2ZXIuXG4gICAgICogVHJpZ2dlcnMgb25DbG9zZSgpIGhvb2tzLlxuICAgICAqXG4gICAgICogVG8gcmVjZWl2ZSBsZWF2ZSBhY2tub3dsZWRnZW1lbnRzLCB1c2UgdGhlIGEgYHJlY2VpdmVgIGhvb2sgdG8gYmluZCB0byB0aGUgc2VydmVyIGFjaywgaWU6XG4gICAgICogY2hhbm5lbC51bnN1YnNjcmliZSgpLnJlY2VpdmUoXCJva1wiLCAoKSA9PiBhbGVydChcImxlZnQhXCIpIClcbiAgICAgKi9cbiAgICB1bnN1YnNjcmliZSh0aW1lb3V0ID0gdGhpcy50aW1lb3V0KSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5sZWF2aW5nO1xuICAgICAgICBjb25zdCBvbkNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQubG9nKCdjaGFubmVsJywgYGxlYXZlICR7dGhpcy50b3BpY31gKTtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoQ0hBTk5FTF9FVkVOVFMuY2xvc2UsICdsZWF2ZScsIHRoaXMuX2pvaW5SZWYoKSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuam9pblB1c2guZGVzdHJveSgpO1xuICAgICAgICBsZXQgbGVhdmVQdXNoID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBsZWF2ZVB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5sZWF2ZSwge30sIHRpbWVvdXQpO1xuICAgICAgICAgICAgbGVhdmVQdXNoXG4gICAgICAgICAgICAgICAgLnJlY2VpdmUoJ29rJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCdvaycpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVjZWl2ZSgndGltZW91dCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBvbkNsb3NlKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgndGltZWQgb3V0Jyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZWNlaXZlKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCdlcnJvcicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZWF2ZVB1c2guc2VuZCgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9jYW5QdXNoKCkpIHtcbiAgICAgICAgICAgICAgICBsZWF2ZVB1c2gudHJpZ2dlcignb2snLCB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgbGVhdmVQdXNoID09PSBudWxsIHx8IGxlYXZlUHVzaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGVhdmVQdXNoLmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlYXJkb3duIHRoZSBjaGFubmVsLlxuICAgICAqXG4gICAgICogRGVzdHJveXMgYW5kIHN0b3BzIHJlbGF0ZWQgdGltZXJzLlxuICAgICAqL1xuICAgIHRlYXJkb3duKCkge1xuICAgICAgICB0aGlzLnB1c2hCdWZmZXIuZm9yRWFjaCgocHVzaCkgPT4gcHVzaC5kZXN0cm95KCkpO1xuICAgICAgICB0aGlzLnJlam9pblRpbWVyICYmIGNsZWFyVGltZW91dCh0aGlzLnJlam9pblRpbWVyLnRpbWVyKTtcbiAgICAgICAgdGhpcy5qb2luUHVzaC5kZXN0cm95KCk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBfZmV0Y2hXaXRoVGltZW91dCh1cmwsIG9wdGlvbnMsIHRpbWVvdXQpIHtcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgY29uc3QgaWQgPSBzZXRUaW1lb3V0KCgpID0+IGNvbnRyb2xsZXIuYWJvcnQoKSwgdGltZW91dCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5zb2NrZXQuZmV0Y2godXJsLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHNpZ25hbDogY29udHJvbGxlci5zaWduYWwgfSkpO1xuICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfcHVzaChldmVudCwgcGF5bG9hZCwgdGltZW91dCA9IHRoaXMudGltZW91dCkge1xuICAgICAgICBpZiAoIXRoaXMuam9pbmVkT25jZSkge1xuICAgICAgICAgICAgdGhyb3cgYHRyaWVkIHRvIHB1c2ggJyR7ZXZlbnR9JyB0byAnJHt0aGlzLnRvcGljfScgYmVmb3JlIGpvaW5pbmcuIFVzZSBjaGFubmVsLnN1YnNjcmliZSgpIGJlZm9yZSBwdXNoaW5nIGV2ZW50c2A7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHB1c2hFdmVudCA9IG5ldyBQdXNoKHRoaXMsIGV2ZW50LCBwYXlsb2FkLCB0aW1lb3V0KTtcbiAgICAgICAgaWYgKHRoaXMuX2NhblB1c2goKSkge1xuICAgICAgICAgICAgcHVzaEV2ZW50LnNlbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHB1c2hFdmVudC5zdGFydFRpbWVvdXQoKTtcbiAgICAgICAgICAgIHRoaXMucHVzaEJ1ZmZlci5wdXNoKHB1c2hFdmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB1c2hFdmVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGFibGUgbWVzc2FnZSBob29rXG4gICAgICpcbiAgICAgKiBSZWNlaXZlcyBhbGwgZXZlbnRzIGZvciBzcGVjaWFsaXplZCBtZXNzYWdlIGhhbmRsaW5nIGJlZm9yZSBkaXNwYXRjaGluZyB0byB0aGUgY2hhbm5lbCBjYWxsYmFja3MuXG4gICAgICogTXVzdCByZXR1cm4gdGhlIHBheWxvYWQsIG1vZGlmaWVkIG9yIHVubW9kaWZpZWQuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfb25NZXNzYWdlKF9ldmVudCwgcGF5bG9hZCwgX3JlZikge1xuICAgICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9pc01lbWJlcih0b3BpYykge1xuICAgICAgICByZXR1cm4gdGhpcy50b3BpYyA9PT0gdG9waWM7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfam9pblJlZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuam9pblB1c2gucmVmO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3RyaWdnZXIodHlwZSwgcGF5bG9hZCwgcmVmKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHR5cGVMb3dlciA9IHR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgeyBjbG9zZSwgZXJyb3IsIGxlYXZlLCBqb2luIH0gPSBDSEFOTkVMX0VWRU5UUztcbiAgICAgICAgY29uc3QgZXZlbnRzID0gW2Nsb3NlLCBlcnJvciwgbGVhdmUsIGpvaW5dO1xuICAgICAgICBpZiAocmVmICYmIGV2ZW50cy5pbmRleE9mKHR5cGVMb3dlcikgPj0gMCAmJiByZWYgIT09IHRoaXMuX2pvaW5SZWYoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBoYW5kbGVkUGF5bG9hZCA9IHRoaXMuX29uTWVzc2FnZSh0eXBlTG93ZXIsIHBheWxvYWQsIHJlZik7XG4gICAgICAgIGlmIChwYXlsb2FkICYmICFoYW5kbGVkUGF5bG9hZCkge1xuICAgICAgICAgICAgdGhyb3cgJ2NoYW5uZWwgb25NZXNzYWdlIGNhbGxiYWNrcyBtdXN0IHJldHVybiB0aGUgcGF5bG9hZCwgbW9kaWZpZWQgb3IgdW5tb2RpZmllZCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFsnaW5zZXJ0JywgJ3VwZGF0ZScsICdkZWxldGUnXS5pbmNsdWRlcyh0eXBlTG93ZXIpKSB7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmJpbmRpbmdzLnBvc3RncmVzX2NoYW5nZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maWx0ZXIoKGJpbmQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgICAgICByZXR1cm4gKCgoX2EgPSBiaW5kLmZpbHRlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmV2ZW50KSA9PT0gJyonIHx8XG4gICAgICAgICAgICAgICAgICAgICgoX2MgPSAoX2IgPSBiaW5kLmZpbHRlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmV2ZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudG9Mb2NhbGVMb3dlckNhc2UoKSkgPT09IHR5cGVMb3dlcik7XG4gICAgICAgICAgICB9KS5tYXAoKGJpbmQpID0+IGJpbmQuY2FsbGJhY2soaGFuZGxlZFBheWxvYWQsIHJlZikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKF9iID0gdGhpcy5iaW5kaW5nc1t0eXBlTG93ZXJdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZmlsdGVyKChiaW5kKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgICAgICAgICAgaWYgKFsnYnJvYWRjYXN0JywgJ3ByZXNlbmNlJywgJ3Bvc3RncmVzX2NoYW5nZXMnXS5pbmNsdWRlcyh0eXBlTG93ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgnaWQnIGluIGJpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJpbmRJZCA9IGJpbmQuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiaW5kRXZlbnQgPSAoX2EgPSBiaW5kLmZpbHRlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmV2ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChiaW5kSWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKF9iID0gcGF5bG9hZC5pZHMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pbmNsdWRlcyhiaW5kSWQpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiaW5kRXZlbnQgPT09ICcqJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYmluZEV2ZW50ID09PSBudWxsIHx8IGJpbmRFdmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYmluZEV2ZW50LnRvTG9jYWxlTG93ZXJDYXNlKCkpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChfYyA9IHBheWxvYWQuZGF0YSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJpbmRFdmVudCA9IChfZSA9IChfZCA9IGJpbmQgPT09IG51bGwgfHwgYmluZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYmluZC5maWx0ZXIpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5ldmVudCkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGJpbmRFdmVudCA9PT0gJyonIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZEV2ZW50ID09PSAoKF9mID0gcGF5bG9hZCA9PT0gbnVsbCB8fCBwYXlsb2FkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXlsb2FkLmV2ZW50KSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YudG9Mb2NhbGVMb3dlckNhc2UoKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmluZC50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IHR5cGVMb3dlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5tYXAoKGJpbmQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZWRQYXlsb2FkID09PSAnb2JqZWN0JyAmJiAnaWRzJyBpbiBoYW5kbGVkUGF5bG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3N0Z3Jlc0NoYW5nZXMgPSBoYW5kbGVkUGF5bG9hZC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHNjaGVtYSwgdGFibGUsIGNvbW1pdF90aW1lc3RhbXAsIHR5cGUsIGVycm9ycyB9ID0gcG9zdGdyZXNDaGFuZ2VzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnJpY2hlZFBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2hlbWE6IHNjaGVtYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiB0YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1pdF90aW1lc3RhbXA6IGNvbW1pdF90aW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXc6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVkUGF5bG9hZCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZW5yaWNoZWRQYXlsb2FkKSwgdGhpcy5fZ2V0UGF5bG9hZFJlY29yZHMocG9zdGdyZXNDaGFuZ2VzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJpbmQuY2FsbGJhY2soaGFuZGxlZFBheWxvYWQsIHJlZik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2lzQ2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2lzSm9pbmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuam9pbmVkO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2lzSm9pbmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmpvaW5pbmc7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfaXNMZWF2aW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMubGVhdmluZztcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9yZXBseUV2ZW50TmFtZShyZWYpIHtcbiAgICAgICAgcmV0dXJuIGBjaGFuX3JlcGx5XyR7cmVmfWA7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfb24odHlwZSwgZmlsdGVyLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB0eXBlTG93ZXIgPSB0eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGJpbmRpbmcgPSB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlTG93ZXIsXG4gICAgICAgICAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuYmluZGluZ3NbdHlwZUxvd2VyXSkge1xuICAgICAgICAgICAgdGhpcy5iaW5kaW5nc1t0eXBlTG93ZXJdLnB1c2goYmluZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzW3R5cGVMb3dlcl0gPSBbYmluZGluZ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfb2ZmKHR5cGUsIGZpbHRlcikge1xuICAgICAgICBjb25zdCB0eXBlTG93ZXIgPSB0eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIHRoaXMuYmluZGluZ3NbdHlwZUxvd2VyXSA9IHRoaXMuYmluZGluZ3NbdHlwZUxvd2VyXS5maWx0ZXIoKGJpbmQpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAhKCgoX2EgPSBiaW5kLnR5cGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b0xvY2FsZUxvd2VyQ2FzZSgpKSA9PT0gdHlwZUxvd2VyICYmXG4gICAgICAgICAgICAgICAgUmVhbHRpbWVDaGFubmVsLmlzRXF1YWwoYmluZC5maWx0ZXIsIGZpbHRlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBzdGF0aWMgaXNFcXVhbChvYmoxLCBvYmoyKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhvYmoxKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKG9iajIpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgayBpbiBvYmoxKSB7XG4gICAgICAgICAgICBpZiAob2JqMVtrXSAhPT0gb2JqMltrXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9yZWpvaW5VbnRpbENvbm5lY3RlZCgpIHtcbiAgICAgICAgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKTtcbiAgICAgICAgaWYgKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlam9pbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBjaGFubmVsIGNsb3Nlcy5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9vbkNsb3NlKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uKENIQU5ORUxfRVZFTlRTLmNsb3NlLCB7fSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgY2hhbm5lbCBlbmNvdW50ZXJlcyBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9vbkVycm9yKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uKENIQU5ORUxfRVZFTlRTLmVycm9yLCB7fSwgKHJlYXNvbikgPT4gY2FsbGJhY2socmVhc29uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzb2NrZXQgaXMgY29ubmVjdGVkIGFuZCB0aGUgY2hhbm5lbCBoYXMgYmVlbiBqb2luZWQuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfY2FuUHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5faXNKb2luZWQoKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9yZWpvaW4odGltZW91dCA9IHRoaXMudGltZW91dCkge1xuICAgICAgICBpZiAodGhpcy5faXNMZWF2aW5nKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNvY2tldC5fbGVhdmVPcGVuVG9waWModGhpcy50b3BpYyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5qb2luaW5nO1xuICAgICAgICB0aGlzLmpvaW5QdXNoLnJlc2VuZCh0aW1lb3V0KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9nZXRQYXlsb2FkUmVjb3JkcyhwYXlsb2FkKSB7XG4gICAgICAgIGNvbnN0IHJlY29yZHMgPSB7XG4gICAgICAgICAgICBuZXc6IHt9LFxuICAgICAgICAgICAgb2xkOiB7fSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHBheWxvYWQudHlwZSA9PT0gJ0lOU0VSVCcgfHwgcGF5bG9hZC50eXBlID09PSAnVVBEQVRFJykge1xuICAgICAgICAgICAgcmVjb3Jkcy5uZXcgPSBUcmFuc2Zvcm1lcnMuY29udmVydENoYW5nZURhdGEocGF5bG9hZC5jb2x1bW5zLCBwYXlsb2FkLnJlY29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBheWxvYWQudHlwZSA9PT0gJ1VQREFURScgfHwgcGF5bG9hZC50eXBlID09PSAnREVMRVRFJykge1xuICAgICAgICAgICAgcmVjb3Jkcy5vbGQgPSBUcmFuc2Zvcm1lcnMuY29udmVydENoYW5nZURhdGEocGF5bG9hZC5jb2x1bW5zLCBwYXlsb2FkLm9sZF9yZWNvcmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmRzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlYWx0aW1lQ2hhbm5lbC5qcy5tYXAiLCJpbXBvcnQgeyBXZWJTb2NrZXQgfSBmcm9tICdpc293cyc7XG5pbXBvcnQgeyBDSEFOTkVMX0VWRU5UUywgQ09OTkVDVElPTl9TVEFURSwgREVGQVVMVF9WRVJTSU9OLCBERUZBVUxUX1RJTUVPVVQsIFNPQ0tFVF9TVEFURVMsIFRSQU5TUE9SVFMsIFZTTiwgV1NfQ0xPU0VfTk9STUFMLCB9IGZyb20gJy4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgU2VyaWFsaXplciBmcm9tICcuL2xpYi9zZXJpYWxpemVyJztcbmltcG9ydCBUaW1lciBmcm9tICcuL2xpYi90aW1lcic7XG5pbXBvcnQgeyBodHRwRW5kcG9pbnRVUkwgfSBmcm9tICcuL2xpYi90cmFuc2Zvcm1lcnMnO1xuaW1wb3J0IFJlYWx0aW1lQ2hhbm5lbCBmcm9tICcuL1JlYWx0aW1lQ2hhbm5lbCc7XG5jb25zdCBub29wID0gKCkgPT4geyB9O1xuY29uc3QgV09SS0VSX1NDUklQVCA9IGBcbiAgYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKGUpID0+IHtcbiAgICBpZiAoZS5kYXRhLmV2ZW50ID09PSBcInN0YXJ0XCIpIHtcbiAgICAgIHNldEludGVydmFsKCgpID0+IHBvc3RNZXNzYWdlKHsgZXZlbnQ6IFwia2VlcEFsaXZlXCIgfSksIGUuZGF0YS5pbnRlcnZhbCk7XG4gICAgfVxuICB9KTtgO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhbHRpbWVDbGllbnQge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBTb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZW5kUG9pbnQgVGhlIHN0cmluZyBXZWJTb2NrZXQgZW5kcG9pbnQsIGllLCBcIndzOi8vZXhhbXBsZS5jb20vc29ja2V0XCIsIFwid3NzOi8vZXhhbXBsZS5jb21cIiwgXCIvc29ja2V0XCIgKGluaGVyaXRlZCBob3N0ICYgcHJvdG9jb2wpXG4gICAgICogQHBhcmFtIGh0dHBFbmRwb2ludCBUaGUgc3RyaW5nIEhUVFAgZW5kcG9pbnQsIGllLCBcImh0dHBzOi8vZXhhbXBsZS5jb21cIiwgXCIvXCIgKGluaGVyaXRlZCBob3N0ICYgcHJvdG9jb2wpXG4gICAgICogQHBhcmFtIG9wdGlvbnMudHJhbnNwb3J0IFRoZSBXZWJzb2NrZXQgVHJhbnNwb3J0LCBmb3IgZXhhbXBsZSBXZWJTb2NrZXQuIFRoaXMgY2FuIGJlIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uXG4gICAgICogQHBhcmFtIG9wdGlvbnMudGltZW91dCBUaGUgZGVmYXVsdCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byB0cmlnZ2VyIHB1c2ggdGltZW91dHMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMucGFyYW1zIFRoZSBvcHRpb25hbCBwYXJhbXMgdG8gcGFzcyB3aGVuIGNvbm5lY3RpbmcuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuaGVhZGVycyBEZXByZWNhdGVkOiBoZWFkZXJzIGNhbm5vdCBiZSBzZXQgb24gd2Vic29ja2V0IGNvbm5lY3Rpb25zIGFuZCB0aGlzIG9wdGlvbiB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5oZWFydGJlYXRJbnRlcnZhbE1zIFRoZSBtaWxsaXNlYyBpbnRlcnZhbCB0byBzZW5kIGEgaGVhcnRiZWF0IG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMubG9nZ2VyIFRoZSBvcHRpb25hbCBmdW5jdGlvbiBmb3Igc3BlY2lhbGl6ZWQgbG9nZ2luZywgaWU6IGxvZ2dlcjogKGtpbmQsIG1zZywgZGF0YSkgPT4geyBjb25zb2xlLmxvZyhgJHtraW5kfTogJHttc2d9YCwgZGF0YSkgfVxuICAgICAqIEBwYXJhbSBvcHRpb25zLmxvZ0xldmVsIFNldHMgdGhlIGxvZyBsZXZlbCBmb3IgUmVhbHRpbWVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5lbmNvZGUgVGhlIGZ1bmN0aW9uIHRvIGVuY29kZSBvdXRnb2luZyBtZXNzYWdlcy4gRGVmYXVsdHMgdG8gSlNPTjogKHBheWxvYWQsIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhKU09OLnN0cmluZ2lmeShwYXlsb2FkKSlcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kZWNvZGUgVGhlIGZ1bmN0aW9uIHRvIGRlY29kZSBpbmNvbWluZyBtZXNzYWdlcy4gRGVmYXVsdHMgdG8gU2VyaWFsaXplcidzIGRlY29kZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZWNvbm5lY3RBZnRlck1zIGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWlsbHNlYyByZWNvbm5lY3QgaW50ZXJ2YWwuIERlZmF1bHRzIHRvIHN0ZXBwZWQgYmFja29mZiBvZmYuXG4gICAgICogQHBhcmFtIG9wdGlvbnMud29ya2VyIFVzZSBXZWIgV29ya2VyIHRvIHNldCBhIHNpZGUgZmxvdy4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMud29ya2VyVXJsIFRoZSBVUkwgb2YgdGhlIHdvcmtlciBzY3JpcHQuIERlZmF1bHRzIHRvIGh0dHBzOi8vcmVhbHRpbWUuc3VwYWJhc2UuY29tL3dvcmtlci5qcyB0aGF0IGluY2x1ZGVzIGEgaGVhcnRiZWF0IGV2ZW50IGNhbGwgdG8ga2VlcCB0aGUgY29ubmVjdGlvbiBhbGl2ZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbmRQb2ludCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW5WYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYXBpS2V5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaGFubmVscyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLmVuZFBvaW50ID0gJyc7XG4gICAgICAgIHRoaXMuaHR0cEVuZHBvaW50ID0gJyc7XG4gICAgICAgIC8qKiBAZGVwcmVjYXRlZCBoZWFkZXJzIGNhbm5vdCBiZSBzZXQgb24gd2Vic29ja2V0IGNvbm5lY3Rpb25zICovXG4gICAgICAgIHRoaXMuaGVhZGVycyA9IHt9O1xuICAgICAgICB0aGlzLnBhcmFtcyA9IHt9O1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBERUZBVUxUX1RJTUVPVVQ7XG4gICAgICAgIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcyA9IDI1MDAwO1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsO1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdENhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgdGhpcy5yZWYgPSAwO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IG5vb3A7XG4gICAgICAgIHRoaXMuY29ubiA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnNlcmlhbGl6ZXIgPSBuZXcgU2VyaWFsaXplcigpO1xuICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgb3BlbjogW10sXG4gICAgICAgICAgICBjbG9zZTogW10sXG4gICAgICAgICAgICBlcnJvcjogW10sXG4gICAgICAgICAgICBtZXNzYWdlOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2UgZWl0aGVyIGN1c3RvbSBmZXRjaCwgaWYgcHJvdmlkZWQsIG9yIGRlZmF1bHQgZmV0Y2ggdG8gbWFrZSBIVFRQIHJlcXVlc3RzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcmVzb2x2ZUZldGNoID0gKGN1c3RvbUZldGNoKSA9PiB7XG4gICAgICAgICAgICBsZXQgX2ZldGNoO1xuICAgICAgICAgICAgaWYgKGN1c3RvbUZldGNoKSB7XG4gICAgICAgICAgICAgICAgX2ZldGNoID0gY3VzdG9tRmV0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgX2ZldGNoID0gKC4uLmFyZ3MpID0+IGltcG9ydCgnQHN1cGFiYXNlL25vZGUtZmV0Y2gnKS50aGVuKCh7IGRlZmF1bHQ6IGZldGNoIH0pID0+IGZldGNoKC4uLmFyZ3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9mZXRjaCA9IGZldGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiBfZmV0Y2goLi4uYXJncyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW5kUG9pbnQgPSBgJHtlbmRQb2ludH0vJHtUUkFOU1BPUlRTLndlYnNvY2tldH1gO1xuICAgICAgICB0aGlzLmh0dHBFbmRwb2ludCA9IGh0dHBFbmRwb2ludFVSTChlbmRQb2ludCk7XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudHJhbnNwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IG9wdGlvbnMudHJhbnNwb3J0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucGFyYW1zKVxuICAgICAgICAgICAgdGhpcy5wYXJhbXMgPSBvcHRpb25zLnBhcmFtcztcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50aW1lb3V0KVxuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0O1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvZ2dlcilcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyID0gb3B0aW9ucy5sb2dnZXI7XG4gICAgICAgIGlmICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvZ0xldmVsKSB8fCAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvZ19sZXZlbCkpIHtcbiAgICAgICAgICAgIHRoaXMubG9nTGV2ZWwgPSBvcHRpb25zLmxvZ0xldmVsIHx8IG9wdGlvbnMubG9nX2xldmVsO1xuICAgICAgICAgICAgdGhpcy5wYXJhbXMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMucGFyYW1zKSwgeyBsb2dfbGV2ZWw6IHRoaXMubG9nTGV2ZWwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICAgICAgICAgICAgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zID0gb3B0aW9ucy5oZWFydGJlYXRJbnRlcnZhbE1zO1xuICAgICAgICBjb25zdCBhY2Nlc3NUb2tlblZhbHVlID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBhcmFtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFwaWtleTtcbiAgICAgICAgaWYgKGFjY2Vzc1Rva2VuVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzVG9rZW5WYWx1ZSA9IGFjY2Vzc1Rva2VuVmFsdWU7XG4gICAgICAgICAgICB0aGlzLmFwaUtleSA9IGFjY2Vzc1Rva2VuVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWNvbm5lY3RBZnRlck1zID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZWNvbm5lY3RBZnRlck1zKVxuICAgICAgICAgICAgPyBvcHRpb25zLnJlY29ubmVjdEFmdGVyTXNcbiAgICAgICAgICAgIDogKHRyaWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsxMDAwLCAyMDAwLCA1MDAwLCAxMDAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuZW5jb2RlID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5lbmNvZGUpXG4gICAgICAgICAgICA/IG9wdGlvbnMuZW5jb2RlXG4gICAgICAgICAgICA6IChwYXlsb2FkLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlY29kZSA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVjb2RlKVxuICAgICAgICAgICAgPyBvcHRpb25zLmRlY29kZVxuICAgICAgICAgICAgOiB0aGlzLnNlcmlhbGl6ZXIuZGVjb2RlLmJpbmQodGhpcy5zZXJpYWxpemVyKTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lciA9IG5ldyBUaW1lcihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdCgpO1xuICAgICAgICB9LCB0aGlzLnJlY29ubmVjdEFmdGVyTXMpO1xuICAgICAgICB0aGlzLmZldGNoID0gdGhpcy5fcmVzb2x2ZUZldGNoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mZXRjaCk7XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud29ya2VyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpbmRvdy5Xb3JrZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYiBXb3JrZXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53b3JrZXIgPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndvcmtlcikgfHwgZmFsc2U7XG4gICAgICAgICAgICB0aGlzLndvcmtlclVybCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53b3JrZXJVcmw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWNjZXNzVG9rZW4pIHx8IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbm5lY3RzIHRoZSBzb2NrZXQsIHVubGVzcyBhbHJlYWR5IGNvbm5lY3RlZC5cbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSBXZWJTb2NrZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0cmFuc3BvcnQgcHJvdmlkZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbm4gPSBuZXcgdGhpcy50cmFuc3BvcnQodGhpcy5lbmRwb2ludFVSTCgpKTtcbiAgICAgICAgdGhpcy5zZXR1cENvbm5lY3Rpb24oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgVVJMIG9mIHRoZSB3ZWJzb2NrZXQuXG4gICAgICogQHJldHVybnMgc3RyaW5nIFRoZSBVUkwgb2YgdGhlIHdlYnNvY2tldC5cbiAgICAgKi9cbiAgICBlbmRwb2ludFVSTCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGVuZFBhcmFtcyh0aGlzLmVuZFBvaW50LCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBhcmFtcywgeyB2c246IFZTTiB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29kZSBBIG51bWVyaWMgc3RhdHVzIGNvZGUgdG8gc2VuZCBvbiBkaXNjb25uZWN0LlxuICAgICAqIEBwYXJhbSByZWFzb24gQSBjdXN0b20gcmVhc29uIGZvciB0aGUgZGlzY29ubmVjdC5cbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KGNvZGUsIHJlYXNvbikge1xuICAgICAgICBpZiAodGhpcy5jb25uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm4ub25jbG9zZSA9IGZ1bmN0aW9uICgpIHsgfTsgLy8gbm9vcFxuICAgICAgICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm4uY2xvc2UoY29kZSwgcmVhc29uICE9PSBudWxsICYmIHJlYXNvbiAhPT0gdm9pZCAwID8gcmVhc29uIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25uLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbm4gPSBudWxsO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9wZW4gaGFuZGxlc1xuICAgICAgICAgICAgdGhpcy5oZWFydGJlYXRUaW1lciAmJiBjbGVhckludGVydmFsKHRoaXMuaGVhcnRiZWF0VGltZXIpO1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5jaGFubmVscy5mb3JFYWNoKChjaGFubmVsKSA9PiBjaGFubmVsLnRlYXJkb3duKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIGNyZWF0ZWQgY2hhbm5lbHNcbiAgICAgKi9cbiAgICBnZXRDaGFubmVscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyBhbmQgcmVtb3ZlcyBhIHNpbmdsZSBjaGFubmVsXG4gICAgICogQHBhcmFtIGNoYW5uZWwgQSBSZWFsdGltZUNoYW5uZWwgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBhc3luYyByZW1vdmVDaGFubmVsKGNoYW5uZWwpIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgY2hhbm5lbC51bnN1YnNjcmliZSgpO1xuICAgICAgICBpZiAodGhpcy5jaGFubmVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyBhbmQgcmVtb3ZlcyBhbGwgY2hhbm5lbHNcbiAgICAgKi9cbiAgICBhc3luYyByZW1vdmVBbGxDaGFubmVscygpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzXzEgPSBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLmNoYW5uZWxzLm1hcCgoY2hhbm5lbCkgPT4gY2hhbm5lbC51bnN1YnNjcmliZSgpKSk7XG4gICAgICAgIHRoaXMuY2hhbm5lbHMgPSBbXTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgIHJldHVybiB2YWx1ZXNfMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9ncyB0aGUgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEZvciBjdXN0b21pemVkIGxvZ2dpbmcsIGB0aGlzLmxvZ2dlcmAgY2FuIGJlIG92ZXJyaWRkZW4uXG4gICAgICovXG4gICAgbG9nKGtpbmQsIG1zZywgZGF0YSkge1xuICAgICAgICB0aGlzLmxvZ2dlcihraW5kLCBtc2csIGRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzb2NrZXQuXG4gICAgICovXG4gICAgY29ubmVjdGlvblN0YXRlKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY29ubiAmJiB0aGlzLmNvbm4ucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBTT0NLRVRfU1RBVEVTLmNvbm5lY3Rpbmc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIENPTk5FQ1RJT05fU1RBVEUuQ29ubmVjdGluZztcbiAgICAgICAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5vcGVuOlxuICAgICAgICAgICAgICAgIHJldHVybiBDT05ORUNUSU9OX1NUQVRFLk9wZW47XG4gICAgICAgICAgICBjYXNlIFNPQ0tFVF9TVEFURVMuY2xvc2luZzpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ09OTkVDVElPTl9TVEFURS5DbG9zaW5nO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ09OTkVDVElPTl9TVEFURS5DbG9zZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaXMgdGhlIGNvbm5lY3Rpb24gaXMgb3Blbi5cbiAgICAgKi9cbiAgICBpc0Nvbm5lY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvblN0YXRlKCkgPT09IENPTk5FQ1RJT05fU1RBVEUuT3BlbjtcbiAgICB9XG4gICAgY2hhbm5lbCh0b3BpYywgcGFyYW1zID0geyBjb25maWc6IHt9IH0pIHtcbiAgICAgICAgY29uc3QgcmVhbHRpbWVUb3BpYyA9IGByZWFsdGltZToke3RvcGljfWA7XG4gICAgICAgIGNvbnN0IGV4aXN0cyA9IHRoaXMuZ2V0Q2hhbm5lbHMoKS5maW5kKChjKSA9PiBjLnRvcGljID09PSByZWFsdGltZVRvcGljKTtcbiAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW4gPSBuZXcgUmVhbHRpbWVDaGFubmVsKGByZWFsdGltZToke3RvcGljfWAsIHBhcmFtcywgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxzLnB1c2goY2hhbik7XG4gICAgICAgICAgICByZXR1cm4gY2hhbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBleGlzdHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUHVzaCBvdXQgYSBtZXNzYWdlIGlmIHRoZSBzb2NrZXQgaXMgY29ubmVjdGVkLlxuICAgICAqXG4gICAgICogSWYgdGhlIHNvY2tldCBpcyBub3QgY29ubmVjdGVkLCB0aGUgbWVzc2FnZSBnZXRzIGVucXVldWVkIHdpdGhpbiBhIGxvY2FsIGJ1ZmZlciwgYW5kIHNlbnQgb3V0IHdoZW4gYSBjb25uZWN0aW9uIGlzIG5leHQgZXN0YWJsaXNoZWQuXG4gICAgICovXG4gICAgcHVzaChkYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgdG9waWMsIGV2ZW50LCBwYXlsb2FkLCByZWYgfSA9IGRhdGE7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbmNvZGUoZGF0YSwgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLmNvbm4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZW5kKHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5sb2coJ3B1c2gnLCBgJHt0b3BpY30gJHtldmVudH0gKCR7cmVmfSlgLCBwYXlsb2FkKTtcbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBKV1QgYWNjZXNzIHRva2VuIHVzZWQgZm9yIGNoYW5uZWwgc3Vic2NyaXB0aW9uIGF1dGhvcml6YXRpb24gYW5kIFJlYWx0aW1lIFJMUy5cbiAgICAgKlxuICAgICAqIElmIHBhcmFtIGlzIG51bGwgaXQgd2lsbCB1c2UgdGhlIGBhY2Nlc3NUb2tlbmAgY2FsbGJhY2sgZnVuY3Rpb24gb3IgdGhlIHRva2VuIHNldCBvbiB0aGUgY2xpZW50LlxuICAgICAqXG4gICAgICogT24gY2FsbGJhY2sgdXNlZCwgaXQgd2lsbCBzZXQgdGhlIHZhbHVlIG9mIHRoZSB0b2tlbiBpbnRlcm5hbCB0byB0aGUgY2xpZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRva2VuIEEgSldUIHN0cmluZyB0byBvdmVycmlkZSB0aGUgdG9rZW4gc2V0IG9uIHRoZSBjbGllbnQuXG4gICAgICovXG4gICAgYXN5bmMgc2V0QXV0aCh0b2tlbiA9IG51bGwpIHtcbiAgICAgICAgbGV0IHRva2VuVG9TZW5kID0gdG9rZW4gfHxcbiAgICAgICAgICAgICh0aGlzLmFjY2Vzc1Rva2VuICYmIChhd2FpdCB0aGlzLmFjY2Vzc1Rva2VuKCkpKSB8fFxuICAgICAgICAgICAgdGhpcy5hY2Nlc3NUb2tlblZhbHVlO1xuICAgICAgICBpZiAodGhpcy5hY2Nlc3NUb2tlblZhbHVlICE9IHRva2VuVG9TZW5kKSB7XG4gICAgICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuVmFsdWUgPSB0b2tlblRvU2VuZDtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbHMuZm9yRWFjaCgoY2hhbm5lbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc190b2tlbjogdG9rZW5Ub1NlbmQsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246IERFRkFVTFRfVkVSU0lPTixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRva2VuVG9TZW5kICYmIGNoYW5uZWwudXBkYXRlSm9pblBheWxvYWQocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5uZWwuam9pbmVkT25jZSAmJiBjaGFubmVsLl9pc0pvaW5lZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwuX3B1c2goQ0hBTk5FTF9FVkVOVFMuYWNjZXNzX3Rva2VuLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW46IHRva2VuVG9TZW5kLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIGhlYXJ0YmVhdCBtZXNzYWdlIGlmIHRoZSBzb2NrZXQgaXMgY29ubmVjdGVkLlxuICAgICAqL1xuICAgIGFzeW5jIHNlbmRIZWFydGJlYXQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhcnRiZWF0Q2FsbGJhY2soJ2Rpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYpIHtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmxvZygndHJhbnNwb3J0JywgJ2hlYXJ0YmVhdCB0aW1lb3V0LiBBdHRlbXB0aW5nIHRvIHJlLWVzdGFibGlzaCBjb25uZWN0aW9uJyk7XG4gICAgICAgICAgICB0aGlzLmhlYXJ0YmVhdENhbGxiYWNrKCd0aW1lb3V0Jyk7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmNvbm4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9zZShXU19DTE9TRV9OT1JNQUwsICdoZWFyYmVhdCB0aW1lb3V0Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gdGhpcy5fbWFrZVJlZigpO1xuICAgICAgICB0aGlzLnB1c2goe1xuICAgICAgICAgICAgdG9waWM6ICdwaG9lbml4JyxcbiAgICAgICAgICAgIGV2ZW50OiAnaGVhcnRiZWF0JyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHt9LFxuICAgICAgICAgICAgcmVmOiB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdENhbGxiYWNrKCdzZW50Jyk7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0QXV0aCgpO1xuICAgIH1cbiAgICBvbkhlYXJ0YmVhdChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZsdXNoZXMgc2VuZCBidWZmZXJcbiAgICAgKi9cbiAgICBmbHVzaFNlbmRCdWZmZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKChjYWxsYmFjaykgPT4gY2FsbGJhY2soKSk7XG4gICAgICAgICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIG5leHQgbWVzc2FnZSByZWYsIGFjY291bnRpbmcgZm9yIG92ZXJmbG93c1xuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX21ha2VSZWYoKSB7XG4gICAgICAgIGxldCBuZXdSZWYgPSB0aGlzLnJlZiArIDE7XG4gICAgICAgIGlmIChuZXdSZWYgPT09IHRoaXMucmVmKSB7XG4gICAgICAgICAgICB0aGlzLnJlZiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlZiA9IG5ld1JlZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZWYudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmUgZnJvbSBjaGFubmVscyB3aXRoIHRoZSBzcGVjaWZpZWQgdG9waWMuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfbGVhdmVPcGVuVG9waWModG9waWMpIHtcbiAgICAgICAgbGV0IGR1cENoYW5uZWwgPSB0aGlzLmNoYW5uZWxzLmZpbmQoKGMpID0+IGMudG9waWMgPT09IHRvcGljICYmIChjLl9pc0pvaW5lZCgpIHx8IGMuX2lzSm9pbmluZygpKSk7XG4gICAgICAgIGlmIChkdXBDaGFubmVsKSB7XG4gICAgICAgICAgICB0aGlzLmxvZygndHJhbnNwb3J0JywgYGxlYXZpbmcgZHVwbGljYXRlIHRvcGljIFwiJHt0b3BpY31cImApO1xuICAgICAgICAgICAgZHVwQ2hhbm5lbC51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBzdWJzY3JpcHRpb24gZnJvbSB0aGUgc29ja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNoYW5uZWwgQW4gb3BlbiBzdWJzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfcmVtb3ZlKGNoYW5uZWwpIHtcbiAgICAgICAgdGhpcy5jaGFubmVscyA9IHRoaXMuY2hhbm5lbHMuZmlsdGVyKChjKSA9PiBjLnRvcGljICE9PSBjaGFubmVsLnRvcGljKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB1cCBjb25uZWN0aW9uIGhhbmRsZXJzLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc2V0dXBDb25uZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5jb25uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm4uYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgICAgICB0aGlzLmNvbm4ub25vcGVuID0gKCkgPT4gdGhpcy5fb25Db25uT3BlbigpO1xuICAgICAgICAgICAgdGhpcy5jb25uLm9uZXJyb3IgPSAoZXJyb3IpID0+IHRoaXMuX29uQ29ubkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuY29ubi5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuX29uQ29ubk1lc3NhZ2UoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5jb25uLm9uY2xvc2UgPSAoZXZlbnQpID0+IHRoaXMuX29uQ29ubkNsb3NlKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX29uQ29ubk1lc3NhZ2UocmF3TWVzc2FnZSkge1xuICAgICAgICB0aGlzLmRlY29kZShyYXdNZXNzYWdlLmRhdGEsIChtc2cpID0+IHtcbiAgICAgICAgICAgIGxldCB7IHRvcGljLCBldmVudCwgcGF5bG9hZCwgcmVmIH0gPSBtc2c7XG4gICAgICAgICAgICBpZiAodG9waWMgPT09ICdwaG9lbml4JyAmJiBldmVudCA9PT0gJ3BoeF9yZXBseScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYXJ0YmVhdENhbGxiYWNrKG1zZy5wYXlsb2FkLnN0YXR1cyA9PSAnb2snID8gJ29rJyA6ICdlcnJvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlZiAmJiByZWYgPT09IHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZikge1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxvZygncmVjZWl2ZScsIGAke3BheWxvYWQuc3RhdHVzIHx8ICcnfSAke3RvcGljfSAke2V2ZW50fSAkeyhyZWYgJiYgJygnICsgcmVmICsgJyknKSB8fCAnJ31gLCBwYXlsb2FkKTtcbiAgICAgICAgICAgIEFycmF5LmZyb20odGhpcy5jaGFubmVscylcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChjaGFubmVsKSA9PiBjaGFubmVsLl9pc01lbWJlcih0b3BpYykpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKGNoYW5uZWwpID0+IGNoYW5uZWwuX3RyaWdnZXIoZXZlbnQsIHBheWxvYWQsIHJlZikpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjayhtc2cpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfb25Db25uT3BlbigpIHtcbiAgICAgICAgdGhpcy5sb2coJ3RyYW5zcG9ydCcsIGBjb25uZWN0ZWQgdG8gJHt0aGlzLmVuZHBvaW50VVJMKCl9YCk7XG4gICAgICAgIHRoaXMuZmx1c2hTZW5kQnVmZmVyKCk7XG4gICAgICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKTtcbiAgICAgICAgaWYgKCF0aGlzLndvcmtlcikge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRIZWFydGJlYXQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy53b3JrZXJSZWYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFdvcmtlckhlYXJ0YmVhdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mub3Blbi5mb3JFYWNoKChjYWxsYmFjaykgPT4gY2FsbGJhY2soKSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfc3RhcnRIZWFydGJlYXQoKSB7XG4gICAgICAgIHRoaXMuaGVhcnRiZWF0VGltZXIgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLmhlYXJ0YmVhdFRpbWVyKTtcbiAgICAgICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IHNldEludGVydmFsKCgpID0+IHRoaXMuc2VuZEhlYXJ0YmVhdCgpLCB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3N0YXJ0V29ya2VySGVhcnRiZWF0KCkge1xuICAgICAgICBpZiAodGhpcy53b3JrZXJVcmwpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKCd3b3JrZXInLCBgc3RhcnRpbmcgd29ya2VyIGZvciBmcm9tICR7dGhpcy53b3JrZXJVcmx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZygnd29ya2VyJywgYHN0YXJ0aW5nIGRlZmF1bHQgd29ya2VyYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2JqZWN0VXJsID0gdGhpcy5fd29ya2VyT2JqZWN0VXJsKHRoaXMud29ya2VyVXJsKTtcbiAgICAgICAgdGhpcy53b3JrZXJSZWYgPSBuZXcgV29ya2VyKG9iamVjdFVybCk7XG4gICAgICAgIHRoaXMud29ya2VyUmVmLm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nKCd3b3JrZXInLCAnd29ya2VyIGVycm9yJywgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB0aGlzLndvcmtlclJlZi50ZXJtaW5hdGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy53b3JrZXJSZWYub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YS5ldmVudCA9PT0gJ2tlZXBBbGl2ZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRIZWFydGJlYXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy53b3JrZXJSZWYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgZXZlbnQ6ICdzdGFydCcsXG4gICAgICAgICAgICBpbnRlcnZhbDogdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9vbkNvbm5DbG9zZShldmVudCkge1xuICAgICAgICB0aGlzLmxvZygndHJhbnNwb3J0JywgJ2Nsb3NlJywgZXZlbnQpO1xuICAgICAgICB0aGlzLl90cmlnZ2VyQ2hhbkVycm9yKCk7XG4gICAgICAgIHRoaXMuaGVhcnRiZWF0VGltZXIgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLmhlYXJ0YmVhdFRpbWVyKTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKTtcbiAgICAgICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5jbG9zZS5mb3JFYWNoKChjYWxsYmFjaykgPT4gY2FsbGJhY2soZXZlbnQpKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9vbkNvbm5FcnJvcihlcnJvcikge1xuICAgICAgICB0aGlzLmxvZygndHJhbnNwb3J0JywgYCR7ZXJyb3J9YCk7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJDaGFuRXJyb3IoKTtcbiAgICAgICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5lcnJvci5mb3JFYWNoKChjYWxsYmFjaykgPT4gY2FsbGJhY2soZXJyb3IpKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF90cmlnZ2VyQ2hhbkVycm9yKCkge1xuICAgICAgICB0aGlzLmNoYW5uZWxzLmZvckVhY2goKGNoYW5uZWwpID0+IGNoYW5uZWwuX3RyaWdnZXIoQ0hBTk5FTF9FVkVOVFMuZXJyb3IpKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9hcHBlbmRQYXJhbXModXJsLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHVybC5tYXRjaCgvXFw/LykgPyAnJicgOiAnPyc7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMpO1xuICAgICAgICByZXR1cm4gYCR7dXJsfSR7cHJlZml4fSR7cXVlcnl9YDtcbiAgICB9XG4gICAgX3dvcmtlck9iamVjdFVybCh1cmwpIHtcbiAgICAgICAgbGV0IHJlc3VsdF91cmw7XG4gICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgIHJlc3VsdF91cmwgPSB1cmw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW1dPUktFUl9TQ1JJUFRdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0JyB9KTtcbiAgICAgICAgICAgIHJlc3VsdF91cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRfdXJsO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlYWx0aW1lQ2xpZW50LmpzLm1hcCIsImV4cG9ydCBjbGFzcyBTdG9yYWdlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5fX2lzU3RvcmFnZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1N0b3JhZ2VFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RvcmFnZUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgZXJyb3IgIT09IG51bGwgJiYgJ19faXNTdG9yYWdlRXJyb3InIGluIGVycm9yO1xufVxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VBcGlFcnJvciBleHRlbmRzIFN0b3JhZ2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnU3RvcmFnZUFwaUVycm9yJztcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VVbmtub3duRXJyb3IgZXh0ZW5kcyBTdG9yYWdlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9yaWdpbmFsRXJyb3IpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdTdG9yYWdlVW5rbm93bkVycm9yJztcbiAgICAgICAgdGhpcy5vcmlnaW5hbEVycm9yID0gb3JpZ2luYWxFcnJvcjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZUZldGNoID0gKGN1c3RvbUZldGNoKSA9PiB7XG4gICAgbGV0IF9mZXRjaDtcbiAgICBpZiAoY3VzdG9tRmV0Y2gpIHtcbiAgICAgICAgX2ZldGNoID0gY3VzdG9tRmV0Y2g7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBmZXRjaCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX2ZldGNoID0gKC4uLmFyZ3MpID0+IGltcG9ydCgnQHN1cGFiYXNlL25vZGUtZmV0Y2gnKS50aGVuKCh7IGRlZmF1bHQ6IGZldGNoIH0pID0+IGZldGNoKC4uLmFyZ3MpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIF9mZXRjaCA9IGZldGNoO1xuICAgIH1cbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IF9mZXRjaCguLi5hcmdzKTtcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZVJlc3BvbnNlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgaWYgKHR5cGVvZiBSZXNwb25zZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gKHlpZWxkIGltcG9ydCgnQHN1cGFiYXNlL25vZGUtZmV0Y2gnKSkuUmVzcG9uc2U7XG4gICAgfVxuICAgIHJldHVybiBSZXNwb25zZTtcbn0pO1xuZXhwb3J0IGNvbnN0IHJlY3Vyc2l2ZVRvQ2FtZWwgPSAoaXRlbSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgIHJldHVybiBpdGVtLm1hcCgoZWwpID0+IHJlY3Vyc2l2ZVRvQ2FtZWwoZWwpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdmdW5jdGlvbicgfHwgaXRlbSAhPT0gT2JqZWN0KGl0ZW0pKSB7XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBPYmplY3QuZW50cmllcyhpdGVtKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgY29uc3QgbmV3S2V5ID0ga2V5LnJlcGxhY2UoLyhbLV9dW2Etel0pL2dpLCAoYykgPT4gYy50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoL1stX10vZywgJycpKTtcbiAgICAgICAgcmVzdWx0W25ld0tleV0gPSByZWN1cnNpdmVUb0NhbWVsKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyBTdG9yYWdlQXBpRXJyb3IsIFN0b3JhZ2VVbmtub3duRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgeyByZXNvbHZlUmVzcG9uc2UgfSBmcm9tICcuL2hlbHBlcnMnO1xuY29uc3QgX2dldEVycm9yTWVzc2FnZSA9IChlcnIpID0+IGVyci5tc2cgfHwgZXJyLm1lc3NhZ2UgfHwgZXJyLmVycm9yX2Rlc2NyaXB0aW9uIHx8IGVyci5lcnJvciB8fCBKU09OLnN0cmluZ2lmeShlcnIpO1xuY29uc3QgaGFuZGxlRXJyb3IgPSAoZXJyb3IsIHJlamVjdCwgb3B0aW9ucykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3QgUmVzID0geWllbGQgcmVzb2x2ZVJlc3BvbnNlKCk7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgUmVzICYmICEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm5vUmVzb2x2ZUpzb24pKSB7XG4gICAgICAgIGVycm9yXG4gICAgICAgICAgICAuanNvbigpXG4gICAgICAgICAgICAudGhlbigoZXJyKSA9PiB7XG4gICAgICAgICAgICByZWplY3QobmV3IFN0b3JhZ2VBcGlFcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGVyciksIGVycm9yLnN0YXR1cyB8fCA1MDApKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICByZWplY3QobmV3IFN0b3JhZ2VVbmtub3duRXJyb3IoX2dldEVycm9yTWVzc2FnZShlcnIpLCBlcnIpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZWplY3QobmV3IFN0b3JhZ2VVbmtub3duRXJyb3IoX2dldEVycm9yTWVzc2FnZShlcnJvciksIGVycm9yKSk7XG4gICAgfVxufSk7XG5jb25zdCBfZ2V0UmVxdWVzdFBhcmFtcyA9IChtZXRob2QsIG9wdGlvbnMsIHBhcmFtZXRlcnMsIGJvZHkpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB7IG1ldGhvZCwgaGVhZGVyczogKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWFkZXJzKSB8fCB7fSB9O1xuICAgIGlmIChtZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfVxuICAgIHBhcmFtcy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMpO1xuICAgIGlmIChib2R5KSB7XG4gICAgICAgIHBhcmFtcy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcyksIHBhcmFtZXRlcnMpO1xufTtcbmZ1bmN0aW9uIF9oYW5kbGVSZXF1ZXN0KGZldGNoZXIsIG1ldGhvZCwgdXJsLCBvcHRpb25zLCBwYXJhbWV0ZXJzLCBib2R5KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGZldGNoZXIodXJsLCBfZ2V0UmVxdWVzdFBhcmFtcyhtZXRob2QsIG9wdGlvbnMsIHBhcmFtZXRlcnMsIGJvZHkpKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdC5vaylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubm9SZXNvbHZlSnNvbilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Lmpzb24oKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHJlc29sdmUoZGF0YSkpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gaGFuZGxlRXJyb3IoZXJyb3IsIHJlamVjdCwgb3B0aW9ucykpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXQoZmV0Y2hlciwgdXJsLCBvcHRpb25zLCBwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIF9oYW5kbGVSZXF1ZXN0KGZldGNoZXIsICdHRVQnLCB1cmwsIG9wdGlvbnMsIHBhcmFtZXRlcnMpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvc3QoZmV0Y2hlciwgdXJsLCBib2R5LCBvcHRpb25zLCBwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIF9oYW5kbGVSZXF1ZXN0KGZldGNoZXIsICdQT1NUJywgdXJsLCBvcHRpb25zLCBwYXJhbWV0ZXJzLCBib2R5KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXQoZmV0Y2hlciwgdXJsLCBib2R5LCBvcHRpb25zLCBwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIF9oYW5kbGVSZXF1ZXN0KGZldGNoZXIsICdQVVQnLCB1cmwsIG9wdGlvbnMsIHBhcmFtZXRlcnMsIGJvZHkpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhlYWQoZmV0Y2hlciwgdXJsLCBvcHRpb25zLCBwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIF9oYW5kbGVSZXF1ZXN0KGZldGNoZXIsICdIRUFEJywgdXJsLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IG5vUmVzb2x2ZUpzb246IHRydWUgfSksIHBhcmFtZXRlcnMpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShmZXRjaGVyLCB1cmwsIGJvZHksIG9wdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgJ0RFTEVURScsIHVybCwgb3B0aW9ucywgcGFyYW1ldGVycywgYm9keSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaC5qcy5tYXAiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IGlzU3RvcmFnZUVycm9yLCBTdG9yYWdlRXJyb3IsIFN0b3JhZ2VVbmtub3duRXJyb3IgfSBmcm9tICcuLi9saWIvZXJyb3JzJztcbmltcG9ydCB7IGdldCwgaGVhZCwgcG9zdCwgcmVtb3ZlIH0gZnJvbSAnLi4vbGliL2ZldGNoJztcbmltcG9ydCB7IHJlY3Vyc2l2ZVRvQ2FtZWwsIHJlc29sdmVGZXRjaCB9IGZyb20gJy4uL2xpYi9oZWxwZXJzJztcbmNvbnN0IERFRkFVTFRfU0VBUkNIX09QVElPTlMgPSB7XG4gICAgbGltaXQ6IDEwMCxcbiAgICBvZmZzZXQ6IDAsXG4gICAgc29ydEJ5OiB7XG4gICAgICAgIGNvbHVtbjogJ25hbWUnLFxuICAgICAgICBvcmRlcjogJ2FzYycsXG4gICAgfSxcbn07XG5jb25zdCBERUZBVUxUX0ZJTEVfT1BUSU9OUyA9IHtcbiAgICBjYWNoZUNvbnRyb2w6ICczNjAwJyxcbiAgICBjb250ZW50VHlwZTogJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcsXG4gICAgdXBzZXJ0OiBmYWxzZSxcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9yYWdlRmlsZUFwaSB7XG4gICAgY29uc3RydWN0b3IodXJsLCBoZWFkZXJzID0ge30sIGJ1Y2tldElkLCBmZXRjaCkge1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgdGhpcy5idWNrZXRJZCA9IGJ1Y2tldElkO1xuICAgICAgICB0aGlzLmZldGNoID0gcmVzb2x2ZUZldGNoKGZldGNoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBsb2FkcyBhIGZpbGUgdG8gYW4gZXhpc3RpbmcgYnVja2V0IG9yIHJlcGxhY2VzIGFuIGV4aXN0aW5nIGZpbGUgYXQgdGhlIHNwZWNpZmllZCBwYXRoIHdpdGggYSBuZXcgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1ldGhvZCBIVFRQIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgcmVsYXRpdmUgZmlsZSBwYXRoLiBTaG91bGQgYmUgb2YgdGhlIGZvcm1hdCBgZm9sZGVyL3N1YmZvbGRlci9maWxlbmFtZS5wbmdgLiBUaGUgYnVja2V0IG11c3QgYWxyZWFkeSBleGlzdCBiZWZvcmUgYXR0ZW1wdGluZyB0byB1cGxvYWQuXG4gICAgICogQHBhcmFtIGZpbGVCb2R5IFRoZSBib2R5IG9mIHRoZSBmaWxlIHRvIGJlIHN0b3JlZCBpbiB0aGUgYnVja2V0LlxuICAgICAqL1xuICAgIHVwbG9hZE9yVXBkYXRlKG1ldGhvZCwgcGF0aCwgZmlsZUJvZHksIGZpbGVPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBib2R5O1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfRklMRV9PUFRJT05TKSwgZmlsZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGxldCBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLmhlYWRlcnMpLCAobWV0aG9kID09PSAnUE9TVCcgJiYgeyAneC11cHNlcnQnOiBTdHJpbmcob3B0aW9ucy51cHNlcnQpIH0pKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IG9wdGlvbnMubWV0YWRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBmaWxlQm9keSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZCgnY2FjaGVDb250cm9sJywgb3B0aW9ucy5jYWNoZUNvbnRyb2wpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kKCdtZXRhZGF0YScsIHRoaXMuZW5jb2RlTWV0YWRhdGEobWV0YWRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZCgnJywgZmlsZUJvZHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnICYmIGZpbGVCb2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IGZpbGVCb2R5O1xuICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZCgnY2FjaGVDb250cm9sJywgb3B0aW9ucy5jYWNoZUNvbnRyb2wpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kKCdtZXRhZGF0YScsIHRoaXMuZW5jb2RlTWV0YWRhdGEobWV0YWRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IGZpbGVCb2R5O1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjYWNoZS1jb250cm9sJ10gPSBgbWF4LWFnZT0ke29wdGlvbnMuY2FjaGVDb250cm9sfWA7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gb3B0aW9ucy5jb250ZW50VHlwZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWyd4LW1ldGFkYXRhJ10gPSB0aGlzLnRvQmFzZTY0KHRoaXMuZW5jb2RlTWV0YWRhdGEobWV0YWRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlsZU9wdGlvbnMgPT09IG51bGwgfHwgZmlsZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpbGVPcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaGVhZGVycyksIGZpbGVPcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjbGVhblBhdGggPSB0aGlzLl9yZW1vdmVFbXB0eUZvbGRlcnMocGF0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgX3BhdGggPSB0aGlzLl9nZXRGaW5hbFBhdGgoY2xlYW5QYXRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCB0aGlzLmZldGNoKGAke3RoaXMudXJsfS9vYmplY3QvJHtfcGF0aH1gLCBPYmplY3QuYXNzaWduKHsgbWV0aG9kLCBib2R5OiBib2R5LCBoZWFkZXJzIH0sICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmR1cGxleCkgPyB7IGR1cGxleDogb3B0aW9ucy5kdXBsZXggfSA6IHt9KSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCByZXMuanNvbigpO1xuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgcGF0aDogY2xlYW5QYXRoLCBpZDogZGF0YS5JZCwgZnVsbFBhdGg6IGRhdGEuS2V5IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBsb2FkcyBhIGZpbGUgdG8gYW4gZXhpc3RpbmcgYnVja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggVGhlIGZpbGUgcGF0aCwgaW5jbHVkaW5nIHRoZSBmaWxlIG5hbWUuIFNob3VsZCBiZSBvZiB0aGUgZm9ybWF0IGBmb2xkZXIvc3ViZm9sZGVyL2ZpbGVuYW1lLnBuZ2AuIFRoZSBidWNrZXQgbXVzdCBhbHJlYWR5IGV4aXN0IGJlZm9yZSBhdHRlbXB0aW5nIHRvIHVwbG9hZC5cbiAgICAgKiBAcGFyYW0gZmlsZUJvZHkgVGhlIGJvZHkgb2YgdGhlIGZpbGUgdG8gYmUgc3RvcmVkIGluIHRoZSBidWNrZXQuXG4gICAgICovXG4gICAgdXBsb2FkKHBhdGgsIGZpbGVCb2R5LCBmaWxlT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkT3JVcGRhdGUoJ1BPU1QnLCBwYXRoLCBmaWxlQm9keSwgZmlsZU9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBsb2FkIGEgZmlsZSB3aXRoIGEgdG9rZW4gZ2VuZXJhdGVkIGZyb20gYGNyZWF0ZVNpZ25lZFVwbG9hZFVybGAuXG4gICAgICogQHBhcmFtIHBhdGggVGhlIGZpbGUgcGF0aCwgaW5jbHVkaW5nIHRoZSBmaWxlIG5hbWUuIFNob3VsZCBiZSBvZiB0aGUgZm9ybWF0IGBmb2xkZXIvc3ViZm9sZGVyL2ZpbGVuYW1lLnBuZ2AuIFRoZSBidWNrZXQgbXVzdCBhbHJlYWR5IGV4aXN0IGJlZm9yZSBhdHRlbXB0aW5nIHRvIHVwbG9hZC5cbiAgICAgKiBAcGFyYW0gdG9rZW4gVGhlIHRva2VuIGdlbmVyYXRlZCBmcm9tIGBjcmVhdGVTaWduZWRVcGxvYWRVcmxgXG4gICAgICogQHBhcmFtIGZpbGVCb2R5IFRoZSBib2R5IG9mIHRoZSBmaWxlIHRvIGJlIHN0b3JlZCBpbiB0aGUgYnVja2V0LlxuICAgICAqL1xuICAgIHVwbG9hZFRvU2lnbmVkVXJsKHBhdGgsIHRva2VuLCBmaWxlQm9keSwgZmlsZU9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFuUGF0aCA9IHRoaXMuX3JlbW92ZUVtcHR5Rm9sZGVycyhwYXRoKTtcbiAgICAgICAgICAgIGNvbnN0IF9wYXRoID0gdGhpcy5fZ2V0RmluYWxQYXRoKGNsZWFuUGF0aCk7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHRoaXMudXJsICsgYC9vYmplY3QvdXBsb2FkL3NpZ24vJHtfcGF0aH1gKTtcbiAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCd0b2tlbicsIHRva2VuKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IGJvZHk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyB1cHNlcnQ6IERFRkFVTFRfRklMRV9PUFRJT05TLnVwc2VydCB9LCBmaWxlT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5oZWFkZXJzKSwgeyAneC11cHNlcnQnOiBTdHJpbmcob3B0aW9ucy51cHNlcnQpIH0pO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgZmlsZUJvZHkgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgYm9keS5hcHBlbmQoJ2NhY2hlQ29udHJvbCcsIG9wdGlvbnMuY2FjaGVDb250cm9sKTtcbiAgICAgICAgICAgICAgICAgICAgYm9keS5hcHBlbmQoJycsIGZpbGVCb2R5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyAmJiBmaWxlQm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSBmaWxlQm9keTtcbiAgICAgICAgICAgICAgICAgICAgYm9keS5hcHBlbmQoJ2NhY2hlQ29udHJvbCcsIG9wdGlvbnMuY2FjaGVDb250cm9sKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSBmaWxlQm9keTtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1snY2FjaGUtY29udHJvbCddID0gYG1heC1hZ2U9JHtvcHRpb25zLmNhY2hlQ29udHJvbH1gO1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjb250ZW50LXR5cGUnXSA9IG9wdGlvbnMuY29udGVudFR5cGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIHRoaXMuZmV0Y2godXJsLnRvU3RyaW5nKCksIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcmVzLmpzb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IHBhdGg6IGNsZWFuUGF0aCwgZnVsbFBhdGg6IGRhdGEuS2V5IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNpZ25lZCB1cGxvYWQgVVJMLlxuICAgICAqIFNpZ25lZCB1cGxvYWQgVVJMcyBjYW4gYmUgdXNlZCB0byB1cGxvYWQgZmlsZXMgdG8gdGhlIGJ1Y2tldCB3aXRob3V0IGZ1cnRoZXIgYXV0aGVudGljYXRpb24uXG4gICAgICogVGhleSBhcmUgdmFsaWQgZm9yIDIgaG91cnMuXG4gICAgICogQHBhcmFtIHBhdGggVGhlIGZpbGUgcGF0aCwgaW5jbHVkaW5nIHRoZSBjdXJyZW50IGZpbGUgbmFtZS4gRm9yIGV4YW1wbGUgYGZvbGRlci9pbWFnZS5wbmdgLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnVwc2VydCBJZiBzZXQgdG8gdHJ1ZSwgYWxsb3dzIHRoZSBmaWxlIHRvIGJlIG92ZXJ3cml0dGVuIGlmIGl0IGFscmVhZHkgZXhpc3RzLlxuICAgICAqL1xuICAgIGNyZWF0ZVNpZ25lZFVwbG9hZFVybChwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBfcGF0aCA9IHRoaXMuX2dldEZpbmFsUGF0aChwYXRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5oZWFkZXJzKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnVwc2VydCkge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWyd4LXVwc2VydCddID0gJ3RydWUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcG9zdCh0aGlzLmZldGNoLCBgJHt0aGlzLnVybH0vb2JqZWN0L3VwbG9hZC9zaWduLyR7X3BhdGh9YCwge30sIHsgaGVhZGVycyB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHRoaXMudXJsICsgZGF0YS51cmwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3Rva2VuJyk7XG4gICAgICAgICAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3RvcmFnZUVycm9yKCdObyB0b2tlbiByZXR1cm5lZCBieSBBUEknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBzaWduZWRVcmw6IHVybC50b1N0cmluZygpLCBwYXRoLCB0b2tlbiB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGFuIGV4aXN0aW5nIGZpbGUgYXQgdGhlIHNwZWNpZmllZCBwYXRoIHdpdGggYSBuZXcgb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggVGhlIHJlbGF0aXZlIGZpbGUgcGF0aC4gU2hvdWxkIGJlIG9mIHRoZSBmb3JtYXQgYGZvbGRlci9zdWJmb2xkZXIvZmlsZW5hbWUucG5nYC4gVGhlIGJ1Y2tldCBtdXN0IGFscmVhZHkgZXhpc3QgYmVmb3JlIGF0dGVtcHRpbmcgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSBmaWxlQm9keSBUaGUgYm9keSBvZiB0aGUgZmlsZSB0byBiZSBzdG9yZWQgaW4gdGhlIGJ1Y2tldC5cbiAgICAgKi9cbiAgICB1cGRhdGUocGF0aCwgZmlsZUJvZHksIGZpbGVPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRPclVwZGF0ZSgnUFVUJywgcGF0aCwgZmlsZUJvZHksIGZpbGVPcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmVzIGFuIGV4aXN0aW5nIGZpbGUgdG8gYSBuZXcgcGF0aCBpbiB0aGUgc2FtZSBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnJvbVBhdGggVGhlIG9yaWdpbmFsIGZpbGUgcGF0aCwgaW5jbHVkaW5nIHRoZSBjdXJyZW50IGZpbGUgbmFtZS4gRm9yIGV4YW1wbGUgYGZvbGRlci9pbWFnZS5wbmdgLlxuICAgICAqIEBwYXJhbSB0b1BhdGggVGhlIG5ldyBmaWxlIHBhdGgsIGluY2x1ZGluZyB0aGUgbmV3IGZpbGUgbmFtZS4gRm9yIGV4YW1wbGUgYGZvbGRlci9pbWFnZS1uZXcucG5nYC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgZGVzdGluYXRpb24gb3B0aW9ucy5cbiAgICAgKi9cbiAgICBtb3ZlKGZyb21QYXRoLCB0b1BhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHBvc3QodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L29iamVjdC9tb3ZlYCwge1xuICAgICAgICAgICAgICAgICAgICBidWNrZXRJZDogdGhpcy5idWNrZXRJZCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlS2V5OiBmcm9tUGF0aCxcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25LZXk6IHRvUGF0aCxcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25CdWNrZXQ6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kZXN0aW5hdGlvbkJ1Y2tldCxcbiAgICAgICAgICAgICAgICB9LCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcGllcyBhbiBleGlzdGluZyBmaWxlIHRvIGEgbmV3IHBhdGggaW4gdGhlIHNhbWUgYnVja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGZyb21QYXRoIFRoZSBvcmlnaW5hbCBmaWxlIHBhdGgsIGluY2x1ZGluZyB0aGUgY3VycmVudCBmaWxlIG5hbWUuIEZvciBleGFtcGxlIGBmb2xkZXIvaW1hZ2UucG5nYC5cbiAgICAgKiBAcGFyYW0gdG9QYXRoIFRoZSBuZXcgZmlsZSBwYXRoLCBpbmNsdWRpbmcgdGhlIG5ldyBmaWxlIG5hbWUuIEZvciBleGFtcGxlIGBmb2xkZXIvaW1hZ2UtY29weS5wbmdgLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBkZXN0aW5hdGlvbiBvcHRpb25zLlxuICAgICAqL1xuICAgIGNvcHkoZnJvbVBhdGgsIHRvUGF0aCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcG9zdCh0aGlzLmZldGNoLCBgJHt0aGlzLnVybH0vb2JqZWN0L2NvcHlgLCB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldElkOiB0aGlzLmJ1Y2tldElkLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VLZXk6IGZyb21QYXRoLFxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbktleTogdG9QYXRoLFxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbkJ1Y2tldDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRlc3RpbmF0aW9uQnVja2V0LFxuICAgICAgICAgICAgICAgIH0sIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgcGF0aDogZGF0YS5LZXkgfSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2lnbmVkIFVSTC4gVXNlIGEgc2lnbmVkIFVSTCB0byBzaGFyZSBhIGZpbGUgZm9yIGEgZml4ZWQgYW1vdW50IG9mIHRpbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgZmlsZSBwYXRoLCBpbmNsdWRpbmcgdGhlIGN1cnJlbnQgZmlsZSBuYW1lLiBGb3IgZXhhbXBsZSBgZm9sZGVyL2ltYWdlLnBuZ2AuXG4gICAgICogQHBhcmFtIGV4cGlyZXNJbiBUaGUgbnVtYmVyIG9mIHNlY29uZHMgdW50aWwgdGhlIHNpZ25lZCBVUkwgZXhwaXJlcy4gRm9yIGV4YW1wbGUsIGA2MGAgZm9yIGEgVVJMIHdoaWNoIGlzIHZhbGlkIGZvciBvbmUgbWludXRlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmRvd25sb2FkIHRyaWdnZXJzIHRoZSBmaWxlIGFzIGEgZG93bmxvYWQgaWYgc2V0IHRvIHRydWUuIFNldCB0aGlzIHBhcmFtZXRlciBhcyB0aGUgbmFtZSBvZiB0aGUgZmlsZSBpZiB5b3Ugd2FudCB0byB0cmlnZ2VyIHRoZSBkb3dubG9hZCB3aXRoIGEgZGlmZmVyZW50IGZpbGVuYW1lLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnRyYW5zZm9ybSBUcmFuc2Zvcm0gdGhlIGFzc2V0IGJlZm9yZSBzZXJ2aW5nIGl0IHRvIHRoZSBjbGllbnQuXG4gICAgICovXG4gICAgY3JlYXRlU2lnbmVkVXJsKHBhdGgsIGV4cGlyZXNJbiwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgX3BhdGggPSB0aGlzLl9nZXRGaW5hbFBhdGgocGF0aCk7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB5aWVsZCBwb3N0KHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9vYmplY3Qvc2lnbi8ke19wYXRofWAsIE9iamVjdC5hc3NpZ24oeyBleHBpcmVzSW4gfSwgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudHJhbnNmb3JtKSA/IHsgdHJhbnNmb3JtOiBvcHRpb25zLnRyYW5zZm9ybSB9IDoge30pKSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZG93bmxvYWRRdWVyeVBhcmFtID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kb3dubG9hZClcbiAgICAgICAgICAgICAgICAgICAgPyBgJmRvd25sb2FkPSR7b3B0aW9ucy5kb3dubG9hZCA9PT0gdHJ1ZSA/ICcnIDogb3B0aW9ucy5kb3dubG9hZH1gXG4gICAgICAgICAgICAgICAgICAgIDogJyc7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2lnbmVkVXJsID0gZW5jb2RlVVJJKGAke3RoaXMudXJsfSR7ZGF0YS5zaWduZWRVUkx9JHtkb3dubG9hZFF1ZXJ5UGFyYW19YCk7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHsgc2lnbmVkVXJsIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG11bHRpcGxlIHNpZ25lZCBVUkxzLiBVc2UgYSBzaWduZWQgVVJMIHRvIHNoYXJlIGEgZmlsZSBmb3IgYSBmaXhlZCBhbW91bnQgb2YgdGltZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRocyBUaGUgZmlsZSBwYXRocyB0byBiZSBkb3dubG9hZGVkLCBpbmNsdWRpbmcgdGhlIGN1cnJlbnQgZmlsZSBuYW1lcy4gRm9yIGV4YW1wbGUgYFsnZm9sZGVyL2ltYWdlLnBuZycsICdmb2xkZXIyL2ltYWdlMi5wbmcnXWAuXG4gICAgICogQHBhcmFtIGV4cGlyZXNJbiBUaGUgbnVtYmVyIG9mIHNlY29uZHMgdW50aWwgdGhlIHNpZ25lZCBVUkxzIGV4cGlyZS4gRm9yIGV4YW1wbGUsIGA2MGAgZm9yIFVSTHMgd2hpY2ggYXJlIHZhbGlkIGZvciBvbmUgbWludXRlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmRvd25sb2FkIHRyaWdnZXJzIHRoZSBmaWxlIGFzIGEgZG93bmxvYWQgaWYgc2V0IHRvIHRydWUuIFNldCB0aGlzIHBhcmFtZXRlciBhcyB0aGUgbmFtZSBvZiB0aGUgZmlsZSBpZiB5b3Ugd2FudCB0byB0cmlnZ2VyIHRoZSBkb3dubG9hZCB3aXRoIGEgZGlmZmVyZW50IGZpbGVuYW1lLlxuICAgICAqL1xuICAgIGNyZWF0ZVNpZ25lZFVybHMocGF0aHMsIGV4cGlyZXNJbiwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcG9zdCh0aGlzLmZldGNoLCBgJHt0aGlzLnVybH0vb2JqZWN0L3NpZ24vJHt0aGlzLmJ1Y2tldElkfWAsIHsgZXhwaXJlc0luLCBwYXRocyB9LCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkb3dubG9hZFF1ZXJ5UGFyYW0gPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRvd25sb2FkKVxuICAgICAgICAgICAgICAgICAgICA/IGAmZG93bmxvYWQ9JHtvcHRpb25zLmRvd25sb2FkID09PSB0cnVlID8gJycgOiBvcHRpb25zLmRvd25sb2FkfWBcbiAgICAgICAgICAgICAgICAgICAgOiAnJztcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLm1hcCgoZGF0dW0pID0+IChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRhdHVtKSwgeyBzaWduZWRVcmw6IGRhdHVtLnNpZ25lZFVSTFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZW5jb2RlVVJJKGAke3RoaXMudXJsfSR7ZGF0dW0uc2lnbmVkVVJMfSR7ZG93bmxvYWRRdWVyeVBhcmFtfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsIH0pKSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRG93bmxvYWRzIGEgZmlsZSBmcm9tIGEgcHJpdmF0ZSBidWNrZXQuIEZvciBwdWJsaWMgYnVja2V0cywgbWFrZSBhIHJlcXVlc3QgdG8gdGhlIFVSTCByZXR1cm5lZCBmcm9tIGBnZXRQdWJsaWNVcmxgIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgZnVsbCBwYXRoIGFuZCBmaWxlIG5hbWUgb2YgdGhlIGZpbGUgdG8gYmUgZG93bmxvYWRlZC4gRm9yIGV4YW1wbGUgYGZvbGRlci9pbWFnZS5wbmdgLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnRyYW5zZm9ybSBUcmFuc2Zvcm0gdGhlIGFzc2V0IGJlZm9yZSBzZXJ2aW5nIGl0IHRvIHRoZSBjbGllbnQuXG4gICAgICovXG4gICAgZG93bmxvYWQocGF0aCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qgd2FudHNUcmFuc2Zvcm1hdGlvbiA9IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRyYW5zZm9ybSkgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyUGF0aCA9IHdhbnRzVHJhbnNmb3JtYXRpb24gPyAncmVuZGVyL2ltYWdlL2F1dGhlbnRpY2F0ZWQnIDogJ29iamVjdCc7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1hdGlvblF1ZXJ5ID0gdGhpcy50cmFuc2Zvcm1PcHRzVG9RdWVyeVN0cmluZygob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRyYW5zZm9ybSkgfHwge30pO1xuICAgICAgICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSB0cmFuc2Zvcm1hdGlvblF1ZXJ5ID8gYD8ke3RyYW5zZm9ybWF0aW9uUXVlcnl9YCA6ICcnO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBfcGF0aCA9IHRoaXMuX2dldEZpbmFsUGF0aChwYXRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCBnZXQodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9LyR7cmVuZGVyUGF0aH0vJHtfcGF0aH0ke3F1ZXJ5U3RyaW5nfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBub1Jlc29sdmVKc29uOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCByZXMuYmxvYigpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBkZXRhaWxzIG9mIGFuIGV4aXN0aW5nIGZpbGUuXG4gICAgICogQHBhcmFtIHBhdGhcbiAgICAgKi9cbiAgICBpbmZvKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IF9wYXRoID0gdGhpcy5fZ2V0RmluYWxQYXRoKHBhdGgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgZ2V0KHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9vYmplY3QvaW5mby8ke19wYXRofWAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHJlY3Vyc2l2ZVRvQ2FtZWwoZGF0YSksIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBleGlzdGVuY2Ugb2YgYSBmaWxlLlxuICAgICAqIEBwYXJhbSBwYXRoXG4gICAgICovXG4gICAgZXhpc3RzKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IF9wYXRoID0gdGhpcy5fZ2V0RmluYWxQYXRoKHBhdGgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB5aWVsZCBoZWFkKHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9vYmplY3QvJHtfcGF0aH1gLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB0cnVlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSAmJiBlcnJvciBpbnN0YW5jZW9mIFN0b3JhZ2VVbmtub3duRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxFcnJvciA9IGVycm9yLm9yaWdpbmFsRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGlmIChbNDAwLCA0MDRdLmluY2x1ZGVzKG9yaWdpbmFsRXJyb3IgPT09IG51bGwgfHwgb3JpZ2luYWxFcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luYWxFcnJvci5zdGF0dXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBmYWxzZSwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIGNvbnZlbmllbmNlIGZ1bmN0aW9uIHRvIGdldCB0aGUgVVJMIGZvciBhbiBhc3NldCBpbiBhIHB1YmxpYyBidWNrZXQuIElmIHlvdSBkbyBub3Qgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiwgeW91IGNhbiBjb25zdHJ1Y3QgdGhlIHB1YmxpYyBVUkwgYnkgY29uY2F0ZW5hdGluZyB0aGUgYnVja2V0IFVSTCB3aXRoIHRoZSBwYXRoIHRvIHRoZSBhc3NldC5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHZlcmlmeSBpZiB0aGUgYnVja2V0IGlzIHB1YmxpYy4gSWYgYSBwdWJsaWMgVVJMIGlzIGNyZWF0ZWQgZm9yIGEgYnVja2V0IHdoaWNoIGlzIG5vdCBwdWJsaWMsIHlvdSB3aWxsIG5vdCBiZSBhYmxlIHRvIGRvd25sb2FkIHRoZSBhc3NldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIGFuZCBuYW1lIG9mIHRoZSBmaWxlIHRvIGdlbmVyYXRlIHRoZSBwdWJsaWMgVVJMIGZvci4gRm9yIGV4YW1wbGUgYGZvbGRlci9pbWFnZS5wbmdgLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmRvd25sb2FkIFRyaWdnZXJzIHRoZSBmaWxlIGFzIGEgZG93bmxvYWQgaWYgc2V0IHRvIHRydWUuIFNldCB0aGlzIHBhcmFtZXRlciBhcyB0aGUgbmFtZSBvZiB0aGUgZmlsZSBpZiB5b3Ugd2FudCB0byB0cmlnZ2VyIHRoZSBkb3dubG9hZCB3aXRoIGEgZGlmZmVyZW50IGZpbGVuYW1lLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnRyYW5zZm9ybSBUcmFuc2Zvcm0gdGhlIGFzc2V0IGJlZm9yZSBzZXJ2aW5nIGl0IHRvIHRoZSBjbGllbnQuXG4gICAgICovXG4gICAgZ2V0UHVibGljVXJsKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgX3BhdGggPSB0aGlzLl9nZXRGaW5hbFBhdGgocGF0aCk7XG4gICAgICAgIGNvbnN0IF9xdWVyeVN0cmluZyA9IFtdO1xuICAgICAgICBjb25zdCBkb3dubG9hZFF1ZXJ5UGFyYW0gPSAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRvd25sb2FkKVxuICAgICAgICAgICAgPyBgZG93bmxvYWQ9JHtvcHRpb25zLmRvd25sb2FkID09PSB0cnVlID8gJycgOiBvcHRpb25zLmRvd25sb2FkfWBcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIGlmIChkb3dubG9hZFF1ZXJ5UGFyYW0gIT09ICcnKSB7XG4gICAgICAgICAgICBfcXVlcnlTdHJpbmcucHVzaChkb3dubG9hZFF1ZXJ5UGFyYW0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdhbnRzVHJhbnNmb3JtYXRpb24gPSB0eXBlb2YgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50cmFuc2Zvcm0pICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgY29uc3QgcmVuZGVyUGF0aCA9IHdhbnRzVHJhbnNmb3JtYXRpb24gPyAncmVuZGVyL2ltYWdlJyA6ICdvYmplY3QnO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm1hdGlvblF1ZXJ5ID0gdGhpcy50cmFuc2Zvcm1PcHRzVG9RdWVyeVN0cmluZygob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRyYW5zZm9ybSkgfHwge30pO1xuICAgICAgICBpZiAodHJhbnNmb3JtYXRpb25RdWVyeSAhPT0gJycpIHtcbiAgICAgICAgICAgIF9xdWVyeVN0cmluZy5wdXNoKHRyYW5zZm9ybWF0aW9uUXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBxdWVyeVN0cmluZyA9IF9xdWVyeVN0cmluZy5qb2luKCcmJyk7XG4gICAgICAgIGlmIChxdWVyeVN0cmluZyAhPT0gJycpIHtcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nID0gYD8ke3F1ZXJ5U3RyaW5nfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHsgcHVibGljVXJsOiBlbmNvZGVVUkkoYCR7dGhpcy51cmx9LyR7cmVuZGVyUGF0aH0vcHVibGljLyR7X3BhdGh9JHtxdWVyeVN0cmluZ31gKSB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGZpbGVzIHdpdGhpbiB0aGUgc2FtZSBidWNrZXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRocyBBbiBhcnJheSBvZiBmaWxlcyB0byBkZWxldGUsIGluY2x1ZGluZyB0aGUgcGF0aCBhbmQgZmlsZSBuYW1lLiBGb3IgZXhhbXBsZSBbYCdmb2xkZXIvaW1hZ2UucG5nJ2BdLlxuICAgICAqL1xuICAgIHJlbW92ZShwYXRocykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcmVtb3ZlKHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9vYmplY3QvJHt0aGlzLmJ1Y2tldElkfWAsIHsgcHJlZml4ZXM6IHBhdGhzIH0sIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGZpbGUgbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gaWQgdGhlIGZpbGUgaWQgdG8gcmV0cmlldmUgbWV0YWRhdGFcbiAgICAgKi9cbiAgICAvLyBhc3luYyBnZXRNZXRhZGF0YShcbiAgICAvLyAgIGlkOiBzdHJpbmdcbiAgICAvLyApOiBQcm9taXNlPFxuICAgIC8vICAgfCB7XG4gICAgLy8gICAgICAgZGF0YTogTWV0YWRhdGFcbiAgICAvLyAgICAgICBlcnJvcjogbnVsbFxuICAgIC8vICAgICB9XG4gICAgLy8gICB8IHtcbiAgICAvLyAgICAgICBkYXRhOiBudWxsXG4gICAgLy8gICAgICAgZXJyb3I6IFN0b3JhZ2VFcnJvclxuICAgIC8vICAgICB9XG4gICAgLy8gPiB7XG4gICAgLy8gICB0cnkge1xuICAgIC8vICAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0KHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9tZXRhZGF0YS8ke2lkfWAsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pXG4gICAgLy8gICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH1cbiAgICAvLyAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAvLyAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgdGhyb3cgZXJyb3JcbiAgICAvLyAgIH1cbiAgICAvLyB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGZpbGUgbWV0YWRhdGFcbiAgICAgKiBAcGFyYW0gaWQgdGhlIGZpbGUgaWQgdG8gdXBkYXRlIG1ldGFkYXRhXG4gICAgICogQHBhcmFtIG1ldGEgdGhlIG5ldyBmaWxlIG1ldGFkYXRhXG4gICAgICovXG4gICAgLy8gYXN5bmMgdXBkYXRlTWV0YWRhdGEoXG4gICAgLy8gICBpZDogc3RyaW5nLFxuICAgIC8vICAgbWV0YTogTWV0YWRhdGFcbiAgICAvLyApOiBQcm9taXNlPFxuICAgIC8vICAgfCB7XG4gICAgLy8gICAgICAgZGF0YTogTWV0YWRhdGFcbiAgICAvLyAgICAgICBlcnJvcjogbnVsbFxuICAgIC8vICAgICB9XG4gICAgLy8gICB8IHtcbiAgICAvLyAgICAgICBkYXRhOiBudWxsXG4gICAgLy8gICAgICAgZXJyb3I6IFN0b3JhZ2VFcnJvclxuICAgIC8vICAgICB9XG4gICAgLy8gPiB7XG4gICAgLy8gICB0cnkge1xuICAgIC8vICAgICBjb25zdCBkYXRhID0gYXdhaXQgcG9zdChcbiAgICAvLyAgICAgICB0aGlzLmZldGNoLFxuICAgIC8vICAgICAgIGAke3RoaXMudXJsfS9tZXRhZGF0YS8ke2lkfWAsXG4gICAgLy8gICAgICAgeyAuLi5tZXRhIH0sXG4gICAgLy8gICAgICAgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfVxuICAgIC8vICAgICApXG4gICAgLy8gICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH1cbiAgICAvLyAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAvLyAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgdGhyb3cgZXJyb3JcbiAgICAvLyAgIH1cbiAgICAvLyB9XG4gICAgLyoqXG4gICAgICogTGlzdHMgYWxsIHRoZSBmaWxlcyB3aXRoaW4gYSBidWNrZXQuXG4gICAgICogQHBhcmFtIHBhdGggVGhlIGZvbGRlciBwYXRoLlxuICAgICAqL1xuICAgIGxpc3QocGF0aCwgb3B0aW9ucywgcGFyYW1ldGVycykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VBUkNIX09QVElPTlMpLCBvcHRpb25zKSwgeyBwcmVmaXg6IHBhdGggfHwgJycgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHBvc3QodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L29iamVjdC9saXN0LyR7dGhpcy5idWNrZXRJZH1gLCBib2R5LCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9LCBwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVuY29kZU1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShtZXRhZGF0YSk7XG4gICAgfVxuICAgIHRvQmFzZTY0KGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oZGF0YSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidG9hKGRhdGEpO1xuICAgIH1cbiAgICBfZ2V0RmluYWxQYXRoKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuYnVja2V0SWR9LyR7cGF0aH1gO1xuICAgIH1cbiAgICBfcmVtb3ZlRW1wdHlGb2xkZXJzKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXlxcL3xcXC8kL2csICcnKS5yZXBsYWNlKC9cXC8rL2csICcvJyk7XG4gICAgfVxuICAgIHRyYW5zZm9ybU9wdHNUb1F1ZXJ5U3RyaW5nKHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBbXTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybS53aWR0aCkge1xuICAgICAgICAgICAgcGFyYW1zLnB1c2goYHdpZHRoPSR7dHJhbnNmb3JtLndpZHRofWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2Zvcm0uaGVpZ2h0KSB7XG4gICAgICAgICAgICBwYXJhbXMucHVzaChgaGVpZ2h0PSR7dHJhbnNmb3JtLmhlaWdodH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNmb3JtLnJlc2l6ZSkge1xuICAgICAgICAgICAgcGFyYW1zLnB1c2goYHJlc2l6ZT0ke3RyYW5zZm9ybS5yZXNpemV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zZm9ybS5mb3JtYXQpIHtcbiAgICAgICAgICAgIHBhcmFtcy5wdXNoKGBmb3JtYXQ9JHt0cmFuc2Zvcm0uZm9ybWF0fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2Zvcm0ucXVhbGl0eSkge1xuICAgICAgICAgICAgcGFyYW1zLnB1c2goYHF1YWxpdHk9JHt0cmFuc2Zvcm0ucXVhbGl0eX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW1zLmpvaW4oJyYnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdG9yYWdlRmlsZUFwaS5qcy5tYXAiLCIvLyBnZW5lcmF0ZWQgYnkgZ2VudmVyc2lvblxuZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMi43LjEnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiLCJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX0hFQURFUlMgPSB7ICdYLUNsaWVudC1JbmZvJzogYHN0b3JhZ2UtanMvJHt2ZXJzaW9ufWAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IERFRkFVTFRfSEVBREVSUyB9IGZyb20gJy4uL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IHsgaXNTdG9yYWdlRXJyb3IgfSBmcm9tICcuLi9saWIvZXJyb3JzJztcbmltcG9ydCB7IGdldCwgcG9zdCwgcHV0LCByZW1vdmUgfSBmcm9tICcuLi9saWIvZmV0Y2gnO1xuaW1wb3J0IHsgcmVzb2x2ZUZldGNoIH0gZnJvbSAnLi4vbGliL2hlbHBlcnMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvcmFnZUJ1Y2tldEFwaSB7XG4gICAgY29uc3RydWN0b3IodXJsLCBoZWFkZXJzID0ge30sIGZldGNoKSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfSEVBREVSUyksIGhlYWRlcnMpO1xuICAgICAgICB0aGlzLmZldGNoID0gcmVzb2x2ZUZldGNoKGZldGNoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBkZXRhaWxzIG9mIGFsbCBTdG9yYWdlIGJ1Y2tldHMgd2l0aGluIGFuIGV4aXN0aW5nIHByb2plY3QuXG4gICAgICovXG4gICAgbGlzdEJ1Y2tldHMoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBnZXQodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L2J1Y2tldGAsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBkZXRhaWxzIG9mIGFuIGV4aXN0aW5nIFN0b3JhZ2UgYnVja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgYnVja2V0IHlvdSB3b3VsZCBsaWtlIHRvIHJldHJpZXZlLlxuICAgICAqL1xuICAgIGdldEJ1Y2tldChpZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgZ2V0KHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9idWNrZXQvJHtpZH1gLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU3RvcmFnZSBidWNrZXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgYnVja2V0IHlvdSBhcmUgY3JlYXRpbmcuXG4gICAgICogQHBhcmFtIG9wdGlvbnMucHVibGljIFRoZSB2aXNpYmlsaXR5IG9mIHRoZSBidWNrZXQuIFB1YmxpYyBidWNrZXRzIGRvbid0IHJlcXVpcmUgYW4gYXV0aG9yaXphdGlvbiB0b2tlbiB0byBkb3dubG9hZCBvYmplY3RzLCBidXQgc3RpbGwgcmVxdWlyZSBhIHZhbGlkIHRva2VuIGZvciBhbGwgb3RoZXIgb3BlcmF0aW9ucy4gQnkgZGVmYXVsdCwgYnVja2V0cyBhcmUgcHJpdmF0ZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5maWxlU2l6ZUxpbWl0IHNwZWNpZmllcyB0aGUgbWF4IGZpbGUgc2l6ZSBpbiBieXRlcyB0aGF0IGNhbiBiZSB1cGxvYWRlZCB0byB0aGlzIGJ1Y2tldC5cbiAgICAgKiBUaGUgZ2xvYmFsIGZpbGUgc2l6ZSBsaW1pdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhpcyB2YWx1ZS5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBudWxsLCB3aGljaCBkb2Vzbid0IHNldCBhIHBlciBidWNrZXQgZmlsZSBzaXplIGxpbWl0LlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmFsbG93ZWRNaW1lVHlwZXMgc3BlY2lmaWVzIHRoZSBhbGxvd2VkIG1pbWUgdHlwZXMgdGhhdCB0aGlzIGJ1Y2tldCBjYW4gYWNjZXB0IGR1cmluZyB1cGxvYWQuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgbnVsbCwgd2hpY2ggYWxsb3dzIGZpbGVzIHdpdGggYWxsIG1pbWUgdHlwZXMgdG8gYmUgdXBsb2FkZWQuXG4gICAgICogRWFjaCBtaW1lIHR5cGUgc3BlY2lmaWVkIGNhbiBiZSBhIHdpbGRjYXJkLCBlLmcuIGltYWdlLyosIG9yIGEgc3BlY2lmaWMgbWltZSB0eXBlLCBlLmcuIGltYWdlL3BuZy5cbiAgICAgKiBAcmV0dXJucyBuZXdseSBjcmVhdGVkIGJ1Y2tldCBpZFxuICAgICAqL1xuICAgIGNyZWF0ZUJ1Y2tldChpZCwgb3B0aW9ucyA9IHtcbiAgICAgICAgcHVibGljOiBmYWxzZSxcbiAgICB9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBwb3N0KHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9idWNrZXRgLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgcHVibGljOiBvcHRpb25zLnB1YmxpYyxcbiAgICAgICAgICAgICAgICAgICAgZmlsZV9zaXplX2xpbWl0OiBvcHRpb25zLmZpbGVTaXplTGltaXQsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRfbWltZV90eXBlczogb3B0aW9ucy5hbGxvd2VkTWltZVR5cGVzLFxuICAgICAgICAgICAgICAgIH0sIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNTdG9yYWdlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhIFN0b3JhZ2UgYnVja2V0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGJ1Y2tldCB5b3UgYXJlIHVwZGF0aW5nLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnB1YmxpYyBUaGUgdmlzaWJpbGl0eSBvZiB0aGUgYnVja2V0LiBQdWJsaWMgYnVja2V0cyBkb24ndCByZXF1aXJlIGFuIGF1dGhvcml6YXRpb24gdG9rZW4gdG8gZG93bmxvYWQgb2JqZWN0cywgYnV0IHN0aWxsIHJlcXVpcmUgYSB2YWxpZCB0b2tlbiBmb3IgYWxsIG90aGVyIG9wZXJhdGlvbnMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZmlsZVNpemVMaW1pdCBzcGVjaWZpZXMgdGhlIG1heCBmaWxlIHNpemUgaW4gYnl0ZXMgdGhhdCBjYW4gYmUgdXBsb2FkZWQgdG8gdGhpcyBidWNrZXQuXG4gICAgICogVGhlIGdsb2JhbCBmaWxlIHNpemUgbGltaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRoaXMgdmFsdWUuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgbnVsbCwgd2hpY2ggZG9lc24ndCBzZXQgYSBwZXIgYnVja2V0IGZpbGUgc2l6ZSBsaW1pdC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hbGxvd2VkTWltZVR5cGVzIHNwZWNpZmllcyB0aGUgYWxsb3dlZCBtaW1lIHR5cGVzIHRoYXQgdGhpcyBidWNrZXQgY2FuIGFjY2VwdCBkdXJpbmcgdXBsb2FkLlxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIG51bGwsIHdoaWNoIGFsbG93cyBmaWxlcyB3aXRoIGFsbCBtaW1lIHR5cGVzIHRvIGJlIHVwbG9hZGVkLlxuICAgICAqIEVhY2ggbWltZSB0eXBlIHNwZWNpZmllZCBjYW4gYmUgYSB3aWxkY2FyZCwgZS5nLiBpbWFnZS8qLCBvciBhIHNwZWNpZmljIG1pbWUgdHlwZSwgZS5nLiBpbWFnZS9wbmcuXG4gICAgICovXG4gICAgdXBkYXRlQnVja2V0KGlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBwdXQodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L2J1Y2tldC8ke2lkfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGlkLFxuICAgICAgICAgICAgICAgICAgICBwdWJsaWM6IG9wdGlvbnMucHVibGljLFxuICAgICAgICAgICAgICAgICAgICBmaWxlX3NpemVfbGltaXQ6IG9wdGlvbnMuZmlsZVNpemVMaW1pdCxcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZF9taW1lX3R5cGVzOiBvcHRpb25zLmFsbG93ZWRNaW1lVHlwZXMsXG4gICAgICAgICAgICAgICAgfSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBvYmplY3RzIGluc2lkZSBhIHNpbmdsZSBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBidWNrZXQgeW91IHdvdWxkIGxpa2UgdG8gZW1wdHkuXG4gICAgICovXG4gICAgZW1wdHlCdWNrZXQoaWQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHBvc3QodGhpcy5mZXRjaCwgYCR7dGhpcy51cmx9L2J1Y2tldC8ke2lkfS9lbXB0eWAsIHt9LCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYW4gZXhpc3RpbmcgYnVja2V0LiBBIGJ1Y2tldCBjYW4ndCBiZSBkZWxldGVkIHdpdGggZXhpc3Rpbmcgb2JqZWN0cyBpbnNpZGUgaXQuXG4gICAgICogWW91IG11c3QgZmlyc3QgYGVtcHR5KClgIHRoZSBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBidWNrZXQgeW91IHdvdWxkIGxpa2UgdG8gZGVsZXRlLlxuICAgICAqL1xuICAgIGRlbGV0ZUJ1Y2tldChpZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geWllbGQgcmVtb3ZlKHRoaXMuZmV0Y2gsIGAke3RoaXMudXJsfS9idWNrZXQvJHtpZH1gLCB7fSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VCdWNrZXRBcGkuanMubWFwIiwiaW1wb3J0IFN0b3JhZ2VGaWxlQXBpIGZyb20gJy4vcGFja2FnZXMvU3RvcmFnZUZpbGVBcGknO1xuaW1wb3J0IFN0b3JhZ2VCdWNrZXRBcGkgZnJvbSAnLi9wYWNrYWdlcy9TdG9yYWdlQnVja2V0QXBpJztcbmV4cG9ydCBjbGFzcyBTdG9yYWdlQ2xpZW50IGV4dGVuZHMgU3RvcmFnZUJ1Y2tldEFwaSB7XG4gICAgY29uc3RydWN0b3IodXJsLCBoZWFkZXJzID0ge30sIGZldGNoKSB7XG4gICAgICAgIHN1cGVyKHVybCwgaGVhZGVycywgZmV0Y2gpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGZpbGUgb3BlcmF0aW9uIGluIGEgYnVja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIFRoZSBidWNrZXQgaWQgdG8gb3BlcmF0ZSBvbi5cbiAgICAgKi9cbiAgICBmcm9tKGlkKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RvcmFnZUZpbGVBcGkodGhpcy51cmwsIHRoaXMuaGVhZGVycywgaWQsIHRoaXMuZmV0Y2gpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VDbGllbnQuanMubWFwIiwiaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbic7XG5sZXQgSlNfRU5WID0gJyc7XG4vLyBAdHMtaWdub3JlXG5pZiAodHlwZW9mIERlbm8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgSlNfRU5WID0gJ2Rlbm8nO1xufVxuZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIEpTX0VOViA9ICd3ZWInO1xufVxuZWxzZSBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICBKU19FTlYgPSAncmVhY3QtbmF0aXZlJztcbn1cbmVsc2Uge1xuICAgIEpTX0VOViA9ICdub2RlJztcbn1cbmV4cG9ydCBjb25zdCBERUZBVUxUX0hFQURFUlMgPSB7ICdYLUNsaWVudC1JbmZvJzogYHN1cGFiYXNlLWpzLSR7SlNfRU5WfS8ke3ZlcnNpb259YCB9O1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfR0xPQkFMX09QVElPTlMgPSB7XG4gICAgaGVhZGVyczogREVGQVVMVF9IRUFERVJTLFxufTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0RCX09QVElPTlMgPSB7XG4gICAgc2NoZW1hOiAncHVibGljJyxcbn07XG5leHBvcnQgY29uc3QgREVGQVVMVF9BVVRIX09QVElPTlMgPSB7XG4gICAgYXV0b1JlZnJlc2hUb2tlbjogdHJ1ZSxcbiAgICBwZXJzaXN0U2Vzc2lvbjogdHJ1ZSxcbiAgICBkZXRlY3RTZXNzaW9uSW5Vcmw6IHRydWUsXG4gICAgZmxvd1R5cGU6ICdpbXBsaWNpdCcsXG59O1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUkVBTFRJTUVfT1BUSU9OUyA9IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IG5vZGVGZXRjaCwgeyBIZWFkZXJzIGFzIE5vZGVGZXRjaEhlYWRlcnMgfSBmcm9tICdAc3VwYWJhc2Uvbm9kZS1mZXRjaCc7XG5leHBvcnQgY29uc3QgcmVzb2x2ZUZldGNoID0gKGN1c3RvbUZldGNoKSA9PiB7XG4gICAgbGV0IF9mZXRjaDtcbiAgICBpZiAoY3VzdG9tRmV0Y2gpIHtcbiAgICAgICAgX2ZldGNoID0gY3VzdG9tRmV0Y2g7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBmZXRjaCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX2ZldGNoID0gbm9kZUZldGNoO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgX2ZldGNoID0gZmV0Y2g7XG4gICAgfVxuICAgIHJldHVybiAoLi4uYXJncykgPT4gX2ZldGNoKC4uLmFyZ3MpO1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlSGVhZGVyc0NvbnN0cnVjdG9yID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgSGVhZGVycyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIE5vZGVGZXRjaEhlYWRlcnM7XG4gICAgfVxuICAgIHJldHVybiBIZWFkZXJzO1xufTtcbmV4cG9ydCBjb25zdCBmZXRjaFdpdGhBdXRoID0gKHN1cGFiYXNlS2V5LCBnZXRBY2Nlc3NUb2tlbiwgY3VzdG9tRmV0Y2gpID0+IHtcbiAgICBjb25zdCBmZXRjaCA9IHJlc29sdmVGZXRjaChjdXN0b21GZXRjaCk7XG4gICAgY29uc3QgSGVhZGVyc0NvbnN0cnVjdG9yID0gcmVzb2x2ZUhlYWRlcnNDb25zdHJ1Y3RvcigpO1xuICAgIHJldHVybiAoaW5wdXQsIGluaXQpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gKF9hID0gKHlpZWxkIGdldEFjY2Vzc1Rva2VuKCkpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBzdXBhYmFzZUtleTtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVyc0NvbnN0cnVjdG9yKGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5oZWFkZXJzKTtcbiAgICAgICAgaWYgKCFoZWFkZXJzLmhhcygnYXBpa2V5JykpIHtcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdhcGlrZXknLCBzdXBhYmFzZUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFoZWFkZXJzLmhhcygnQXV0aG9yaXphdGlvbicpKSB7XG4gICAgICAgICAgICBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthY2Nlc3NUb2tlbn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmV0Y2goaW5wdXQsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaW5pdCksIHsgaGVhZGVycyB9KSk7XG4gICAgfSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2guanMubWFwIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMi43MC4wJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIiwiaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbic7XG4vKiogQ3VycmVudCBzZXNzaW9uIHdpbGwgYmUgY2hlY2tlZCBmb3IgcmVmcmVzaCBhdCB0aGlzIGludGVydmFsLiAqL1xuZXhwb3J0IGNvbnN0IEFVVE9fUkVGUkVTSF9USUNLX0RVUkFUSU9OX01TID0gMzAgKiAxMDAwO1xuLyoqXG4gKiBBIHRva2VuIHJlZnJlc2ggd2lsbCBiZSBhdHRlbXB0ZWQgdGhpcyBtYW55IHRpY2tzIGJlZm9yZSB0aGUgY3VycmVudCBzZXNzaW9uIGV4cGlyZXMuICovXG5leHBvcnQgY29uc3QgQVVUT19SRUZSRVNIX1RJQ0tfVEhSRVNIT0xEID0gMztcbi8qXG4gKiBFYXJsaWVzdCB0aW1lIGJlZm9yZSBhbiBhY2Nlc3MgdG9rZW4gZXhwaXJlcyB0aGF0IHRoZSBzZXNzaW9uIHNob3VsZCBiZSByZWZyZXNoZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBFWFBJUllfTUFSR0lOX01TID0gQVVUT19SRUZSRVNIX1RJQ0tfVEhSRVNIT0xEICogQVVUT19SRUZSRVNIX1RJQ0tfRFVSQVRJT05fTVM7XG5leHBvcnQgY29uc3QgR09UUlVFX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0Ojk5OTknO1xuZXhwb3J0IGNvbnN0IFNUT1JBR0VfS0VZID0gJ3N1cGFiYXNlLmF1dGgudG9rZW4nO1xuZXhwb3J0IGNvbnN0IEFVRElFTkNFID0gJyc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9IRUFERVJTID0geyAnWC1DbGllbnQtSW5mbyc6IGBnb3RydWUtanMvJHt2ZXJzaW9ufWAgfTtcbmV4cG9ydCBjb25zdCBORVRXT1JLX0ZBSUxVUkUgPSB7XG4gICAgTUFYX1JFVFJJRVM6IDEwLFxuICAgIFJFVFJZX0lOVEVSVkFMOiAyLCAvLyBpbiBkZWNpc2Vjb25kc1xufTtcbmV4cG9ydCBjb25zdCBBUElfVkVSU0lPTl9IRUFERVJfTkFNRSA9ICdYLVN1cGFiYXNlLUFwaS1WZXJzaW9uJztcbmV4cG9ydCBjb25zdCBBUElfVkVSU0lPTlMgPSB7XG4gICAgJzIwMjQtMDEtMDEnOiB7XG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5wYXJzZSgnMjAyNC0wMS0wMVQwMDowMDowMC4wWicpLFxuICAgICAgICBuYW1lOiAnMjAyNC0wMS0wMScsXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQkFTRTY0VVJMX1JFR0VYID0gL14oW2EtejAtOV8tXXs0fSkqKCR8W2EtejAtOV8tXXszfSR8W2EtejAtOV8tXXsyfSQpJC9pO1xuZXhwb3J0IGNvbnN0IEpXS1NfVFRMID0gNjAwMDAwOyAvLyAxMCBtaW51dGVzXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiZXhwb3J0IGNsYXNzIEF1dGhFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzdGF0dXMsIGNvZGUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuX19pc0F1dGhFcnJvciA9IHRydWU7XG4gICAgICAgIHRoaXMubmFtZSA9ICdBdXRoRXJyb3InO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBdXRoRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvciAhPT0gbnVsbCAmJiAnX19pc0F1dGhFcnJvcicgaW4gZXJyb3I7XG59XG5leHBvcnQgY2xhc3MgQXV0aEFwaUVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzdGF0dXMsIGNvZGUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgc3RhdHVzLCBjb2RlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0F1dGhBcGlFcnJvcic7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhBcGlFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBpc0F1dGhFcnJvcihlcnJvcikgJiYgZXJyb3IubmFtZSA9PT0gJ0F1dGhBcGlFcnJvcic7XG59XG5leHBvcnQgY2xhc3MgQXV0aFVua25vd25FcnJvciBleHRlbmRzIEF1dGhFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3JpZ2luYWxFcnJvcikge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0F1dGhVbmtub3duRXJyb3InO1xuICAgICAgICB0aGlzLm9yaWdpbmFsRXJyb3IgPSBvcmlnaW5hbEVycm9yO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDdXN0b21BdXRoRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG5hbWUsIHN0YXR1cywgY29kZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBzdGF0dXMsIGNvZGUpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IgZXh0ZW5kcyBDdXN0b21BdXRoRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignQXV0aCBzZXNzaW9uIG1pc3NpbmchJywgJ0F1dGhTZXNzaW9uTWlzc2luZ0Vycm9yJywgNDAwLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhTZXNzaW9uTWlzc2luZ0Vycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGlzQXV0aEVycm9yKGVycm9yKSAmJiBlcnJvci5uYW1lID09PSAnQXV0aFNlc3Npb25NaXNzaW5nRXJyb3InO1xufVxuZXhwb3J0IGNsYXNzIEF1dGhJbnZhbGlkVG9rZW5SZXNwb25zZUVycm9yIGV4dGVuZHMgQ3VzdG9tQXV0aEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0F1dGggc2Vzc2lvbiBvciB1c2VyIG1pc3NpbmcnLCAnQXV0aEludmFsaWRUb2tlblJlc3BvbnNlRXJyb3InLCA1MDAsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEF1dGhJbnZhbGlkQ3JlZGVudGlhbHNFcnJvciBleHRlbmRzIEN1c3RvbUF1dGhFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCAnQXV0aEludmFsaWRDcmVkZW50aWFsc0Vycm9yJywgNDAwLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3IgZXh0ZW5kcyBDdXN0b21BdXRoRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMgPSBudWxsKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3InLCA1MDAsIHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IG51bGw7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICBkZXRhaWxzOiB0aGlzLmRldGFpbHMsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aEltcGxpY2l0R3JhbnRSZWRpcmVjdEVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGlzQXV0aEVycm9yKGVycm9yKSAmJiBlcnJvci5uYW1lID09PSAnQXV0aEltcGxpY2l0R3JhbnRSZWRpcmVjdEVycm9yJztcbn1cbmV4cG9ydCBjbGFzcyBBdXRoUEtDRUdyYW50Q29kZUV4Y2hhbmdlRXJyb3IgZXh0ZW5kcyBDdXN0b21BdXRoRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMgPSBudWxsKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdBdXRoUEtDRUdyYW50Q29kZUV4Y2hhbmdlRXJyb3InLCA1MDAsIHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IG51bGw7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICBkZXRhaWxzOiB0aGlzLmRldGFpbHMsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEF1dGhSZXRyeWFibGVGZXRjaEVycm9yIGV4dGVuZHMgQ3VzdG9tQXV0aEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzdGF0dXMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ0F1dGhSZXRyeWFibGVGZXRjaEVycm9yJywgc3RhdHVzLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhSZXRyeWFibGVGZXRjaEVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGlzQXV0aEVycm9yKGVycm9yKSAmJiBlcnJvci5uYW1lID09PSAnQXV0aFJldHJ5YWJsZUZldGNoRXJyb3InO1xufVxuLyoqXG4gKiBUaGlzIGVycm9yIGlzIHRocm93biBvbiBjZXJ0YWluIG1ldGhvZHMgd2hlbiB0aGUgcGFzc3dvcmQgdXNlZCBpcyBkZWVtZWRcbiAqIHdlYWsuIEluc3BlY3QgdGhlIHJlYXNvbnMgdG8gaWRlbnRpZnkgd2hhdCBwYXNzd29yZCBzdHJlbmd0aCBydWxlcyBhcmVcbiAqIGluYWRlcXVhdGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBBdXRoV2Vha1Bhc3N3b3JkRXJyb3IgZXh0ZW5kcyBDdXN0b21BdXRoRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1cywgcmVhc29ucykge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCAnQXV0aFdlYWtQYXNzd29yZEVycm9yJywgc3RhdHVzLCAnd2Vha19wYXNzd29yZCcpO1xuICAgICAgICB0aGlzLnJlYXNvbnMgPSByZWFzb25zO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhXZWFrUGFzc3dvcmRFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBpc0F1dGhFcnJvcihlcnJvcikgJiYgZXJyb3IubmFtZSA9PT0gJ0F1dGhXZWFrUGFzc3dvcmRFcnJvcic7XG59XG5leHBvcnQgY2xhc3MgQXV0aEludmFsaWRKd3RFcnJvciBleHRlbmRzIEN1c3RvbUF1dGhFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCAnQXV0aEludmFsaWRKd3RFcnJvcicsIDQwMCwgJ2ludmFsaWRfand0Jyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsIi8qKlxuICogQXZvaWQgbW9kaWZ5aW5nIHRoaXMgZmlsZS4gSXQncyBwYXJ0IG9mXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc3VwYWJhc2UtY29tbXVuaXR5L2Jhc2U2NHVybC1qcy4gIFN1Ym1pdCBhbGwgZml4ZXMgb25cbiAqIHRoYXQgcmVwbyFcbiAqL1xuLyoqXG4gKiBBbiBhcnJheSBvZiBjaGFyYWN0ZXJzIHRoYXQgZW5jb2RlIDYgYml0cyBpbnRvIGEgQmFzZTY0LVVSTCBhbHBoYWJldFxuICogY2hhcmFjdGVyLlxuICovXG5jb25zdCBUT19CQVNFNjRVUkwgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktXycuc3BsaXQoJycpO1xuLyoqXG4gKiBBbiBhcnJheSBvZiBjaGFyYWN0ZXJzIHRoYXQgY2FuIGFwcGVhciBpbiBhIEJhc2U2NC1VUkwgZW5jb2RlZCBzdHJpbmcgYnV0XG4gKiBzaG91bGQgYmUgaWdub3JlZC5cbiAqL1xuY29uc3QgSUdOT1JFX0JBU0U2NFVSTCA9ICcgXFx0XFxuXFxyPScuc3BsaXQoJycpO1xuLyoqXG4gKiBBbiBhcnJheSBvZiAxMjggbnVtYmVycyB0aGF0IG1hcCBhIEJhc2U2NC1VUkwgY2hhcmFjdGVyIHRvIDYgYml0cywgb3IgaWYgLTJcbiAqIHVzZWQgdG8gc2tpcCB0aGUgY2hhcmFjdGVyLCBvciBpZiAtMSB1c2VkIHRvIGVycm9yIG91dC5cbiAqL1xuY29uc3QgRlJPTV9CQVNFNjRVUkwgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGNoYXJNYXAgPSBuZXcgQXJyYXkoMTI4KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJNYXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY2hhck1hcFtpXSA9IC0xO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IElHTk9SRV9CQVNFNjRVUkwubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY2hhck1hcFtJR05PUkVfQkFTRTY0VVJMW2ldLmNoYXJDb2RlQXQoMCldID0gLTI7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgVE9fQkFTRTY0VVJMLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNoYXJNYXBbVE9fQkFTRTY0VVJMW2ldLmNoYXJDb2RlQXQoMCldID0gaTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJNYXA7XG59KSgpO1xuLyoqXG4gKiBDb252ZXJ0cyBhIGJ5dGUgdG8gYSBCYXNlNjQtVVJMIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gYnl0ZSBUaGUgYnl0ZSB0byBjb252ZXJ0LCBvciBudWxsIHRvIGZsdXNoIGF0IHRoZSBlbmQgb2YgdGhlIGJ5dGUgc2VxdWVuY2UuXG4gKiBAcGFyYW0gc3RhdGUgVGhlIEJhc2U2NCBjb252ZXJzaW9uIHN0YXRlLiBQYXNzIGFuIGluaXRpYWwgdmFsdWUgb2YgYHsgcXVldWU6IDAsIHF1ZXVlZEJpdHM6IDAgfWAuXG4gKiBAcGFyYW0gZW1pdCBBIGZ1bmN0aW9uIGNhbGxlZCB3aXRoIHRoZSBuZXh0IEJhc2U2NCBjaGFyYWN0ZXIgd2hlbiByZWFkeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVUb0Jhc2U2NFVSTChieXRlLCBzdGF0ZSwgZW1pdCkge1xuICAgIGlmIChieXRlICE9PSBudWxsKSB7XG4gICAgICAgIHN0YXRlLnF1ZXVlID0gKHN0YXRlLnF1ZXVlIDw8IDgpIHwgYnl0ZTtcbiAgICAgICAgc3RhdGUucXVldWVkQml0cyArPSA4O1xuICAgICAgICB3aGlsZSAoc3RhdGUucXVldWVkQml0cyA+PSA2KSB7XG4gICAgICAgICAgICBjb25zdCBwb3MgPSAoc3RhdGUucXVldWUgPj4gKHN0YXRlLnF1ZXVlZEJpdHMgLSA2KSkgJiA2MztcbiAgICAgICAgICAgIGVtaXQoVE9fQkFTRTY0VVJMW3Bvc10pO1xuICAgICAgICAgICAgc3RhdGUucXVldWVkQml0cyAtPSA2O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0YXRlLnF1ZXVlZEJpdHMgPiAwKSB7XG4gICAgICAgIHN0YXRlLnF1ZXVlID0gc3RhdGUucXVldWUgPDwgKDYgLSBzdGF0ZS5xdWV1ZWRCaXRzKTtcbiAgICAgICAgc3RhdGUucXVldWVkQml0cyA9IDY7XG4gICAgICAgIHdoaWxlIChzdGF0ZS5xdWV1ZWRCaXRzID49IDYpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IChzdGF0ZS5xdWV1ZSA+PiAoc3RhdGUucXVldWVkQml0cyAtIDYpKSAmIDYzO1xuICAgICAgICAgICAgZW1pdChUT19CQVNFNjRVUkxbcG9zXSk7XG4gICAgICAgICAgICBzdGF0ZS5xdWV1ZWRCaXRzIC09IDY7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIENvbnZlcnRzIGEgU3RyaW5nIGNoYXIgY29kZSAoZXh0cmFjdGVkIHVzaW5nIGBzdHJpbmcuY2hhckNvZGVBdChwb3NpdGlvbilgKSB0byBhIHNlcXVlbmNlIG9mIEJhc2U2NC1VUkwgY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0gY2hhckNvZGUgVGhlIGNoYXIgY29kZSBvZiB0aGUgSmF2YVNjcmlwdCBzdHJpbmcuXG4gKiBAcGFyYW0gc3RhdGUgVGhlIEJhc2U2NCBzdGF0ZS4gUGFzcyBhbiBpbml0aWFsIHZhbHVlIG9mIGB7IHF1ZXVlOiAwLCBxdWV1ZWRCaXRzOiAwIH1gLlxuICogQHBhcmFtIGVtaXQgQSBmdW5jdGlvbiBjYWxsZWQgd2l0aCB0aGUgbmV4dCBieXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYnl0ZUZyb21CYXNlNjRVUkwoY2hhckNvZGUsIHN0YXRlLCBlbWl0KSB7XG4gICAgY29uc3QgYml0cyA9IEZST01fQkFTRTY0VVJMW2NoYXJDb2RlXTtcbiAgICBpZiAoYml0cyA+IC0xKSB7XG4gICAgICAgIC8vIHZhbGlkIEJhc2U2NC1VUkwgY2hhcmFjdGVyXG4gICAgICAgIHN0YXRlLnF1ZXVlID0gKHN0YXRlLnF1ZXVlIDw8IDYpIHwgYml0cztcbiAgICAgICAgc3RhdGUucXVldWVkQml0cyArPSA2O1xuICAgICAgICB3aGlsZSAoc3RhdGUucXVldWVkQml0cyA+PSA4KSB7XG4gICAgICAgICAgICBlbWl0KChzdGF0ZS5xdWV1ZSA+PiAoc3RhdGUucXVldWVkQml0cyAtIDgpKSAmIDB4ZmYpO1xuICAgICAgICAgICAgc3RhdGUucXVldWVkQml0cyAtPSA4O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGJpdHMgPT09IC0yKSB7XG4gICAgICAgIC8vIGlnbm9yZSBzcGFjZXMsIHRhYnMsIG5ld2xpbmVzLCA9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBCYXNlNjQtVVJMIGNoYXJhY3RlciBcIiR7U3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSl9XCJgKTtcbiAgICB9XG59XG4vKipcbiAqIENvbnZlcnRzIGEgSmF2YVNjcmlwdCBzdHJpbmcgKHdoaWNoIG1heSBpbmNsdWRlIGFueSB2YWxpZCBjaGFyYWN0ZXIpIGludG8gYVxuICogQmFzZTY0LVVSTCBlbmNvZGVkIHN0cmluZy4gVGhlIHN0cmluZyBpcyBmaXJzdCBlbmNvZGVkIGluIFVURi04IHdoaWNoIGlzXG4gKiB0aGVuIGVuY29kZWQgYXMgQmFzZTY0LVVSTC5cbiAqXG4gKiBAcGFyYW0gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1RvQmFzZTY0VVJMKHN0cikge1xuICAgIGNvbnN0IGJhc2U2NCA9IFtdO1xuICAgIGNvbnN0IGVtaXR0ZXIgPSAoY2hhcikgPT4ge1xuICAgICAgICBiYXNlNjQucHVzaChjaGFyKTtcbiAgICB9O1xuICAgIGNvbnN0IHN0YXRlID0geyBxdWV1ZTogMCwgcXVldWVkQml0czogMCB9O1xuICAgIHN0cmluZ1RvVVRGOChzdHIsIChieXRlKSA9PiB7XG4gICAgICAgIGJ5dGVUb0Jhc2U2NFVSTChieXRlLCBzdGF0ZSwgZW1pdHRlcik7XG4gICAgfSk7XG4gICAgYnl0ZVRvQmFzZTY0VVJMKG51bGwsIHN0YXRlLCBlbWl0dGVyKTtcbiAgICByZXR1cm4gYmFzZTY0LmpvaW4oJycpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIEJhc2U2NC1VUkwgZW5jb2RlZCBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgc3RyaW5nLiBJdCBpcyBhc3N1bWVkXG4gKiB0aGF0IHRoZSB1bmRlcmx5aW5nIHN0cmluZyBoYXMgYmVlbiBlbmNvZGVkIGFzIFVURi04LlxuICpcbiAqIEBwYXJhbSBzdHIgVGhlIEJhc2U2NC1VUkwgZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdGcm9tQmFzZTY0VVJMKHN0cikge1xuICAgIGNvbnN0IGNvbnYgPSBbXTtcbiAgICBjb25zdCB1dGY4RW1pdCA9IChjb2RlcG9pbnQpID0+IHtcbiAgICAgICAgY29udi5wdXNoKFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGVwb2ludCkpO1xuICAgIH07XG4gICAgY29uc3QgdXRmOFN0YXRlID0ge1xuICAgICAgICB1dGY4c2VxOiAwLFxuICAgICAgICBjb2RlcG9pbnQ6IDAsXG4gICAgfTtcbiAgICBjb25zdCBiNjRTdGF0ZSA9IHsgcXVldWU6IDAsIHF1ZXVlZEJpdHM6IDAgfTtcbiAgICBjb25zdCBieXRlRW1pdCA9IChieXRlKSA9PiB7XG4gICAgICAgIHN0cmluZ0Zyb21VVEY4KGJ5dGUsIHV0ZjhTdGF0ZSwgdXRmOEVtaXQpO1xuICAgIH07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYnl0ZUZyb21CYXNlNjRVUkwoc3RyLmNoYXJDb2RlQXQoaSksIGI2NFN0YXRlLCBieXRlRW1pdCk7XG4gICAgfVxuICAgIHJldHVybiBjb252LmpvaW4oJycpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgY29kZXBvaW50IHRvIGEgbXVsdGktYnl0ZSBVVEYtOCBzZXF1ZW5jZS5cbiAqXG4gKiBAcGFyYW0gY29kZXBvaW50IFRoZSBVbmljb2RlIGNvZGVwb2ludC5cbiAqIEBwYXJhbSBlbWl0ICAgICAgRnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2ggVVRGLTggYnl0ZSB0aGF0IHJlcHJlc2VudHMgdGhlIGNvZGVwb2ludC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZGVwb2ludFRvVVRGOChjb2RlcG9pbnQsIGVtaXQpIHtcbiAgICBpZiAoY29kZXBvaW50IDw9IDB4N2YpIHtcbiAgICAgICAgZW1pdChjb2RlcG9pbnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvZGVwb2ludCA8PSAweDdmZikge1xuICAgICAgICBlbWl0KDB4YzAgfCAoY29kZXBvaW50ID4+IDYpKTtcbiAgICAgICAgZW1pdCgweDgwIHwgKGNvZGVwb2ludCAmIDB4M2YpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlcG9pbnQgPD0gMHhmZmZmKSB7XG4gICAgICAgIGVtaXQoMHhlMCB8IChjb2RlcG9pbnQgPj4gMTIpKTtcbiAgICAgICAgZW1pdCgweDgwIHwgKChjb2RlcG9pbnQgPj4gNikgJiAweDNmKSk7XG4gICAgICAgIGVtaXQoMHg4MCB8IChjb2RlcG9pbnQgJiAweDNmKSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZXBvaW50IDw9IDB4MTBmZmZmKSB7XG4gICAgICAgIGVtaXQoMHhmMCB8IChjb2RlcG9pbnQgPj4gMTgpKTtcbiAgICAgICAgZW1pdCgweDgwIHwgKChjb2RlcG9pbnQgPj4gMTIpICYgMHgzZikpO1xuICAgICAgICBlbWl0KDB4ODAgfCAoKGNvZGVwb2ludCA+PiA2KSAmIDB4M2YpKTtcbiAgICAgICAgZW1pdCgweDgwIHwgKGNvZGVwb2ludCAmIDB4M2YpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBVbmljb2RlIGNvZGVwb2ludDogJHtjb2RlcG9pbnQudG9TdHJpbmcoMTYpfWApO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIEphdmFTY3JpcHQgc3RyaW5nIHRvIGEgc2VxdWVuY2Ugb2YgVVRGLTggYnl0ZXMuXG4gKlxuICogQHBhcmFtIHN0ciAgVGhlIHN0cmluZyB0byBjb252ZXJ0IHRvIFVURi04LlxuICogQHBhcmFtIGVtaXQgRnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2ggVVRGLTggYnl0ZSBvZiB0aGUgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9VVEY4KHN0ciwgZW1pdCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGxldCBjb2RlcG9pbnQgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGNvZGVwb2ludCA+IDB4ZDdmZiAmJiBjb2RlcG9pbnQgPD0gMHhkYmZmKSB7XG4gICAgICAgICAgICAvLyBtb3N0IFVURi0xNiBjb2RlcG9pbnRzIGFyZSBVbmljb2RlIGNvZGVwb2ludHMsIGV4Y2VwdCB2YWx1ZXMgaW4gdGhpc1xuICAgICAgICAgICAgLy8gcmFuZ2Ugd2hlcmUgdGhlIG5leHQgVVRGLTE2IGNvZGVwb2ludCBuZWVkcyB0byBiZSBjb21iaW5lZCB3aXRoIHRoZVxuICAgICAgICAgICAgLy8gY3VycmVudCBvbmUgdG8gZ2V0IHRoZSBVbmljb2RlIGNvZGVwb2ludFxuICAgICAgICAgICAgY29uc3QgaGlnaFN1cnJvZ2F0ZSA9ICgoY29kZXBvaW50IC0gMHhkODAwKSAqIDB4NDAwKSAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGNvbnN0IGxvd1N1cnJvZ2F0ZSA9IChzdHIuY2hhckNvZGVBdChpICsgMSkgLSAweGRjMDApICYgMHhmZmZmO1xuICAgICAgICAgICAgY29kZXBvaW50ID0gKGxvd1N1cnJvZ2F0ZSB8IGhpZ2hTdXJyb2dhdGUpICsgMHgxMDAwMDtcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb2RlcG9pbnRUb1VURjgoY29kZXBvaW50LCBlbWl0KTtcbiAgICB9XG59XG4vKipcbiAqIENvbnZlcnRzIGEgVVRGLTggYnl0ZSB0byBhIFVuaWNvZGUgY29kZXBvaW50LlxuICpcbiAqIEBwYXJhbSBieXRlICBUaGUgVVRGLTggYnl0ZSBuZXh0IGluIHRoZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSBzdGF0ZSBUaGUgc2hhcmVkIHN0YXRlIGJldHdlZW4gY29uc2VjdXRpdmUgVVRGLTggYnl0ZXMgaW4gdGhlXG4gKiAgICAgICAgICAgICAgc2VxdWVuY2UsIGFuIG9iamVjdCB3aXRoIHRoZSBzaGFwZSBgeyB1dGY4c2VxOiAwLCBjb2RlcG9pbnQ6IDAgfWAuXG4gKiBAcGFyYW0gZW1pdCAgRnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2ggY29kZXBvaW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nRnJvbVVURjgoYnl0ZSwgc3RhdGUsIGVtaXQpIHtcbiAgICBpZiAoc3RhdGUudXRmOHNlcSA9PT0gMCkge1xuICAgICAgICBpZiAoYnl0ZSA8PSAweDdmKSB7XG4gICAgICAgICAgICBlbWl0KGJ5dGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvdW50IHRoZSBudW1iZXIgb2YgMSBsZWFkaW5nIGJpdHMgdW50aWwgeW91IHJlYWNoIDBcbiAgICAgICAgZm9yIChsZXQgbGVhZGluZ0JpdCA9IDE7IGxlYWRpbmdCaXQgPCA2OyBsZWFkaW5nQml0ICs9IDEpIHtcbiAgICAgICAgICAgIGlmICgoKGJ5dGUgPj4gKDcgLSBsZWFkaW5nQml0KSkgJiAxKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHN0YXRlLnV0ZjhzZXEgPSBsZWFkaW5nQml0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS51dGY4c2VxID09PSAyKSB7XG4gICAgICAgICAgICBzdGF0ZS5jb2RlcG9pbnQgPSBieXRlICYgMzE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUudXRmOHNlcSA9PT0gMykge1xuICAgICAgICAgICAgc3RhdGUuY29kZXBvaW50ID0gYnl0ZSAmIDE1O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLnV0ZjhzZXEgPT09IDQpIHtcbiAgICAgICAgICAgIHN0YXRlLmNvZGVwb2ludCA9IGJ5dGUgJiA3O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFVURi04IHNlcXVlbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUudXRmOHNlcSAtPSAxO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdGF0ZS51dGY4c2VxID4gMCkge1xuICAgICAgICBpZiAoYnl0ZSA8PSAweDdmKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgVVRGLTggc2VxdWVuY2UnKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5jb2RlcG9pbnQgPSAoc3RhdGUuY29kZXBvaW50IDw8IDYpIHwgKGJ5dGUgJiA2Myk7XG4gICAgICAgIHN0YXRlLnV0ZjhzZXEgLT0gMTtcbiAgICAgICAgaWYgKHN0YXRlLnV0ZjhzZXEgPT09IDApIHtcbiAgICAgICAgICAgIGVtaXQoc3RhdGUuY29kZXBvaW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9ucyB0byBjb252ZXJ0IGRpZmZlcmVudCB0eXBlcyBvZiBzdHJpbmdzIHRvIFVpbnQ4QXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NFVybFRvVWludDhBcnJheShzdHIpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBzdGF0ZSA9IHsgcXVldWU6IDAsIHF1ZXVlZEJpdHM6IDAgfTtcbiAgICBjb25zdCBvbkJ5dGUgPSAoYnl0ZSkgPT4ge1xuICAgICAgICByZXN1bHQucHVzaChieXRlKTtcbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGJ5dGVGcm9tQmFzZTY0VVJMKHN0ci5jaGFyQ29kZUF0KGkpLCBzdGF0ZSwgb25CeXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3VsdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9VaW50OEFycmF5KHN0cikge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHN0cmluZ1RvVVRGOChzdHIsIChieXRlKSA9PiByZXN1bHQucHVzaChieXRlKSk7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3VsdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gYnl0ZXNUb0Jhc2U2NFVSTChieXRlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IHN0YXRlID0geyBxdWV1ZTogMCwgcXVldWVkQml0czogMCB9O1xuICAgIGNvbnN0IG9uQ2hhciA9IChjaGFyKSA9PiB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGNoYXIpO1xuICAgIH07XG4gICAgYnl0ZXMuZm9yRWFjaCgoYnl0ZSkgPT4gYnl0ZVRvQmFzZTY0VVJMKGJ5dGUsIHN0YXRlLCBvbkNoYXIpKTtcbiAgICAvLyBhbHdheXMgY2FsbCB3aXRoIGBudWxsYCBhZnRlciBwcm9jZXNzaW5nIGFsbCBieXRlc1xuICAgIGJ5dGVUb0Jhc2U2NFVSTChudWxsLCBzdGF0ZSwgb25DaGFyKTtcbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0dXJsLmpzLm1hcCIsImltcG9ydCB7IEFQSV9WRVJTSU9OX0hFQURFUl9OQU1FLCBCQVNFNjRVUkxfUkVHRVggfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBBdXRoSW52YWxpZEp3dEVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuaW1wb3J0IHsgYmFzZTY0VXJsVG9VaW50OEFycmF5LCBzdHJpbmdGcm9tQmFzZTY0VVJMIH0gZnJvbSAnLi9iYXNlNjR1cmwnO1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGlyZXNBdChleHBpcmVzSW4pIHtcbiAgICBjb25zdCB0aW1lTm93ID0gTWF0aC5yb3VuZChEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgcmV0dXJuIHRpbWVOb3cgKyBleHBpcmVzSW47XG59XG5leHBvcnQgZnVuY3Rpb24gdXVpZCgpIHtcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICBjb25zdCByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5leHBvcnQgY29uc3QgaXNCcm93c2VyID0gKCkgPT4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbmNvbnN0IGxvY2FsU3RvcmFnZVdyaXRlVGVzdHMgPSB7XG4gICAgdGVzdGVkOiBmYWxzZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG59O1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBsb2NhbFN0b3JhZ2UgaXMgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3Nlci5cbiAqL1xuZXhwb3J0IGNvbnN0IHN1cHBvcnRzTG9jYWxTdG9yYWdlID0gKCkgPT4ge1xuICAgIGlmICghaXNCcm93c2VyKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMubG9jYWxTdG9yYWdlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIERPTSBleGNlcHRpb24gd2hlbiBhY2Nlc3NpbmcgYGxvY2FsU3RvcmFnZWBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobG9jYWxTdG9yYWdlV3JpdGVUZXN0cy50ZXN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZVdyaXRlVGVzdHMud3JpdGFibGU7XG4gICAgfVxuICAgIGNvbnN0IHJhbmRvbUtleSA9IGBsc3d0LSR7TWF0aC5yYW5kb20oKX0ke01hdGgucmFuZG9tKCl9YDtcbiAgICB0cnkge1xuICAgICAgICBnbG9iYWxUaGlzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKHJhbmRvbUtleSwgcmFuZG9tS2V5KTtcbiAgICAgICAgZ2xvYmFsVGhpcy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShyYW5kb21LZXkpO1xuICAgICAgICBsb2NhbFN0b3JhZ2VXcml0ZVRlc3RzLnRlc3RlZCA9IHRydWU7XG4gICAgICAgIGxvY2FsU3RvcmFnZVdyaXRlVGVzdHMud3JpdGFibGUgPSB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBsb2NhbFN0b3JhZ2UgY2FuJ3QgYmUgd3JpdHRlbiB0b1xuICAgICAgICAvLyBodHRwczovL3d3dy5jaHJvbWl1bS5vcmcvZm9yLXRlc3RlcnMvYnVnLXJlcG9ydGluZy1ndWlkZWxpbmVzL3VuY2F1Z2h0LXNlY3VyaXR5ZXJyb3ItZmFpbGVkLXRvLXJlYWQtdGhlLWxvY2Fsc3RvcmFnZS1wcm9wZXJ0eS1mcm9tLXdpbmRvdy1hY2Nlc3MtaXMtZGVuaWVkLWZvci10aGlzLWRvY3VtZW50XG4gICAgICAgIGxvY2FsU3RvcmFnZVdyaXRlVGVzdHMudGVzdGVkID0gdHJ1ZTtcbiAgICAgICAgbG9jYWxTdG9yYWdlV3JpdGVUZXN0cy53cml0YWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlV3JpdGVUZXN0cy53cml0YWJsZTtcbn07XG4vKipcbiAqIEV4dHJhY3RzIHBhcmFtZXRlcnMgZW5jb2RlZCBpbiB0aGUgVVJMIGJvdGggaW4gdGhlIHF1ZXJ5IGFuZCBmcmFnbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUGFyYW1ldGVyc0Zyb21VUkwoaHJlZikge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoaHJlZik7XG4gICAgaWYgKHVybC5oYXNoICYmIHVybC5oYXNoWzBdID09PSAnIycpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2hTZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHVybC5oYXNoLnN1YnN0cmluZygxKSk7XG4gICAgICAgICAgICBoYXNoU2VhcmNoUGFyYW1zLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIGhhc2ggaXMgbm90IGEgcXVlcnkgc3RyaW5nXG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gc2VhcmNoIHBhcmFtZXRlcnMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgaGFzaCBwYXJhbWV0ZXJzXG4gICAgdXJsLnNlYXJjaFBhcmFtcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBjb25zdCByZXNvbHZlRmV0Y2ggPSAoY3VzdG9tRmV0Y2gpID0+IHtcbiAgICBsZXQgX2ZldGNoO1xuICAgIGlmIChjdXN0b21GZXRjaCkge1xuICAgICAgICBfZmV0Y2ggPSBjdXN0b21GZXRjaDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfZmV0Y2ggPSAoLi4uYXJncykgPT4gaW1wb3J0KCdAc3VwYWJhc2Uvbm9kZS1mZXRjaCcpLnRoZW4oKHsgZGVmYXVsdDogZmV0Y2ggfSkgPT4gZmV0Y2goLi4uYXJncykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgX2ZldGNoID0gZmV0Y2g7XG4gICAgfVxuICAgIHJldHVybiAoLi4uYXJncykgPT4gX2ZldGNoKC4uLmFyZ3MpO1xufTtcbmV4cG9ydCBjb25zdCBsb29rc0xpa2VGZXRjaFJlc3BvbnNlID0gKG1heWJlUmVzcG9uc2UpID0+IHtcbiAgICByZXR1cm4gKHR5cGVvZiBtYXliZVJlc3BvbnNlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBtYXliZVJlc3BvbnNlICE9PSBudWxsICYmXG4gICAgICAgICdzdGF0dXMnIGluIG1heWJlUmVzcG9uc2UgJiZcbiAgICAgICAgJ29rJyBpbiBtYXliZVJlc3BvbnNlICYmXG4gICAgICAgICdqc29uJyBpbiBtYXliZVJlc3BvbnNlICYmXG4gICAgICAgIHR5cGVvZiBtYXliZVJlc3BvbnNlLmpzb24gPT09ICdmdW5jdGlvbicpO1xufTtcbi8vIFN0b3JhZ2UgaGVscGVyc1xuZXhwb3J0IGNvbnN0IHNldEl0ZW1Bc3luYyA9IGFzeW5jIChzdG9yYWdlLCBrZXksIGRhdGEpID0+IHtcbiAgICBhd2FpdCBzdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG59O1xuZXhwb3J0IGNvbnN0IGdldEl0ZW1Bc3luYyA9IGFzeW5jIChzdG9yYWdlLCBrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59O1xuZXhwb3J0IGNvbnN0IHJlbW92ZUl0ZW1Bc3luYyA9IGFzeW5jIChzdG9yYWdlLCBrZXkpID0+IHtcbiAgICBhd2FpdCBzdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbn07XG4vKipcbiAqIEEgZGVmZXJyZWQgcmVwcmVzZW50cyBzb21lIGFzeW5jaHJvbm91cyB3b3JrIHRoYXQgaXMgbm90IHlldCBmaW5pc2hlZCwgd2hpY2hcbiAqIG1heSBvciBtYXkgbm90IGN1bG1pbmF0ZSBpbiBhIHZhbHVlLlxuICogVGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL21pa2Utbm9ydGgvdHlwZXMvYmxvYi9tYXN0ZXIvc3JjL2FzeW5jLnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXh0cmEtc2VtaVxuICAgICAgICA7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBEZWZlcnJlZC5wcm9taXNlQ29uc3RydWN0b3IoKHJlcywgcmVqKSA9PiB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhLXNlbWlcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlcztcbiAgICAgICAgICAgIHRoaXMucmVqZWN0ID0gcmVqO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5EZWZlcnJlZC5wcm9taXNlQ29uc3RydWN0b3IgPSBQcm9taXNlO1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUpXVCh0b2tlbikge1xuICAgIGNvbnN0IHBhcnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcbiAgICBpZiAocGFydHMubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgIHRocm93IG5ldyBBdXRoSW52YWxpZEp3dEVycm9yKCdJbnZhbGlkIEpXVCBzdHJ1Y3R1cmUnKTtcbiAgICB9XG4gICAgLy8gUmVnZXggY2hlY2tzIGZvciBiYXNlNjR1cmwgZm9ybWF0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIUJBU0U2NFVSTF9SRUdFWC50ZXN0KHBhcnRzW2ldKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhJbnZhbGlkSnd0RXJyb3IoJ0pXVCBub3QgaW4gYmFzZTY0dXJsIGZvcm1hdCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIC8vIHVzaW5nIGJhc2U2NHVybCBsaWJcbiAgICAgICAgaGVhZGVyOiBKU09OLnBhcnNlKHN0cmluZ0Zyb21CYXNlNjRVUkwocGFydHNbMF0pKSxcbiAgICAgICAgcGF5bG9hZDogSlNPTi5wYXJzZShzdHJpbmdGcm9tQmFzZTY0VVJMKHBhcnRzWzFdKSksXG4gICAgICAgIHNpZ25hdHVyZTogYmFzZTY0VXJsVG9VaW50OEFycmF5KHBhcnRzWzJdKSxcbiAgICAgICAgcmF3OiB7XG4gICAgICAgICAgICBoZWFkZXI6IHBhcnRzWzBdLFxuICAgICAgICAgICAgcGF5bG9hZDogcGFydHNbMV0sXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBudWxsIGFmdGVyIHNvbWUgdGltZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKGFjY2VwdCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGFjY2VwdChudWxsKSwgdGltZSk7XG4gICAgfSk7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBwcm92aWRlZCBhc3luYyBmdW5jdGlvbiBpbnRvIGEgcmV0cnlhYmxlIGZ1bmN0aW9uLiBFYWNoIHJlc3VsdFxuICogb3IgdGhyb3duIGVycm9yIGlzIHNlbnQgdG8gdGhlIGlzUmV0cnlhYmxlIGZ1bmN0aW9uIHdoaWNoIHNob3VsZCByZXR1cm4gdHJ1ZVxuICogaWYgdGhlIGZ1bmN0aW9uIHNob3VsZCBydW4gYWdhaW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXRyeWFibGUoZm4sIGlzUmV0cnlhYmxlKSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChhY2NlcHQsIHJlamVjdCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhLXNlbWlcbiAgICAgICAgO1xuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgYXR0ZW1wdCA9IDA7IGF0dGVtcHQgPCBJbmZpbml0eTsgYXR0ZW1wdCsrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oYXR0ZW1wdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNSZXRyeWFibGUoYXR0ZW1wdCwgbnVsbCwgcmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXB0KHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1JldHJ5YWJsZShhdHRlbXB0LCBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gZGVjMmhleChkZWMpIHtcbiAgICByZXR1cm4gKCcwJyArIGRlYy50b1N0cmluZygxNikpLnN1YnN0cigtMik7XG59XG4vLyBGdW5jdGlvbnMgYmVsb3cgdGFrZW4gZnJvbTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjMzMDk0MDkvY3JlYXRpbmctYS1jb2RlLXZlcmlmaWVyLWFuZC1jaGFsbGVuZ2UtZm9yLXBrY2UtYXV0aC1vbi1zcG90aWZ5LWFwaS1pbi1yZWFjdGpzXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVQS0NFVmVyaWZpZXIoKSB7XG4gICAgY29uc3QgdmVyaWZpZXJMZW5ndGggPSA1NjtcbiAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50MzJBcnJheSh2ZXJpZmllckxlbmd0aCk7XG4gICAgaWYgKHR5cGVvZiBjcnlwdG8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGNoYXJTZXQgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktLl9+JztcbiAgICAgICAgY29uc3QgY2hhclNldExlbiA9IGNoYXJTZXQubGVuZ3RoO1xuICAgICAgICBsZXQgdmVyaWZpZXIgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJpZmllckxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2ZXJpZmllciArPSBjaGFyU2V0LmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyU2V0TGVuKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZlcmlmaWVyO1xuICAgIH1cbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShhcnJheSwgZGVjMmhleCkuam9pbignJyk7XG59XG5hc3luYyBmdW5jdGlvbiBzaGEyNTYocmFuZG9tU3RyaW5nKSB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgIGNvbnN0IGVuY29kZWREYXRhID0gZW5jb2Rlci5lbmNvZGUocmFuZG9tU3RyaW5nKTtcbiAgICBjb25zdCBoYXNoID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBlbmNvZGVkRGF0YSk7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShoYXNoKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShieXRlcylcbiAgICAgICAgLm1hcCgoYykgPT4gU3RyaW5nLmZyb21DaGFyQ29kZShjKSlcbiAgICAgICAgLmpvaW4oJycpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlUEtDRUNoYWxsZW5nZSh2ZXJpZmllcikge1xuICAgIGNvbnN0IGhhc0NyeXB0b1N1cHBvcnQgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2YgY3J5cHRvLnN1YnRsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgdHlwZW9mIFRleHRFbmNvZGVyICE9PSAndW5kZWZpbmVkJztcbiAgICBpZiAoIWhhc0NyeXB0b1N1cHBvcnQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdXZWJDcnlwdG8gQVBJIGlzIG5vdCBzdXBwb3J0ZWQuIENvZGUgY2hhbGxlbmdlIG1ldGhvZCB3aWxsIGRlZmF1bHQgdG8gdXNlIHBsYWluIGluc3RlYWQgb2Ygc2hhMjU2LicpO1xuICAgICAgICByZXR1cm4gdmVyaWZpZXI7XG4gICAgfVxuICAgIGNvbnN0IGhhc2hlZCA9IGF3YWl0IHNoYTI1Nih2ZXJpZmllcik7XG4gICAgcmV0dXJuIGJ0b2EoaGFzaGVkKS5yZXBsYWNlKC9cXCsvZywgJy0nKS5yZXBsYWNlKC9cXC8vZywgJ18nKS5yZXBsYWNlKC89KyQvLCAnJyk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q29kZUNoYWxsZW5nZUFuZE1ldGhvZChzdG9yYWdlLCBzdG9yYWdlS2V5LCBpc1Bhc3N3b3JkUmVjb3ZlcnkgPSBmYWxzZSkge1xuICAgIGNvbnN0IGNvZGVWZXJpZmllciA9IGdlbmVyYXRlUEtDRVZlcmlmaWVyKCk7XG4gICAgbGV0IHN0b3JlZENvZGVWZXJpZmllciA9IGNvZGVWZXJpZmllcjtcbiAgICBpZiAoaXNQYXNzd29yZFJlY292ZXJ5KSB7XG4gICAgICAgIHN0b3JlZENvZGVWZXJpZmllciArPSAnL1BBU1NXT1JEX1JFQ09WRVJZJztcbiAgICB9XG4gICAgYXdhaXQgc2V0SXRlbUFzeW5jKHN0b3JhZ2UsIGAke3N0b3JhZ2VLZXl9LWNvZGUtdmVyaWZpZXJgLCBzdG9yZWRDb2RlVmVyaWZpZXIpO1xuICAgIGNvbnN0IGNvZGVDaGFsbGVuZ2UgPSBhd2FpdCBnZW5lcmF0ZVBLQ0VDaGFsbGVuZ2UoY29kZVZlcmlmaWVyKTtcbiAgICBjb25zdCBjb2RlQ2hhbGxlbmdlTWV0aG9kID0gY29kZVZlcmlmaWVyID09PSBjb2RlQ2hhbGxlbmdlID8gJ3BsYWluJyA6ICdzMjU2JztcbiAgICByZXR1cm4gW2NvZGVDaGFsbGVuZ2UsIGNvZGVDaGFsbGVuZ2VNZXRob2RdO1xufVxuLyoqIFBhcnNlcyB0aGUgQVBJIHZlcnNpb24gd2hpY2ggaXMgMllZWS1NTS1ERC4gKi9cbmNvbnN0IEFQSV9WRVJTSU9OX1JFR0VYID0gL14yWzAtOV17M30tKDBbMS05XXwxWzAtMl0pLSgwWzEtOV18MVswLTldfDJbMC05XXwzWzAtMV0pJC9pO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVzcG9uc2VBUElWZXJzaW9uKHJlc3BvbnNlKSB7XG4gICAgY29uc3QgYXBpVmVyc2lvbiA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KEFQSV9WRVJTSU9OX0hFQURFUl9OQU1FKTtcbiAgICBpZiAoIWFwaVZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICghYXBpVmVyc2lvbi5tYXRjaChBUElfVkVSU0lPTl9SRUdFWCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHthcGlWZXJzaW9ufVQwMDowMDowMC4wWmApO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRXhwKGV4cCkge1xuICAgIGlmICghZXhwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBleHAgY2xhaW0nKTtcbiAgICB9XG4gICAgY29uc3QgdGltZU5vdyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgIGlmIChleHAgPD0gdGltZU5vdykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pXVCBoYXMgZXhwaXJlZCcpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGdvcml0aG0oYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnUlMyNTYnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLFxuICAgICAgICAgICAgICAgIGhhc2g6IHsgbmFtZTogJ1NIQS0yNTYnIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdFUzI1Nic6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdFQ0RTQScsXG4gICAgICAgICAgICAgICAgbmFtZWRDdXJ2ZTogJ1AtMjU2JyxcbiAgICAgICAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhbGcgY2xhaW0nKTtcbiAgICB9XG59XG5jb25zdCBVVUlEX1JFR0VYID0gL15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXsxMn0kLztcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVVVSUQoc3RyKSB7XG4gICAgaWYgKCFVVUlEX1JFR0VYLnRlc3Qoc3RyKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0BzdXBhYmFzZS9hdXRoLWpzOiBFeHBlY3RlZCBwYXJhbWV0ZXIgdG8gYmUgVVVJRCBidXQgaXMgbm90Jyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiLCJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgeyBBUElfVkVSU0lPTlMsIEFQSV9WRVJTSU9OX0hFQURFUl9OQU1FIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZXhwaXJlc0F0LCBsb29rc0xpa2VGZXRjaFJlc3BvbnNlLCBwYXJzZVJlc3BvbnNlQVBJVmVyc2lvbiB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBBdXRoQXBpRXJyb3IsIEF1dGhSZXRyeWFibGVGZXRjaEVycm9yLCBBdXRoV2Vha1Bhc3N3b3JkRXJyb3IsIEF1dGhVbmtub3duRXJyb3IsIEF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yLCB9IGZyb20gJy4vZXJyb3JzJztcbmNvbnN0IF9nZXRFcnJvck1lc3NhZ2UgPSAoZXJyKSA9PiBlcnIubXNnIHx8IGVyci5tZXNzYWdlIHx8IGVyci5lcnJvcl9kZXNjcmlwdGlvbiB8fCBlcnIuZXJyb3IgfHwgSlNPTi5zdHJpbmdpZnkoZXJyKTtcbmNvbnN0IE5FVFdPUktfRVJST1JfQ09ERVMgPSBbNTAyLCA1MDMsIDUwNF07XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCFsb29rc0xpa2VGZXRjaFJlc3BvbnNlKGVycm9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IoX2dldEVycm9yTWVzc2FnZShlcnJvciksIDApO1xuICAgIH1cbiAgICBpZiAoTkVUV09SS19FUlJPUl9DT0RFUy5pbmNsdWRlcyhlcnJvci5zdGF0dXMpKSB7XG4gICAgICAgIC8vIHN0YXR1cyBpbiA1MDAuLi41OTkgcmFuZ2UgLSBzZXJ2ZXIgaGFkIGFuIGVycm9yLCByZXF1ZXN0IG1pZ2h0IGJlIHJldHJ5ZWQuXG4gICAgICAgIHRocm93IG5ldyBBdXRoUmV0cnlhYmxlRmV0Y2hFcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGVycm9yKSwgZXJyb3Iuc3RhdHVzKTtcbiAgICB9XG4gICAgbGV0IGRhdGE7XG4gICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IGF3YWl0IGVycm9yLmpzb24oKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF1dGhVbmtub3duRXJyb3IoX2dldEVycm9yTWVzc2FnZShlKSwgZSk7XG4gICAgfVxuICAgIGxldCBlcnJvckNvZGUgPSB1bmRlZmluZWQ7XG4gICAgY29uc3QgcmVzcG9uc2VBUElWZXJzaW9uID0gcGFyc2VSZXNwb25zZUFQSVZlcnNpb24oZXJyb3IpO1xuICAgIGlmIChyZXNwb25zZUFQSVZlcnNpb24gJiZcbiAgICAgICAgcmVzcG9uc2VBUElWZXJzaW9uLmdldFRpbWUoKSA+PSBBUElfVkVSU0lPTlNbJzIwMjQtMDEtMDEnXS50aW1lc3RhbXAgJiZcbiAgICAgICAgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGRhdGEgJiZcbiAgICAgICAgdHlwZW9mIGRhdGEuY29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZXJyb3JDb2RlID0gZGF0YS5jb2RlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YSAmJiB0eXBlb2YgZGF0YS5lcnJvcl9jb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICBlcnJvckNvZGUgPSBkYXRhLmVycm9yX2NvZGU7XG4gICAgfVxuICAgIGlmICghZXJyb3JDb2RlKSB7XG4gICAgICAgIC8vIExlZ2FjeSBzdXBwb3J0IGZvciB3ZWFrIHBhc3N3b3JkIGVycm9ycywgd2hlbiB0aGVyZSB3ZXJlIG5vIGVycm9yIGNvZGVzXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIGRhdGEgJiZcbiAgICAgICAgICAgIHR5cGVvZiBkYXRhLndlYWtfcGFzc3dvcmQgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBkYXRhLndlYWtfcGFzc3dvcmQgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZGF0YS53ZWFrX3Bhc3N3b3JkLnJlYXNvbnMpICYmXG4gICAgICAgICAgICBkYXRhLndlYWtfcGFzc3dvcmQucmVhc29ucy5sZW5ndGggJiZcbiAgICAgICAgICAgIGRhdGEud2Vha19wYXNzd29yZC5yZWFzb25zLnJlZHVjZSgoYSwgaSkgPT4gYSAmJiB0eXBlb2YgaSA9PT0gJ3N0cmluZycsIHRydWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXV0aFdlYWtQYXNzd29yZEVycm9yKF9nZXRFcnJvck1lc3NhZ2UoZGF0YSksIGVycm9yLnN0YXR1cywgZGF0YS53ZWFrX3Bhc3N3b3JkLnJlYXNvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGVycm9yQ29kZSA9PT0gJ3dlYWtfcGFzc3dvcmQnKSB7XG4gICAgICAgIHRocm93IG5ldyBBdXRoV2Vha1Bhc3N3b3JkRXJyb3IoX2dldEVycm9yTWVzc2FnZShkYXRhKSwgZXJyb3Iuc3RhdHVzLCAoKF9hID0gZGF0YS53ZWFrX3Bhc3N3b3JkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVhc29ucykgfHwgW10pO1xuICAgIH1cbiAgICBlbHNlIGlmIChlcnJvckNvZGUgPT09ICdzZXNzaW9uX25vdF9mb3VuZCcpIHtcbiAgICAgICAgLy8gVGhlIGBzZXNzaW9uX2lkYCBpbnNpZGUgdGhlIEpXVCBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGEgcm93IGluIHRoZVxuICAgICAgICAvLyBgc2Vzc2lvbnNgIHRhYmxlLiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHVzZXIgaGFzIHNpZ25lZCBvdXQsIGhhcyBiZWVuXG4gICAgICAgIC8vIGRlbGV0ZWQsIG9yIHRoZWlyIHNlc3Npb24gaGFzIHNvbWVob3cgYmVlbiB0ZXJtaW5hdGVkLlxuICAgICAgICB0aHJvdyBuZXcgQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IoKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEF1dGhBcGlFcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGRhdGEpLCBlcnJvci5zdGF0dXMgfHwgNTAwLCBlcnJvckNvZGUpO1xufVxuY29uc3QgX2dldFJlcXVlc3RQYXJhbXMgPSAobWV0aG9kLCBvcHRpb25zLCBwYXJhbWV0ZXJzLCBib2R5KSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0geyBtZXRob2QsIGhlYWRlcnM6IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycykgfHwge30gfTtcbiAgICBpZiAobWV0aG9kID09PSAnR0VUJykge1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cbiAgICBwYXJhbXMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCcgfSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMpO1xuICAgIHBhcmFtcy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zKSwgcGFyYW1ldGVycyk7XG59O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9yZXF1ZXN0KGZldGNoZXIsIG1ldGhvZCwgdXJsLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycyk7XG4gICAgaWYgKCFoZWFkZXJzW0FQSV9WRVJTSU9OX0hFQURFUl9OQU1FXSkge1xuICAgICAgICBoZWFkZXJzW0FQSV9WRVJTSU9OX0hFQURFUl9OQU1FXSA9IEFQSV9WRVJTSU9OU1snMjAyNC0wMS0wMSddLm5hbWU7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuand0KSB7XG4gICAgICAgIGhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9IGBCZWFyZXIgJHtvcHRpb25zLmp3dH1gO1xuICAgIH1cbiAgICBjb25zdCBxcyA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5xdWVyeSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XG4gICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZWRpcmVjdFRvKSB7XG4gICAgICAgIHFzWydyZWRpcmVjdF90byddID0gb3B0aW9ucy5yZWRpcmVjdFRvO1xuICAgIH1cbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IE9iamVjdC5rZXlzKHFzKS5sZW5ndGggPyAnPycgKyBuZXcgVVJMU2VhcmNoUGFyYW1zKHFzKS50b1N0cmluZygpIDogJyc7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IF9oYW5kbGVSZXF1ZXN0KGZldGNoZXIsIG1ldGhvZCwgdXJsICsgcXVlcnlTdHJpbmcsIHtcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgbm9SZXNvbHZlSnNvbjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm5vUmVzb2x2ZUpzb24sXG4gICAgfSwge30sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ib2R5KTtcbiAgICByZXR1cm4gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy54Zm9ybSkgPyBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMueGZvcm0oZGF0YSkgOiB7IGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGRhdGEpLCBlcnJvcjogbnVsbCB9O1xufVxuYXN5bmMgZnVuY3Rpb24gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgbWV0aG9kLCB1cmwsIG9wdGlvbnMsIHBhcmFtZXRlcnMsIGJvZHkpIHtcbiAgICBjb25zdCByZXF1ZXN0UGFyYW1zID0gX2dldFJlcXVlc3RQYXJhbXMobWV0aG9kLCBvcHRpb25zLCBwYXJhbWV0ZXJzLCBib2R5KTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IGZldGNoZXIodXJsLCBPYmplY3QuYXNzaWduKHt9LCByZXF1ZXN0UGFyYW1zKSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIC8vIGZldGNoIGZhaWxlZCwgbGlrZWx5IGR1ZSB0byBhIG5ldHdvcmsgb3IgQ09SUyBlcnJvclxuICAgICAgICB0aHJvdyBuZXcgQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IoX2dldEVycm9yTWVzc2FnZShlKSwgMCk7XG4gICAgfVxuICAgIGlmICghcmVzdWx0Lm9rKSB7XG4gICAgICAgIGF3YWl0IGhhbmRsZUVycm9yKHJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubm9SZXNvbHZlSnNvbikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgYXdhaXQgaGFuZGxlRXJyb3IoZSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIF9zZXNzaW9uUmVzcG9uc2UoZGF0YSkge1xuICAgIHZhciBfYTtcbiAgICBsZXQgc2Vzc2lvbiA9IG51bGw7XG4gICAgaWYgKGhhc1Nlc3Npb24oZGF0YSkpIHtcbiAgICAgICAgc2Vzc2lvbiA9IE9iamVjdC5hc3NpZ24oe30sIGRhdGEpO1xuICAgICAgICBpZiAoIWRhdGEuZXhwaXJlc19hdCkge1xuICAgICAgICAgICAgc2Vzc2lvbi5leHBpcmVzX2F0ID0gZXhwaXJlc0F0KGRhdGEuZXhwaXJlc19pbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdXNlciA9IChfYSA9IGRhdGEudXNlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YTtcbiAgICByZXR1cm4geyBkYXRhOiB7IHNlc3Npb24sIHVzZXIgfSwgZXJyb3I6IG51bGwgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBfc2Vzc2lvblJlc3BvbnNlUGFzc3dvcmQoZGF0YSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gX3Nlc3Npb25SZXNwb25zZShkYXRhKTtcbiAgICBpZiAoIXJlc3BvbnNlLmVycm9yICYmXG4gICAgICAgIGRhdGEud2Vha19wYXNzd29yZCAmJlxuICAgICAgICB0eXBlb2YgZGF0YS53ZWFrX3Bhc3N3b3JkID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBBcnJheS5pc0FycmF5KGRhdGEud2Vha19wYXNzd29yZC5yZWFzb25zKSAmJlxuICAgICAgICBkYXRhLndlYWtfcGFzc3dvcmQucmVhc29ucy5sZW5ndGggJiZcbiAgICAgICAgZGF0YS53ZWFrX3Bhc3N3b3JkLm1lc3NhZ2UgJiZcbiAgICAgICAgdHlwZW9mIGRhdGEud2Vha19wYXNzd29yZC5tZXNzYWdlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICBkYXRhLndlYWtfcGFzc3dvcmQucmVhc29ucy5yZWR1Y2UoKGEsIGkpID0+IGEgJiYgdHlwZW9mIGkgPT09ICdzdHJpbmcnLCB0cnVlKSkge1xuICAgICAgICByZXNwb25zZS5kYXRhLndlYWtfcGFzc3dvcmQgPSBkYXRhLndlYWtfcGFzc3dvcmQ7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBfdXNlclJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgdXNlciA9IChfYSA9IGRhdGEudXNlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZGF0YTtcbiAgICByZXR1cm4geyBkYXRhOiB7IHVzZXIgfSwgZXJyb3I6IG51bGwgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBfc3NvUmVzcG9uc2UoZGF0YSkge1xuICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG59XG5leHBvcnQgZnVuY3Rpb24gX2dlbmVyYXRlTGlua1Jlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB7IGFjdGlvbl9saW5rLCBlbWFpbF9vdHAsIGhhc2hlZF90b2tlbiwgcmVkaXJlY3RfdG8sIHZlcmlmaWNhdGlvbl90eXBlIH0gPSBkYXRhLCByZXN0ID0gX19yZXN0KGRhdGEsIFtcImFjdGlvbl9saW5rXCIsIFwiZW1haWxfb3RwXCIsIFwiaGFzaGVkX3Rva2VuXCIsIFwicmVkaXJlY3RfdG9cIiwgXCJ2ZXJpZmljYXRpb25fdHlwZVwiXSk7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgYWN0aW9uX2xpbmssXG4gICAgICAgIGVtYWlsX290cCxcbiAgICAgICAgaGFzaGVkX3Rva2VuLFxuICAgICAgICByZWRpcmVjdF90byxcbiAgICAgICAgdmVyaWZpY2F0aW9uX3R5cGUsXG4gICAgfTtcbiAgICBjb25zdCB1c2VyID0gT2JqZWN0LmFzc2lnbih7fSwgcmVzdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcHJvcGVydGllcyxcbiAgICAgICAgICAgIHVzZXIsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gX25vUmVzb2x2ZUpzb25SZXNwb25zZShkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGE7XG59XG4vKipcbiAqIGhhc1Nlc3Npb24gY2hlY2tzIGlmIHRoZSByZXNwb25zZSBvYmplY3QgY29udGFpbnMgYSB2YWxpZCBzZXNzaW9uXG4gKiBAcGFyYW0gZGF0YSBBIHJlc3BvbnNlIG9iamVjdFxuICogQHJldHVybnMgdHJ1ZSBpZiBhIHNlc3Npb24gaXMgaW4gdGhlIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGhhc1Nlc3Npb24oZGF0YSkge1xuICAgIHJldHVybiBkYXRhLmFjY2Vzc190b2tlbiAmJiBkYXRhLnJlZnJlc2hfdG9rZW4gJiYgZGF0YS5leHBpcmVzX2luO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2guanMubWFwIiwiZXhwb3J0IGNvbnN0IFNJR05fT1VUX1NDT1BFUyA9IFsnZ2xvYmFsJywgJ2xvY2FsJywgJ290aGVycyddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IHsgX2dlbmVyYXRlTGlua1Jlc3BvbnNlLCBfbm9SZXNvbHZlSnNvblJlc3BvbnNlLCBfcmVxdWVzdCwgX3VzZXJSZXNwb25zZSwgfSBmcm9tICcuL2xpYi9mZXRjaCc7XG5pbXBvcnQgeyByZXNvbHZlRmV0Y2gsIHZhbGlkYXRlVVVJRCB9IGZyb20gJy4vbGliL2hlbHBlcnMnO1xuaW1wb3J0IHsgU0lHTl9PVVRfU0NPUEVTLCB9IGZyb20gJy4vbGliL3R5cGVzJztcbmltcG9ydCB7IGlzQXV0aEVycm9yIH0gZnJvbSAnLi9saWIvZXJyb3JzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdvVHJ1ZUFkbWluQXBpIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHVybCA9ICcnLCBoZWFkZXJzID0ge30sIGZldGNoLCB9KSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLmZldGNoID0gcmVzb2x2ZUZldGNoKGZldGNoKTtcbiAgICAgICAgdGhpcy5tZmEgPSB7XG4gICAgICAgICAgICBsaXN0RmFjdG9yczogdGhpcy5fbGlzdEZhY3RvcnMuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGRlbGV0ZUZhY3RvcjogdGhpcy5fZGVsZXRlRmFjdG9yLmJpbmQodGhpcyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBsb2dnZWQtaW4gc2Vzc2lvbi5cbiAgICAgKiBAcGFyYW0gand0IEEgdmFsaWQsIGxvZ2dlZC1pbiBKV1QuXG4gICAgICogQHBhcmFtIHNjb3BlIFRoZSBsb2dvdXQgc29wZS5cbiAgICAgKi9cbiAgICBhc3luYyBzaWduT3V0KGp3dCwgc2NvcGUgPSBTSUdOX09VVF9TQ09QRVNbMF0pIHtcbiAgICAgICAgaWYgKFNJR05fT1VUX1NDT1BFUy5pbmRleE9mKHNjb3BlKSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHN1cGFiYXNlL2F1dGgtanM6IFBhcmFtZXRlciBzY29wZSBtdXN0IGJlIG9uZSBvZiAke1NJR05fT1VUX1NDT1BFUy5qb2luKCcsICcpfWApO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9sb2dvdXQ/c2NvcGU9JHtzY29wZX1gLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIGp3dCxcbiAgICAgICAgICAgICAgICBub1Jlc29sdmVKc29uOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhbiBpbnZpdGUgbGluayB0byBhbiBlbWFpbCBhZGRyZXNzLlxuICAgICAqIEBwYXJhbSBlbWFpbCBUaGUgZW1haWwgYWRkcmVzcyBvZiB0aGUgdXNlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnMgdG8gYmUgaW5jbHVkZWQgd2hlbiBpbnZpdGluZy5cbiAgICAgKi9cbiAgICBhc3luYyBpbnZpdGVVc2VyQnlFbWFpbChlbWFpbCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vaW52aXRlYCwge1xuICAgICAgICAgICAgICAgIGJvZHk6IHsgZW1haWwsIGRhdGE6IG9wdGlvbnMuZGF0YSB9LFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiBvcHRpb25zLnJlZGlyZWN0VG8sXG4gICAgICAgICAgICAgICAgeGZvcm06IF91c2VyUmVzcG9uc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBlbWFpbCBsaW5rcyBhbmQgT1RQcyB0byBiZSBzZW50IHZpYSBhIGN1c3RvbSBlbWFpbCBwcm92aWRlci5cbiAgICAgKiBAcGFyYW0gZW1haWwgVGhlIHVzZXIncyBlbWFpbC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5wYXNzd29yZCBVc2VyIHBhc3N3b3JkLiBGb3Igc2lnbnVwIG9ubHkuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZGF0YSBPcHRpb25hbCB1c2VyIG1ldGFkYXRhLiBGb3Igc2lnbnVwIG9ubHkuXG4gICAgICogQHBhcmFtIG9wdGlvbnMucmVkaXJlY3RUbyBUaGUgcmVkaXJlY3QgdXJsIHdoaWNoIHNob3VsZCBiZSBhcHBlbmRlZCB0byB0aGUgZ2VuZXJhdGVkIGxpbmtcbiAgICAgKi9cbiAgICBhc3luYyBnZW5lcmF0ZUxpbmsocGFyYW1zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHBhcmFtcywgcmVzdCA9IF9fcmVzdChwYXJhbXMsIFtcIm9wdGlvbnNcIl0pO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzdCksIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKCduZXdFbWFpbCcgaW4gcmVzdCkge1xuICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgbmV3RW1haWwgd2l0aCBuZXdfZW1haWwgaW4gcmVxdWVzdCBib2R5XG4gICAgICAgICAgICAgICAgYm9keS5uZXdfZW1haWwgPSByZXN0ID09PSBudWxsIHx8IHJlc3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3QubmV3RW1haWw7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGJvZHlbJ25ld0VtYWlsJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vYWRtaW4vZ2VuZXJhdGVfbGlua2AsIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX2dlbmVyYXRlTGlua1Jlc3BvbnNlLFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZWRpcmVjdFRvLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBVc2VyIEFkbWluIEFQSVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdXNlci5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBhIHNlcnZlci4gTmV2ZXIgZXhwb3NlIHlvdXIgYHNlcnZpY2Vfcm9sZWAga2V5IGluIHRoZSBicm93c2VyLlxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZVVzZXIoYXR0cmlidXRlcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L2FkbWluL3VzZXJzYCwge1xuICAgICAgICAgICAgICAgIGJvZHk6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHhmb3JtOiBfdXNlclJlc3BvbnNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBsaXN0IG9mIHVzZXJzLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gYSBzZXJ2ZXIuIE5ldmVyIGV4cG9zZSB5b3VyIGBzZXJ2aWNlX3JvbGVgIGtleSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgKiBAcGFyYW0gcGFyYW1zIEFuIG9iamVjdCB3aGljaCBzdXBwb3J0cyBgcGFnZWAgYW5kIGBwZXJQYWdlYCBhcyBudW1iZXJzLCB0byBhbHRlciB0aGUgcGFnaW5hdGVkIHJlc3VsdHMuXG4gICAgICovXG4gICAgYXN5bmMgbGlzdFVzZXJzKHBhcmFtcykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2c7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYWdpbmF0aW9uID0geyBuZXh0UGFnZTogbnVsbCwgbGFzdFBhZ2U6IDAsIHRvdGFsOiAwIH07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdHRVQnLCBgJHt0aGlzLnVybH0vYWRtaW4vdXNlcnNgLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIG5vUmVzb2x2ZUpzb246IHRydWUsXG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZTogKF9iID0gKF9hID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLnBhZ2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b1N0cmluZygpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcGVyX3BhZ2U6IChfZCA9IChfYyA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5wZXJQYWdlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudG9TdHJpbmcoKSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX25vUmVzb2x2ZUpzb25SZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKVxuICAgICAgICAgICAgICAgIHRocm93IHJlc3BvbnNlLmVycm9yO1xuICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICBjb25zdCB0b3RhbCA9IChfZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXRvdGFsLWNvdW50JykpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IDA7XG4gICAgICAgICAgICBjb25zdCBsaW5rcyA9IChfZyA9IChfZiA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdsaW5rJykpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5zcGxpdCgnLCcpKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiBbXTtcbiAgICAgICAgICAgIGlmIChsaW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlID0gcGFyc2VJbnQobGluay5zcGxpdCgnOycpWzBdLnNwbGl0KCc9JylbMV0uc3Vic3RyaW5nKDAsIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVsID0gSlNPTi5wYXJzZShsaW5rLnNwbGl0KCc7JylbMV0uc3BsaXQoJz0nKVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25bYCR7cmVsfVBhZ2VgXSA9IHBhZ2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbi50b3RhbCA9IHBhcnNlSW50KHRvdGFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdXNlcnMpLCBwYWdpbmF0aW9uKSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXJzOiBbXSB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHVzZXIgYnkgaWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdWlkIFRoZSB1c2VyJ3MgdW5pcXVlIGlkZW50aWZpZXJcbiAgICAgKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uIGEgc2VydmVyLiBOZXZlciBleHBvc2UgeW91ciBgc2VydmljZV9yb2xlYCBrZXkgaW4gdGhlIGJyb3dzZXIuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VXNlckJ5SWQodWlkKSB7XG4gICAgICAgIHZhbGlkYXRlVVVJRCh1aWQpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdHRVQnLCBgJHt0aGlzLnVybH0vYWRtaW4vdXNlcnMvJHt1aWR9YCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX3VzZXJSZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgdXNlciBkYXRhLlxuICAgICAqXG4gICAgICogQHBhcmFtIGF0dHJpYnV0ZXMgVGhlIGRhdGEgeW91IHdhbnQgdG8gdXBkYXRlLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gYSBzZXJ2ZXIuIE5ldmVyIGV4cG9zZSB5b3VyIGBzZXJ2aWNlX3JvbGVgIGtleSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgKi9cbiAgICBhc3luYyB1cGRhdGVVc2VyQnlJZCh1aWQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdmFsaWRhdGVVVUlEKHVpZCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BVVCcsIGAke3RoaXMudXJsfS9hZG1pbi91c2Vycy8ke3VpZH1gLCB7XG4gICAgICAgICAgICAgICAgYm9keTogYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgeGZvcm06IF91c2VyUmVzcG9uc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIHVzZXIuIFJlcXVpcmVzIGEgYHNlcnZpY2Vfcm9sZWAga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIFRoZSB1c2VyIGlkIHlvdSB3YW50IHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0gc2hvdWxkU29mdERlbGV0ZSBJZiB0cnVlLCB0aGVuIHRoZSB1c2VyIHdpbGwgYmUgc29mdC1kZWxldGVkIGZyb20gdGhlIGF1dGggc2NoZW1hLiBTb2Z0IGRlbGV0aW9uIGFsbG93cyB1c2VyIGlkZW50aWZpY2F0aW9uIGZyb20gdGhlIGhhc2hlZCB1c2VyIElEIGJ1dCBpcyBub3QgcmV2ZXJzaWJsZS5cbiAgICAgKiBEZWZhdWx0cyB0byBmYWxzZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICAgKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uIGEgc2VydmVyLiBOZXZlciBleHBvc2UgeW91ciBgc2VydmljZV9yb2xlYCBrZXkgaW4gdGhlIGJyb3dzZXIuXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlVXNlcihpZCwgc2hvdWxkU29mdERlbGV0ZSA9IGZhbHNlKSB7XG4gICAgICAgIHZhbGlkYXRlVVVJRChpZCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0RFTEVURScsIGAke3RoaXMudXJsfS9hZG1pbi91c2Vycy8ke2lkfWAsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICBzaG91bGRfc29mdF9kZWxldGU6IHNob3VsZFNvZnREZWxldGUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX3VzZXJSZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgX2xpc3RGYWN0b3JzKHBhcmFtcykge1xuICAgICAgICB2YWxpZGF0ZVVVSUQocGFyYW1zLnVzZXJJZCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnR0VUJywgYCR7dGhpcy51cmx9L2FkbWluL3VzZXJzLyR7cGFyYW1zLnVzZXJJZH0vZmFjdG9yc2AsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgeGZvcm06IChmYWN0b3JzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgZmFjdG9ycyB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9kZWxldGVGYWN0b3IocGFyYW1zKSB7XG4gICAgICAgIHZhbGlkYXRlVVVJRChwYXJhbXMudXNlcklkKTtcbiAgICAgICAgdmFsaWRhdGVVVUlEKHBhcmFtcy5pZCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0RFTEVURScsIGAke3RoaXMudXJsfS9hZG1pbi91c2Vycy8ke3BhcmFtcy51c2VySWR9L2ZhY3RvcnMvJHtwYXJhbXMuaWR9YCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Hb1RydWVBZG1pbkFwaS5qcy5tYXAiLCJpbXBvcnQgeyBzdXBwb3J0c0xvY2FsU3RvcmFnZSB9IGZyb20gJy4vaGVscGVycyc7XG4vKipcbiAqIFByb3ZpZGVzIHNhZmUgYWNjZXNzIHRvIHRoZSBnbG9iYWxUaGlzLmxvY2FsU3RvcmFnZSBwcm9wZXJ0eS5cbiAqL1xuZXhwb3J0IGNvbnN0IGxvY2FsU3RvcmFnZUFkYXB0ZXIgPSB7XG4gICAgZ2V0SXRlbTogKGtleSkgPT4ge1xuICAgICAgICBpZiAoIXN1cHBvcnRzTG9jYWxTdG9yYWdlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgfSxcbiAgICBzZXRJdGVtOiAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAoIXN1cHBvcnRzTG9jYWxTdG9yYWdlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBnbG9iYWxUaGlzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgIH0sXG4gICAgcmVtb3ZlSXRlbTogKGtleSkgPT4ge1xuICAgICAgICBpZiAoIXN1cHBvcnRzTG9jYWxTdG9yYWdlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBnbG9iYWxUaGlzLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgfSxcbn07XG4vKipcbiAqIFJldHVybnMgYSBsb2NhbFN0b3JhZ2UtbGlrZSBvYmplY3QgdGhhdCBzdG9yZXMgdGhlIGtleS12YWx1ZSBwYWlycyBpblxuICogbWVtb3J5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVtb3J5TG9jYWxTdG9yYWdlQWRhcHRlcihzdG9yZSA9IHt9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0SXRlbTogKGtleSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHN0b3JlW2tleV0gfHwgbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SXRlbTogKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIHN0b3JlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlSXRlbTogKGtleSkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIHN0b3JlW2tleV07XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsLXN0b3JhZ2UuanMubWFwIiwiaW1wb3J0IHsgc3VwcG9ydHNMb2NhbFN0b3JhZ2UgfSBmcm9tICcuL2hlbHBlcnMnO1xuLyoqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmV4cG9ydCBjb25zdCBpbnRlcm5hbHMgPSB7XG4gICAgLyoqXG4gICAgICogQGV4cGVyaW1lbnRhbFxuICAgICAqL1xuICAgIGRlYnVnOiAhIShnbG9iYWxUaGlzICYmXG4gICAgICAgIHN1cHBvcnRzTG9jYWxTdG9yYWdlKCkgJiZcbiAgICAgICAgZ2xvYmFsVGhpcy5sb2NhbFN0b3JhZ2UgJiZcbiAgICAgICAgZ2xvYmFsVGhpcy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc3VwYWJhc2UuZ290cnVlLWpzLmxvY2tzLmRlYnVnJykgPT09ICd0cnVlJyksXG59O1xuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gd2hlbiBhIGxvY2sgY2Fubm90IGJlIGFjcXVpcmVkIGFmdGVyIHNvbWUgYW1vdW50IG9mIHRpbWUuXG4gKlxuICogVXNlIHRoZSB7QGxpbmsgI2lzQWNxdWlyZVRpbWVvdXR9IHByb3BlcnR5IGluc3RlYWQgb2YgY2hlY2tpbmcgd2l0aCBgaW5zdGFuY2VvZmAuXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2NrQWNxdWlyZVRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmlzQWNxdWlyZVRpbWVvdXQgPSB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOYXZpZ2F0b3JMb2NrQWNxdWlyZVRpbWVvdXRFcnJvciBleHRlbmRzIExvY2tBY3F1aXJlVGltZW91dEVycm9yIHtcbn1cbmV4cG9ydCBjbGFzcyBQcm9jZXNzTG9ja0FjcXVpcmVUaW1lb3V0RXJyb3IgZXh0ZW5kcyBMb2NrQWNxdWlyZVRpbWVvdXRFcnJvciB7XG59XG4vKipcbiAqIEltcGxlbWVudHMgYSBnbG9iYWwgZXhjbHVzaXZlIGxvY2sgdXNpbmcgdGhlIE5hdmlnYXRvciBMb2NrTWFuYWdlciBBUEkuIEl0XG4gKiBpcyBhdmFpbGFibGUgb24gYWxsIGJyb3dzZXJzIHJlbGVhc2VkIGFmdGVyIDIwMjItMDMtMTUgd2l0aCBTYWZhcmkgYmVpbmcgdGhlXG4gKiBsYXN0IG9uZSB0byByZWxlYXNlIHN1cHBvcnQuIElmIHRoZSBBUEkgaXMgbm90IGF2YWlsYWJsZSwgdGhpcyBmdW5jdGlvbiB3aWxsXG4gKiB0aHJvdy4gTWFrZSBzdXJlIHlvdSBjaGVjayBhdmFpbGFibGlsaXR5IGJlZm9yZSBjb25maWd1cmluZyB7QGxpbmtcbiAqIEdvVHJ1ZUNsaWVudH0uXG4gKlxuICogWW91IGNhbiB0dXJuIG9uIGRlYnVnZ2luZyBieSBzZXR0aW5nIHRoZSBgc3VwYWJhc2UuZ290cnVlLWpzLmxvY2tzLmRlYnVnYFxuICogbG9jYWwgc3RvcmFnZSBpdGVtIHRvIGB0cnVlYC5cbiAqXG4gKiBJbnRlcm5hbHM6XG4gKlxuICogU2luY2UgdGhlIExvY2tNYW5hZ2VyIEFQSSBkb2VzIG5vdCBwcmVzZXJ2ZSBzdGFjayB0cmFjZXMgZm9yIHRoZSBhc3luY1xuICogZnVuY3Rpb24gcGFzc2VkIGluIHRoZSBgcmVxdWVzdGAgbWV0aG9kLCBhIHRyaWNrIGlzIHVzZWQgd2hlcmUgYWNxdWlyaW5nIHRoZVxuICogbG9jayByZWxlYXNlcyBhIHByZXZpb3VzbHkgc3RhcnRlZCBwcm9taXNlIHRvIHJ1biB0aGUgb3BlcmF0aW9uIGluIHRoZSBgZm5gXG4gKiBmdW5jdGlvbi4gVGhlIGxvY2sgd2FpdHMgZm9yIHRoYXQgcHJvbWlzZSB0byBmaW5pc2ggKHdpdGggb3Igd2l0aG91dCBlcnJvciksXG4gKiB3aGlsZSB0aGUgZnVuY3Rpb24gd2lsbCBmaW5hbGx5IHdhaXQgZm9yIHRoZSByZXN1bHQgYW55d2F5LlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGxvY2sgdG8gYmUgYWNxdWlyZWQuXG4gKiBAcGFyYW0gYWNxdWlyZVRpbWVvdXQgSWYgbmVnYXRpdmUsIG5vIHRpbWVvdXQuIElmIDAgYW4gZXJyb3IgaXMgdGhyb3duIGlmXG4gKiAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxvY2sgY2FuJ3QgYmUgYWNxdWlyZWQgd2l0aG91dCB3YWl0aW5nLiBJZiBwb3NpdGl2ZSwgdGhlIGxvY2sgYWNxdWlyZVxuICogICAgICAgICAgICAgICAgICAgICAgIHdpbGwgdGltZSBvdXQgYWZ0ZXIgc28gbWFueSBtaWxsaXNlY29uZHMuIEFuIGVycm9yIGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgYSB0aW1lb3V0IGlmIGl0IGhhcyBgaXNBY3F1aXJlVGltZW91dGAgc2V0IHRvIHRydWUuXG4gKiBAcGFyYW0gZm4gVGhlIG9wZXJhdGlvbiB0byBydW4gb25jZSB0aGUgbG9jayBpcyBhY3F1aXJlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRvckxvY2sobmFtZSwgYWNxdWlyZVRpbWVvdXQsIGZuKSB7XG4gICAgaWYgKGludGVybmFscy5kZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZygnQHN1cGFiYXNlL2dvdHJ1ZS1qczogbmF2aWdhdG9yTG9jazogYWNxdWlyZSBsb2NrJywgbmFtZSwgYWNxdWlyZVRpbWVvdXQpO1xuICAgIH1cbiAgICBjb25zdCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgZ2xvYmFsVGhpcy5BYm9ydENvbnRyb2xsZXIoKTtcbiAgICBpZiAoYWNxdWlyZVRpbWVvdXQgPiAwKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICBpZiAoaW50ZXJuYWxzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0BzdXBhYmFzZS9nb3RydWUtanM6IG5hdmlnYXRvckxvY2sgYWNxdWlyZSB0aW1lZCBvdXQnLCBuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgYWNxdWlyZVRpbWVvdXQpO1xuICAgIH1cbiAgICAvLyBNRE4gYXJ0aWNsZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0xvY2tNYW5hZ2VyL3JlcXVlc3RcbiAgICAvLyBXcmFwcGluZyBuYXZpZ2F0b3IubG9ja3MucmVxdWVzdCgpIHdpdGggYSBwbGFpbiBQcm9taXNlIGlzIGRvbmUgYXMgc29tZVxuICAgIC8vIGxpYnJhcmllcyBsaWtlIHpvbmUuanMgcGF0Y2ggdGhlIFByb21pc2Ugb2JqZWN0IHRvIHRyYWNrIHRoZSBleGVjdXRpb25cbiAgICAvLyBjb250ZXh0LiBIb3dldmVyLCBpdCBhcHBlYXJzIHRoYXQgbW9zdCBicm93c2VycyB1c2UgYW4gaW50ZXJuYWwgcHJvbWlzZVxuICAgIC8vIGltcGxlbWVudGF0aW9uIHdoZW4gdXNpbmcgdGhlIG5hdmlnYXRvci5sb2Nrcy5yZXF1ZXN0KCkgQVBJIGNhdXNpbmcgdGhlbVxuICAgIC8vIHRvIGxvc2UgY29udGV4dCBhbmQgZW1pdCBjb25mdXNpbmcgbG9nIG1lc3NhZ2VzIG9yIGJyZWFrIGNlcnRhaW4gZmVhdHVyZXMuXG4gICAgLy8gVGhpcyB3cmFwcGluZyBpcyBiZWxpZXZlZCB0byBoZWxwIHpvbmUuanMgdHJhY2sgdGhlIGV4ZWN1dGlvbiBjb250ZXh0XG4gICAgLy8gYmV0dGVyLlxuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGdsb2JhbFRoaXMubmF2aWdhdG9yLmxvY2tzLnJlcXVlc3QobmFtZSwgYWNxdWlyZVRpbWVvdXQgPT09IDBcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBtb2RlOiAnZXhjbHVzaXZlJyxcbiAgICAgICAgICAgIGlmQXZhaWxhYmxlOiB0cnVlLFxuICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgbW9kZTogJ2V4Y2x1c2l2ZScsXG4gICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gICAgICAgIH0sIGFzeW5jIChsb2NrKSA9PiB7XG4gICAgICAgIGlmIChsb2NrKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJuYWxzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0BzdXBhYmFzZS9nb3RydWUtanM6IG5hdmlnYXRvckxvY2s6IGFjcXVpcmVkJywgbmFtZSwgbG9jay5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGZuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJuYWxzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdAc3VwYWJhc2UvZ290cnVlLWpzOiBuYXZpZ2F0b3JMb2NrOiByZWxlYXNlZCcsIG5hbWUsIGxvY2submFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFjcXVpcmVUaW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGludGVybmFscy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQHN1cGFiYXNlL2dvdHJ1ZS1qczogbmF2aWdhdG9yTG9jazogbm90IGltbWVkaWF0ZWx5IGF2YWlsYWJsZScsIG5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTmF2aWdhdG9yTG9ja0FjcXVpcmVUaW1lb3V0RXJyb3IoYEFjcXVpcmluZyBhbiBleGNsdXNpdmUgTmF2aWdhdG9yIExvY2tNYW5hZ2VyIGxvY2sgXCIke25hbWV9XCIgaW1tZWRpYXRlbHkgZmFpbGVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJuYWxzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnbG9iYWxUaGlzLm5hdmlnYXRvci5sb2Nrcy5xdWVyeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0BzdXBhYmFzZS9nb3RydWUtanM6IE5hdmlnYXRvciBMb2NrTWFuYWdlciBzdGF0ZScsIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgJyAgJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0BzdXBhYmFzZS9nb3RydWUtanM6IEVycm9yIHdoZW4gcXVlcnlpbmcgTmF2aWdhdG9yIExvY2tNYW5hZ2VyIHN0YXRlJywgZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQnJvd3NlciBpcyBub3QgZm9sbG93aW5nIHRoZSBOYXZpZ2F0b3IgTG9ja01hbmFnZXIgc3BlYywgaXRcbiAgICAgICAgICAgICAgICAvLyByZXR1cm5lZCBhIG51bGwgbG9jayB3aGVuIHdlIGRpZG4ndCB1c2UgaWZBdmFpbGFibGUuIFNvIHdlIGNhblxuICAgICAgICAgICAgICAgIC8vIHByZXRlbmQgdGhlIGxvY2sgaXMgYWNxdWlyZWQgaW4gdGhlIG5hbWUgb2YgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgICAgIC8vIGFuZCB1c2VyIGV4cGVyaWVuY2UgYW5kIGp1c3QgcnVuIHRoZSBmdW5jdGlvbi5cbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0BzdXBhYmFzZS9nb3RydWUtanM6IE5hdmlnYXRvciBMb2NrTWFuYWdlciByZXR1cm5lZCBhIG51bGwgbG9jayB3aGVuIHVzaW5nICNyZXF1ZXN0IHdpdGhvdXQgaWZBdmFpbGFibGUgc2V0IHRvIHRydWUsIGl0IGFwcGVhcnMgdGhpcyBicm93c2VyIGlzIG5vdCBmb2xsb3dpbmcgdGhlIExvY2tNYW5hZ2VyIHNwZWMgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0xvY2tNYW5hZ2VyL3JlcXVlc3QnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgZm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKTtcbn1cbmNvbnN0IFBST0NFU1NfTE9DS1MgPSB7fTtcbi8qKlxuICogSW1wbGVtZW50cyBhIGdsb2JhbCBleGNsdXNpdmUgbG9jayB0aGF0IHdvcmtzIG9ubHkgaW4gdGhlIGN1cnJlbnQgcHJvY2Vzcy5cbiAqIFVzZWZ1bCBmb3IgZW52aXJvbm1lbnRzIGxpa2UgUmVhY3QgTmF0aXZlIG9yIG90aGVyIG5vbi1icm93c2VyXG4gKiBzaW5nbGUtcHJvY2VzcyAoaS5lLiBubyBjb25jZXB0IG9mIFwidGFic1wiKSBlbnZpcm9ubWVudHMuXG4gKlxuICogVXNlIHtAbGluayAjbmF2aWdhdG9yTG9ja30gaW4gYnJvd3NlciBlbnZpcm9ubWVudHMuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgbG9jayB0byBiZSBhY3F1aXJlZC5cbiAqIEBwYXJhbSBhY3F1aXJlVGltZW91dCBJZiBuZWdhdGl2ZSwgbm8gdGltZW91dC4gSWYgMCBhbiBlcnJvciBpcyB0aHJvd24gaWZcbiAqICAgICAgICAgICAgICAgICAgICAgICB0aGUgbG9jayBjYW4ndCBiZSBhY3F1aXJlZCB3aXRob3V0IHdhaXRpbmcuIElmIHBvc2l0aXZlLCB0aGUgbG9jayBhY3F1aXJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgd2lsbCB0aW1lIG91dCBhZnRlciBzbyBtYW55IG1pbGxpc2Vjb25kcy4gQW4gZXJyb3IgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICBhIHRpbWVvdXQgaWYgaXQgaGFzIGBpc0FjcXVpcmVUaW1lb3V0YCBzZXQgdG8gdHJ1ZS5cbiAqIEBwYXJhbSBmbiBUaGUgb3BlcmF0aW9uIHRvIHJ1biBvbmNlIHRoZSBsb2NrIGlzIGFjcXVpcmVkLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0xvY2sobmFtZSwgYWNxdWlyZVRpbWVvdXQsIGZuKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHByZXZpb3VzT3BlcmF0aW9uID0gKF9hID0gUFJPQ0VTU19MT0NLU1tuYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgY29uc3QgY3VycmVudE9wZXJhdGlvbiA9IFByb21pc2UucmFjZShbXG4gICAgICAgIHByZXZpb3VzT3BlcmF0aW9uLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSBlcnJvciBvZiBwcmV2aW91cyBvcGVyYXRpb24gdGhhdCB3ZSdyZSB3YWl0aW5nIHRvIGZpbmlzaFxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pLFxuICAgICAgICBhY3F1aXJlVGltZW91dCA+PSAwXG4gICAgICAgICAgICA/IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBQcm9jZXNzTG9ja0FjcXVpcmVUaW1lb3V0RXJyb3IoYEFjcXVyaW5nIHByb2Nlc3MgbG9jayB3aXRoIG5hbWUgXCIke25hbWV9XCIgdGltZWQgb3V0YCkpO1xuICAgICAgICAgICAgICAgIH0sIGFjcXVpcmVUaW1lb3V0KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IG51bGwsXG4gICAgXS5maWx0ZXIoKHgpID0+IHgpKVxuICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgaWYgKGUgJiYgZS5pc0FjcXVpcmVUaW1lb3V0KSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0pXG4gICAgICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgLy8gcHJldmlvdXMgb3BlcmF0aW9ucyBmaW5pc2hlZCBhbmQgd2UgZGlkbid0IGdldCBhIHJhY2Ugb24gdGhlIGFjcXVpcmVcbiAgICAgICAgLy8gdGltZW91dCwgc28gdGhlIGN1cnJlbnQgb3BlcmF0aW9uIGNhbiBmaW5hbGx5IHN0YXJ0XG4gICAgICAgIHJldHVybiBhd2FpdCBmbigpO1xuICAgIH0pO1xuICAgIFBST0NFU1NfTE9DS1NbbmFtZV0gPSBjdXJyZW50T3BlcmF0aW9uLmNhdGNoKGFzeW5jIChlKSA9PiB7XG4gICAgICAgIGlmIChlICYmIGUuaXNBY3F1aXJlVGltZW91dCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlIGN1cnJlbnQgb3BlcmF0aW9uIHRpbWVkIG91dCwgaXQgZG9lc24ndCBtZWFuIHRoYXQgdGhlIHByZXZpb3VzXG4gICAgICAgICAgICAvLyBvcGVyYXRpb24gZmluaXNoZWQsIHNvIHdlIG5lZWQgY29udG51ZSB3YWl0aW5nIGZvciBpdCB0byBmaW5pc2hcbiAgICAgICAgICAgIGF3YWl0IHByZXZpb3VzT3BlcmF0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbiAgICAvLyBmaW5hbGx5IHdhaXQgZm9yIHRoZSBjdXJyZW50IG9wZXJhdGlvbiB0byBmaW5pc2ggc3VjY2Vzc2Z1bGx5LCB3aXRoIGFuXG4gICAgLy8gZXJyb3Igb3Igd2l0aCBhbiBhY3F1aXJlIHRpbWVvdXQgZXJyb3JcbiAgICByZXR1cm4gYXdhaXQgY3VycmVudE9wZXJhdGlvbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2tzLmpzLm1hcCIsIi8qKlxuICogaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2dsb2JhbHRoaXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvbHlmaWxsR2xvYmFsVGhpcygpIHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm47XG4gICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsICdfX21hZ2ljX18nLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yICdBbGxvdyBhY2Nlc3MgdG8gbWFnaWMnXG4gICAgICAgIF9fbWFnaWNfXy5nbG9iYWxUaGlzID0gX19tYWdpY19fO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yICdBbGxvdyBhY2Nlc3MgdG8gbWFnaWMnXG4gICAgICAgIGRlbGV0ZSBPYmplY3QucHJvdG90eXBlLl9fbWFnaWNfXztcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAnQWxsb3cgYWNjZXNzIHRvIGdsb2JhbHMnXG4gICAgICAgICAgICBzZWxmLmdsb2JhbFRoaXMgPSBzZWxmO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9seWZpbGxzLmpzLm1hcCIsImltcG9ydCBHb1RydWVBZG1pbkFwaSBmcm9tICcuL0dvVHJ1ZUFkbWluQXBpJztcbmltcG9ydCB7IERFRkFVTFRfSEVBREVSUywgRVhQSVJZX01BUkdJTl9NUywgQVVUT19SRUZSRVNIX1RJQ0tfRFVSQVRJT05fTVMsIEFVVE9fUkVGUkVTSF9USUNLX1RIUkVTSE9MRCwgR09UUlVFX1VSTCwgU1RPUkFHRV9LRVksIEpXS1NfVFRMLCB9IGZyb20gJy4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3IsIEF1dGhQS0NFR3JhbnRDb2RlRXhjaGFuZ2VFcnJvciwgQXV0aEludmFsaWRDcmVkZW50aWFsc0Vycm9yLCBBdXRoU2Vzc2lvbk1pc3NpbmdFcnJvciwgQXV0aEludmFsaWRUb2tlblJlc3BvbnNlRXJyb3IsIEF1dGhVbmtub3duRXJyb3IsIGlzQXV0aEFwaUVycm9yLCBpc0F1dGhFcnJvciwgaXNBdXRoUmV0cnlhYmxlRmV0Y2hFcnJvciwgaXNBdXRoU2Vzc2lvbk1pc3NpbmdFcnJvciwgaXNBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3IsIEF1dGhJbnZhbGlkSnd0RXJyb3IsIH0gZnJvbSAnLi9saWIvZXJyb3JzJztcbmltcG9ydCB7IF9yZXF1ZXN0LCBfc2Vzc2lvblJlc3BvbnNlLCBfc2Vzc2lvblJlc3BvbnNlUGFzc3dvcmQsIF91c2VyUmVzcG9uc2UsIF9zc29SZXNwb25zZSwgfSBmcm9tICcuL2xpYi9mZXRjaCc7XG5pbXBvcnQgeyBEZWZlcnJlZCwgZ2V0SXRlbUFzeW5jLCBpc0Jyb3dzZXIsIHJlbW92ZUl0ZW1Bc3luYywgcmVzb2x2ZUZldGNoLCBzZXRJdGVtQXN5bmMsIHV1aWQsIHJldHJ5YWJsZSwgc2xlZXAsIHN1cHBvcnRzTG9jYWxTdG9yYWdlLCBwYXJzZVBhcmFtZXRlcnNGcm9tVVJMLCBnZXRDb2RlQ2hhbGxlbmdlQW5kTWV0aG9kLCBnZXRBbGdvcml0aG0sIHZhbGlkYXRlRXhwLCBkZWNvZGVKV1QsIH0gZnJvbSAnLi9saWIvaGVscGVycyc7XG5pbXBvcnQgeyBsb2NhbFN0b3JhZ2VBZGFwdGVyLCBtZW1vcnlMb2NhbFN0b3JhZ2VBZGFwdGVyIH0gZnJvbSAnLi9saWIvbG9jYWwtc3RvcmFnZSc7XG5pbXBvcnQgeyBwb2x5ZmlsbEdsb2JhbFRoaXMgfSBmcm9tICcuL2xpYi9wb2x5ZmlsbHMnO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4vbGliL3ZlcnNpb24nO1xuaW1wb3J0IHsgTG9ja0FjcXVpcmVUaW1lb3V0RXJyb3IsIG5hdmlnYXRvckxvY2sgfSBmcm9tICcuL2xpYi9sb2Nrcyc7XG5pbXBvcnQgeyBzdHJpbmdUb1VpbnQ4QXJyYXksIGJ5dGVzVG9CYXNlNjRVUkwgfSBmcm9tICcuL2xpYi9iYXNlNjR1cmwnO1xucG9seWZpbGxHbG9iYWxUaGlzKCk7IC8vIE1ha2UgXCJnbG9iYWxUaGlzXCIgYXZhaWxhYmxlXG5jb25zdCBERUZBVUxUX09QVElPTlMgPSB7XG4gICAgdXJsOiBHT1RSVUVfVVJMLFxuICAgIHN0b3JhZ2VLZXk6IFNUT1JBR0VfS0VZLFxuICAgIGF1dG9SZWZyZXNoVG9rZW46IHRydWUsXG4gICAgcGVyc2lzdFNlc3Npb246IHRydWUsXG4gICAgZGV0ZWN0U2Vzc2lvbkluVXJsOiB0cnVlLFxuICAgIGhlYWRlcnM6IERFRkFVTFRfSEVBREVSUyxcbiAgICBmbG93VHlwZTogJ2ltcGxpY2l0JyxcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgaGFzQ3VzdG9tQXV0aG9yaXphdGlvbkhlYWRlcjogZmFsc2UsXG59O1xuYXN5bmMgZnVuY3Rpb24gbG9ja05vT3AobmFtZSwgYWNxdWlyZVRpbWVvdXQsIGZuKSB7XG4gICAgcmV0dXJuIGF3YWl0IGZuKCk7XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHb1RydWVDbGllbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjbGllbnQgZm9yIHVzZSBpbiB0aGUgYnJvd3Nlci5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMubWVtb3J5U3RvcmFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGVDaGFuZ2VFbWl0dGVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5hdXRvUmVmcmVzaFRpY2tlciA9IG51bGw7XG4gICAgICAgIHRoaXMudmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIHRoaXMucmVmcmVzaGluZ0RlZmVycmVkID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEtlZXBzIHRyYWNrIG9mIHRoZSBhc3luYyBjbGllbnQgaW5pdGlhbGl6YXRpb24uXG4gICAgICAgICAqIFdoZW4gbnVsbCBvciBub3QgeWV0IHJlc29sdmVkIHRoZSBhdXRoIHN0YXRlIGlzIGB1bmtub3duYFxuICAgICAgICAgKiBPbmNlIHJlc29sdmVkIHRoZSB0aGUgYXV0aCBzdGF0ZSBpcyBrbm93biBhbmQgaXQncyBzYXZlIHRvIGNhbGwgYW55IGZ1cnRoZXIgY2xpZW50IG1ldGhvZHMuXG4gICAgICAgICAqIEtlZXAgZXh0cmEgY2FyZSB0byBuZXZlciByZWplY3Qgb3IgdGhyb3cgdW5jYXVnaHQgZXJyb3JzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmluaXRpYWxpemVQcm9taXNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZXRlY3RTZXNzaW9uSW5VcmwgPSB0cnVlO1xuICAgICAgICB0aGlzLmhhc0N1c3RvbUF1dGhvcml6YXRpb25IZWFkZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdXBwcmVzc0dldFNlc3Npb25XYXJuaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9ja0FjcXVpcmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGVuZGluZ0luTG9jayA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogVXNlZCB0byBicm9hZGNhc3Qgc3RhdGUgY2hhbmdlIGV2ZW50cyB0byBvdGhlciB0YWJzIGxpc3RlbmluZy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0Q2hhbm5lbCA9IG51bGw7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gY29uc29sZS5sb2c7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VJRCA9IEdvVHJ1ZUNsaWVudC5uZXh0SW5zdGFuY2VJRDtcbiAgICAgICAgR29UcnVlQ2xpZW50Lm5leHRJbnN0YW5jZUlEICs9IDE7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlSUQgPiAwICYmIGlzQnJvd3NlcigpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ011bHRpcGxlIEdvVHJ1ZUNsaWVudCBpbnN0YW5jZXMgZGV0ZWN0ZWQgaW4gdGhlIHNhbWUgYnJvd3NlciBjb250ZXh0LiBJdCBpcyBub3QgYW4gZXJyb3IsIGJ1dCB0aGlzIHNob3VsZCBiZSBhdm9pZGVkIGFzIGl0IG1heSBwcm9kdWNlIHVuZGVmaW5lZCBiZWhhdmlvciB3aGVuIHVzZWQgY29uY3VycmVudGx5IHVuZGVyIHRoZSBzYW1lIHN0b3JhZ2Uga2V5LicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMpLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5sb2dEZWJ1Z01lc3NhZ2VzID0gISFzZXR0aW5ncy5kZWJ1ZztcbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5kZWJ1ZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIgPSBzZXR0aW5ncy5kZWJ1ZztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlcnNpc3RTZXNzaW9uID0gc2V0dGluZ3MucGVyc2lzdFNlc3Npb247XG4gICAgICAgIHRoaXMuc3RvcmFnZUtleSA9IHNldHRpbmdzLnN0b3JhZ2VLZXk7XG4gICAgICAgIHRoaXMuYXV0b1JlZnJlc2hUb2tlbiA9IHNldHRpbmdzLmF1dG9SZWZyZXNoVG9rZW47XG4gICAgICAgIHRoaXMuYWRtaW4gPSBuZXcgR29UcnVlQWRtaW5BcGkoe1xuICAgICAgICAgICAgdXJsOiBzZXR0aW5ncy51cmwsXG4gICAgICAgICAgICBoZWFkZXJzOiBzZXR0aW5ncy5oZWFkZXJzLFxuICAgICAgICAgICAgZmV0Y2g6IHNldHRpbmdzLmZldGNoLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cmwgPSBzZXR0aW5ncy51cmw7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IHNldHRpbmdzLmhlYWRlcnM7XG4gICAgICAgIHRoaXMuZmV0Y2ggPSByZXNvbHZlRmV0Y2goc2V0dGluZ3MuZmV0Y2gpO1xuICAgICAgICB0aGlzLmxvY2sgPSBzZXR0aW5ncy5sb2NrIHx8IGxvY2tOb09wO1xuICAgICAgICB0aGlzLmRldGVjdFNlc3Npb25JblVybCA9IHNldHRpbmdzLmRldGVjdFNlc3Npb25JblVybDtcbiAgICAgICAgdGhpcy5mbG93VHlwZSA9IHNldHRpbmdzLmZsb3dUeXBlO1xuICAgICAgICB0aGlzLmhhc0N1c3RvbUF1dGhvcml6YXRpb25IZWFkZXIgPSBzZXR0aW5ncy5oYXNDdXN0b21BdXRob3JpemF0aW9uSGVhZGVyO1xuICAgICAgICBpZiAoc2V0dGluZ3MubG9jaykge1xuICAgICAgICAgICAgdGhpcy5sb2NrID0gc2V0dGluZ3MubG9jaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0Jyb3dzZXIoKSAmJiAoKF9hID0gZ2xvYmFsVGhpcyA9PT0gbnVsbCB8fCBnbG9iYWxUaGlzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWxUaGlzLm5hdmlnYXRvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxvY2tzKSkge1xuICAgICAgICAgICAgdGhpcy5sb2NrID0gbmF2aWdhdG9yTG9jaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9jayA9IGxvY2tOb09wO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuandrcyA9IHsga2V5czogW10gfTtcbiAgICAgICAgdGhpcy5qd2tzX2NhY2hlZF9hdCA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSO1xuICAgICAgICB0aGlzLm1mYSA9IHtcbiAgICAgICAgICAgIHZlcmlmeTogdGhpcy5fdmVyaWZ5LmJpbmQodGhpcyksXG4gICAgICAgICAgICBlbnJvbGw6IHRoaXMuX2Vucm9sbC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdW5lbnJvbGw6IHRoaXMuX3VuZW5yb2xsLmJpbmQodGhpcyksXG4gICAgICAgICAgICBjaGFsbGVuZ2U6IHRoaXMuX2NoYWxsZW5nZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgbGlzdEZhY3RvcnM6IHRoaXMuX2xpc3RGYWN0b3JzLmJpbmQodGhpcyksXG4gICAgICAgICAgICBjaGFsbGVuZ2VBbmRWZXJpZnk6IHRoaXMuX2NoYWxsZW5nZUFuZFZlcmlmeS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZ2V0QXV0aGVudGljYXRvckFzc3VyYW5jZUxldmVsOiB0aGlzLl9nZXRBdXRoZW50aWNhdG9yQXNzdXJhbmNlTGV2ZWwuYmluZCh0aGlzKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMucGVyc2lzdFNlc3Npb24pIHtcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5zdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlID0gc2V0dGluZ3Muc3RvcmFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0c0xvY2FsU3RvcmFnZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZSA9IGxvY2FsU3RvcmFnZUFkYXB0ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbW9yeVN0b3JhZ2UgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlID0gbWVtb3J5TG9jYWxTdG9yYWdlQWRhcHRlcih0aGlzLm1lbW9yeVN0b3JhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWVtb3J5U3RvcmFnZSA9IHt9O1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlID0gbWVtb3J5TG9jYWxTdG9yYWdlQWRhcHRlcih0aGlzLm1lbW9yeVN0b3JhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Jyb3dzZXIoKSAmJiBnbG9iYWxUaGlzLkJyb2FkY2FzdENoYW5uZWwgJiYgdGhpcy5wZXJzaXN0U2Vzc2lvbiAmJiB0aGlzLnN0b3JhZ2VLZXkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RDaGFubmVsID0gbmV3IGdsb2JhbFRoaXMuQnJvYWRjYXN0Q2hhbm5lbCh0aGlzLnN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGEgbmV3IEJyb2FkY2FzdENoYW5uZWwsIG11bHRpLXRhYiBzdGF0ZSBjaGFuZ2VzIHdpbGwgbm90IGJlIGF2YWlsYWJsZScsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKF9iID0gdGhpcy5icm9hZGNhc3RDaGFubmVsKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKCdyZWNlaXZlZCBicm9hZGNhc3Qgbm90aWZpY2F0aW9uIGZyb20gb3RoZXIgdGFiIG9yIGNsaWVudCcsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycyhldmVudC5kYXRhLmV2ZW50LCBldmVudC5kYXRhLnNlc3Npb24sIGZhbHNlKTsgLy8gYnJvYWRjYXN0ID0gZmFsc2Ugc28gd2UgZG9uJ3QgZ2V0IGFuIGVuZGxlc3MgbG9vcCBvZiBtZXNzYWdlc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuICAgIF9kZWJ1ZyguLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLmxvZ0RlYnVnTWVzc2FnZXMpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyKGBHb1RydWVDbGllbnRAJHt0aGlzLmluc3RhbmNlSUR9ICgke3ZlcnNpb259KSAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gLCAuLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGNsaWVudCBzZXNzaW9uIGVpdGhlciBmcm9tIHRoZSB1cmwgb3IgZnJvbSBzdG9yYWdlLlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIHdoZW4gaW5zdGFudGlhdGluZyB0aGUgY2xpZW50LCBidXQgc2hvdWxkIGFsc28gYmUgY2FsbGVkXG4gICAgICogbWFudWFsbHkgd2hlbiBjaGVja2luZyBmb3IgYW4gZXJyb3IgZnJvbSBhbiBhdXRoIHJlZGlyZWN0IChvYXV0aCwgbWFnaWNsaW5rLCBwYXNzd29yZCByZWNvdmVyeSwgZXRjKS5cbiAgICAgKi9cbiAgICBhc3luYyBpbml0aWFsaXplKCkge1xuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0aWFsaXplUHJvbWlzZSA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5faW5pdGlhbGl6ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmluaXRpYWxpemVQcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJTVBPUlRBTlQ6XG4gICAgICogMS4gTmV2ZXIgdGhyb3cgaW4gdGhpcyBtZXRob2QsIGFzIGl0IGlzIGNhbGxlZCBmcm9tIHRoZSBjb25zdHJ1Y3RvclxuICAgICAqIDIuIE5ldmVyIHJldHVybiBhIHNlc3Npb24gZnJvbSB0aGlzIG1ldGhvZCBhcyBpdCB3b3VsZCBiZSBjYWNoZWQgb3ZlclxuICAgICAqICAgIHRoZSB3aG9sZSBsaWZldGltZSBvZiB0aGUgY2xpZW50XG4gICAgICovXG4gICAgYXN5bmMgX2luaXRpYWxpemUoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHBhcnNlUGFyYW1ldGVyc0Zyb21VUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgICAgbGV0IGNhbGxiYWNrVXJsVHlwZSA9ICdub25lJztcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0ltcGxpY2l0R3JhbnRDYWxsYmFjayhwYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tVcmxUeXBlID0gJ2ltcGxpY2l0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGF3YWl0IHRoaXMuX2lzUEtDRUNhbGxiYWNrKHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja1VybFR5cGUgPSAncGtjZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEF0dGVtcHQgdG8gZ2V0IHRoZSBzZXNzaW9uIGZyb20gdGhlIFVSTCBvbmx5IGlmIHRoZXNlIGNvbmRpdGlvbnMgYXJlIGZ1bGZpbGxlZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIE5vdGU6IElmIHRoZSBVUkwgaXNuJ3Qgb25lIG9mIHRoZSBjYWxsYmFjayB1cmwgdHlwZXMgKGltcGxpY2l0IG9yIHBrY2UpLFxuICAgICAgICAgICAgICogdGhlbiB0aGVyZSBjb3VsZCBiZSBhbiBleGlzdGluZyBzZXNzaW9uIHNvIHdlIGRvbid0IHdhbnQgdG8gcHJlbWF0dXJlbHkgcmVtb3ZlIGl0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChpc0Jyb3dzZXIoKSAmJiB0aGlzLmRldGVjdFNlc3Npb25JblVybCAmJiBjYWxsYmFja1VybFR5cGUgIT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuX2dldFNlc3Npb25Gcm9tVVJMKHBhcmFtcywgY2FsbGJhY2tVcmxUeXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfaW5pdGlhbGl6ZSgpJywgJ2Vycm9yIGRldGVjdGluZyBzZXNzaW9uIGZyb20gVVJMJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvckNvZGUgPSAoX2EgPSBlcnJvci5kZXRhaWxzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdpZGVudGl0eV9hbHJlYWR5X2V4aXN0cycgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNvZGUgPT09ICdpZGVudGl0eV9ub3RfZm91bmQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDb2RlID09PSAnc2luZ2xlX2lkZW50aXR5X25vdF9kZWxldGFibGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBmYWlsZWQgbG9naW4gYXR0ZW1wdCB2aWEgdXJsLFxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgb2xkIHNlc3Npb24gYXMgaW4gdmVyaWZ5T3RwLCBzaWduVXAgYW5kIHNpZ25JbldpdGgqXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3JlbW92ZVNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzZXNzaW9uLCByZWRpcmVjdFR5cGUgfSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfaW5pdGlhbGl6ZSgpJywgJ2RldGVjdGVkIHNlc3Npb24gaW4gVVJMJywgc2Vzc2lvbiwgJ3JlZGlyZWN0IHR5cGUnLCByZWRpcmVjdFR5cGUpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmVTZXNzaW9uKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVkaXJlY3RUeXBlID09PSAncmVjb3ZlcnknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycygnUEFTU1dPUkRfUkVDT1ZFUlknLCBzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25vdGlmeUFsbFN1YnNjcmliZXJzKCdTSUdORURfSU4nLCBzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBubyBsb2dpbiBhdHRlbXB0IHZpYSBjYWxsYmFjayB1cmwgdHJ5IHRvIHJlY292ZXIgc2Vzc2lvbiBmcm9tIHN0b3JhZ2VcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3JlY292ZXJBbmRSZWZyZXNoKCk7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yOiBuZXcgQXV0aFVua25vd25FcnJvcignVW5leHBlY3RlZCBlcnJvciBkdXJpbmcgaW5pdGlhbGl6YXRpb24nLCBlcnJvciksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5faGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpO1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfaW5pdGlhbGl6ZSgpJywgJ2VuZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYW5vbnltb3VzIHVzZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIHNlc3Npb24gd2hlcmUgdGhlIGlzX2Fub255bW91cyBjbGFpbSBpbiB0aGUgYWNjZXNzIHRva2VuIEpXVCBzZXQgdG8gdHJ1ZVxuICAgICAqL1xuICAgIGFzeW5jIHNpZ25JbkFub255bW91c2x5KGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vc2lnbnVwYCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IChfYiA9IChfYSA9IGNyZWRlbnRpYWxzID09PSBudWxsIHx8IGNyZWRlbnRpYWxzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjcmVkZW50aWFscy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGF0YSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDoge30sXG4gICAgICAgICAgICAgICAgICAgIGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IChfYyA9IGNyZWRlbnRpYWxzID09PSBudWxsIHx8IGNyZWRlbnRpYWxzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjcmVkZW50aWFscy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FwdGNoYVRva2VuIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX3Nlc3Npb25SZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gcmVzO1xuICAgICAgICAgICAgaWYgKGVycm9yIHx8ICFkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yOiBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGRhdGEuc2Vzc2lvbjtcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSBkYXRhLnVzZXI7XG4gICAgICAgICAgICBpZiAoZGF0YS5zZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2F2ZVNlc3Npb24oZGF0YS5zZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycygnU0lHTkVEX0lOJywgc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXIsIHNlc3Npb24gfSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdXNlci5cbiAgICAgKlxuICAgICAqIEJlIGF3YXJlIHRoYXQgaWYgYSB1c2VyIGFjY291bnQgZXhpc3RzIGluIHRoZSBzeXN0ZW0geW91IG1heSBnZXQgYmFjayBhblxuICAgICAqIGVycm9yIG1lc3NhZ2UgdGhhdCBhdHRlbXB0cyB0byBoaWRlIHRoaXMgaW5mb3JtYXRpb24gZnJvbSB0aGUgdXNlci5cbiAgICAgKiBUaGlzIG1ldGhvZCBoYXMgc3VwcG9ydCBmb3IgUEtDRSB2aWEgZW1haWwgc2lnbnVwcy4gVGhlIFBLQ0UgZmxvdyBjYW5ub3QgYmUgdXNlZCB3aGVuIGF1dG9jb25maXJtIGlzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIGxvZ2dlZC1pbiBzZXNzaW9uIGlmIHRoZSBzZXJ2ZXIgaGFzIFwiYXV0b2NvbmZpcm1cIiBPTlxuICAgICAqIEByZXR1cm5zIEEgdXNlciBpZiB0aGUgc2VydmVyIGhhcyBcImF1dG9jb25maXJtXCIgT0ZGXG4gICAgICovXG4gICAgYXN5bmMgc2lnblVwKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHJlcztcbiAgICAgICAgICAgIGlmICgnZW1haWwnIGluIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlbWFpbCwgcGFzc3dvcmQsIG9wdGlvbnMgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgICAgIGxldCBjb2RlQ2hhbGxlbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsZXQgY29kZUNoYWxsZW5nZU1ldGhvZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmxvd1R5cGUgPT09ICdwa2NlJykge1xuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIFtjb2RlQ2hhbGxlbmdlLCBjb2RlQ2hhbGxlbmdlTWV0aG9kXSA9IGF3YWl0IGdldENvZGVDaGFsbGVuZ2VBbmRNZXRob2QodGhpcy5zdG9yYWdlLCB0aGlzLnN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXMgPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9zaWdudXBgLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmVtYWlsUmVkaXJlY3RUbyxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kYXRhKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXB0Y2hhVG9rZW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVfY2hhbGxlbmdlOiBjb2RlQ2hhbGxlbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZV9jaGFsbGVuZ2VfbWV0aG9kOiBjb2RlQ2hhbGxlbmdlTWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB4Zm9ybTogX3Nlc3Npb25SZXNwb25zZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCdwaG9uZScgaW4gY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHBob25lLCBwYXNzd29yZCwgb3B0aW9ucyB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgICAgICAgICAgcmVzID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vc2lnbnVwYCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob25lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGF0YSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsOiAoX2MgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2hhbm5lbCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJ3NtcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBnb3RydWVfbWV0YV9zZWN1cml0eTogeyBjYXB0Y2hhX3Rva2VuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2FwdGNoYVRva2VuIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHhmb3JtOiBfc2Vzc2lvblJlc3BvbnNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhJbnZhbGlkQ3JlZGVudGlhbHNFcnJvcignWW91IG11c3QgcHJvdmlkZSBlaXRoZXIgYW4gZW1haWwgb3IgcGhvbmUgbnVtYmVyIGFuZCBhIHBhc3N3b3JkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSByZXM7XG4gICAgICAgICAgICBpZiAoZXJyb3IgfHwgIWRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3I6IGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzZXNzaW9uID0gZGF0YS5zZXNzaW9uO1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IGRhdGEudXNlcjtcbiAgICAgICAgICAgIGlmIChkYXRhLnNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zYXZlU2Vzc2lvbihkYXRhLnNlc3Npb24pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25vdGlmeUFsbFN1YnNjcmliZXJzKCdTSUdORURfSU4nLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlciwgc2Vzc2lvbiB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9nIGluIGFuIGV4aXN0aW5nIHVzZXIgd2l0aCBhbiBlbWFpbCBhbmQgcGFzc3dvcmQgb3IgcGhvbmUgYW5kIHBhc3N3b3JkLlxuICAgICAqXG4gICAgICogQmUgYXdhcmUgdGhhdCB5b3UgbWF5IGdldCBiYWNrIGFuIGVycm9yIG1lc3NhZ2UgdGhhdCB3aWxsIG5vdCBkaXN0aW5ndWlzaFxuICAgICAqIGJldHdlZW4gdGhlIGNhc2VzIHdoZXJlIHRoZSBhY2NvdW50IGRvZXMgbm90IGV4aXN0IG9yIHRoYXQgdGhlXG4gICAgICogZW1haWwvcGhvbmUgYW5kIHBhc3N3b3JkIGNvbWJpbmF0aW9uIGlzIHdyb25nIG9yIHRoYXQgdGhlIGFjY291bnQgY2FuIG9ubHlcbiAgICAgKiBiZSBhY2Nlc3NlZCB2aWEgc29jaWFsIGxvZ2luLlxuICAgICAqL1xuICAgIGFzeW5jIHNpZ25JbldpdGhQYXNzd29yZChjcmVkZW50aWFscykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHJlcztcbiAgICAgICAgICAgIGlmICgnZW1haWwnIGluIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlbWFpbCwgcGFzc3dvcmQsIG9wdGlvbnMgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgICAgIHJlcyA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L3Rva2VuP2dyYW50X3R5cGU9cGFzc3dvcmRgLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXB0Y2hhVG9rZW4gfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgeGZvcm06IF9zZXNzaW9uUmVzcG9uc2VQYXNzd29yZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCdwaG9uZScgaW4gY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHBob25lLCBwYXNzd29yZCwgb3B0aW9ucyB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgICAgICAgICAgcmVzID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vdG9rZW4/Z3JhbnRfdHlwZT1wYXNzd29yZGAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ290cnVlX21ldGFfc2VjdXJpdHk6IHsgY2FwdGNoYV90b2tlbjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhcHRjaGFUb2tlbiB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB4Zm9ybTogX3Nlc3Npb25SZXNwb25zZVBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhJbnZhbGlkQ3JlZGVudGlhbHNFcnJvcignWW91IG11c3QgcHJvdmlkZSBlaXRoZXIgYW4gZW1haWwgb3IgcGhvbmUgbnVtYmVyIGFuZCBhIHBhc3N3b3JkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSByZXM7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFkYXRhIHx8ICFkYXRhLnNlc3Npb24gfHwgIWRhdGEudXNlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvcjogbmV3IEF1dGhJbnZhbGlkVG9rZW5SZXNwb25zZUVycm9yKCkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhLnNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zYXZlU2Vzc2lvbihkYXRhLnNlc3Npb24pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25vdGlmeUFsbFN1YnNjcmliZXJzKCdTSUdORURfSU4nLCBkYXRhLnNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHsgdXNlcjogZGF0YS51c2VyLCBzZXNzaW9uOiBkYXRhLnNlc3Npb24gfSwgKGRhdGEud2Vha19wYXNzd29yZCA/IHsgd2Vha1Bhc3N3b3JkOiBkYXRhLndlYWtfcGFzc3dvcmQgfSA6IG51bGwpKSxcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2cgaW4gYW4gZXhpc3RpbmcgdXNlciB2aWEgYSB0aGlyZC1wYXJ0eSBwcm92aWRlci5cbiAgICAgKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyB0aGUgUEtDRSBmbG93LlxuICAgICAqL1xuICAgIGFzeW5jIHNpZ25JbldpdGhPQXV0aChjcmVkZW50aWFscykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9oYW5kbGVQcm92aWRlclNpZ25JbihjcmVkZW50aWFscy5wcm92aWRlciwge1xuICAgICAgICAgICAgcmVkaXJlY3RUbzogKF9hID0gY3JlZGVudGlhbHMub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlZGlyZWN0VG8sXG4gICAgICAgICAgICBzY29wZXM6IChfYiA9IGNyZWRlbnRpYWxzLm9wdGlvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zY29wZXMsXG4gICAgICAgICAgICBxdWVyeVBhcmFtczogKF9jID0gY3JlZGVudGlhbHMub3B0aW9ucykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnF1ZXJ5UGFyYW1zLFxuICAgICAgICAgICAgc2tpcEJyb3dzZXJSZWRpcmVjdDogKF9kID0gY3JlZGVudGlhbHMub3B0aW9ucykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnNraXBCcm93c2VyUmVkaXJlY3QsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2cgaW4gYW4gZXhpc3RpbmcgdXNlciBieSBleGNoYW5naW5nIGFuIEF1dGggQ29kZSBpc3N1ZWQgZHVyaW5nIHRoZSBQS0NFIGZsb3cuXG4gICAgICovXG4gICAgYXN5bmMgZXhjaGFuZ2VDb2RlRm9yU2Vzc2lvbihhdXRoQ29kZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVQcm9taXNlO1xuICAgICAgICByZXR1cm4gdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9leGNoYW5nZUNvZGVGb3JTZXNzaW9uKGF1dGhDb2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25zIGluIGEgdXNlciBieSB2ZXJpZnlpbmcgYSBtZXNzYWdlIHNpZ25lZCBieSB0aGUgdXNlcidzIHByaXZhdGUga2V5LlxuICAgICAqIE9ubHkgU29sYW5hIHN1cHBvcnRlZCBhdCB0aGlzIHRpbWUsIHVzaW5nIHRoZSBTaWduIGluIHdpdGggU29sYW5hIHN0YW5kYXJkLlxuICAgICAqL1xuICAgIGFzeW5jIHNpZ25JbldpdGhXZWIzKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGNvbnN0IHsgY2hhaW4gfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICBpZiAoY2hhaW4gPT09ICdzb2xhbmEnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zaWduSW5XaXRoU29sYW5hKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEBzdXBhYmFzZS9hdXRoLWpzOiBVbnN1cHBvcnRlZCBjaGFpbiBcIiR7Y2hhaW59XCJgKTtcbiAgICB9XG4gICAgYXN5bmMgc2lnbkluV2l0aFNvbGFuYShjcmVkZW50aWFscykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbTtcbiAgICAgICAgbGV0IG1lc3NhZ2U7XG4gICAgICAgIGxldCBzaWduYXR1cmU7XG4gICAgICAgIGlmICgnbWVzc2FnZScgaW4gY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBjcmVkZW50aWFscy5tZXNzYWdlO1xuICAgICAgICAgICAgc2lnbmF0dXJlID0gY3JlZGVudGlhbHMuc2lnbmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbiwgd2FsbGV0LCBzdGF0ZW1lbnQsIG9wdGlvbnMgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgbGV0IHJlc29sdmVkV2FsbGV0O1xuICAgICAgICAgICAgaWYgKCFpc0Jyb3dzZXIoKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2FsbGV0ICE9PSAnb2JqZWN0JyB8fCAhKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy51cmwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQHN1cGFiYXNlL2F1dGgtanM6IEJvdGggd2FsbGV0IGFuZCB1cmwgbXVzdCBiZSBzcGVjaWZpZWQgaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlZFdhbGxldCA9IHdhbGxldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB3YWxsZXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRXYWxsZXQgPSB3YWxsZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3aW5kb3dBbnkgPSB3aW5kb3c7XG4gICAgICAgICAgICAgICAgaWYgKCdzb2xhbmEnIGluIHdpbmRvd0FueSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygd2luZG93QW55LnNvbGFuYSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgKCgnc2lnbkluJyBpbiB3aW5kb3dBbnkuc29sYW5hICYmIHR5cGVvZiB3aW5kb3dBbnkuc29sYW5hLnNpZ25JbiA9PT0gJ2Z1bmN0aW9uJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICgnc2lnbk1lc3NhZ2UnIGluIHdpbmRvd0FueS5zb2xhbmEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygd2luZG93QW55LnNvbGFuYS5zaWduTWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkV2FsbGV0ID0gd2luZG93QW55LnNvbGFuYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHN1cGFiYXNlL2F1dGgtanM6IE5vIGNvbXBhdGlibGUgU29sYW5hIHdhbGxldCBpbnRlcmZhY2Ugb24gdGhlIHdpbmRvdyBvYmplY3QgKHdpbmRvdy5zb2xhbmEpIGRldGVjdGVkLiBNYWtlIHN1cmUgdGhlIHVzZXIgYWxyZWFkeSBoYXMgYSB3YWxsZXQgaW5zdGFsbGVkIGFuZCBjb25uZWN0ZWQgZm9yIHRoaXMgYXBwLiBQcmVmZXIgcGFzc2luZyB0aGUgd2FsbGV0IGludGVyZmFjZSBvYmplY3QgZGlyZWN0bHkgdG8gc2lnbkluV2l0aFdlYjMoeyBjaGFpbjogJ3NvbGFuYScsIHdhbGxldDogcmVzb2x2ZWRVc2VyV2FsbGV0IH0pIGluc3RlYWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCgoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudXJsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICBpZiAoJ3NpZ25JbicgaW4gcmVzb2x2ZWRXYWxsZXQgJiYgcmVzb2x2ZWRXYWxsZXQuc2lnbkluKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgcmVzb2x2ZWRXYWxsZXQuc2lnbkluKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgaXNzdWVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lnbkluV2l0aFNvbGFuYSksIHsgXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vbi1vdmVycmlkYWJsZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246ICcxJywgZG9tYWluOiB1cmwuaG9zdCwgdXJpOiB1cmwuaHJlZiB9KSwgKHN0YXRlbWVudCA/IHsgc3RhdGVtZW50IH0gOiBudWxsKSkpO1xuICAgICAgICAgICAgICAgIGxldCBvdXRwdXRUb1Byb2Nlc3M7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3V0cHV0KSAmJiBvdXRwdXRbMF0gJiYgdHlwZW9mIG91dHB1dFswXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0VG9Qcm9jZXNzID0gb3V0cHV0WzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvdXRwdXQgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG91dHB1dCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgJ3NpZ25lZE1lc3NhZ2UnIGluIG91dHB1dCAmJlxuICAgICAgICAgICAgICAgICAgICAnc2lnbmF0dXJlJyBpbiBvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0VG9Qcm9jZXNzID0gb3V0cHV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdAc3VwYWJhc2UvYXV0aC1qczogV2FsbGV0IG1ldGhvZCBzaWduSW4oKSByZXR1cm5lZCB1bnJlY29nbml6ZWQgdmFsdWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCdzaWduZWRNZXNzYWdlJyBpbiBvdXRwdXRUb1Byb2Nlc3MgJiZcbiAgICAgICAgICAgICAgICAgICAgJ3NpZ25hdHVyZScgaW4gb3V0cHV0VG9Qcm9jZXNzICYmXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2Ygb3V0cHV0VG9Qcm9jZXNzLnNpZ25lZE1lc3NhZ2UgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRUb1Byb2Nlc3Muc2lnbmVkTWVzc2FnZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpICYmXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFRvUHJvY2Vzcy5zaWduYXR1cmUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG91dHB1dFRvUHJvY2Vzcy5zaWduZWRNZXNzYWdlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gb3V0cHV0VG9Qcm9jZXNzLnNpZ25lZE1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShvdXRwdXRUb1Byb2Nlc3Muc2lnbmVkTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZSA9IG91dHB1dFRvUHJvY2Vzcy5zaWduYXR1cmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0BzdXBhYmFzZS9hdXRoLWpzOiBXYWxsZXQgbWV0aG9kIHNpZ25JbigpIEFQSSByZXR1cm5lZCBvYmplY3Qgd2l0aG91dCBzaWduZWRNZXNzYWdlIGFuZCBzaWduYXR1cmUgZmllbGRzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoJ3NpZ25NZXNzYWdlJyBpbiByZXNvbHZlZFdhbGxldCkgfHxcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHJlc29sdmVkV2FsbGV0LnNpZ25NZXNzYWdlICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICEoJ3B1YmxpY0tleScgaW4gcmVzb2x2ZWRXYWxsZXQpIHx8XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiByZXNvbHZlZFdhbGxldCAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgIXJlc29sdmVkV2FsbGV0LnB1YmxpY0tleSB8fFxuICAgICAgICAgICAgICAgICAgICAhKCd0b0Jhc2U1OCcgaW4gcmVzb2x2ZWRXYWxsZXQucHVibGljS2V5KSB8fFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcmVzb2x2ZWRXYWxsZXQucHVibGljS2V5LnRvQmFzZTU4ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQHN1cGFiYXNlL2F1dGgtanM6IFdhbGxldCBkb2VzIG5vdCBoYXZlIGEgY29tcGF0aWJsZSBzaWduTWVzc2FnZSgpIGFuZCBwdWJsaWNLZXkudG9CYXNlNTgoKSBBUEknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgYCR7dXJsLmhvc3R9IHdhbnRzIHlvdSB0byBzaWduIGluIHdpdGggeW91ciBTb2xhbmEgYWNjb3VudDpgLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZFdhbGxldC5wdWJsaWNLZXkudG9CYXNlNTgoKSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKHN0YXRlbWVudCA/IFsnJywgc3RhdGVtZW50LCAnJ10gOiBbJyddKSxcbiAgICAgICAgICAgICAgICAgICAgJ1ZlcnNpb246IDEnLFxuICAgICAgICAgICAgICAgICAgICBgVVJJOiAke3VybC5ocmVmfWAsXG4gICAgICAgICAgICAgICAgICAgIGBJc3N1ZWQgQXQ6ICR7KF9jID0gKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25JbldpdGhTb2xhbmEpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pc3N1ZWRBdCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpfWAsXG4gICAgICAgICAgICAgICAgICAgIC4uLigoKF9kID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25JbldpdGhTb2xhbmEpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5ub3RCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFtgTm90IEJlZm9yZTogJHtvcHRpb25zLnNpZ25JbldpdGhTb2xhbmEubm90QmVmb3JlfWBdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKCgoX2UgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lnbkluV2l0aFNvbGFuYSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmV4cGlyYXRpb25UaW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbYEV4cGlyYXRpb24gVGltZTogJHtvcHRpb25zLnNpZ25JbldpdGhTb2xhbmEuZXhwaXJhdGlvblRpbWV9YF1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogW10pLFxuICAgICAgICAgICAgICAgICAgICAuLi4oKChfZiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaWduSW5XaXRoU29sYW5hKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuY2hhaW5JZClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW2BDaGFpbiBJRDogJHtvcHRpb25zLnNpZ25JbldpdGhTb2xhbmEuY2hhaW5JZH1gXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbXSksXG4gICAgICAgICAgICAgICAgICAgIC4uLigoKF9nID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25JbldpdGhTb2xhbmEpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5ub25jZSkgPyBbYE5vbmNlOiAke29wdGlvbnMuc2lnbkluV2l0aFNvbGFuYS5ub25jZX1gXSA6IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKCgoX2ggPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lnbkluV2l0aFNvbGFuYSkgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLnJlcXVlc3RJZClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW2BSZXF1ZXN0IElEOiAke29wdGlvbnMuc2lnbkluV2l0aFNvbGFuYS5yZXF1ZXN0SWR9YF1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogW10pLFxuICAgICAgICAgICAgICAgICAgICAuLi4oKChfayA9IChfaiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaWduSW5XaXRoU29sYW5hKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2oucmVzb3VyY2VzKSA9PT0gbnVsbCB8fCBfayA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2subGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1Jlc291cmNlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5zaWduSW5XaXRoU29sYW5hLnJlc291cmNlcy5tYXAoKHJlc291cmNlKSA9PiBgLSAke3Jlc291cmNlfWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbXSksXG4gICAgICAgICAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXliZVNpZ25hdHVyZSA9IGF3YWl0IHJlc29sdmVkV2FsbGV0LnNpZ25NZXNzYWdlKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShtZXNzYWdlKSwgJ3V0ZjgnKTtcbiAgICAgICAgICAgICAgICBpZiAoIW1heWJlU2lnbmF0dXJlIHx8ICEobWF5YmVTaWduYXR1cmUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0BzdXBhYmFzZS9hdXRoLWpzOiBXYWxsZXQgc2lnbk1lc3NhZ2UoKSBBUEkgcmV0dXJuZWQgYW4gcmVjb2duaXplZCB2YWx1ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaWduYXR1cmUgPSBtYXliZVNpZ25hdHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vdG9rZW4/Z3JhbnRfdHlwZT13ZWIzYCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiBPYmplY3QuYXNzaWduKHsgY2hhaW46ICdzb2xhbmEnLCBtZXNzYWdlLCBzaWduYXR1cmU6IGJ5dGVzVG9CYXNlNjRVUkwoc2lnbmF0dXJlKSB9LCAoKChfbCA9IGNyZWRlbnRpYWxzLm9wdGlvbnMpID09PSBudWxsIHx8IF9sID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbC5jYXB0Y2hhVG9rZW4pXG4gICAgICAgICAgICAgICAgICAgID8geyBnb3RydWVfbWV0YV9zZWN1cml0eTogeyBjYXB0Y2hhX3Rva2VuOiAoX20gPSBjcmVkZW50aWFscy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX20uY2FwdGNoYVRva2VuIH0gfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGwpKSxcbiAgICAgICAgICAgICAgICB4Zm9ybTogX3Nlc3Npb25SZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRhdGEgfHwgIWRhdGEuc2Vzc2lvbiB8fCAhZGF0YS51c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBuZXcgQXV0aEludmFsaWRUb2tlblJlc3BvbnNlRXJyb3IoKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEuc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmVTZXNzaW9uKGRhdGEuc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1NJR05FRF9JTicsIGRhdGEuc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBkYXRhKSwgZXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9leGNoYW5nZUNvZGVGb3JTZXNzaW9uKGF1dGhDb2RlKSB7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2VJdGVtID0gYXdhaXQgZ2V0SXRlbUFzeW5jKHRoaXMuc3RvcmFnZSwgYCR7dGhpcy5zdG9yYWdlS2V5fS1jb2RlLXZlcmlmaWVyYCk7XG4gICAgICAgIGNvbnN0IFtjb2RlVmVyaWZpZXIsIHJlZGlyZWN0VHlwZV0gPSAoc3RvcmFnZUl0ZW0gIT09IG51bGwgJiYgc3RvcmFnZUl0ZW0gIT09IHZvaWQgMCA/IHN0b3JhZ2VJdGVtIDogJycpLnNwbGl0KCcvJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS90b2tlbj9ncmFudF90eXBlPXBrY2VgLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aF9jb2RlOiBhdXRoQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgY29kZV92ZXJpZmllcjogY29kZVZlcmlmaWVyLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeGZvcm06IF9zZXNzaW9uUmVzcG9uc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHJlbW92ZUl0ZW1Bc3luYyh0aGlzLnN0b3JhZ2UsIGAke3RoaXMuc3RvcmFnZUtleX0tY29kZS12ZXJpZmllcmApO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRhdGEgfHwgIWRhdGEuc2Vzc2lvbiB8fCAhZGF0YS51c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsLCByZWRpcmVjdFR5cGU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG5ldyBBdXRoSW52YWxpZFRva2VuUmVzcG9uc2VFcnJvcigpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS5zZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2F2ZVNlc3Npb24oZGF0YS5zZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9ub3RpZnlBbGxTdWJzY3JpYmVycygnU0lHTkVEX0lOJywgZGF0YS5zZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGF0YSksIHsgcmVkaXJlY3RUeXBlOiByZWRpcmVjdFR5cGUgIT09IG51bGwgJiYgcmVkaXJlY3RUeXBlICE9PSB2b2lkIDAgPyByZWRpcmVjdFR5cGUgOiBudWxsIH0pLCBlcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCwgcmVkaXJlY3RUeXBlOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGxvd3Mgc2lnbmluZyBpbiB3aXRoIGFuIE9JREMgSUQgdG9rZW4uIFRoZSBhdXRoZW50aWNhdGlvbiBwcm92aWRlciB1c2VkXG4gICAgICogc2hvdWxkIGJlIGVuYWJsZWQgYW5kIGNvbmZpZ3VyZWQuXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkluV2l0aElkVG9rZW4oY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgb3B0aW9ucywgcHJvdmlkZXIsIHRva2VuLCBhY2Nlc3NfdG9rZW4sIG5vbmNlIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L3Rva2VuP2dyYW50X3R5cGU9aWRfdG9rZW5gLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgIGlkX3Rva2VuOiB0b2tlbixcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBub25jZSxcbiAgICAgICAgICAgICAgICAgICAgZ290cnVlX21ldGFfc2VjdXJpdHk6IHsgY2FwdGNoYV90b2tlbjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhcHRjaGFUb2tlbiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeGZvcm06IF9zZXNzaW9uUmVzcG9uc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IHJlcztcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWRhdGEgfHwgIWRhdGEuc2Vzc2lvbiB8fCAhZGF0YS51c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBuZXcgQXV0aEludmFsaWRUb2tlblJlc3BvbnNlRXJyb3IoKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEuc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmVTZXNzaW9uKGRhdGEuc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1NJR05FRF9JTicsIGRhdGEuc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhLCBlcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9nIGluIGEgdXNlciB1c2luZyBtYWdpY2xpbmsgb3IgYSBvbmUtdGltZSBwYXNzd29yZCAoT1RQKS5cbiAgICAgKlxuICAgICAqIElmIHRoZSBge3sgLkNvbmZpcm1hdGlvblVSTCB9fWAgdmFyaWFibGUgaXMgc3BlY2lmaWVkIGluIHRoZSBlbWFpbCB0ZW1wbGF0ZSwgYSBtYWdpY2xpbmsgd2lsbCBiZSBzZW50LlxuICAgICAqIElmIHRoZSBge3sgLlRva2VuIH19YCB2YXJpYWJsZSBpcyBzcGVjaWZpZWQgaW4gdGhlIGVtYWlsIHRlbXBsYXRlLCBhbiBPVFAgd2lsbCBiZSBzZW50LlxuICAgICAqIElmIHlvdSdyZSB1c2luZyBwaG9uZSBzaWduLWlucywgb25seSBhbiBPVFAgd2lsbCBiZSBzZW50LiBZb3Ugd29uJ3QgYmUgYWJsZSB0byBzZW5kIGEgbWFnaWNsaW5rIGZvciBwaG9uZSBzaWduLWlucy5cbiAgICAgKlxuICAgICAqIEJlIGF3YXJlIHRoYXQgeW91IG1heSBnZXQgYmFjayBhbiBlcnJvciBtZXNzYWdlIHRoYXQgd2lsbCBub3QgZGlzdGluZ3Vpc2hcbiAgICAgKiBiZXR3ZWVuIHRoZSBjYXNlcyB3aGVyZSB0aGUgYWNjb3VudCBkb2VzIG5vdCBleGlzdCBvciwgdGhhdCB0aGUgYWNjb3VudFxuICAgICAqIGNhbiBvbmx5IGJlIGFjY2Vzc2VkIHZpYSBzb2NpYWwgbG9naW4uXG4gICAgICpcbiAgICAgKiBEbyBub3RlIHRoYXQgeW91IHdpbGwgbmVlZCB0byBjb25maWd1cmUgYSBXaGF0c2FwcCBzZW5kZXIgb24gVHdpbGlvXG4gICAgICogaWYgeW91IGFyZSB1c2luZyBwaG9uZSBzaWduIGluIHdpdGggdGhlICd3aGF0c2FwcCcgY2hhbm5lbC4gVGhlIHdoYXRzYXBwXG4gICAgICogY2hhbm5lbCBpcyBub3Qgc3VwcG9ydGVkIG9uIG90aGVyIHByb3ZpZGVyc1xuICAgICAqIGF0IHRoaXMgdGltZS5cbiAgICAgKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBQS0NFIHdoZW4gYW4gZW1haWwgaXMgcGFzc2VkLlxuICAgICAqL1xuICAgIGFzeW5jIHNpZ25JbldpdGhPdHAoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICgnZW1haWwnIGluIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlbWFpbCwgb3B0aW9ucyB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgICAgICAgICAgbGV0IGNvZGVDaGFsbGVuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBjb2RlQ2hhbGxlbmdlTWV0aG9kID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mbG93VHlwZSA9PT0gJ3BrY2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgW2NvZGVDaGFsbGVuZ2UsIGNvZGVDaGFsbGVuZ2VNZXRob2RdID0gYXdhaXQgZ2V0Q29kZUNoYWxsZW5nZUFuZE1ldGhvZCh0aGlzLnN0b3JhZ2UsIHRoaXMuc3RvcmFnZUtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L290cGAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kYXRhKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZV91c2VyOiAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2hvdWxkQ3JlYXRlVXNlcikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXB0Y2hhVG9rZW4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVfY2hhbGxlbmdlOiBjb2RlQ2hhbGxlbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZV9jaGFsbGVuZ2VfbWV0aG9kOiBjb2RlQ2hhbGxlbmdlTWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZW1haWxSZWRpcmVjdFRvLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdwaG9uZScgaW4gY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHBob25lLCBvcHRpb25zIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9vdHBgLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGhvbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAoX2MgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGF0YSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVfdXNlcjogKF9kID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNob3VsZENyZWF0ZVVzZXIpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBnb3RydWVfbWV0YV9zZWN1cml0eTogeyBjYXB0Y2hhX3Rva2VuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2FwdGNoYVRva2VuIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsOiAoX2UgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2hhbm5lbCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogJ3NtcycsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsLCBtZXNzYWdlSWQ6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5tZXNzYWdlX2lkIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXV0aEludmFsaWRDcmVkZW50aWFsc0Vycm9yKCdZb3UgbXVzdCBwcm92aWRlIGVpdGhlciBhbiBlbWFpbCBvciBwaG9uZSBudW1iZXIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2cgaW4gYSB1c2VyIGdpdmVuIGEgVXNlciBzdXBwbGllZCBPVFAgb3IgVG9rZW5IYXNoIHJlY2VpdmVkIHRocm91Z2ggbW9iaWxlIG9yIGVtYWlsLlxuICAgICAqL1xuICAgIGFzeW5jIHZlcmlmeU90cChwYXJhbXMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCByZWRpcmVjdFRvID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGV0IGNhcHRjaGFUb2tlbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICgnb3B0aW9ucycgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUbyA9IChfYSA9IHBhcmFtcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVkaXJlY3RUbztcbiAgICAgICAgICAgICAgICBjYXB0Y2hhVG9rZW4gPSAoX2IgPSBwYXJhbXMub3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhcHRjaGFUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L3ZlcmlmeWAsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgYm9keTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMpLCB7IGdvdHJ1ZV9tZXRhX3NlY3VyaXR5OiB7IGNhcHRjaGFfdG9rZW46IGNhcHRjaGFUb2tlbiB9IH0pLFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VG8sXG4gICAgICAgICAgICAgICAgeGZvcm06IF9zZXNzaW9uUmVzcG9uc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCBvbiB0b2tlbiB2ZXJpZmljYXRpb24uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzZXNzaW9uID0gZGF0YS5zZXNzaW9uO1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IGRhdGEudXNlcjtcbiAgICAgICAgICAgIGlmIChzZXNzaW9uID09PSBudWxsIHx8IHNlc3Npb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlc3Npb24uYWNjZXNzX3Rva2VuKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2F2ZVNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMocGFyYW1zLnR5cGUgPT0gJ3JlY292ZXJ5JyA/ICdQQVNTV09SRF9SRUNPVkVSWScgOiAnU0lHTkVEX0lOJywgc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXIsIHNlc3Npb24gfSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIGEgc2luZ2xlLXNpZ24gb24gdXNpbmcgYW4gZW50ZXJwcmlzZSBJZGVudGl0eSBQcm92aWRlci4gQVxuICAgICAqIHN1Y2Nlc3NmdWwgU1NPIGF0dGVtcHQgd2lsbCByZWRpcmVjdCB0aGUgY3VycmVudCBwYWdlIHRvIHRoZSBpZGVudGl0eVxuICAgICAqIHByb3ZpZGVyIGF1dGhvcml6YXRpb24gcGFnZS4gVGhlIHJlZGlyZWN0IFVSTCBpcyBpbXBsZW1lbnRhdGlvbiBhbmQgU1NPXG4gICAgICogcHJvdG9jb2wgc3BlY2lmaWMuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIHVzZSBpdCBieSBwcm92aWRpbmcgYSBTU08gZG9tYWluLiBUeXBpY2FsbHkgeW91IGNhbiBleHRyYWN0IHRoaXNcbiAgICAgKiBkb21haW4gYnkgYXNraW5nIHVzZXJzIGZvciB0aGVpciBlbWFpbCBhZGRyZXNzLiBJZiB0aGlzIGRvbWFpbiBpc1xuICAgICAqIHJlZ2lzdGVyZWQgb24gdGhlIEF1dGggaW5zdGFuY2UgdGhlIHJlZGlyZWN0IHdpbGwgdXNlIHRoYXQgb3JnYW5pemF0aW9uJ3NcbiAgICAgKiBjdXJyZW50bHkgYWN0aXZlIFNTTyBJZGVudGl0eSBQcm92aWRlciBmb3IgdGhlIGxvZ2luLlxuICAgICAqXG4gICAgICogSWYgeW91IGhhdmUgYnVpbHQgYW4gb3JnYW5pemF0aW9uLXNwZWNpZmljIGxvZ2luIHBhZ2UsIHlvdSBjYW4gdXNlIHRoZVxuICAgICAqIG9yZ2FuaXphdGlvbidzIFNTTyBJZGVudGl0eSBQcm92aWRlciBVVUlEIGRpcmVjdGx5IGluc3RlYWQuXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkluV2l0aFNTTyhwYXJhbXMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgY29kZUNoYWxsZW5nZSA9IG51bGw7XG4gICAgICAgICAgICBsZXQgY29kZUNoYWxsZW5nZU1ldGhvZCA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5mbG93VHlwZSA9PT0gJ3BrY2UnKSB7XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIFtjb2RlQ2hhbGxlbmdlLCBjb2RlQ2hhbGxlbmdlTWV0aG9kXSA9IGF3YWl0IGdldENvZGVDaGFsbGVuZ2VBbmRNZXRob2QodGhpcy5zdG9yYWdlLCB0aGlzLnN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L3Nzb2AsIHtcbiAgICAgICAgICAgICAgICBib2R5OiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sICgncHJvdmlkZXJJZCcgaW4gcGFyYW1zID8geyBwcm92aWRlcl9pZDogcGFyYW1zLnByb3ZpZGVySWQgfSA6IG51bGwpKSwgKCdkb21haW4nIGluIHBhcmFtcyA/IHsgZG9tYWluOiBwYXJhbXMuZG9tYWluIH0gOiBudWxsKSksIHsgcmVkaXJlY3RfdG86IChfYiA9IChfYSA9IHBhcmFtcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVkaXJlY3RUbykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdW5kZWZpbmVkIH0pLCAoKChfYyA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FwdGNoYVRva2VuKVxuICAgICAgICAgICAgICAgICAgICA/IHsgZ290cnVlX21ldGFfc2VjdXJpdHk6IHsgY2FwdGNoYV90b2tlbjogcGFyYW1zLm9wdGlvbnMuY2FwdGNoYVRva2VuIH0gfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGwpKSwgeyBza2lwX2h0dHBfcmVkaXJlY3Q6IHRydWUsIGNvZGVfY2hhbGxlbmdlOiBjb2RlQ2hhbGxlbmdlLCBjb2RlX2NoYWxsZW5nZV9tZXRob2Q6IGNvZGVDaGFsbGVuZ2VNZXRob2QgfSksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHhmb3JtOiBfc3NvUmVzcG9uc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSByZWF1dGhlbnRpY2F0aW9uIE9UUCB0byB0aGUgdXNlcidzIGVtYWlsIG9yIHBob25lIG51bWJlci5cbiAgICAgKiBSZXF1aXJlcyB0aGUgdXNlciB0byBiZSBzaWduZWQtaW4uXG4gICAgICovXG4gICAgYXN5bmMgcmVhdXRoZW50aWNhdGUoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3JlYXV0aGVudGljYXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBfcmVhdXRoZW50aWNhdGUoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiB7IHNlc3Npb24gfSwgZXJyb3I6IHNlc3Npb25FcnJvciwgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbkVycm9yKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBzZXNzaW9uRXJyb3I7XG4gICAgICAgICAgICAgICAgaWYgKCFzZXNzaW9uKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnR0VUJywgYCR7dGhpcy51cmx9L3JlYXV0aGVudGljYXRlYCwge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGp3dDogc2Vzc2lvbi5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2VuZHMgYW4gZXhpc3Rpbmcgc2lnbnVwIGNvbmZpcm1hdGlvbiBlbWFpbCwgZW1haWwgY2hhbmdlIGVtYWlsLCBTTVMgT1RQIG9yIHBob25lIGNoYW5nZSBPVFAuXG4gICAgICovXG4gICAgYXN5bmMgcmVzZW5kKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBlbmRwb2ludCA9IGAke3RoaXMudXJsfS9yZXNlbmRgO1xuICAgICAgICAgICAgaWYgKCdlbWFpbCcgaW4gY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVtYWlsLCB0eXBlLCBvcHRpb25zIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGVuZHBvaW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ290cnVlX21ldGFfc2VjdXJpdHk6IHsgY2FwdGNoYV90b2tlbjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhcHRjaGFUb2tlbiB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZW1haWxSZWRpcmVjdFRvLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJ3Bob25lJyBpbiBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgcGhvbmUsIHR5cGUsIG9wdGlvbnMgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgZW5kcG9pbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBnb3RydWVfbWV0YV9zZWN1cml0eTogeyBjYXB0Y2hhX3Rva2VuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2FwdGNoYVRva2VuIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsLCBtZXNzYWdlSWQ6IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5tZXNzYWdlX2lkIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXV0aEludmFsaWRDcmVkZW50aWFsc0Vycm9yKCdZb3UgbXVzdCBwcm92aWRlIGVpdGhlciBhbiBlbWFpbCBvciBwaG9uZSBudW1iZXIgYW5kIGEgdHlwZScpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2Vzc2lvbiwgcmVmcmVzaGluZyBpdCBpZiBuZWNlc3NhcnkuXG4gICAgICpcbiAgICAgKiBUaGUgc2Vzc2lvbiByZXR1cm5lZCBjYW4gYmUgbnVsbCBpZiB0aGUgc2Vzc2lvbiBpcyBub3QgZGV0ZWN0ZWQgd2hpY2ggY2FuIGhhcHBlbiBpbiB0aGUgZXZlbnQgYSB1c2VyIGlzIG5vdCBzaWduZWQtaW4gb3IgaGFzIGxvZ2dlZCBvdXQuXG4gICAgICpcbiAgICAgKiAqKklNUE9SVEFOVDoqKiBUaGlzIG1ldGhvZCBsb2FkcyB2YWx1ZXMgZGlyZWN0bHkgZnJvbSB0aGUgc3RvcmFnZSBhdHRhY2hlZFxuICAgICAqIHRvIHRoZSBjbGllbnQuIElmIHRoYXQgc3RvcmFnZSBpcyBiYXNlZCBvbiByZXF1ZXN0IGNvb2tpZXMgZm9yIGV4YW1wbGUsXG4gICAgICogdGhlIHZhbHVlcyBpbiBpdCBtYXkgbm90IGJlIGF1dGhlbnRpYyBhbmQgdGhlcmVmb3JlIGl0J3Mgc3Ryb25nbHkgYWR2aXNlZFxuICAgICAqIGFnYWluc3QgdXNpbmcgdGhpcyBtZXRob2QgYW5kIGl0cyByZXN1bHRzIGluIHN1Y2ggY2lyY3Vtc3RhbmNlcy4gQSB3YXJuaW5nXG4gICAgICogd2lsbCBiZSBlbWl0dGVkIGlmIHRoaXMgaXMgZGV0ZWN0ZWQuIFVzZSB7QGxpbmsgI2dldFVzZXIoKX0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRTZXNzaW9uKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVQcm9taXNlO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZVNlc3Npb24oYXN5bmMgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFjcXVpcmVzIGEgZ2xvYmFsIGxvY2sgYmFzZWQgb24gdGhlIHN0b3JhZ2Uga2V5LlxuICAgICAqL1xuICAgIGFzeW5jIF9hY3F1aXJlTG9jayhhY3F1aXJlVGltZW91dCwgZm4pIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJyNfYWNxdWlyZUxvY2snLCAnYmVnaW4nLCBhY3F1aXJlVGltZW91dCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sb2NrQWNxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gdGhpcy5wZW5kaW5nSW5Mb2NrLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucGVuZGluZ0luTG9ja1t0aGlzLnBlbmRpbmdJbkxvY2subGVuZ3RoIC0gMV1cbiAgICAgICAgICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBsYXN0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgZm4oKTtcbiAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0luTG9jay5wdXNoKChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGp1c3QgY2FyZSBpZiBpdCBmaW5pc2hlZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmxvY2soYGxvY2s6JHt0aGlzLnN0b3JhZ2VLZXl9YCwgYWNxdWlyZVRpbWVvdXQsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19hY3F1aXJlTG9jaycsICdsb2NrIGFjcXVpcmVkIGZvciBzdG9yYWdlIGtleScsIHRoaXMuc3RvcmFnZUtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NrQWNxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdJbkxvY2sucHVzaCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGp1c3QgY2FyZSBpZiBpdCBmaW5pc2hlZFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIGRyYWluaW5nIHRoZSBxdWV1ZSB1bnRpbCB0aGVyZSdzIG5vdGhpbmcgdG8gd2FpdCBvblxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5wZW5kaW5nSW5Mb2NrLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2FpdE9uID0gWy4uLnRoaXMucGVuZGluZ0luTG9ja107XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbCh3YWl0T24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nSW5Mb2NrLnNwbGljZSgwLCB3YWl0T24ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfYWNxdWlyZUxvY2snLCAnbG9jayByZWxlYXNlZCBmb3Igc3RvcmFnZSBrZXknLCB0aGlzLnN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvY2tBY3F1aXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfYWNxdWlyZUxvY2snLCAnZW5kJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVXNlIGluc3RlYWQgb2Yge0BsaW5rICNnZXRTZXNzaW9ufSBpbnNpZGUgdGhlIGxpYnJhcnkuIEl0IGlzXG4gICAgICogc2VtYW50aWNhbGx5IHVzdWFsbHkgd2hhdCB5b3Ugd2FudCwgYXMgZ2V0dGluZyBhIHNlc3Npb24gaW52b2x2ZXMgc29tZVxuICAgICAqIHByb2Nlc3NpbmcgYWZ0ZXJ3YXJkcyB0aGF0IHJlcXVpcmVzIG9ubHkgb25lIGNsaWVudCBvcGVyYXRpbmcgb24gdGhlXG4gICAgICogc2Vzc2lvbiBhdCBvbmNlIGFjcm9zcyBtdWx0aXBsZSB0YWJzIG9yIHByb2Nlc3Nlcy5cbiAgICAgKi9cbiAgICBhc3luYyBfdXNlU2Vzc2lvbihmbikge1xuICAgICAgICB0aGlzLl9kZWJ1ZygnI191c2VTZXNzaW9uJywgJ2JlZ2luJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyB0aGUgdXNlIG9mIF9fbG9hZFNlc3Npb24gaGVyZSBpcyB0aGUgb25seSBjb3JyZWN0IHVzZSBvZiB0aGUgZnVuY3Rpb24hXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9fbG9hZFNlc3Npb24oKTtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBmbihyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfdXNlU2Vzc2lvbicsICdlbmQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBORVZFUiBVU0UgRElSRUNUTFkhXG4gICAgICpcbiAgICAgKiBBbHdheXMgdXNlIHtAbGluayAjX3VzZVNlc3Npb259LlxuICAgICAqL1xuICAgIGFzeW5jIF9fbG9hZFNlc3Npb24oKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnKCcjX19sb2FkU2Vzc2lvbigpJywgJ2JlZ2luJyk7XG4gICAgICAgIGlmICghdGhpcy5sb2NrQWNxdWlyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCcjX19sb2FkU2Vzc2lvbigpJywgJ3VzZWQgb3V0c2lkZSBvZiBhbiBhY3F1aXJlZCBsb2NrIScsIG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRTZXNzaW9uID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IG1heWJlU2Vzc2lvbiA9IGF3YWl0IGdldEl0ZW1Bc3luYyh0aGlzLnN0b3JhZ2UsIHRoaXMuc3RvcmFnZUtleSk7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI2dldFNlc3Npb24oKScsICdzZXNzaW9uIGZyb20gc3RvcmFnZScsIG1heWJlU2Vzc2lvbik7XG4gICAgICAgICAgICBpZiAobWF5YmVTZXNzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzVmFsaWRTZXNzaW9uKG1heWJlU2Vzc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNlc3Npb24gPSBtYXliZVNlc3Npb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI2dldFNlc3Npb24oKScsICdzZXNzaW9uIGZyb20gc3RvcmFnZSBpcyBub3QgdmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcmVtb3ZlU2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY3VycmVudFNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHNlc3Npb246IG51bGwgfSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEEgc2Vzc2lvbiBpcyBjb25zaWRlcmVkIGV4cGlyZWQgYmVmb3JlIHRoZSBhY2Nlc3MgdG9rZW4gX2FjdHVhbGx5X1xuICAgICAgICAgICAgLy8gZXhwaXJlcy4gV2hlbiB0aGUgYXV0b1JlZnJlc2hUb2tlbiBvcHRpb24gaXMgb2ZmIChvciB3aGVuIHRoZSB0YWIgaXNcbiAgICAgICAgICAgIC8vIGluIHRoZSBiYWNrZ3JvdW5kKSwgdmVyeSBlYWdlciB1c2VycyBvZiBnZXRTZXNzaW9uKCkgLS0gbGlrZVxuICAgICAgICAgICAgLy8gcmVhbHRpbWUtanMgLS0gbWlnaHQgc2VuZCBhIHZhbGlkIEpXVCB3aGljaCB3aWxsIGV4cGlyZSBieSB0aGUgdGltZSBpdFxuICAgICAgICAgICAgLy8gcmVhY2hlcyB0aGUgc2VydmVyLlxuICAgICAgICAgICAgY29uc3QgaGFzRXhwaXJlZCA9IGN1cnJlbnRTZXNzaW9uLmV4cGlyZXNfYXRcbiAgICAgICAgICAgICAgICA/IGN1cnJlbnRTZXNzaW9uLmV4cGlyZXNfYXQgKiAxMDAwIC0gRGF0ZS5ub3coKSA8IEVYUElSWV9NQVJHSU5fTVNcbiAgICAgICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfX2xvYWRTZXNzaW9uKCknLCBgc2Vzc2lvbiBoYXMke2hhc0V4cGlyZWQgPyAnJyA6ICcgbm90J30gZXhwaXJlZGAsICdleHBpcmVzX2F0JywgY3VycmVudFNlc3Npb24uZXhwaXJlc19hdCk7XG4gICAgICAgICAgICBpZiAoIWhhc0V4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdG9yYWdlLmlzU2VydmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdXBwcmVzc1dhcm5pbmcgPSB0aGlzLnN1cHByZXNzR2V0U2Vzc2lvbldhcm5pbmc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3h5U2Vzc2lvbiA9IG5ldyBQcm94eShjdXJyZW50U2Vzc2lvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3VwcHJlc3NXYXJuaW5nICYmIHByb3AgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IHNob3cgd2FybmluZyB3aGVuIHRoZSB1c2VyIG9iamVjdCBpcyBiZWluZyBhY2Nlc3NlZCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdVc2luZyB0aGUgdXNlciBvYmplY3QgYXMgcmV0dXJuZWQgZnJvbSBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKSBvciBmcm9tIHNvbWUgc3VwYWJhc2UuYXV0aC5vbkF1dGhTdGF0ZUNoYW5nZSgpIGV2ZW50cyBjb3VsZCBiZSBpbnNlY3VyZSEgVGhpcyB2YWx1ZSBjb21lcyBkaXJlY3RseSBmcm9tIHRoZSBzdG9yYWdlIG1lZGl1bSAodXN1YWxseSBjb29raWVzIG9uIHRoZSBzZXJ2ZXIpIGFuZCBtYXkgbm90IGJlIGF1dGhlbnRpYy4gVXNlIHN1cGFiYXNlLmF1dGguZ2V0VXNlcigpIGluc3RlYWQgd2hpY2ggYXV0aGVudGljYXRlcyB0aGUgZGF0YSBieSBjb250YWN0aW5nIHRoZSBTdXBhYmFzZSBBdXRoIHNlcnZlci4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcHJlc3NXYXJuaW5nID0gdHJ1ZTsgLy8ga2VlcHMgdGhpcyBwcm94eSBpbnN0YW5jZSBmcm9tIGxvZ2dpbmcgYWRkaXRpb25hbCB3YXJuaW5nc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1cHByZXNzR2V0U2Vzc2lvbldhcm5pbmcgPSB0cnVlOyAvLyBrZWVwcyB0aGlzIGNsaWVudCdzIGZ1dHVyZSBwcm94eSBpbnN0YW5jZXMgZnJvbSB3YXJuaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2Vzc2lvbiA9IHByb3h5U2Vzc2lvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBzZXNzaW9uOiBjdXJyZW50U2Vzc2lvbiB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBzZXNzaW9uLCBlcnJvciB9ID0gYXdhaXQgdGhpcy5fY2FsbFJlZnJlc2hUb2tlbihjdXJyZW50U2Vzc2lvbi5yZWZyZXNoX3Rva2VuKTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgc2Vzc2lvbjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBzZXNzaW9uIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19fbG9hZFNlc3Npb24oKScsICdlbmQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHVzZXIgZGV0YWlscyBpZiB0aGVyZSBpcyBhbiBleGlzdGluZyBzZXNzaW9uLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgbmV0d29yayByZXF1ZXN0IHRvIHRoZSBTdXBhYmFzZSBBdXRoIHNlcnZlciwgc28gdGhlIHJldHVybmVkXG4gICAgICogdmFsdWUgaXMgYXV0aGVudGljIGFuZCBjYW4gYmUgdXNlZCB0byBiYXNlIGF1dGhvcml6YXRpb24gcnVsZXMgb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gand0IFRha2VzIGluIGFuIG9wdGlvbmFsIGFjY2VzcyB0b2tlbiBKV1QuIElmIG5vIEpXVCBpcyBwcm92aWRlZCwgdGhlIEpXVCBmcm9tIHRoZSBjdXJyZW50IHNlc3Npb24gaXMgdXNlZC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRVc2VyKGp3dCkge1xuICAgICAgICBpZiAoand0KSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZ2V0VXNlcihqd3QpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2FjcXVpcmVMb2NrKC0xLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZ2V0VXNlcigpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgX2dldFVzZXIoand0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoand0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdHRVQnLCBgJHt0aGlzLnVybH0vdXNlcmAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBqd3Q6IGp3dCxcbiAgICAgICAgICAgICAgICAgICAgeGZvcm06IF91c2VyUmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJucyBhbiBlcnJvciBpZiB0aGVyZSBpcyBubyBhY2Nlc3NfdG9rZW4gb3IgY3VzdG9tIGF1dGhvcml6YXRpb24gaGVhZGVyXG4gICAgICAgICAgICAgICAgaWYgKCEoKF9hID0gZGF0YS5zZXNzaW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWNjZXNzX3Rva2VuKSAmJiAhdGhpcy5oYXNDdXN0b21BdXRob3JpemF0aW9uSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCB9LCBlcnJvcjogbmV3IEF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yKCkgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdHRVQnLCBgJHt0aGlzLnVybH0vdXNlcmAsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBqd3Q6IChfYyA9IChfYiA9IGRhdGEuc2Vzc2lvbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmFjY2Vzc190b2tlbikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB4Zm9ybTogX3VzZXJSZXNwb25zZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc0F1dGhTZXNzaW9uTWlzc2luZ0Vycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBKV1QgY29udGFpbnMgYSBgc2Vzc2lvbl9pZGAgd2hpY2ggZG9lcyBub3QgY29ycmVzcG9uZCB0byBhbiBhY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgLy8gc2Vzc2lvbiBpbiB0aGUgZGF0YWJhc2UsIGluZGljYXRpbmcgdGhlIHVzZXIgaXMgc2lnbmVkIG91dC5cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcmVtb3ZlU2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCByZW1vdmVJdGVtQXN5bmModGhpcy5zdG9yYWdlLCBgJHt0aGlzLnN0b3JhZ2VLZXl9LWNvZGUtdmVyaWZpZXJgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHVzZXIgZGF0YSBmb3IgYSBsb2dnZWQgaW4gdXNlci5cbiAgICAgKi9cbiAgICBhc3luYyB1cGRhdGVVc2VyKGF0dHJpYnV0ZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVQcm9taXNlO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl91cGRhdGVVc2VyKGF0dHJpYnV0ZXMsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX3VwZGF0ZVVzZXIoYXR0cmlidXRlcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSwgZXJyb3I6IHNlc3Npb25FcnJvciB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgc2Vzc2lvbkVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb25EYXRhLnNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBzZXNzaW9uRGF0YS5zZXNzaW9uO1xuICAgICAgICAgICAgICAgIGxldCBjb2RlQ2hhbGxlbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsZXQgY29kZUNoYWxsZW5nZU1ldGhvZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmxvd1R5cGUgPT09ICdwa2NlJyAmJiBhdHRyaWJ1dGVzLmVtYWlsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICBbY29kZUNoYWxsZW5nZSwgY29kZUNoYWxsZW5nZU1ldGhvZF0gPSBhd2FpdCBnZXRDb2RlQ2hhbGxlbmdlQW5kTWV0aG9kKHRoaXMuc3RvcmFnZSwgdGhpcy5zdG9yYWdlS2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvcjogdXNlckVycm9yIH0gPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUFVUJywgYCR7dGhpcy51cmx9L3VzZXJgLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmVtYWlsUmVkaXJlY3RUbyxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhdHRyaWJ1dGVzKSwgeyBjb2RlX2NoYWxsZW5nZTogY29kZUNoYWxsZW5nZSwgY29kZV9jaGFsbGVuZ2VfbWV0aG9kOiBjb2RlQ2hhbGxlbmdlTWV0aG9kIH0pLFxuICAgICAgICAgICAgICAgICAgICBqd3Q6IHNlc3Npb24uYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICB4Zm9ybTogX3VzZXJSZXNwb25zZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodXNlckVycm9yKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyB1c2VyRXJyb3I7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi51c2VyID0gZGF0YS51c2VyO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmVTZXNzaW9uKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25vdGlmeUFsbFN1YnNjcmliZXJzKCdVU0VSX1VQREFURUQnLCBzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IHNlc3Npb24udXNlciB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzZXNzaW9uIGRhdGEgZnJvbSB0aGUgY3VycmVudCBzZXNzaW9uLiBJZiB0aGUgY3VycmVudCBzZXNzaW9uIGlzIGV4cGlyZWQsIHNldFNlc3Npb24gd2lsbCB0YWtlIGNhcmUgb2YgcmVmcmVzaGluZyBpdCB0byBvYnRhaW4gYSBuZXcgc2Vzc2lvbi5cbiAgICAgKiBJZiB0aGUgcmVmcmVzaCB0b2tlbiBvciBhY2Nlc3MgdG9rZW4gaW4gdGhlIGN1cnJlbnQgc2Vzc2lvbiBpcyBpbnZhbGlkLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgKiBAcGFyYW0gY3VycmVudFNlc3Npb24gVGhlIGN1cnJlbnQgc2Vzc2lvbiB0aGF0IG1pbmltYWxseSBjb250YWlucyBhbiBhY2Nlc3MgdG9rZW4gYW5kIHJlZnJlc2ggdG9rZW4uXG4gICAgICovXG4gICAgYXN5bmMgc2V0U2Vzc2lvbihjdXJyZW50U2Vzc2lvbikge1xuICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVQcm9taXNlO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9zZXRTZXNzaW9uKGN1cnJlbnRTZXNzaW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIF9zZXRTZXNzaW9uKGN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRTZXNzaW9uLmFjY2Vzc190b2tlbiB8fCAhY3VycmVudFNlc3Npb24ucmVmcmVzaF90b2tlbikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBdXRoU2Vzc2lvbk1pc3NpbmdFcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGltZU5vdyA9IERhdGUubm93KCkgLyAxMDAwO1xuICAgICAgICAgICAgbGV0IGV4cGlyZXNBdCA9IHRpbWVOb3c7XG4gICAgICAgICAgICBsZXQgaGFzRXhwaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBsZXQgc2Vzc2lvbiA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCB7IHBheWxvYWQgfSA9IGRlY29kZUpXVChjdXJyZW50U2Vzc2lvbi5hY2Nlc3NfdG9rZW4pO1xuICAgICAgICAgICAgaWYgKHBheWxvYWQuZXhwKSB7XG4gICAgICAgICAgICAgICAgZXhwaXJlc0F0ID0gcGF5bG9hZC5leHA7XG4gICAgICAgICAgICAgICAgaGFzRXhwaXJlZCA9IGV4cGlyZXNBdCA8PSB0aW1lTm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0V4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNlc3Npb246IHJlZnJlc2hlZFNlc3Npb24sIGVycm9yIH0gPSBhd2FpdCB0aGlzLl9jYWxsUmVmcmVzaFRva2VuKGN1cnJlbnRTZXNzaW9uLnJlZnJlc2hfdG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3I6IGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVmcmVzaGVkU2Vzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IG51bGwsIHNlc3Npb246IG51bGwgfSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2Vzc2lvbiA9IHJlZnJlc2hlZFNlc3Npb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCB0aGlzLl9nZXRVc2VyKGN1cnJlbnRTZXNzaW9uLmFjY2Vzc190b2tlbik7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXNzaW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW46IGN1cnJlbnRTZXNzaW9uLmFjY2Vzc190b2tlbixcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaF90b2tlbjogY3VycmVudFNlc3Npb24ucmVmcmVzaF90b2tlbixcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogZGF0YS51c2VyLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbl90eXBlOiAnYmVhcmVyJyxcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJlc19pbjogZXhwaXJlc0F0IC0gdGltZU5vdyxcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJlc19hdDogZXhwaXJlc0F0LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2F2ZVNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1NJR05FRF9JTicsIHNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBzZXNzaW9uLnVzZXIsIHNlc3Npb24gfSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHNlc3Npb246IG51bGwsIHVzZXI6IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgc2Vzc2lvbiwgcmVnYXJkbGVzcyBvZiBleHBpcnkgc3RhdHVzLlxuICAgICAqIFRha2VzIGluIGFuIG9wdGlvbmFsIGN1cnJlbnQgc2Vzc2lvbi4gSWYgbm90IHBhc3NlZCBpbiwgdGhlbiByZWZyZXNoU2Vzc2lvbigpIHdpbGwgYXR0ZW1wdCB0byByZXRyaWV2ZSBpdCBmcm9tIGdldFNlc3Npb24oKS5cbiAgICAgKiBJZiB0aGUgY3VycmVudCBzZXNzaW9uJ3MgcmVmcmVzaCB0b2tlbiBpcyBpbnZhbGlkLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgKiBAcGFyYW0gY3VycmVudFNlc3Npb24gVGhlIGN1cnJlbnQgc2Vzc2lvbi4gSWYgcGFzc2VkIGluLCBpdCBtdXN0IGNvbnRhaW4gYSByZWZyZXNoIHRva2VuLlxuICAgICAqL1xuICAgIGFzeW5jIHJlZnJlc2hTZXNzaW9uKGN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hY3F1aXJlTG9jaygtMSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3JlZnJlc2hTZXNzaW9uKGN1cnJlbnRTZXNzaW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIF9yZWZyZXNoU2Vzc2lvbihjdXJyZW50U2Vzc2lvbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3VzZVNlc3Npb24oYXN5bmMgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRTZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2Vzc2lvbiA9IChfYSA9IGRhdGEuc2Vzc2lvbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIShjdXJyZW50U2Vzc2lvbiA9PT0gbnVsbCB8fCBjdXJyZW50U2Vzc2lvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudFNlc3Npb24ucmVmcmVzaF90b2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgc2Vzc2lvbiwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuX2NhbGxSZWZyZXNoVG9rZW4oY3VycmVudFNlc3Npb24ucmVmcmVzaF90b2tlbik7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvcjogZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgdXNlcjogbnVsbCwgc2Vzc2lvbjogbnVsbCB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiB7IHVzZXI6IHNlc3Npb24udXNlciwgc2Vzc2lvbiB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyB1c2VyOiBudWxsLCBzZXNzaW9uOiBudWxsIH0sIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzZXNzaW9uIGRhdGEgZnJvbSBhIFVSTCBzdHJpbmdcbiAgICAgKi9cbiAgICBhc3luYyBfZ2V0U2Vzc2lvbkZyb21VUkwocGFyYW1zLCBjYWxsYmFja1VybFR5cGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghaXNCcm93c2VyKCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvcignTm8gYnJvd3NlciBkZXRlY3RlZC4nKTtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYW4gZXJyb3IgaW4gdGhlIFVSTCwgaXQgZG9lc24ndCBtYXR0ZXIgd2hhdCBmbG93IGl0IGlzLCB3ZSBqdXN0IHJldHVybiB0aGUgZXJyb3IuXG4gICAgICAgICAgICBpZiAocGFyYW1zLmVycm9yIHx8IHBhcmFtcy5lcnJvcl9kZXNjcmlwdGlvbiB8fCBwYXJhbXMuZXJyb3JfY29kZSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBlcnJvciBjbGFzcyByZXR1cm5lZCBpbXBsaWVzIHRoYXQgdGhlIHJlZGlyZWN0IGlzIGZyb20gYW4gaW1wbGljaXQgZ3JhbnQgZmxvd1xuICAgICAgICAgICAgICAgIC8vIGJ1dCBpdCBjb3VsZCBhbHNvIGJlIGZyb20gYSByZWRpcmVjdCBlcnJvciBmcm9tIGEgUEtDRSBmbG93LlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3IocGFyYW1zLmVycm9yX2Rlc2NyaXB0aW9uIHx8ICdFcnJvciBpbiBVUkwgd2l0aCB1bnNwZWNpZmllZCBlcnJvcl9kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHBhcmFtcy5lcnJvciB8fCAndW5zcGVjaWZpZWRfZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBwYXJhbXMuZXJyb3JfY29kZSB8fCAndW5zcGVjaWZpZWRfY29kZScsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVja3MgZm9yIG1pc21hdGNoZXMgYmV0d2VlbiB0aGUgZmxvd1R5cGUgaW5pdGlhbGlzZWQgaW4gdGhlIGNsaWVudCBhbmQgdGhlIFVSTCBwYXJhbWV0ZXJzXG4gICAgICAgICAgICBzd2l0Y2ggKGNhbGxiYWNrVXJsVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ltcGxpY2l0JzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmxvd1R5cGUgPT09ICdwa2NlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhQS0NFR3JhbnRDb2RlRXhjaGFuZ2VFcnJvcignTm90IGEgdmFsaWQgUEtDRSBmbG93IHVybC4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwa2NlJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmxvd1R5cGUgPT09ICdpbXBsaWNpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBdXRoSW1wbGljaXRHcmFudFJlZGlyZWN0RXJyb3IoJ05vdCBhIHZhbGlkIGltcGxpY2l0IGdyYW50IGZsb3cgdXJsLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gdGhlcmUncyBubyBtaXNtYXRjaCBzbyB3ZSBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyBhIHJlZGlyZWN0IGZvciBQS0NFLCB3ZSBhdHRlbXB0IHRvIHJldHJpZXZlIHRoZSBjb2RlIGZyb20gdGhlIFVSTCBmb3IgdGhlIGNvZGUgZXhjaGFuZ2VcbiAgICAgICAgICAgIGlmIChjYWxsYmFja1VybFR5cGUgPT09ICdwa2NlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKCcjX2luaXRpYWxpemUoKScsICdiZWdpbicsICdpcyBQS0NFIGZsb3cnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcmFtcy5jb2RlKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aFBLQ0VHcmFudENvZGVFeGNoYW5nZUVycm9yKCdObyBjb2RlIGRldGVjdGVkLicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuX2V4Y2hhbmdlQ29kZUZvclNlc3Npb24ocGFyYW1zLmNvZGUpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5kZWxldGUoJ2NvZGUnKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUod2luZG93Lmhpc3Rvcnkuc3RhdGUsICcnLCB1cmwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBzZXNzaW9uOiBkYXRhLnNlc3Npb24sIHJlZGlyZWN0VHlwZTogbnVsbCB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBwcm92aWRlcl90b2tlbiwgcHJvdmlkZXJfcmVmcmVzaF90b2tlbiwgYWNjZXNzX3Rva2VuLCByZWZyZXNoX3Rva2VuLCBleHBpcmVzX2luLCBleHBpcmVzX2F0LCB0b2tlbl90eXBlLCB9ID0gcGFyYW1zO1xuICAgICAgICAgICAgaWYgKCFhY2Nlc3NfdG9rZW4gfHwgIWV4cGlyZXNfaW4gfHwgIXJlZnJlc2hfdG9rZW4gfHwgIXRva2VuX3R5cGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aEltcGxpY2l0R3JhbnRSZWRpcmVjdEVycm9yKCdObyBzZXNzaW9uIGRlZmluZWQgaW4gVVJMJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0aW1lTm93ID0gTWF0aC5yb3VuZChEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICAgICAgICBjb25zdCBleHBpcmVzSW4gPSBwYXJzZUludChleHBpcmVzX2luKTtcbiAgICAgICAgICAgIGxldCBleHBpcmVzQXQgPSB0aW1lTm93ICsgZXhwaXJlc0luO1xuICAgICAgICAgICAgaWYgKGV4cGlyZXNfYXQpIHtcbiAgICAgICAgICAgICAgICBleHBpcmVzQXQgPSBwYXJzZUludChleHBpcmVzX2F0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbGx5RXhwaXJlc0luID0gZXhwaXJlc0F0IC0gdGltZU5vdztcbiAgICAgICAgICAgIGlmIChhY3R1YWxseUV4cGlyZXNJbiAqIDEwMDAgPD0gQVVUT19SRUZSRVNIX1RJQ0tfRFVSQVRJT05fTVMpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEBzdXBhYmFzZS9nb3RydWUtanM6IFNlc3Npb24gYXMgcmV0cmlldmVkIGZyb20gVVJMIGV4cGlyZXMgaW4gJHthY3R1YWxseUV4cGlyZXNJbn1zLCBzaG91bGQgaGF2ZSBiZWVuIGNsb3NlciB0byAke2V4cGlyZXNJbn1zYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc3N1ZWRBdCA9IGV4cGlyZXNBdCAtIGV4cGlyZXNJbjtcbiAgICAgICAgICAgIGlmICh0aW1lTm93IC0gaXNzdWVkQXQgPj0gMTIwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdAc3VwYWJhc2UvZ290cnVlLWpzOiBTZXNzaW9uIGFzIHJldHJpZXZlZCBmcm9tIFVSTCB3YXMgaXNzdWVkIG92ZXIgMTIwcyBhZ28sIFVSTCBjb3VsZCBiZSBzdGFsZScsIGlzc3VlZEF0LCBleHBpcmVzQXQsIHRpbWVOb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGltZU5vdyAtIGlzc3VlZEF0IDwgMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQHN1cGFiYXNlL2dvdHJ1ZS1qczogU2Vzc2lvbiBhcyByZXRyaWV2ZWQgZnJvbSBVUkwgd2FzIGlzc3VlZCBpbiB0aGUgZnV0dXJlPyBDaGVjayB0aGUgZGV2aWNlIGNsb2NrIGZvciBza2V3JywgaXNzdWVkQXQsIGV4cGlyZXNBdCwgdGltZU5vdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCB0aGlzLl9nZXRVc2VyKGFjY2Vzc190b2tlbik7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICBjb25zdCBzZXNzaW9uID0ge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyX3Rva2VuLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyX3JlZnJlc2hfdG9rZW4sXG4gICAgICAgICAgICAgICAgYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgICAgIGV4cGlyZXNfaW46IGV4cGlyZXNJbixcbiAgICAgICAgICAgICAgICBleHBpcmVzX2F0OiBleHBpcmVzQXQsXG4gICAgICAgICAgICAgICAgcmVmcmVzaF90b2tlbixcbiAgICAgICAgICAgICAgICB0b2tlbl90eXBlLFxuICAgICAgICAgICAgICAgIHVzZXI6IGRhdGEudXNlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBSZW1vdmUgdG9rZW5zIGZyb20gVVJMXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfZ2V0U2Vzc2lvbkZyb21VUkwoKScsICdjbGVhcmluZyB3aW5kb3cubG9jYXRpb24uaGFzaCcpO1xuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBzZXNzaW9uLCByZWRpcmVjdFR5cGU6IHBhcmFtcy50eXBlIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBzZXNzaW9uOiBudWxsLCByZWRpcmVjdFR5cGU6IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY3VycmVudCBVUkwgY29udGFpbnMgcGFyYW1ldGVycyBnaXZlbiBieSBhbiBpbXBsaWNpdCBvYXV0aCBncmFudCBmbG93IChodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNjc0OS5odG1sI3NlY3Rpb24tNC4yKVxuICAgICAqL1xuICAgIF9pc0ltcGxpY2l0R3JhbnRDYWxsYmFjayhwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4ocGFyYW1zLmFjY2Vzc190b2tlbiB8fCBwYXJhbXMuZXJyb3JfZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGN1cnJlbnQgVVJMIGFuZCBiYWNraW5nIHN0b3JhZ2UgY29udGFpbiBwYXJhbWV0ZXJzIGdpdmVuIGJ5IGEgUEtDRSBmbG93XG4gICAgICovXG4gICAgYXN5bmMgX2lzUEtDRUNhbGxiYWNrKHBhcmFtcykge1xuICAgICAgICBjb25zdCBjdXJyZW50U3RvcmFnZUNvbnRlbnQgPSBhd2FpdCBnZXRJdGVtQXN5bmModGhpcy5zdG9yYWdlLCBgJHt0aGlzLnN0b3JhZ2VLZXl9LWNvZGUtdmVyaWZpZXJgKTtcbiAgICAgICAgcmV0dXJuICEhKHBhcmFtcy5jb2RlICYmIGN1cnJlbnRTdG9yYWdlQ29udGVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2lkZSBhIGJyb3dzZXIgY29udGV4dCwgYHNpZ25PdXQoKWAgd2lsbCByZW1vdmUgdGhlIGxvZ2dlZCBpbiB1c2VyIGZyb20gdGhlIGJyb3dzZXIgc2Vzc2lvbiBhbmQgbG9nIHRoZW0gb3V0IC0gcmVtb3ZpbmcgYWxsIGl0ZW1zIGZyb20gbG9jYWxzdG9yYWdlIGFuZCB0aGVuIHRyaWdnZXIgYSBgXCJTSUdORURfT1VUXCJgIGV2ZW50LlxuICAgICAqXG4gICAgICogRm9yIHNlcnZlci1zaWRlIG1hbmFnZW1lbnQsIHlvdSBjYW4gcmV2b2tlIGFsbCByZWZyZXNoIHRva2VucyBmb3IgYSB1c2VyIGJ5IHBhc3NpbmcgYSB1c2VyJ3MgSldUIHRocm91Z2ggdG8gYGF1dGguYXBpLnNpZ25PdXQoSldUOiBzdHJpbmcpYC5cbiAgICAgKiBUaGVyZSBpcyBubyB3YXkgdG8gcmV2b2tlIGEgdXNlcidzIGFjY2VzcyB0b2tlbiBqd3QgdW50aWwgaXQgZXhwaXJlcy4gSXQgaXMgcmVjb21tZW5kZWQgdG8gc2V0IGEgc2hvcnRlciBleHBpcnkgb24gdGhlIGp3dCBmb3IgdGhpcyByZWFzb24uXG4gICAgICpcbiAgICAgKiBJZiB1c2luZyBgb3RoZXJzYCBzY29wZSwgbm8gYFNJR05FRF9PVVRgIGV2ZW50IGlzIGZpcmVkIVxuICAgICAqL1xuICAgIGFzeW5jIHNpZ25PdXQob3B0aW9ucyA9IHsgc2NvcGU6ICdnbG9iYWwnIH0pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUHJvbWlzZTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2FjcXVpcmVMb2NrKC0xLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fc2lnbk91dChvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIF9zaWduT3V0KHsgc2NvcGUgfSA9IHsgc2NvcGU6ICdnbG9iYWwnIH0pIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3VzZVNlc3Npb24oYXN5bmMgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvcjogc2Vzc2lvbkVycm9yIH0gPSByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoc2Vzc2lvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IHNlc3Npb25FcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSAoX2EgPSBkYXRhLnNlc3Npb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCB0aGlzLmFkbWluLnNpZ25PdXQoYWNjZXNzVG9rZW4sIHNjb3BlKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIDQwNHMgc2luY2UgdXNlciBtaWdodCBub3QgZXhpc3QgYW55bW9yZVxuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgNDAxcyBzaW5jZSBhbiBpbnZhbGlkIG9yIGV4cGlyZWQgSldUIHNob3VsZCBzaWduIG91dCB0aGUgY3VycmVudCBzZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGlzQXV0aEFwaUVycm9yKGVycm9yKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGVycm9yLnN0YXR1cyA9PT0gNDA0IHx8IGVycm9yLnN0YXR1cyA9PT0gNDAxIHx8IGVycm9yLnN0YXR1cyA9PT0gNDAzKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGVycm9yIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NvcGUgIT09ICdvdGhlcnMnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcmVtb3ZlU2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHJlbW92ZUl0ZW1Bc3luYyh0aGlzLnN0b3JhZ2UsIGAke3RoaXMuc3RvcmFnZUtleX0tY29kZS12ZXJpZmllcmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlY2VpdmUgYSBub3RpZmljYXRpb24gZXZlcnkgdGltZSBhbiBhdXRoIGV2ZW50IGhhcHBlbnMuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB3aGVuIGFuIGF1dGggZXZlbnQgaGFwcGVucy5cbiAgICAgKi9cbiAgICBvbkF1dGhTdGF0ZUNoYW5nZShjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBpZCA9IHV1aWQoKTtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0ge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJyN1bnN1YnNjcmliZSgpJywgJ3N0YXRlIGNoYW5nZSBjYWxsYmFjayB3aXRoIGlkIHJlbW92ZWQnLCBpZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUNoYW5nZUVtaXR0ZXJzLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9kZWJ1ZygnI29uQXV0aFN0YXRlQ2hhbmdlKCknLCAncmVnaXN0ZXJlZCBjYWxsYmFjayB3aXRoIGlkJywgaWQpO1xuICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlRW1pdHRlcnMuc2V0KGlkLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUHJvbWlzZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2FjcXVpcmVMb2NrKC0xLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEluaXRpYWxTZXNzaW9uKGlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSgpO1xuICAgICAgICByZXR1cm4geyBkYXRhOiB7IHN1YnNjcmlwdGlvbiB9IH07XG4gICAgfVxuICAgIGFzeW5jIF9lbWl0SW5pdGlhbFNlc3Npb24oaWQpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3VzZVNlc3Npb24oYXN5bmMgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiB7IHNlc3Npb24gfSwgZXJyb3IsIH0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICBhd2FpdCAoKF9hID0gdGhpcy5zdGF0ZUNoYW5nZUVtaXR0ZXJzLmdldChpZCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsYmFjaygnSU5JVElBTF9TRVNTSU9OJywgc2Vzc2lvbikpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKCdJTklUSUFMX1NFU1NJT04nLCAnY2FsbGJhY2sgaWQnLCBpZCwgJ3Nlc3Npb24nLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCAoKF9iID0gdGhpcy5zdGF0ZUNoYW5nZUVtaXR0ZXJzLmdldChpZCkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsYmFjaygnSU5JVElBTF9TRVNTSU9OJywgbnVsbCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKCdJTklUSUFMX1NFU1NJT04nLCAnY2FsbGJhY2sgaWQnLCBpZCwgJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHBhc3N3b3JkIHJlc2V0IHJlcXVlc3QgdG8gYW4gZW1haWwgYWRkcmVzcy4gVGhpcyBtZXRob2Qgc3VwcG9ydHMgdGhlIFBLQ0UgZmxvdy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbWFpbCBUaGUgZW1haWwgYWRkcmVzcyBvZiB0aGUgdXNlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZWRpcmVjdFRvIFRoZSBVUkwgdG8gc2VuZCB0aGUgdXNlciB0byBhZnRlciB0aGV5IGNsaWNrIHRoZSBwYXNzd29yZCByZXNldCBsaW5rLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmNhcHRjaGFUb2tlbiBWZXJpZmljYXRpb24gdG9rZW4gcmVjZWl2ZWQgd2hlbiB0aGUgdXNlciBjb21wbGV0ZXMgdGhlIGNhcHRjaGEgb24gdGhlIHNpdGUuXG4gICAgICovXG4gICAgYXN5bmMgcmVzZXRQYXNzd29yZEZvckVtYWlsKGVtYWlsLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgbGV0IGNvZGVDaGFsbGVuZ2UgPSBudWxsO1xuICAgICAgICBsZXQgY29kZUNoYWxsZW5nZU1ldGhvZCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmZsb3dUeXBlID09PSAncGtjZScpIHtcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIFtjb2RlQ2hhbGxlbmdlLCBjb2RlQ2hhbGxlbmdlTWV0aG9kXSA9IGF3YWl0IGdldENvZGVDaGFsbGVuZ2VBbmRNZXRob2QodGhpcy5zdG9yYWdlLCB0aGlzLnN0b3JhZ2VLZXksIHRydWUgLy8gaXNQYXNzd29yZFJlY292ZXJ5XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ1BPU1QnLCBgJHt0aGlzLnVybH0vcmVjb3ZlcmAsIHtcbiAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgICAgICAgICBjb2RlX2NoYWxsZW5nZTogY29kZUNoYWxsZW5nZSxcbiAgICAgICAgICAgICAgICAgICAgY29kZV9jaGFsbGVuZ2VfbWV0aG9kOiBjb2RlQ2hhbGxlbmdlTWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBnb3RydWVfbWV0YV9zZWN1cml0eTogeyBjYXB0Y2hhX3Rva2VuOiBvcHRpb25zLmNhcHRjaGFUb2tlbiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86IG9wdGlvbnMucmVkaXJlY3RUbyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCB0aGUgaWRlbnRpdGllcyBsaW5rZWQgdG8gYSB1c2VyLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFVzZXJJZGVudGl0aWVzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCB0aGlzLmdldFVzZXIoKTtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgaWRlbnRpdGllczogKF9hID0gZGF0YS51c2VyLmlkZW50aXRpZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdIH0sIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbmtzIGFuIG9hdXRoIGlkZW50aXR5IHRvIGFuIGV4aXN0aW5nIHVzZXIuXG4gICAgICogVGhpcyBtZXRob2Qgc3VwcG9ydHMgdGhlIFBLQ0UgZmxvdy5cbiAgICAgKi9cbiAgICBhc3luYyBsaW5rSWRlbnRpdHkoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBhd2FpdCB0aGlzLl9nZXRVcmxGb3JQcm92aWRlcihgJHt0aGlzLnVybH0vdXNlci9pZGVudGl0aWVzL2F1dGhvcml6ZWAsIGNyZWRlbnRpYWxzLnByb3ZpZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86IChfYSA9IGNyZWRlbnRpYWxzLm9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZWRpcmVjdFRvLFxuICAgICAgICAgICAgICAgICAgICBzY29wZXM6IChfYiA9IGNyZWRlbnRpYWxzLm9wdGlvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zY29wZXMsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zOiAoX2MgPSBjcmVkZW50aWFscy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucXVlcnlQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIHNraXBCcm93c2VyUmVkaXJlY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdHRVQnLCB1cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBqd3Q6IChfZSA9IChfZCA9IGRhdGEuc2Vzc2lvbikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmFjY2Vzc190b2tlbikgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICBpZiAoaXNCcm93c2VyKCkgJiYgISgoX2EgPSBjcmVkZW50aWFscy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2tpcEJyb3dzZXJSZWRpcmVjdCkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS51cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBwcm92aWRlcjogY3JlZGVudGlhbHMucHJvdmlkZXIsIHVybDogZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnVybCB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgcHJvdmlkZXI6IGNyZWRlbnRpYWxzLnByb3ZpZGVyLCB1cmw6IG51bGwgfSwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVubGlua3MgYW4gaWRlbnRpdHkgZnJvbSBhIHVzZXIgYnkgZGVsZXRpbmcgaXQuIFRoZSB1c2VyIHdpbGwgbm8gbG9uZ2VyIGJlIGFibGUgdG8gc2lnbiBpbiB3aXRoIHRoYXQgaWRlbnRpdHkgb25jZSBpdCdzIHVubGlua2VkLlxuICAgICAqL1xuICAgIGFzeW5jIHVubGlua0lkZW50aXR5KGlkZW50aXR5KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0RFTEVURScsIGAke3RoaXMudXJsfS91c2VyL2lkZW50aXRpZXMvJHtpZGVudGl0eS5pZGVudGl0eV9pZH1gLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgand0OiAoX2IgPSAoX2EgPSBkYXRhLnNlc3Npb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hY2Nlc3NfdG9rZW4pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBuZXcgSldULlxuICAgICAqIEBwYXJhbSByZWZyZXNoVG9rZW4gQSB2YWxpZCByZWZyZXNoIHRva2VuIHRoYXQgd2FzIHJldHVybmVkIG9uIGxvZ2luLlxuICAgICAqL1xuICAgIGFzeW5jIF9yZWZyZXNoQWNjZXNzVG9rZW4ocmVmcmVzaFRva2VuKSB7XG4gICAgICAgIGNvbnN0IGRlYnVnTmFtZSA9IGAjX3JlZnJlc2hBY2Nlc3NUb2tlbigke3JlZnJlc2hUb2tlbi5zdWJzdHJpbmcoMCwgNSl9Li4uKWA7XG4gICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ2JlZ2luJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydGVkQXQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgLy8gd2lsbCBhdHRlbXB0IHRvIHJlZnJlc2ggdGhlIHRva2VuIHdpdGggZXhwb25lbnRpYWwgYmFja29mZlxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJldHJ5YWJsZShhc3luYyAoYXR0ZW1wdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhdHRlbXB0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcCgyMDAgKiBNYXRoLnBvdygyLCBhdHRlbXB0IC0gMSkpOyAvLyAyMDAsIDQwMCwgODAwLCAuLi5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoZGVidWdOYW1lLCAncmVmcmVzaGluZyBhdHRlbXB0JywgYXR0ZW1wdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L3Rva2VuP2dyYW50X3R5cGU9cmVmcmVzaF90b2tlbmAsIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keTogeyByZWZyZXNoX3Rva2VuOiByZWZyZXNoVG9rZW4gfSxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICB4Zm9ybTogX3Nlc3Npb25SZXNwb25zZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIChhdHRlbXB0LCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRCYWNrT2ZmSW50ZXJ2YWwgPSAyMDAgKiBNYXRoLnBvdygyLCBhdHRlbXB0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGVycm9yICYmXG4gICAgICAgICAgICAgICAgICAgIGlzQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IoZXJyb3IpICYmXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHJ5YWJsZSBvbmx5IGlmIHRoZSByZXF1ZXN0IGNhbiBiZSBzZW50IGJlZm9yZSB0aGUgYmFja29mZiBvdmVyZmxvd3MgdGhlIHRpY2sgZHVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgRGF0ZS5ub3coKSArIG5leHRCYWNrT2ZmSW50ZXJ2YWwgLSBzdGFydGVkQXQgPCBBVVRPX1JFRlJFU0hfVElDS19EVVJBVElPTl9NUyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IHsgc2Vzc2lvbjogbnVsbCwgdXNlcjogbnVsbCB9LCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdlbmQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaXNWYWxpZFNlc3Npb24obWF5YmVTZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGlzVmFsaWRTZXNzaW9uID0gdHlwZW9mIG1heWJlU2Vzc2lvbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIG1heWJlU2Vzc2lvbiAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgJ2FjY2Vzc190b2tlbicgaW4gbWF5YmVTZXNzaW9uICYmXG4gICAgICAgICAgICAncmVmcmVzaF90b2tlbicgaW4gbWF5YmVTZXNzaW9uICYmXG4gICAgICAgICAgICAnZXhwaXJlc19hdCcgaW4gbWF5YmVTZXNzaW9uO1xuICAgICAgICByZXR1cm4gaXNWYWxpZFNlc3Npb247XG4gICAgfVxuICAgIGFzeW5jIF9oYW5kbGVQcm92aWRlclNpZ25Jbihwcm92aWRlciwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB1cmwgPSBhd2FpdCB0aGlzLl9nZXRVcmxGb3JQcm92aWRlcihgJHt0aGlzLnVybH0vYXV0aG9yaXplYCwgcHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHJlZGlyZWN0VG86IG9wdGlvbnMucmVkaXJlY3RUbyxcbiAgICAgICAgICAgIHNjb3Blczogb3B0aW9ucy5zY29wZXMsXG4gICAgICAgICAgICBxdWVyeVBhcmFtczogb3B0aW9ucy5xdWVyeVBhcmFtcyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2RlYnVnKCcjX2hhbmRsZVByb3ZpZGVyU2lnbkluKCknLCAncHJvdmlkZXInLCBwcm92aWRlciwgJ29wdGlvbnMnLCBvcHRpb25zLCAndXJsJywgdXJsKTtcbiAgICAgICAgLy8gdHJ5IHRvIG9wZW4gb24gdGhlIGJyb3dzZXJcbiAgICAgICAgaWYgKGlzQnJvd3NlcigpICYmICFvcHRpb25zLnNraXBCcm93c2VyUmVkaXJlY3QpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkYXRhOiB7IHByb3ZpZGVyLCB1cmwgfSwgZXJyb3I6IG51bGwgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVjb3ZlcnMgdGhlIHNlc3Npb24gZnJvbSBMb2NhbFN0b3JhZ2UgYW5kIHJlZnJlc2hlcyB0aGUgdG9rZW5cbiAgICAgKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyBhc3luYyB0byBhY2NvbW1vZGF0ZSBmb3IgQXN5bmNTdG9yYWdlIGUuZy4gaW4gUmVhY3QgbmF0aXZlLlxuICAgICAqL1xuICAgIGFzeW5jIF9yZWNvdmVyQW5kUmVmcmVzaCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBkZWJ1Z05hbWUgPSAnI19yZWNvdmVyQW5kUmVmcmVzaCgpJztcbiAgICAgICAgdGhpcy5fZGVidWcoZGVidWdOYW1lLCAnYmVnaW4nKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZXNzaW9uID0gYXdhaXQgZ2V0SXRlbUFzeW5jKHRoaXMuc3RvcmFnZSwgdGhpcy5zdG9yYWdlS2V5KTtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ3Nlc3Npb24gZnJvbSBzdG9yYWdlJywgY3VycmVudFNlc3Npb24pO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1ZhbGlkU2Vzc2lvbihjdXJyZW50U2Vzc2lvbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdzZXNzaW9uIGlzIG5vdCB2YWxpZCcpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2Vzc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9yZW1vdmVTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGV4cGlyZXNXaXRoTWFyZ2luID0gKChfYSA9IGN1cnJlbnRTZXNzaW9uLmV4cGlyZXNfYXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IEluZmluaXR5KSAqIDEwMDAgLSBEYXRlLm5vdygpIDwgRVhQSVJZX01BUkdJTl9NUztcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgYHNlc3Npb24gaGFzJHtleHBpcmVzV2l0aE1hcmdpbiA/ICcnIDogJyBub3QnfSBleHBpcmVkIHdpdGggbWFyZ2luIG9mICR7RVhQSVJZX01BUkdJTl9NU31zYCk7XG4gICAgICAgICAgICBpZiAoZXhwaXJlc1dpdGhNYXJnaW4pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvUmVmcmVzaFRva2VuICYmIGN1cnJlbnRTZXNzaW9uLnJlZnJlc2hfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgdGhpcy5fY2FsbFJlZnJlc2hUb2tlbihjdXJyZW50U2Vzc2lvbi5yZWZyZXNoX3Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNBdXRoUmV0cnlhYmxlRmV0Y2hFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdyZWZyZXNoIGZhaWxlZCB3aXRoIGEgbm9uLXJldHJ5YWJsZSBlcnJvciwgcmVtb3ZpbmcgdGhlIHNlc3Npb24nLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcmVtb3ZlU2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byBwZXJzaXN0IGN1cnJlbnRTZXNzaW9uIGFnYWluLCBhcyB3ZSBqdXN0IGxvYWRlZCBpdCBmcm9tXG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgc3RvcmFnZTsgcGVyc2lzdGluZyBpdCBhZ2FpbiBtYXkgb3ZlcndyaXRlIGEgdmFsdWUgc2F2ZWQgYnlcbiAgICAgICAgICAgICAgICAvLyBhbm90aGVyIGNsaWVudCB3aXRoIGFjY2VzcyB0byB0aGUgc2FtZSBsb2NhbCBzdG9yYWdlXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1NJR05FRF9JTicsIGN1cnJlbnRTZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdlcnJvcicsIGVycik7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdlbmQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBfY2FsbFJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCFyZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBdXRoU2Vzc2lvbk1pc3NpbmdFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlZnJlc2hpbmcgaXMgYWxyZWFkeSBpbiBwcm9ncmVzc1xuICAgICAgICBpZiAodGhpcy5yZWZyZXNoaW5nRGVmZXJyZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZnJlc2hpbmdEZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlYnVnTmFtZSA9IGAjX2NhbGxSZWZyZXNoVG9rZW4oJHtyZWZyZXNoVG9rZW4uc3Vic3RyaW5nKDAsIDUpfS4uLilgO1xuICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdiZWdpbicpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoaW5nRGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHRoaXMuX3JlZnJlc2hBY2Nlc3NUb2tlbihyZWZyZXNoVG9rZW4pO1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgaWYgKCFkYXRhLnNlc3Npb24pXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9zYXZlU2Vzc2lvbihkYXRhLnNlc3Npb24pO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1RPS0VOX1JFRlJFU0hFRCcsIGRhdGEuc2Vzc2lvbik7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHNlc3Npb246IGRhdGEuc2Vzc2lvbiwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaGluZ0RlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHNlc3Npb246IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgaWYgKCFpc0F1dGhSZXRyeWFibGVGZXRjaEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9yZW1vdmVTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIChfYSA9IHRoaXMucmVmcmVzaGluZ0RlZmVycmVkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoX2IgPSB0aGlzLnJlZnJlc2hpbmdEZWZlcnJlZCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaGluZ0RlZmVycmVkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKGRlYnVnTmFtZSwgJ2VuZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9ub3RpZnlBbGxTdWJzY3JpYmVycyhldmVudCwgc2Vzc2lvbiwgYnJvYWRjYXN0ID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBkZWJ1Z05hbWUgPSBgI19ub3RpZnlBbGxTdWJzY3JpYmVycygke2V2ZW50fSlgO1xuICAgICAgICB0aGlzLl9kZWJ1ZyhkZWJ1Z05hbWUsICdiZWdpbicsIHNlc3Npb24sIGBicm9hZGNhc3QgPSAke2Jyb2FkY2FzdH1gKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJyb2FkY2FzdENoYW5uZWwgJiYgYnJvYWRjYXN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RDaGFubmVsLnBvc3RNZXNzYWdlKHsgZXZlbnQsIHNlc3Npb24gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gQXJyYXkuZnJvbSh0aGlzLnN0YXRlQ2hhbmdlRW1pdHRlcnMudmFsdWVzKCkpLm1hcChhc3luYyAoeCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHguY2FsbGJhY2soZXZlbnQsIHNlc3Npb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXJyb3JzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoZGVidWdOYW1lLCAnZW5kJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogc2V0IGN1cnJlbnRTZXNzaW9uIGFuZCBjdXJyZW50VXNlclxuICAgICAqIHByb2Nlc3MgdG8gX3N0YXJ0QXV0b1JlZnJlc2hUb2tlbiBpZiBwb3NzaWJsZVxuICAgICAqL1xuICAgIGFzeW5jIF9zYXZlU2Vzc2lvbihzZXNzaW9uKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnKCcjX3NhdmVTZXNzaW9uKCknLCBzZXNzaW9uKTtcbiAgICAgICAgLy8gX3NhdmVTZXNzaW9uIGlzIGFsd2F5cyBjYWxsZWQgd2hlbmV2ZXIgYSBuZXcgc2Vzc2lvbiBoYXMgYmVlbiBhY3F1aXJlZFxuICAgICAgICAvLyBzbyB3ZSBjYW4gc2FmZWx5IHN1cHByZXNzIHRoZSB3YXJuaW5nIHJldHVybmVkIGJ5IGZ1dHVyZSBnZXRTZXNzaW9uIGNhbGxzXG4gICAgICAgIHRoaXMuc3VwcHJlc3NHZXRTZXNzaW9uV2FybmluZyA9IHRydWU7XG4gICAgICAgIGF3YWl0IHNldEl0ZW1Bc3luYyh0aGlzLnN0b3JhZ2UsIHRoaXMuc3RvcmFnZUtleSwgc2Vzc2lvbik7XG4gICAgfVxuICAgIGFzeW5jIF9yZW1vdmVTZXNzaW9uKCkge1xuICAgICAgICB0aGlzLl9kZWJ1ZygnI19yZW1vdmVTZXNzaW9uKCknKTtcbiAgICAgICAgYXdhaXQgcmVtb3ZlSXRlbUFzeW5jKHRoaXMuc3RvcmFnZSwgdGhpcy5zdG9yYWdlS2V5KTtcbiAgICAgICAgYXdhaXQgdGhpcy5fbm90aWZ5QWxsU3Vic2NyaWJlcnMoJ1NJR05FRF9PVVQnLCBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbnkgcmVnaXN0ZXJlZCB2aXNpYmlsaXR5Y2hhbmdlIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICoge0BzZWUgI3N0YXJ0QXV0b1JlZnJlc2h9XG4gICAgICoge0BzZWUgI3N0b3BBdXRvUmVmcmVzaH1cbiAgICAgKi9cbiAgICBfcmVtb3ZlVmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJyNfcmVtb3ZlVmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjaygpJyk7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy52aXNpYmlsaXR5Q2hhbmdlZENhbGxiYWNrO1xuICAgICAgICB0aGlzLnZpc2liaWxpdHlDaGFuZ2VkQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIGlzQnJvd3NlcigpICYmICh3aW5kb3cgPT09IG51bGwgfHwgd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcikpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcigncmVtb3ZpbmcgdmlzaWJpbGl0eWNoYW5nZSBjYWxsYmFjayBmYWlsZWQnLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHRoZSBwcml2YXRlIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayAjc3RhcnRBdXRvUmVmcmVzaH0uIFVzZSB0aGlzXG4gICAgICogd2l0aGluIHRoZSBsaWJyYXJ5LlxuICAgICAqL1xuICAgIGFzeW5jIF9zdGFydEF1dG9SZWZyZXNoKCkge1xuICAgICAgICBhd2FpdCB0aGlzLl9zdG9wQXV0b1JlZnJlc2goKTtcbiAgICAgICAgdGhpcy5fZGVidWcoJyNfc3RhcnRBdXRvUmVmcmVzaCgpJyk7XG4gICAgICAgIGNvbnN0IHRpY2tlciA9IHNldEludGVydmFsKCgpID0+IHRoaXMuX2F1dG9SZWZyZXNoVG9rZW5UaWNrKCksIEFVVE9fUkVGUkVTSF9USUNLX0RVUkFUSU9OX01TKTtcbiAgICAgICAgdGhpcy5hdXRvUmVmcmVzaFRpY2tlciA9IHRpY2tlcjtcbiAgICAgICAgaWYgKHRpY2tlciAmJiB0eXBlb2YgdGlja2VyID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGlja2VyLnVucmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyB0aWNrZXIgaXMgYSBOb2RlSlMgVGltZW91dCBvYmplY3QgdGhhdCBoYXMgYW4gYHVucmVmYCBtZXRob2RcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvdGltZXJzLmh0bWwjdGltZW91dHVucmVmXG4gICAgICAgICAgICAvLyBXaGVuIGF1dG8gcmVmcmVzaCBpcyB1c2VkIGluIE5vZGVKUyAobGlrZSBmb3IgdGVzdGluZykgdGhlXG4gICAgICAgICAgICAvLyBgc2V0SW50ZXJ2YWxgIGlzIHByZXZlbnRpbmcgdGhlIHByb2Nlc3MgZnJvbSBiZWluZyBtYXJrZWQgYXNcbiAgICAgICAgICAgIC8vIGZpbmlzaGVkIGFuZCB0ZXN0cyBydW4gZW5kbGVzc2x5LiBUaGlzIGNhbiBiZSBwcmV2ZW50ZWQgYnkgY2FsbGluZ1xuICAgICAgICAgICAgLy8gYHVucmVmKClgIG9uIHRoZSByZXR1cm5lZCBvYmplY3QuXG4gICAgICAgICAgICB0aWNrZXIudW5yZWYoKTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgaGFzIG5vIGNvbnRleHQgb2YgRGVub1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBEZW5vICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGVuby51bnJlZlRpbWVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBzaW1pbGFyIGxpa2UgZm9yIE5vZGVKUywgYnV0IHdpdGggdGhlIERlbm8gQVBJXG4gICAgICAgICAgICAvLyBodHRwczovL2Rlbm8ubGFuZC9hcGlAbGF0ZXN0P3Vuc3RhYmxlJnM9RGVuby51bnJlZlRpbWVyXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGhhcyBubyBjb250ZXh0IG9mIERlbm9cbiAgICAgICAgICAgIERlbm8udW5yZWZUaW1lcih0aWNrZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJ1biB0aGUgdGljayBpbW1lZGlhdGVseSwgYnV0IGluIHRoZSBuZXh0IHBhc3Mgb2YgdGhlIGV2ZW50IGxvb3Agc28gdGhhdFxuICAgICAgICAvLyAjX2luaXRpYWxpemUgY2FuIGJlIGFsbG93ZWQgdG8gY29tcGxldGUgd2l0aG91dCByZWN1cnNpdmVseSB3YWl0aW5nIG9uXG4gICAgICAgIC8vIGl0c2VsZlxuICAgICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9hdXRvUmVmcmVzaFRva2VuVGljaygpO1xuICAgICAgICB9LCAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB0aGUgcHJpdmF0ZSBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgI3N0b3BBdXRvUmVmcmVzaH0uIFVzZSB0aGlzXG4gICAgICogd2l0aGluIHRoZSBsaWJyYXJ5LlxuICAgICAqL1xuICAgIGFzeW5jIF9zdG9wQXV0b1JlZnJlc2goKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnKCcjX3N0b3BBdXRvUmVmcmVzaCgpJyk7XG4gICAgICAgIGNvbnN0IHRpY2tlciA9IHRoaXMuYXV0b1JlZnJlc2hUaWNrZXI7XG4gICAgICAgIHRoaXMuYXV0b1JlZnJlc2hUaWNrZXIgPSBudWxsO1xuICAgICAgICBpZiAodGlja2VyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRpY2tlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIGFuIGF1dG8tcmVmcmVzaCBwcm9jZXNzIGluIHRoZSBiYWNrZ3JvdW5kLiBUaGUgc2Vzc2lvbiBpcyBjaGVja2VkXG4gICAgICogZXZlcnkgZmV3IHNlY29uZHMuIENsb3NlIHRvIHRoZSB0aW1lIG9mIGV4cGlyYXRpb24gYSBwcm9jZXNzIGlzIHN0YXJ0ZWQgdG9cbiAgICAgKiByZWZyZXNoIHRoZSBzZXNzaW9uLiBJZiByZWZyZXNoaW5nIGZhaWxzIGl0IHdpbGwgYmUgcmV0cmllZCBmb3IgYXMgbG9uZyBhc1xuICAgICAqIG5lY2Vzc2FyeS5cbiAgICAgKlxuICAgICAqIElmIHlvdSBzZXQgdGhlIHtAbGluayBHb1RydWVDbGllbnRPcHRpb25zI2F1dG9SZWZyZXNoVG9rZW59IHlvdSBkb24ndCBuZWVkXG4gICAgICogdG8gY2FsbCB0aGlzIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCBmb3IgeW91LlxuICAgICAqXG4gICAgICogT24gYnJvd3NlcnMgdGhlIHJlZnJlc2ggcHJvY2VzcyB3b3JrcyBvbmx5IHdoZW4gdGhlIHRhYi93aW5kb3cgaXMgaW4gdGhlXG4gICAgICogZm9yZWdyb3VuZCB0byBjb25zZXJ2ZSByZXNvdXJjZXMgYXMgd2VsbCBhcyBwcmV2ZW50IHJhY2UgY29uZGl0aW9ucyBhbmRcbiAgICAgKiBmbG9vZGluZyBhdXRoIHdpdGggcmVxdWVzdHMuIElmIHlvdSBjYWxsIHRoaXMgbWV0aG9kIGFueSBtYW5hZ2VkXG4gICAgICogdmlzaWJpbGl0eSBjaGFuZ2UgY2FsbGJhY2sgd2lsbCBiZSByZW1vdmVkIGFuZCB5b3UgbXVzdCBtYW5hZ2UgdmlzaWJpbGl0eVxuICAgICAqIGNoYW5nZXMgb24geW91ciBvd24uXG4gICAgICpcbiAgICAgKiBPbiBub24tYnJvd3NlciBwbGF0Zm9ybXMgdGhlIHJlZnJlc2ggcHJvY2VzcyB3b3JrcyAqY29udGludW91c2x5KiBpbiB0aGVcbiAgICAgKiBiYWNrZ3JvdW5kLCB3aGljaCBtYXkgbm90IGJlIGRlc2lyYWJsZS4gWW91IHNob3VsZCBob29rIGludG8geW91clxuICAgICAqIHBsYXRmb3JtJ3MgZm9yZWdyb3VuZCBpbmRpY2F0aW9uIG1lY2hhbmlzbSBhbmQgY2FsbCB0aGVzZSBtZXRob2RzXG4gICAgICogYXBwcm9wcmlhdGVseSB0byBjb25zZXJ2ZSByZXNvdXJjZXMuXG4gICAgICpcbiAgICAgKiB7QHNlZSAjc3RvcEF1dG9SZWZyZXNofVxuICAgICAqL1xuICAgIGFzeW5jIHN0YXJ0QXV0b1JlZnJlc2goKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVZpc2liaWxpdHlDaGFuZ2VkQ2FsbGJhY2soKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fc3RhcnRBdXRvUmVmcmVzaCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9wcyBhbiBhY3RpdmUgYXV0byByZWZyZXNoIHByb2Nlc3MgcnVubmluZyBpbiB0aGUgYmFja2dyb3VuZCAoaWYgYW55KS5cbiAgICAgKlxuICAgICAqIElmIHlvdSBjYWxsIHRoaXMgbWV0aG9kIGFueSBtYW5hZ2VkIHZpc2liaWxpdHkgY2hhbmdlIGNhbGxiYWNrIHdpbGwgYmVcbiAgICAgKiByZW1vdmVkIGFuZCB5b3UgbXVzdCBtYW5hZ2UgdmlzaWJpbGl0eSBjaGFuZ2VzIG9uIHlvdXIgb3duLlxuICAgICAqXG4gICAgICogU2VlIHtAbGluayAjc3RhcnRBdXRvUmVmcmVzaH0gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKi9cbiAgICBhc3luYyBzdG9wQXV0b1JlZnJlc2goKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVZpc2liaWxpdHlDaGFuZ2VkQ2FsbGJhY2soKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fc3RvcEF1dG9SZWZyZXNoKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIGF1dG8gcmVmcmVzaCB0b2tlbiB0aWNrLlxuICAgICAqL1xuICAgIGFzeW5jIF9hdXRvUmVmcmVzaFRva2VuVGljaygpIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJyNfYXV0b1JlZnJlc2hUb2tlblRpY2soKScsICdiZWdpbicpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fYWNxdWlyZUxvY2soMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiB7IHNlc3Npb24gfSwgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24gfHwgIXNlc3Npb24ucmVmcmVzaF90b2tlbiB8fCAhc2Vzc2lvbi5leHBpcmVzX2F0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlYnVnKCcjX2F1dG9SZWZyZXNoVG9rZW5UaWNrKCknLCAnbm8gc2Vzc2lvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlc3Npb24gd2lsbCBleHBpcmUgaW4gdGhpcyBtYW55IHRpY2tzIChvciBoYXMgYWxyZWFkeSBleHBpcmVkIGlmIDw9IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwaXJlc0luVGlja3MgPSBNYXRoLmZsb29yKChzZXNzaW9uLmV4cGlyZXNfYXQgKiAxMDAwIC0gbm93KSAvIEFVVE9fUkVGUkVTSF9USUNLX0RVUkFUSU9OX01TKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnI19hdXRvUmVmcmVzaFRva2VuVGljaygpJywgYGFjY2VzcyB0b2tlbiBleHBpcmVzIGluICR7ZXhwaXJlc0luVGlja3N9IHRpY2tzLCBhIHRpY2sgbGFzdHMgJHtBVVRPX1JFRlJFU0hfVElDS19EVVJBVElPTl9NU31tcywgcmVmcmVzaCB0aHJlc2hvbGQgaXMgJHtBVVRPX1JFRlJFU0hfVElDS19USFJFU0hPTER9IHRpY2tzYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4cGlyZXNJblRpY2tzIDw9IEFVVE9fUkVGUkVTSF9USUNLX1RIUkVTSE9MRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9jYWxsUmVmcmVzaFRva2VuKHNlc3Npb24ucmVmcmVzaF90b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dG8gcmVmcmVzaCB0aWNrIGZhaWxlZCB3aXRoIGVycm9yLiBUaGlzIGlzIGxpa2VseSBhIHRyYW5zaWVudCBlcnJvci4nLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJyNfYXV0b1JlZnJlc2hUb2tlblRpY2soKScsICdlbmQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUuaXNBY3F1aXJlVGltZW91dCB8fCBlIGluc3RhbmNlb2YgTG9ja0FjcXVpcmVUaW1lb3V0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnYXV0byByZWZyZXNoIHRva2VuIHRpY2sgbG9jayBub3QgYXZhaWxhYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBjYWxsYmFja3Mgb24gdGhlIGJyb3dzZXIgLyBwbGF0Zm9ybSwgd2hpY2ggaW4tdHVybiBydW5cbiAgICAgKiBhbGdvcml0aG1zIHdoZW4gdGhlIGJyb3dzZXIgd2luZG93L3RhYiBhcmUgaW4gZm9yZWdyb3VuZC4gT24gbm9uLWJyb3dzZXJcbiAgICAgKiBwbGF0Zm9ybXMgaXQgYXNzdW1lcyBhbHdheXMgZm9yZWdyb3VuZC5cbiAgICAgKi9cbiAgICBhc3luYyBfaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJyNfaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpJyk7XG4gICAgICAgIGlmICghaXNCcm93c2VyKCkgfHwgISh3aW5kb3cgPT09IG51bGwgfHwgd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF1dG9SZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBpbiBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgdGhlIHJlZnJlc2ggdG9rZW4gdGlja2VyIHJ1bnMgYWx3YXlzXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEF1dG9SZWZyZXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjayA9IGFzeW5jICgpID0+IGF3YWl0IHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZWQoZmFsc2UpO1xuICAgICAgICAgICAgd2luZG93ID09PSBudWxsIHx8IHdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLnZpc2liaWxpdHlDaGFuZ2VkQ2FsbGJhY2spO1xuICAgICAgICAgICAgLy8gbm93IGltbWVkaWF0ZWx5IGNhbGwgdGhlIHZpc2JpbGl0eSBjaGFuZ2VkIGNhbGxiYWNrIHRvIHNldHVwIHdpdGggdGhlXG4gICAgICAgICAgICAvLyBjdXJyZW50IHZpc2JpbGl0eSBzdGF0ZVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlZCh0cnVlKTsgLy8gaW5pdGlhbCBjYWxsXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdfaGFuZGxlVmlzaWJpbGl0eUNoYW5nZScsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayByZWdpc3RlcmVkIHdpdGggYHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJylgLlxuICAgICAqL1xuICAgIGFzeW5jIF9vblZpc2liaWxpdHlDaGFuZ2VkKGNhbGxlZEZyb21Jbml0aWFsaXplKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBgI19vblZpc2liaWxpdHlDaGFuZ2VkKCR7Y2FsbGVkRnJvbUluaXRpYWxpemV9KWA7XG4gICAgICAgIHRoaXMuX2RlYnVnKG1ldGhvZE5hbWUsICd2aXNpYmlsaXR5U3RhdGUnLCBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUpO1xuICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF1dG9SZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBpbiBicm93c2VyIGVudmlyb25tZW50cyB0aGUgcmVmcmVzaCB0b2tlbiB0aWNrZXIgcnVucyBvbmx5IG9uIGZvY3VzZWQgdGFic1xuICAgICAgICAgICAgICAgIC8vIHdoaWNoIHByZXZlbnRzIHJhY2UgY29uZGl0aW9uc1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0QXV0b1JlZnJlc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2FsbGVkRnJvbUluaXRpYWxpemUpIHtcbiAgICAgICAgICAgICAgICAvLyBjYWxsZWQgd2hlbiB0aGUgdmlzaWJpbGl0eSBoYXMgY2hhbmdlZCwgaS5lLiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgIC8vIHRyYW5zaXRpb25lZCBmcm9tIGhpZGRlbiAtPiB2aXNpYmxlIHNvIHdlIG5lZWQgdG8gc2VlIGlmIHRoZSBzZXNzaW9uXG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIHJlY292ZXJlZCBpbW1lZGlhdGVseS4uLiBidXQgdG8gZG8gdGhhdCB3ZSBuZWVkIHRvIGFjcXVpcmVcbiAgICAgICAgICAgICAgICAvLyB0aGUgbG9jayBmaXJzdCBhc3luY2hyb25vdXNseVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVByb21pc2U7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSAhPT0gJ3Zpc2libGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZyhtZXRob2ROYW1lLCAnYWNxdWlyZWQgdGhlIGxvY2sgdG8gcmVjb3ZlciB0aGUgc2Vzc2lvbiwgYnV0IHRoZSBicm93c2VyIHZpc2liaWxpdHlTdGF0ZSBpcyBubyBsb25nZXIgdmlzaWJsZSwgYWJvcnRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZpc2liaWxpdHkgaGFzIGNoYW5nZWQgd2hpbGUgd2FpdGluZyBmb3IgdGhlIGxvY2ssIGFib3J0XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVjb3ZlciB0aGUgc2Vzc2lvblxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9yZWNvdmVyQW5kUmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF1dG9SZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdG9wQXV0b1JlZnJlc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgdGhlIHJlbGV2YW50IGxvZ2luIFVSTCBmb3IgYSB0aGlyZC1wYXJ0eSBwcm92aWRlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZWRpcmVjdFRvIEEgVVJMIG9yIG1vYmlsZSBhZGRyZXNzIHRvIHNlbmQgdGhlIHVzZXIgdG8gYWZ0ZXIgdGhleSBhcmUgY29uZmlybWVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnNjb3BlcyBBIHNwYWNlLXNlcGFyYXRlZCBsaXN0IG9mIHNjb3BlcyBncmFudGVkIHRvIHRoZSBPQXV0aCBhcHBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5xdWVyeVBhcmFtcyBBbiBvYmplY3Qgb2Yga2V5LXZhbHVlIHBhaXJzIGNvbnRhaW5pbmcgcXVlcnkgcGFyYW1ldGVycyBncmFudGVkIHRvIHRoZSBPQXV0aCBhcHBsaWNhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBfZ2V0VXJsRm9yUHJvdmlkZXIodXJsLCBwcm92aWRlciwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBbYHByb3ZpZGVyPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHByb3ZpZGVyKX1gXTtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZWRpcmVjdFRvKSB7XG4gICAgICAgICAgICB1cmxQYXJhbXMucHVzaChgcmVkaXJlY3RfdG89JHtlbmNvZGVVUklDb21wb25lbnQob3B0aW9ucy5yZWRpcmVjdFRvKX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNjb3Blcykge1xuICAgICAgICAgICAgdXJsUGFyYW1zLnB1c2goYHNjb3Blcz0ke2VuY29kZVVSSUNvbXBvbmVudChvcHRpb25zLnNjb3Blcyl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZmxvd1R5cGUgPT09ICdwa2NlJykge1xuICAgICAgICAgICAgY29uc3QgW2NvZGVDaGFsbGVuZ2UsIGNvZGVDaGFsbGVuZ2VNZXRob2RdID0gYXdhaXQgZ2V0Q29kZUNoYWxsZW5nZUFuZE1ldGhvZCh0aGlzLnN0b3JhZ2UsIHRoaXMuc3RvcmFnZUtleSk7XG4gICAgICAgICAgICBjb25zdCBmbG93UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgICAgICAgICAgY29kZV9jaGFsbGVuZ2U6IGAke2VuY29kZVVSSUNvbXBvbmVudChjb2RlQ2hhbGxlbmdlKX1gLFxuICAgICAgICAgICAgICAgIGNvZGVfY2hhbGxlbmdlX21ldGhvZDogYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGNvZGVDaGFsbGVuZ2VNZXRob2QpfWAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHVybFBhcmFtcy5wdXNoKGZsb3dQYXJhbXMudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5xdWVyeVBhcmFtcykge1xuICAgICAgICAgICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKG9wdGlvbnMucXVlcnlQYXJhbXMpO1xuICAgICAgICAgICAgdXJsUGFyYW1zLnB1c2gocXVlcnkudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5za2lwQnJvd3NlclJlZGlyZWN0KSB7XG4gICAgICAgICAgICB1cmxQYXJhbXMucHVzaChgc2tpcF9odHRwX3JlZGlyZWN0PSR7b3B0aW9ucy5za2lwQnJvd3NlclJlZGlyZWN0fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt1cmx9PyR7dXJsUGFyYW1zLmpvaW4oJyYnKX1gO1xuICAgIH1cbiAgICBhc3luYyBfdW5lbnJvbGwocGFyYW1zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fdXNlU2Vzc2lvbihhc3luYyAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbkRhdGEsIGVycm9yOiBzZXNzaW9uRXJyb3IgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yOiBzZXNzaW9uRXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdERUxFVEUnLCBgJHt0aGlzLnVybH0vZmFjdG9ycy8ke3BhcmFtcy5mYWN0b3JJZH1gLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgand0OiAoX2EgPSBzZXNzaW9uRGF0YSA9PT0gbnVsbCB8fCBzZXNzaW9uRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2Vzc2lvbkRhdGEuc2Vzc2lvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFjY2Vzc190b2tlbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQXV0aEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBfZW5yb2xsKHBhcmFtcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3VzZVNlc3Npb24oYXN5bmMgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSwgZXJyb3I6IHNlc3Npb25FcnJvciB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3I6IHNlc3Npb25FcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gT2JqZWN0LmFzc2lnbih7IGZyaWVuZGx5X25hbWU6IHBhcmFtcy5mcmllbmRseU5hbWUsIGZhY3Rvcl90eXBlOiBwYXJhbXMuZmFjdG9yVHlwZSB9LCAocGFyYW1zLmZhY3RvclR5cGUgPT09ICdwaG9uZScgPyB7IHBob25lOiBwYXJhbXMucGhvbmUgfSA6IHsgaXNzdWVyOiBwYXJhbXMuaXNzdWVyIH0pKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9mYWN0b3JzYCwge1xuICAgICAgICAgICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGp3dDogKF9hID0gc2Vzc2lvbkRhdGEgPT09IG51bGwgfHwgc2Vzc2lvbkRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlc3Npb25EYXRhLnNlc3Npb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZmFjdG9yVHlwZSA9PT0gJ3RvdHAnICYmICgoX2IgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEudG90cCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnFyX2NvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEudG90cC5xcl9jb2RlID0gYGRhdGE6aW1hZ2Uvc3ZnK3htbDt1dGYtOCwke2RhdGEudG90cC5xcl9jb2RlfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BzZWUgR29UcnVlTUZBQXBpI3ZlcmlmeX1cbiAgICAgKi9cbiAgICBhc3luYyBfdmVyaWZ5KHBhcmFtcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3VzZVNlc3Npb24oYXN5bmMgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbkRhdGEsIGVycm9yOiBzZXNzaW9uRXJyb3IgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3I6IHNlc3Npb25FcnJvciB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IF9yZXF1ZXN0KHRoaXMuZmV0Y2gsICdQT1NUJywgYCR7dGhpcy51cmx9L2ZhY3RvcnMvJHtwYXJhbXMuZmFjdG9ySWR9L3ZlcmlmeWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgY29kZTogcGFyYW1zLmNvZGUsIGNoYWxsZW5nZV9pZDogcGFyYW1zLmNoYWxsZW5nZUlkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBqd3Q6IChfYSA9IHNlc3Npb25EYXRhID09PSBudWxsIHx8IHNlc3Npb25EYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZXNzaW9uRGF0YS5zZXNzaW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmVTZXNzaW9uKE9iamVjdC5hc3NpZ24oeyBleHBpcmVzX2F0OiBNYXRoLnJvdW5kKERhdGUubm93KCkgLyAxMDAwKSArIGRhdGEuZXhwaXJlc19pbiB9LCBkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25vdGlmeUFsbFN1YnNjcmliZXJzKCdNRkFfQ0hBTExFTkdFX1ZFUklGSUVEJywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BzZWUgR29UcnVlTUZBQXBpI2NoYWxsZW5nZX1cbiAgICAgKi9cbiAgICBhc3luYyBfY2hhbGxlbmdlKHBhcmFtcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3VzZVNlc3Npb24oYXN5bmMgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbkRhdGEsIGVycm9yOiBzZXNzaW9uRXJyb3IgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3I6IHNlc3Npb25FcnJvciB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBfcmVxdWVzdCh0aGlzLmZldGNoLCAnUE9TVCcsIGAke3RoaXMudXJsfS9mYWN0b3JzLyR7cGFyYW1zLmZhY3RvcklkfS9jaGFsbGVuZ2VgLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7IGNoYW5uZWw6IHBhcmFtcy5jaGFubmVsIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBqd3Q6IChfYSA9IHNlc3Npb25EYXRhID09PSBudWxsIHx8IHNlc3Npb25EYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZXNzaW9uRGF0YS5zZXNzaW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc0F1dGhFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QHNlZSBHb1RydWVNRkFBcGkjY2hhbGxlbmdlQW5kVmVyaWZ5fVxuICAgICAqL1xuICAgIGFzeW5jIF9jaGFsbGVuZ2VBbmRWZXJpZnkocGFyYW1zKSB7XG4gICAgICAgIC8vIGJvdGggX2NoYWxsZW5nZSBhbmQgX3ZlcmlmeSBpbmRlcGVuZGVudGx5IGFjcXVpcmUgdGhlIGxvY2ssIHNvIG5vIG5lZWRcbiAgICAgICAgLy8gdG8gYWNxdWlyZSBpdCBoZXJlXG4gICAgICAgIGNvbnN0IHsgZGF0YTogY2hhbGxlbmdlRGF0YSwgZXJyb3I6IGNoYWxsZW5nZUVycm9yIH0gPSBhd2FpdCB0aGlzLl9jaGFsbGVuZ2Uoe1xuICAgICAgICAgICAgZmFjdG9ySWQ6IHBhcmFtcy5mYWN0b3JJZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjaGFsbGVuZ2VFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3I6IGNoYWxsZW5nZUVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3ZlcmlmeSh7XG4gICAgICAgICAgICBmYWN0b3JJZDogcGFyYW1zLmZhY3RvcklkLFxuICAgICAgICAgICAgY2hhbGxlbmdlSWQ6IGNoYWxsZW5nZURhdGEuaWQsXG4gICAgICAgICAgICBjb2RlOiBwYXJhbXMuY29kZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAc2VlIEdvVHJ1ZU1GQUFwaSNsaXN0RmFjdG9yc31cbiAgICAgKi9cbiAgICBhc3luYyBfbGlzdEZhY3RvcnMoKSB7XG4gICAgICAgIC8vIHVzZSAjZ2V0VXNlciBpbnN0ZWFkIG9mICNfZ2V0VXNlciBhcyB0aGUgZm9ybWVyIGFjcXVpcmVzIGEgbG9ja1xuICAgICAgICBjb25zdCB7IGRhdGE6IHsgdXNlciB9LCBlcnJvcjogdXNlckVycm9yLCB9ID0gYXdhaXQgdGhpcy5nZXRVc2VyKCk7XG4gICAgICAgIGlmICh1c2VyRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yOiB1c2VyRXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmYWN0b3JzID0gKHVzZXIgPT09IG51bGwgfHwgdXNlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogdXNlci5mYWN0b3JzKSB8fCBbXTtcbiAgICAgICAgY29uc3QgdG90cCA9IGZhY3RvcnMuZmlsdGVyKChmYWN0b3IpID0+IGZhY3Rvci5mYWN0b3JfdHlwZSA9PT0gJ3RvdHAnICYmIGZhY3Rvci5zdGF0dXMgPT09ICd2ZXJpZmllZCcpO1xuICAgICAgICBjb25zdCBwaG9uZSA9IGZhY3RvcnMuZmlsdGVyKChmYWN0b3IpID0+IGZhY3Rvci5mYWN0b3JfdHlwZSA9PT0gJ3Bob25lJyAmJiBmYWN0b3Iuc3RhdHVzID09PSAndmVyaWZpZWQnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBhbGw6IGZhY3RvcnMsXG4gICAgICAgICAgICAgICAgdG90cCxcbiAgICAgICAgICAgICAgICBwaG9uZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BzZWUgR29UcnVlTUZBQXBpI2dldEF1dGhlbnRpY2F0b3JBc3N1cmFuY2VMZXZlbH1cbiAgICAgKi9cbiAgICBhc3luYyBfZ2V0QXV0aGVudGljYXRvckFzc3VyYW5jZUxldmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWNxdWlyZUxvY2soLTEsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl91c2VTZXNzaW9uKGFzeW5jIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YTogeyBzZXNzaW9uIH0sIGVycm9yOiBzZXNzaW9uRXJyb3IsIH0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKHNlc3Npb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvcjogc2Vzc2lvbkVycm9yIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBjdXJyZW50TGV2ZWw6IG51bGwsIG5leHRMZXZlbDogbnVsbCwgY3VycmVudEF1dGhlbnRpY2F0aW9uTWV0aG9kczogW10gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IHBheWxvYWQgfSA9IGRlY29kZUpXVChzZXNzaW9uLmFjY2Vzc190b2tlbik7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRMZXZlbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHBheWxvYWQuYWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbCA9IHBheWxvYWQuYWFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbmV4dExldmVsID0gY3VycmVudExldmVsO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlcmlmaWVkRmFjdG9ycyA9IChfYiA9IChfYSA9IHNlc3Npb24udXNlci5mYWN0b3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmlsdGVyKChmYWN0b3IpID0+IGZhY3Rvci5zdGF0dXMgPT09ICd2ZXJpZmllZCcpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXTtcbiAgICAgICAgICAgICAgICBpZiAodmVyaWZpZWRGYWN0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dExldmVsID0gJ2FhbDInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QXV0aGVudGljYXRpb25NZXRob2RzID0gcGF5bG9hZC5hbXIgfHwgW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogeyBjdXJyZW50TGV2ZWwsIG5leHRMZXZlbCwgY3VycmVudEF1dGhlbnRpY2F0aW9uTWV0aG9kcyB9LCBlcnJvcjogbnVsbCB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBmZXRjaEp3ayhraWQsIGp3a3MgPSB7IGtleXM6IFtdIH0pIHtcbiAgICAgICAgLy8gdHJ5IGZldGNoaW5nIGZyb20gdGhlIHN1cHBsaWVkIGp3a3NcbiAgICAgICAgbGV0IGp3ayA9IGp3a3Mua2V5cy5maW5kKChrZXkpID0+IGtleS5raWQgPT09IGtpZCk7XG4gICAgICAgIGlmIChqd2spIHtcbiAgICAgICAgICAgIHJldHVybiBqd2s7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHJ5IGZldGNoaW5nIGZyb20gY2FjaGVcbiAgICAgICAgandrID0gdGhpcy5qd2tzLmtleXMuZmluZCgoa2V5KSA9PiBrZXkua2lkID09PSBraWQpO1xuICAgICAgICAvLyBqd2sgZXhpc3RzIGFuZCBqd2tzIGlzbid0IHN0YWxlXG4gICAgICAgIGlmIChqd2sgJiYgdGhpcy5qd2tzX2NhY2hlZF9hdCArIEpXS1NfVFRMID4gRGF0ZS5ub3coKSkge1xuICAgICAgICAgICAgcmV0dXJuIGp3aztcbiAgICAgICAgfVxuICAgICAgICAvLyBqd2sgaXNuJ3QgY2FjaGVkIGluIG1lbW9yeSBzbyB3ZSBuZWVkIHRvIGZldGNoIGl0IGZyb20gdGhlIHdlbGwta25vd24gZW5kcG9pbnRcbiAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgX3JlcXVlc3QodGhpcy5mZXRjaCwgJ0dFVCcsIGAke3RoaXMudXJsfS8ud2VsbC1rbm93bi9qd2tzLmpzb25gLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGF0YS5rZXlzIHx8IGRhdGEua2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBdXRoSW52YWxpZEp3dEVycm9yKCdKV0tTIGlzIGVtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5qd2tzID0gZGF0YTtcbiAgICAgICAgdGhpcy5qd2tzX2NhY2hlZF9hdCA9IERhdGUubm93KCk7XG4gICAgICAgIC8vIEZpbmQgdGhlIHNpZ25pbmcga2V5XG4gICAgICAgIGp3ayA9IGRhdGEua2V5cy5maW5kKChrZXkpID0+IGtleS5raWQgPT09IGtpZCk7XG4gICAgICAgIGlmICghandrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXV0aEludmFsaWRKd3RFcnJvcignTm8gbWF0Y2hpbmcgc2lnbmluZyBrZXkgZm91bmQgaW4gSldLUycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqd2s7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBleHBlcmltZW50YWwgVGhpcyBtZXRob2QgbWF5IGNoYW5nZSBpbiBmdXR1cmUgdmVyc2lvbnMuXG4gICAgICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIGNsYWltcyBmcm9tIGEgSldULiBJZiB0aGUgSldUIGlzIHN5bW1ldHJpYyBKV1RzLCBpdCB3aWxsIGNhbGwgZ2V0VXNlcigpIHRvIHZlcmlmeSBhZ2FpbnN0IHRoZSBzZXJ2ZXIuIElmIHRoZSBKV1QgaXMgYXN5bW1ldHJpYywgaXQgd2lsbCBiZSB2ZXJpZmllZCBhZ2FpbnN0IHRoZSBKV0tTIHVzaW5nIHRoZSBXZWJDcnlwdG8gQVBJLlxuICAgICAqL1xuICAgIGFzeW5jIGdldENsYWltcyhqd3QsIGp3a3MgPSB7IGtleXM6IFtdIH0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCB0b2tlbiA9IGp3dDtcbiAgICAgICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCB0aGlzLmdldFNlc3Npb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgfHwgIWRhdGEuc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b2tlbiA9IGRhdGEuc2Vzc2lvbi5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGhlYWRlciwgcGF5bG9hZCwgc2lnbmF0dXJlLCByYXc6IHsgaGVhZGVyOiByYXdIZWFkZXIsIHBheWxvYWQ6IHJhd1BheWxvYWQgfSwgfSA9IGRlY29kZUpXVCh0b2tlbik7XG4gICAgICAgICAgICAvLyBSZWplY3QgZXhwaXJlZCBKV1RzXG4gICAgICAgICAgICB2YWxpZGF0ZUV4cChwYXlsb2FkLmV4cCk7XG4gICAgICAgICAgICAvLyBJZiBzeW1tZXRyaWMgYWxnb3JpdGhtIG9yIFdlYkNyeXB0byBBUEkgaXMgdW5hdmFpbGFibGUsIGZhbGxiYWNrIHRvIGdldFVzZXIoKVxuICAgICAgICAgICAgaWYgKCFoZWFkZXIua2lkIHx8XG4gICAgICAgICAgICAgICAgaGVhZGVyLmFsZyA9PT0gJ0hTMjU2JyB8fFxuICAgICAgICAgICAgICAgICEoJ2NyeXB0bycgaW4gZ2xvYmFsVGhpcyAmJiAnc3VidGxlJyBpbiBnbG9iYWxUaGlzLmNyeXB0bykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCB0aGlzLmdldFVzZXIodG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZ2V0VXNlciBzdWNjZWVkcyBzbyB0aGUgY2xhaW1zIGluIHRoZSBKV1QgY2FuIGJlIHRydXN0ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFpbXM6IHBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhbGdvcml0aG0gPSBnZXRBbGdvcml0aG0oaGVhZGVyLmFsZyk7XG4gICAgICAgICAgICBjb25zdCBzaWduaW5nS2V5ID0gYXdhaXQgdGhpcy5mZXRjaEp3ayhoZWFkZXIua2lkLCBqd2tzKTtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgSldLIHRvIENyeXB0b0tleVxuICAgICAgICAgICAgY29uc3QgcHVibGljS2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ2p3aycsIHNpZ25pbmdLZXksIGFsZ29yaXRobSwgdHJ1ZSwgW1xuICAgICAgICAgICAgICAgICd2ZXJpZnknLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAvLyBWZXJpZnkgdGhlIHNpZ25hdHVyZVxuICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IGF3YWl0IGNyeXB0by5zdWJ0bGUudmVyaWZ5KGFsZ29yaXRobSwgcHVibGljS2V5LCBzaWduYXR1cmUsIHN0cmluZ1RvVWludDhBcnJheShgJHtyYXdIZWFkZXJ9LiR7cmF3UGF5bG9hZH1gKSk7XG4gICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aEludmFsaWRKd3RFcnJvcignSW52YWxpZCBKV1Qgc2lnbmF0dXJlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB2ZXJpZmljYXRpb24gc3VjY2VlZHMsIGRlY29kZSBhbmQgcmV0dXJuIGNsYWltc1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGNsYWltczogcGF5bG9hZCxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNBdXRoRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuR29UcnVlQ2xpZW50Lm5leHRJbnN0YW5jZUlEID0gMDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdvVHJ1ZUNsaWVudC5qcy5tYXAiLCJpbXBvcnQgR29UcnVlQWRtaW5BcGkgZnJvbSAnLi9Hb1RydWVBZG1pbkFwaSc7XG5jb25zdCBBdXRoQWRtaW5BcGkgPSBHb1RydWVBZG1pbkFwaTtcbmV4cG9ydCBkZWZhdWx0IEF1dGhBZG1pbkFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF1dGhBZG1pbkFwaS5qcy5tYXAiLCJpbXBvcnQgR29UcnVlQ2xpZW50IGZyb20gJy4vR29UcnVlQ2xpZW50JztcbmNvbnN0IEF1dGhDbGllbnQgPSBHb1RydWVDbGllbnQ7XG5leHBvcnQgZGVmYXVsdCBBdXRoQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aENsaWVudC5qcy5tYXAiLCJpbXBvcnQgeyBBdXRoQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL2F1dGgtanMnO1xuZXhwb3J0IGNsYXNzIFN1cGFiYXNlQXV0aENsaWVudCBleHRlbmRzIEF1dGhDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3VwYWJhc2VBdXRoQ2xpZW50LmpzLm1hcCIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgRnVuY3Rpb25zQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL2Z1bmN0aW9ucy1qcyc7XG5pbXBvcnQgeyBQb3N0Z3Jlc3RDbGllbnQsIH0gZnJvbSAnQHN1cGFiYXNlL3Bvc3RncmVzdC1qcyc7XG5pbXBvcnQgeyBSZWFsdGltZUNsaWVudCwgfSBmcm9tICdAc3VwYWJhc2UvcmVhbHRpbWUtanMnO1xuaW1wb3J0IHsgU3RvcmFnZUNsaWVudCBhcyBTdXBhYmFzZVN0b3JhZ2VDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3RvcmFnZS1qcyc7XG5pbXBvcnQgeyBERUZBVUxUX0dMT0JBTF9PUFRJT05TLCBERUZBVUxUX0RCX09QVElPTlMsIERFRkFVTFRfQVVUSF9PUFRJT05TLCBERUZBVUxUX1JFQUxUSU1FX09QVElPTlMsIH0gZnJvbSAnLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCB7IGZldGNoV2l0aEF1dGggfSBmcm9tICcuL2xpYi9mZXRjaCc7XG5pbXBvcnQgeyBlbnN1cmVUcmFpbGluZ1NsYXNoLCBhcHBseVNldHRpbmdEZWZhdWx0cyB9IGZyb20gJy4vbGliL2hlbHBlcnMnO1xuaW1wb3J0IHsgU3VwYWJhc2VBdXRoQ2xpZW50IH0gZnJvbSAnLi9saWIvU3VwYWJhc2VBdXRoQ2xpZW50Jztcbi8qKlxuICogU3VwYWJhc2UgQ2xpZW50LlxuICpcbiAqIEFuIGlzb21vcnBoaWMgSmF2YXNjcmlwdCBjbGllbnQgZm9yIGludGVyYWN0aW5nIHdpdGggUG9zdGdyZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1cGFiYXNlQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgY2xpZW50IGZvciB1c2UgaW4gdGhlIGJyb3dzZXIuXG4gICAgICogQHBhcmFtIHN1cGFiYXNlVXJsIFRoZSB1bmlxdWUgU3VwYWJhc2UgVVJMIHdoaWNoIGlzIHN1cHBsaWVkIHdoZW4geW91IGNyZWF0ZSBhIG5ldyBwcm9qZWN0IGluIHlvdXIgcHJvamVjdCBkYXNoYm9hcmQuXG4gICAgICogQHBhcmFtIHN1cGFiYXNlS2V5IFRoZSB1bmlxdWUgU3VwYWJhc2UgS2V5IHdoaWNoIGlzIHN1cHBsaWVkIHdoZW4geW91IGNyZWF0ZSBhIG5ldyBwcm9qZWN0IGluIHlvdXIgcHJvamVjdCBkYXNoYm9hcmQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZGIuc2NoZW1hIFlvdSBjYW4gc3dpdGNoIGluIGJldHdlZW4gc2NoZW1hcy4gVGhlIHNjaGVtYSBuZWVkcyB0byBiZSBvbiB0aGUgbGlzdCBvZiBleHBvc2VkIHNjaGVtYXMgaW5zaWRlIFN1cGFiYXNlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmF1dGguYXV0b1JlZnJlc2hUb2tlbiBTZXQgdG8gXCJ0cnVlXCIgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZWZyZXNoIHRoZSB0b2tlbiBiZWZvcmUgZXhwaXJpbmcuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYXV0aC5wZXJzaXN0U2Vzc2lvbiBTZXQgdG8gXCJ0cnVlXCIgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSBzYXZlIHRoZSB1c2VyIHNlc3Npb24gaW50byBsb2NhbCBzdG9yYWdlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmF1dGguZGV0ZWN0U2Vzc2lvbkluVXJsIFNldCB0byBcInRydWVcIiBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IGRldGVjdHMgT0F1dGggZ3JhbnRzIGluIHRoZSBVUkwgYW5kIHNpZ25zIGluIHRoZSB1c2VyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnJlYWx0aW1lIE9wdGlvbnMgcGFzc2VkIGFsb25nIHRvIHJlYWx0aW1lLWpzIGNvbnN0cnVjdG9yLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmdsb2JhbC5mZXRjaCBBIGN1c3RvbSBmZXRjaCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5nbG9iYWwuaGVhZGVycyBBbnkgYWRkaXRpb25hbCBoZWFkZXJzIHRvIHNlbmQgd2l0aCBlYWNoIG5ldHdvcmsgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzdXBhYmFzZVVybCwgc3VwYWJhc2VLZXksIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRoaXMuc3VwYWJhc2VVcmwgPSBzdXBhYmFzZVVybDtcbiAgICAgICAgdGhpcy5zdXBhYmFzZUtleSA9IHN1cGFiYXNlS2V5O1xuICAgICAgICBpZiAoIXN1cGFiYXNlVXJsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdXBhYmFzZVVybCBpcyByZXF1aXJlZC4nKTtcbiAgICAgICAgaWYgKCFzdXBhYmFzZUtleSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc3VwYWJhc2VLZXkgaXMgcmVxdWlyZWQuJyk7XG4gICAgICAgIGNvbnN0IF9zdXBhYmFzZVVybCA9IGVuc3VyZVRyYWlsaW5nU2xhc2goc3VwYWJhc2VVcmwpO1xuICAgICAgICBjb25zdCBiYXNlVXJsID0gbmV3IFVSTChfc3VwYWJhc2VVcmwpO1xuICAgICAgICB0aGlzLnJlYWx0aW1lVXJsID0gbmV3IFVSTCgncmVhbHRpbWUvdjEnLCBiYXNlVXJsKTtcbiAgICAgICAgdGhpcy5yZWFsdGltZVVybC5wcm90b2NvbCA9IHRoaXMucmVhbHRpbWVVcmwucHJvdG9jb2wucmVwbGFjZSgnaHR0cCcsICd3cycpO1xuICAgICAgICB0aGlzLmF1dGhVcmwgPSBuZXcgVVJMKCdhdXRoL3YxJywgYmFzZVVybCk7XG4gICAgICAgIHRoaXMuc3RvcmFnZVVybCA9IG5ldyBVUkwoJ3N0b3JhZ2UvdjEnLCBiYXNlVXJsKTtcbiAgICAgICAgdGhpcy5mdW5jdGlvbnNVcmwgPSBuZXcgVVJMKCdmdW5jdGlvbnMvdjEnLCBiYXNlVXJsKTtcbiAgICAgICAgLy8gZGVmYXVsdCBzdG9yYWdlIGtleSB1c2VzIHRoZSBzdXBhYmFzZSBwcm9qZWN0IHJlZiBhcyBhIG5hbWVzcGFjZVxuICAgICAgICBjb25zdCBkZWZhdWx0U3RvcmFnZUtleSA9IGBzYi0ke2Jhc2VVcmwuaG9zdG5hbWUuc3BsaXQoJy4nKVswXX0tYXV0aC10b2tlbmA7XG4gICAgICAgIGNvbnN0IERFRkFVTFRTID0ge1xuICAgICAgICAgICAgZGI6IERFRkFVTFRfREJfT1BUSU9OUyxcbiAgICAgICAgICAgIHJlYWx0aW1lOiBERUZBVUxUX1JFQUxUSU1FX09QVElPTlMsXG4gICAgICAgICAgICBhdXRoOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQVVUSF9PUFRJT05TKSwgeyBzdG9yYWdlS2V5OiBkZWZhdWx0U3RvcmFnZUtleSB9KSxcbiAgICAgICAgICAgIGdsb2JhbDogREVGQVVMVF9HTE9CQUxfT1BUSU9OUyxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBhcHBseVNldHRpbmdEZWZhdWx0cyhvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fSwgREVGQVVMVFMpO1xuICAgICAgICB0aGlzLnN0b3JhZ2VLZXkgPSAoX2EgPSBzZXR0aW5ncy5hdXRoLnN0b3JhZ2VLZXkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSAoX2IgPSBzZXR0aW5ncy5nbG9iYWwuaGVhZGVycykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDoge307XG4gICAgICAgIGlmICghc2V0dGluZ3MuYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aCA9IHRoaXMuX2luaXRTdXBhYmFzZUF1dGhDbGllbnQoKF9jID0gc2V0dGluZ3MuYXV0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDoge30sIHRoaXMuaGVhZGVycywgc2V0dGluZ3MuZ2xvYmFsLmZldGNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBzZXR0aW5ncy5hY2Nlc3NUb2tlbjtcbiAgICAgICAgICAgIHRoaXMuYXV0aCA9IG5ldyBQcm94eSh7fSwge1xuICAgICAgICAgICAgICAgIGdldDogKF8sIHByb3ApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBAc3VwYWJhc2Uvc3VwYWJhc2UtanM6IFN1cGFiYXNlIENsaWVudCBpcyBjb25maWd1cmVkIHdpdGggdGhlIGFjY2Vzc1Rva2VuIG9wdGlvbiwgYWNjZXNzaW5nIHN1cGFiYXNlLmF1dGguJHtTdHJpbmcocHJvcCl9IGlzIG5vdCBwb3NzaWJsZWApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZldGNoID0gZmV0Y2hXaXRoQXV0aChzdXBhYmFzZUtleSwgdGhpcy5fZ2V0QWNjZXNzVG9rZW4uYmluZCh0aGlzKSwgc2V0dGluZ3MuZ2xvYmFsLmZldGNoKTtcbiAgICAgICAgdGhpcy5yZWFsdGltZSA9IHRoaXMuX2luaXRSZWFsdGltZUNsaWVudChPYmplY3QuYXNzaWduKHsgaGVhZGVyczogdGhpcy5oZWFkZXJzLCBhY2Nlc3NUb2tlbjogdGhpcy5fZ2V0QWNjZXNzVG9rZW4uYmluZCh0aGlzKSB9LCBzZXR0aW5ncy5yZWFsdGltZSkpO1xuICAgICAgICB0aGlzLnJlc3QgPSBuZXcgUG9zdGdyZXN0Q2xpZW50KG5ldyBVUkwoJ3Jlc3QvdjEnLCBiYXNlVXJsKS5ocmVmLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICBzY2hlbWE6IHNldHRpbmdzLmRiLnNjaGVtYSxcbiAgICAgICAgICAgIGZldGNoOiB0aGlzLmZldGNoLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuRm9yQXV0aEV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1cGFiYXNlIEZ1bmN0aW9ucyBhbGxvd3MgeW91IHRvIGRlcGxveSBhbmQgaW52b2tlIGVkZ2UgZnVuY3Rpb25zLlxuICAgICAqL1xuICAgIGdldCBmdW5jdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb25zQ2xpZW50KHRoaXMuZnVuY3Rpb25zVXJsLmhyZWYsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIGN1c3RvbUZldGNoOiB0aGlzLmZldGNoLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VwYWJhc2UgU3RvcmFnZSBhbGxvd3MgeW91IHRvIG1hbmFnZSB1c2VyLWdlbmVyYXRlZCBjb250ZW50LCBzdWNoIGFzIHBob3RvcyBvciB2aWRlb3MuXG4gICAgICovXG4gICAgZ2V0IHN0b3JhZ2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3VwYWJhc2VTdG9yYWdlQ2xpZW50KHRoaXMuc3RvcmFnZVVybC5ocmVmLCB0aGlzLmhlYWRlcnMsIHRoaXMuZmV0Y2gpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgcXVlcnkgb24gYSB0YWJsZSBvciBhIHZpZXcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVsYXRpb24gLSBUaGUgdGFibGUgb3IgdmlldyBuYW1lIHRvIHF1ZXJ5XG4gICAgICovXG4gICAgZnJvbShyZWxhdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0LmZyb20ocmVsYXRpb24pO1xuICAgIH1cbiAgICAvLyBOT1RFOiBzaWduYXR1cmVzIG11c3QgYmUga2VwdCBpbiBzeW5jIHdpdGggUG9zdGdyZXN0Q2xpZW50LnNjaGVtYVxuICAgIC8qKlxuICAgICAqIFNlbGVjdCBhIHNjaGVtYSB0byBxdWVyeSBvciBwZXJmb3JtIGFuIGZ1bmN0aW9uIChycGMpIGNhbGwuXG4gICAgICpcbiAgICAgKiBUaGUgc2NoZW1hIG5lZWRzIHRvIGJlIG9uIHRoZSBsaXN0IG9mIGV4cG9zZWQgc2NoZW1hcyBpbnNpZGUgU3VwYWJhc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2NoZW1hIC0gVGhlIHNjaGVtYSB0byBxdWVyeVxuICAgICAqL1xuICAgIHNjaGVtYShzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5zY2hlbWEoc2NoZW1hKTtcbiAgICB9XG4gICAgLy8gTk9URTogc2lnbmF0dXJlcyBtdXN0IGJlIGtlcHQgaW4gc3luYyB3aXRoIFBvc3RncmVzdENsaWVudC5ycGNcbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgZnVuY3Rpb24gY2FsbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiBuYW1lIHRvIGNhbGxcbiAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgZnVuY3Rpb24gY2FsbFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gTmFtZWQgcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvcHRpb25zLmhlYWQgLSBXaGVuIHNldCB0byBgdHJ1ZWAsIGBkYXRhYCB3aWxsIG5vdCBiZSByZXR1cm5lZC5cbiAgICAgKiBVc2VmdWwgaWYgeW91IG9ubHkgbmVlZCB0aGUgY291bnQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZ2V0IC0gV2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2l0aFxuICAgICAqIHJlYWQtb25seSBhY2Nlc3MgbW9kZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jb3VudCAtIENvdW50IGFsZ29yaXRobSB0byB1c2UgdG8gY291bnQgcm93cyByZXR1cm5lZCBieSB0aGVcbiAgICAgKiBmdW5jdGlvbi4gT25seSBhcHBsaWNhYmxlIGZvciBbc2V0LXJldHVybmluZ1xuICAgICAqIGZ1bmN0aW9uc10oaHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy9jdXJyZW50L2Z1bmN0aW9ucy1zcmYuaHRtbCkuXG4gICAgICpcbiAgICAgKiBgXCJleGFjdFwiYDogRXhhY3QgYnV0IHNsb3cgY291bnQgYWxnb3JpdGhtLiBQZXJmb3JtcyBhIGBDT1VOVCgqKWAgdW5kZXIgdGhlXG4gICAgICogaG9vZC5cbiAgICAgKlxuICAgICAqIGBcInBsYW5uZWRcImA6IEFwcHJveGltYXRlZCBidXQgZmFzdCBjb3VudCBhbGdvcml0aG0uIFVzZXMgdGhlIFBvc3RncmVzXG4gICAgICogc3RhdGlzdGljcyB1bmRlciB0aGUgaG9vZC5cbiAgICAgKlxuICAgICAqIGBcImVzdGltYXRlZFwiYDogVXNlcyBleGFjdCBjb3VudCBmb3IgbG93IG51bWJlcnMgYW5kIHBsYW5uZWQgY291bnQgZm9yIGhpZ2hcbiAgICAgKiBudW1iZXJzLlxuICAgICAqL1xuICAgIHJwYyhmbiwgYXJncyA9IHt9LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5ycGMoZm4sIGFyZ3MsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgUmVhbHRpbWUgY2hhbm5lbCB3aXRoIEJyb2FkY2FzdCwgUHJlc2VuY2UsIGFuZCBQb3N0Z3JlcyBDaGFuZ2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgUmVhbHRpbWUgY2hhbm5lbC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIFJlYWx0aW1lIGNoYW5uZWwuXG4gICAgICpcbiAgICAgKi9cbiAgICBjaGFubmVsKG5hbWUsIG9wdHMgPSB7IGNvbmZpZzoge30gfSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFsdGltZS5jaGFubmVsKG5hbWUsIG9wdHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBSZWFsdGltZSBjaGFubmVscy5cbiAgICAgKi9cbiAgICBnZXRDaGFubmVscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhbHRpbWUuZ2V0Q2hhbm5lbHMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmVzIGFuZCByZW1vdmVzIFJlYWx0aW1lIGNoYW5uZWwgZnJvbSBSZWFsdGltZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWx0aW1lQ2hhbm5lbH0gY2hhbm5lbCAtIFRoZSBuYW1lIG9mIHRoZSBSZWFsdGltZSBjaGFubmVsLlxuICAgICAqXG4gICAgICovXG4gICAgcmVtb3ZlQ2hhbm5lbChjaGFubmVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWx0aW1lLnJlbW92ZUNoYW5uZWwoY2hhbm5lbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyBhbmQgcmVtb3ZlcyBhbGwgUmVhbHRpbWUgY2hhbm5lbHMgZnJvbSBSZWFsdGltZSBjbGllbnQuXG4gICAgICovXG4gICAgcmVtb3ZlQWxsQ2hhbm5lbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWx0aW1lLnJlbW92ZUFsbENoYW5uZWxzKCk7XG4gICAgfVxuICAgIF9nZXRBY2Nlc3NUb2tlbigpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMuYWNjZXNzVG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0geWllbGQgdGhpcy5hdXRoLmdldFNlc3Npb24oKTtcbiAgICAgICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSBkYXRhLnNlc3Npb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hY2Nlc3NfdG9rZW4pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaW5pdFN1cGFiYXNlQXV0aENsaWVudCh7IGF1dG9SZWZyZXNoVG9rZW4sIHBlcnNpc3RTZXNzaW9uLCBkZXRlY3RTZXNzaW9uSW5VcmwsIHN0b3JhZ2UsIHN0b3JhZ2VLZXksIGZsb3dUeXBlLCBsb2NrLCBkZWJ1ZywgfSwgaGVhZGVycywgZmV0Y2gpIHtcbiAgICAgICAgY29uc3QgYXV0aEhlYWRlcnMgPSB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5zdXBhYmFzZUtleX1gLFxuICAgICAgICAgICAgYXBpa2V5OiBgJHt0aGlzLnN1cGFiYXNlS2V5fWAsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgU3VwYWJhc2VBdXRoQ2xpZW50KHtcbiAgICAgICAgICAgIHVybDogdGhpcy5hdXRoVXJsLmhyZWYsXG4gICAgICAgICAgICBoZWFkZXJzOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGF1dGhIZWFkZXJzKSwgaGVhZGVycyksXG4gICAgICAgICAgICBzdG9yYWdlS2V5OiBzdG9yYWdlS2V5LFxuICAgICAgICAgICAgYXV0b1JlZnJlc2hUb2tlbixcbiAgICAgICAgICAgIHBlcnNpc3RTZXNzaW9uLFxuICAgICAgICAgICAgZGV0ZWN0U2Vzc2lvbkluVXJsLFxuICAgICAgICAgICAgc3RvcmFnZSxcbiAgICAgICAgICAgIGZsb3dUeXBlLFxuICAgICAgICAgICAgbG9jayxcbiAgICAgICAgICAgIGRlYnVnLFxuICAgICAgICAgICAgZmV0Y2gsXG4gICAgICAgICAgICAvLyBhdXRoIGNoZWNrcyBpZiB0aGVyZSBpcyBhIGN1c3RvbSBhdXRob3JpemFpdG9uIGhlYWRlciB1c2luZyB0aGlzIGZsYWdcbiAgICAgICAgICAgIC8vIHNvIGl0IGtub3dzIHdoZXRoZXIgdG8gcmV0dXJuIGFuIGVycm9yIHdoZW4gZ2V0VXNlciBpcyBjYWxsZWQgd2l0aCBubyBzZXNzaW9uXG4gICAgICAgICAgICBoYXNDdXN0b21BdXRob3JpemF0aW9uSGVhZGVyOiAnQXV0aG9yaXphdGlvbicgaW4gdGhpcy5oZWFkZXJzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2luaXRSZWFsdGltZUNsaWVudChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVhbHRpbWVDbGllbnQodGhpcy5yZWFsdGltZVVybC5ocmVmLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHBhcmFtczogT2JqZWN0LmFzc2lnbih7IGFwaWtleTogdGhpcy5zdXBhYmFzZUtleSB9LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucGFyYW1zKSB9KSk7XG4gICAgfVxuICAgIF9saXN0ZW5Gb3JBdXRoRXZlbnRzKCkge1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuYXV0aC5vbkF1dGhTdGF0ZUNoYW5nZSgoZXZlbnQsIHNlc3Npb24pID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVRva2VuQ2hhbmdlZChldmVudCwgJ0NMSUVOVCcsIHNlc3Npb24gPT09IG51bGwgfHwgc2Vzc2lvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2Vzc2lvbi5hY2Nlc3NfdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIF9oYW5kbGVUb2tlbkNoYW5nZWQoZXZlbnQsIHNvdXJjZSwgdG9rZW4pIHtcbiAgICAgICAgaWYgKChldmVudCA9PT0gJ1RPS0VOX1JFRlJFU0hFRCcgfHwgZXZlbnQgPT09ICdTSUdORURfSU4nKSAmJlxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VkQWNjZXNzVG9rZW4gIT09IHRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZWRBY2Nlc3NUb2tlbiA9IHRva2VuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2ZW50ID09PSAnU0lHTkVEX09VVCcpIHtcbiAgICAgICAgICAgIHRoaXMucmVhbHRpbWUuc2V0QXV0aCgpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSA9PSAnU1RPUkFHRScpXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoLnNpZ25PdXQoKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlZEFjY2Vzc1Rva2VuID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3VwYWJhc2VDbGllbnQuanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5leHBvcnQgZnVuY3Rpb24gdXVpZCgpIHtcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCwgdiA9IGMgPT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVRyYWlsaW5nU2xhc2godXJsKSB7XG4gICAgcmV0dXJuIHVybC5lbmRzV2l0aCgnLycpID8gdXJsIDogdXJsICsgJy8nO1xufVxuZXhwb3J0IGNvbnN0IGlzQnJvd3NlciA9ICgpID0+IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5U2V0dGluZ0RlZmF1bHRzKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCB7IGRiOiBkYk9wdGlvbnMsIGF1dGg6IGF1dGhPcHRpb25zLCByZWFsdGltZTogcmVhbHRpbWVPcHRpb25zLCBnbG9iYWw6IGdsb2JhbE9wdGlvbnMsIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHsgZGI6IERFRkFVTFRfREJfT1BUSU9OUywgYXV0aDogREVGQVVMVF9BVVRIX09QVElPTlMsIHJlYWx0aW1lOiBERUZBVUxUX1JFQUxUSU1FX09QVElPTlMsIGdsb2JhbDogREVGQVVMVF9HTE9CQUxfT1BUSU9OUywgfSA9IGRlZmF1bHRzO1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgZGI6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9EQl9PUFRJT05TKSwgZGJPcHRpb25zKSxcbiAgICAgICAgYXV0aDogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0FVVEhfT1BUSU9OUyksIGF1dGhPcHRpb25zKSxcbiAgICAgICAgcmVhbHRpbWU6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9SRUFMVElNRV9PUFRJT05TKSwgcmVhbHRpbWVPcHRpb25zKSxcbiAgICAgICAgZ2xvYmFsOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9HTE9CQUxfT1BUSU9OUyksIGdsb2JhbE9wdGlvbnMpLCB7IGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgKChfYSA9IERFRkFVTFRfR0xPQkFMX09QVElPTlMgPT09IG51bGwgfHwgREVGQVVMVF9HTE9CQUxfT1BUSU9OUyA9PT0gdm9pZCAwID8gdm9pZCAwIDogREVGQVVMVF9HTE9CQUxfT1BUSU9OUy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLCAoKF9iID0gZ2xvYmFsT3B0aW9ucyA9PT0gbnVsbCB8fCBnbG9iYWxPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWxPcHRpb25zLmhlYWRlcnMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9KSkgfSksXG4gICAgICAgIGFjY2Vzc1Rva2VuOiAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7IHJldHVybiAnJzsgfSksXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy5hY2Nlc3NUb2tlbikge1xuICAgICAgICByZXN1bHQuYWNjZXNzVG9rZW4gPSBvcHRpb25zLmFjY2Vzc1Rva2VuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gaGFjayBhcm91bmQgUmVxdWlyZWQ8PlxuICAgICAgICBkZWxldGUgcmVzdWx0LmFjY2Vzc1Rva2VuO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuXG4vLyBDdXN0b20gc3RvcmFnZSBhZGFwdGVyIGZvciBDaHJvbWUgZXh0ZW5zaW9uXG5jb25zdCBjdXN0b21TdG9yYWdlQWRhcHRlciA9IHtcbiAgYXN5bmMgZ2V0SXRlbShrZXk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChrZXkpO1xuICAgIHJldHVybiByZXN1bHRba2V5XSB8fCBudWxsO1xuICB9LFxuICBhc3luYyBzZXRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgW2tleV06IHZhbHVlIH0pO1xuICB9LFxuICBhc3luYyByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwucmVtb3ZlKGtleSk7XG4gIH0sXG59O1xuXG5jb25zdCBzdXBhYmFzZVVybCA9ICdodHRwczovL3Rwam55aXl2cHl6emJ6aGFqYmpoLnN1cGFiYXNlLmNvJztcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9ICdleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKcGMzTWlPaUp6ZFhCaFltRnpaU0lzSW5KbFppSTZJblJ3YW01NWFYbDJjSGw2ZW1KNmFHRnFZbXBvSWl3aWNtOXNaU0k2SW1GdWIyNGlMQ0pwWVhRaU9qRTNOVEUyTkRBMU5UUXNJbVY0Y0NJNk1qQTJOekl4TmpVMU5IMC5jZmxGZEh5dGxUVUFfSF9BUDdFM0tyeTktUy14dzQ1cElSb0pRdGZrNEFFJztcblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXksIHtcbiAgYXV0aDoge1xuICAgIHN0b3JhZ2U6IGN1c3RvbVN0b3JhZ2VBZGFwdGVyLFxuICAgIGF1dG9SZWZyZXNoVG9rZW46IHRydWUsXG4gICAgcGVyc2lzdFNlc3Npb246IHRydWUsXG4gICAgZGV0ZWN0U2Vzc2lvbkluVXJsOiB0cnVlLFxuICB9LFxufSk7ICIsImltcG9ydCBTdXBhYmFzZUNsaWVudCBmcm9tICcuL1N1cGFiYXNlQ2xpZW50JztcbmV4cG9ydCAqIGZyb20gJ0BzdXBhYmFzZS9hdXRoLWpzJztcbmV4cG9ydCB7IFBvc3RncmVzdEVycm9yLCB9IGZyb20gJ0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMnO1xuZXhwb3J0IHsgRnVuY3Rpb25zSHR0cEVycm9yLCBGdW5jdGlvbnNGZXRjaEVycm9yLCBGdW5jdGlvbnNSZWxheUVycm9yLCBGdW5jdGlvbnNFcnJvciwgRnVuY3Rpb25SZWdpb24sIH0gZnJvbSAnQHN1cGFiYXNlL2Z1bmN0aW9ucy1qcyc7XG5leHBvcnQgKiBmcm9tICdAc3VwYWJhc2UvcmVhbHRpbWUtanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdXBhYmFzZUNsaWVudCB9IGZyb20gJy4vU3VwYWJhc2VDbGllbnQnO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFN1cGFiYXNlIENsaWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUNsaWVudCA9IChzdXBhYmFzZVVybCwgc3VwYWJhc2VLZXksIG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gbmV3IFN1cGFiYXNlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUtleSwgb3B0aW9ucyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tICcuL3N1cGFiYXNlJztcbmltcG9ydCB7IFNhdmVkTGluaywgQ29sbGVjdGlvbiwgU3RvcmFnZURhdGEsIENhdGVnb3J5LCBTbWFydENvbGxlY3Rpb24gfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBBbmFseXRpY3NTZXJ2aWNlIH0gZnJvbSAnLi9hbmFseXRpY3MnO1xuXG5jbGFzcyBTdG9yYWdlTWFuYWdlciB7XG4gIGFzeW5jIGdldERhdGEoKTogUHJvbWlzZTxTdG9yYWdlRGF0YT4ge1xuICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbkRhdGEsIGVycm9yOiBzZXNzaW9uRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xuICAgIGlmIChzZXNzaW9uRXJyb3IgfHwgIXNlc3Npb25EYXRhLnNlc3Npb24pIHtcbiAgICAgIC8vIE5vIGFjdGl2ZSBzZXNzaW9uLCByZXR1cm4gZGVmYXVsdCBlbXB0eSBkYXRhLlxuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdERhdGEoKTtcbiAgICB9XG5cbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbi51c2VyO1xuICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBkYXRhIGZvciB1c2VyOicsIHVzZXIuaWQpO1xuXG4gICAgY29uc3QgW2xpbmtzUmVzLCBjb2xsZWN0aW9uc1Jlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBzdXBhYmFzZS5mcm9tKCdsaW5rcycpLnNlbGVjdCgnKicpLmVxKCd1c2VyX2lkJywgdXNlci5pZCksXG4gICAgICBzdXBhYmFzZS5mcm9tKCdjb2xsZWN0aW9ucycpLnNlbGVjdCgnKicpLmVxKCd1c2VyX2lkJywgdXNlci5pZClcbiAgICBdKTtcblxuICAgIGlmIChsaW5rc1Jlcy5lcnJvcikgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbGlua3M6JywgbGlua3NSZXMuZXJyb3IpO1xuICAgIGlmIChjb2xsZWN0aW9uc1Jlcy5lcnJvcikgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgY29sbGVjdGlvbnM6JywgY29sbGVjdGlvbnNSZXMuZXJyb3IpO1xuXG4gICAgLy8gTWFwIGRhdGFiYXNlIGZpZWxkcyB0byBUeXBlU2NyaXB0IGNhbWVsQ2FzZVxuICAgIGNvbnN0IGxpbmtzID0gKGxpbmtzUmVzLmRhdGEgfHwgW10pLm1hcCgoZGJMaW5rOiBhbnkpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdTdG9yYWdlOiBnZXREYXRhIGhpZ2hsaWdodHMgZm9yIGxpbmsnLCBkYkxpbmsuaWQsIGRiTGluay5oaWdobGlnaHRzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBkYkxpbmsuaWQsXG4gICAgICAgIHVybDogZGJMaW5rLnVybCxcbiAgICAgICAgdGl0bGU6IGRiTGluay50aXRsZSxcbiAgICAgICAgZmF2aWNvbjogZGJMaW5rLmZhdmljb24sXG4gICAgICAgIHVzZXJOb3RlOiBkYkxpbmsudXNlcl9ub3RlIHx8ICcnLFxuICAgICAgICBhaVN1bW1hcnk6IGRiTGluay5haV9zdW1tYXJ5LFxuICAgICAgICBjYXRlZ29yeTogZGJMaW5rLmNhdGVnb3J5LFxuICAgICAgICBjb2xsZWN0aW9uSWQ6IGRiTGluay5jb2xsZWN0aW9uX2lkLFxuICAgICAgICBpc0luSW5ib3g6IGRiTGluay5pc19pbl9pbmJveCB8fCBmYWxzZSxcbiAgICAgICAgaGlnaGxpZ2h0czogdGhpcy5wYXJzZUhpZ2hsaWdodHMoZGJMaW5rLmhpZ2hsaWdodHMpLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGRiTGluay5jcmVhdGVkX2F0KSxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZShkYkxpbmsudXBkYXRlZF9hdCksXG4gICAgICAgIGRvbWFpbjogZGJMaW5rLmRvbWFpbixcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBjb2xsZWN0aW9ucyA9IChjb2xsZWN0aW9uc1Jlcy5kYXRhIHx8IFtdKS5tYXAoKGRiQ29sOiBhbnkpID0+ICh7XG4gICAgICBpZDogZGJDb2wuaWQsXG4gICAgICBuYW1lOiBkYkNvbC5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGRiQ29sLmRlc2NyaXB0aW9uLFxuICAgICAgY29sb3I6IGRiQ29sLmNvbG9yLFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShkYkNvbC5jcmVhdGVkX2F0KSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoZGJDb2wudXBkYXRlZF9hdCksXG4gICAgfSkpO1xuXG4gICAgY29uc3QgZGF0YTogU3RvcmFnZURhdGEgPSB7XG4gICAgICBsaW5rcyxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgc21hcnRDb2xsZWN0aW9uczogYXdhaXQgdGhpcy5nZXRTbWFydENvbGxlY3Rpb25zKCksXG4gICAgICBjYXRlZ29yaWVzOiB0aGlzLmdldERlZmF1bHRDYXRlZ29yaWVzKCksXG4gICAgICBzZXR0aW5nczoge1xuICAgICAgICBkZWZhdWx0Q2F0ZWdvcnk6ICdnZW5lcmFsJyxcbiAgICAgICAgYXV0b1N1bW1hcml6ZTogdHJ1ZSxcbiAgICAgICAgZW5hYmxlU21hcnRDb2xsZWN0aW9uczogdHJ1ZSxcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coJ0RhdGEgZmV0Y2hlZCBmcm9tIFN1cGFiYXNlOicsIGRhdGEpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIFxuICBhc3luYyBhZGRMaW5rKGxpbms6IE9taXQ8U2F2ZWRMaW5rLCAnaWQnIHwgJ2NyZWF0ZWRBdCcgfCAndXBkYXRlZEF0JyB8ICd1c2VyX2lkJz4pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbiwgZXJyb3I/OiBzdHJpbmcsIGxpbmtJZD86IHN0cmluZyB9PiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgY29uc3QgdXNlciA9IHNlc3Npb25EYXRhLnNlc3Npb24/LnVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVc2VyIG5vdCBsb2dnZWQgaW4nKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ1VzZXIgbm90IGxvZ2dlZCBpbi4nIH07XG4gICAgfVxuXG4gICAgLy8gTWFwIGNhbWVsQ2FzZSB0byBzbmFrZV9jYXNlIGZvciBkYXRhYmFzZSBpbnNlcnRpb25cbiAgICBjb25zdCBkYkxpbmsgPSB7XG4gICAgICB1c2VyX2lkOiB1c2VyLmlkLFxuICAgICAgY29sbGVjdGlvbl9pZDogbGluay5jb2xsZWN0aW9uSWQgfHwgbnVsbCxcbiAgICAgIHVybDogbGluay51cmwsXG4gICAgICB0aXRsZTogbGluay50aXRsZSxcbiAgICAgIGZhdmljb246IGxpbmsuZmF2aWNvbixcbiAgICAgIGRvbWFpbjogbGluay5kb21haW4sXG4gICAgICB1c2VyX25vdGU6IGxpbmsudXNlck5vdGUsXG4gICAgICBhaV9zdW1tYXJ5OiBsaW5rLmFpU3VtbWFyeSxcbiAgICAgIGNhdGVnb3J5OiBsaW5rLmNhdGVnb3J5LFxuICAgICAgaXNfaW5faW5ib3g6IGxpbmsuaXNJbkluYm94IHx8IGZhbHNlLFxuICAgICAgaGlnaGxpZ2h0czogbGluay5oaWdobGlnaHRzID8gSlNPTi5zdHJpbmdpZnkobGluay5oaWdobGlnaHRzKSA6IG51bGwsXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZygnU3RvcmFnZTogYWRkTGluayBkYkxpbmsuaGlnaGxpZ2h0czonLCBkYkxpbmsuaGlnaGxpZ2h0cyk7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnbGlua3MnKS5pbnNlcnQoZGJMaW5rKS5zZWxlY3QoJ2lkJykuc2luZ2xlKCk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBhZGRMaW5rIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRGF0YWJhc2UgZXJyb3Igb2NjdXJyZWQuJyB9O1xuICAgIH1cbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBsaW5rSWQ6IGRhdGEuaWQgfTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUxpbmsobGlua0lkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8U2F2ZWRMaW5rPik6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIENvbnZlcnQgaGlnaGxpZ2h0cyB0byBKU09OIGZvciBkYXRhYmFzZSBzdG9yYWdlXG4gICAgY29uc3QgZGJVcGRhdGVzOiBhbnkgPSB7IC4uLnVwZGF0ZXMsIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkgfTtcbiAgICBpZiAodXBkYXRlcy5oaWdobGlnaHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRiVXBkYXRlcy5oaWdobGlnaHRzID0gdXBkYXRlcy5oaWdobGlnaHRzID8gSlNPTi5zdHJpbmdpZnkodXBkYXRlcy5oaWdobGlnaHRzKSA6IG51bGw7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBjYW1lbENhc2UgZmllbGRzIHRoYXQgZG9uJ3QgZXhpc3QgaW4gZGF0YWJhc2VcbiAgICBkZWxldGUgZGJVcGRhdGVzLmNvbGxlY3Rpb25JZDtcbiAgICBkZWxldGUgZGJVcGRhdGVzLnVzZXJOb3RlO1xuICAgIGRlbGV0ZSBkYlVwZGF0ZXMuYWlTdW1tYXJ5O1xuICAgIGRlbGV0ZSBkYlVwZGF0ZXMuaXNJbkluYm94O1xuICAgIGRlbGV0ZSBkYlVwZGF0ZXMuY3JlYXRlZEF0O1xuICAgIGRlbGV0ZSBkYlVwZGF0ZXMudXBkYXRlZEF0O1xuICAgIFxuICAgIC8vIE1hcCBjYW1lbENhc2UgdG8gc25ha2VfY2FzZSBmb3IgZGF0YWJhc2UgZmllbGRzXG4gICAgaWYgKHVwZGF0ZXMuY29sbGVjdGlvbklkICE9PSB1bmRlZmluZWQpIGRiVXBkYXRlcy5jb2xsZWN0aW9uX2lkID0gdXBkYXRlcy5jb2xsZWN0aW9uSWQ7XG4gICAgaWYgKHVwZGF0ZXMudXNlck5vdGUgIT09IHVuZGVmaW5lZCkgZGJVcGRhdGVzLnVzZXJfbm90ZSA9IHVwZGF0ZXMudXNlck5vdGU7XG4gICAgaWYgKHVwZGF0ZXMuYWlTdW1tYXJ5ICE9PSB1bmRlZmluZWQpIGRiVXBkYXRlcy5haV9zdW1tYXJ5ID0gdXBkYXRlcy5haVN1bW1hcnk7XG4gICAgaWYgKHVwZGF0ZXMuaXNJbkluYm94ICE9PSB1bmRlZmluZWQpIGRiVXBkYXRlcy5pc19pbl9pbmJveCA9IHVwZGF0ZXMuaXNJbkluYm94O1xuICAgIGNvbnNvbGUubG9nKCdTdG9yYWdlOiB1cGRhdGVMaW5rIGRiVXBkYXRlcy5oaWdobGlnaHRzOicsIGRiVXBkYXRlcy5oaWdobGlnaHRzKTtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdsaW5rcycpLnVwZGF0ZShkYlVwZGF0ZXMpLmVxKCdpZCcsIGxpbmtJZCk7XG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZUxpbmsobGlua0lkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdsaW5rcycpLmRlbGV0ZSgpLmVxKCdpZCcsIGxpbmtJZCk7XG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIGFzeW5jIGFkZENvbGxlY3Rpb24oY29sbGVjdGlvbjogT21pdDxDb2xsZWN0aW9uLCAnaWQnIHwgJ2NyZWF0ZWRBdCcgfCAndXBkYXRlZEF0JyB8ICd1c2VyX2lkJz4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbj8udXNlcjtcbiAgICBpZiAoIXVzZXIpIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgbG9nZ2VkIGluLicpO1xuICAgIFxuICAgIC8vIE1hcCBjYW1lbENhc2UgdG8gc25ha2VfY2FzZSBmb3IgZGF0YWJhc2UgaW5zZXJ0aW9uXG4gICAgY29uc3QgZGJDb2xsZWN0aW9uID0ge1xuICAgICAgdXNlcl9pZDogdXNlci5pZCxcbiAgICAgIG5hbWU6IGNvbGxlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBjb2xsZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgY29sb3I6IGNvbGxlY3Rpb24uY29sb3IsXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdjb2xsZWN0aW9ucycpLmluc2VydChkYkNvbGxlY3Rpb24pO1xuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBhc3luYyB1cGRhdGVDb2xsZWN0aW9uKGNvbGxlY3Rpb25JZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPENvbGxlY3Rpb24+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbSgnY29sbGVjdGlvbnMnKS51cGRhdGUoeyAuLi51cGRhdGVzLCB1cGRhdGVkQXQ6IG5ldyBEYXRlKCkgfSkuZXEoJ2lkJywgY29sbGVjdGlvbklkKTtcbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlQ29sbGVjdGlvbihjb2xsZWN0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIFdlIGNhbiBhZGQgbG9naWMgaGVyZSB0byByZWFzc2lnbiBsaW5rcyBpZiBuZWVkZWQsIGZvciBub3cganVzdCBkZWxldGVcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKCdjb2xsZWN0aW9ucycpLmRlbGV0ZSgpLmVxKCdpZCcsIGNvbGxlY3Rpb25JZCk7XG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIGFzeW5jIHNlYXJjaExpbmtzKHF1ZXJ5OiBzdHJpbmcpOiBQcm9taXNlPFNhdmVkTGlua1tdPiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgY29uc3QgdXNlciA9IHNlc3Npb25EYXRhLnNlc3Npb24/LnVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVc2VyIG5vdCBsb2dnZWQgaW4nKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBpZiAoIXF1ZXJ5LnRyaW0oKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ3NlYXJjaF91c2VyX2xpbmtzJywge1xuICAgICAgICBzZWFyY2hfcXVlcnk6IHF1ZXJ5LnRyaW0oKSxcbiAgICAgICAgdXNlcl91dWlkOiB1c2VyLmlkLFxuICAgICAgICByZXN1bHRfbGltaXQ6IDUwXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NlYXJjaCBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFwIGRhdGFiYXNlIHJlc3VsdHMgdG8gVHlwZVNjcmlwdCBvYmplY3RzXG4gICAgICByZXR1cm4gKGRhdGEgfHwgW10pLm1hcCgocmVzdWx0OiBhbnkpID0+ICh7XG4gICAgICAgIGlkOiByZXN1bHQuaWQsXG4gICAgICAgIHVybDogcmVzdWx0LnVybCxcbiAgICAgICAgdGl0bGU6IHJlc3VsdC50aXRsZSxcbiAgICAgICAgZmF2aWNvbjogcmVzdWx0LmZhdmljb24sXG4gICAgICAgIHVzZXJOb3RlOiByZXN1bHQudXNlcl9ub3RlIHx8ICcnLFxuICAgICAgICBhaVN1bW1hcnk6IHJlc3VsdC5haV9zdW1tYXJ5LFxuICAgICAgICBjYXRlZ29yeTogcmVzdWx0LmNhdGVnb3J5LFxuICAgICAgICBjb2xsZWN0aW9uSWQ6IHJlc3VsdC5jb2xsZWN0aW9uX2lkLFxuICAgICAgICBpc0luSW5ib3g6IHJlc3VsdC5pc19pbl9pbmJveCB8fCBmYWxzZSxcbiAgICAgICAgaGlnaGxpZ2h0czogdGhpcy5wYXJzZUhpZ2hsaWdodHMocmVzdWx0LmhpZ2hsaWdodHMpLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKHJlc3VsdC5jcmVhdGVkX2F0KSxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZShyZXN1bHQudXBkYXRlZF9hdCksXG4gICAgICAgIGRvbWFpbjogcmVzdWx0LmRvbWFpbixcbiAgICAgICAgLy8gQWRkIHNlYXJjaC1zcGVjaWZpYyBwcm9wZXJ0aWVzXG4gICAgICAgIHNlYXJjaFJhbms6IHJlc3VsdC5yYW5rLFxuICAgICAgICBzZWFyY2hIZWFkbGluZTogcmVzdWx0LmhlYWRsaW5lLFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdTZWFyY2ggZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRVc2VyVGFncygpOiBQcm9taXNlPHsgaWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nOyB1c2FnZUNvdW50OiBudW1iZXIgfVtdPiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgY29uc3QgdXNlciA9IHNlc3Npb25EYXRhLnNlc3Npb24/LnVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVc2VyIG5vdCBsb2dnZWQgaW4nKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UucnBjKCdnZXRfdXNlcl90YWdzX3dpdGhfY291bnRzJywge1xuICAgICAgICB1c2VyX3V1aWQ6IHVzZXIuaWRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciB0YWdzOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKGRhdGEgfHwgW10pLm1hcCgodGFnOiBhbnkpID0+ICh7XG4gICAgICAgIGlkOiB0YWcuaWQsXG4gICAgICAgIG5hbWU6IHRhZy5uYW1lLFxuICAgICAgICB1c2FnZUNvdW50OiB0YWcudXNhZ2VfY291bnQgfHwgMFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHVzZXIgdGFnczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0TGlua1RhZ3MobGlua0lkOiBzdHJpbmcpOiBQcm9taXNlPHsgaWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nIH1bXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2dldF9saW5rX3RhZ3MnLCB7XG4gICAgICAgIGxpbmtfdXVpZDogbGlua0lkXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGxpbmsgdGFnczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGEgfHwgW107XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgbGluayB0YWdzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBhZGRUYWdzVG9MaW5rKGxpbmtJZDogc3RyaW5nLCB0YWdOYW1lczogc3RyaW5nW10pOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbkRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xuICAgIGNvbnN0IHVzZXIgPSBzZXNzaW9uRGF0YS5zZXNzaW9uPy51c2VyO1xuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnVXNlciBub3QgbG9nZ2VkIGluLicgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UucnBjKCdhZGRfdGFnc190b19saW5rJywge1xuICAgICAgICBsaW5rX3V1aWQ6IGxpbmtJZCxcbiAgICAgICAgdGFnX25hbWVzOiB0YWdOYW1lcyxcbiAgICAgICAgdXNlcl91dWlkOiB1c2VyLmlkXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyB0YWdzIHRvIGxpbms6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBhZGQgdGFncy4nIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGFkZCB0YWdzIHRvIGxpbms6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRMaW5rc0J5VGFnKHRhZ05hbWU6IHN0cmluZyk6IFByb21pc2U8U2F2ZWRMaW5rW10+IHtcbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbj8udXNlcjtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VzZXIgbm90IGxvZ2dlZCBpbicpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2dldF9saW5rc19ieV90YWcnLCB7XG4gICAgICAgIHVzZXJfdXVpZDogdXNlci5pZCxcbiAgICAgICAgdGFnX25hbWU6IHRhZ05hbWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbGlua3MgYnkgdGFnOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICAvLyBNYXAgZGF0YWJhc2UgcmVzdWx0cyB0byBUeXBlU2NyaXB0IG9iamVjdHNcbiAgICAgIHJldHVybiAoZGF0YSB8fCBbXSkubWFwKChkYkxpbms6IGFueSkgPT4gKHtcbiAgICAgICAgaWQ6IGRiTGluay5pZCxcbiAgICAgICAgdXJsOiBkYkxpbmsudXJsLFxuICAgICAgICB0aXRsZTogZGJMaW5rLnRpdGxlLFxuICAgICAgICBmYXZpY29uOiBkYkxpbmsuZmF2aWNvbixcbiAgICAgICAgdXNlck5vdGU6IGRiTGluay51c2VyX25vdGUgfHwgJycsXG4gICAgICAgIGFpU3VtbWFyeTogZGJMaW5rLmFpX3N1bW1hcnksXG4gICAgICAgIGNhdGVnb3J5OiBkYkxpbmsuY2F0ZWdvcnksXG4gICAgICAgIGNvbGxlY3Rpb25JZDogZGJMaW5rLmNvbGxlY3Rpb25faWQsXG4gICAgICAgIGlzSW5JbmJveDogZGJMaW5rLmlzX2luX2luYm94IHx8IGZhbHNlLFxuICAgICAgICBoaWdobGlnaHRzOiB0aGlzLnBhcnNlSGlnaGxpZ2h0cyhkYkxpbmsuaGlnaGxpZ2h0cyksXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoZGJMaW5rLmNyZWF0ZWRfYXQpLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKGRiTGluay51cGRhdGVkX2F0KSxcbiAgICAgICAgZG9tYWluOiBkYkxpbmsuZG9tYWluLFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGxpbmtzIGJ5IHRhZzonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY2xlYW51cFVudXNlZFRhZ3MoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbj8udXNlcjtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2NsZWFudXBfdW51c2VkX3RhZ3MnLCB7XG4gICAgICAgIHVzZXJfdXVpZDogdXNlci5pZFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjbGVhbmluZyB1cCB1bnVzZWQgdGFnczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YSB8fCAwO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY2xlYW51cCB1bnVzZWQgdGFnczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICAvLyBJbmJveC1zcGVjaWZpYyBtZXRob2RzXG4gIGFzeW5jIG1vdmVUb0luYm94KGxpbmtJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdsaW5rcycpXG4gICAgICAudXBkYXRlKHsgXG4gICAgICAgIGlzX2luX2luYm94OiB0cnVlLFxuICAgICAgICBjb2xsZWN0aW9uX2lkOiBudWxsLFxuICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pXG4gICAgICAuZXEoJ2lkJywgbGlua0lkKTtcbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICB9XG5cbiAgYXN5bmMgbW92ZUZyb21JbmJveChsaW5rSWQ6IHN0cmluZywgY29sbGVjdGlvbklkPzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdsaW5rcycpXG4gICAgICAudXBkYXRlKHsgXG4gICAgICAgIGlzX2luX2luYm94OiBmYWxzZSxcbiAgICAgICAgY29sbGVjdGlvbl9pZDogY29sbGVjdGlvbklkIHx8IG51bGwsXG4gICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSlcbiAgICAgIC5lcSgnaWQnLCBsaW5rSWQpO1xuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBhc3luYyBnZXRJbmJveExpbmtzKCk6IFByb21pc2U8U2F2ZWRMaW5rW10+IHtcbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbj8udXNlcjtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2xpbmtzJylcbiAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgLmVxKCd1c2VyX2lkJywgdXNlci5pZClcbiAgICAgIC5lcSgnaXNfaW5faW5ib3gnLCB0cnVlKVxuICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBpbmJveCBsaW5rczonLCBlcnJvcik7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIChkYXRhIHx8IFtdKS5tYXAoKGRiTGluazogYW55KSA9PiAoe1xuICAgICAgaWQ6IGRiTGluay5pZCxcbiAgICAgIHVybDogZGJMaW5rLnVybCxcbiAgICAgIHRpdGxlOiBkYkxpbmsudGl0bGUsXG4gICAgICBmYXZpY29uOiBkYkxpbmsuZmF2aWNvbixcbiAgICAgIHVzZXJOb3RlOiBkYkxpbmsudXNlcl9ub3RlIHx8ICcnLFxuICAgICAgYWlTdW1tYXJ5OiBkYkxpbmsuYWlfc3VtbWFyeSxcbiAgICAgIGNhdGVnb3J5OiBkYkxpbmsuY2F0ZWdvcnksXG4gICAgICBjb2xsZWN0aW9uSWQ6IGRiTGluay5jb2xsZWN0aW9uX2lkLFxuICAgICAgaXNJbkluYm94OiBkYkxpbmsuaXNfaW5faW5ib3ggfHwgZmFsc2UsXG4gICAgICBoaWdobGlnaHRzOiB0aGlzLnBhcnNlSGlnaGxpZ2h0cyhkYkxpbmsuaGlnaGxpZ2h0cyksXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKGRiTGluay5jcmVhdGVkX2F0KSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoZGJMaW5rLnVwZGF0ZWRfYXQpLFxuICAgICAgZG9tYWluOiBkYkxpbmsuZG9tYWluLFxuICAgIH0pKTtcbiAgfVxuXG4gIGFzeW5jIGJ1bGtNb3ZlRnJvbUluYm94KGxpbmtJZHM6IHN0cmluZ1tdLCBjb2xsZWN0aW9uSWQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2xpbmtzJylcbiAgICAgIC51cGRhdGUoeyBcbiAgICAgICAgaXNfaW5faW5ib3g6IGZhbHNlLFxuICAgICAgICBjb2xsZWN0aW9uX2lkOiBjb2xsZWN0aW9uSWQgfHwgbnVsbCxcbiAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KVxuICAgICAgLmluKCdpZCcsIGxpbmtJZHMpO1xuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBhc3luYyB0b2dnbGVDb2xsZWN0aW9uU2hhcmluZyhjb2xsZWN0aW9uSWQ6IHN0cmluZywgbWFrZVB1YmxpYzogYm9vbGVhbik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBzaGFyZVRva2VuPzogc3RyaW5nOyBtZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbkRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xuICAgIGNvbnN0IHVzZXIgPSBzZXNzaW9uRGF0YS5zZXNzaW9uPy51c2VyO1xuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdVc2VyIG5vdCBsb2dnZWQgaW4uJyB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ3RvZ2dsZV9jb2xsZWN0aW9uX3NoYXJpbmcnLCB7XG4gICAgICAgIGNvbGxlY3Rpb25fdXVpZDogY29sbGVjdGlvbklkLFxuICAgICAgICB1c2VyX3V1aWQ6IHVzZXIuaWQsXG4gICAgICAgIG1ha2VfcHVibGljOiBtYWtlUHVibGljXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRvZ2dsaW5nIGNvbGxlY3Rpb24gc2hhcmluZzonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gdXBkYXRlIHNoYXJpbmcgc2V0dGluZ3MuJyB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBkYXRhPy5bMF07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiByZXN1bHQ/LnN1Y2Nlc3MgfHwgZmFsc2UsXG4gICAgICAgIHNoYXJlVG9rZW46IHJlc3VsdD8uc2hhcmVfdG9rZW4sXG4gICAgICAgIG1lc3NhZ2U6IHJlc3VsdD8ubWVzc2FnZSB8fCAnU2hhcmluZyBzZXR0aW5ncyB1cGRhdGVkLidcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB0b2dnbGUgY29sbGVjdGlvbiBzaGFyaW5nOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRDb2xsZWN0aW9uU2hhcmluZ0luZm8oY29sbGVjdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHsgaXNQdWJsaWM6IGJvb2xlYW47IHNoYXJlVG9rZW4/OiBzdHJpbmc7IHZpZXdDb3VudDogbnVtYmVyIH0gfCBudWxsPiB7XG4gICAgY29uc3QgeyBkYXRhOiBzZXNzaW9uRGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgY29uc3QgdXNlciA9IHNlc3Npb25EYXRhLnNlc3Npb24/LnVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ2NvbGxlY3Rpb25zJylcbiAgICAgICAgLnNlbGVjdCgnaXNfcHVibGljLCBzaGFyZV90b2tlbiwgdmlld19jb3VudCcpXG4gICAgICAgIC5lcSgnaWQnLCBjb2xsZWN0aW9uSWQpXG4gICAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXIuaWQpXG4gICAgICAgIC5zaW5nbGUoKTtcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGNvbGxlY3Rpb24gc2hhcmluZyBpbmZvOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzUHVibGljOiBkYXRhLmlzX3B1YmxpYyB8fCBmYWxzZSxcbiAgICAgICAgc2hhcmVUb2tlbjogZGF0YS5zaGFyZV90b2tlbixcbiAgICAgICAgdmlld0NvdW50OiBkYXRhLnZpZXdfY291bnQgfHwgMFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBjb2xsZWN0aW9uIHNoYXJpbmcgaW5mbzonLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBQdWJsaWMgbWV0aG9kcyBmb3Igdmlld2luZyBzaGFyZWQgY29sbGVjdGlvbnMgKG5vIGF1dGggcmVxdWlyZWQpXG4gIHN0YXRpYyBhc3luYyBnZXRQdWJsaWNDb2xsZWN0aW9uKHNoYXJlVG9rZW46IHN0cmluZyk6IFByb21pc2U8e1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHZpZXdDb3VudDogbnVtYmVyO1xuICAgIGNyZWF0ZWRBdDogRGF0ZTtcbiAgICBvd25lckVtYWlsOiBzdHJpbmc7XG4gIH0gfCBudWxsPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnJwYygnZ2V0X3B1YmxpY19jb2xsZWN0aW9uJywge1xuICAgICAgICB0b2tlbjogc2hhcmVUb2tlblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwdWJsaWMgY29sbGVjdGlvbjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gZGF0YT8uWzBdO1xuICAgICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogY29sbGVjdGlvbi5pZCxcbiAgICAgICAgbmFtZTogY29sbGVjdGlvbi5uYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogY29sbGVjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgICAgdmlld0NvdW50OiBjb2xsZWN0aW9uLnZpZXdfY291bnQgfHwgMCxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShjb2xsZWN0aW9uLmNyZWF0ZWRfYXQpLFxuICAgICAgICBvd25lckVtYWlsOiBjb2xsZWN0aW9uLm93bmVyX2VtYWlsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHB1YmxpYyBjb2xsZWN0aW9uOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRQdWJsaWNDb2xsZWN0aW9uTGlua3Moc2hhcmVUb2tlbjogc3RyaW5nKTogUHJvbWlzZTxBcnJheTx7XG4gICAgaWQ6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGZhdmljb24/OiBzdHJpbmc7XG4gICAgZG9tYWluOiBzdHJpbmc7XG4gICAgdXNlck5vdGU/OiBzdHJpbmc7XG4gICAgYWlTdW1tYXJ5Pzogc3RyaW5nO1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgY3JlYXRlZEF0OiBEYXRlO1xuICAgIHRhZ3M6IHN0cmluZ1tdO1xuICB9Pj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2dldF9wdWJsaWNfY29sbGVjdGlvbl9saW5rcycsIHtcbiAgICAgICAgdG9rZW46IHNoYXJlVG9rZW5cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHVibGljIGNvbGxlY3Rpb24gbGlua3M6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoZGF0YSB8fCBbXSkubWFwKChsaW5rOiBhbnkpID0+ICh7XG4gICAgICAgIGlkOiBsaW5rLmlkLFxuICAgICAgICB1cmw6IGxpbmsudXJsLFxuICAgICAgICB0aXRsZTogbGluay50aXRsZSxcbiAgICAgICAgZmF2aWNvbjogbGluay5mYXZpY29uLFxuICAgICAgICBkb21haW46IGxpbmsuZG9tYWluLFxuICAgICAgICB1c2VyTm90ZTogbGluay51c2VyX25vdGUsXG4gICAgICAgIGFpU3VtbWFyeTogbGluay5haV9zdW1tYXJ5LFxuICAgICAgICBjYXRlZ29yeTogbGluay5jYXRlZ29yeSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShsaW5rLmNyZWF0ZWRfYXQpLFxuICAgICAgICB0YWdzOiBsaW5rLnRhZ19uYW1lcyB8fCBbXVxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHB1YmxpYyBjb2xsZWN0aW9uIGxpbmtzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgaW5jcmVtZW50Vmlld0NvdW50KHNoYXJlVG9rZW46IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5ycGMoJ2luY3JlbWVudF9jb2xsZWN0aW9uX3ZpZXdzJywge1xuICAgICAgICB0b2tlbjogc2hhcmVUb2tlblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbmNyZW1lbnRpbmcgdmlldyBjb3VudDonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBpbmNyZW1lbnQgdmlldyBjb3VudDonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLy8gU21hcnQgQ29sbGVjdGlvbnMgbWV0aG9kc1xuICBhc3luYyBnZXRTbWFydENvbGxlY3Rpb25zKCk6IFByb21pc2U8U21hcnRDb2xsZWN0aW9uW10+IHtcbiAgICAvLyBHZXQgZGVmYXVsdCBzbWFydCBjb2xsZWN0aW9uc1xuICAgIGNvbnN0IGRlZmF1bHRDb2xsZWN0aW9ucyA9IHRoaXMuZ2V0RGVmYXVsdFNtYXJ0Q29sbGVjdGlvbnMoKTtcbiAgICBcbiAgICAvLyBGb3Igbm93LCByZXR1cm4gZGVmYXVsdCBjb2xsZWN0aW9ucyBvbmx5IHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3lcbiAgICAvLyBUT0RPOiBJbXBsZW1lbnQgQUktcG93ZXJlZCBzdWdnZXN0aW9ucyBpbiBhIHNlcGFyYXRlIHNlcnZpY2VcbiAgICByZXR1cm4gZGVmYXVsdENvbGxlY3Rpb25zO1xuICB9XG5cbiAgYXN5bmMgZ2VuZXJhdGVBSVNtYXJ0Q29sbGVjdGlvbnMobGlua3M6IFNhdmVkTGlua1tdKTogUHJvbWlzZTxTbWFydENvbGxlY3Rpb25bXT4ge1xuICAgIC8vIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgc2VwYXJhdGVseSB0byBnZW5lcmF0ZSBBSSBzdWdnZXN0aW9uc1xuICAgIHRyeSB7XG4gICAgICBpZiAobGlua3MubGVuZ3RoID4gNSkge1xuICAgICAgICBjb25zdCB7IGFpU2VydmljZSB9ID0gYXdhaXQgaW1wb3J0KCcuL2FpJyk7XG4gICAgICAgIHJldHVybiBhd2FpdCBhaVNlcnZpY2UuZ2VuZXJhdGVTbWFydENvbGxlY3Rpb25TdWdnZXN0aW9ucyhsaW5rcyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSBBSSBzbWFydCBjb2xsZWN0aW9uIHN1Z2dlc3Rpb25zOicsIGVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlU21hcnRDb2xsZWN0aW9uKGNvbGxlY3Rpb246IE9taXQ8U21hcnRDb2xsZWN0aW9uLCAnaWQnIHwgJ2NyZWF0ZWRBdCcgfCAndXBkYXRlZEF0Jz4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBUT0RPOiBJbXBsZW1lbnQgZGF0YWJhc2Ugc3RvcmFnZSBmb3Igc21hcnQgY29sbGVjdGlvbnNcbiAgICBjb25zb2xlLmxvZygnQ3JlYXRpbmcgc21hcnQgY29sbGVjdGlvbjonLCBjb2xsZWN0aW9uKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVNtYXJ0Q29sbGVjdGlvbihjb2xsZWN0aW9uSWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxTbWFydENvbGxlY3Rpb24+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gVE9ETzogSW1wbGVtZW50IGRhdGFiYXNlIHVwZGF0ZSBmb3Igc21hcnQgY29sbGVjdGlvbnNcbiAgICBjb25zb2xlLmxvZygnVXBkYXRpbmcgc21hcnQgY29sbGVjdGlvbjonLCBjb2xsZWN0aW9uSWQsIHVwZGF0ZXMpO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlU21hcnRDb2xsZWN0aW9uKGNvbGxlY3Rpb25JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gVE9ETzogSW1wbGVtZW50IGRhdGFiYXNlIGRlbGV0aW9uIGZvciBzbWFydCBjb2xsZWN0aW9uc1xuICAgIGNvbnNvbGUubG9nKCdEZWxldGluZyBzbWFydCBjb2xsZWN0aW9uOicsIGNvbGxlY3Rpb25JZCk7XG4gIH1cblxuICBhc3luYyBnZXRTbWFydENvbGxlY3Rpb25MaW5rcyhzbWFydENvbGxlY3Rpb25JZDogc3RyaW5nKTogUHJvbWlzZTxTYXZlZExpbmtbXT4ge1xuICAgIGNvbnN0IHNtYXJ0Q29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLmdldFNtYXJ0Q29sbGVjdGlvbnMoKTtcbiAgICBjb25zdCBzbWFydENvbGxlY3Rpb24gPSBzbWFydENvbGxlY3Rpb25zLmZpbmQoc2MgPT4gc2MuaWQgPT09IHNtYXJ0Q29sbGVjdGlvbklkKTtcbiAgICBcbiAgICBpZiAoIXNtYXJ0Q29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIEdldCBhbGwgdXNlciBsaW5rc1xuICAgIGNvbnN0IGFsbExpbmtzID0gKGF3YWl0IHRoaXMuZ2V0RGF0YSgpKS5saW5rcztcbiAgICBcbiAgICAvLyBBcHBseSBmaWx0ZXJzIGJhc2VkIG9uIHNtYXJ0IGNvbGxlY3Rpb24gY3JpdGVyaWFcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJMaW5rc0ZvclNtYXJ0Q29sbGVjdGlvbihhbGxMaW5rcywgc21hcnRDb2xsZWN0aW9uKTtcbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyTGlua3NGb3JTbWFydENvbGxlY3Rpb24obGlua3M6IFNhdmVkTGlua1tdLCBzbWFydENvbGxlY3Rpb246IFNtYXJ0Q29sbGVjdGlvbik6IFNhdmVkTGlua1tdIHtcbiAgICBsZXQgZmlsdGVyZWRMaW5rcyA9IFsuLi5saW5rc107XG5cbiAgICAvLyBBcHBseSBkYXRlIHJhbmdlIGZpbHRlclxuICAgIGlmIChzbWFydENvbGxlY3Rpb24uZmlsdGVycz8uZGF0ZVJhbmdlKSB7XG4gICAgICBjb25zdCB7IHN0YXJ0LCBlbmQgfSA9IHNtYXJ0Q29sbGVjdGlvbi5maWx0ZXJzLmRhdGVSYW5nZTtcbiAgICAgIGZpbHRlcmVkTGlua3MgPSBmaWx0ZXJlZExpbmtzLmZpbHRlcihsaW5rID0+IHtcbiAgICAgICAgY29uc3QgbGlua0RhdGUgPSBsaW5rLmNyZWF0ZWRBdDtcbiAgICAgICAgaWYgKHN0YXJ0ICYmIGxpbmtEYXRlIDwgc3RhcnQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGVuZCAmJiBsaW5rRGF0ZSA+IGVuZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IGNhdGVnb3J5IGZpbHRlclxuICAgIGlmIChzbWFydENvbGxlY3Rpb24uZmlsdGVycz8uY2F0ZWdvcmllcz8ubGVuZ3RoKSB7XG4gICAgICBmaWx0ZXJlZExpbmtzID0gZmlsdGVyZWRMaW5rcy5maWx0ZXIobGluayA9PiBcbiAgICAgICAgc21hcnRDb2xsZWN0aW9uLmZpbHRlcnMhLmNhdGVnb3JpZXMhLmluY2x1ZGVzKGxpbmsuY2F0ZWdvcnkpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IGRvbWFpbiBmaWx0ZXJcbiAgICBpZiAoc21hcnRDb2xsZWN0aW9uLmZpbHRlcnM/LmRvbWFpbnM/Lmxlbmd0aCkge1xuICAgICAgZmlsdGVyZWRMaW5rcyA9IGZpbHRlcmVkTGlua3MuZmlsdGVyKGxpbmsgPT4gXG4gICAgICAgIHNtYXJ0Q29sbGVjdGlvbi5maWx0ZXJzIS5kb21haW5zIS5zb21lKGRvbWFpbiA9PiBcbiAgICAgICAgICBsaW5rLmRvbWFpbi5pbmNsdWRlcyhkb21haW4pXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgY29udGVudCB0eXBlIGZpbHRlciAoYmFzZWQgb24gQUkgYW5hbHlzaXMgb3IgZG9tYWluIHBhdHRlcm5zKVxuICAgIGlmIChzbWFydENvbGxlY3Rpb24uZmlsdGVycz8uY29udGVudFR5cGU/Lmxlbmd0aCkge1xuICAgICAgZmlsdGVyZWRMaW5rcyA9IGZpbHRlcmVkTGlua3MuZmlsdGVyKGxpbmsgPT4ge1xuICAgICAgICAvLyBTaW1wbGUgY29udGVudCB0eXBlIGRldGVjdGlvbiBiYXNlZCBvbiBkb21haW5cbiAgICAgICAgY29uc3QgY29udGVudFR5cGUgPSB0aGlzLmRldGVjdENvbnRlbnRUeXBlRnJvbURvbWFpbihsaW5rLmRvbWFpbik7XG4gICAgICAgIHJldHVybiBzbWFydENvbGxlY3Rpb24uZmlsdGVycyEuY29udGVudFR5cGUhLmluY2x1ZGVzKGNvbnRlbnRUeXBlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IHNtYXJ0IGNvbGxlY3Rpb24gc3BlY2lmaWMgbG9naWNcbiAgICBzd2l0Y2ggKHNtYXJ0Q29sbGVjdGlvbi5pZCkge1xuICAgICAgY2FzZSAncmVjZW50LXJlYWRzJzpcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkTGlua3NcbiAgICAgICAgICAuZmlsdGVyKGxpbmsgPT4gbGluay5jcmVhdGVkQXQgPj0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKSkgLy8gTGFzdCA3IGRheXNcbiAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYi5jcmVhdGVkQXQuZ2V0VGltZSgpIC0gYS5jcmVhdGVkQXQuZ2V0VGltZSgpKVxuICAgICAgICAgIC5zbGljZSgwLCAyMCk7XG5cbiAgICAgIGNhc2UgJ2FpLXJlbGF0ZWQnOlxuICAgICAgICByZXR1cm4gZmlsdGVyZWRMaW5rc1xuICAgICAgICAgIC5maWx0ZXIobGluayA9PiB0aGlzLmlzQUlSZWxhdGVkKGxpbmspKVxuICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmNyZWF0ZWRBdC5nZXRUaW1lKCkgLSBhLmNyZWF0ZWRBdC5nZXRUaW1lKCkpO1xuXG4gICAgICBjYXNlICd1bnJlYWQnOlxuICAgICAgICByZXR1cm4gZmlsdGVyZWRMaW5rc1xuICAgICAgICAgIC5maWx0ZXIobGluayA9PiAhbGluay51c2VyTm90ZSB8fCBsaW5rLnVzZXJOb3RlLnRyaW0oKSA9PT0gJycpIC8vIE5vIG5vdGVzID0gbGlrZWx5IHVucmVhZFxuICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmNyZWF0ZWRBdC5nZXRUaW1lKCkgLSBhLmNyZWF0ZWRBdC5nZXRUaW1lKCkpO1xuXG4gICAgICBjYXNlICd0dXRvcmlhbHMnOlxuICAgICAgICByZXR1cm4gZmlsdGVyZWRMaW5rc1xuICAgICAgICAgIC5maWx0ZXIobGluayA9PiB0aGlzLmlzVHV0b3JpYWwobGluaykpXG4gICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGIuY3JlYXRlZEF0LmdldFRpbWUoKSAtIGEuY3JlYXRlZEF0LmdldFRpbWUoKSk7XG5cbiAgICAgIGNhc2UgJ2dpdGh1Yi1yZXBvcyc6XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZExpbmtzXG4gICAgICAgICAgLmZpbHRlcihsaW5rID0+IGxpbmsuZG9tYWluLmluY2x1ZGVzKCdnaXRodWIuY29tJykpXG4gICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGIuY3JlYXRlZEF0LmdldFRpbWUoKSAtIGEuY3JlYXRlZEF0LmdldFRpbWUoKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZExpbmtzO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGV0ZWN0Q29udGVudFR5cGVGcm9tRG9tYWluKGRvbWFpbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoZG9tYWluLmluY2x1ZGVzKCd5b3V0dWJlLmNvbScpIHx8IGRvbWFpbi5pbmNsdWRlcygndmltZW8uY29tJykpIHJldHVybiAndmlkZW8nO1xuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ2dpdGh1Yi5jb20nKSkgcmV0dXJuICd0b29sJztcbiAgICBpZiAoZG9tYWluLmluY2x1ZGVzKCdkb2NzLicpIHx8IGRvbWFpbi5pbmNsdWRlcygnZG9jdW1lbnRhdGlvbicpKSByZXR1cm4gJ2RvY3VtZW50YXRpb24nO1xuICAgIGlmIChkb21haW4uaW5jbHVkZXMoJ21lZGl1bS5jb20nKSB8fCBkb21haW4uaW5jbHVkZXMoJ2Jsb2cnKSkgcmV0dXJuICdibG9nJztcbiAgICBpZiAoZG9tYWluLmluY2x1ZGVzKCduZXdzJykgfHwgZG9tYWluLmluY2x1ZGVzKCdjbm4uY29tJykpIHJldHVybiAnbmV3cyc7XG4gICAgcmV0dXJuICdhcnRpY2xlJztcbiAgfVxuXG4gIHByaXZhdGUgaXNBSVJlbGF0ZWQobGluazogU2F2ZWRMaW5rKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29udGVudCA9IGAke2xpbmsudGl0bGV9ICR7bGluay51c2VyTm90ZX0gJHtsaW5rLmFpU3VtbWFyeSB8fCAnJ31gLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgYWlLZXl3b3JkcyA9IFtcbiAgICAgICdhcnRpZmljaWFsIGludGVsbGlnZW5jZScsICdtYWNoaW5lIGxlYXJuaW5nJywgJ2RlZXAgbGVhcm5pbmcnLCAnbmV1cmFsIG5ldHdvcmsnLFxuICAgICAgJ2FpJywgJ21sJywgJ2dwdCcsICdjaGF0Z3B0JywgJ29wZW5haScsICd0ZW5zb3JmbG93JywgJ3B5dG9yY2gnLCAnbGxtJyxcbiAgICAgICduYXR1cmFsIGxhbmd1YWdlIHByb2Nlc3NpbmcnLCAnbmxwJywgJ2NvbXB1dGVyIHZpc2lvbicsICdyZWluZm9yY2VtZW50IGxlYXJuaW5nJ1xuICAgIF07XG4gICAgcmV0dXJuIGFpS2V5d29yZHMuc29tZShrZXl3b3JkID0+IGNvbnRlbnQuaW5jbHVkZXMoa2V5d29yZCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1R1dG9yaWFsKGxpbms6IFNhdmVkTGluayk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBgJHtsaW5rLnRpdGxlfSAke2xpbmsudXNlck5vdGV9YC50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IHR1dG9yaWFsS2V5d29yZHMgPSBbXG4gICAgICAndHV0b3JpYWwnLCAnaG93IHRvJywgJ2d1aWRlJywgJ3N0ZXAgYnkgc3RlcCcsICdsZWFybicsICdjb3Vyc2UnLFxuICAgICAgJ2ludHJvZHVjdGlvbiB0bycsICdnZXR0aW5nIHN0YXJ0ZWQnLCAnYmVnaW5uZXInLCAnd2Fsa3Rocm91Z2gnXG4gICAgXTtcbiAgICByZXR1cm4gdHV0b3JpYWxLZXl3b3Jkcy5zb21lKGtleXdvcmQgPT4gY29udGVudC5pbmNsdWRlcyhrZXl3b3JkKSk7XG4gIH1cblxuICBwcml2YXRlIGdldERlZmF1bHRTbWFydENvbGxlY3Rpb25zKCk6IFNtYXJ0Q29sbGVjdGlvbltdIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAncmVjZW50LXJlYWRzJyxcbiAgICAgICAgbmFtZTogJ/Cfk5ogUmVjZW50IFJlYWRzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMaW5rcyBzYXZlZCBpbiB0aGUgbGFzdCA3IGRheXMnLFxuICAgICAgICBxdWVyeTogJ2NyZWF0ZWRfYXQgPj0gbm93KCkgLSBpbnRlcnZhbCBcXCc3IGRheXNcXCcnLFxuICAgICAgICBpc1N5c3RlbTogdHJ1ZSxcbiAgICAgICAgYXV0b1VwZGF0ZTogdHJ1ZSxcbiAgICAgICAgaWNvbjogJ/Cfk5onLFxuICAgICAgICBjb2xvcjogJyMzYjgyZjYnLFxuICAgICAgICBmaWx0ZXJzOiB7XG4gICAgICAgICAgZGF0ZVJhbmdlOiB7XG4gICAgICAgICAgICBzdGFydDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICAgIHVwZGF0ZWRBdDogbm93XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogJ2FpLXJlbGF0ZWQnLFxuICAgICAgICBuYW1lOiAn8J+kliBBSSAmIE1hY2hpbmUgTGVhcm5pbmcnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0NvbnRlbnQgcmVsYXRlZCB0byBhcnRpZmljaWFsIGludGVsbGlnZW5jZSBhbmQgbWFjaGluZSBsZWFybmluZycsXG4gICAgICAgIHF1ZXJ5OiAndGl0bGUgSUxJS0UgXFwnJWFpJVxcJyBPUiB0aXRsZSBJTElLRSBcXCclbWFjaGluZSBsZWFybmluZyVcXCcgT1IgdGl0bGUgSUxJS0UgXFwnJW5ldXJhbCVcXCcnLFxuICAgICAgICBpc1N5c3RlbTogdHJ1ZSxcbiAgICAgICAgYXV0b1VwZGF0ZTogdHJ1ZSxcbiAgICAgICAgaWNvbjogJ/CfpJYnLFxuICAgICAgICBjb2xvcjogJyM4YjVjZjYnLFxuICAgICAgICBjcmVhdGVkQXQ6IG5vdyxcbiAgICAgICAgdXBkYXRlZEF0OiBub3dcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAndW5yZWFkJyxcbiAgICAgICAgbmFtZTogJ/Cfk5YgVG8gUmVhZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTGlua3Mgd2l0aG91dCBub3RlcyAobGlrZWx5IHVucmVhZCknLFxuICAgICAgICBxdWVyeTogJ3VzZXJfbm90ZSBJUyBOVUxMIE9SIHVzZXJfbm90ZSA9IFxcJ1xcJycsXG4gICAgICAgIGlzU3lzdGVtOiB0cnVlLFxuICAgICAgICBhdXRvVXBkYXRlOiB0cnVlLFxuICAgICAgICBpY29uOiAn8J+TlicsXG4gICAgICAgIGNvbG9yOiAnI2Y1OWUwYicsXG4gICAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgICB1cGRhdGVkQXQ6IG5vd1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICd0dXRvcmlhbHMnLFxuICAgICAgICBuYW1lOiAn8J+OkyBUdXRvcmlhbHMgJiBHdWlkZXMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0VkdWNhdGlvbmFsIGNvbnRlbnQgYW5kIHR1dG9yaWFscycsXG4gICAgICAgIHF1ZXJ5OiAndGl0bGUgSUxJS0UgXFwnJXR1dG9yaWFsJVxcJyBPUiB0aXRsZSBJTElLRSBcXCclZ3VpZGUlXFwnIE9SIHRpdGxlIElMSUtFIFxcJyVob3cgdG8lXFwnJyxcbiAgICAgICAgaXNTeXN0ZW06IHRydWUsXG4gICAgICAgIGF1dG9VcGRhdGU6IHRydWUsXG4gICAgICAgIGljb246ICfwn46TJyxcbiAgICAgICAgY29sb3I6ICcjMTBiOTgxJyxcbiAgICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICAgIHVwZGF0ZWRBdDogbm93XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogJ2dpdGh1Yi1yZXBvcycsXG4gICAgICAgIG5hbWU6ICfirZAgR2l0SHViIFJlcG9zaXRvcmllcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnR2l0SHViIHJlcG9zaXRvcmllcyBhbmQgcHJvamVjdHMnLFxuICAgICAgICBxdWVyeTogJ2RvbWFpbiBMSUtFIFxcJyVnaXRodWIuY29tJVxcJycsXG4gICAgICAgIGlzU3lzdGVtOiB0cnVlLFxuICAgICAgICBhdXRvVXBkYXRlOiB0cnVlLFxuICAgICAgICBpY29uOiAn4q2QJyxcbiAgICAgICAgY29sb3I6ICcjNmI3MjgwJyxcbiAgICAgICAgZmlsdGVyczoge1xuICAgICAgICAgIGRvbWFpbnM6IFsnZ2l0aHViLmNvbSddXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgICB1cGRhdGVkQXQ6IG5vd1xuICAgICAgfVxuICAgIF07XG4gIH1cblxuICBwcml2YXRlIGdldERlZmF1bHRDYXRlZ29yaWVzKCk6IENhdGVnb3J5W10ge1xuICAgIHJldHVybiBbXG4gICAgICB7IGlkOiAnZ2VuZXJhbCcsIG5hbWU6ICdHZW5lcmFsJywgY29sb3I6ICcjNmI3MjgwJywgaXNEZWZhdWx0OiB0cnVlIH0sXG4gICAgICB7IGlkOiAnd29yaycsIG5hbWU6ICdXb3JrJywgY29sb3I6ICcjM2I4MmY2JyB9LFxuICAgICAgeyBpZDogJ3BlcnNvbmFsJywgbmFtZTogJ1BlcnNvbmFsJywgY29sb3I6ICcjMTBiOTgxJyB9LFxuICAgICAgeyBpZDogJ2xlYXJuaW5nJywgbmFtZTogJ0xlYXJuaW5nJywgY29sb3I6ICcjZjU5ZTBiJyB9XG4gICAgXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGVmYXVsdERhdGEoKTogU3RvcmFnZURhdGEge1xuICAgIHJldHVybiB7XG4gICAgICBsaW5rczogW10sXG4gICAgICBjb2xsZWN0aW9uczogW10sXG4gICAgICBzbWFydENvbGxlY3Rpb25zOiBbXSxcbiAgICAgIGNhdGVnb3JpZXM6IHRoaXMuZ2V0RGVmYXVsdENhdGVnb3JpZXMoKSxcbiAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgIGRlZmF1bHRDYXRlZ29yeTogJ2dlbmVyYWwnLFxuICAgICAgICBhdXRvU3VtbWFyaXplOiB0cnVlLFxuICAgICAgICBlbmFibGVTbWFydENvbGxlY3Rpb25zOiB0cnVlLFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBhc3luYyBnZXRMaW5rQnlVcmwodXJsOiBzdHJpbmcpOiBQcm9taXNlPFNhdmVkTGluayB8IG51bGw+IHtcbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb25EYXRhIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbkRhdGEuc2Vzc2lvbj8udXNlcjtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgnbGlua3MnKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VyLmlkKVxuICAgICAgLmVxKCd1cmwnLCB1cmwpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvci5jb2RlID09PSAnUEdSU1QxMTYnKSB7XG4gICAgICAgIC8vIE5vIHJvd3MgcmV0dXJuZWRcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICAvLyBNYXAgZGF0YWJhc2UgZmllbGRzIHRvIFR5cGVTY3JpcHQgY2FtZWxDYXNlXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgdXJsOiBkYXRhLnVybCxcbiAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgZmF2aWNvbjogZGF0YS5mYXZpY29uLFxuICAgICAgdXNlck5vdGU6IGRhdGEudXNlcl9ub3RlIHx8ICcnLFxuICAgICAgYWlTdW1tYXJ5OiBkYXRhLmFpX3N1bW1hcnksXG4gICAgICBjYXRlZ29yeTogZGF0YS5jYXRlZ29yeSxcbiAgICAgIGNvbGxlY3Rpb25JZDogZGF0YS5jb2xsZWN0aW9uX2lkLFxuICAgICAgaXNJbkluYm94OiBkYXRhLmlzX2luX2luYm94IHx8IGZhbHNlLFxuICAgICAgaGlnaGxpZ2h0czogdGhpcy5wYXJzZUhpZ2hsaWdodHMoZGF0YS5oaWdobGlnaHRzKSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoZGF0YS5jcmVhdGVkX2F0KSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoZGF0YS51cGRhdGVkX2F0KSxcbiAgICAgIGRvbWFpbjogZGF0YS5kb21haW4sXG4gICAgfTtcbiAgfVxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBzYWZlbHkgcGFyc2UgaGlnaGxpZ2h0c1xuICBwcml2YXRlIHBhcnNlSGlnaGxpZ2h0cyhoaWdobGlnaHRzRGF0YTogYW55KTogYW55W10ge1xuICAgIGlmICghaGlnaGxpZ2h0c0RhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdTdG9yYWdlOiBObyBoaWdobGlnaHRzIGRhdGEgZm91bmQnKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBoaWdobGlnaHRzRGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoaGlnaGxpZ2h0c0RhdGEpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBBcnJheS5pc0FycmF5KHBhcnNlZCkgPyBwYXJzZWQgOiBbXTtcbiAgICAgICAgY29uc29sZS5sb2coJ1N0b3JhZ2U6IFBhcnNlZCBoaWdobGlnaHRzIGZyb20gSlNPTjonLCByZXN1bHQubGVuZ3RoLCAnaGlnaGxpZ2h0cycsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBwYXJzZSBoaWdobGlnaHRzIEpTT046JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGhpZ2hsaWdodHNEYXRhKSkge1xuICAgICAgY29uc29sZS5sb2coJ1N0b3JhZ2U6IEZvdW5kIGhpZ2hsaWdodHMgYXJyYXk6JywgaGlnaGxpZ2h0c0RhdGEubGVuZ3RoLCAnaGlnaGxpZ2h0cycsIGhpZ2hsaWdodHNEYXRhKTtcbiAgICAgIHJldHVybiBoaWdobGlnaHRzRGF0YTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ1N0b3JhZ2U6IEhpZ2hsaWdodHMgZGF0YSBpbiB1bmV4cGVjdGVkIGZvcm1hdDonLCB0eXBlb2YgaGlnaGxpZ2h0c0RhdGEsIGhpZ2hsaWdodHNEYXRhKTtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBBY3Rpdml0eSBUcmFja2luZyBtZXRob2RzXG4gIGFzeW5jIGxvZ0FjdGl2aXR5KHR5cGU6ICdzYXZlJyB8ICdyZWFkJyB8ICdoaWdobGlnaHQnIHwgJ29yZ2FuaXplJyB8ICdzZWFyY2gnLCBsaW5rSWQ/OiBzdHJpbmcsIGNvbGxlY3Rpb25JZD86IHN0cmluZywgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gRm9yIG5vdywgc3RvcmUgYWN0aXZpdGllcyBpbiBsb2NhbFN0b3JhZ2UgdW50aWwgd2UgaGF2ZSBkYXRhYmFzZSBzY2hlbWFcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWN0aXZpdGllcyA9IGF3YWl0IHRoaXMuZ2V0QWN0aXZpdGllcygpO1xuICAgICAgY29uc3QgbmV3QWN0aXZpdHkgPSB7XG4gICAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGxpbmtJZCxcbiAgICAgICAgY29sbGVjdGlvbklkLFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgICB9O1xuICAgICAgXG4gICAgICBhY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpO1xuICAgICAgXG4gICAgICAvLyBLZWVwIG9ubHkgbGFzdCAxMDAwIGFjdGl2aXRpZXMgdG8gcHJldmVudCBzdG9yYWdlIGJsb2F0XG4gICAgICBjb25zdCByZWNlbnRBY3Rpdml0aWVzID0gYWN0aXZpdGllcy5zbGljZSgtMTAwMCk7XG4gICAgICBcbiAgICAgIGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7ICduZXN0X2FjdGl2aXRpZXMnOiByZWNlbnRBY3Rpdml0aWVzIH0pO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgc3RyZWFrc1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGVTdHJlYWtzKHR5cGUpO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnQWN0aXZpdHkgbG9nZ2VkOicsIG5ld0FjdGl2aXR5KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvZyBhY3Rpdml0eTonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0QWN0aXZpdGllcyhsaW1pdDogbnVtYmVyID0gMTAwKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoJ25lc3RfYWN0aXZpdGllcycpO1xuICAgICAgY29uc3QgYWN0aXZpdGllcyA9IHJlc3VsdC5uZXN0X2FjdGl2aXRpZXMgfHwgW107XG4gICAgICByZXR1cm4gYWN0aXZpdGllcy5zbGljZSgtbGltaXQpLnJldmVyc2UoKTsgLy8gTW9zdCByZWNlbnQgZmlyc3RcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBhY3Rpdml0aWVzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRBY3Rpdml0eVN0YXRzKCk6IFByb21pc2U8e1xuICAgIHRvdGFsU2F2ZXM6IG51bWJlcjtcbiAgICB0b3RhbFJlYWRzOiBudW1iZXI7XG4gICAgdG90YWxIaWdobGlnaHRzOiBudW1iZXI7XG4gICAgdG90YWxPcmdhbml6YXRpb25zOiBudW1iZXI7XG4gICAgdG90YWxTZWFyY2hlczogbnVtYmVyO1xuICAgIGFjdGl2ZURheXM6IG51bWJlcjtcbiAgICBjdXJyZW50U3RyZWFrOiBudW1iZXI7XG4gICAgYmVzdFN0cmVhazogbnVtYmVyO1xuICAgIHRoaXNXZWVrQWN0aXZpdHk6IG51bWJlcjtcbiAgICBsYXN0QWN0aXZlRGF0ZT86IERhdGU7XG4gIH0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWN0aXZpdGllcyA9IGF3YWl0IHRoaXMuZ2V0QWN0aXZpdGllcygxMDAwKTtcbiAgICAgIGNvbnN0IHN0cmVha3MgPSBhd2FpdCB0aGlzLmdldFN0cmVha3MoKTtcbiAgICAgIFxuICAgICAgY29uc3Qgc3RhdHMgPSB7XG4gICAgICAgIHRvdGFsU2F2ZXM6IGFjdGl2aXRpZXMuZmlsdGVyKGEgPT4gYS50eXBlID09PSAnc2F2ZScpLmxlbmd0aCxcbiAgICAgICAgdG90YWxSZWFkczogYWN0aXZpdGllcy5maWx0ZXIoYSA9PiBhLnR5cGUgPT09ICdyZWFkJykubGVuZ3RoLFxuICAgICAgICB0b3RhbEhpZ2hsaWdodHM6IGFjdGl2aXRpZXMuZmlsdGVyKGEgPT4gYS50eXBlID09PSAnaGlnaGxpZ2h0JykubGVuZ3RoLFxuICAgICAgICB0b3RhbE9yZ2FuaXphdGlvbnM6IGFjdGl2aXRpZXMuZmlsdGVyKGEgPT4gYS50eXBlID09PSAnb3JnYW5pemUnKS5sZW5ndGgsXG4gICAgICAgIHRvdGFsU2VhcmNoZXM6IGFjdGl2aXRpZXMuZmlsdGVyKGEgPT4gYS50eXBlID09PSAnc2VhcmNoJykubGVuZ3RoLFxuICAgICAgICBhY3RpdmVEYXlzOiB0aGlzLmdldFVuaXF1ZURheXMoYWN0aXZpdGllcykubGVuZ3RoLFxuICAgICAgICBjdXJyZW50U3RyZWFrOiBzdHJlYWtzLmZpbmQocyA9PiBzLnR5cGUgPT09ICdkYWlseV9zYXZlJyk/LmN1cnJlbnRDb3VudCB8fCAwLFxuICAgICAgICBiZXN0U3RyZWFrOiBzdHJlYWtzLmZpbmQocyA9PiBzLnR5cGUgPT09ICdkYWlseV9zYXZlJyk/LmJlc3RDb3VudCB8fCAwLFxuICAgICAgICB0aGlzV2Vla0FjdGl2aXR5OiB0aGlzLmdldFRoaXNXZWVrQWN0aXZpdHkoYWN0aXZpdGllcyksXG4gICAgICAgIGxhc3RBY3RpdmVEYXRlOiBhY3Rpdml0aWVzLmxlbmd0aCA+IDAgPyBuZXcgRGF0ZShhY3Rpdml0aWVzWzBdLmNyZWF0ZWRBdCkgOiB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgICBcbiAgICAgIHJldHVybiBzdGF0cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBhY3Rpdml0eSBzdGF0czonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3RhbFNhdmVzOiAwLFxuICAgICAgICB0b3RhbFJlYWRzOiAwLFxuICAgICAgICB0b3RhbEhpZ2hsaWdodHM6IDAsXG4gICAgICAgIHRvdGFsT3JnYW5pemF0aW9uczogMCxcbiAgICAgICAgdG90YWxTZWFyY2hlczogMCxcbiAgICAgICAgYWN0aXZlRGF5czogMCxcbiAgICAgICAgY3VycmVudFN0cmVhazogMCxcbiAgICAgICAgYmVzdFN0cmVhazogMCxcbiAgICAgICAgdGhpc1dlZWtBY3Rpdml0eTogMFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRTdHJlYWtzKCk6IFByb21pc2U8YW55W10+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KCduZXN0X3N0cmVha3MnKTtcbiAgICAgIHJldHVybiByZXN1bHQubmVzdF9zdHJlYWtzIHx8IFtdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHN0cmVha3M6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdXBkYXRlU3RyZWFrcyhhY3Rpdml0eVR5cGU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdHJlYWtzID0gYXdhaXQgdGhpcy5nZXRTdHJlYWtzKCk7XG4gICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCkudG9EYXRlU3RyaW5nKCk7XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBkYWlseSBzYXZlIHN0cmVha1xuICAgICAgaWYgKGFjdGl2aXR5VHlwZSA9PT0gJ3NhdmUnKSB7XG4gICAgICAgIGxldCBkYWlseVNhdmVTdHJlYWsgPSBzdHJlYWtzLmZpbmQocyA9PiBzLnR5cGUgPT09ICdkYWlseV9zYXZlJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWRhaWx5U2F2ZVN0cmVhaykge1xuICAgICAgICAgIGRhaWx5U2F2ZVN0cmVhayA9IHtcbiAgICAgICAgICAgIGlkOiAnZGFpbHlfc2F2ZScsXG4gICAgICAgICAgICB0eXBlOiAnZGFpbHlfc2F2ZScsXG4gICAgICAgICAgICBjdXJyZW50Q291bnQ6IDAsXG4gICAgICAgICAgICBiZXN0Q291bnQ6IDAsXG4gICAgICAgICAgICBsYXN0QWN0aXZpdHlBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKVxuICAgICAgICAgIH07XG4gICAgICAgICAgc3RyZWFrcy5wdXNoKGRhaWx5U2F2ZVN0cmVhayk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxhc3RBY3Rpdml0eURhdGUgPSBuZXcgRGF0ZShkYWlseVNhdmVTdHJlYWsubGFzdEFjdGl2aXR5QXQpLnRvRGF0ZVN0cmluZygpO1xuICAgICAgICBjb25zdCB5ZXN0ZXJkYXkgPSBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMjQgKiA2MCAqIDYwICogMTAwMCkudG9EYXRlU3RyaW5nKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAobGFzdEFjdGl2aXR5RGF0ZSA9PT0gdG9kYXkpIHtcbiAgICAgICAgICAvLyBBbHJlYWR5IGNvdW50ZWQgdG9kYXksIG5vIGNoYW5nZVxuICAgICAgICB9IGVsc2UgaWYgKGxhc3RBY3Rpdml0eURhdGUgPT09IHllc3RlcmRheSkge1xuICAgICAgICAgIC8vIENvbnNlY3V0aXZlIGRheSwgaW5jcmVtZW50IHN0cmVha1xuICAgICAgICAgIGRhaWx5U2F2ZVN0cmVhay5jdXJyZW50Q291bnQrKztcbiAgICAgICAgICBkYWlseVNhdmVTdHJlYWsubGFzdEFjdGl2aXR5QXQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFN0cmVhayBicm9rZW4sIHJlc2V0IHRvIDFcbiAgICAgICAgICBkYWlseVNhdmVTdHJlYWsuY3VycmVudENvdW50ID0gMTtcbiAgICAgICAgICBkYWlseVNhdmVTdHJlYWsubGFzdEFjdGl2aXR5QXQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgYmVzdCBzdHJlYWtcbiAgICAgICAgaWYgKGRhaWx5U2F2ZVN0cmVhay5jdXJyZW50Q291bnQgPiBkYWlseVNhdmVTdHJlYWsuYmVzdENvdW50KSB7XG4gICAgICAgICAgZGFpbHlTYXZlU3RyZWFrLmJlc3RDb3VudCA9IGRhaWx5U2F2ZVN0cmVhay5jdXJyZW50Q291bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIHdlZWtseSBvcmdhbml6ZSBzdHJlYWtcbiAgICAgIGlmIChhY3Rpdml0eVR5cGUgPT09ICdvcmdhbml6ZScpIHtcbiAgICAgICAgbGV0IHdlZWtseU9yZ2FuaXplU3RyZWFrID0gc3RyZWFrcy5maW5kKHMgPT4gcy50eXBlID09PSAnd2Vla2x5X29yZ2FuaXplJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXdlZWtseU9yZ2FuaXplU3RyZWFrKSB7XG4gICAgICAgICAgd2Vla2x5T3JnYW5pemVTdHJlYWsgPSB7XG4gICAgICAgICAgICBpZDogJ3dlZWtseV9vcmdhbml6ZScsXG4gICAgICAgICAgICB0eXBlOiAnd2Vla2x5X29yZ2FuaXplJyxcbiAgICAgICAgICAgIGN1cnJlbnRDb3VudDogMCxcbiAgICAgICAgICAgIGJlc3RDb3VudDogMCxcbiAgICAgICAgICAgIGxhc3RBY3Rpdml0eUF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgICAgICAgfTtcbiAgICAgICAgICBzdHJlYWtzLnB1c2god2Vla2x5T3JnYW5pemVTdHJlYWspO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0aGlzV2VlayA9IHRoaXMuZ2V0V2Vla051bWJlcihuZXcgRGF0ZSgpKTtcbiAgICAgICAgY29uc3QgbGFzdFdlZWsgPSB0aGlzLmdldFdlZWtOdW1iZXIobmV3IERhdGUod2Vla2x5T3JnYW5pemVTdHJlYWsubGFzdEFjdGl2aXR5QXQpKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzV2VlayA9PT0gbGFzdFdlZWspIHtcbiAgICAgICAgICAvLyBTYW1lIHdlZWssIG5vIGNoYW5nZSB0byBjb3VudFxuICAgICAgICB9IGVsc2UgaWYgKHRoaXNXZWVrID09PSBsYXN0V2VlayArIDEpIHtcbiAgICAgICAgICAvLyBOZXh0IHdlZWssIGluY3JlbWVudFxuICAgICAgICAgIHdlZWtseU9yZ2FuaXplU3RyZWFrLmN1cnJlbnRDb3VudCsrO1xuICAgICAgICAgIHdlZWtseU9yZ2FuaXplU3RyZWFrLmxhc3RBY3Rpdml0eUF0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBHYXAgaW4gd2Vla3MsIHJlc2V0XG4gICAgICAgICAgd2Vla2x5T3JnYW5pemVTdHJlYWsuY3VycmVudENvdW50ID0gMTtcbiAgICAgICAgICB3ZWVrbHlPcmdhbml6ZVN0cmVhay5sYXN0QWN0aXZpdHlBdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh3ZWVrbHlPcmdhbml6ZVN0cmVhay5jdXJyZW50Q291bnQgPiB3ZWVrbHlPcmdhbml6ZVN0cmVhay5iZXN0Q291bnQpIHtcbiAgICAgICAgICB3ZWVrbHlPcmdhbml6ZVN0cmVhay5iZXN0Q291bnQgPSB3ZWVrbHlPcmdhbml6ZVN0cmVhay5jdXJyZW50Q291bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgJ25lc3Rfc3RyZWFrcyc6IHN0cmVha3MgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgc3RyZWFrczonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRVbmlxdWVEYXlzKGFjdGl2aXRpZXM6IGFueVtdKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGRheXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICBhY3Rpdml0aWVzLmZvckVhY2goYWN0aXZpdHkgPT4ge1xuICAgICAgY29uc3QgZGF5ID0gbmV3IERhdGUoYWN0aXZpdHkuY3JlYXRlZEF0KS50b0RhdGVTdHJpbmcoKTtcbiAgICAgIGRheXMuYWRkKGRheSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZGF5cyk7XG4gIH1cblxuICBwcml2YXRlIGdldFRoaXNXZWVrQWN0aXZpdHkoYWN0aXZpdGllczogYW55W10pOiBudW1iZXIge1xuICAgIGNvbnN0IG9uZVdlZWtBZ28gPSBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgIHJldHVybiBhY3Rpdml0aWVzLmZpbHRlcihhY3Rpdml0eSA9PiBcbiAgICAgIG5ldyBEYXRlKGFjdGl2aXR5LmNyZWF0ZWRBdCkgPj0gb25lV2Vla0Fnb1xuICAgICkubGVuZ3RoO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRXZWVrTnVtYmVyKGRhdGU6IERhdGUpOiBudW1iZXIge1xuICAgIGNvbnN0IG9uZWphbiA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gICAgY29uc3QgbWlsbGlzZWNzSW5EYXkgPSA4NjQwMDAwMDtcbiAgICByZXR1cm4gTWF0aC5jZWlsKCgoKGRhdGUuZ2V0VGltZSgpIC0gb25lamFuLmdldFRpbWUoKSkgLyBtaWxsaXNlY3NJbkRheSkgKyBvbmVqYW4uZ2V0RGF5KCkgKyAxKSAvIDcpO1xuICB9XG5cbiAgYXN5bmMgc2hvdWxkU2hvd051ZGdlKCk6IFByb21pc2U8eyBzaG93OiBib29sZWFuOyB0eXBlPzogc3RyaW5nOyBtZXNzYWdlPzogc3RyaW5nIH0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCB0aGlzLmdldEFjdGl2aXR5U3RhdHMoKTtcbiAgICAgIGNvbnN0IGFjdGl2aXRpZXMgPSBhd2FpdCB0aGlzLmdldEFjdGl2aXRpZXMoNTApO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIGhhc24ndCBzYXZlZCBhbnl0aGluZyB0b2RheVxuICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpLnRvRGF0ZVN0cmluZygpO1xuICAgICAgY29uc3QgdG9kYXlBY3Rpdml0aWVzID0gYWN0aXZpdGllcy5maWx0ZXIoYSA9PiBcbiAgICAgICAgbmV3IERhdGUoYS5jcmVhdGVkQXQpLnRvRGF0ZVN0cmluZygpID09PSB0b2RheSAmJiBhLnR5cGUgPT09ICdzYXZlJ1xuICAgICAgKTtcbiAgICAgIFxuICAgICAgaWYgKHRvZGF5QWN0aXZpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhleSBoYXZlIGEgc3RyZWFrIHRvIG1haW50YWluXG4gICAgICAgIGlmIChzdGF0cy5jdXJyZW50U3RyZWFrID4gMCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogJ3N0cmVha19yZW1pbmRlcicsXG4gICAgICAgICAgICBtZXNzYWdlOiBgWW91IGhhdmUgYSAke3N0YXRzLmN1cnJlbnRTdHJlYWt9LWRheSBzYXZpbmcgc3RyZWFrISBEb24ndCBicmVhayBpdCAtIHNhdmUgc29tZXRoaW5nIHRvZGF5LmBcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiB0aGV5J3ZlIGJlZW4gaW5hY3RpdmUgZm9yIGEgd2hpbGVcbiAgICAgICAgaWYgKHN0YXRzLmxhc3RBY3RpdmVEYXRlKSB7XG4gICAgICAgICAgY29uc3QgZGF5c1NpbmNlQWN0aXZlID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIHN0YXRzLmxhc3RBY3RpdmVEYXRlLmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xuICAgICAgICAgIGlmIChkYXlzU2luY2VBY3RpdmUgPj0gMykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgdHlwZTogJ2luYWN0aXZlX3JlbWluZGVyJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogYFdlbGNvbWUgYmFjayEgWW91IGhhdmVuJ3Qgc2F2ZWQgYW55dGhpbmcgaW4gJHtkYXlzU2luY2VBY3RpdmV9IGRheXMuIEZvdW5kIHNvbWV0aGluZyBpbnRlcmVzdGluZz9gXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gR2VuZXJhbCBkYWlseSByZW1pbmRlclxuICAgICAgICBjb25zdCBob3VyID0gbmV3IERhdGUoKS5nZXRIb3VycygpO1xuICAgICAgICBpZiAoaG91ciA+PSAxMCAmJiBob3VyIDw9IDIwKSB7IC8vIEJldHdlZW4gMTAgQU0gYW5kIDggUE1cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6ICdkYWlseV9yZW1pbmRlcicsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRGlzY292ZXIgc29tZXRoaW5nIG5ldyB0b2RheT8gU2F2ZSBpdCB0byBOZXN0ISdcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiB7IHNob3c6IGZhbHNlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjaGVjayBudWRnZSBzdGF0dXM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc2hvdzogZmFsc2UgfTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBuZXcgU3RvcmFnZU1hbmFnZXIoKTsgIiwiaW1wb3J0IHsgc3RvcmFnZSB9IGZyb20gJy4uL3V0aWxzL3N0b3JhZ2UnO1xuaW1wb3J0IHsgYWlTZXJ2aWNlIH0gZnJvbSAnLi4vdXRpbHMvYWknO1xuaW1wb3J0IHsgU2F2ZWRMaW5rLCBIaWdobGlnaHQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBBbmFseXRpY3NTZXJ2aWNlIH0gZnJvbSAnLi4vdXRpbHMvYW5hbHl0aWNzJztcblxuLy8gSW5pdGlhbGl6ZSBleHRlbnNpb25cbmNocm9tZS5ydW50aW1lLm9uSW5zdGFsbGVkLmFkZExpc3RlbmVyKCgpID0+IHtcbiAgLy8gQ3JlYXRlIGNvbnRleHQgbWVudVxuICBjaHJvbWUuY29udGV4dE1lbnVzLmNyZWF0ZSh7XG4gICAgaWQ6ICdzYXZlVG9OZXN0JyxcbiAgICB0aXRsZTogJ1NhdmUgdG8gTmVzdCcsXG4gICAgY29udGV4dHM6IFsncGFnZScsICdsaW5rJ11cbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIGNvbnRleHQgbWVudSBmb3Igc2VsZWN0ZWQgdGV4dFxuICBjaHJvbWUuY29udGV4dE1lbnVzLmNyZWF0ZSh7XG4gICAgaWQ6ICdzYXZlSGlnaGxpZ2h0JyxcbiAgICB0aXRsZTogJ1NhdmUgaGlnaGxpZ2h0IHRvIE5lc3QnLFxuICAgIGNvbnRleHRzOiBbJ3NlbGVjdGlvbiddXG4gIH0pO1xuXG4gIGNvbnNvbGUubG9nKCdOZXN0IGV4dGVuc2lvbiBpbnN0YWxsZWQnKTtcbn0pO1xuXG4vLyBIYW5kbGUgY29udGV4dCBtZW51IGNsaWNrc1xuY2hyb21lLmNvbnRleHRNZW51cy5vbkNsaWNrZWQuYWRkTGlzdGVuZXIoYXN5bmMgKGluZm8sIHRhYikgPT4ge1xuICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogQ29udGV4dCBtZW51IGNsaWNrZWQ6JywgaW5mby5tZW51SXRlbUlkKTtcbiAgXG4gIGlmIChpbmZvLm1lbnVJdGVtSWQgPT09ICdzYXZlVG9OZXN0JyAmJiB0YWIpIHtcbiAgICBjb25zdCBsaW5rVXJsID0gaW5mby5saW5rVXJsIHx8IHRhYi51cmw7XG4gICAgYXdhaXQgc2F2ZUN1cnJlbnRQYWdlKHRhYiwgbGlua1VybCk7XG4gIH0gZWxzZSBpZiAoaW5mby5tZW51SXRlbUlkID09PSAnc2F2ZUhpZ2hsaWdodCcgJiYgdGFiICYmIGluZm8uc2VsZWN0aW9uVGV4dCkge1xuICAgIGF3YWl0IHNhdmVIaWdobGlnaHQodGFiLCBpbmZvLnNlbGVjdGlvblRleHQsICcnLCBudWxsKTtcbiAgfVxufSk7XG5cbi8vIEhhbmRsZSBzY3JlZW5zaG90IHNhdmluZ1xuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKGFzeW5jIChtZXNzYWdlLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuICBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdzYXZlU2NyZWVuc2hvdCcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2NyZWVuc2hvdCA9IHtcbiAgICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgZGF0YVVSTDogbWVzc2FnZS5zY3JlZW5zaG90LFxuICAgICAgICB1cmw6IG1lc3NhZ2UudXJsLFxuICAgICAgICB0aXRsZTogbWVzc2FnZS50aXRsZSxcbiAgICAgICAgZG9tYWluOiBuZXcgVVJMKG1lc3NhZ2UudXJsKS5ob3N0bmFtZSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIHR5cGU6ICdzY3JlZW5zaG90J1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgLy8gU2F2ZSB0byBzdG9yYWdlXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoJ25lc3Rfc2NyZWVuc2hvdHMnKTtcbiAgICAgIGNvbnN0IHNjcmVlbnNob3RzID0gcmVzdWx0Lm5lc3Rfc2NyZWVuc2hvdHMgfHwgW107XG4gICAgICBzY3JlZW5zaG90cy5wdXNoKHNjcmVlbnNob3QpO1xuICAgICAgYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgbmVzdF9zY3JlZW5zaG90czogc2NyZWVuc2hvdHMgfSk7XG4gICAgICBcbiAgICAgIC8vIFNob3cgbm90aWZpY2F0aW9uXG4gICAgICBjaHJvbWUubm90aWZpY2F0aW9ucy5jcmVhdGUoe1xuICAgICAgICB0eXBlOiAnYmFzaWMnLFxuICAgICAgICBpY29uVXJsOiAnaWNvbnMvaWNvbjQ4LnBuZycsXG4gICAgICAgIHRpdGxlOiAnU2NyZWVuc2hvdCBTYXZlZCcsXG4gICAgICAgIG1lc3NhZ2U6ICdTY3JlZW5zaG90IHNhdmVkIHRvIE5lc3Qgc3VjY2Vzc2Z1bGx5ISdcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiB0cnVlIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2F2ZSBzY3JlZW5zaG90OicsIGVycm9yKTtcbiAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9KTtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiB0cnVlO1xufSk7XG5cbi8vIEhhbmRsZSBicm93c2VyIGFjdGlvbiBjbGlja3MgKHRoaXMgd29uJ3QgZmlyZSBpZiB0aGVyZSdzIGEgcG9wdXAsIGJ1dCBrZWVwaW5nIGZvciByZWZlcmVuY2UpXG5jaHJvbWUuYWN0aW9uLm9uQ2xpY2tlZC5hZGRMaXN0ZW5lcihhc3luYyAodGFiKSA9PiB7XG4gIC8vIFRoaXMgaGFuZGxlciB3b24ndCBmaXJlIHdoZW4gYSBwb3B1cCBpcyBkZWZpbmVkIGluIHRoZSBtYW5pZmVzdFxuICAvLyBUaGUgcG9wdXAgd2lsbCBoYW5kbGUgb3BlbmluZyB0aGUgc2lkZSBwYW5lbCBpbnN0ZWFkXG4gIGNvbnNvbGUubG9nKCdBY3Rpb24gY2xpY2tlZCwgYnV0IHBvcHVwIHNob3VsZCBoYW5kbGUgdGhpcycpO1xufSk7XG5cbi8vIEhhbmRsZSBtZXNzYWdlcyBmcm9tIGNvbnRlbnQgc2NyaXB0IGFuZCBwb3B1cFxuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKChyZXF1ZXN0LCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogTWVzc2FnZSByZWNlaXZlZDonLCByZXF1ZXN0KTtcbiAgXG4gIChhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChyZXF1ZXN0LmFjdGlvbiA9PT0gJ3NhdmVDdXJyZW50UGFnZScpIHtcbiAgICAgICAgY29uc3QgdGFicyA9IGF3YWl0IGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0pO1xuICAgICAgICBpZiAodGFic1swXSkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNhdmVDdXJyZW50UGFnZSh0YWJzWzBdKTtcbiAgICAgICAgICBzZW5kUmVzcG9uc2UocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdObyBhY3RpdmUgdGFiIGZvdW5kLicgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5hY3Rpb24gPT09ICdzYXZlSGlnaGxpZ2h0Jykge1xuICAgICAgICBsZXQgdGFiVG9Vc2UgPSBudWxsO1xuICAgICAgICBpZiAoc2VuZGVyLnRhYikge1xuICAgICAgICAgIHRhYlRvVXNlID0gc2VuZGVyLnRhYjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB0YWJzID0gYXdhaXQgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSk7XG4gICAgICAgICAgaWYgKHRhYnNbMF0pIHRhYlRvVXNlID0gdGFic1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFiVG9Vc2UpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzYXZlSGlnaGxpZ2h0KHRhYlRvVXNlLCByZXF1ZXN0LnNlbGVjdGVkVGV4dCwgcmVxdWVzdC5jb250ZXh0LCByZXF1ZXN0LnBvc2l0aW9uKTtcbiAgICAgICAgICBzZW5kUmVzcG9uc2UocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdObyBhY3RpdmUgdGFiIGZvdW5kLicgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5hY3Rpb24gPT09ICdnZXRQYWdlQ29udGVudCcpIHtcbiAgICAgICAgaWYgKHNlbmRlci50YWIgJiYgc2VuZGVyLnRhYi5pZCkge1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0UGFnZUNvbnRlbnQoc2VuZGVyLnRhYi5pZCk7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBjb250ZW50OiAnJyB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0LmFjdGlvbiA9PT0gJ2FuYWx5emVQYWdlV2l0aEFJJykge1xuICAgICAgICBjb25zdCB0YWJzID0gYXdhaXQgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSk7XG4gICAgICAgIGlmICh0YWJzWzBdKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYW5hbHl6ZVBhZ2VXaXRoQUkodGFic1swXSk7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnTm8gYWN0aXZlIHRhYiBmb3VuZC4nIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuYWN0aW9uID09PSAnc2F2ZVdpdGhDb250ZXh0Jykge1xuICAgICAgICBjb25zdCB0YWJzID0gYXdhaXQgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSk7XG4gICAgICAgIGlmICh0YWJzWzBdKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2F2ZVdpdGhDb250ZXh0KHRhYnNbMF0sIHJlcXVlc3QucmVhc29uLCByZXF1ZXN0LnRhZ3MpO1xuICAgICAgICAgIHNlbmRSZXNwb25zZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ05vIGFjdGl2ZSB0YWIgZm91bmQuJyB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0LmFjdGlvbiA9PT0gJ2dldFBhZ2VJbmZvJykge1xuICAgICAgICBjb25zdCB0YWJzID0gYXdhaXQgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSk7XG4gICAgICAgIGlmICh0YWJzWzBdKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UGFnZUluZm8odGFic1swXSk7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnTm8gYWN0aXZlIHRhYiBmb3VuZC4nIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuYWN0aW9uID09PSAnZ2V0SGlnaGxpZ2h0c0ZvclBhZ2UnKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldEhpZ2hsaWdodHNGb3JQYWdlKHJlcXVlc3QudXJsKTtcbiAgICAgICAgc2VuZFJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuYWN0aW9uID09PSAncmVtb3ZlSGlnaGxpZ2h0RnJvbVN0b3JhZ2UnKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlbW92ZUhpZ2hsaWdodEZyb21TdG9yYWdlKHJlcXVlc3QuaGlnaGxpZ2h0SWQsIHJlcXVlc3QudXJsKTtcbiAgICAgICAgc2VuZFJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdVbmtub3duIGFjdGlvbicgfSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0JhY2tncm91bmQgc2NyaXB0IGVycm9yOicsIGVycm9yKTtcbiAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlIH0pO1xuICAgIH1cbiAgfSkoKTtcbiAgXG4gIHJldHVybiB0cnVlOyAvLyBLZWVwIG1lc3NhZ2UgY2hhbm5lbCBvcGVuIGZvciBhc3luYyByZXNwb25zZVxufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIHNhdmVDdXJyZW50UGFnZSh0YWI6IGNocm9tZS50YWJzLlRhYiwgbGlua1VybD86IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZzsgbGlua0lkPzogc3RyaW5nOyBhaUFuYWx5c2lzPzogYW55IH0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSBsaW5rVXJsIHx8IHRhYi51cmw7XG4gICAgY29uc3QgdGl0bGUgPSB0YWIudGl0bGUgfHwgJ1VudGl0bGVkJztcbiAgICBcbiAgICBpZiAoIXVybCB8fCB1cmwuc3RhcnRzV2l0aCgnY2hyb21lOi8vJykgfHwgdXJsLnN0YXJ0c1dpdGgoJ2Nocm9tZS1leHRlbnNpb246Ly8nKSkge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnQ2Fubm90IHNhdmUgdGhpcyB0eXBlIG9mIHBhZ2UuJyB9O1xuICAgIH1cblxuICAgIGxldCBwYWdlQ29udGVudCA9ICcnO1xuICAgIGlmICh0YWIuaWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFiLmlkLCB7IGFjdGlvbjogJ2dldFBhZ2VDb250ZW50JyB9KTtcbiAgICAgICAgcGFnZUNvbnRlbnQgPSByZXNwb25zZT8uY29udGVudCB8fCAnJztcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDb3VsZCBub3QgZXh0cmFjdCBwYWdlIGNvbnRlbnQ6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRvbWFpbiA9IG5ldyBVUkwodXJsKS5ob3N0bmFtZTtcbiAgICBcbiAgICAvLyBHZXQgdXNlciBzZXR0aW5ncyB0byBjaGVjayBpZiBBSSBmZWF0dXJlcyBhcmUgZW5hYmxlZFxuICAgIGNvbnN0IFtzZXR0aW5nc1Jlc3VsdF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoJ25lc3Rfc2V0dGluZ3MnKVxuICAgIF0pO1xuICAgIGNvbnN0IHVzZXJTZXR0aW5ncyA9IHNldHRpbmdzUmVzdWx0Lm5lc3Rfc2V0dGluZ3MgfHwge307XG4gICAgXG4gICAgLy8gQ29uZmlndXJlIEFJIHNlcnZpY2Ugd2l0aCB1c2VyJ3MgQVBJIGtleSBpZiBhdmFpbGFibGVcbiAgICBpZiAodXNlclNldHRpbmdzLm9wZW5haUFwaUtleSkge1xuICAgICAgYWlTZXJ2aWNlLnVwZGF0ZUFwaUtleSh1c2VyU2V0dGluZ3Mub3BlbmFpQXBpS2V5KTtcbiAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBBSSBzZXJ2aWNlIGNvbmZpZ3VyZWQgd2l0aCB1c2VyIEFQSSBrZXknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IE5vIE9wZW5BSSBBUEkga2V5IGZvdW5kLCB1c2luZyBydWxlLWJhc2VkIGFuYWx5c2lzJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFBlcmZvcm0gY29tcHJlaGVuc2l2ZSBBSSBhbmFseXNpc1xuICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBTdGFydGluZyBBSSBhbmFseXNpcy4uLicpO1xuICAgIGNvbnN0IGFpQW5hbHlzaXMgPSBhd2FpdCBhaVNlcnZpY2UuYW5hbHl6ZUNvbnRlbnQocGFnZUNvbnRlbnQsIHRpdGxlLCB1cmwpO1xuICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBBSSBhbmFseXNpcyBjb21wbGV0ZTonLCBhaUFuYWx5c2lzKTtcblxuICAgIC8vIERldGVybWluZSBjYXRlZ29yeSAtIHVzZSBBSSBzdWdnZXN0aW9uIGlmIGF1dG8tY2F0ZWdvcml6YXRpb24gaXMgZW5hYmxlZFxuICAgIGxldCBjYXRlZ29yeSA9ICdnZW5lcmFsJztcbiAgICBpZiAodXNlclNldHRpbmdzLmF1dG9DYXRlZ29yaXphdGlvbiAmJiBhaUFuYWx5c2lzLmNhdGVnb3J5U3VnZ2VzdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgY2F0ZWdvcnkgPSBhaUFuYWx5c2lzLmNhdGVnb3J5U3VnZ2VzdGlvbnNbMF0uY2F0ZWdvcnk7XG4gICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogQXV0by1jYXRlZ29yaXphdGlvbiBlbmFibGVkLCB1c2luZyBBSSBjYXRlZ29yeTonLCBjYXRlZ29yeSk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3TGluayA9IHtcbiAgICAgIHVybCxcbiAgICAgIHRpdGxlLFxuICAgICAgZmF2aWNvbjogdGFiLmZhdkljb25VcmwgfHwgYGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/ZG9tYWluPSR7ZG9tYWlufSZzej0zMmAsXG4gICAgICB1c2VyTm90ZTogJycsXG4gICAgICBhaVN1bW1hcnk6IHVzZXJTZXR0aW5ncy5hdXRvU3VtbWFyaXplICE9PSBmYWxzZSA/IGFpQW5hbHlzaXMuc3VtbWFyeSA6IHVuZGVmaW5lZCxcbiAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgIGRvbWFpbjogZG9tYWluLFxuICAgICAgaXNJbkluYm94OiB0cnVlLCAvLyBOZXcgbGlua3MgZ28gdG8gaW5ib3ggYnkgZGVmYXVsdFxuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogc2F2ZUN1cnJlbnRQYWdlIG5ld0xpbms6JywgSlNPTi5zdHJpbmdpZnkobmV3TGluaykpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0b3JhZ2UuYWRkTGluayhuZXdMaW5rKTtcbiAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogc2F2ZUN1cnJlbnRQYWdlIHJlc3VsdDonLCByZXN1bHQpO1xuXG4gICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5lcnJvciB8fCAnRmFpbGVkIHRvIHNhdmUgbGluayB0byBkYXRhYmFzZS4nKTtcbiAgICB9XG5cbiAgICAvLyBBcHBseSBhdXRvLXRhZ2dpbmcgaWYgZW5hYmxlZCBhbmQgd2UgaGF2ZSB0YWcgc3VnZ2VzdGlvbnNcbiAgICBpZiAodXNlclNldHRpbmdzLmF1dG9UYWdnaW5nICYmIHJlc3VsdC5saW5rSWQgJiYgYWlBbmFseXNpcy50YWdTdWdnZXN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBHZXQgaGlnaC1jb25maWRlbmNlIHRhZyBzdWdnZXN0aW9ucyAoY29uZmlkZW5jZSA+IDAuNilcbiAgICAgICAgY29uc3QgaGlnaENvbmZpZGVuY2VUYWdzID0gYWlBbmFseXNpcy50YWdTdWdnZXN0aW9uc1xuICAgICAgICAgIC5maWx0ZXIoc3VnZ2VzdGlvbiA9PiBzdWdnZXN0aW9uLmNvbmZpZGVuY2UgPiAwLjYpXG4gICAgICAgICAgLm1hcChzdWdnZXN0aW9uID0+IHN1Z2dlc3Rpb24udGFnKVxuICAgICAgICAgIC5zbGljZSgwLCA1KTsgLy8gTGltaXQgdG8gNSB0YWdzIHRvIGF2b2lkIHNwYW1cbiAgICAgICAgXG4gICAgICAgIGlmIChoaWdoQ29uZmlkZW5jZVRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBBdXRvLXRhZ2dpbmcgZW5hYmxlZCwgYXBwbHlpbmcgdGFnczonLCBoaWdoQ29uZmlkZW5jZVRhZ3MpO1xuICAgICAgICAgIGF3YWl0IHN0b3JhZ2UuYWRkVGFnc1RvTGluayhyZXN1bHQubGlua0lkLCBoaWdoQ29uZmlkZW5jZVRhZ3MpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gYXBwbHkgYXV0by10YWdzOicsIGVycm9yKTtcbiAgICAgICAgLy8gRG9uJ3QgZmFpbCB0aGUgd2hvbGUgb3BlcmF0aW9uIGlmIHRhZ2dpbmcgZmFpbHNcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBMb2cgYWN0aXZpdHkgZm9yIHRyYWNraW5nXG4gICAgaWYgKHJlc3VsdC5saW5rSWQpIHtcbiAgICAgIGF3YWl0IHN0b3JhZ2UubG9nQWN0aXZpdHkoJ3NhdmUnLCByZXN1bHQubGlua0lkLCB1bmRlZmluZWQsIHtcbiAgICAgICAgZG9tYWluLFxuICAgICAgICBjYXRlZ29yeTogbmV3TGluay5jYXRlZ29yeSxcbiAgICAgICAgaGFzQUlTdW1tYXJ5OiAhIWFpQW5hbHlzaXMuc3VtbWFyeSxcbiAgICAgICAgYXV0b1RhZ2dlZDogdXNlclNldHRpbmdzLmF1dG9UYWdnaW5nLFxuICAgICAgICBhdXRvQ2F0ZWdvcml6ZWQ6IHVzZXJTZXR0aW5ncy5hdXRvQ2F0ZWdvcml6YXRpb25cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNocm9tZS5ub3RpZmljYXRpb25zLmNyZWF0ZSh7XG4gICAgICB0eXBlOiAnYmFzaWMnLFxuICAgICAgaWNvblVybDogJ2ljb25zL2ljb240OC5wbmcnLFxuICAgICAgdGl0bGU6ICdTYXZlZCB0byBOZXN0JyxcbiAgICAgIG1lc3NhZ2U6IGBcIiR7dGl0bGV9XCIgaGFzIGJlZW4gc2F2ZWQgd2l0aCBBSSBzdWdnZXN0aW9ucy5gXG4gICAgfSk7XG5cbiAgICAvLyBOb3RpZnkgc2lkZWJhciB0byByZWZyZXNoIGRhdGFcbiAgICB0cnkge1xuICAgICAgYXdhaXQgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyBhY3Rpb246ICdyZWZyZXNoU2lkZWJhcicgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDb3VsZCBub3Qgc2VuZCByZWZyZXNoIG1lc3NhZ2UgdG8gc2lkZWJhcjonLCBlcnJvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgXG4gICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgIGxpbmtJZDogcmVzdWx0LmxpbmtJZCxcbiAgICAgIGFpQW5hbHlzaXMgLy8gUmV0dXJuIEFJIGFuYWx5c2lzIGZvciBmcm9udGVuZCB1c2VcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGN1cnJlbnQgcGFnZTonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfTtcbiAgfVxufVxuXG4vLyBOZXcgZnVuY3Rpb24gdG8gYW5hbHl6ZSBwYWdlIGNvbnRlbnQgd2l0aCBBSSAoZm9yIG9uLWRlbWFuZCBhbmFseXNpcylcbmFzeW5jIGZ1bmN0aW9uIGFuYWx5emVQYWdlV2l0aEFJKHRhYjogY2hyb21lLnRhYnMuVGFiKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGFuYWx5c2lzPzogYW55OyBlcnJvcj86IHN0cmluZyB9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gdGFiLnVybDtcbiAgICBjb25zdCB0aXRsZSA9IHRhYi50aXRsZSB8fCAnVW50aXRsZWQnO1xuICAgIFxuICAgIGlmICghdXJsIHx8IHVybC5zdGFydHNXaXRoKCdjaHJvbWU6Ly8nKSB8fCB1cmwuc3RhcnRzV2l0aCgnY2hyb21lLWV4dGVuc2lvbjovLycpKSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdDYW5ub3QgYW5hbHl6ZSB0aGlzIHR5cGUgb2YgcGFnZS4nIH07XG4gICAgfVxuXG4gICAgLy8gR2V0IHVzZXIgc2V0dGluZ3MgdG8gY29uZmlndXJlIEFJIHNlcnZpY2VcbiAgICBjb25zdCBbc2V0dGluZ3NSZXN1bHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KCduZXN0X3NldHRpbmdzJylcbiAgICBdKTtcbiAgICBjb25zdCB1c2VyU2V0dGluZ3MgPSBzZXR0aW5nc1Jlc3VsdC5uZXN0X3NldHRpbmdzIHx8IHt9O1xuICAgIFxuICAgIC8vIENvbmZpZ3VyZSBBSSBzZXJ2aWNlIHdpdGggdXNlcidzIEFQSSBrZXkgaWYgYXZhaWxhYmxlXG4gICAgaWYgKHVzZXJTZXR0aW5ncy5vcGVuYWlBcGlLZXkpIHtcbiAgICAgIGFpU2VydmljZS51cGRhdGVBcGlLZXkodXNlclNldHRpbmdzLm9wZW5haUFwaUtleSk7XG4gICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogQUkgc2VydmljZSBjb25maWd1cmVkIHdpdGggdXNlciBBUEkga2V5IGZvciBhbmFseXNpcycpO1xuICAgIH1cblxuICAgIGxldCBwYWdlQ29udGVudCA9ICcnO1xuICAgIGlmICh0YWIuaWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFiLmlkLCB7IGFjdGlvbjogJ2dldFBhZ2VDb250ZW50JyB9KTtcbiAgICAgICAgcGFnZUNvbnRlbnQgPSByZXNwb25zZT8uY29udGVudCB8fCAnJztcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDb3VsZCBub3QgZXh0cmFjdCBwYWdlIGNvbnRlbnQ6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGFuYWx5c2lzID0gYXdhaXQgYWlTZXJ2aWNlLmFuYWx5emVDb250ZW50KHBhZ2VDb250ZW50LCB0aXRsZSwgdXJsKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBhbmFseXNpcyB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBhbmFseXplIHBhZ2Ugd2l0aCBBSTonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzYXZlSGlnaGxpZ2h0KHRhYjogY2hyb21lLnRhYnMuVGFiLCBzZWxlY3RlZFRleHQ6IHN0cmluZywgY29udGV4dDogc3RyaW5nLCBwb3NpdGlvbjogYW55KTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nOyBoaWdobGlnaHRJZD86IHN0cmluZyB9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gdGFiLnVybDtcbiAgICBjb25zdCB0aXRsZSA9IHRhYi50aXRsZSB8fCAnVW50aXRsZWQnO1xuICAgIFxuICAgIGlmICghdXJsIHx8IHVybC5zdGFydHNXaXRoKCdjaHJvbWU6Ly8nKSB8fCB1cmwuc3RhcnRzV2l0aCgnY2hyb21lLWV4dGVuc2lvbjovLycpKSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdDYW5ub3Qgc2F2ZSBoaWdobGlnaHRzIGZyb20gdGhpcyB0eXBlIG9mIHBhZ2UuJyB9O1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGxpbmsgYWxyZWFkeSBleGlzdHNcbiAgICBjb25zdCBleGlzdGluZ0xpbmsgPSBhd2FpdCBzdG9yYWdlLmdldExpbmtCeVVybCh1cmwpO1xuICAgIFxuICAgIGlmIChleGlzdGluZ0xpbmspIHtcbiAgICAgIC8vIEFkZCBoaWdobGlnaHQgdG8gZXhpc3RpbmcgbGlua1xuICAgICAgY29uc3QgbmV3SGlnaGxpZ2h0OiBIaWdobGlnaHQgPSB7XG4gICAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksIC8vIFRlbXBvcmFyeSBJRCwgd2lsbCBiZSByZXBsYWNlZCBieSBzdG9yYWdlXG4gICAgICAgIHNlbGVjdGVkVGV4dCxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgcG9zaXRpb24sXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB1cGRhdGVkSGlnaGxpZ2h0cyA9IFsuLi4oZXhpc3RpbmdMaW5rLmhpZ2hsaWdodHMgfHwgW10pLCBuZXdIaWdobGlnaHRdO1xuICAgICAgYXdhaXQgc3RvcmFnZS51cGRhdGVMaW5rKGV4aXN0aW5nTGluay5pZCwgeyBoaWdobGlnaHRzOiB1cGRhdGVkSGlnaGxpZ2h0cyB9KTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IEFkZGVkIGhpZ2hsaWdodCB0byBleGlzdGluZyBsaW5rJyk7XG4gICAgICBcbiAgICAgIC8vIFJldHVybiB0aGUgaGlnaGxpZ2h0IElEIGZvciB2aXN1YWwgaGlnaGxpZ2h0aW5nXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBoaWdobGlnaHRJZDogbmV3SGlnaGxpZ2h0LmlkIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENyZWF0ZSBuZXcgbGluayB3aXRoIGhpZ2hsaWdodFxuICAgICAgY29uc3QgZG9tYWluID0gbmV3IFVSTCh1cmwpLmhvc3RuYW1lO1xuICAgICAgXG4gICAgICAvLyBHZXQgdXNlciBzZXR0aW5ncyB0byBjaGVjayBpZiBBSSBmZWF0dXJlcyBhcmUgZW5hYmxlZFxuICAgICAgY29uc3QgW3NldHRpbmdzUmVzdWx0XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KCduZXN0X3NldHRpbmdzJylcbiAgICAgIF0pO1xuICAgICAgY29uc3QgdXNlclNldHRpbmdzID0gc2V0dGluZ3NSZXN1bHQubmVzdF9zZXR0aW5ncyB8fCB7fTtcbiAgICAgIFxuICAgICAgLy8gQ29uZmlndXJlIEFJIHNlcnZpY2Ugd2l0aCB1c2VyJ3MgQVBJIGtleSBpZiBhdmFpbGFibGVcbiAgICAgIGlmICh1c2VyU2V0dGluZ3Mub3BlbmFpQXBpS2V5KSB7XG4gICAgICAgIGFpU2VydmljZS51cGRhdGVBcGlLZXkodXNlclNldHRpbmdzLm9wZW5haUFwaUtleSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBBSSBzZXJ2aWNlIGNvbmZpZ3VyZWQgd2l0aCB1c2VyIEFQSSBrZXknKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gR2V0IHBhZ2UgY29udGVudCBmb3IgQUkgYW5hbHlzaXNcbiAgICAgIGxldCBwYWdlQ29udGVudCA9ICcnO1xuICAgICAgaWYgKHRhYi5pZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFiLmlkLCB7IGFjdGlvbjogJ2dldFBhZ2VDb250ZW50JyB9KTtcbiAgICAgICAgICBwYWdlQ29udGVudCA9IHJlc3BvbnNlPy5jb250ZW50IHx8ICcnO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdDb3VsZCBub3QgZXh0cmFjdCBwYWdlIGNvbnRlbnQ6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFpQW5hbHlzaXMgPSBhd2FpdCBhaVNlcnZpY2UuYW5hbHl6ZUNvbnRlbnQocGFnZUNvbnRlbnQsIHRpdGxlLCB1cmwpO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgY2F0ZWdvcnkgLSB1c2UgQUkgc3VnZ2VzdGlvbiBpZiBhdXRvLWNhdGVnb3JpemF0aW9uIGlzIGVuYWJsZWRcbiAgICAgIGxldCBjYXRlZ29yeSA9ICdnZW5lcmFsJztcbiAgICAgIGlmICh1c2VyU2V0dGluZ3MuYXV0b0NhdGVnb3JpemF0aW9uICYmIGFpQW5hbHlzaXMuY2F0ZWdvcnlTdWdnZXN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNhdGVnb3J5ID0gYWlBbmFseXNpcy5jYXRlZ29yeVN1Z2dlc3Rpb25zWzBdLmNhdGVnb3J5O1xuICAgICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogQXV0by1jYXRlZ29yaXphdGlvbiBlbmFibGVkLCB1c2luZyBBSSBjYXRlZ29yeTonLCBjYXRlZ29yeSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5ld0hpZ2hsaWdodDogSGlnaGxpZ2h0ID0ge1xuICAgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgICAgICBzZWxlY3RlZFRleHQsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHBvc2l0aW9uLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgICAgfTtcblxuICAgICAgY29uc3QgbmV3TGluayA9IHtcbiAgICAgICAgdXJsLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgZmF2aWNvbjogdGFiLmZhdkljb25VcmwgfHwgYGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/ZG9tYWluPSR7ZG9tYWlufSZzej0zMmAsXG4gICAgICAgIHVzZXJOb3RlOiAnJyxcbiAgICAgICAgYWlTdW1tYXJ5OiB1c2VyU2V0dGluZ3MuYXV0b1N1bW1hcml6ZSAhPT0gZmFsc2UgPyBhaUFuYWx5c2lzLnN1bW1hcnkgOiB1bmRlZmluZWQsXG4gICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgZG9tYWluOiBkb21haW4sXG4gICAgICAgIGlzSW5JbmJveDogdHJ1ZSxcbiAgICAgICAgaGlnaGxpZ2h0czogW25ld0hpZ2hsaWdodF1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0b3JhZ2UuYWRkTGluayhuZXdMaW5rKTtcbiAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5lcnJvciB8fCAnRmFpbGVkIHRvIHNhdmUgaGlnaGxpZ2h0IHRvIGRhdGFiYXNlLicpO1xuICAgICAgfVxuXG4gICAgICAvLyBBcHBseSBhdXRvLXRhZ2dpbmcgaWYgZW5hYmxlZCBhbmQgd2UgaGF2ZSB0YWcgc3VnZ2VzdGlvbnNcbiAgICAgIGlmICh1c2VyU2V0dGluZ3MuYXV0b1RhZ2dpbmcgJiYgcmVzdWx0LmxpbmtJZCAmJiBhaUFuYWx5c2lzLnRhZ1N1Z2dlc3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBHZXQgaGlnaC1jb25maWRlbmNlIHRhZyBzdWdnZXN0aW9ucyAoY29uZmlkZW5jZSA+IDAuNilcbiAgICAgICAgICBjb25zdCBoaWdoQ29uZmlkZW5jZVRhZ3MgPSBhaUFuYWx5c2lzLnRhZ1N1Z2dlc3Rpb25zXG4gICAgICAgICAgICAuZmlsdGVyKHN1Z2dlc3Rpb24gPT4gc3VnZ2VzdGlvbi5jb25maWRlbmNlID4gMC42KVxuICAgICAgICAgICAgLm1hcChzdWdnZXN0aW9uID0+IHN1Z2dlc3Rpb24udGFnKVxuICAgICAgICAgICAgLnNsaWNlKDAsIDUpOyAvLyBMaW1pdCB0byA1IHRhZ3MgdG8gYXZvaWQgc3BhbVxuICAgICAgICAgIFxuICAgICAgICAgIGlmIChoaWdoQ29uZmlkZW5jZVRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IEF1dG8tdGFnZ2luZyBlbmFibGVkLCBhcHBseWluZyB0YWdzOicsIGhpZ2hDb25maWRlbmNlVGFncyk7XG4gICAgICAgICAgICBhd2FpdCBzdG9yYWdlLmFkZFRhZ3NUb0xpbmsocmVzdWx0LmxpbmtJZCwgaGlnaENvbmZpZGVuY2VUYWdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGFwcGx5IGF1dG8tdGFnczonLCBlcnJvcik7XG4gICAgICAgICAgLy8gRG9uJ3QgZmFpbCB0aGUgd2hvbGUgb3BlcmF0aW9uIGlmIHRhZ2dpbmcgZmFpbHNcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogQ3JlYXRlZCBuZXcgbGluayB3aXRoIGhpZ2hsaWdodCcpO1xuICAgICAgLy8gUmV0dXJuIHRoZSBoaWdobGlnaHQgSUQgZm9yIHZpc3VhbCBoaWdobGlnaHRpbmdcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGhpZ2hsaWdodElkOiBuZXdIaWdobGlnaHQuaWQgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNhdmUgaGlnaGxpZ2h0OicsIGVycm9yKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSB9O1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFBhZ2VDb250ZW50KHRhYklkOiBudW1iZXIpOiBQcm9taXNlPHsgY29udGVudDogc3RyaW5nIH0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYklkLCB7IGFjdGlvbjogJ2dldFBhZ2VDb250ZW50JyB9KTtcbiAgICByZXR1cm4geyBjb250ZW50OiByZXNwb25zZT8uY29udGVudCB8fCAnJyB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKCdDb3VsZCBub3QgZ2V0IHBhZ2UgY29udGVudDonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgY29udGVudDogJycgfTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRQYWdlSW5mbyh0YWI6IGNocm9tZS50YWJzLlRhYik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBwYWdlSW5mbz86IGFueTsgZXJyb3I/OiBzdHJpbmcgfT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVybCA9IHRhYi51cmw7XG4gICAgY29uc3QgdGl0bGUgPSB0YWIudGl0bGUgfHwgJ1VudGl0bGVkJztcbiAgICBcbiAgICBpZiAoIXVybCB8fCB1cmwuc3RhcnRzV2l0aCgnY2hyb21lOi8vJykgfHwgdXJsLnN0YXJ0c1dpdGgoJ2Nocm9tZS1leHRlbnNpb246Ly8nKSkge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnQ2Fubm90IGdldCBpbmZvIGZvciB0aGlzIHR5cGUgb2YgcGFnZS4nIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgXG4gICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgIHBhZ2VJbmZvOiB7XG4gICAgICAgIHRpdGxlLFxuICAgICAgICB1cmwsXG4gICAgICAgIGRvbWFpbjogbmV3IFVSTCh1cmwpLmhvc3RuYW1lLFxuICAgICAgICBmYXZpY29uOiB0YWIuZmF2SWNvblVybFxuICAgICAgfVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGdldCBwYWdlIGluZm86JywgZXJyb3IpO1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlIH07XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2F2ZVdpdGhDb250ZXh0KHRhYjogY2hyb21lLnRhYnMuVGFiLCByZWFzb246IHN0cmluZywgdGFnczogc3RyaW5nW10gPSBbXSk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBlcnJvcj86IHN0cmluZzsgbGlua0lkPzogc3RyaW5nIH0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSB0YWIudXJsO1xuICAgIGNvbnN0IHRpdGxlID0gdGFiLnRpdGxlIHx8ICdVbnRpdGxlZCc7XG4gICAgXG4gICAgaWYgKCF1cmwgfHwgdXJsLnN0YXJ0c1dpdGgoJ2Nocm9tZTovLycpIHx8IHVybC5zdGFydHNXaXRoKCdjaHJvbWUtZXh0ZW5zaW9uOi8vJykpIHtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0Nhbm5vdCBzYXZlIHRoaXMgdHlwZSBvZiBwYWdlLicgfTtcbiAgICB9XG5cbiAgICBsZXQgcGFnZUNvbnRlbnQgPSAnJztcbiAgICBpZiAodGFiLmlkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCwgeyBhY3Rpb246ICdnZXRQYWdlQ29udGVudCcgfSk7XG4gICAgICAgIHBhZ2VDb250ZW50ID0gcmVzcG9uc2U/LmNvbnRlbnQgfHwgJyc7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IGV4dHJhY3QgcGFnZSBjb250ZW50OicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkb21haW4gPSBuZXcgVVJMKHVybCkuaG9zdG5hbWU7XG4gICAgXG4gICAgLy8gR2V0IHVzZXIgc2V0dGluZ3MgdG8gY2hlY2sgaWYgQUkgZmVhdHVyZXMgYXJlIGVuYWJsZWRcbiAgICBjb25zdCBbc2V0dGluZ3NSZXN1bHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KCduZXN0X3NldHRpbmdzJylcbiAgICBdKTtcbiAgICBjb25zdCB1c2VyU2V0dGluZ3MgPSBzZXR0aW5nc1Jlc3VsdC5uZXN0X3NldHRpbmdzIHx8IHt9O1xuICAgIFxuICAgIC8vIENvbmZpZ3VyZSBBSSBzZXJ2aWNlIHdpdGggdXNlcidzIEFQSSBrZXkgaWYgYXZhaWxhYmxlXG4gICAgaWYgKHVzZXJTZXR0aW5ncy5vcGVuYWlBcGlLZXkpIHtcbiAgICAgIGFpU2VydmljZS51cGRhdGVBcGlLZXkodXNlclNldHRpbmdzLm9wZW5haUFwaUtleSk7XG4gICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogQUkgc2VydmljZSBjb25maWd1cmVkIHdpdGggdXNlciBBUEkga2V5Jyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFBlcmZvcm0gQUkgYW5hbHlzaXNcbiAgICBjb25zdCBhaUFuYWx5c2lzID0gYXdhaXQgYWlTZXJ2aWNlLmFuYWx5emVDb250ZW50KHBhZ2VDb250ZW50LCB0aXRsZSwgdXJsKTtcblxuICAgIC8vIERldGVybWluZSBjYXRlZ29yeSAtIHVzZSBBSSBzdWdnZXN0aW9uIGlmIGF1dG8tY2F0ZWdvcml6YXRpb24gaXMgZW5hYmxlZFxuICAgIGxldCBjYXRlZ29yeSA9ICdnZW5lcmFsJztcbiAgICBpZiAodXNlclNldHRpbmdzLmF1dG9DYXRlZ29yaXphdGlvbiAmJiBhaUFuYWx5c2lzLmNhdGVnb3J5U3VnZ2VzdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgY2F0ZWdvcnkgPSBhaUFuYWx5c2lzLmNhdGVnb3J5U3VnZ2VzdGlvbnNbMF0uY2F0ZWdvcnk7XG4gICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogQXV0by1jYXRlZ29yaXphdGlvbiBlbmFibGVkLCB1c2luZyBBSSBjYXRlZ29yeTonLCBjYXRlZ29yeSk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3TGluayA9IHtcbiAgICAgIHVybCxcbiAgICAgIHRpdGxlLFxuICAgICAgZmF2aWNvbjogdGFiLmZhdkljb25VcmwgfHwgYGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/ZG9tYWluPSR7ZG9tYWlufSZzej0zMmAsXG4gICAgICB1c2VyTm90ZTogcmVhc29uLCAvLyBTdG9yZSB0aGUgcmVhc29uIGFzIGEgdXNlciBub3RlXG4gICAgICBhaVN1bW1hcnk6IHVzZXJTZXR0aW5ncy5hdXRvU3VtbWFyaXplICE9PSBmYWxzZSA/IGFpQW5hbHlzaXMuc3VtbWFyeSA6IHVuZGVmaW5lZCxcbiAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgIGRvbWFpbjogZG9tYWluLFxuICAgICAgaXNJbkluYm94OiB0cnVlLFxuICAgIH07XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdG9yYWdlLmFkZExpbmsobmV3TGluayk7XG5cbiAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yIHx8ICdGYWlsZWQgdG8gc2F2ZSBsaW5rIHRvIGRhdGFiYXNlLicpO1xuICAgIH1cblxuICAgIC8vIENvbWJpbmUgdXNlci1wcm92aWRlZCB0YWdzIHdpdGggQUkgc3VnZ2VzdGlvbnMgaWYgYXV0by10YWdnaW5nIGlzIGVuYWJsZWRcbiAgICBsZXQgYWxsVGFncyA9IFsuLi50YWdzXTtcbiAgICBpZiAodXNlclNldHRpbmdzLmF1dG9UYWdnaW5nICYmIGFpQW5hbHlzaXMudGFnU3VnZ2VzdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gR2V0IGhpZ2gtY29uZmlkZW5jZSB0YWcgc3VnZ2VzdGlvbnMgKGNvbmZpZGVuY2UgPiAwLjYpXG4gICAgICBjb25zdCBhaVRhZ3MgPSBhaUFuYWx5c2lzLnRhZ1N1Z2dlc3Rpb25zXG4gICAgICAgIC5maWx0ZXIoc3VnZ2VzdGlvbiA9PiBzdWdnZXN0aW9uLmNvbmZpZGVuY2UgPiAwLjYpXG4gICAgICAgIC5tYXAoc3VnZ2VzdGlvbiA9PiBzdWdnZXN0aW9uLnRhZylcbiAgICAgICAgLnNsaWNlKDAsIDMpOyAvLyBMaW1pdCBBSSB0YWdzIHRvIGF2b2lkIG92ZXJ3aGVsbWluZyB1c2VyIHRhZ3NcbiAgICAgIFxuICAgICAgLy8gTWVyZ2UgQUkgdGFncyB3aXRoIHVzZXIgdGFncywgYXZvaWRpbmcgZHVwbGljYXRlc1xuICAgICAgYWlUYWdzLmZvckVhY2godGFnID0+IHtcbiAgICAgICAgaWYgKCFhbGxUYWdzLnNvbWUoZXhpc3RpbmdUYWcgPT4gZXhpc3RpbmdUYWcudG9Mb3dlckNhc2UoKSA9PT0gdGFnLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgYWxsVGFncy5wdXNoKHRhZyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogQXV0by10YWdnaW5nIGVuYWJsZWQsIGNvbWJpbmVkIHRhZ3M6JywgYWxsVGFncyk7XG4gICAgfVxuXG4gICAgLy8gQWRkIGFsbCB0YWdzIGlmIHdlIGhhdmUgYW55XG4gICAgaWYgKGFsbFRhZ3MubGVuZ3RoID4gMCAmJiByZXN1bHQubGlua0lkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBzdG9yYWdlLmFkZFRhZ3NUb0xpbmsocmVzdWx0LmxpbmtJZCwgYWxsVGFncyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gYWRkIHRhZ3M6JywgZXJyb3IpO1xuICAgICAgICAvLyBEb24ndCBmYWlsIHRoZSB3aG9sZSBvcGVyYXRpb24gaWYgdGFncyBmYWlsXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTG9nIGFjdGl2aXR5IGZvciB0cmFja2luZ1xuICAgIGlmIChyZXN1bHQubGlua0lkKSB7XG4gICAgICBhd2FpdCBzdG9yYWdlLmxvZ0FjdGl2aXR5KCdzYXZlJywgcmVzdWx0LmxpbmtJZCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGRvbWFpbixcbiAgICAgICAgY2F0ZWdvcnk6IG5ld0xpbmsuY2F0ZWdvcnksXG4gICAgICAgIHJlYXNvbjogcmVhc29uLnN1YnN0cmluZygwLCAxMDApLCAvLyBUcnVuY2F0ZSBmb3Igc3RvcmFnZVxuICAgICAgICB0YWdzOiB0YWdzLFxuICAgICAgICB3aXRoQ29udGV4dDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2hyb21lLm5vdGlmaWNhdGlvbnMuY3JlYXRlKHtcbiAgICAgIHR5cGU6ICdiYXNpYycsXG4gICAgICBpY29uVXJsOiAnaWNvbnMvaWNvbjQ4LnBuZycsXG4gICAgICB0aXRsZTogJ1NhdmVkIHRvIE5lc3QnLFxuICAgICAgbWVzc2FnZTogYFwiJHt0aXRsZX1cIiBzYXZlZCB3aXRoIGNvbnRleHQ6ICR7cmVhc29uLnN1YnN0cmluZygwLCA1MCl9Li4uYFxuICAgIH0pO1xuXG4gICAgLy8gTm90aWZ5IHNpZGViYXIgdG8gcmVmcmVzaCBkYXRhXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHsgYWN0aW9uOiAncmVmcmVzaFNpZGViYXInIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IHNlbmQgcmVmcmVzaCBtZXNzYWdlIHRvIHNpZGViYXI6JywgZXJyb3IpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGxpbmtJZDogcmVzdWx0LmxpbmtJZCB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzYXZlIHdpdGggY29udGV4dDonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgfTtcbiAgfVxufVxuXG4vLyBIYW5kbGUga2V5Ym9hcmQgc2hvcnRjdXRzIChpZiBjb25maWd1cmVkIGluIG1hbmlmZXN0KVxuY2hyb21lLmNvbW1hbmRzLm9uQ29tbWFuZC5hZGRMaXN0ZW5lcihhc3luYyAoY29tbWFuZCkgPT4ge1xuICBpZiAoY29tbWFuZCA9PT0gJ3NhdmUtcGFnZScpIHtcbiAgICBjb25zdCB0YWJzID0gYXdhaXQgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSk7XG4gICAgaWYgKHRhYnNbMF0pIHtcbiAgICAgIGF3YWl0IHNhdmVDdXJyZW50UGFnZSh0YWJzWzBdKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gJ29wZW4tY29tbWFuZC1wYWxldHRlJykge1xuICAgIC8vIE9wZW4gdGhlIHNpZGUgcGFuZWwgdG8gc2hvdyBjb21tYW5kIHBhbGV0dGVcbiAgICBjb25zdCB0YWJzID0gYXdhaXQgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSk7XG4gICAgaWYgKHRhYnNbMF0pIHtcbiAgICAgIGF3YWl0IGNocm9tZS5zaWRlUGFuZWwub3Blbih7IHRhYklkOiB0YWJzWzBdLmlkIH0pO1xuICAgICAgLy8gVGhlIHNpZGVwYW5lbCB3aWxsIGhhbmRsZSBvcGVuaW5nIHRoZSBjb21tYW5kIHBhbGV0dGUgdmlhIGl0cyBvd24ga2V5Ym9hcmQgbGlzdGVuZXJcbiAgICB9XG4gIH1cbn0pO1xuXG4vLyBOZXcgZnVuY3Rpb25zIGZvciB2aXN1YWwgaGlnaGxpZ2h0aW5nXG5hc3luYyBmdW5jdGlvbiBnZXRIaWdobGlnaHRzRm9yUGFnZSh1cmw6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBoaWdobGlnaHRzPzogYW55W107IGVycm9yPzogc3RyaW5nIH0+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogR2V0dGluZyBoaWdobGlnaHRzIGZvciBwYWdlOicsIHVybCk7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBsaW5rIGZvciB0aGlzIFVSTFxuICAgIGNvbnN0IGxpbmsgPSBhd2FpdCBzdG9yYWdlLmdldExpbmtCeVVybCh1cmwpO1xuICAgIFxuICAgIGlmIChsaW5rICYmIGxpbmsuaGlnaGxpZ2h0cyAmJiBsaW5rLmhpZ2hsaWdodHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IEZvdW5kJywgbGluay5oaWdobGlnaHRzLmxlbmd0aCwgJ2hpZ2hsaWdodHMgZm9yIHBhZ2UnKTtcbiAgICAgIHJldHVybiB7IFxuICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgaGlnaGxpZ2h0czogbGluay5oaWdobGlnaHRzIFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQ6IE5vIGhpZ2hsaWdodHMgZm91bmQgZm9yIHBhZ2UnKTtcbiAgICAgIHJldHVybiB7IFxuICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgaGlnaGxpZ2h0czogW10gXG4gICAgICB9O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdCYWNrZ3JvdW5kOiBGYWlsZWQgdG8gZ2V0IGhpZ2hsaWdodHMgZm9yIHBhZ2U6JywgZXJyb3IpO1xuICAgIHJldHVybiB7IFxuICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSBcbiAgICB9O1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlbW92ZUhpZ2hsaWdodEZyb21TdG9yYWdlKGhpZ2hsaWdodElkOiBzdHJpbmcsIHVybDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZDogUmVtb3ZpbmcgaGlnaGxpZ2h0IGZyb20gc3RvcmFnZTonLCBoaWdobGlnaHRJZCwgJ2ZvciBVUkw6JywgdXJsKTtcbiAgICBcbiAgICAvLyBHZXQgdGhlIGxpbmsgZm9yIHRoaXMgVVJMXG4gICAgY29uc3QgbGluayA9IGF3YWl0IHN0b3JhZ2UuZ2V0TGlua0J5VXJsKHVybCk7XG4gICAgXG4gICAgaWYgKGxpbmsgJiYgbGluay5oaWdobGlnaHRzKSB7XG4gICAgICAvLyBSZW1vdmUgdGhlIGhpZ2hsaWdodCBmcm9tIHRoZSBhcnJheVxuICAgICAgY29uc3QgdXBkYXRlZEhpZ2hsaWdodHMgPSBsaW5rLmhpZ2hsaWdodHMuZmlsdGVyKGggPT4gaC5pZCAhPT0gaGlnaGxpZ2h0SWQpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgdGhlIGxpbmsgaW4gc3RvcmFnZVxuICAgICAgYXdhaXQgc3RvcmFnZS51cGRhdGVMaW5rKGxpbmsuaWQsIHsgaGlnaGxpZ2h0czogdXBkYXRlZEhpZ2hsaWdodHMgfSk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBIaWdobGlnaHQgcmVtb3ZlZCBmcm9tIHN0b3JhZ2Ugc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICBcbiAgICAgIC8vIE5vdGlmeSBzaWRlYmFyIHRvIHJlZnJlc2ggZGF0YVxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyBhY3Rpb246ICdyZWZyZXNoU2lkZWJhcicgfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IHNlbmQgcmVmcmVzaCBtZXNzYWdlIHRvIHNpZGViYXI6JywgZXJyb3IpO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kOiBMaW5rIG5vdCBmb3VuZCBmb3IgVVJMOicsIHVybCk7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdMaW5rIG5vdCBmb3VuZCcgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignQmFja2dyb3VuZDogRmFpbGVkIHRvIHJlbW92ZSBoaWdobGlnaHQgZnJvbSBzdG9yYWdlOicsIGVycm9yKTtcbiAgICByZXR1cm4geyBcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgIGVycm9yOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UgXG4gICAgfTtcbiAgfVxufSAiXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiRnVuY3Rpb25SZWdpb24iLCJfX2ltcG9ydERlZmF1bHQiLCJ0aGlzIiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xIiwiY29uc3RydWN0b3IiLCJ1cmwiLCJoZWFkZXJzIiwic2NoZW1hIiwiZmV0Y2giLCJzZWxlY3QiLCJjb2x1bW5zIiwiaGVhZCIsImNvdW50IiwibWV0aG9kIiwicXVvdGVkIiwiY2xlYW5lZENvbHVtbnMiLCJzcGxpdCIsIm1hcCIsImMiLCJ0ZXN0Iiwiam9pbiIsInNlYXJjaFBhcmFtcyIsInNldCIsImRlZmF1bHQiLCJhbGxvd0VtcHR5IiwiaW5zZXJ0IiwidmFsdWVzIiwiZGVmYXVsdFRvTnVsbCIsInByZWZlcnNIZWFkZXJzIiwicHVzaCIsIkFycmF5IiwiaXNBcnJheSIsInJlZHVjZSIsImFjYyIsIngiLCJjb25jYXQiLCJrZXlzIiwibGVuZ3RoIiwidW5pcXVlQ29sdW1ucyIsIlNldCIsImNvbHVtbiIsImJvZHkiLCJ1cHNlcnQiLCJvbkNvbmZsaWN0IiwiaWdub3JlRHVwbGljYXRlcyIsInVuZGVmaW5lZCIsInVwZGF0ZSIsInVuc2hpZnQiLCJQb3N0Z3Jlc3RCdWlsZGVyXzEiLCJQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyIiwib3JkZXIiLCJhc2NlbmRpbmciLCJudWxsc0ZpcnN0IiwiZm9yZWlnblRhYmxlIiwicmVmZXJlbmNlZFRhYmxlIiwia2V5IiwiZXhpc3RpbmdPcmRlciIsImdldCIsImxpbWl0IiwicmFuZ2UiLCJmcm9tIiwidG8iLCJrZXlPZmZzZXQiLCJrZXlMaW1pdCIsImFib3J0U2lnbmFsIiwic2lnbmFsIiwic2luZ2xlIiwibWF5YmVTaW5nbGUiLCJpc01heWJlU2luZ2xlIiwiY3N2IiwiZ2VvanNvbiIsImV4cGxhaW4iLCJhbmFseXplIiwidmVyYm9zZSIsInNldHRpbmdzIiwiYnVmZmVycyIsIndhbCIsImZvcm1hdCIsIl9hIiwib3B0aW9ucyIsImZpbHRlciIsIkJvb2xlYW4iLCJmb3JNZWRpYXR5cGUiLCJyb2xsYmFjayIsInRyaW0iLCJyZXR1cm5zIiwiUG9zdGdyZXN0RXJyb3IiLCJQb3N0Z3Jlc3RCdWlsZGVyIiwiUG9zdGdyZXN0RmlsdGVyQnVpbGRlciIsIlBvc3RncmVzdFF1ZXJ5QnVpbGRlciIsIlBvc3RncmVzdENsaWVudCIsIlBvc3RncmVzdENsaWVudF8xIiwiUG9zdGdyZXN0UXVlcnlCdWlsZGVyXzEiLCJQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXzEiLCJQb3N0Z3Jlc3RFcnJvcl8xIiwiY29uc3RhbnRzXzEiLCJhc3NpZ24iLCJERUZBVUxUX0hFQURFUlMiLCJzY2hlbWFOYW1lIiwicmVsYXRpb24iLCJVUkwiLCJycGMiLCJmbiIsImFyZ3MiLCJlbnRyaWVzIiwiXyIsIm5hbWUiLCJmb3JFYWNoIiwiYXBwZW5kIiwiZSIsInQiLCJyIiwiU3ltYm9sIiwibiIsIml0ZXJhdG9yIiwibyIsInRvU3RyaW5nVGFnIiwiaSIsInByb3RvdHlwZSIsIkdlbmVyYXRvciIsInUiLCJjcmVhdGUiLCJfcmVnZW5lcmF0b3JEZWZpbmUyIiwiZiIsInAiLCJ5IiwiRyIsInYiLCJhIiwiZCIsImJpbmQiLCJsIiwiVHlwZUVycm9yIiwiY2FsbCIsImRvbmUiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImRpc3BsYXlOYW1lIiwiX3JlZ2VuZXJhdG9yIiwidyIsIm0iLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfaW52b2tlIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9uZXh0IiwiX3Rocm93IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfdG9Qcm9wZXJ0eUtleSIsIl9jcmVhdGVDbGFzcyIsIl90eXBlb2YiLCJ0b1ByaW1pdGl2ZSIsIlN0cmluZyIsIl90b1ByaW1pdGl2ZSIsIkFJU2VydmljZSIsImNvbmZpZyIsImFwaUtleSIsIm1vZGVsIiwiX2FuYWx5emVDb250ZW50IiwiX2NhbGxlZSIsImNvbnRlbnQiLCJ0aXRsZSIsInJlc3BvbnNlIiwiX3QiLCJfY29udGV4dCIsImdlbmVyYXRlUnVsZUJhc2VkQW5hbHlzaXMiLCJjYWxsT3BlbkFJRm9yQW5hbHlzaXMiLCJjb25zb2xlIiwiZXJyb3IiLCJfeCIsIl94MiIsIl94MyIsIl9nZW5lcmF0ZVN1bW1hcnkiLCJfY2FsbGVlMiIsIl90MiIsIl9jb250ZXh0MiIsImdlbmVyYXRlUGxhY2Vob2xkZXJTdW1tYXJ5IiwiY2FsbE9wZW5BSSIsIl94NCIsIl94NSIsIl94NiIsImRvbWFpbiIsImhvc3RuYW1lIiwiY29udGVudExvd2VyIiwidG9Mb3dlckNhc2UiLCJ0aXRsZUxvd2VyIiwiZnVsbFRleHQiLCJjb250ZW50VHlwZSIsImRldGVjdENvbnRlbnRUeXBlIiwidGFnU3VnZ2VzdGlvbnMiLCJnZW5lcmF0ZVJ1bGVCYXNlZFRhZ3MiLCJjYXRlZ29yeVN1Z2dlc3Rpb25zIiwiZ2VuZXJhdGVSdWxlQmFzZWRDYXRlZ29yaWVzIiwidG9waWNzIiwiZXh0cmFjdFRvcGljcyIsImNvbXBsZXhpdHkiLCJlc3RpbWF0ZUNvbXBsZXhpdHkiLCJyZWFkaW5nVGltZSIsImVzdGltYXRlUmVhZGluZ1RpbWUiLCJzdW1tYXJ5IiwiaW5jbHVkZXMiLCJzdWdnZXN0aW9ucyIsIl9pIiwiX09iamVjdCRlbnRyaWVzIiwidGFnIiwiY29uZmlkZW5jZSIsInJlYXNvbiIsIl9PYmplY3QkZW50cmllcyRfaSIsIl9zbGljZWRUb0FycmF5IiwiZG9tYWluUGF0dGVybiIsInRhZ3MiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfaTIiLCJfT2JqZWN0JGVudHJpZXMyIiwiX09iamVjdCRlbnRyaWVzMiRfaSIsIm1hdGNoZXMiLCJrZXl3b3JkIiwiTWF0aCIsIm1pbiIsIl9pMyIsIl9idXNpbmVzc0tleXdvcmRzIiwiaXRlbSIsImluZGV4IiwiYXJyIiwiZmluZEluZGV4Iiwic29ydCIsImIiLCJzbGljZSIsImNhdGVnb3J5IiwidG9waWMiLCJ0ZWNoU2NvcmUiLCJ0ZXJtIiwiYmVnaW5uZXJTY29yZSIsImFkdmFuY2VkU2NvcmUiLCJ3b3JkQ291bnQiLCJtYXgiLCJyb3VuZCIsIl9jYWxsT3BlbkFJRm9yQW5hbHlzaXMiLCJfY2FsbGVlMyIsIl9kYXRhJGNob2ljZXMkIiwicHJvbXB0IiwiZGF0YSIsImFpUmVzcG9uc2UiLCJwYXJzZWQiLCJfdDMiLCJfY29udGV4dDMiLCJzdWJzdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwibWVzc2FnZXMiLCJyb2xlIiwibWF4X3Rva2VucyIsInRlbXBlcmF0dXJlIiwianNvbiIsImNob2ljZXMiLCJtZXNzYWdlIiwicGFyc2UiLCJfeDciLCJfeDgiLCJfeDkiLCJfY2FsbE9wZW5BSSIsIl9jYWxsZWU0IiwiX2RhdGEkY2hvaWNlcyQyIiwiX2NvbnRleHQ0IiwiX3gwIiwiX3gxIiwiX3gxMCIsImNvbnRlbnRMZW5ndGgiLCJfZ2VuZXJhdGVTbWFydENvbGxlY3Rpb25TdWdnZXN0aW9ucyIsIl9jYWxsZWU1IiwibGlua3MiLCJkb21haW5BbmFseXNpcyIsInRvcGljQW5hbHlzaXMiLCJ0aW1lQW5hbHlzaXMiLCJub3ciLCJfaTQiLCJfT2JqZWN0JGVudHJpZXMzIiwiX09iamVjdCRlbnRyaWVzMyRfaSIsIl9pNSIsIl9PYmplY3QkZW50cmllczQiLCJfT2JqZWN0JGVudHJpZXM0JF9pIiwiX2NvdW50IiwiX2NvbnRleHQ1IiwiYW5hbHl6ZURvbWFpbnMiLCJhbmFseXplVG9waWNzIiwiYW5hbHl6ZVRpbWVQYXR0ZXJucyIsIkRhdGUiLCJpZCIsInJlcGxhY2UiLCJnZXREb21haW5EaXNwbGF5TmFtZSIsImRlc2NyaXB0aW9uIiwicXVlcnkiLCJpc1N5c3RlbSIsImF1dG9VcGRhdGUiLCJpY29uIiwiZ2V0RG9tYWluSWNvbiIsImNvbG9yIiwiZ2V0RG9tYWluQ29sb3IiLCJmaWx0ZXJzIiwiZG9tYWlucyIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsImdldFRvcGljSWNvbiIsImdldFRvcGljQ29sb3IiLCJyZWNlbnRBY3Rpdml0eSIsImRhdGVSYW5nZSIsInN0YXJ0IiwiX3gxMSIsImRvbWFpbkNvdW50cyIsImxpbmsiLCJmcm9tRW50cmllcyIsIl9yZWYiLCJfcmVmMiIsInRvcGljQ291bnRzIiwiY29tbW9uVG9waWNzIiwidXNlck5vdGUiLCJhaVN1bW1hcnkiLCJfcmVmNSIsIl9yZWY2IiwidGhyZWVEYXlzQWdvIiwiZ2V0VGltZSIsIndlZWtseVBhdHRlcm4iLCJkYXlPZldlZWsiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ3ZWVrZGF5IiwiX2FuYWx5emVGb3JTbWFydENvbGxlY3Rpb25zIiwiX2NhbGxlZTYiLCJtYXRjaGluZ0NvbGxlY3Rpb25zIiwic3VnZ2VzdGVkVGFncyIsImNvbnRlbnRTaWduYWxzIiwiYWlTY29yZSIsInR1dG9yaWFsU2NvcmUiLCJkYXlzU2luY2VDcmVhdGVkIiwiX2NvbnRleHQ2IiwiYWkiLCJ0dXRvcmlhbCIsImdpdGh1YiIsInJlY2VudCIsInVucmVhZCIsIl94MTIiLCJjcmVhdGVBSVNlcnZpY2UiLCJPcGVuQUlTZXJ2aWNlIiwiZ2VuZXJhdGVJbnNpZ2h0cyIsIl9jYWxsZWU3IiwiX2NvbnRleHQ3IiwiZ2VuZXJhdGVRdWVzdGlvbnMiLCJfY2FsbGVlOCIsIl9jb250ZXh0OCIsImdlbmVyYXRlRmxhc2hjYXJkcyIsIl9jYWxsZWU5IiwiX2NvbnRleHQ5IiwiZmluZENyb3NzUmVmZXJlbmNlcyIsIl9jYWxsZWUwIiwiX2NvbnRleHQwIiwiZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMiLCJfY2FsbGVlMSIsIl9jb250ZXh0MSIsInVwZGF0ZUtub3dsZWRnZUdyYXBoIiwiaXRlbXMiLCJfY2FsbGVlMTAiLCJfY29udGV4dDEwIiwibm9kZXMiLCJlZGdlcyIsImxhc3RVcGRhdGVkIiwiZXh0cmFjdEtleVRvcGljcyIsIl9jYWxsZWUxMSIsIl9jb250ZXh0MTEiLCJjYWxjdWxhdGVLbm93bGVkZ2VHcm93dGgiLCJfZGVmaW5lUHJvcGVydHkiLCJfZ2VuZXJhdGVJbnNpZ2h0cyIsIl9jYWxsZWUxMiIsImluc2lnaHRzIiwiX3Q0IiwiX2NvbnRleHQxMiIsInRleHQiLCJwYXJzZUluc2lnaHRzIiwiX3gxMyIsIl9nZW5lcmF0ZVF1ZXN0aW9ucyIsIl9jYWxsZWUxMyIsImRpZmZpY3VsdHkiLCJfdDUiLCJfYXJnczEzIiwiX2NvbnRleHQxMyIsIl94MTQiLCJfZ2VuZXJhdGVGbGFzaGNhcmRzIiwiX2NhbGxlZTE0IiwiX3Q2IiwiX2NvbnRleHQxNCIsIl94MTUiLCJfZmluZENyb3NzUmVmZXJlbmNlcyIsIl9jYWxsZWUxNSIsImFsbEl0ZW1zIiwiaXRlbUNvbnRlbnQiLCJvdGhlckl0ZW1zIiwiX3Q3IiwiX2NvbnRleHQxNSIsIm90aGVyIiwicGFyc2VDcm9zc1JlZmVyZW5jZXMiLCJfeDE2IiwiX3gxNyIsIl9nZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyIsIl9jYWxsZWUxNiIsInVzZXJIaXN0b3J5IiwicmVjZW50SXRlbXMiLCJfdDgiLCJfY29udGV4dDE2IiwiX3gxOCIsIl91cGRhdGVLbm93bGVkZ2VHcmFwaCIsIl9jYWxsZWUxNyIsIl9pdGVyYXRvciIsIl9zdGVwIiwiX3Q5IiwiX2NvbnRleHQxNyIsIk1hcCIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwicyIsInR5cGUiLCJsYWJlbCIsIndlaWdodCIsIm1ldGFkYXRhIiwiZnJlcXVlbmN5IiwiX3gxOSIsIl9leHRyYWN0S2V5VG9waWNzIiwiX2NhbGxlZTE4Iiwid29yZHMiLCJ3b3JkQ291bnRzIiwiX3QwIiwiX2NvbnRleHQxOCIsIm1hdGNoIiwid29yZCIsIl9yZWY5IiwiX3gyMCIsImFuYWx5dGljcyIsIm9sZGVyIiwicmVjZW50U2NvcmUiLCJzdW0iLCJkYXkiLCJsaW5rc1JlYWQiLCJoaWdobGlnaHRzTWFkZSIsIm9sZGVyU2NvcmUiLCJfY2FsbE9wZW5BSTIiLCJfY2FsbGVlMTkiLCJfZGF0YSRjaG9pY2VzJDMiLCJfY29udGV4dDE5IiwiYmFzZVVSTCIsIm9rIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwiX3gyMSIsImluc2lnaHQiLCJfb2JqZWN0U3ByZWFkIiwicmFuZG9tIiwic291cmNlSWQiLCJyZWYiLCJhaVNlcnZpY2UiLCJ2ZXJzaW9uIiwidmVyc2lvbl8xIiwibm9kZV9mZXRjaF8xIiwiYnVpbGRlciIsInNob3VsZFRocm93T25FcnJvciIsInRocm93T25FcnJvciIsInNldEhlYWRlciIsIm9uZnVsZmlsbGVkIiwib25yZWplY3RlZCIsInJlcyIsIl9mZXRjaCIsInRvU3RyaW5nIiwiYXN5bmMiLCJfYiIsIl9jIiwic3RhdHVzIiwiY291bnRIZWFkZXIiLCJjb250ZW50UmFuZ2UiLCJwYXJzZUludCIsImNvZGUiLCJkZXRhaWxzIiwiaGludCIsIl9kIiwiY2F0Y2giLCJmZXRjaEVycm9yIiwic3RhY2siLCJvdmVycmlkZVR5cGVzIiwiY29udGV4dCIsInN1cGVyIiwiZXEiLCJuZXEiLCJndCIsImd0ZSIsImx0IiwibHRlIiwibGlrZSIsInBhdHRlcm4iLCJsaWtlQWxsT2YiLCJwYXR0ZXJucyIsImxpa2VBbnlPZiIsImlsaWtlIiwiaWxpa2VBbGxPZiIsImlsaWtlQW55T2YiLCJpcyIsImNsZWFuZWRWYWx1ZXMiLCJSZWdFeHAiLCJjb250YWlucyIsImNvbnRhaW5lZEJ5IiwicmFuZ2VHdCIsInJhbmdlR3RlIiwicmFuZ2VMdCIsInJhbmdlTHRlIiwicmFuZ2VBZGphY2VudCIsIm92ZXJsYXBzIiwidGV4dFNlYXJjaCIsInR5cGVQYXJ0IiwiY29uZmlnUGFydCIsIm5vdCIsIm9wZXJhdG9yIiwib3IiLCJnbG9iYWxPYmplY3QiLCJzZWxmIiwid2luZG93IiwiZyIsImdldEdsb2JhbCIsIkhlYWRlcnMiLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImNodW5rSWQiLCJhbGwiLCJwcm9taXNlcyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIm9iaiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJjbGVhclRpbWVvdXQiLCJkb25lRm5zIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsInRhcmdldCIsImFwcGVuZENoaWxkIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInRhZ05hbWUiLCJ0b1VwcGVyQ2FzZSIsImluc3RhbGxlZENodW5rcyIsImoiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwicmVqZWN0IiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsInJlcXVlc3QiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJzb21lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwiRnVuY3Rpb25zRXJyb3IiLCJGdW5jdGlvbnNGZXRjaEVycm9yIiwiRnVuY3Rpb25zUmVsYXlFcnJvciIsIkZ1bmN0aW9uc0h0dHBFcnJvciIsIkZ1bmN0aW9uc0NsaWVudCIsImN1c3RvbUZldGNoIiwicmVnaW9uIiwiQW55IiwicmVzb2x2ZUZldGNoIiwic2V0QXV0aCIsInRva2VuIiwiQXV0aG9yaXphdGlvbiIsImludm9rZSIsImZ1bmN0aW9uTmFtZSIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImZ1bmN0aW9uQXJncyIsIl9oZWFkZXJzIiwiQmxvYiIsIkFycmF5QnVmZmVyIiwiRm9ybURhdGEiLCJpc1JlbGF5RXJyb3IiLCJyZXNwb25zZVR5cGUiLCJibG9iIiwiZm9ybURhdGEiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwicmVzdWx0IiwiV2ViU29ja2V0IiwiZ2xvYmFsIiwiZ2V0TmF0aXZlV2ViU29ja2V0IiwiU09DS0VUX1NUQVRFUyIsIkNIQU5ORUxfRVZFTlRTIiwiVFJBTlNQT1JUUyIsIkNPTk5FQ1RJT05fU1RBVEUiLCJQb3N0Z3Jlc1R5cGVzIiwiQ0hBTk5FTF9TVEFURVMiLCJTZXJpYWxpemVyIiwiSEVBREVSX0xFTkdUSCIsImRlY29kZSIsInJhd1BheWxvYWQiLCJjYWxsYmFjayIsIl9iaW5hcnlEZWNvZGUiLCJidWZmZXIiLCJ2aWV3IiwiRGF0YVZpZXciLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJfZGVjb2RlQnJvYWRjYXN0IiwidG9waWNTaXplIiwiZ2V0VWludDgiLCJldmVudFNpemUiLCJvZmZzZXQiLCJwYXlsb2FkIiwiYnl0ZUxlbmd0aCIsIlRpbWVyIiwidGltZXJDYWxjIiwidGltZXIiLCJ0cmllcyIsInJlc2V0Iiwic2NoZWR1bGVUaW1lb3V0IiwiY29udmVydENoYW5nZURhdGEiLCJyZWNvcmQiLCJza2lwVHlwZXMiLCJyZWNfa2V5IiwiY29udmVydENvbHVtbiIsImNvbHVtbk5hbWUiLCJmaW5kIiwiY29sVHlwZSIsImNvbnZlcnRDZWxsIiwibm9vcCIsImNoYXJBdCIsImRhdGFUeXBlIiwidG9BcnJheSIsImJvb2wiLCJ0b0Jvb2xlYW4iLCJmbG9hdDQiLCJmbG9hdDgiLCJpbnQyIiwiaW50NCIsImludDgiLCJudW1lcmljIiwib2lkIiwidG9OdW1iZXIiLCJqc29uYiIsInRvSnNvbiIsInRpbWVzdGFtcCIsInRvVGltZXN0YW1wU3RyaW5nIiwiYWJzdGltZSIsImRhdGUiLCJkYXRlcmFuZ2UiLCJpbnQ0cmFuZ2UiLCJpbnQ4cmFuZ2UiLCJtb25leSIsInJlbHRpbWUiLCJ0aW1lIiwidGltZXN0YW1wdHoiLCJ0aW1ldHoiLCJ0c3JhbmdlIiwidHN0enJhbmdlIiwicGFyc2VkVmFsdWUiLCJwYXJzZUZsb2F0IiwiTnVtYmVyIiwiaXNOYU4iLCJsb2ciLCJsYXN0SWR4IiwiY2xvc2VCcmFjZSIsInZhbFRyaW0iLCJ2YWwiLCJodHRwRW5kcG9pbnRVUkwiLCJzb2NrZXRVcmwiLCJQdXNoIiwiY2hhbm5lbCIsInNlbnQiLCJ0aW1lb3V0VGltZXIiLCJyZWNlaXZlZFJlc3AiLCJyZWNIb29rcyIsInJlZkV2ZW50IiwicmVzZW5kIiwiX2NhbmNlbFJlZkV2ZW50Iiwic2VuZCIsIl9oYXNSZWNlaXZlZCIsInN0YXJ0VGltZW91dCIsInNvY2tldCIsImpvaW5fcmVmIiwiX2pvaW5SZWYiLCJ1cGRhdGVQYXlsb2FkIiwicmVjZWl2ZSIsIl9tYWtlUmVmIiwiX3JlcGx5RXZlbnROYW1lIiwiX29uIiwiX2NhbmNlbFRpbWVvdXQiLCJfbWF0Y2hSZWNlaXZlIiwidHJpZ2dlciIsIl90cmlnZ2VyIiwiZGVzdHJveSIsIl9vZmYiLCJoIiwiUkVBTFRJTUVfUFJFU0VOQ0VfTElTVEVOX0VWRU5UUyIsIlJFQUxUSU1FX1BPU1RHUkVTX0NIQU5HRVNfTElTVEVOX0VWRU5UIiwiUkVBTFRJTUVfTElTVEVOX1RZUEVTIiwiUkVBTFRJTUVfU1VCU0NSSUJFX1NUQVRFUyIsIlJlYWx0aW1lUHJlc2VuY2UiLCJvcHRzIiwic3RhdGUiLCJwZW5kaW5nRGlmZnMiLCJqb2luUmVmIiwiY2FsbGVyIiwib25Kb2luIiwib25MZWF2ZSIsIm9uU3luYyIsImV2ZW50cyIsImRpZmYiLCJuZXdTdGF0ZSIsInN5bmNTdGF0ZSIsInN5bmNEaWZmIiwiaW5QZW5kaW5nU3luY1N0YXRlIiwiY3VycmVudFByZXNlbmNlcyIsIm5ld1ByZXNlbmNlcyIsImxlZnRQcmVzZW5jZXMiLCJjdXJyZW50U3RhdGUiLCJjbG9uZURlZXAiLCJ0cmFuc2Zvcm1lZFN0YXRlIiwidHJhbnNmb3JtU3RhdGUiLCJqb2lucyIsImxlYXZlcyIsInByZXNlbmNlcyIsIm5ld1ByZXNlbmNlUmVmcyIsInByZXNlbmNlX3JlZiIsImN1clByZXNlbmNlUmVmcyIsImpvaW5lZFByZXNlbmNlcyIsImluZGV4T2YiLCJqb2luZWRQcmVzZW5jZVJlZnMiLCJjdXJQcmVzZW5jZXMiLCJwcmVzZW5jZVJlZnNUb1JlbW92ZSIsImZ1bmMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibWV0YXMiLCJwcmVzZW5jZSIsIlJlYWx0aW1lQ2hhbm5lbCIsInBhcmFtcyIsImJpbmRpbmdzIiwiY2xvc2VkIiwiam9pbmVkT25jZSIsInB1c2hCdWZmZXIiLCJzdWJUb3BpYyIsImJyb2FkY2FzdCIsImFjayIsInByaXZhdGUiLCJqb2luUHVzaCIsInJlam9pblRpbWVyIiwiX3Jlam9pblVudGlsQ29ubmVjdGVkIiwicmVjb25uZWN0QWZ0ZXJNcyIsImpvaW5lZCIsInB1c2hFdmVudCIsIl9vbkNsb3NlIiwiX3JlbW92ZSIsIl9vbkVycm9yIiwiX2lzTGVhdmluZyIsIl9pc0Nsb3NlZCIsImVycm9yZWQiLCJfaXNKb2luaW5nIiwicmVwbHkiLCJicm9hZGNhc3RFbmRwb2ludFVSTCIsImVuZFBvaW50Iiwic3Vic2NyaWJlIiwiaXNDb25uZWN0ZWQiLCJjb25uZWN0IiwiaXNQcml2YXRlIiwiQ0hBTk5FTF9FUlJPUiIsIkNMT1NFRCIsImFjY2Vzc1Rva2VuUGF5bG9hZCIsInBvc3RncmVzX2NoYW5nZXMiLCJhY2Nlc3NUb2tlblZhbHVlIiwiYWNjZXNzX3Rva2VuIiwidXBkYXRlSm9pblBheWxvYWQiLCJfcmVqb2luIiwiY2xpZW50UG9zdGdyZXNCaW5kaW5ncyIsImJpbmRpbmdzTGVuIiwibmV3UG9zdGdyZXNCaW5kaW5ncyIsImNsaWVudFBvc3RncmVzQmluZGluZyIsInRhYmxlIiwic2VydmVyUG9zdGdyZXNGaWx0ZXIiLCJ1bnN1YnNjcmliZSIsIlNVQlNDUklCRUQiLCJUSU1FRF9PVVQiLCJwcmVzZW5jZVN0YXRlIiwidHJhY2siLCJ1bnRyYWNrIiwib24iLCJfY2FuUHVzaCIsIl9wdXNoIiwiZW5kcG9pbnRfcGF5bG9hZCIsImFwaWtleSIsIl9mZXRjaFdpdGhUaW1lb3V0IiwiY2FuY2VsIiwibGVhdmluZyIsIm9uQ2xvc2UiLCJjbG9zZSIsImxlYXZlUHVzaCIsImxlYXZlIiwiZmluYWxseSIsInRlYXJkb3duIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImFib3J0IiwiX29uTWVzc2FnZSIsIl9ldmVudCIsIl9pc01lbWJlciIsInR5cGVMb3dlciIsInRvTG9jYWxlTG93ZXJDYXNlIiwiaGFuZGxlZFBheWxvYWQiLCJfZSIsIl9mIiwiYmluZElkIiwiYmluZEV2ZW50IiwiaWRzIiwicG9zdGdyZXNDaGFuZ2VzIiwiY29tbWl0X3RpbWVzdGFtcCIsImVycm9ycyIsImVucmljaGVkUGF5bG9hZCIsImV2ZW50VHlwZSIsIm5ldyIsIm9sZCIsIl9nZXRQYXlsb2FkUmVjb3JkcyIsIl9pc0pvaW5lZCIsImpvaW5pbmciLCJiaW5kaW5nIiwiaXNFcXVhbCIsIm9iajEiLCJvYmoyIiwiayIsIl9sZWF2ZU9wZW5Ub3BpYyIsInJlY29yZHMiLCJvbGRfcmVjb3JkIiwiUmVhbHRpbWVDbGllbnQiLCJjaGFubmVscyIsImh0dHBFbmRwb2ludCIsImhlYXJ0YmVhdEludGVydmFsTXMiLCJoZWFydGJlYXRUaW1lciIsInBlbmRpbmdIZWFydGJlYXRSZWYiLCJoZWFydGJlYXRDYWxsYmFjayIsImxvZ2dlciIsImNvbm4iLCJzZW5kQnVmZmVyIiwic2VyaWFsaXplciIsInN0YXRlQ2hhbmdlQ2FsbGJhY2tzIiwib3BlbiIsImFjY2Vzc1Rva2VuIiwiX3Jlc29sdmVGZXRjaCIsIndlYnNvY2tldCIsInRyYW5zcG9ydCIsImxvZ0xldmVsIiwibG9nX2xldmVsIiwiZW5jb2RlIiwicmVjb25uZWN0VGltZXIiLCJkaXNjb25uZWN0Iiwid29ya2VyIiwiV29ya2VyIiwid29ya2VyVXJsIiwiZW5kcG9pbnRVUkwiLCJzZXR1cENvbm5lY3Rpb24iLCJfYXBwZW5kUGFyYW1zIiwidnNuIiwib25jbG9zZSIsImNsZWFySW50ZXJ2YWwiLCJnZXRDaGFubmVscyIsInJlbW92ZUNoYW5uZWwiLCJyZW1vdmVBbGxDaGFubmVscyIsInZhbHVlc18xIiwia2luZCIsIm1zZyIsImNvbm5lY3Rpb25TdGF0ZSIsInJlYWR5U3RhdGUiLCJjb25uZWN0aW5nIiwiQ29ubmVjdGluZyIsIk9wZW4iLCJjbG9zaW5nIiwiQ2xvc2luZyIsIkNsb3NlZCIsInJlYWx0aW1lVG9waWMiLCJleGlzdHMiLCJjaGFuIiwidG9rZW5Ub1NlbmQiLCJzZW5kSGVhcnRiZWF0Iiwib25IZWFydGJlYXQiLCJmbHVzaFNlbmRCdWZmZXIiLCJuZXdSZWYiLCJkdXBDaGFubmVsIiwiYmluYXJ5VHlwZSIsIm9ub3BlbiIsIl9vbkNvbm5PcGVuIiwiX29uQ29ubkVycm9yIiwib25tZXNzYWdlIiwiX29uQ29ubk1lc3NhZ2UiLCJfb25Db25uQ2xvc2UiLCJyYXdNZXNzYWdlIiwid29ya2VyUmVmIiwiX3N0YXJ0V29ya2VySGVhcnRiZWF0IiwiX3N0YXJ0SGVhcnRiZWF0Iiwic2V0SW50ZXJ2YWwiLCJvYmplY3RVcmwiLCJfd29ya2VyT2JqZWN0VXJsIiwidGVybWluYXRlIiwicG9zdE1lc3NhZ2UiLCJpbnRlcnZhbCIsIl90cmlnZ2VyQ2hhbkVycm9yIiwicHJlZml4IiwiVVJMU2VhcmNoUGFyYW1zIiwicmVzdWx0X3VybCIsImNyZWF0ZU9iamVjdFVSTCIsIlN0b3JhZ2VFcnJvciIsIl9faXNTdG9yYWdlRXJyb3IiLCJpc1N0b3JhZ2VFcnJvciIsIlN0b3JhZ2VBcGlFcnJvciIsInRvSlNPTiIsIlN0b3JhZ2VVbmtub3duRXJyb3IiLCJvcmlnaW5hbEVycm9yIiwicmVjdXJzaXZlVG9DYW1lbCIsImVsIiwibmV3S2V5IiwiX2dldEVycm9yTWVzc2FnZSIsImVyciIsImVycm9yX2Rlc2NyaXB0aW9uIiwiaGFuZGxlRXJyb3IiLCJSZXMiLCJub1Jlc29sdmVKc29uIiwiX2hhbmRsZVJlcXVlc3QiLCJmZXRjaGVyIiwicGFyYW1ldGVycyIsIl9nZXRSZXF1ZXN0UGFyYW1zIiwicG9zdCIsInJlbW92ZSIsIkRFRkFVTFRfU0VBUkNIX09QVElPTlMiLCJzb3J0QnkiLCJERUZBVUxUX0ZJTEVfT1BUSU9OUyIsImNhY2hlQ29udHJvbCIsIlN0b3JhZ2VGaWxlQXBpIiwiYnVja2V0SWQiLCJ1cGxvYWRPclVwZGF0ZSIsInBhdGgiLCJmaWxlQm9keSIsImZpbGVPcHRpb25zIiwiZW5jb2RlTWV0YWRhdGEiLCJ0b0Jhc2U2NCIsImNsZWFuUGF0aCIsIl9yZW1vdmVFbXB0eUZvbGRlcnMiLCJfcGF0aCIsIl9nZXRGaW5hbFBhdGgiLCJkdXBsZXgiLCJJZCIsImZ1bGxQYXRoIiwiS2V5IiwidXBsb2FkIiwidXBsb2FkVG9TaWduZWRVcmwiLCJjcmVhdGVTaWduZWRVcGxvYWRVcmwiLCJzaWduZWRVcmwiLCJtb3ZlIiwiZnJvbVBhdGgiLCJ0b1BhdGgiLCJzb3VyY2VLZXkiLCJkZXN0aW5hdGlvbktleSIsImRlc3RpbmF0aW9uQnVja2V0IiwiY29weSIsImNyZWF0ZVNpZ25lZFVybCIsImV4cGlyZXNJbiIsInRyYW5zZm9ybSIsImRvd25sb2FkUXVlcnlQYXJhbSIsImRvd25sb2FkIiwiZW5jb2RlVVJJIiwic2lnbmVkVVJMIiwiY3JlYXRlU2lnbmVkVXJscyIsInBhdGhzIiwiZGF0dW0iLCJyZW5kZXJQYXRoIiwidHJhbnNmb3JtYXRpb25RdWVyeSIsInRyYW5zZm9ybU9wdHNUb1F1ZXJ5U3RyaW5nIiwicXVlcnlTdHJpbmciLCJpbmZvIiwiZ2V0UHVibGljVXJsIiwiX3F1ZXJ5U3RyaW5nIiwicHVibGljVXJsIiwicHJlZml4ZXMiLCJsaXN0IiwiQnVmZmVyIiwiYnRvYSIsIndpZHRoIiwiaGVpZ2h0IiwicmVzaXplIiwicXVhbGl0eSIsIlN0b3JhZ2VCdWNrZXRBcGkiLCJsaXN0QnVja2V0cyIsImdldEJ1Y2tldCIsImNyZWF0ZUJ1Y2tldCIsInB1YmxpYyIsImZpbGVfc2l6ZV9saW1pdCIsImZpbGVTaXplTGltaXQiLCJhbGxvd2VkX21pbWVfdHlwZXMiLCJhbGxvd2VkTWltZVR5cGVzIiwidXBkYXRlQnVja2V0IiwicHV0IiwiZW1wdHlCdWNrZXQiLCJkZWxldGVCdWNrZXQiLCJTdG9yYWdlQ2xpZW50IiwiSlNfRU5WIiwiRGVubyIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJERUZBVUxUX0dMT0JBTF9PUFRJT05TIiwiREVGQVVMVF9EQl9PUFRJT05TIiwiREVGQVVMVF9BVVRIX09QVElPTlMiLCJhdXRvUmVmcmVzaFRva2VuIiwicGVyc2lzdFNlc3Npb24iLCJkZXRlY3RTZXNzaW9uSW5VcmwiLCJmbG93VHlwZSIsIkRFRkFVTFRfUkVBTFRJTUVfT1BUSU9OUyIsImZldGNoV2l0aEF1dGgiLCJzdXBhYmFzZUtleSIsImdldEFjY2Vzc1Rva2VuIiwiSGVhZGVyc0NvbnN0cnVjdG9yIiwiaW5wdXQiLCJpbml0IiwiaGFzIiwiQVVUT19SRUZSRVNIX1RJQ0tfRFVSQVRJT05fTVMiLCJBUElfVkVSU0lPTl9IRUFERVJfTkFNRSIsIkFQSV9WRVJTSU9OUyIsIkJBU0U2NFVSTF9SRUdFWCIsIkF1dGhFcnJvciIsIl9faXNBdXRoRXJyb3IiLCJpc0F1dGhFcnJvciIsIkF1dGhBcGlFcnJvciIsIkF1dGhVbmtub3duRXJyb3IiLCJDdXN0b21BdXRoRXJyb3IiLCJBdXRoU2Vzc2lvbk1pc3NpbmdFcnJvciIsIkF1dGhJbnZhbGlkVG9rZW5SZXNwb25zZUVycm9yIiwiQXV0aEludmFsaWRDcmVkZW50aWFsc0Vycm9yIiwiQXV0aEltcGxpY2l0R3JhbnRSZWRpcmVjdEVycm9yIiwiQXV0aFBLQ0VHcmFudENvZGVFeGNoYW5nZUVycm9yIiwiQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IiLCJpc0F1dGhSZXRyeWFibGVGZXRjaEVycm9yIiwiQXV0aFdlYWtQYXNzd29yZEVycm9yIiwicmVhc29ucyIsIkF1dGhJbnZhbGlkSnd0RXJyb3IiLCJUT19CQVNFNjRVUkwiLCJJR05PUkVfQkFTRTY0VVJMIiwiRlJPTV9CQVNFNjRVUkwiLCJjaGFyTWFwIiwiY2hhckNvZGVBdCIsImJ5dGVUb0Jhc2U2NFVSTCIsImJ5dGUiLCJlbWl0IiwicXVldWUiLCJxdWV1ZWRCaXRzIiwicG9zIiwiYnl0ZUZyb21CYXNlNjRVUkwiLCJjaGFyQ29kZSIsImJpdHMiLCJmcm9tQ2hhckNvZGUiLCJzdHJpbmdGcm9tQmFzZTY0VVJMIiwic3RyIiwiY29udiIsInV0ZjhFbWl0IiwiY29kZXBvaW50IiwiZnJvbUNvZGVQb2ludCIsInV0ZjhTdGF0ZSIsInV0ZjhzZXEiLCJiNjRTdGF0ZSIsImJ5dGVFbWl0IiwibGVhZGluZ0JpdCIsInN0cmluZ0Zyb21VVEY4IiwiY29kZXBvaW50VG9VVEY4IiwiYmFzZTY0VXJsVG9VaW50OEFycmF5Iiwib25CeXRlIiwiVWludDhBcnJheSIsImJ5dGVzVG9CYXNlNjRVUkwiLCJieXRlcyIsIm9uQ2hhciIsImNoYXIiLCJsb2NhbFN0b3JhZ2VXcml0ZVRlc3RzIiwidGVzdGVkIiwic3VwcG9ydHNMb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJyYW5kb21LZXkiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsInNldEl0ZW1Bc3luYyIsInN0b3JhZ2UiLCJnZXRJdGVtQXN5bmMiLCJnZXRJdGVtIiwicmVtb3ZlSXRlbUFzeW5jIiwiRGVmZXJyZWQiLCJwcm9taXNlQ29uc3RydWN0b3IiLCJyZWoiLCJkZWNvZGVKV1QiLCJwYXJ0cyIsImhlYWRlciIsInNpZ25hdHVyZSIsInJhdyIsImRlYzJoZXgiLCJkZWMiLCJzdWJzdHIiLCJnZXRDb2RlQ2hhbGxlbmdlQW5kTWV0aG9kIiwic3RvcmFnZUtleSIsImlzUGFzc3dvcmRSZWNvdmVyeSIsImNvZGVWZXJpZmllciIsImFycmF5IiwiVWludDMyQXJyYXkiLCJjcnlwdG8iLCJjaGFyU2V0IiwiY2hhclNldExlbiIsInZlcmlmaWVyIiwiZmxvb3IiLCJnZXRSYW5kb21WYWx1ZXMiLCJnZW5lcmF0ZVBLQ0VWZXJpZmllciIsInN0b3JlZENvZGVWZXJpZmllciIsImNvZGVDaGFsbGVuZ2UiLCJzdWJ0bGUiLCJUZXh0RW5jb2RlciIsIndhcm4iLCJoYXNoZWQiLCJyYW5kb21TdHJpbmciLCJlbmNvZGVkRGF0YSIsImhhc2giLCJkaWdlc3QiLCJzaGEyNTYiLCJnZW5lcmF0ZVBLQ0VDaGFsbGVuZ2UiLCJBUElfVkVSU0lPTl9SRUdFWCIsIlVVSURfUkVHRVgiLCJ2YWxpZGF0ZVVVSUQiLCJORVRXT1JLX0VSUk9SX0NPREVTIiwibWF5YmVSZXNwb25zZSIsImVycm9yQ29kZSIsInJlc3BvbnNlQVBJVmVyc2lvbiIsImFwaVZlcnNpb24iLCJwYXJzZVJlc3BvbnNlQVBJVmVyc2lvbiIsImVycm9yX2NvZGUiLCJ3ZWFrX3Bhc3N3b3JkIiwiX3JlcXVlc3QiLCJqd3QiLCJxcyIsInJlZGlyZWN0VG8iLCJyZXF1ZXN0UGFyYW1zIiwieGZvcm0iLCJfc2Vzc2lvblJlc3BvbnNlIiwic2Vzc2lvbiIsInJlZnJlc2hfdG9rZW4iLCJleHBpcmVzX2luIiwiaGFzU2Vzc2lvbiIsImV4cGlyZXNfYXQiLCJ1c2VyIiwiX3Nlc3Npb25SZXNwb25zZVBhc3N3b3JkIiwiX3VzZXJSZXNwb25zZSIsIl9zc29SZXNwb25zZSIsIl9nZW5lcmF0ZUxpbmtSZXNwb25zZSIsImFjdGlvbl9saW5rIiwiZW1haWxfb3RwIiwiaGFzaGVkX3Rva2VuIiwicmVkaXJlY3RfdG8iLCJ2ZXJpZmljYXRpb25fdHlwZSIsInJlc3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fcmVzdCIsInByb3BlcnRpZXMiLCJfbm9SZXNvbHZlSnNvblJlc3BvbnNlIiwiU0lHTl9PVVRfU0NPUEVTIiwibWZhIiwibGlzdEZhY3RvcnMiLCJfbGlzdEZhY3RvcnMiLCJkZWxldGVGYWN0b3IiLCJfZGVsZXRlRmFjdG9yIiwic2lnbk91dCIsInNjb3BlIiwiaW52aXRlVXNlckJ5RW1haWwiLCJlbWFpbCIsImdlbmVyYXRlTGluayIsIm5ld19lbWFpbCIsIm5ld0VtYWlsIiwiY3JlYXRlVXNlciIsImF0dHJpYnV0ZXMiLCJsaXN0VXNlcnMiLCJfZyIsInBhZ2luYXRpb24iLCJuZXh0UGFnZSIsImxhc3RQYWdlIiwidG90YWwiLCJwYWdlIiwicGVyX3BhZ2UiLCJwZXJQYWdlIiwidXNlcnMiLCJyZWwiLCJnZXRVc2VyQnlJZCIsInVpZCIsInVwZGF0ZVVzZXJCeUlkIiwiZGVsZXRlVXNlciIsInNob3VsZFNvZnREZWxldGUiLCJzaG91bGRfc29mdF9kZWxldGUiLCJ1c2VySWQiLCJmYWN0b3JzIiwibG9jYWxTdG9yYWdlQWRhcHRlciIsIm1lbW9yeUxvY2FsU3RvcmFnZUFkYXB0ZXIiLCJzdG9yZSIsImludGVybmFscyIsIkxvY2tBY3F1aXJlVGltZW91dEVycm9yIiwiaXNBY3F1aXJlVGltZW91dCIsIk5hdmlnYXRvckxvY2tBY3F1aXJlVGltZW91dEVycm9yIiwibmF2aWdhdG9yTG9jayIsImFjcXVpcmVUaW1lb3V0IiwiYWJvcnRDb250cm9sbGVyIiwibG9ja3MiLCJtb2RlIiwiaWZBdmFpbGFibGUiLCJsb2NrIiwiX19tYWdpY19fIiwicG9seWZpbGxHbG9iYWxUaGlzIiwiREVGQVVMVF9PUFRJT05TIiwiZGVidWciLCJoYXNDdXN0b21BdXRob3JpemF0aW9uSGVhZGVyIiwibG9ja05vT3AiLCJHb1RydWVDbGllbnQiLCJtZW1vcnlTdG9yYWdlIiwic3RhdGVDaGFuZ2VFbWl0dGVycyIsImF1dG9SZWZyZXNoVGlja2VyIiwidmlzaWJpbGl0eUNoYW5nZWRDYWxsYmFjayIsInJlZnJlc2hpbmdEZWZlcnJlZCIsImluaXRpYWxpemVQcm9taXNlIiwic3VwcHJlc3NHZXRTZXNzaW9uV2FybmluZyIsImxvY2tBY3F1aXJlZCIsInBlbmRpbmdJbkxvY2siLCJicm9hZGNhc3RDaGFubmVsIiwiaW5zdGFuY2VJRCIsIm5leHRJbnN0YW5jZUlEIiwibG9nRGVidWdNZXNzYWdlcyIsImFkbWluIiwiandrcyIsImp3a3NfY2FjaGVkX2F0IiwiTUlOX1NBRkVfSU5URUdFUiIsInZlcmlmeSIsIl92ZXJpZnkiLCJlbnJvbGwiLCJfZW5yb2xsIiwidW5lbnJvbGwiLCJfdW5lbnJvbGwiLCJjaGFsbGVuZ2UiLCJfY2hhbGxlbmdlIiwiY2hhbGxlbmdlQW5kVmVyaWZ5IiwiX2NoYWxsZW5nZUFuZFZlcmlmeSIsImdldEF1dGhlbnRpY2F0b3JBc3N1cmFuY2VMZXZlbCIsIl9nZXRBdXRoZW50aWNhdG9yQXNzdXJhbmNlTGV2ZWwiLCJCcm9hZGNhc3RDaGFubmVsIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9kZWJ1ZyIsIl9ub3RpZnlBbGxTdWJzY3JpYmVycyIsImluaXRpYWxpemUiLCJ0b0lTT1N0cmluZyIsIl9hY3F1aXJlTG9jayIsIl9pbml0aWFsaXplIiwiaHJlZiIsInBhcnNlUGFyYW1ldGVyc0Zyb21VUkwiLCJjYWxsYmFja1VybFR5cGUiLCJfaXNJbXBsaWNpdEdyYW50Q2FsbGJhY2siLCJfaXNQS0NFQ2FsbGJhY2siLCJfZ2V0U2Vzc2lvbkZyb21VUkwiLCJpc0F1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvciIsIl9yZW1vdmVTZXNzaW9uIiwicmVkaXJlY3RUeXBlIiwiX3NhdmVTZXNzaW9uIiwiX3JlY292ZXJBbmRSZWZyZXNoIiwiX2hhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJzaWduSW5Bbm9ueW1vdXNseSIsImNyZWRlbnRpYWxzIiwiZ290cnVlX21ldGFfc2VjdXJpdHkiLCJjYXB0Y2hhX3Rva2VuIiwiY2FwdGNoYVRva2VuIiwic2lnblVwIiwicGFzc3dvcmQiLCJjb2RlQ2hhbGxlbmdlTWV0aG9kIiwiZW1haWxSZWRpcmVjdFRvIiwiY29kZV9jaGFsbGVuZ2UiLCJjb2RlX2NoYWxsZW5nZV9tZXRob2QiLCJwaG9uZSIsInNpZ25JbldpdGhQYXNzd29yZCIsIndlYWtQYXNzd29yZCIsInNpZ25JbldpdGhPQXV0aCIsIl9oYW5kbGVQcm92aWRlclNpZ25JbiIsInByb3ZpZGVyIiwic2NvcGVzIiwicXVlcnlQYXJhbXMiLCJza2lwQnJvd3NlclJlZGlyZWN0IiwiZXhjaGFuZ2VDb2RlRm9yU2Vzc2lvbiIsImF1dGhDb2RlIiwiX2V4Y2hhbmdlQ29kZUZvclNlc3Npb24iLCJzaWduSW5XaXRoV2ViMyIsImNoYWluIiwic2lnbkluV2l0aFNvbGFuYSIsIl9oIiwiX2oiLCJfayIsIl9sIiwiX20iLCJ3YWxsZXQiLCJzdGF0ZW1lbnQiLCJyZXNvbHZlZFdhbGxldCIsIndpbmRvd0FueSIsInNvbGFuYSIsInNpZ25JbiIsInNpZ25NZXNzYWdlIiwib3V0cHV0IiwiaXNzdWVkQXQiLCJob3N0IiwidXJpIiwib3V0cHV0VG9Qcm9jZXNzIiwic2lnbmVkTWVzc2FnZSIsInB1YmxpY0tleSIsInRvQmFzZTU4Iiwibm90QmVmb3JlIiwiZXhwaXJhdGlvblRpbWUiLCJjaGFpbklkIiwibm9uY2UiLCJyZXF1ZXN0SWQiLCJyZXNvdXJjZXMiLCJyZXNvdXJjZSIsIm1heWJlU2lnbmF0dXJlIiwic3RvcmFnZUl0ZW0iLCJhdXRoX2NvZGUiLCJjb2RlX3ZlcmlmaWVyIiwic2lnbkluV2l0aElkVG9rZW4iLCJpZF90b2tlbiIsInNpZ25JbldpdGhPdHAiLCJjcmVhdGVfdXNlciIsInNob3VsZENyZWF0ZVVzZXIiLCJtZXNzYWdlSWQiLCJtZXNzYWdlX2lkIiwidmVyaWZ5T3RwIiwic2lnbkluV2l0aFNTTyIsInByb3ZpZGVyX2lkIiwicHJvdmlkZXJJZCIsInNraXBfaHR0cF9yZWRpcmVjdCIsInJlYXV0aGVudGljYXRlIiwiX3JlYXV0aGVudGljYXRlIiwiX3VzZVNlc3Npb24iLCJzZXNzaW9uRXJyb3IiLCJlbmRwb2ludCIsImdldFNlc3Npb24iLCJsYXN0Iiwid2FpdE9uIiwic3BsaWNlIiwiX19sb2FkU2Vzc2lvbiIsImN1cnJlbnRTZXNzaW9uIiwibWF5YmVTZXNzaW9uIiwiX2lzVmFsaWRTZXNzaW9uIiwiaGFzRXhwaXJlZCIsIkFVVE9fUkVGUkVTSF9USUNLX1RIUkVTSE9MRCIsImlzU2VydmVyIiwic3VwcHJlc3NXYXJuaW5nIiwiUHJveHkiLCJyZWNlaXZlciIsIlJlZmxlY3QiLCJfY2FsbFJlZnJlc2hUb2tlbiIsImdldFVzZXIiLCJfZ2V0VXNlciIsImlzQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IiLCJ1cGRhdGVVc2VyIiwiX3VwZGF0ZVVzZXIiLCJzZXNzaW9uRGF0YSIsInVzZXJFcnJvciIsInNldFNlc3Npb24iLCJfc2V0U2Vzc2lvbiIsInRpbWVOb3ciLCJleHBpcmVzQXQiLCJleHAiLCJyZWZyZXNoZWRTZXNzaW9uIiwidG9rZW5fdHlwZSIsInJlZnJlc2hTZXNzaW9uIiwiX3JlZnJlc2hTZXNzaW9uIiwiZGVsZXRlIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInByb3ZpZGVyX3Rva2VuIiwicHJvdmlkZXJfcmVmcmVzaF90b2tlbiIsImFjdHVhbGx5RXhwaXJlc0luIiwiY3VycmVudFN0b3JhZ2VDb250ZW50IiwiX3NpZ25PdXQiLCJpc0F1dGhBcGlFcnJvciIsIm9uQXV0aFN0YXRlQ2hhbmdlIiwic3Vic2NyaXB0aW9uIiwiX2VtaXRJbml0aWFsU2Vzc2lvbiIsInJlc2V0UGFzc3dvcmRGb3JFbWFpbCIsImdldFVzZXJJZGVudGl0aWVzIiwiaWRlbnRpdGllcyIsImxpbmtJZGVudGl0eSIsIl9nZXRVcmxGb3JQcm92aWRlciIsInVubGlua0lkZW50aXR5IiwiaWRlbnRpdHkiLCJpZGVudGl0eV9pZCIsIl9yZWZyZXNoQWNjZXNzVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJkZWJ1Z05hbWUiLCJzdGFydGVkQXQiLCJhdHRlbXB0IiwiYWNjZXB0Iiwic2xlZXAiLCJwb3ciLCJpc1JldHJ5YWJsZSIsIm5leHRCYWNrT2ZmSW50ZXJ2YWwiLCJJbmZpbml0eSIsImV4cGlyZXNXaXRoTWFyZ2luIiwiX3JlbW92ZVZpc2liaWxpdHlDaGFuZ2VkQ2FsbGJhY2siLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX3N0YXJ0QXV0b1JlZnJlc2giLCJfc3RvcEF1dG9SZWZyZXNoIiwidGlja2VyIiwiX2F1dG9SZWZyZXNoVG9rZW5UaWNrIiwidW5yZWYiLCJ1bnJlZlRpbWVyIiwic3RhcnRBdXRvUmVmcmVzaCIsInN0b3BBdXRvUmVmcmVzaCIsImV4cGlyZXNJblRpY2tzIiwiX29uVmlzaWJpbGl0eUNoYW5nZWQiLCJjYWxsZWRGcm9tSW5pdGlhbGl6ZSIsIm1ldGhvZE5hbWUiLCJ2aXNpYmlsaXR5U3RhdGUiLCJ1cmxQYXJhbXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJmbG93UGFyYW1zIiwiZmFjdG9ySWQiLCJmcmllbmRseV9uYW1lIiwiZnJpZW5kbHlOYW1lIiwiZmFjdG9yX3R5cGUiLCJmYWN0b3JUeXBlIiwiaXNzdWVyIiwidG90cCIsInFyX2NvZGUiLCJjaGFsbGVuZ2VfaWQiLCJjaGFsbGVuZ2VJZCIsImNoYWxsZW5nZURhdGEiLCJjaGFsbGVuZ2VFcnJvciIsImZhY3RvciIsImN1cnJlbnRMZXZlbCIsIm5leHRMZXZlbCIsImN1cnJlbnRBdXRoZW50aWNhdGlvbk1ldGhvZHMiLCJhYWwiLCJhbXIiLCJmZXRjaEp3ayIsImtpZCIsImp3ayIsImdldENsYWltcyIsInJhd0hlYWRlciIsInZhbGlkYXRlRXhwIiwiYWxnIiwiY2xhaW1zIiwiYWxnb3JpdGhtIiwibmFtZWRDdXJ2ZSIsImdldEFsZ29yaXRobSIsInNpZ25pbmdLZXkiLCJpbXBvcnRLZXkiLCJoaWdoU3Vycm9nYXRlIiwic3RyaW5nVG9VVEY4Iiwic3RyaW5nVG9VaW50OEFycmF5IiwiU3VwYWJhc2VBdXRoQ2xpZW50IiwiU3VwYWJhc2VDbGllbnQiLCJzdXBhYmFzZVVybCIsIl9zdXBhYmFzZVVybCIsImVuZHNXaXRoIiwiYmFzZVVybCIsInJlYWx0aW1lVXJsIiwicHJvdG9jb2wiLCJhdXRoVXJsIiwic3RvcmFnZVVybCIsImZ1bmN0aW9uc1VybCIsImRlZmF1bHRTdG9yYWdlS2V5IiwiZGVmYXVsdHMiLCJkYiIsImRiT3B0aW9ucyIsImF1dGgiLCJhdXRoT3B0aW9ucyIsInJlYWx0aW1lIiwicmVhbHRpbWVPcHRpb25zIiwiZ2xvYmFsT3B0aW9ucyIsImFwcGx5U2V0dGluZ0RlZmF1bHRzIiwiX2luaXRTdXBhYmFzZUF1dGhDbGllbnQiLCJfZ2V0QWNjZXNzVG9rZW4iLCJfaW5pdFJlYWx0aW1lQ2xpZW50IiwiX2xpc3RlbkZvckF1dGhFdmVudHMiLCJmdW5jdGlvbnMiLCJhdXRoSGVhZGVycyIsIl9oYW5kbGVUb2tlbkNoYW5nZWQiLCJzb3VyY2UiLCJjaGFuZ2VkQWNjZXNzVG9rZW4iLCJzdXBhYmFzZSIsImNocm9tZSIsImxvY2FsIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIl9hcnJheUxpa2VUb0FycmF5IiwiU3RvcmFnZU1hbmFnZXIiLCJfZ2V0RGF0YSIsIl95aWVsZCRzdXBhYmFzZSRhdXRoJCIsIl95aWVsZCRQcm9taXNlJGFsbCIsIl95aWVsZCRQcm9taXNlJGFsbDIiLCJsaW5rc1JlcyIsImNvbGxlY3Rpb25zUmVzIiwiY29sbGVjdGlvbnMiLCJfdGhpcyIsImdldERlZmF1bHREYXRhIiwiZGJMaW5rIiwiaGlnaGxpZ2h0cyIsImZhdmljb24iLCJ1c2VyX25vdGUiLCJhaV9zdW1tYXJ5IiwiY29sbGVjdGlvbklkIiwiY29sbGVjdGlvbl9pZCIsImlzSW5JbmJveCIsImlzX2luX2luYm94IiwicGFyc2VIaWdobGlnaHRzIiwiY3JlYXRlZF9hdCIsInVwZGF0ZWRfYXQiLCJkYkNvbCIsImdldFNtYXJ0Q29sbGVjdGlvbnMiLCJnZXREZWZhdWx0Q2F0ZWdvcmllcyIsInNtYXJ0Q29sbGVjdGlvbnMiLCJjYXRlZ29yaWVzIiwiZGVmYXVsdENhdGVnb3J5IiwiYXV0b1N1bW1hcml6ZSIsImVuYWJsZVNtYXJ0Q29sbGVjdGlvbnMiLCJfYWRkTGluayIsIl9zZXNzaW9uRGF0YSRzZXNzaW9uIiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkMiIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJCIsInN1Y2Nlc3MiLCJ1c2VyX2lkIiwibGlua0lkIiwiX3VwZGF0ZUxpbmsiLCJ1cGRhdGVzIiwiZGJVcGRhdGVzIiwiX3lpZWxkJHN1cGFiYXNlJGZyb20kMiIsIl9kZWxldGVMaW5rIiwiX3lpZWxkJHN1cGFiYXNlJGZyb20kMyIsIl9hZGRDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsIl9zZXNzaW9uRGF0YSRzZXNzaW9uMiIsIl95aWVsZCRzdXBhYmFzZSRhdXRoJDMiLCJkYkNvbGxlY3Rpb24iLCJfeWllbGQkc3VwYWJhc2UkZnJvbSQ0IiwiX3VwZGF0ZUNvbGxlY3Rpb24iLCJfeWllbGQkc3VwYWJhc2UkZnJvbSQ1IiwiX2RlbGV0ZUNvbGxlY3Rpb24iLCJfeWllbGQkc3VwYWJhc2UkZnJvbSQ2IiwiX3NlYXJjaExpbmtzIiwiX3Nlc3Npb25EYXRhJHNlc3Npb24zIiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkNCIsIl95aWVsZCRzdXBhYmFzZSRycGMiLCJfdGhpczIiLCJzZWFyY2hfcXVlcnkiLCJ1c2VyX3V1aWQiLCJyZXN1bHRfbGltaXQiLCJzZWFyY2hSYW5rIiwicmFuayIsInNlYXJjaEhlYWRsaW5lIiwiaGVhZGxpbmUiLCJfZ2V0VXNlclRhZ3MiLCJfc2Vzc2lvbkRhdGEkc2Vzc2lvbjQiLCJfeWllbGQkc3VwYWJhc2UkYXV0aCQ1IiwiX3lpZWxkJHN1cGFiYXNlJHJwYzIiLCJ1c2FnZUNvdW50IiwidXNhZ2VfY291bnQiLCJfZ2V0TGlua1RhZ3MiLCJfeWllbGQkc3VwYWJhc2UkcnBjMyIsImxpbmtfdXVpZCIsIl9hZGRUYWdzVG9MaW5rIiwidGFnTmFtZXMiLCJfc2Vzc2lvbkRhdGEkc2Vzc2lvbjUiLCJfeWllbGQkc3VwYWJhc2UkYXV0aCQ2IiwiX3lpZWxkJHN1cGFiYXNlJHJwYzQiLCJ0YWdfbmFtZXMiLCJfZ2V0TGlua3NCeVRhZyIsIl9zZXNzaW9uRGF0YSRzZXNzaW9uNiIsIl95aWVsZCRzdXBhYmFzZSRhdXRoJDciLCJfeWllbGQkc3VwYWJhc2UkcnBjNSIsIl90aGlzMyIsInRhZ19uYW1lIiwiX2NsZWFudXBVbnVzZWRUYWdzIiwiX3Nlc3Npb25EYXRhJHNlc3Npb243IiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkOCIsIl95aWVsZCRzdXBhYmFzZSRycGM2IiwiX3QxIiwiX21vdmVUb0luYm94IiwiX3lpZWxkJHN1cGFiYXNlJGZyb20kNyIsIl9tb3ZlRnJvbUluYm94IiwiX3lpZWxkJHN1cGFiYXNlJGZyb20kOCIsIl9nZXRJbmJveExpbmtzIiwiX3Nlc3Npb25EYXRhJHNlc3Npb244IiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkOSIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDkiLCJfdGhpczQiLCJfYnVsa01vdmVGcm9tSW5ib3giLCJsaW5rSWRzIiwiX3lpZWxkJHN1cGFiYXNlJGZyb20kMCIsIl90b2dnbGVDb2xsZWN0aW9uU2hhcmluZyIsIm1ha2VQdWJsaWMiLCJfc2Vzc2lvbkRhdGEkc2Vzc2lvbjkiLCJfeWllbGQkc3VwYWJhc2UkYXV0aCQwIiwiX3lpZWxkJHN1cGFiYXNlJHJwYzciLCJfdDEwIiwiY29sbGVjdGlvbl91dWlkIiwibWFrZV9wdWJsaWMiLCJzaGFyZVRva2VuIiwic2hhcmVfdG9rZW4iLCJfZ2V0Q29sbGVjdGlvblNoYXJpbmdJbmZvIiwiX3Nlc3Npb25EYXRhJHNlc3Npb24wIiwiX3lpZWxkJHN1cGFiYXNlJGF1dGgkMSIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDEiLCJfdDExIiwiaXNQdWJsaWMiLCJpc19wdWJsaWMiLCJ2aWV3Q291bnQiLCJ2aWV3X2NvdW50IiwiX2dldFNtYXJ0Q29sbGVjdGlvbnMiLCJkZWZhdWx0Q29sbGVjdGlvbnMiLCJnZXREZWZhdWx0U21hcnRDb2xsZWN0aW9ucyIsIl9nZW5lcmF0ZUFJU21hcnRDb2xsZWN0aW9ucyIsIl95aWVsZCRpbXBvcnQiLCJfdDEyIiwiZ2VuZXJhdGVTbWFydENvbGxlY3Rpb25TdWdnZXN0aW9ucyIsIl9jcmVhdGVTbWFydENvbGxlY3Rpb24iLCJfY2FsbGVlMjAiLCJfY29udGV4dDIwIiwiX3VwZGF0ZVNtYXJ0Q29sbGVjdGlvbiIsIl9jYWxsZWUyMSIsIl9jb250ZXh0MjEiLCJfeDIyIiwiX3gyMyIsIl9kZWxldGVTbWFydENvbGxlY3Rpb24iLCJfY2FsbGVlMjIiLCJfY29udGV4dDIyIiwiX3gyNCIsIl9nZXRTbWFydENvbGxlY3Rpb25MaW5rcyIsIl9jYWxsZWUyMyIsInNtYXJ0Q29sbGVjdGlvbklkIiwic21hcnRDb2xsZWN0aW9uIiwiYWxsTGlua3MiLCJfY29udGV4dDIzIiwic2MiLCJnZXREYXRhIiwiZmlsdGVyTGlua3NGb3JTbWFydENvbGxlY3Rpb24iLCJfeDI1IiwiX3NtYXJ0Q29sbGVjdGlvbiRmaWx0IiwiX3NtYXJ0Q29sbGVjdGlvbiRmaWx0MyIsIl9zbWFydENvbGxlY3Rpb24kZmlsdDQiLCJfc21hcnRDb2xsZWN0aW9uJGZpbHQ1IiwiX3RoaXM1IiwiZmlsdGVyZWRMaW5rcyIsIl9zbWFydENvbGxlY3Rpb24kZmlsdDIiLCJlbmQiLCJsaW5rRGF0ZSIsImRldGVjdENvbnRlbnRUeXBlRnJvbURvbWFpbiIsImlzQUlSZWxhdGVkIiwiaXNUdXRvcmlhbCIsImlzRGVmYXVsdCIsIl9nZXRMaW5rQnlVcmwiLCJfY2FsbGVlMjQiLCJfc2Vzc2lvbkRhdGEkc2Vzc2lvbjEiLCJfeWllbGQkc3VwYWJhc2UkYXV0aCQxMCIsIl95aWVsZCRzdXBhYmFzZSRmcm9tJDEwIiwiX2NvbnRleHQyNCIsIl94MjYiLCJoaWdobGlnaHRzRGF0YSIsIl9sb2dBY3Rpdml0eSIsIl9jYWxsZWUyNSIsImFjdGl2aXRpZXMiLCJuZXdBY3Rpdml0eSIsInJlY2VudEFjdGl2aXRpZXMiLCJfdDEzIiwiX2NvbnRleHQyNSIsImdldEFjdGl2aXRpZXMiLCJ1cGRhdGVTdHJlYWtzIiwiX3gyNyIsIl94MjgiLCJfeDI5IiwiX3gzMCIsIl9nZXRBY3Rpdml0aWVzIiwiX2NhbGxlZTI2IiwiX3QxNCIsIl9hcmdzMjYiLCJfY29udGV4dDI2IiwibmVzdF9hY3Rpdml0aWVzIiwicmV2ZXJzZSIsIl9nZXRBY3Rpdml0eVN0YXRzIiwiX2NhbGxlZTI3IiwiX3N0cmVha3MkZmluZCIsIl9zdHJlYWtzJGZpbmQyIiwic3RyZWFrcyIsInN0YXRzIiwiX3QxNSIsIl9jb250ZXh0MjciLCJnZXRTdHJlYWtzIiwidG90YWxTYXZlcyIsInRvdGFsUmVhZHMiLCJ0b3RhbEhpZ2hsaWdodHMiLCJ0b3RhbE9yZ2FuaXphdGlvbnMiLCJ0b3RhbFNlYXJjaGVzIiwiYWN0aXZlRGF5cyIsImdldFVuaXF1ZURheXMiLCJjdXJyZW50U3RyZWFrIiwiY3VycmVudENvdW50IiwiYmVzdFN0cmVhayIsImJlc3RDb3VudCIsInRoaXNXZWVrQWN0aXZpdHkiLCJnZXRUaGlzV2Vla0FjdGl2aXR5IiwibGFzdEFjdGl2ZURhdGUiLCJfZ2V0U3RyZWFrcyIsIl9jYWxsZWUyOCIsIl90MTYiLCJfY29udGV4dDI4IiwibmVzdF9zdHJlYWtzIiwiX3VwZGF0ZVN0cmVha3MiLCJfY2FsbGVlMjkiLCJhY3Rpdml0eVR5cGUiLCJ0b2RheSIsImRhaWx5U2F2ZVN0cmVhayIsImxhc3RBY3Rpdml0eURhdGUiLCJ5ZXN0ZXJkYXkiLCJ3ZWVrbHlPcmdhbml6ZVN0cmVhayIsInRoaXNXZWVrIiwibGFzdFdlZWsiLCJfdDE3IiwiX2NvbnRleHQyOSIsInRvRGF0ZVN0cmluZyIsImxhc3RBY3Rpdml0eUF0IiwiZ2V0V2Vla051bWJlciIsIl94MzEiLCJkYXlzIiwiYWN0aXZpdHkiLCJhZGQiLCJvbmVXZWVrQWdvIiwib25lamFuIiwiZ2V0RnVsbFllYXIiLCJjZWlsIiwiZ2V0RGF5IiwiX3Nob3VsZFNob3dOdWRnZSIsIl9jYWxsZWUzMCIsImRheXNTaW5jZUFjdGl2ZSIsImhvdXIiLCJfdDE4IiwiX2NvbnRleHQzMCIsImdldEFjdGl2aXR5U3RhdHMiLCJzaG93IiwiZ2V0SG91cnMiLCJfZ2V0UHVibGljQ29sbGVjdGlvbiIsIl9jYWxsZWUzMSIsIl95aWVsZCRzdXBhYmFzZSRycGM4IiwiX3QxOSIsIl9jb250ZXh0MzEiLCJvd25lckVtYWlsIiwib3duZXJfZW1haWwiLCJfeDMyIiwiX2dldFB1YmxpY0NvbGxlY3Rpb25MaW5rcyIsIl9jYWxsZWUzMiIsIl95aWVsZCRzdXBhYmFzZSRycGM5IiwiX3QyMCIsIl9jb250ZXh0MzIiLCJfeDMzIiwiX2luY3JlbWVudFZpZXdDb3VudCIsIl9jYWxsZWUzMyIsIl95aWVsZCRzdXBhYmFzZSRycGMwIiwiX3QyMSIsIl9jb250ZXh0MzMiLCJfeDM0Iiwic2F2ZUN1cnJlbnRQYWdlIiwiX3NhdmVDdXJyZW50UGFnZSIsInRhYiIsImxpbmtVcmwiLCJwYWdlQ29udGVudCIsInNldHRpbmdzUmVzdWx0IiwidXNlclNldHRpbmdzIiwiYWlBbmFseXNpcyIsIm5ld0xpbmsiLCJoaWdoQ29uZmlkZW5jZVRhZ3MiLCJzdGFydHNXaXRoIiwidGFicyIsInNlbmRNZXNzYWdlIiwiYWN0aW9uIiwibmVzdF9zZXR0aW5ncyIsIm9wZW5haUFwaUtleSIsInVwZGF0ZUFwaUtleSIsImFuYWx5emVDb250ZW50IiwiYXV0b0NhdGVnb3JpemF0aW9uIiwiZmF2SWNvblVybCIsImFkZExpbmsiLCJhdXRvVGFnZ2luZyIsInN1Z2dlc3Rpb24iLCJhZGRUYWdzVG9MaW5rIiwibG9nQWN0aXZpdHkiLCJoYXNBSVN1bW1hcnkiLCJhdXRvVGFnZ2VkIiwiYXV0b0NhdGVnb3JpemVkIiwibm90aWZpY2F0aW9ucyIsImljb25VcmwiLCJhbmFseXplUGFnZVdpdGhBSSIsIl9hbmFseXplUGFnZVdpdGhBSSIsIl95aWVsZCRQcm9taXNlJGFsbDMiLCJfeWllbGQkUHJvbWlzZSRhbGw0IiwiYW5hbHlzaXMiLCJzYXZlSGlnaGxpZ2h0IiwiX3NhdmVIaWdobGlnaHQiLCJzZWxlY3RlZFRleHQiLCJwb3NpdGlvbiIsImV4aXN0aW5nTGluayIsIm5ld0hpZ2hsaWdodCIsInVwZGF0ZWRIaWdobGlnaHRzIiwiX3lpZWxkJFByb21pc2UkYWxsNSIsIl95aWVsZCRQcm9taXNlJGFsbDYiLCJfbmV3SGlnaGxpZ2h0IiwiZ2V0TGlua0J5VXJsIiwidXBkYXRlTGluayIsImhpZ2hsaWdodElkIiwiZ2V0UGFnZUNvbnRlbnQiLCJfZ2V0UGFnZUNvbnRlbnQiLCJ0YWJJZCIsImdldFBhZ2VJbmZvIiwiX2dldFBhZ2VJbmZvIiwicGFnZUluZm8iLCJzYXZlV2l0aENvbnRleHQiLCJfc2F2ZVdpdGhDb250ZXh0IiwiX3lpZWxkJFByb21pc2UkYWxsNyIsIl95aWVsZCRQcm9taXNlJGFsbDgiLCJhbGxUYWdzIiwiX2FyZ3MxIiwiZXhpc3RpbmdUYWciLCJ3aXRoQ29udGV4dCIsImdldEhpZ2hsaWdodHNGb3JQYWdlIiwiX2dldEhpZ2hsaWdodHNGb3JQYWdlIiwicmVtb3ZlSGlnaGxpZ2h0RnJvbVN0b3JhZ2UiLCJfcmVtb3ZlSGlnaGxpZ2h0RnJvbVN0b3JhZ2UiLCJvbkluc3RhbGxlZCIsImFkZExpc3RlbmVyIiwiY29udGV4dE1lbnVzIiwiY29udGV4dHMiLCJvbkNsaWNrZWQiLCJtZW51SXRlbUlkIiwic2VsZWN0aW9uVGV4dCIsIm9uTWVzc2FnZSIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsInNjcmVlbnNob3QiLCJzY3JlZW5zaG90cyIsImRhdGFVUkwiLCJuZXN0X3NjcmVlbnNob3RzIiwiX3JlZjMiLCJ0YWJUb1VzZSIsIl90YWJzIiwiX3Jlc3VsdCIsIl90YWJzMiIsIl9yZXN1bHQyIiwiX3RhYnMzIiwiX3Jlc3VsdDMiLCJfdGFiczQiLCJfcmVzdWx0NCIsIl9yZXN1bHQ1IiwiX3Jlc3VsdDYiLCJhY3RpdmUiLCJjdXJyZW50V2luZG93IiwiY29tbWFuZHMiLCJvbkNvbW1hbmQiLCJjb21tYW5kIiwiX3RhYnM1Iiwic2lkZVBhbmVsIl0sInNvdXJjZVJvb3QiOiIifQ==