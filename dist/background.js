/*! For license information please see background.js.LICENSE.txt */
(()=>{"use strict";var e,t={907:(e,t,n)=>{n.r(t),n.d(t,{Headers:()=>o,Request:()=>s,Response:()=>c,default:()=>a,fetch:()=>i});var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("unable to locate global object")}();const i=r.fetch,a=r.fetch.bind(r),o=r.Headers,s=r.Request,c=r.Response},1961:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(5045)),a=r(n(3825)),o=n(3530);class s{constructor(e,{headers:t={},schema:n,fetch:r}={}){this.url=e,this.headers=Object.assign(Object.assign({},o.DEFAULT_HEADERS),t),this.schemaName=n,this.fetch=r}from(e){const t=new URL(`${this.url}/${e}`);return new i.default(t,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(e){return new s(this.url,{headers:this.headers,schema:e,fetch:this.fetch})}rpc(e,t={},{head:n=!1,get:r=!1,count:i}={}){let o;const s=new URL(`${this.url}/rpc/${e}`);let c;n||r?(o=n?"HEAD":"GET",Object.entries(t).filter(([e,t])=>void 0!==t).map(([e,t])=>[e,Array.isArray(t)?`{${t.join(",")}}`:`${t}`]).forEach(([e,t])=>{s.searchParams.append(e,t)})):(o="POST",c=t);const u=Object.assign({},this.headers);return i&&(u.Prefer=`count=${i}`),new a.default({method:o,url:s,headers:u,schema:this.schemaName,body:c,fetch:this.fetch,allowEmpty:!1})}}t.default=s},2279:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PostgrestError=t.PostgrestBuilder=t.PostgrestTransformBuilder=t.PostgrestFilterBuilder=t.PostgrestQueryBuilder=t.PostgrestClient=void 0;const i=r(n(1961));t.PostgrestClient=i.default;const a=r(n(5045));t.PostgrestQueryBuilder=a.default;const o=r(n(3825));t.PostgrestFilterBuilder=o.default;const s=r(n(8261));t.PostgrestTransformBuilder=s.default;const c=r(n(4279));t.PostgrestBuilder=c.default;const u=r(n(6818));t.PostgrestError=u.default,t.default={PostgrestClient:i.default,PostgrestQueryBuilder:a.default,PostgrestFilterBuilder:o.default,PostgrestTransformBuilder:s.default,PostgrestBuilder:c.default,PostgrestError:u.default}},3530:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_HEADERS=void 0;const r=n(4519);t.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${r.version}`}},3825:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(8261));class a extends i.default{eq(e,t){return this.url.searchParams.append(e,`eq.${t}`),this}neq(e,t){return this.url.searchParams.append(e,`neq.${t}`),this}gt(e,t){return this.url.searchParams.append(e,`gt.${t}`),this}gte(e,t){return this.url.searchParams.append(e,`gte.${t}`),this}lt(e,t){return this.url.searchParams.append(e,`lt.${t}`),this}lte(e,t){return this.url.searchParams.append(e,`lte.${t}`),this}like(e,t){return this.url.searchParams.append(e,`like.${t}`),this}likeAllOf(e,t){return this.url.searchParams.append(e,`like(all).{${t.join(",")}}`),this}likeAnyOf(e,t){return this.url.searchParams.append(e,`like(any).{${t.join(",")}}`),this}ilike(e,t){return this.url.searchParams.append(e,`ilike.${t}`),this}ilikeAllOf(e,t){return this.url.searchParams.append(e,`ilike(all).{${t.join(",")}}`),this}ilikeAnyOf(e,t){return this.url.searchParams.append(e,`ilike(any).{${t.join(",")}}`),this}is(e,t){return this.url.searchParams.append(e,`is.${t}`),this}in(e,t){const n=Array.from(new Set(t)).map(e=>"string"==typeof e&&new RegExp("[,()]").test(e)?`"${e}"`:`${e}`).join(",");return this.url.searchParams.append(e,`in.(${n})`),this}contains(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cs.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cs.{${t.join(",")}}`):this.url.searchParams.append(e,`cs.${JSON.stringify(t)}`),this}containedBy(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cd.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cd.{${t.join(",")}}`):this.url.searchParams.append(e,`cd.${JSON.stringify(t)}`),this}rangeGt(e,t){return this.url.searchParams.append(e,`sr.${t}`),this}rangeGte(e,t){return this.url.searchParams.append(e,`nxl.${t}`),this}rangeLt(e,t){return this.url.searchParams.append(e,`sl.${t}`),this}rangeLte(e,t){return this.url.searchParams.append(e,`nxr.${t}`),this}rangeAdjacent(e,t){return this.url.searchParams.append(e,`adj.${t}`),this}overlaps(e,t){return"string"==typeof t?this.url.searchParams.append(e,`ov.${t}`):this.url.searchParams.append(e,`ov.{${t.join(",")}}`),this}textSearch(e,t,{config:n,type:r}={}){let i="";"plain"===r?i="pl":"phrase"===r?i="ph":"websearch"===r&&(i="w");const a=void 0===n?"":`(${n})`;return this.url.searchParams.append(e,`${i}fts${a}.${t}`),this}match(e){return Object.entries(e).forEach(([e,t])=>{this.url.searchParams.append(e,`eq.${t}`)}),this}not(e,t,n){return this.url.searchParams.append(e,`not.${t}.${n}`),this}or(e,{foreignTable:t,referencedTable:n=t}={}){const r=n?`${n}.or`:"or";return this.url.searchParams.append(r,`(${e})`),this}filter(e,t,n){return this.url.searchParams.append(e,`${t}.${n}`),this}}t.default=a},4279:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(907)),a=r(n(6818));t.default=class{constructor(e){this.shouldThrowOnError=!1,this.method=e.method,this.url=e.url,this.headers=e.headers,this.schema=e.schema,this.body=e.body,this.shouldThrowOnError=e.shouldThrowOnError,this.signal=e.signal,this.isMaybeSingle=e.isMaybeSingle,e.fetch?this.fetch=e.fetch:"undefined"==typeof fetch?this.fetch=i.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(e,t){return this.headers=Object.assign({},this.headers),this.headers[e]=t,this}then(e,t){void 0===this.schema||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),"GET"!==this.method&&"HEAD"!==this.method&&(this.headers["Content-Type"]="application/json");let n=(0,this.fetch)(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async e=>{var t,n,r;let i=null,o=null,s=null,c=e.status,u=e.statusText;if(e.ok){if("HEAD"!==this.method){const t=await e.text();""===t||(o="text/csv"===this.headers.Accept||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?t:JSON.parse(t))}const r=null===(t=this.headers.Prefer)||void 0===t?void 0:t.match(/count=(exact|planned|estimated)/),a=null===(n=e.headers.get("content-range"))||void 0===n?void 0:n.split("/");r&&a&&a.length>1&&(s=parseInt(a[1])),this.isMaybeSingle&&"GET"===this.method&&Array.isArray(o)&&(o.length>1?(i={code:"PGRST116",details:`Results contain ${o.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},o=null,s=null,c=406,u="Not Acceptable"):o=1===o.length?o[0]:null)}else{const t=await e.text();try{i=JSON.parse(t),Array.isArray(i)&&404===e.status&&(o=[],i=null,c=200,u="OK")}catch(n){404===e.status&&""===t?(c=204,u="No Content"):i={message:t}}if(i&&this.isMaybeSingle&&(null===(r=null==i?void 0:i.details)||void 0===r?void 0:r.includes("0 rows"))&&(i=null,c=200,u="OK"),i&&this.shouldThrowOnError)throw new a.default(i)}return{error:i,data:o,count:s,status:c,statusText:u}});return this.shouldThrowOnError||(n=n.catch(e=>{var t,n,r;return{error:{message:`${null!==(t=null==e?void 0:e.name)&&void 0!==t?t:"FetchError"}: ${null==e?void 0:e.message}`,details:`${null!==(n=null==e?void 0:e.stack)&&void 0!==n?n:""}`,hint:"",code:`${null!==(r=null==e?void 0:e.code)&&void 0!==r?r:""}`},data:null,count:null,status:0,statusText:""}})),n.then(e,t)}returns(){return this}overrideTypes(){return this}}},4519:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="0.0.0-automated"},5045:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(3825));t.default=class{constructor(e,{headers:t={},schema:n,fetch:r}){this.url=e,this.headers=t,this.schema=n,this.fetch=r}select(e,{head:t=!1,count:n}={}){const r=t?"HEAD":"GET";let a=!1;const o=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!a?"":('"'===e&&(a=!a),e)).join("");return this.url.searchParams.set("select",o),n&&(this.headers.Prefer=`count=${n}`),new i.default({method:r,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(e,{count:t,defaultToNull:n=!0}={}){const r=[];if(this.headers.Prefer&&r.push(this.headers.Prefer),t&&r.push(`count=${t}`),n||r.push("missing=default"),this.headers.Prefer=r.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new i.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}upsert(e,{onConflict:t,ignoreDuplicates:n=!1,count:r,defaultToNull:a=!0}={}){const o=[`resolution=${n?"ignore":"merge"}-duplicates`];if(void 0!==t&&this.url.searchParams.set("on_conflict",t),this.headers.Prefer&&o.push(this.headers.Prefer),r&&o.push(`count=${r}`),a||o.push("missing=default"),this.headers.Prefer=o.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new i.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}update(e,{count:t}={}){const n=[];return this.headers.Prefer&&n.push(this.headers.Prefer),t&&n.push(`count=${t}`),this.headers.Prefer=n.join(","),new i.default({method:"PATCH",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}delete({count:e}={}){const t=[];return e&&t.push(`count=${e}`),this.headers.Prefer&&t.unshift(this.headers.Prefer),this.headers.Prefer=t.join(","),new i.default({method:"DELETE",url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}}},6818:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends Error{constructor(e){super(e.message),this.name="PostgrestError",this.details=e.details,this.hint=e.hint,this.code=e.code}}t.default=n},8261:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(4279));class a extends i.default{select(e){let t=!1;const n=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!t?"":('"'===e&&(t=!t),e)).join("");return this.url.searchParams.set("select",n),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(e,{ascending:t=!0,nullsFirst:n,foreignTable:r,referencedTable:i=r}={}){const a=i?`${i}.order`:"order",o=this.url.searchParams.get(a);return this.url.searchParams.set(a,`${o?`${o},`:""}${e}.${t?"asc":"desc"}${void 0===n?"":n?".nullsfirst":".nullslast"}`),this}limit(e,{foreignTable:t,referencedTable:n=t}={}){const r=void 0===n?"limit":`${n}.limit`;return this.url.searchParams.set(r,`${e}`),this}range(e,t,{foreignTable:n,referencedTable:r=n}={}){const i=void 0===r?"offset":`${r}.offset`,a=void 0===r?"limit":`${r}.limit`;return this.url.searchParams.set(i,`${e}`),this.url.searchParams.set(a,""+(t-e+1)),this}abortSignal(e){return this.signal=e,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return"GET"===this.method?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:e=!1,verbose:t=!1,settings:n=!1,buffers:r=!1,wal:i=!1,format:a="text"}={}){var o;const s=[e?"analyze":null,t?"verbose":null,n?"settings":null,r?"buffers":null,i?"wal":null].filter(Boolean).join("|"),c=null!==(o=this.headers.Accept)&&void 0!==o?o:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${a}; for="${c}"; options=${s};`,this}rollback(){var e;return(null!==(e=this.headers.Prefer)&&void 0!==e?e:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}}t.default=a},8508:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach(function(t){s(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function o(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=l(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function s(e,t,n){return(t=b(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||l(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(e,t)||l(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){if(e){if("string"==typeof e)return h(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function d(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return f(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(f(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,f(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,f(h,"constructor",u),f(u,"constructor",c),c.displayName="GeneratorFunction",f(u,i,"GeneratorFunction"),f(h),f(h,i,"Generator"),f(h,r,function(){return this}),f(h,"toString",function(){return"[object Generator]"}),(d=function(){return{w:a,m:p}})()}function f(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}f=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){f(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},f(e,t,n,r)}function p(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function g(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){p(a,r,i,o,s,"next",e)}function s(e){p(a,r,i,o,s,"throw",e)}o(void 0)})}}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,b(r.key),r)}}function y(e,t,n){return t&&v(e.prototype,t),n&&v(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function b(e){var t=function(e){if("object"!=r(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==r(t)?t:t+""}n.r(t),n.d(t,{AIService:()=>w,aiService:()=>S,createAIService:()=>k});var w=function(){return y(function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};m(this,e),this.apiKey=t.apiKey||"",this.model=t.model||"gpt-3.5-turbo"},[{key:"analyzeContent",value:(o=g(d().m(function e(t,n,r){var i,a;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generateRuleBasedAnalysis(t,n,r));case 1:return e.p=1,e.n=2,this.callOpenAIForAnalysis(t,n,r);case 2:return i=e.v,e.a(2,i);case 3:return e.p=3,a=e.v,console.error("AI analysis failed, falling back to rule-based:",a),e.a(2,this.generateRuleBasedAnalysis(t,n,r))}},e,this,[[1,3]])})),function(e,t,n){return o.apply(this,arguments)})},{key:"generateSummary",value:(a=g(d().m(function e(t,n,r){var i,a;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generatePlaceholderSummary(t,n,r));case 1:return e.p=1,e.n=2,this.callOpenAI(t,n,r);case 2:return i=e.v,e.a(2,i);case 3:return e.p=3,a=e.v,console.error("AI summary generation failed:",a),e.a(2,this.generatePlaceholderSummary(t,n,r))}},e,this,[[1,3]])})),function(e,t,n){return a.apply(this,arguments)})},{key:"generateRuleBasedAnalysis",value:function(e,t,n){var r=new URL(n).hostname,i=e.toLowerCase(),a=t.toLowerCase(),o="".concat(a," ").concat(i),s=this.detectContentType(r,t,e),c=this.generateRuleBasedTags(o,r,s),u=this.generateRuleBasedCategories(o,r,s),l=this.extractTopics(o),h=this.estimateComplexity(e),d=this.estimateReadingTime(e);return{summary:this.generatePlaceholderSummary(e,t,n),tagSuggestions:c,categorySuggestions:u,contentType:s,topics:l,complexity:h,readingTime:d}}},{key:"detectContentType",value:function(e,t,n){var r=t.toLowerCase(),i=n.toLowerCase();return e.includes("youtube.com")||e.includes("vimeo.com")||e.includes("twitch.tv")?"video":e.includes("docs.")||r.includes("documentation")||i.includes("api reference")||i.includes("getting started")?"documentation":r.includes("tutorial")||r.includes("how to")||r.includes("guide")||i.includes("step by step")?"tutorial":e.includes("news")||e.includes("cnn.com")||e.includes("bbc.com")||e.includes("techcrunch.com")||e.includes("reuters.com")?"news":e.includes("medium.com")||e.includes("blog")||r.includes("thoughts on")||i.includes("published")?"blog":e.includes("arxiv.org")||e.includes("scholar.google")||r.includes("research")||i.includes("abstract")?"research":e.includes("github.com")||r.includes("tool")||r.includes("app")||i.includes("download")?"tool":r.includes("reference")||r.includes("cheat sheet")||i.includes("quick reference")?"reference":"article"}},{key:"generateRuleBasedTags",value:function(e,t,n){for(var r=[],i=0,a=Object.entries({"github.com":[{tag:"github",confidence:.9,reason:"GitHub repository"}],"stackoverflow.com":[{tag:"programming",confidence:.8,reason:"Stack Overflow content"}],"medium.com":[{tag:"blog",confidence:.7,reason:"Medium article"}],"youtube.com":[{tag:"video",confidence:.9,reason:"YouTube video"}],"linkedin.com":[{tag:"career",confidence:.7,reason:"LinkedIn content"}]});i<a.length;i++){var o=u(a[i],2),s=o[0],l=o[1];t.includes(s)&&r.push.apply(r,c(l))}for(var h=0,d=Object.entries({javascript:["javascript","js","node.js","react","vue","angular"],python:["python","django","flask","pandas","numpy"],"web-development":["html","css","frontend","backend","full-stack"],"machine-learning":["ml","ai","neural network","deep learning","tensorflow"],"data-science":["data science","analytics","visualization","statistics"],mobile:["android","ios","react native","flutter","mobile app"],devops:["docker","kubernetes","aws","cloud","deployment"],database:["sql","postgresql","mongodb","database design"],security:["cybersecurity","encryption","vulnerability","penetration testing"]});h<d.length;h++){var f=u(d[h],2),p=f[0],g=f[1].filter(function(t){return e.includes(t)}).length;if(g>0){var m=Math.min(.9,.4+.1*g);r.push({tag:p,confidence:m,reason:"Found ".concat(g," related keyword(s)")})}}r.push({tag:n||"general",confidence:.6,reason:"Detected as ".concat(n," content")}),(e.includes("beginner")||e.includes("getting started"))&&r.push({tag:"beginner",confidence:.7,reason:"Beginner-friendly content"}),(e.includes("advanced")||e.includes("expert"))&&r.push({tag:"advanced",confidence:.7,reason:"Advanced content"});for(var v=0,y=["productivity","business","startup","marketing","sales","finance"];v<y.length;v++){var b=y[v];e.includes(b)&&r.push({tag:b,confidence:.6,reason:"Content related to ".concat(b)})}return r.filter(function(e,t,n){return n.findIndex(function(t){return t.tag===e.tag})===t}).sort(function(e,t){return t.confidence-e.confidence}).slice(0,8)}},{key:"generateRuleBasedCategories",value:function(e,t,n){var r=[];return(e.includes("work")||e.includes("job")||e.includes("career")||e.includes("professional")||e.includes("business"))&&r.push({category:"work",confidence:.8,reason:"Contains work-related content"}),("tutorial"===n||"documentation"===n||e.includes("learn")||e.includes("education")||e.includes("course"))&&r.push({category:"learning",confidence:.9,reason:"Educational content detected"}),(e.includes("hobby")||e.includes("personal")||e.includes("lifestyle")||e.includes("entertainment"))&&r.push({category:"personal",confidence:.7,reason:"Personal interest content"}),(t.includes("github.com")||t.includes("stackoverflow.com")||e.includes("programming")||e.includes("development"))&&r.push({category:"work",confidence:.8,reason:"Technical/development content"}),("news"===n||e.includes("breaking")||e.includes("update"))&&r.push({category:"general",confidence:.7,reason:"News or current events"}),0===r.length&&r.push({category:"general",confidence:.5,reason:"General content"}),r.sort(function(e,t){return t.confidence-e.confidence})}},{key:"extractTopics",value:function(e){return["artificial intelligence","machine learning","web development","mobile development","data science","cybersecurity","cloud computing","blockchain","cryptocurrency","startup","productivity","leadership","design","marketing","sales","programming","software engineering","devops","database","frontend","backend","full-stack","api","microservices","architecture"].filter(function(t){return e.includes(t)}).slice(0,5)}},{key:"estimateComplexity",value:function(e){var t=e.toLowerCase(),n=["algorithm","architecture","optimization","scalability","performance"].filter(function(e){return t.includes(e)}).length,r=["introduction","basics","getting started","beginner","simple"].filter(function(e){return t.includes(e)}).length,i=["advanced","expert","complex","sophisticated","enterprise"].filter(function(e){return t.includes(e)}).length;return r>0||0===n?"beginner":i>1||n>3?"advanced":"intermediate"}},{key:"estimateReadingTime",value:function(e){var t=e.split(/\s+/).length;return Math.max(1,Math.round(t/200))}},{key:"callOpenAIForAnalysis",value:(i=g(d().m(function e(t,n,r){var i,a,o,s,c,u,l;return d().w(function(e){for(;;)switch(e.n){case 0:return a='Analyze this web content and provide a JSON response with the following structure:\n\n{\n  "summary": "1-2 sentence summary",\n  "tagSuggestions": [\n    {"tag": "tag-name", "confidence": 0.8, "reason": "why this tag fits"}\n  ],\n  "categorySuggestions": [\n    {"category": "work|learning|personal|general", "confidence": 0.9, "reason": "explanation"}\n  ],\n  "contentType": "article|tutorial|documentation|video|tool|reference|blog|news|research|other",\n  "topics": ["main", "topics", "covered"],\n  "complexity": "beginner|intermediate|advanced",\n  "readingTime": 5\n}\n\nContent to analyze:\nTitle: '.concat(n,"\nURL: ").concat(r,"\nContent: ").concat(t.substring(0,2e3),"...\n\nFocus on:\n- Relevant, specific tags (technology, skills, domains)\n- Appropriate category (work/learning/personal/general)\n- Content type and complexity\n- Main topics and themes"),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:a}],max_tokens:500,temperature:.3})});case 1:return o=e.v,e.n=2,o.json();case 2:if(s=e.v,!(c=null===(i=s.choices[0])||void 0===i||null===(i=i.message)||void 0===i?void 0:i.content)){e.n=5;break}return e.p=3,u=JSON.parse(c),e.a(2,{summary:u.summary,tagSuggestions:u.tagSuggestions||[],categorySuggestions:u.categorySuggestions||[],contentType:u.contentType,topics:u.topics||[],complexity:u.complexity,readingTime:u.readingTime});case 4:e.p=4,l=e.v,console.error("Failed to parse AI response:",l);case 5:return e.a(2,this.generateRuleBasedAnalysis(t,n,r))}},e,this,[[3,4]])})),function(e,t,n){return i.apply(this,arguments)})},{key:"callOpenAI",value:(r=g(d().m(function e(t,n,r){var i,a,o,s;return d().w(function(e){for(;;)switch(e.n){case 0:return a="Summarize this web page in 1-2 sentences:\nTitle: ".concat(n,"\nURL: ").concat(r,"\nContent: ").concat(t.substring(0,1e3),"..."),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:a}],max_tokens:100,temperature:.3})});case 1:return o=e.v,e.n=2,o.json();case 2:return s=e.v,e.a(2,(null===(i=s.choices[0])||void 0===i||null===(i=i.message)||void 0===i?void 0:i.content)||this.generatePlaceholderSummary(t,n,r))}},e,this)})),function(e,t,n){return r.apply(this,arguments)})},{key:"generatePlaceholderSummary",value:function(e,t,n){var r=new URL(n).hostname,i=e.length;return r.includes("github.com")?"GitHub repository or project page: ".concat(t):r.includes("stackoverflow.com")?"Stack Overflow discussion about programming or technical topics":r.includes("medium.com")||r.includes("blog")?"Blog article: ".concat(t.substring(0,50),"..."):r.includes("youtube.com")?"Video content: ".concat(t):r.includes("news")||r.includes("article")?"News article from ".concat(r):"Web page from ".concat(r," (").concat(Math.round(i/100)," paragraphs)")}},{key:"updateApiKey",value:function(e){this.apiKey=e}},{key:"generateResponseWithContext",value:(n=g(d().m(function e(t,n,r){var i,a,o,s,c,u,l,h,f,p;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generateRuleBasedResponse(t,n));case 1:return e.p=1,a=n.slice(0,5).map(function(e,t){return"[".concat(t+1,"] ").concat(e.content.substring(0,500),"...")}).join("\n\n"),o=n.slice(0,5).map(function(e,t){return"[".concat(t+1,"] ").concat(e.metadata.title||"Untitled"," - ").concat(e.metadata.url||"No URL")}).join("\n"),s="Based on the following content from the user's saved knowledge base, answer their question comprehensively and accurately.\n\nUser Question: ".concat(t,"\n\nRelevant Content:\n").concat(a,"\n\nSources:\n").concat(o,"\n\nInstructions:\n- Answer the question using only the information provided in the content above\n- Be specific and cite relevant details from the sources\n- If the content doesn't contain enough information to answer the question, say so clearly\n- Format your response in a clear, helpful manner\n- When referencing information, mention which source it came from using [1], [2], etc.\n\nAnswer:"),e.n=2,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"system",content:"You are a helpful AI assistant that answers questions based on the user's saved content. Always be accurate and cite your sources."},{role:"user",content:s}],max_tokens:800,temperature:.3})});case 2:if((c=e.v).ok){e.n=3;break}throw new Error("OpenAI API error: ".concat(c.status));case 3:return e.n=4,c.json();case 4:return u=e.v,l=(null===(i=u.choices[0])||void 0===i||null===(i=i.message)||void 0===i?void 0:i.content)||"I apologize, but I couldn't generate a response.",h=n.length>0?n.reduce(function(e,t){return e+t.similarity},0)/n.length:0,f=Math.min(.95,1.2*h),e.a(2,{response:l,confidence:f});case 5:return e.p=5,p=e.v,console.error("Context-aware AI response failed:",p),e.a(2,this.generateRuleBasedResponse(t,n))}},e,this,[[1,5]])})),function(e,t,r){return n.apply(this,arguments)})},{key:"generateRuleBasedResponse",value:function(e,t){if(0===t.length)return{response:"I couldn't find any relevant content in your saved links to answer this question. Try saving more content or rephrasing your query.",confidence:.1};var n=t[0],r=n.content.substring(0,300),i="Based on your saved content, here's what I found:\n\n".concat(r);return t.length>1&&(i+="\n\nI found ".concat(t.length,' relevant items in your knowledge base. The most relevant appears to be "').concat(n.metadata.title||"Untitled",'"')),n.metadata.url&&(i+="\n\nSource: ".concat(n.metadata.url)),{response:i,confidence:Math.min(.7,n.similarity||.5)}}},{key:"generateSmartCollectionSuggestions",value:(t=g(d().m(function e(t){var n,r,i,a,o,s,c,l,h,f,p,g,m,v,y;return d().w(function(e){for(;;)if(0===e.n){for(n=this.analyzeDomains(t),r=this.analyzeTopics(t),i=this.analyzeTimePatterns(t),a=[],o=new Date,s=0,c=Object.entries(n);s<c.length;s++)l=u(c[s],2),h=l[0],(f=l[1])>=3&&a.push({id:"domain-".concat(h.replace(/\./g,"-")),name:"📌 ".concat(this.getDomainDisplayName(h)),description:"Links from ".concat(h," (").concat(f," links)"),query:"domain LIKE '%".concat(h,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getDomainIcon(h),color:this.getDomainColor(h),filters:{domains:[h]},createdAt:o,updatedAt:o});for(p=0,g=Object.entries(r);p<g.length;p++)m=u(g[p],2),v=m[0],(y=m[1])>=2&&a.push({id:"topic-".concat(v.toLowerCase().replace(/\s+/g,"-")),name:"🎯 ".concat(v),description:"Content related to ".concat(v.toLowerCase()," (").concat(y," links)"),query:"title ILIKE '%".concat(v,"%' OR user_note ILIKE '%").concat(v,"%' OR ai_summary ILIKE '%").concat(v,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getTopicIcon(v),color:this.getTopicColor(v),createdAt:o,updatedAt:o});return i.recentActivity>5&&a.push({id:"recent-activity",name:"🔥 Recent Activity",description:"Links saved in the last 3 days",query:"created_at >= now() - interval '3 days'",isSystem:!0,autoUpdate:!0,icon:"🔥",color:"#ef4444",filters:{dateRange:{start:new Date(Date.now()-2592e5)}},createdAt:o,updatedAt:o}),e.a(2,a.slice(0,8))}},e,this)})),function(e){return t.apply(this,arguments)})},{key:"analyzeDomains",value:function(e){var t={};return e.forEach(function(e){var n=e.domain;t[n]=(t[n]||0)+1}),Object.fromEntries(Object.entries(t).sort(function(e,t){var n=u(e,2)[1];return u(t,2)[1]-n}).slice(0,10))}},{key:"analyzeTopics",value:function(e){var t={},n=["React","JavaScript","TypeScript","Python","Node.js","API","Database","Machine Learning","AI","Design","UI/UX","CSS","HTML","Backend","Frontend","DevOps","Cloud","AWS","Docker","Kubernetes","Git","Testing","Security","Performance","Mobile","iOS","Android","Tutorial","Guide","Documentation","Tool","Framework","Library"];return e.forEach(function(e){var r="".concat(e.title," ").concat(e.userNote," ").concat(e.aiSummary||"").toLowerCase();n.forEach(function(e){r.includes(e.toLowerCase())&&(t[e]=(t[e]||0)+1)})}),Object.fromEntries(Object.entries(t).sort(function(e,t){var n=u(e,2)[1];return u(t,2)[1]-n}).slice(0,8))}},{key:"analyzeTimePatterns",value:function(e){var t=new Date,n=new Date(t.getTime()-2592e5),r=e.filter(function(e){return e.createdAt>=n}).length,i={};return e.forEach(function(e){var t=e.createdAt.toLocaleDateString("en-US",{weekday:"long"});i[t]=(i[t]||0)+1}),{recentActivity:r,weeklyPattern:i}}},{key:"getDomainDisplayName",value:function(e){return{"github.com":"GitHub","stackoverflow.com":"Stack Overflow","medium.com":"Medium","youtube.com":"YouTube","twitter.com":"Twitter","linkedin.com":"LinkedIn","reddit.com":"Reddit","dev.to":"Dev.to","hashnode.com":"Hashnode","docs.google.com":"Google Docs"}[e]||e.replace("www.","").split(".")[0]}},{key:"getDomainIcon",value:function(e){return{"github.com":"⭐","stackoverflow.com":"💬","medium.com":"✍️","youtube.com":"📺","twitter.com":"🐦","linkedin.com":"💼","reddit.com":"🤖","dev.to":"👨‍💻","hashnode.com":"📝","docs.google.com":"📄"}[e]||"🌐"}},{key:"getDomainColor",value:function(e){return{"github.com":"#24292e","stackoverflow.com":"#f48024","medium.com":"#00ab6c","youtube.com":"#ff0000","twitter.com":"#1da1f2","linkedin.com":"#0077b5","reddit.com":"#ff4500","dev.to":"#0a0a0a","hashnode.com":"#2962ff","docs.google.com":"#4285f4"}[e]||"#6b7280"}},{key:"getTopicIcon",value:function(e){return{React:"⚛️",JavaScript:"🟨",TypeScript:"🔷",Python:"🐍","Node.js":"🟢",API:"🔌",Database:"🗄️","Machine Learning":"🤖",AI:"🧠",Design:"🎨","UI/UX":"✨",CSS:"🎨",HTML:"📄",Backend:"⚙️",Frontend:"🖥️",DevOps:"🔧",Cloud:"☁️",AWS:"🟠",Docker:"🐳",Security:"🔒",Mobile:"📱",Tutorial:"📚",Tool:"🛠️"}[e]||"🏷️"}},{key:"getTopicColor",value:function(e){return{React:"#61dafb",JavaScript:"#f7df1e",TypeScript:"#3178c6",Python:"#3776ab","Node.js":"#339933",API:"#ff6b6b",Database:"#336791","Machine Learning":"#ff9500",AI:"#8b5cf6",Design:"#e91e63","UI/UX":"#9c27b0",CSS:"#1572b6",HTML:"#e34f26",Backend:"#4caf50",Frontend:"#2196f3",DevOps:"#ff5722",Cloud:"#607d8b",Security:"#795548",Mobile:"#00bcd4",Tutorial:"#ff9800",Tool:"#607d8b"}[e]||"#6b7280"}},{key:"analyzeForSmartCollections",value:(e=g(d().m(function e(t){var n,r,i,a,o,s,c,u;return d().w(function(e){for(;;)if(0===e.n)return n="".concat(t.title," ").concat(t.userNote," ").concat(t.aiSummary||"").toLowerCase(),r=t.domain,i=[],a=[],o={},(s=["ai","artificial intelligence","machine learning","ml","neural","deep learning"].filter(function(e){return n.includes(e)}).length)>0&&(i.push("ai-related"),a.push("AI"),o.ai=s),(c=["tutorial","how to","guide","walkthrough","step by step"].filter(function(e){return n.includes(e)}).length)>0&&(i.push("tutorials"),a.push("tutorial"),o.tutorial=c),r.includes("github.com")&&(i.push("github-repos"),a.push("github","repository"),o.github=1),(u=(Date.now()-t.createdAt.getTime())/864e5)<=7&&(i.push("recent-reads"),o.recent=Math.max(0,7-u)/7),t.userNote&&""!==t.userNote.trim()||(i.push("unread"),o.unread=1),e.a(2,{matchingCollections:i,suggestedTags:a,contentSignals:o})},e)})),function(t){return e.apply(this,arguments)})}]);var e,t,n,r,i,a,o}(),k=function(e){return e?new _(e):{generateInsights:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateQuestions:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateFlashcards:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},findCrossReferences:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateRecommendations:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},updateKnowledgeGraph:function(e){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,{nodes:[],edges:[],lastUpdated:Date.now()})},e)}))()},extractKeyTopics:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},calculateKnowledgeGrowth:function(){return 0}}},_=function(){return y(function e(t){m(this,e),s(this,"baseURL","https://api.openai.com/v1"),this.apiKey=t},[{key:"generateInsights",value:(h=g(d().m(function e(t){var n,r,i,a,o;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n="text"in t?t.text:"".concat(t.title," - ").concat(t.description||""),r=t.url,i='Analyze this content and generate 3 types of insights:\n1. A thought-provoking question\n2. A key summary point\n3. A potential connection to other topics\n\nContent: "'.concat(n,'"\nURL: ').concat(r,"\n\nReturn as JSON array with objects containing: type, content, metadata"),e.n=2,this.callOpenAI(i);case 2:return a=e.v,e.a(2,this.parseInsights(a));case 3:return e.p=3,o=e.v,console.error("Error generating insights:",o),e.a(2,[])}},e,this,[[1,3]])})),function(e){return h.apply(this,arguments)})},{key:"generateQuestions",value:(l=g(d().m(function e(t){var n,r,i,a,o=arguments;return d().w(function(e){for(;;)switch(e.n){case 0:if(n=o.length>1&&void 0!==o[1]?o[1]:"medium",this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,r="Generate 3 ".concat(n,' level questions based on this content that would help with retention and understanding:\n\nContent: "').concat(t,'"\n\nQuestions should be:\n- ').concat("easy"===n?"Recall-based, asking for basic facts":"","\n- ").concat("medium"===n?"Application-based, asking how concepts apply":"","\n- ").concat("hard"===n?"Analysis-based, asking for evaluation and synthesis":"",'\n\nReturn as JSON array with type: "question", content: "the question", metadata: {difficulty, topic}'),e.n=2,this.callOpenAI(r);case 2:return i=e.v,e.a(2,this.parseInsights(i));case 3:return e.p=3,a=e.v,console.error("Error generating questions:",a),e.a(2,[])}},e,this,[[1,3]])})),function(e){return l.apply(this,arguments)})},{key:"generateFlashcards",value:(c=g(d().m(function e(t){var n,r,i;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n='Create 3 flashcard pairs from this content. Each should have a question/prompt and answer:\n\nContent: "'.concat(t,'"\n\nReturn as JSON array with type: "flashcard", content: "Question: [question]\nAnswer: [answer]", metadata: {topic}'),e.n=2,this.callOpenAI(n);case 2:return r=e.v,e.a(2,this.parseInsights(r));case 3:return e.p=3,i=e.v,console.error("Error generating flashcards:",i),e.a(2,[])}},e,this,[[1,3]])})),function(e){return c.apply(this,arguments)})},{key:"findCrossReferences",value:(i=g(d().m(function e(t,n){var r,i,a,o,s;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey&&0!==n.length){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,r="text"in t?t.text:"".concat(t.title," - ").concat(t.description||""),i=n.filter(function(e){return e.id!==t.id}).slice(0,10),a='Analyze the main item and find potential relationships with other items:\n\nMain item: "'.concat(r,'"\n\nOther items:\n').concat(i.map(function(e,t){return"".concat(t+1,". ").concat(e.id,": ").concat("text"in e?e.text:"".concat(e.title," - ").concat(e.description||""))}).join("\n"),'\n\nFor each relationship found, return JSON with:\n- targetId: the item ID\n- relationshipType: "related" | "contradicts" | "supports" | "cites" | "builds-on"\n- strength: 0-1 confidence score\n- note: brief explanation\n\nOnly return relationships with strength > 0.3'),e.n=2,this.callOpenAI(a);case 2:return o=e.v,e.a(2,this.parseCrossReferences(o,t.id));case 3:return e.p=3,s=e.v,console.error("Error finding cross references:",s),e.a(2,[])}},e,this,[[1,3]])})),function(e,t){return i.apply(this,arguments)})},{key:"generateRecommendations",value:(r=g(d().m(function e(t){var n,r,i,a,o;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n=t.slice(-10),e.n=2,this.extractKeyTopics(n.map(function(e){return"text"in e?e.text:"".concat(e.title," - ").concat(e.description||"")}).join(" "));case 2:return r=e.v,i="Based on the user's reading history and interests, suggest 5 content recommendations:\n\nRecent reading topics: ".concat(r.join(", "),"\n\nRecent items:\n").concat(n.map(function(e){return"text"in e?'Highlight: "'.concat(e.text,'"'):'Link: "'.concat(e.title,'"')}).join("\n"),'\n\nSuggest:\n1. Specific topics to explore next\n2. Types of content that would complement their reading\n3. Areas for deeper study\n\nReturn as JSON array with type: "recommendation", content: suggestion, metadata: {topic, confidence}'),e.n=3,this.callOpenAI(i);case 3:return a=e.v,e.a(2,this.parseInsights(a));case 4:return e.p=4,o=e.v,console.error("Error generating recommendations:",o),e.a(2,[])}},e,this,[[1,4]])})),function(e){return r.apply(this,arguments)})},{key:"updateKnowledgeGraph",value:(n=g(d().m(function e(t){var n,r,i,a,s,c,u,l,h;return d().w(function(e){for(;;)switch(e.n){case 0:n=[],r=[],i=new Map,a=o(t),e.p=1,a.s();case 2:if((s=a.n()).done){e.n=5;break}return c=s.value,u="text"in c?c.text:"".concat(c.title," - ").concat(c.description||""),e.n=3,this.extractKeyTopics(u);case 3:l=e.v,n.push({id:c.id,type:"text"in c?"highlight":"link",label:"text"in c?c.text.slice(0,50)+"...":c.title,weight:1,metadata:{topics:l}}),l.forEach(function(e){i.set(e,(i.get(e)||0)+1)});case 4:e.n=2;break;case 5:e.n=7;break;case 6:e.p=6,h=e.v,a.e(h);case 7:return e.p=7,a.f(),e.f(7);case 8:return i.forEach(function(e,t){e>1&&n.push({id:"topic-".concat(t),type:"topic",label:t,weight:e,metadata:{frequency:e}})}),e.a(2,{nodes:n,edges:r,lastUpdated:Date.now()})}},e,this,[[1,6,7,8]])})),function(e){return n.apply(this,arguments)})},{key:"extractKeyTopics",value:(t=g(d().m(function e(t){var n,r,i,a,o;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return n=t.toLowerCase().match(/\b\w+\b/g)||[],r=new Map,n.forEach(function(e){e.length>4&&r.set(e,(r.get(e)||0)+1)}),e.a(2,Array.from(r.entries()).sort(function(e,t){return t[1]-e[1]}).slice(0,5).map(function(e){return u(e,1)[0]}));case 1:return e.p=1,i='Extract 3-5 key topics/themes from this content. Return as comma-separated list:\n\nContent: "'.concat(t.slice(0,1e3),'"'),e.n=2,this.callOpenAI(i);case 2:return a=e.v,e.a(2,a.split(",").map(function(e){return e.trim()}).filter(function(e){return e.length>0}));case 3:return e.p=3,o=e.v,console.error("Error extracting topics:",o),e.a(2,[])}},e,this,[[1,3]])})),function(e){return t.apply(this,arguments)})},{key:"calculateKnowledgeGrowth",value:function(e){if(0===e.length)return 0;var t=e.slice(-7),n=e.slice(-14,-7),r=t.reduce(function(e,t){return e+(t.linksRead||0)+(t.highlightsMade||0)},0),i=n.reduce(function(e,t){return e+(t.linksRead||0)+(t.highlightsMade||0)},0);return 0===i?r>0?1:0:Math.max(0,Math.min(2,r/i))}},{key:"callOpenAI",value:(e=g(d().m(function e(t){var n,r,i;return d().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("".concat(this.baseURL,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"user",content:t}],temperature:.7,max_tokens:500})});case 1:if((r=e.v).ok){e.n=2;break}throw new Error("OpenAI API error: ".concat(r.statusText));case 2:return e.n=3,r.json();case 3:return i=e.v,e.a(2,(null===(n=i.choices[0])||void 0===n||null===(n=n.message)||void 0===n?void 0:n.content)||"")}},e,this)})),function(t){return e.apply(this,arguments)})},{key:"parseInsights",value:function(e){try{var t=JSON.parse(e);return Array.isArray(t)?t.map(function(e){return a(a({id:"insight-".concat(Date.now(),"-").concat(Math.random())},e),{},{createdAt:Date.now()})}):[]}catch(t){return[{id:"insight-".concat(Date.now()),type:"summary",content:e.slice(0,200),createdAt:Date.now()}]}}},{key:"parseCrossReferences",value:function(e,t){try{var n=JSON.parse(e);return Array.isArray(n)?n.map(function(e){return a(a({id:"ref-".concat(Date.now(),"-").concat(Math.random())},e),{},{createdAt:Date.now()})}):[]}catch(e){return[]}}}]);var e,t,n,r,i,c,l,h}(),S=new w({apiKey:""})}},n={};function r(e){var i=n[e];if(void 0!==i)return i.exports;var a=n[e]={exports:{}};return t[e].call(a.exports,a,a.exports,r),a.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};class i extends Error{constructor(e,t="FunctionsError",n){super(e),this.name=t,this.context=n}}class a extends i{constructor(e){super("Failed to send a request to the Edge Function","FunctionsFetchError",e)}}class o extends i{constructor(e){super("Relay Error invoking the Edge Function","FunctionsRelayError",e)}}class s extends i{constructor(e){super("Edge Function returned a non-2xx status code","FunctionsHttpError",e)}}!function(e){e.Any="any",e.ApNortheast1="ap-northeast-1",e.ApNortheast2="ap-northeast-2",e.ApSouth1="ap-south-1",e.ApSoutheast1="ap-southeast-1",e.ApSoutheast2="ap-southeast-2",e.CaCentral1="ca-central-1",e.EuCentral1="eu-central-1",e.EuWest1="eu-west-1",e.EuWest2="eu-west-2",e.EuWest3="eu-west-3",e.SaEast1="sa-east-1",e.UsEast1="us-east-1",e.UsWest1="us-west-1",e.UsWest2="us-west-2"}(e||(e={}));class c{constructor(t,{headers:n={},customFetch:i,region:a=e.Any}={}){this.url=t,this.headers=n,this.region=a,this.fetch=(e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(r.bind(r,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)})(i)}setAuth(e){this.headers.Authorization=`Bearer ${e}`}invoke(e,t={}){var n,r,i,c,u;return r=this,i=void 0,u=function*(){try{const{headers:r,method:i,body:c}=t;let u={},{region:l}=t;l||(l=this.region);const h=new URL(`${this.url}/${e}`);let d;l&&"any"!==l&&(u["x-region"]=l,h.searchParams.set("forceFunctionRegion",l)),c&&(r&&!Object.prototype.hasOwnProperty.call(r,"Content-Type")||!r)&&("undefined"!=typeof Blob&&c instanceof Blob||c instanceof ArrayBuffer?(u["Content-Type"]="application/octet-stream",d=c):"string"==typeof c?(u["Content-Type"]="text/plain",d=c):"undefined"!=typeof FormData&&c instanceof FormData?d=c:(u["Content-Type"]="application/json",d=JSON.stringify(c)));const f=yield this.fetch(h.toString(),{method:i||"POST",headers:Object.assign(Object.assign(Object.assign({},u),this.headers),r),body:d}).catch(e=>{throw new a(e)}),p=f.headers.get("x-relay-error");if(p&&"true"===p)throw new o(f);if(!f.ok)throw new s(f);let g,m=(null!==(n=f.headers.get("Content-Type"))&&void 0!==n?n:"text/plain").split(";")[0].trim();return g="application/json"===m?yield f.json():"application/octet-stream"===m?yield f.blob():"text/event-stream"===m?f:"multipart/form-data"===m?yield f.formData():yield f.text(),{data:g,error:null,response:f}}catch(e){return{data:null,error:e,response:e instanceof s||e instanceof o?e.context:void 0}}},new((c=void 0)||(c=Promise))(function(e,t){function n(e){try{o(u.next(e))}catch(e){t(e)}}function a(e){try{o(u.throw(e))}catch(e){t(e)}}function o(t){var r;t.done?e(t.value):(r=t.value,r instanceof c?r:new c(function(e){e(r)})).then(n,a)}o((u=u.apply(r,i||[])).next())})}}var u=r(2279);const{PostgrestClient:l,PostgrestQueryBuilder:h,PostgrestFilterBuilder:d,PostgrestTransformBuilder:f,PostgrestBuilder:p,PostgrestError:g}=u,m=function(){if("undefined"!=typeof WebSocket)return WebSocket;if(void 0!==global.WebSocket)return global.WebSocket;if(void 0!==window.WebSocket)return window.WebSocket;if(void 0!==self.WebSocket)return self.WebSocket;throw new Error("`WebSocket` is not supported in this environment")}();var v,y,b,w,k,_,S;!function(e){e[e.connecting=0]="connecting",e[e.open=1]="open",e[e.closing=2]="closing",e[e.closed=3]="closed"}(v||(v={})),(S=y||(y={})).closed="closed",S.errored="errored",S.joined="joined",S.joining="joining",S.leaving="leaving",function(e){e.close="phx_close",e.error="phx_error",e.join="phx_join",e.reply="phx_reply",e.leave="phx_leave",e.access_token="access_token"}(b||(b={})),function(e){e.websocket="websocket"}(w||(w={})),function(e){e.Connecting="connecting",e.Open="open",e.Closing="closing",e.Closed="closed"}(k||(k={}));class A{constructor(){this.HEADER_LENGTH=1}decode(e,t){return e.constructor===ArrayBuffer?t(this._binaryDecode(e)):t("string"==typeof e?JSON.parse(e):{})}_binaryDecode(e){const t=new DataView(e),n=new TextDecoder;return this._decodeBroadcast(e,t,n)}_decodeBroadcast(e,t,n){const r=t.getUint8(1),i=t.getUint8(2);let a=this.HEADER_LENGTH+2;const o=n.decode(e.slice(a,a+r));a+=r;const s=n.decode(e.slice(a,a+i));return a+=i,{ref:null,topic:o,event:s,payload:JSON.parse(n.decode(e.slice(a,e.byteLength)))}}}class T{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=void 0,this.tries=0,this.callback=e,this.timerCalc=t}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}!function(e){e.abstime="abstime",e.bool="bool",e.date="date",e.daterange="daterange",e.float4="float4",e.float8="float8",e.int2="int2",e.int4="int4",e.int4range="int4range",e.int8="int8",e.int8range="int8range",e.json="json",e.jsonb="jsonb",e.money="money",e.numeric="numeric",e.oid="oid",e.reltime="reltime",e.text="text",e.time="time",e.timestamp="timestamp",e.timestamptz="timestamptz",e.timetz="timetz",e.tsrange="tsrange",e.tstzrange="tstzrange"}(_||(_={}));const I=(e,t,n={})=>{var r;const i=null!==(r=n.skipTypes)&&void 0!==r?r:[];return Object.keys(t).reduce((n,r)=>(n[r]=j(r,e,t,i),n),{})},j=(e,t,n,r)=>{const i=t.find(t=>t.name===e),a=null==i?void 0:i.type,o=n[e];return a&&!r.includes(a)?O(a,o):P(o)},O=(e,t)=>{if("_"===e.charAt(0)){const n=e.slice(1,e.length);return D(t,n)}switch(e){case _.bool:return E(t);case _.float4:case _.float8:case _.int2:case _.int4:case _.int8:case _.numeric:case _.oid:return C(t);case _.json:case _.jsonb:return x(t);case _.timestamp:return R(t);case _.abstime:case _.date:case _.daterange:case _.int4range:case _.int8range:case _.money:case _.reltime:case _.text:case _.time:case _.timestamptz:case _.timetz:case _.tsrange:case _.tstzrange:default:return P(t)}},P=e=>e,E=e=>{switch(e){case"t":return!0;case"f":return!1;default:return e}},C=e=>{if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return t}return e},x=e=>{if("string"==typeof e)try{return JSON.parse(e)}catch(t){return console.log(`JSON parse error: ${t}`),e}return e},D=(e,t)=>{if("string"!=typeof e)return e;const n=e.length-1,r=e[n];if("{"===e[0]&&"}"===r){let r;const i=e.slice(1,n);try{r=JSON.parse("["+i+"]")}catch(e){r=i?i.split(","):[]}return r.map(e=>O(t,e))}return e},R=e=>"string"==typeof e?e.replace(" ","T"):e,L=e=>{let t=e;return t=t.replace(/^ws/i,"http"),t=t.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),t.replace(/\/+$/,"")};class U{constructor(e,t,n={},r=1e4){this.channel=e,this.event=t,this.payload=n,this.timeout=r,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(e){this.timeout=e,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(e){this.payload=Object.assign(Object.assign({},this.payload),e)}receive(e,t){var n;return this._hasReceived(e)&&t(null===(n=this.receivedResp)||void 0===n?void 0:n.response),this.recHooks.push({status:e,callback:t}),this}startTimeout(){this.timeoutTimer||(this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref),this.channel._on(this.refEvent,{},e=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=e,this._matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout))}trigger(e,t){this.refEvent&&this.channel._trigger(this.refEvent,{status:e,response:t})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:e,response:t}){this.recHooks.filter(t=>t.status===e).forEach(e=>e.callback(t))}_hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}}var N,$,M,B;!function(e){e.SYNC="sync",e.JOIN="join",e.LEAVE="leave"}(N||(N={}));class F{constructor(e,t){this.channel=e,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const n=(null==t?void 0:t.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(n.state,{},e=>{const{onJoin:t,onLeave:n,onSync:r}=this.caller;this.joinRef=this.channel._joinRef(),this.state=F.syncState(this.state,e,t,n),this.pendingDiffs.forEach(e=>{this.state=F.syncDiff(this.state,e,t,n)}),this.pendingDiffs=[],r()}),this.channel._on(n.diff,{},e=>{const{onJoin:t,onLeave:n,onSync:r}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(e):(this.state=F.syncDiff(this.state,e,t,n),r())}),this.onJoin((e,t,n)=>{this.channel._trigger("presence",{event:"join",key:e,currentPresences:t,newPresences:n})}),this.onLeave((e,t,n)=>{this.channel._trigger("presence",{event:"leave",key:e,currentPresences:t,leftPresences:n})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(e,t,n,r){const i=this.cloneDeep(e),a=this.transformState(t),o={},s={};return this.map(i,(e,t)=>{a[e]||(s[e]=t)}),this.map(a,(e,t)=>{const n=i[e];if(n){const r=t.map(e=>e.presence_ref),i=n.map(e=>e.presence_ref),a=t.filter(e=>i.indexOf(e.presence_ref)<0),c=n.filter(e=>r.indexOf(e.presence_ref)<0);a.length>0&&(o[e]=a),c.length>0&&(s[e]=c)}else o[e]=t}),this.syncDiff(i,{joins:o,leaves:s},n,r)}static syncDiff(e,t,n,r){const{joins:i,leaves:a}={joins:this.transformState(t.joins),leaves:this.transformState(t.leaves)};return n||(n=()=>{}),r||(r=()=>{}),this.map(i,(t,r)=>{var i;const a=null!==(i=e[t])&&void 0!==i?i:[];if(e[t]=this.cloneDeep(r),a.length>0){const n=e[t].map(e=>e.presence_ref),r=a.filter(e=>n.indexOf(e.presence_ref)<0);e[t].unshift(...r)}n(t,a,r)}),this.map(a,(t,n)=>{let i=e[t];if(!i)return;const a=n.map(e=>e.presence_ref);i=i.filter(e=>a.indexOf(e.presence_ref)<0),e[t]=i,r(t,i,n),0===i.length&&delete e[t]}),e}static map(e,t){return Object.getOwnPropertyNames(e).map(n=>t(n,e[n]))}static transformState(e){return e=this.cloneDeep(e),Object.getOwnPropertyNames(e).reduce((t,n)=>{const r=e[n];return t[n]="metas"in r?r.metas.map(e=>(e.presence_ref=e.phx_ref,delete e.phx_ref,delete e.phx_ref_prev,e)):r,t},{})}static cloneDeep(e){return JSON.parse(JSON.stringify(e))}onJoin(e){this.caller.onJoin=e}onLeave(e){this.caller.onLeave=e}onSync(e){this.caller.onSync=e}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}!function(e){e.ALL="*",e.INSERT="INSERT",e.UPDATE="UPDATE",e.DELETE="DELETE"}($||($={})),function(e){e.BROADCAST="broadcast",e.PRESENCE="presence",e.POSTGRES_CHANGES="postgres_changes",e.SYSTEM="system"}(M||(M={})),function(e){e.SUBSCRIBED="SUBSCRIBED",e.TIMED_OUT="TIMED_OUT",e.CLOSED="CLOSED",e.CHANNEL_ERROR="CHANNEL_ERROR"}(B||(B={}));class z{constructor(e,t={config:{}},n){this.topic=e,this.params=t,this.socket=n,this.bindings={},this.state=y.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=e.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},t.config),this.timeout=this.socket.timeout,this.joinPush=new U(this,b.join,this.params,this.timeout),this.rejoinTimer=new T(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=y.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(e=>e.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=y.closed,this.socket._remove(this)}),this._onError(e=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,e),this.state=y.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=y.errored,this.rejoinTimer.scheduleTimeout())}),this._on(b.reply,{},(e,t)=>{this._trigger(this._replyEventName(t),e)}),this.presence=new F(this),this.broadcastEndpointURL=L(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(e,t=this.timeout){var n,r;if(this.socket.isConnected()||this.socket.connect(),this.state==y.closed){const{config:{broadcast:i,presence:a,private:o}}=this.params;this._onError(t=>null==e?void 0:e(B.CHANNEL_ERROR,t)),this._onClose(()=>null==e?void 0:e(B.CLOSED));const s={},c={broadcast:i,presence:a,postgres_changes:null!==(r=null===(n=this.bindings.postgres_changes)||void 0===n?void 0:n.map(e=>e.filter))&&void 0!==r?r:[],private:o};this.socket.accessTokenValue&&(s.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:c},s)),this.joinedOnce=!0,this._rejoin(t),this.joinPush.receive("ok",async({postgres_changes:t})=>{var n;if(this.socket.setAuth(),void 0!==t){const r=this.bindings.postgres_changes,i=null!==(n=null==r?void 0:r.length)&&void 0!==n?n:0,a=[];for(let n=0;n<i;n++){const i=r[n],{filter:{event:o,schema:s,table:c,filter:u}}=i,l=t&&t[n];if(!l||l.event!==o||l.schema!==s||l.table!==c||l.filter!==u)return this.unsubscribe(),this.state=y.errored,void(null==e||e(B.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes")));a.push(Object.assign(Object.assign({},i),{id:l.id}))}return this.bindings.postgres_changes=a,void(e&&e(B.SUBSCRIBED))}null==e||e(B.SUBSCRIBED)}).receive("error",t=>{this.state=y.errored,null==e||e(B.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(t).join(", ")||"error")))}).receive("timeout",()=>{null==e||e(B.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(e,t={}){return await this.send({type:"presence",event:"track",payload:e},t.timeout||this.timeout)}async untrack(e={}){return await this.send({type:"presence",event:"untrack"},e)}on(e,t,n){return this._on(e,t,n)}async send(e,t={}){var n,r;if(this._canPush()||"broadcast"!==e.type)return new Promise(n=>{var r,i,a;const o=this._push(e.type,e,t.timeout||this.timeout);"broadcast"!==e.type||(null===(a=null===(i=null===(r=this.params)||void 0===r?void 0:r.config)||void 0===i?void 0:i.broadcast)||void 0===a?void 0:a.ack)||n("ok"),o.receive("ok",()=>n("ok")),o.receive("error",()=>n("error")),o.receive("timeout",()=>n("timed out"))});{const{event:i,payload:a}=e,o={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:i,payload:a,private:this.private}]})};try{const e=await this._fetchWithTimeout(this.broadcastEndpointURL,o,null!==(n=t.timeout)&&void 0!==n?n:this.timeout);return await(null===(r=e.body)||void 0===r?void 0:r.cancel()),e.ok?"ok":"error"}catch(e){return"AbortError"===e.name?"timed out":"error"}}}updateJoinPayload(e){this.joinPush.updatePayload(e)}unsubscribe(e=this.timeout){this.state=y.leaving;const t=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(b.close,"leave",this._joinRef())};this.joinPush.destroy();let n=null;return new Promise(r=>{n=new U(this,b.leave,{},e),n.receive("ok",()=>{t(),r("ok")}).receive("timeout",()=>{t(),r("timed out")}).receive("error",()=>{r("error")}),n.send(),this._canPush()||n.trigger("ok",{})}).finally(()=>{null==n||n.destroy()})}teardown(){this.pushBuffer.forEach(e=>e.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}async _fetchWithTimeout(e,t,n){const r=new AbortController,i=setTimeout(()=>r.abort(),n),a=await this.socket.fetch(e,Object.assign(Object.assign({},t),{signal:r.signal}));return clearTimeout(i),a}_push(e,t,n=this.timeout){if(!this.joinedOnce)throw`tried to push '${e}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let r=new U(this,e,t,n);return this._canPush()?r.send():(r.startTimeout(),this.pushBuffer.push(r)),r}_onMessage(e,t,n){return t}_isMember(e){return this.topic===e}_joinRef(){return this.joinPush.ref}_trigger(e,t,n){var r,i;const a=e.toLocaleLowerCase(),{close:o,error:s,leave:c,join:u}=b;if(n&&[o,s,c,u].indexOf(a)>=0&&n!==this._joinRef())return;let l=this._onMessage(a,t,n);if(t&&!l)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(a)?null===(r=this.bindings.postgres_changes)||void 0===r||r.filter(e=>{var t,n,r;return"*"===(null===(t=e.filter)||void 0===t?void 0:t.event)||(null===(r=null===(n=e.filter)||void 0===n?void 0:n.event)||void 0===r?void 0:r.toLocaleLowerCase())===a}).map(e=>e.callback(l,n)):null===(i=this.bindings[a])||void 0===i||i.filter(e=>{var n,r,i,o,s,c;if(["broadcast","presence","postgres_changes"].includes(a)){if("id"in e){const a=e.id,o=null===(n=e.filter)||void 0===n?void 0:n.event;return a&&(null===(r=t.ids)||void 0===r?void 0:r.includes(a))&&("*"===o||(null==o?void 0:o.toLocaleLowerCase())===(null===(i=t.data)||void 0===i?void 0:i.type.toLocaleLowerCase()))}{const n=null===(s=null===(o=null==e?void 0:e.filter)||void 0===o?void 0:o.event)||void 0===s?void 0:s.toLocaleLowerCase();return"*"===n||n===(null===(c=null==t?void 0:t.event)||void 0===c?void 0:c.toLocaleLowerCase())}}return e.type.toLocaleLowerCase()===a}).map(e=>{if("object"==typeof l&&"ids"in l){const e=l.data,{schema:t,table:n,commit_timestamp:r,type:i,errors:a}=e,o={schema:t,table:n,commit_timestamp:r,eventType:i,new:{},old:{},errors:a};l=Object.assign(Object.assign({},o),this._getPayloadRecords(e))}e.callback(l,n)})}_isClosed(){return this.state===y.closed}_isJoined(){return this.state===y.joined}_isJoining(){return this.state===y.joining}_isLeaving(){return this.state===y.leaving}_replyEventName(e){return`chan_reply_${e}`}_on(e,t,n){const r=e.toLocaleLowerCase(),i={type:r,filter:t,callback:n};return this.bindings[r]?this.bindings[r].push(i):this.bindings[r]=[i],this}_off(e,t){const n=e.toLocaleLowerCase();return this.bindings[n]=this.bindings[n].filter(e=>{var r;return!((null===(r=e.type)||void 0===r?void 0:r.toLocaleLowerCase())===n&&z.isEqual(e.filter,t))}),this}static isEqual(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(e[n]!==t[n])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(e){this._on(b.close,{},e)}_onError(e){this._on(b.error,{},t=>e(t))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(e=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=y.joining,this.joinPush.resend(e))}_getPayloadRecords(e){const t={new:{},old:{}};return"INSERT"!==e.type&&"UPDATE"!==e.type||(t.new=I(e.columns,e.record)),"UPDATE"!==e.type&&"DELETE"!==e.type||(t.old=I(e.columns,e.old_record)),t}}const q=()=>{};class G{constructor(e,t){var n;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers={},this.params={},this.timeout=1e4,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=q,this.ref=0,this.logger=q,this.conn=null,this.sendBuffer=[],this.serializer=new A,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(r.bind(r,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},this.endPoint=`${e}/${w.websocket}`,this.httpEndpoint=L(e),(null==t?void 0:t.transport)?this.transport=t.transport:this.transport=null,(null==t?void 0:t.params)&&(this.params=t.params),(null==t?void 0:t.timeout)&&(this.timeout=t.timeout),(null==t?void 0:t.logger)&&(this.logger=t.logger),((null==t?void 0:t.logLevel)||(null==t?void 0:t.log_level))&&(this.logLevel=t.logLevel||t.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),(null==t?void 0:t.heartbeatIntervalMs)&&(this.heartbeatIntervalMs=t.heartbeatIntervalMs);const i=null===(n=null==t?void 0:t.params)||void 0===n?void 0:n.apikey;if(i&&(this.accessTokenValue=i,this.apiKey=i),this.reconnectAfterMs=(null==t?void 0:t.reconnectAfterMs)?t.reconnectAfterMs:e=>[1e3,2e3,5e3,1e4][e-1]||1e4,this.encode=(null==t?void 0:t.encode)?t.encode:(e,t)=>t(JSON.stringify(e)),this.decode=(null==t?void 0:t.decode)?t.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new T(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(null==t?void 0:t.fetch),null==t?void 0:t.worker){if("undefined"!=typeof window&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(null==t?void 0:t.worker)||!1,this.workerUrl=null==t?void 0:t.workerUrl}this.accessToken=(null==t?void 0:t.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=m),!this.transport)throw new Error("No transport provided");this.conn=new this.transport(this.endpointURL()),this.setupConnection()}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:"1.0.0"}))}disconnect(e,t){this.conn&&(this.conn.onclose=function(){},e?this.conn.close(e,null!=t?t:""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(e=>e.teardown()))}getChannels(){return this.channels}async removeChannel(e){const t=await e.unsubscribe();return 0===this.channels.length&&this.disconnect(),t}async removeAllChannels(){const e=await Promise.all(this.channels.map(e=>e.unsubscribe()));return this.channels=[],this.disconnect(),e}log(e,t,n){this.logger(e,t,n)}connectionState(){switch(this.conn&&this.conn.readyState){case v.connecting:return k.Connecting;case v.open:return k.Open;case v.closing:return k.Closing;default:return k.Closed}}isConnected(){return this.connectionState()===k.Open}channel(e,t={config:{}}){const n=`realtime:${e}`,r=this.getChannels().find(e=>e.topic===n);if(r)return r;{const n=new z(`realtime:${e}`,t,this);return this.channels.push(n),n}}push(e){const{topic:t,event:n,payload:r,ref:i}=e,a=()=>{this.encode(e,e=>{var t;null===(t=this.conn)||void 0===t||t.send(e)})};this.log("push",`${t} ${n} (${i})`,r),this.isConnected()?a():this.sendBuffer.push(a)}async setAuth(e=null){let t=e||this.accessToken&&await this.accessToken()||this.accessTokenValue;this.accessTokenValue!=t&&(this.accessTokenValue=t,this.channels.forEach(e=>{const n={access_token:t,version:"realtime-js/2.11.15"};t&&e.updateJoinPayload(n),e.joinedOnce&&e._isJoined()&&e._push(b.access_token,{access_token:t})}))}async sendHeartbeat(){var e;if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),void(null===(e=this.conn)||void 0===e||e.close(1e3,"hearbeat timeout"));this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),await this.setAuth()}else this.heartbeatCallback("disconnected")}onHeartbeat(e){this.heartbeatCallback=e}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}_makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}_leaveOpenTopic(e){let t=this.channels.find(t=>t.topic===e&&(t._isJoined()||t._isJoining()));t&&(this.log("transport",`leaving duplicate topic "${e}"`),t.unsubscribe())}_remove(e){this.channels=this.channels.filter(t=>t.topic!==e.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=e=>this._onConnError(e),this.conn.onmessage=e=>this._onConnMessage(e),this.conn.onclose=e=>this._onConnClose(e))}_onConnMessage(e){this.decode(e.data,e=>{let{topic:t,event:n,payload:r,ref:i}=e;"phoenix"===t&&"phx_reply"===n&&this.heartbeatCallback("ok"==e.payload.status?"ok":"error"),i&&i===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${r.status||""} ${t} ${n} ${i&&"("+i+")"||""}`,r),Array.from(this.channels).filter(e=>e._isMember(t)).forEach(e=>e._trigger(n,r,i)),this.stateChangeCallbacks.message.forEach(t=>t(e))})}_onConnOpen(){this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker?this.workerRef||this._startWorkerHeartbeat():this._startHeartbeat(),this.stateChangeCallbacks.open.forEach(e=>e())}_startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)}_startWorkerHeartbeat(){this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const e=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(e),this.workerRef.onerror=e=>{this.log("worker","worker error",e.message),this.workerRef.terminate()},this.workerRef.onmessage=e=>{"keepAlive"===e.data.event&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}_onConnClose(e){this.log("transport","close",e),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(t=>t(e))}_onConnError(e){this.log("transport",`${e}`),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(t=>t(e))}_triggerChanError(){this.channels.forEach(e=>e._trigger(b.error))}_appendParams(e,t){if(0===Object.keys(t).length)return e;const n=e.match(/\?/)?"&":"?";return`${e}${n}${new URLSearchParams(t)}`}_workerObjectUrl(e){let t;if(e)t=e;else{const e=new Blob(['\n  addEventListener("message", (e) => {\n    if (e.data.event === "start") {\n      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);\n    }\n  });'],{type:"application/javascript"});t=URL.createObjectURL(e)}return t}}class K extends Error{constructor(e){super(e),this.__isStorageError=!0,this.name="StorageError"}}function W(e){return"object"==typeof e&&null!==e&&"__isStorageError"in e}class H extends K{constructor(e,t){super(e),this.name="StorageApiError",this.status=t}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class J extends K{constructor(e,t){super(e),this.name="StorageUnknownError",this.originalError=t}}const V=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(r.bind(r,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},Y=e=>{if(Array.isArray(e))return e.map(e=>Y(e));if("function"==typeof e||e!==Object(e))return e;const t={};return Object.entries(e).forEach(([e,n])=>{const r=e.replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace(/[-_]/g,""));t[r]=Y(n)}),t};var Q=function(e,t,n,r){return new(n||(n=Promise))(function(i,a){function o(e){try{c(r.next(e))}catch(e){a(e)}}function s(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,s)}c((r=r.apply(e,t||[])).next())})};const X=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),Z=(e,t,n)=>Q(void 0,void 0,void 0,function*(){const i=yield(a=void 0,o=void 0,s=void 0,c=function*(){return"undefined"==typeof Response?(yield Promise.resolve().then(r.bind(r,907))).Response:Response},new(s||(s=Promise))(function(e,t){function n(e){try{i(c.next(e))}catch(e){t(e)}}function r(e){try{i(c.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof s?i:new s(function(e){e(i)})).then(n,r)}i((c=c.apply(a,o||[])).next())}));var a,o,s,c;e instanceof i&&!(null==n?void 0:n.noResolveJson)?e.json().then(n=>{t(new H(X(n),e.status||500))}).catch(e=>{t(new J(X(e),e))}):t(new J(X(e),e))});function ee(e,t,n,r,i,a){return Q(this,void 0,void 0,function*(){return new Promise((o,s)=>{e(n,((e,t,n,r)=>{const i={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?i:(i.headers=Object.assign({"Content-Type":"application/json"},null==t?void 0:t.headers),r&&(i.body=JSON.stringify(r)),Object.assign(Object.assign({},i),n))})(t,r,i,a)).then(e=>{if(!e.ok)throw e;return(null==r?void 0:r.noResolveJson)?e:e.json()}).then(e=>o(e)).catch(e=>Z(e,s,r))})})}function te(e,t,n,r){return Q(this,void 0,void 0,function*(){return ee(e,"GET",t,n,r)})}function ne(e,t,n,r,i){return Q(this,void 0,void 0,function*(){return ee(e,"POST",t,r,i,n)})}function re(e,t,n,r,i){return Q(this,void 0,void 0,function*(){return ee(e,"DELETE",t,r,i,n)})}var ie=function(e,t,n,r){return new(n||(n=Promise))(function(i,a){function o(e){try{c(r.next(e))}catch(e){a(e)}}function s(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,s)}c((r=r.apply(e,t||[])).next())})};const ae={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},oe={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class se{constructor(e,t={},n,r){this.url=e,this.headers=t,this.bucketId=n,this.fetch=V(r)}uploadOrUpdate(e,t,n,r){return ie(this,void 0,void 0,function*(){try{let i;const a=Object.assign(Object.assign({},oe),r);let o=Object.assign(Object.assign({},this.headers),"POST"===e&&{"x-upsert":String(a.upsert)});const s=a.metadata;"undefined"!=typeof Blob&&n instanceof Blob?(i=new FormData,i.append("cacheControl",a.cacheControl),s&&i.append("metadata",this.encodeMetadata(s)),i.append("",n)):"undefined"!=typeof FormData&&n instanceof FormData?(i=n,i.append("cacheControl",a.cacheControl),s&&i.append("metadata",this.encodeMetadata(s))):(i=n,o["cache-control"]=`max-age=${a.cacheControl}`,o["content-type"]=a.contentType,s&&(o["x-metadata"]=this.toBase64(this.encodeMetadata(s)))),(null==r?void 0:r.headers)&&(o=Object.assign(Object.assign({},o),r.headers));const c=this._removeEmptyFolders(t),u=this._getFinalPath(c),l=yield this.fetch(`${this.url}/object/${u}`,Object.assign({method:e,body:i,headers:o},(null==a?void 0:a.duplex)?{duplex:a.duplex}:{})),h=yield l.json();return l.ok?{data:{path:c,id:h.Id,fullPath:h.Key},error:null}:{data:null,error:h}}catch(e){if(W(e))return{data:null,error:e};throw e}})}upload(e,t,n){return ie(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",e,t,n)})}uploadToSignedUrl(e,t,n,r){return ie(this,void 0,void 0,function*(){const i=this._removeEmptyFolders(e),a=this._getFinalPath(i),o=new URL(this.url+`/object/upload/sign/${a}`);o.searchParams.set("token",t);try{let e;const t=Object.assign({upsert:oe.upsert},r),a=Object.assign(Object.assign({},this.headers),{"x-upsert":String(t.upsert)});"undefined"!=typeof Blob&&n instanceof Blob?(e=new FormData,e.append("cacheControl",t.cacheControl),e.append("",n)):"undefined"!=typeof FormData&&n instanceof FormData?(e=n,e.append("cacheControl",t.cacheControl)):(e=n,a["cache-control"]=`max-age=${t.cacheControl}`,a["content-type"]=t.contentType);const s=yield this.fetch(o.toString(),{method:"PUT",body:e,headers:a}),c=yield s.json();return s.ok?{data:{path:i,fullPath:c.Key},error:null}:{data:null,error:c}}catch(e){if(W(e))return{data:null,error:e};throw e}})}createSignedUploadUrl(e,t){return ie(this,void 0,void 0,function*(){try{let n=this._getFinalPath(e);const r=Object.assign({},this.headers);(null==t?void 0:t.upsert)&&(r["x-upsert"]="true");const i=yield ne(this.fetch,`${this.url}/object/upload/sign/${n}`,{},{headers:r}),a=new URL(this.url+i.url),o=a.searchParams.get("token");if(!o)throw new K("No token returned by API");return{data:{signedUrl:a.toString(),path:e,token:o},error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}update(e,t,n){return ie(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",e,t,n)})}move(e,t,n){return ie(this,void 0,void 0,function*(){try{return{data:yield ne(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==n?void 0:n.destinationBucket},{headers:this.headers}),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}copy(e,t,n){return ie(this,void 0,void 0,function*(){try{return{data:{path:(yield ne(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==n?void 0:n.destinationBucket},{headers:this.headers})).Key},error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}createSignedUrl(e,t,n){return ie(this,void 0,void 0,function*(){try{let r=this._getFinalPath(e),i=yield ne(this.fetch,`${this.url}/object/sign/${r}`,Object.assign({expiresIn:t},(null==n?void 0:n.transform)?{transform:n.transform}:{}),{headers:this.headers});const a=(null==n?void 0:n.download)?`&download=${!0===n.download?"":n.download}`:"";return i={signedUrl:encodeURI(`${this.url}${i.signedURL}${a}`)},{data:i,error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}createSignedUrls(e,t,n){return ie(this,void 0,void 0,function*(){try{const r=yield ne(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:t,paths:e},{headers:this.headers}),i=(null==n?void 0:n.download)?`&download=${!0===n.download?"":n.download}`:"";return{data:r.map(e=>Object.assign(Object.assign({},e),{signedUrl:e.signedURL?encodeURI(`${this.url}${e.signedURL}${i}`):null})),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}download(e,t){return ie(this,void 0,void 0,function*(){const n=void 0!==(null==t?void 0:t.transform)?"render/image/authenticated":"object",r=this.transformOptsToQueryString((null==t?void 0:t.transform)||{}),i=r?`?${r}`:"";try{const t=this._getFinalPath(e),r=yield te(this.fetch,`${this.url}/${n}/${t}${i}`,{headers:this.headers,noResolveJson:!0});return{data:yield r.blob(),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}info(e){return ie(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{const e=yield te(this.fetch,`${this.url}/object/info/${t}`,{headers:this.headers});return{data:Y(e),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}exists(e){return ie(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{return yield function(e,t,n){return Q(this,void 0,void 0,function*(){return ee(e,"HEAD",t,Object.assign(Object.assign({},n),{noResolveJson:!0}),undefined)})}(this.fetch,`${this.url}/object/${t}`,{headers:this.headers}),{data:!0,error:null}}catch(e){if(W(e)&&e instanceof J){const t=e.originalError;if([400,404].includes(null==t?void 0:t.status))return{data:!1,error:e}}throw e}})}getPublicUrl(e,t){const n=this._getFinalPath(e),r=[],i=(null==t?void 0:t.download)?`download=${!0===t.download?"":t.download}`:"";""!==i&&r.push(i);const a=void 0!==(null==t?void 0:t.transform)?"render/image":"object",o=this.transformOptsToQueryString((null==t?void 0:t.transform)||{});""!==o&&r.push(o);let s=r.join("&");return""!==s&&(s=`?${s}`),{data:{publicUrl:encodeURI(`${this.url}/${a}/public/${n}${s}`)}}}remove(e){return ie(this,void 0,void 0,function*(){try{return{data:yield re(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:e},{headers:this.headers}),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}list(e,t,n){return ie(this,void 0,void 0,function*(){try{const r=Object.assign(Object.assign(Object.assign({},ae),t),{prefix:e||""});return{data:yield ne(this.fetch,`${this.url}/object/list/${this.bucketId}`,r,{headers:this.headers},n),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}encodeMetadata(e){return JSON.stringify(e)}toBase64(e){return"undefined"!=typeof Buffer?Buffer.from(e).toString("base64"):btoa(e)}_getFinalPath(e){return`${this.bucketId}/${e}`}_removeEmptyFolders(e){return e.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(e){const t=[];return e.width&&t.push(`width=${e.width}`),e.height&&t.push(`height=${e.height}`),e.resize&&t.push(`resize=${e.resize}`),e.format&&t.push(`format=${e.format}`),e.quality&&t.push(`quality=${e.quality}`),t.join("&")}}const ce={"X-Client-Info":"storage-js/2.7.1"};var ue=function(e,t,n,r){return new(n||(n=Promise))(function(i,a){function o(e){try{c(r.next(e))}catch(e){a(e)}}function s(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,s)}c((r=r.apply(e,t||[])).next())})};class le{constructor(e,t={},n){this.url=e,this.headers=Object.assign(Object.assign({},ce),t),this.fetch=V(n)}listBuckets(){return ue(this,void 0,void 0,function*(){try{return{data:yield te(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}getBucket(e){return ue(this,void 0,void 0,function*(){try{return{data:yield te(this.fetch,`${this.url}/bucket/${e}`,{headers:this.headers}),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}createBucket(e,t={public:!1}){return ue(this,void 0,void 0,function*(){try{return{data:yield ne(this.fetch,`${this.url}/bucket`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers}),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}updateBucket(e,t){return ue(this,void 0,void 0,function*(){try{const n=yield function(e,t,n,r){return Q(this,void 0,void 0,function*(){return ee(e,"PUT",t,r,undefined,n)})}(this.fetch,`${this.url}/bucket/${e}`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers});return{data:n,error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}emptyBucket(e){return ue(this,void 0,void 0,function*(){try{return{data:yield ne(this.fetch,`${this.url}/bucket/${e}/empty`,{},{headers:this.headers}),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}deleteBucket(e){return ue(this,void 0,void 0,function*(){try{return{data:yield re(this.fetch,`${this.url}/bucket/${e}`,{},{headers:this.headers}),error:null}}catch(e){if(W(e))return{data:null,error:e};throw e}})}}class he extends le{constructor(e,t={},n){super(e,t,n)}from(e){return new se(this.url,this.headers,e,this.fetch)}}let de="";de="undefined"!=typeof Deno?"deno":"undefined"!=typeof document?"web":"undefined"!=typeof navigator&&"ReactNative"===navigator.product?"react-native":"node";const fe={headers:{"X-Client-Info":`supabase-js-${de}/2.50.3`}},pe={schema:"public"},ge={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},me={};var ve=r(907);const ye=e=>{let t;return t=e||("undefined"==typeof fetch?ve.default:fetch),(...e)=>t(...e)},be=(e,t,n)=>{const r=ye(n),i="undefined"==typeof Headers?ve.Headers:Headers;return(n,a)=>{return o=void 0,s=void 0,u=function*(){var o;const s=null!==(o=yield t())&&void 0!==o?o:e;let c=new i(null==a?void 0:a.headers);return c.has("apikey")||c.set("apikey",e),c.has("Authorization")||c.set("Authorization",`Bearer ${s}`),r(n,Object.assign(Object.assign({},a),{headers:c}))},new((c=void 0)||(c=Promise))(function(e,t){function n(e){try{i(u.next(e))}catch(e){t(e)}}function r(e){try{i(u.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof c?i:new c(function(e){e(i)})).then(n,r)}i((u=u.apply(o,s||[])).next())});var o,s,c,u}};const we="2.70.0",ke=3e4,_e={"X-Client-Info":`gotrue-js/${we}`},Se="X-Supabase-Api-Version",Ae=Date.parse("2024-01-01T00:00:00.0Z"),Te="2024-01-01",Ie=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;class je extends Error{constructor(e,t,n){super(e),this.__isAuthError=!0,this.name="AuthError",this.status=t,this.code=n}}function Oe(e){return"object"==typeof e&&null!==e&&"__isAuthError"in e}class Pe extends je{constructor(e,t,n){super(e,t,n),this.name="AuthApiError",this.status=t,this.code=n}}class Ee extends je{constructor(e,t){super(e),this.name="AuthUnknownError",this.originalError=t}}class Ce extends je{constructor(e,t,n,r){super(e,n,r),this.name=t,this.status=n}}class xe extends Ce{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}class De extends Ce{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class Re extends Ce{constructor(e){super(e,"AuthInvalidCredentialsError",400,void 0)}}class Le extends Ce{constructor(e,t=null){super(e,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Ue extends Ce{constructor(e,t=null){super(e,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Ne extends Ce{constructor(e,t){super(e,"AuthRetryableFetchError",t,void 0)}}function $e(e){return Oe(e)&&"AuthRetryableFetchError"===e.name}class Me extends Ce{constructor(e,t,n){super(e,"AuthWeakPasswordError",t,"weak_password"),this.reasons=n}}class Be extends Ce{constructor(e){super(e,"AuthInvalidJwtError",400,"invalid_jwt")}}const Fe="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),ze=" \t\n\r=".split(""),qe=(()=>{const e=new Array(128);for(let t=0;t<e.length;t+=1)e[t]=-1;for(let t=0;t<ze.length;t+=1)e[ze[t].charCodeAt(0)]=-2;for(let t=0;t<Fe.length;t+=1)e[Fe[t].charCodeAt(0)]=t;return e})();function Ge(e,t,n){if(null!==e)for(t.queue=t.queue<<8|e,t.queuedBits+=8;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;n(Fe[e]),t.queuedBits-=6}else if(t.queuedBits>0)for(t.queue=t.queue<<6-t.queuedBits,t.queuedBits=6;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;n(Fe[e]),t.queuedBits-=6}}function Ke(e,t,n){const r=qe[e];if(!(r>-1)){if(-2===r)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(e)}"`)}for(t.queue=t.queue<<6|r,t.queuedBits+=6;t.queuedBits>=8;)n(t.queue>>t.queuedBits-8&255),t.queuedBits-=8}function We(e){const t=[],n=e=>{t.push(String.fromCodePoint(e))},r={utf8seq:0,codepoint:0},i={queue:0,queuedBits:0},a=e=>{!function(e,t,n){if(0===t.utf8seq){if(e<=127)return void n(e);for(let n=1;n<6;n+=1)if(!(e>>7-n&1)){t.utf8seq=n;break}if(2===t.utf8seq)t.codepoint=31&e;else if(3===t.utf8seq)t.codepoint=15&e;else{if(4!==t.utf8seq)throw new Error("Invalid UTF-8 sequence");t.codepoint=7&e}t.utf8seq-=1}else if(t.utf8seq>0){if(e<=127)throw new Error("Invalid UTF-8 sequence");t.codepoint=t.codepoint<<6|63&e,t.utf8seq-=1,0===t.utf8seq&&n(t.codepoint)}}(e,r,n)};for(let t=0;t<e.length;t+=1)Ke(e.charCodeAt(t),i,a);return t.join("")}function He(e,t){if(!(e<=127)){if(e<=2047)return t(192|e>>6),void t(128|63&e);if(e<=65535)return t(224|e>>12),t(128|e>>6&63),void t(128|63&e);if(e<=1114111)return t(240|e>>18),t(128|e>>12&63),t(128|e>>6&63),void t(128|63&e);throw new Error(`Unrecognized Unicode codepoint: ${e.toString(16)}`)}t(e)}function Je(e){const t=[],n={queue:0,queuedBits:0},r=e=>{t.push(e)};for(let t=0;t<e.length;t+=1)Ke(e.charCodeAt(t),n,r);return new Uint8Array(t)}function Ve(e){const t=[],n={queue:0,queuedBits:0},r=e=>{t.push(e)};return e.forEach(e=>Ge(e,n,r)),Ge(null,n,r),t.join("")}const Ye=()=>"undefined"!=typeof window&&"undefined"!=typeof document,Qe={tested:!1,writable:!1},Xe=()=>{if(!Ye())return!1;try{if("object"!=typeof globalThis.localStorage)return!1}catch(e){return!1}if(Qe.tested)return Qe.writable;const e=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(e,e),globalThis.localStorage.removeItem(e),Qe.tested=!0,Qe.writable=!0}catch(e){Qe.tested=!0,Qe.writable=!1}return Qe.writable},Ze=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(r.bind(r,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},et=async(e,t,n)=>{await e.setItem(t,JSON.stringify(n))},tt=async(e,t)=>{const n=await e.getItem(t);if(!n)return null;try{return JSON.parse(n)}catch(e){return n}},nt=async(e,t)=>{await e.removeItem(t)};class rt{constructor(){this.promise=new rt.promiseConstructor((e,t)=>{this.resolve=e,this.reject=t})}}function it(e){const t=e.split(".");if(3!==t.length)throw new Be("Invalid JWT structure");for(let e=0;e<t.length;e++)if(!Ie.test(t[e]))throw new Be("JWT not in base64url format");return{header:JSON.parse(We(t[0])),payload:JSON.parse(We(t[1])),signature:Je(t[2]),raw:{header:t[0],payload:t[1]}}}function at(e){return("0"+e.toString(16)).substr(-2)}async function ot(e,t,n=!1){const r=function(){const e=new Uint32Array(56);if("undefined"==typeof crypto){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",t=e.length;let n="";for(let r=0;r<56;r++)n+=e.charAt(Math.floor(Math.random()*t));return n}return crypto.getRandomValues(e),Array.from(e,at).join("")}();let i=r;n&&(i+="/PASSWORD_RECOVERY"),await et(e,`${t}-code-verifier`,i);const a=await async function(e){if("undefined"==typeof crypto||void 0===crypto.subtle||"undefined"==typeof TextEncoder)return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),e;const t=await async function(e){const t=(new TextEncoder).encode(e),n=await crypto.subtle.digest("SHA-256",t),r=new Uint8Array(n);return Array.from(r).map(e=>String.fromCharCode(e)).join("")}(e);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}(r);return[a,r===a?"plain":"s256"]}rt.promiseConstructor=Promise;const st=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i,ct=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function ut(e){if(!ct.test(e))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}const lt=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),ht=[502,503,504];async function dt(e){var t,n;if(!("object"==typeof(n=e)&&null!==n&&"status"in n&&"ok"in n&&"json"in n&&"function"==typeof n.json))throw new Ne(lt(e),0);if(ht.includes(e.status))throw new Ne(lt(e),e.status);let r,i;try{r=await e.json()}catch(e){throw new Ee(lt(e),e)}const a=function(e){const t=e.headers.get(Se);if(!t)return null;if(!t.match(st))return null;try{return new Date(`${t}T00:00:00.0Z`)}catch(e){return null}}(e);if(a&&a.getTime()>=Ae&&"object"==typeof r&&r&&"string"==typeof r.code?i=r.code:"object"==typeof r&&r&&"string"==typeof r.error_code&&(i=r.error_code),i){if("weak_password"===i)throw new Me(lt(r),e.status,(null===(t=r.weak_password)||void 0===t?void 0:t.reasons)||[]);if("session_not_found"===i)throw new xe}else if("object"==typeof r&&r&&"object"==typeof r.weak_password&&r.weak_password&&Array.isArray(r.weak_password.reasons)&&r.weak_password.reasons.length&&r.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0))throw new Me(lt(r),e.status,r.weak_password.reasons);throw new Pe(lt(r),e.status||500,i)}async function ft(e,t,n,r){var i;const a=Object.assign({},null==r?void 0:r.headers);a[Se]||(a[Se]=Te),(null==r?void 0:r.jwt)&&(a.Authorization=`Bearer ${r.jwt}`);const o=null!==(i=null==r?void 0:r.query)&&void 0!==i?i:{};(null==r?void 0:r.redirectTo)&&(o.redirect_to=r.redirectTo);const s=Object.keys(o).length?"?"+new URLSearchParams(o).toString():"",c=await async function(e,t,n,r,i,a){const o=((e,t,n,r)=>{const i={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?i:(i.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},null==t?void 0:t.headers),i.body=JSON.stringify(r),Object.assign(Object.assign({},i),n))})(t,r,{},a);let s;try{s=await e(n,Object.assign({},o))}catch(e){throw console.error(e),new Ne(lt(e),0)}if(s.ok||await dt(s),null==r?void 0:r.noResolveJson)return s;try{return await s.json()}catch(e){await dt(e)}}(e,t,n+s,{headers:a,noResolveJson:null==r?void 0:r.noResolveJson},0,null==r?void 0:r.body);return(null==r?void 0:r.xform)?null==r?void 0:r.xform(c):{data:Object.assign({},c),error:null}}function pt(e){var t;let n=null;var r;return function(e){return e.access_token&&e.refresh_token&&e.expires_in}(e)&&(n=Object.assign({},e),e.expires_at||(n.expires_at=(r=e.expires_in,Math.round(Date.now()/1e3)+r))),{data:{session:n,user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function gt(e){const t=pt(e);return!t.error&&e.weak_password&&"object"==typeof e.weak_password&&Array.isArray(e.weak_password.reasons)&&e.weak_password.reasons.length&&e.weak_password.message&&"string"==typeof e.weak_password.message&&e.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0)&&(t.data.weak_password=e.weak_password),t}function mt(e){var t;return{data:{user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function vt(e){return{data:e,error:null}}function yt(e){const{action_link:t,email_otp:n,hashed_token:r,redirect_to:i,verification_type:a}=e,o=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}(e,["action_link","email_otp","hashed_token","redirect_to","verification_type"]);return{data:{properties:{action_link:t,email_otp:n,hashed_token:r,redirect_to:i,verification_type:a},user:Object.assign({},o)},error:null}}function bt(e){return e}const wt=["global","local","others"];class kt{constructor({url:e="",headers:t={},fetch:n}){this.url=e,this.headers=t,this.fetch=Ze(n),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(e,t=wt[0]){if(wt.indexOf(t)<0)throw new Error(`@supabase/auth-js: Parameter scope must be one of ${wt.join(", ")}`);try{return await ft(this.fetch,"POST",`${this.url}/logout?scope=${t}`,{headers:this.headers,jwt:e,noResolveJson:!0}),{data:null,error:null}}catch(e){if(Oe(e))return{data:null,error:e};throw e}}async inviteUserByEmail(e,t={}){try{return await ft(this.fetch,"POST",`${this.url}/invite`,{body:{email:e,data:t.data},headers:this.headers,redirectTo:t.redirectTo,xform:mt})}catch(e){if(Oe(e))return{data:{user:null},error:e};throw e}}async generateLink(e){try{const{options:t}=e,n=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}(e,["options"]),r=Object.assign(Object.assign({},n),t);return"newEmail"in n&&(r.new_email=null==n?void 0:n.newEmail,delete r.newEmail),await ft(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:r,headers:this.headers,xform:yt,redirectTo:null==t?void 0:t.redirectTo})}catch(e){if(Oe(e))return{data:{properties:null,user:null},error:e};throw e}}async createUser(e){try{return await ft(this.fetch,"POST",`${this.url}/admin/users`,{body:e,headers:this.headers,xform:mt})}catch(e){if(Oe(e))return{data:{user:null},error:e};throw e}}async listUsers(e){var t,n,r,i,a,o,s;try{const c={nextPage:null,lastPage:0,total:0},u=await ft(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:null!==(n=null===(t=null==e?void 0:e.page)||void 0===t?void 0:t.toString())&&void 0!==n?n:"",per_page:null!==(i=null===(r=null==e?void 0:e.perPage)||void 0===r?void 0:r.toString())&&void 0!==i?i:""},xform:bt});if(u.error)throw u.error;const l=await u.json(),h=null!==(a=u.headers.get("x-total-count"))&&void 0!==a?a:0,d=null!==(s=null===(o=u.headers.get("link"))||void 0===o?void 0:o.split(","))&&void 0!==s?s:[];return d.length>0&&(d.forEach(e=>{const t=parseInt(e.split(";")[0].split("=")[1].substring(0,1)),n=JSON.parse(e.split(";")[1].split("=")[1]);c[`${n}Page`]=t}),c.total=parseInt(h)),{data:Object.assign(Object.assign({},l),c),error:null}}catch(e){if(Oe(e))return{data:{users:[]},error:e};throw e}}async getUserById(e){ut(e);try{return await ft(this.fetch,"GET",`${this.url}/admin/users/${e}`,{headers:this.headers,xform:mt})}catch(e){if(Oe(e))return{data:{user:null},error:e};throw e}}async updateUserById(e,t){ut(e);try{return await ft(this.fetch,"PUT",`${this.url}/admin/users/${e}`,{body:t,headers:this.headers,xform:mt})}catch(e){if(Oe(e))return{data:{user:null},error:e};throw e}}async deleteUser(e,t=!1){ut(e);try{return await ft(this.fetch,"DELETE",`${this.url}/admin/users/${e}`,{headers:this.headers,body:{should_soft_delete:t},xform:mt})}catch(e){if(Oe(e))return{data:{user:null},error:e};throw e}}async _listFactors(e){ut(e.userId);try{const{data:t,error:n}=await ft(this.fetch,"GET",`${this.url}/admin/users/${e.userId}/factors`,{headers:this.headers,xform:e=>({data:{factors:e},error:null})});return{data:t,error:n}}catch(e){if(Oe(e))return{data:null,error:e};throw e}}async _deleteFactor(e){ut(e.userId),ut(e.id);try{return{data:await ft(this.fetch,"DELETE",`${this.url}/admin/users/${e.userId}/factors/${e.id}`,{headers:this.headers}),error:null}}catch(e){if(Oe(e))return{data:null,error:e};throw e}}}const _t={getItem:e=>Xe()?globalThis.localStorage.getItem(e):null,setItem:(e,t)=>{Xe()&&globalThis.localStorage.setItem(e,t)},removeItem:e=>{Xe()&&globalThis.localStorage.removeItem(e)}};function St(e={}){return{getItem:t=>e[t]||null,setItem:(t,n)=>{e[t]=n},removeItem:t=>{delete e[t]}}}const At=!!(globalThis&&Xe()&&globalThis.localStorage&&"true"===globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug"));class Tt extends Error{constructor(e){super(e),this.isAcquireTimeout=!0}}class It extends Tt{}async function jt(e,t,n){At&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",e,t);const r=new globalThis.AbortController;return t>0&&setTimeout(()=>{r.abort(),At&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",e)},t),await Promise.resolve().then(()=>globalThis.navigator.locks.request(e,0===t?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:r.signal},async r=>{if(!r){if(0===t)throw At&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",e),new It(`Acquiring an exclusive Navigator LockManager lock "${e}" immediately failed`);if(At)try{const e=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(e,null,"  "))}catch(e){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",e)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await n()}At&&console.log("@supabase/gotrue-js: navigatorLock: acquired",e,r.name);try{return await n()}finally{At&&console.log("@supabase/gotrue-js: navigatorLock: released",e,r.name)}}))}!function(){if("object"!=typeof globalThis)try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch(e){"undefined"!=typeof self&&(self.globalThis=self)}}();const Ot={url:"http://localhost:9999",storageKey:"supabase.auth.token",autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:_e,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function Pt(e,t,n){return await n()}class Et{constructor(e){var t,n;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=Et.nextInstanceID,Et.nextInstanceID+=1,this.instanceID>0&&Ye()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const r=Object.assign(Object.assign({},Ot),e);if(this.logDebugMessages=!!r.debug,"function"==typeof r.debug&&(this.logger=r.debug),this.persistSession=r.persistSession,this.storageKey=r.storageKey,this.autoRefreshToken=r.autoRefreshToken,this.admin=new kt({url:r.url,headers:r.headers,fetch:r.fetch}),this.url=r.url,this.headers=r.headers,this.fetch=Ze(r.fetch),this.lock=r.lock||Pt,this.detectSessionInUrl=r.detectSessionInUrl,this.flowType=r.flowType,this.hasCustomAuthorizationHeader=r.hasCustomAuthorizationHeader,r.lock?this.lock=r.lock:Ye()&&(null===(t=null===globalThis||void 0===globalThis?void 0:globalThis.navigator)||void 0===t?void 0:t.locks)?this.lock=jt:this.lock=Pt,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?r.storage?this.storage=r.storage:Xe()?this.storage=_t:(this.memoryStorage={},this.storage=St(this.memoryStorage)):(this.memoryStorage={},this.storage=St(this.memoryStorage)),Ye()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(e){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",e)}null===(n=this.broadcastChannel)||void 0===n||n.addEventListener("message",async e=>{this._debug("received broadcast notification from other tab or client",e),await this._notifyAllSubscribers(e.data.event,e.data.session,!1)})}this.initialize()}_debug(...e){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${we}) ${(new Date).toISOString()}`,...e),this}async initialize(){return this.initializePromise||(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))()),await this.initializePromise}async _initialize(){var e;try{const t=function(e){const t={},n=new URL(e);if(n.hash&&"#"===n.hash[0])try{new URLSearchParams(n.hash.substring(1)).forEach((e,n)=>{t[n]=e})}catch(e){}return n.searchParams.forEach((e,n)=>{t[n]=e}),t}(window.location.href);let n="none";if(this._isImplicitGrantCallback(t)?n="implicit":await this._isPKCECallback(t)&&(n="pkce"),Ye()&&this.detectSessionInUrl&&"none"!==n){const{data:r,error:i}=await this._getSessionFromURL(t,n);if(i){if(this._debug("#_initialize()","error detecting session from URL",i),function(e){return Oe(e)&&"AuthImplicitGrantRedirectError"===e.name}(i)){const t=null===(e=i.details)||void 0===e?void 0:e.code;if("identity_already_exists"===t||"identity_not_found"===t||"single_identity_not_deletable"===t)return{error:i}}return await this._removeSession(),{error:i}}const{session:a,redirectType:o}=r;return this._debug("#_initialize()","detected session in URL",a,"redirect type",o),await this._saveSession(a),setTimeout(async()=>{"recovery"===o?await this._notifyAllSubscribers("PASSWORD_RECOVERY",a):await this._notifyAllSubscribers("SIGNED_IN",a)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(e){return Oe(e)?{error:e}:{error:new Ee("Unexpected error during initialization",e)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(e){var t,n,r;try{const i=await ft(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:null!==(n=null===(t=null==e?void 0:e.options)||void 0===t?void 0:t.data)&&void 0!==n?n:{},gotrue_meta_security:{captcha_token:null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken}},xform:pt}),{data:a,error:o}=i;if(o||!a)return{data:{user:null,session:null},error:o};const s=a.session,c=a.user;return a.session&&(await this._saveSession(a.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:c,session:s},error:null}}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async signUp(e){var t,n,r;try{let i;if("email"in e){const{email:n,password:r,options:a}=e;let o=null,s=null;"pkce"===this.flowType&&([o,s]=await ot(this.storage,this.storageKey)),i=await ft(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:null==a?void 0:a.emailRedirectTo,body:{email:n,password:r,data:null!==(t=null==a?void 0:a.data)&&void 0!==t?t:{},gotrue_meta_security:{captcha_token:null==a?void 0:a.captchaToken},code_challenge:o,code_challenge_method:s},xform:pt})}else{if(!("phone"in e))throw new Re("You must provide either an email or phone number and a password");{const{phone:t,password:a,options:o}=e;i=await ft(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:t,password:a,data:null!==(n=null==o?void 0:o.data)&&void 0!==n?n:{},channel:null!==(r=null==o?void 0:o.channel)&&void 0!==r?r:"sms",gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:pt})}}const{data:a,error:o}=i;if(o||!a)return{data:{user:null,session:null},error:o};const s=a.session,c=a.user;return a.session&&(await this._saveSession(a.session),await this._notifyAllSubscribers("SIGNED_IN",s)),{data:{user:c,session:s},error:null}}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithPassword(e){try{let t;if("email"in e){const{email:n,password:r,options:i}=e;t=await ft(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:n,password:r,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},xform:gt})}else{if(!("phone"in e))throw new Re("You must provide either an email or phone number and a password");{const{phone:n,password:r,options:i}=e;t=await ft(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:n,password:r,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},xform:gt})}}const{data:n,error:r}=t;return r?{data:{user:null,session:null},error:r}:n&&n.session&&n.user?(n.session&&(await this._saveSession(n.session),await this._notifyAllSubscribers("SIGNED_IN",n.session)),{data:Object.assign({user:n.user,session:n.session},n.weak_password?{weakPassword:n.weak_password}:null),error:r}):{data:{user:null,session:null},error:new De}}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOAuth(e){var t,n,r,i;return await this._handleProviderSignIn(e.provider,{redirectTo:null===(t=e.options)||void 0===t?void 0:t.redirectTo,scopes:null===(n=e.options)||void 0===n?void 0:n.scopes,queryParams:null===(r=e.options)||void 0===r?void 0:r.queryParams,skipBrowserRedirect:null===(i=e.options)||void 0===i?void 0:i.skipBrowserRedirect})}async exchangeCodeForSession(e){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(e))}async signInWithWeb3(e){const{chain:t}=e;if("solana"===t)return await this.signInWithSolana(e);throw new Error(`@supabase/auth-js: Unsupported chain "${t}"`)}async signInWithSolana(e){var t,n,r,i,a,o,s,c,u,l,h,d;let f,p;if("message"in e)f=e.message,p=e.signature;else{const{chain:h,wallet:d,statement:g,options:m}=e;let v;if(Ye())if("object"==typeof d)v=d;else{const e=window;if(!("solana"in e)||"object"!=typeof e.solana||!("signIn"in e.solana&&"function"==typeof e.solana.signIn||"signMessage"in e.solana&&"function"==typeof e.solana.signMessage))throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");v=e.solana}else{if("object"!=typeof d||!(null==m?void 0:m.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");v=d}const y=new URL(null!==(t=null==m?void 0:m.url)&&void 0!==t?t:window.location.href);if("signIn"in v&&v.signIn){const e=await v.signIn(Object.assign(Object.assign(Object.assign({issuedAt:(new Date).toISOString()},null==m?void 0:m.signInWithSolana),{version:"1",domain:y.host,uri:y.href}),g?{statement:g}:null));let t;if(Array.isArray(e)&&e[0]&&"object"==typeof e[0])t=e[0];else{if(!(e&&"object"==typeof e&&"signedMessage"in e&&"signature"in e))throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");t=e}if(!("signedMessage"in t&&"signature"in t&&("string"==typeof t.signedMessage||t.signedMessage instanceof Uint8Array)&&t.signature instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");f="string"==typeof t.signedMessage?t.signedMessage:(new TextDecoder).decode(t.signedMessage),p=t.signature}else{if(!("signMessage"in v&&"function"==typeof v.signMessage&&"publicKey"in v&&"object"==typeof v&&v.publicKey&&"toBase58"in v.publicKey&&"function"==typeof v.publicKey.toBase58))throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");f=[`${y.host} wants you to sign in with your Solana account:`,v.publicKey.toBase58(),...g?["",g,""]:[""],"Version: 1",`URI: ${y.href}`,`Issued At: ${null!==(r=null===(n=null==m?void 0:m.signInWithSolana)||void 0===n?void 0:n.issuedAt)&&void 0!==r?r:(new Date).toISOString()}`,...(null===(i=null==m?void 0:m.signInWithSolana)||void 0===i?void 0:i.notBefore)?[`Not Before: ${m.signInWithSolana.notBefore}`]:[],...(null===(a=null==m?void 0:m.signInWithSolana)||void 0===a?void 0:a.expirationTime)?[`Expiration Time: ${m.signInWithSolana.expirationTime}`]:[],...(null===(o=null==m?void 0:m.signInWithSolana)||void 0===o?void 0:o.chainId)?[`Chain ID: ${m.signInWithSolana.chainId}`]:[],...(null===(s=null==m?void 0:m.signInWithSolana)||void 0===s?void 0:s.nonce)?[`Nonce: ${m.signInWithSolana.nonce}`]:[],...(null===(c=null==m?void 0:m.signInWithSolana)||void 0===c?void 0:c.requestId)?[`Request ID: ${m.signInWithSolana.requestId}`]:[],...(null===(l=null===(u=null==m?void 0:m.signInWithSolana)||void 0===u?void 0:u.resources)||void 0===l?void 0:l.length)?["Resources",...m.signInWithSolana.resources.map(e=>`- ${e}`)]:[]].join("\n");const e=await v.signMessage((new TextEncoder).encode(f),"utf8");if(!(e&&e instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");p=e}}try{const{data:t,error:n}=await ft(this.fetch,"POST",`${this.url}/token?grant_type=web3`,{headers:this.headers,body:Object.assign({chain:"solana",message:f,signature:Ve(p)},(null===(h=e.options)||void 0===h?void 0:h.captchaToken)?{gotrue_meta_security:{captcha_token:null===(d=e.options)||void 0===d?void 0:d.captchaToken}}:null),xform:pt});if(n)throw n;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign({},t),error:n}):{data:{user:null,session:null},error:new De}}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async _exchangeCodeForSession(e){const t=await tt(this.storage,`${this.storageKey}-code-verifier`),[n,r]=(null!=t?t:"").split("/");try{const{data:t,error:i}=await ft(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:e,code_verifier:n},xform:pt});if(await nt(this.storage,`${this.storageKey}-code-verifier`),i)throw i;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign(Object.assign({},t),{redirectType:null!=r?r:null}),error:i}):{data:{user:null,session:null,redirectType:null},error:new De}}catch(e){if(Oe(e))return{data:{user:null,session:null,redirectType:null},error:e};throw e}}async signInWithIdToken(e){try{const{options:t,provider:n,token:r,access_token:i,nonce:a}=e,o=await ft(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:n,id_token:r,access_token:i,nonce:a,gotrue_meta_security:{captcha_token:null==t?void 0:t.captchaToken}},xform:pt}),{data:s,error:c}=o;return c?{data:{user:null,session:null},error:c}:s&&s.session&&s.user?(s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",s.session)),{data:s,error:c}):{data:{user:null,session:null},error:new De}}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOtp(e){var t,n,r,i,a;try{if("email"in e){const{email:r,options:i}=e;let a=null,o=null;"pkce"===this.flowType&&([a,o]=await ot(this.storage,this.storageKey));const{error:s}=await ft(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:r,data:null!==(t=null==i?void 0:i.data)&&void 0!==t?t:{},create_user:null===(n=null==i?void 0:i.shouldCreateUser)||void 0===n||n,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken},code_challenge:a,code_challenge_method:o},redirectTo:null==i?void 0:i.emailRedirectTo});return{data:{user:null,session:null},error:s}}if("phone"in e){const{phone:t,options:n}=e,{data:o,error:s}=await ft(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:t,data:null!==(r=null==n?void 0:n.data)&&void 0!==r?r:{},create_user:null===(i=null==n?void 0:n.shouldCreateUser)||void 0===i||i,gotrue_meta_security:{captcha_token:null==n?void 0:n.captchaToken},channel:null!==(a=null==n?void 0:n.channel)&&void 0!==a?a:"sms"}});return{data:{user:null,session:null,messageId:null==o?void 0:o.message_id},error:s}}throw new Re("You must provide either an email or phone number.")}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async verifyOtp(e){var t,n;try{let r,i;"options"in e&&(r=null===(t=e.options)||void 0===t?void 0:t.redirectTo,i=null===(n=e.options)||void 0===n?void 0:n.captchaToken);const{data:a,error:o}=await ft(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},e),{gotrue_meta_security:{captcha_token:i}}),redirectTo:r,xform:pt});if(o)throw o;if(!a)throw new Error("An error occurred on token verification.");const s=a.session,c=a.user;return(null==s?void 0:s.access_token)&&(await this._saveSession(s),await this._notifyAllSubscribers("recovery"==e.type?"PASSWORD_RECOVERY":"SIGNED_IN",s)),{data:{user:c,session:s},error:null}}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithSSO(e){var t,n,r;try{let i=null,a=null;return"pkce"===this.flowType&&([i,a]=await ot(this.storage,this.storageKey)),await ft(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in e?{provider_id:e.providerId}:null),"domain"in e?{domain:e.domain}:null),{redirect_to:null!==(n=null===(t=e.options)||void 0===t?void 0:t.redirectTo)&&void 0!==n?n:void 0}),(null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken)?{gotrue_meta_security:{captcha_token:e.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:i,code_challenge_method:a}),headers:this.headers,xform:vt})}catch(e){if(Oe(e))return{data:null,error:e};throw e}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async e=>{const{data:{session:t},error:n}=e;if(n)throw n;if(!t)throw new xe;const{error:r}=await ft(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:t.access_token});return{data:{user:null,session:null},error:r}})}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async resend(e){try{const t=`${this.url}/resend`;if("email"in e){const{email:n,type:r,options:i}=e,{error:a}=await ft(this.fetch,"POST",t,{headers:this.headers,body:{email:n,type:r,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},redirectTo:null==i?void 0:i.emailRedirectTo});return{data:{user:null,session:null},error:a}}if("phone"in e){const{phone:n,type:r,options:i}=e,{data:a,error:o}=await ft(this.fetch,"POST",t,{headers:this.headers,body:{phone:n,type:r,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}}});return{data:{user:null,session:null,messageId:null==a?void 0:a.message_id},error:o}}throw new Re("You must provide either an email or phone number and a type")}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async e=>e))}async _acquireLock(e,t){this._debug("#_acquireLock","begin",e);try{if(this.lockAcquired){const e=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),n=(async()=>(await e,await t()))();return this.pendingInLock.push((async()=>{try{await n}catch(e){}})()),n}return await this.lock(`lock:${this.storageKey}`,e,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const e=t();for(this.pendingInLock.push((async()=>{try{await e}catch(e){}})()),await e;this.pendingInLock.length;){const e=[...this.pendingInLock];await Promise.all(e),this.pendingInLock.splice(0,e.length)}return await e}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(e){this._debug("#_useSession","begin");try{const t=await this.__loadSession();return await e(t)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",(new Error).stack);try{let e=null;const t=await tt(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",t),null!==t&&(this._isValidSession(t)?e=t:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!e)return{data:{session:null},error:null};const n=!!e.expires_at&&1e3*e.expires_at-Date.now()<9e4;if(this._debug("#__loadSession()",`session has${n?"":" not"} expired`,"expires_at",e.expires_at),!n){if(this.storage.isServer){let t=this.suppressGetSessionWarning;e=new Proxy(e,{get:(e,n,r)=>(t||"user"!==n||(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),t=!0,this.suppressGetSessionWarning=!0),Reflect.get(e,n,r))})}return{data:{session:e},error:null}}const{session:r,error:i}=await this._callRefreshToken(e.refresh_token);return i?{data:{session:null},error:i}:{data:{session:r},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(e){return e?await this._getUser(e):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(e){try{return e?await ft(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:e,xform:mt}):await this._useSession(async e=>{var t,n,r;const{data:i,error:a}=e;if(a)throw a;return(null===(t=i.session)||void 0===t?void 0:t.access_token)||this.hasCustomAuthorizationHeader?await ft(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:null!==(r=null===(n=i.session)||void 0===n?void 0:n.access_token)&&void 0!==r?r:void 0,xform:mt}):{data:{user:null},error:new xe}})}catch(e){if(Oe(e))return function(e){return Oe(e)&&"AuthSessionMissingError"===e.name}(e)&&(await this._removeSession(),await nt(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:e};throw e}}async updateUser(e,t={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(e,t))}async _updateUser(e,t={}){try{return await this._useSession(async n=>{const{data:r,error:i}=n;if(i)throw i;if(!r.session)throw new xe;const a=r.session;let o=null,s=null;"pkce"===this.flowType&&null!=e.email&&([o,s]=await ot(this.storage,this.storageKey));const{data:c,error:u}=await ft(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:null==t?void 0:t.emailRedirectTo,body:Object.assign(Object.assign({},e),{code_challenge:o,code_challenge_method:s}),jwt:a.access_token,xform:mt});if(u)throw u;return a.user=c.user,await this._saveSession(a),await this._notifyAllSubscribers("USER_UPDATED",a),{data:{user:a.user},error:null}})}catch(e){if(Oe(e))return{data:{user:null},error:e};throw e}}async setSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(e))}async _setSession(e){try{if(!e.access_token||!e.refresh_token)throw new xe;const t=Date.now()/1e3;let n=t,r=!0,i=null;const{payload:a}=it(e.access_token);if(a.exp&&(n=a.exp,r=n<=t),r){const{session:t,error:n}=await this._callRefreshToken(e.refresh_token);if(n)return{data:{user:null,session:null},error:n};if(!t)return{data:{user:null,session:null},error:null};i=t}else{const{data:r,error:a}=await this._getUser(e.access_token);if(a)throw a;i={access_token:e.access_token,refresh_token:e.refresh_token,user:r.user,token_type:"bearer",expires_in:n-t,expires_at:n},await this._saveSession(i),await this._notifyAllSubscribers("SIGNED_IN",i)}return{data:{user:i.user,session:i},error:null}}catch(e){if(Oe(e))return{data:{session:null,user:null},error:e};throw e}}async refreshSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(e))}async _refreshSession(e){try{return await this._useSession(async t=>{var n;if(!e){const{data:r,error:i}=t;if(i)throw i;e=null!==(n=r.session)&&void 0!==n?n:void 0}if(!(null==e?void 0:e.refresh_token))throw new xe;const{session:r,error:i}=await this._callRefreshToken(e.refresh_token);return i?{data:{user:null,session:null},error:i}:r?{data:{user:r.user,session:r},error:null}:{data:{user:null,session:null},error:null}})}catch(e){if(Oe(e))return{data:{user:null,session:null},error:e};throw e}}async _getSessionFromURL(e,t){try{if(!Ye())throw new Le("No browser detected.");if(e.error||e.error_description||e.error_code)throw new Le(e.error_description||"Error in URL with unspecified error_description",{error:e.error||"unspecified_error",code:e.error_code||"unspecified_code"});switch(t){case"implicit":if("pkce"===this.flowType)throw new Ue("Not a valid PKCE flow url.");break;case"pkce":if("implicit"===this.flowType)throw new Le("Not a valid implicit grant flow url.")}if("pkce"===t){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!e.code)throw new Ue("No code detected.");const{data:t,error:n}=await this._exchangeCodeForSession(e.code);if(n)throw n;const r=new URL(window.location.href);return r.searchParams.delete("code"),window.history.replaceState(window.history.state,"",r.toString()),{data:{session:t.session,redirectType:null},error:null}}const{provider_token:n,provider_refresh_token:r,access_token:i,refresh_token:a,expires_in:o,expires_at:s,token_type:c}=e;if(!(i&&o&&a&&c))throw new Le("No session defined in URL");const u=Math.round(Date.now()/1e3),l=parseInt(o);let h=u+l;s&&(h=parseInt(s));const d=h-u;1e3*d<=ke&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${d}s, should have been closer to ${l}s`);const f=h-l;u-f>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",f,h,u):u-f<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",f,h,u);const{data:p,error:g}=await this._getUser(i);if(g)throw g;const m={provider_token:n,provider_refresh_token:r,access_token:i,expires_in:l,expires_at:h,refresh_token:a,token_type:c,user:p.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:m,redirectType:e.type},error:null}}catch(e){if(Oe(e))return{data:{session:null,redirectType:null},error:e};throw e}}_isImplicitGrantCallback(e){return Boolean(e.access_token||e.error_description)}async _isPKCECallback(e){const t=await tt(this.storage,`${this.storageKey}-code-verifier`);return!(!e.code||!t)}async signOut(e={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(e))}async _signOut({scope:e}={scope:"global"}){return await this._useSession(async t=>{var n;const{data:r,error:i}=t;if(i)return{error:i};const a=null===(n=r.session)||void 0===n?void 0:n.access_token;if(a){const{error:t}=await this.admin.signOut(a,e);if(t&&(!function(e){return Oe(e)&&"AuthApiError"===e.name}(t)||404!==t.status&&401!==t.status&&403!==t.status))return{error:t}}return"others"!==e&&(await this._removeSession(),await nt(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(e){const t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}),n={id:t,callback:e,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",t),this.stateChangeEmitters.delete(t)}};return this._debug("#onAuthStateChange()","registered callback with id",t),this.stateChangeEmitters.set(t,n),(async()=>{await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(t)})})(),{data:{subscription:n}}}async _emitInitialSession(e){return await this._useSession(async t=>{var n,r;try{const{data:{session:r},error:i}=t;if(i)throw i;await(null===(n=this.stateChangeEmitters.get(e))||void 0===n?void 0:n.callback("INITIAL_SESSION",r)),this._debug("INITIAL_SESSION","callback id",e,"session",r)}catch(t){await(null===(r=this.stateChangeEmitters.get(e))||void 0===r?void 0:r.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",e,"error",t),console.error(t)}})}async resetPasswordForEmail(e,t={}){let n=null,r=null;"pkce"===this.flowType&&([n,r]=await ot(this.storage,this.storageKey,!0));try{return await ft(this.fetch,"POST",`${this.url}/recover`,{body:{email:e,code_challenge:n,code_challenge_method:r,gotrue_meta_security:{captcha_token:t.captchaToken}},headers:this.headers,redirectTo:t.redirectTo})}catch(e){if(Oe(e))return{data:null,error:e};throw e}}async getUserIdentities(){var e;try{const{data:t,error:n}=await this.getUser();if(n)throw n;return{data:{identities:null!==(e=t.user.identities)&&void 0!==e?e:[]},error:null}}catch(e){if(Oe(e))return{data:null,error:e};throw e}}async linkIdentity(e){var t;try{const{data:n,error:r}=await this._useSession(async t=>{var n,r,i,a,o;const{data:s,error:c}=t;if(c)throw c;const u=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,e.provider,{redirectTo:null===(n=e.options)||void 0===n?void 0:n.redirectTo,scopes:null===(r=e.options)||void 0===r?void 0:r.scopes,queryParams:null===(i=e.options)||void 0===i?void 0:i.queryParams,skipBrowserRedirect:!0});return await ft(this.fetch,"GET",u,{headers:this.headers,jwt:null!==(o=null===(a=s.session)||void 0===a?void 0:a.access_token)&&void 0!==o?o:void 0})});if(r)throw r;return Ye()&&!(null===(t=e.options)||void 0===t?void 0:t.skipBrowserRedirect)&&window.location.assign(null==n?void 0:n.url),{data:{provider:e.provider,url:null==n?void 0:n.url},error:null}}catch(t){if(Oe(t))return{data:{provider:e.provider,url:null},error:t};throw t}}async unlinkIdentity(e){try{return await this._useSession(async t=>{var n,r;const{data:i,error:a}=t;if(a)throw a;return await ft(this.fetch,"DELETE",`${this.url}/user/identities/${e.identity_id}`,{headers:this.headers,jwt:null!==(r=null===(n=i.session)||void 0===n?void 0:n.access_token)&&void 0!==r?r:void 0})})}catch(e){if(Oe(e))return{data:null,error:e};throw e}}async _refreshAccessToken(e){const t=`#_refreshAccessToken(${e.substring(0,5)}...)`;this._debug(t,"begin");try{const i=Date.now();return await(n=async n=>(n>0&&await async function(e){return await new Promise(t=>{setTimeout(()=>t(null),e)})}(200*Math.pow(2,n-1)),this._debug(t,"refreshing attempt",n),await ft(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:e},headers:this.headers,xform:pt})),r=(e,t)=>{const n=200*Math.pow(2,e);return t&&$e(t)&&Date.now()+n-i<ke},new Promise((e,t)=>{(async()=>{for(let i=0;i<1/0;i++)try{const t=await n(i);if(!r(i,null))return void e(t)}catch(e){if(!r(i,e))return void t(e)}})()}))}catch(e){if(this._debug(t,"error",e),Oe(e))return{data:{session:null,user:null},error:e};throw e}finally{this._debug(t,"end")}var n,r}_isValidSession(e){return"object"==typeof e&&null!==e&&"access_token"in e&&"refresh_token"in e&&"expires_at"in e}async _handleProviderSignIn(e,t){const n=await this._getUrlForProvider(`${this.url}/authorize`,e,{redirectTo:t.redirectTo,scopes:t.scopes,queryParams:t.queryParams});return this._debug("#_handleProviderSignIn()","provider",e,"options",t,"url",n),Ye()&&!t.skipBrowserRedirect&&window.location.assign(n),{data:{provider:e,url:n},error:null}}async _recoverAndRefresh(){var e;const t="#_recoverAndRefresh()";this._debug(t,"begin");try{const n=await tt(this.storage,this.storageKey);if(this._debug(t,"session from storage",n),!this._isValidSession(n))return this._debug(t,"session is not valid"),void(null!==n&&await this._removeSession());const r=1e3*(null!==(e=n.expires_at)&&void 0!==e?e:1/0)-Date.now()<9e4;if(this._debug(t,`session has${r?"":" not"} expired with margin of 90000s`),r){if(this.autoRefreshToken&&n.refresh_token){const{error:e}=await this._callRefreshToken(n.refresh_token);e&&(console.error(e),$e(e)||(this._debug(t,"refresh failed with a non-retryable error, removing the session",e),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",n)}catch(e){return this._debug(t,"error",e),void console.error(e)}finally{this._debug(t,"end")}}async _callRefreshToken(e){var t,n;if(!e)throw new xe;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const r=`#_callRefreshToken(${e.substring(0,5)}...)`;this._debug(r,"begin");try{this.refreshingDeferred=new rt;const{data:t,error:n}=await this._refreshAccessToken(e);if(n)throw n;if(!t.session)throw new xe;await this._saveSession(t.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",t.session);const r={session:t.session,error:null};return this.refreshingDeferred.resolve(r),r}catch(e){if(this._debug(r,"error",e),Oe(e)){const n={session:null,error:e};return $e(e)||await this._removeSession(),null===(t=this.refreshingDeferred)||void 0===t||t.resolve(n),n}throw null===(n=this.refreshingDeferred)||void 0===n||n.reject(e),e}finally{this.refreshingDeferred=null,this._debug(r,"end")}}async _notifyAllSubscribers(e,t,n=!0){const r=`#_notifyAllSubscribers(${e})`;this._debug(r,"begin",t,`broadcast = ${n}`);try{this.broadcastChannel&&n&&this.broadcastChannel.postMessage({event:e,session:t});const r=[],i=Array.from(this.stateChangeEmitters.values()).map(async n=>{try{await n.callback(e,t)}catch(e){r.push(e)}});if(await Promise.all(i),r.length>0){for(let e=0;e<r.length;e+=1)console.error(r[e]);throw r[0]}}finally{this._debug(r,"end")}}async _saveSession(e){this._debug("#_saveSession()",e),this.suppressGetSessionWarning=!0,await et(this.storage,this.storageKey,e)}async _removeSession(){this._debug("#_removeSession()"),await nt(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const e=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{e&&Ye()&&(null===window||void 0===window?void 0:window.removeEventListener)&&window.removeEventListener("visibilitychange",e)}catch(e){console.error("removing visibilitychange callback failed",e)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const e=setInterval(()=>this._autoRefreshTokenTick(),ke);this.autoRefreshTicker=e,e&&"object"==typeof e&&"function"==typeof e.unref?e.unref():"undefined"!=typeof Deno&&"function"==typeof Deno.unrefTimer&&Deno.unrefTimer(e),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const e=this.autoRefreshTicker;this.autoRefreshTicker=null,e&&clearInterval(e)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const e=Date.now();try{return await this._useSession(async t=>{const{data:{session:n}}=t;if(!n||!n.refresh_token||!n.expires_at)return void this._debug("#_autoRefreshTokenTick()","no session");const r=Math.floor((1e3*n.expires_at-e)/ke);this._debug("#_autoRefreshTokenTick()",`access token expires in ${r} ticks, a tick lasts 30000ms, refresh threshold is 3 ticks`),r<=3&&await this._callRefreshToken(n.refresh_token)})}catch(e){console.error("Auto refresh tick failed with error. This is likely a transient error.",e)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(e){if(!(e.isAcquireTimeout||e instanceof Tt))throw e;this._debug("auto refresh token tick lock not available")}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!Ye()||!(null===window||void 0===window?void 0:window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),null===window||void 0===window||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(e){console.error("_handleVisibilityChange",e)}}async _onVisibilityChanged(e){const t=`#_onVisibilityChanged(${e})`;this._debug(t,"visibilityState",document.visibilityState),"visible"===document.visibilityState?(this.autoRefreshToken&&this._startAutoRefresh(),e||(await this.initializePromise,await this._acquireLock(-1,async()=>{"visible"===document.visibilityState?await this._recoverAndRefresh():this._debug(t,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting")}))):"hidden"===document.visibilityState&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(e,t,n){const r=[`provider=${encodeURIComponent(t)}`];if((null==n?void 0:n.redirectTo)&&r.push(`redirect_to=${encodeURIComponent(n.redirectTo)}`),(null==n?void 0:n.scopes)&&r.push(`scopes=${encodeURIComponent(n.scopes)}`),"pkce"===this.flowType){const[e,t]=await ot(this.storage,this.storageKey),n=new URLSearchParams({code_challenge:`${encodeURIComponent(e)}`,code_challenge_method:`${encodeURIComponent(t)}`});r.push(n.toString())}if(null==n?void 0:n.queryParams){const e=new URLSearchParams(n.queryParams);r.push(e.toString())}return(null==n?void 0:n.skipBrowserRedirect)&&r.push(`skip_http_redirect=${n.skipBrowserRedirect}`),`${e}?${r.join("&")}`}async _unenroll(e){try{return await this._useSession(async t=>{var n;const{data:r,error:i}=t;return i?{data:null,error:i}:await ft(this.fetch,"DELETE",`${this.url}/factors/${e.factorId}`,{headers:this.headers,jwt:null===(n=null==r?void 0:r.session)||void 0===n?void 0:n.access_token})})}catch(e){if(Oe(e))return{data:null,error:e};throw e}}async _enroll(e){try{return await this._useSession(async t=>{var n,r;const{data:i,error:a}=t;if(a)return{data:null,error:a};const o=Object.assign({friendly_name:e.friendlyName,factor_type:e.factorType},"phone"===e.factorType?{phone:e.phone}:{issuer:e.issuer}),{data:s,error:c}=await ft(this.fetch,"POST",`${this.url}/factors`,{body:o,headers:this.headers,jwt:null===(n=null==i?void 0:i.session)||void 0===n?void 0:n.access_token});return c?{data:null,error:c}:("totp"===e.factorType&&(null===(r=null==s?void 0:s.totp)||void 0===r?void 0:r.qr_code)&&(s.totp.qr_code=`data:image/svg+xml;utf-8,${s.totp.qr_code}`),{data:s,error:null})})}catch(e){if(Oe(e))return{data:null,error:e};throw e}}async _verify(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var n;const{data:r,error:i}=t;if(i)return{data:null,error:i};const{data:a,error:o}=await ft(this.fetch,"POST",`${this.url}/factors/${e.factorId}/verify`,{body:{code:e.code,challenge_id:e.challengeId},headers:this.headers,jwt:null===(n=null==r?void 0:r.session)||void 0===n?void 0:n.access_token});return o?{data:null,error:o}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+a.expires_in},a)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",a),{data:a,error:o})})}catch(e){if(Oe(e))return{data:null,error:e};throw e}})}async _challenge(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var n;const{data:r,error:i}=t;return i?{data:null,error:i}:await ft(this.fetch,"POST",`${this.url}/factors/${e.factorId}/challenge`,{body:{channel:e.channel},headers:this.headers,jwt:null===(n=null==r?void 0:r.session)||void 0===n?void 0:n.access_token})})}catch(e){if(Oe(e))return{data:null,error:e};throw e}})}async _challengeAndVerify(e){const{data:t,error:n}=await this._challenge({factorId:e.factorId});return n?{data:null,error:n}:await this._verify({factorId:e.factorId,challengeId:t.id,code:e.code})}async _listFactors(){const{data:{user:e},error:t}=await this.getUser();if(t)return{data:null,error:t};const n=(null==e?void 0:e.factors)||[],r=n.filter(e=>"totp"===e.factor_type&&"verified"===e.status),i=n.filter(e=>"phone"===e.factor_type&&"verified"===e.status);return{data:{all:n,totp:r,phone:i},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async e=>{var t,n;const{data:{session:r},error:i}=e;if(i)return{data:null,error:i};if(!r)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:a}=it(r.access_token);let o=null;a.aal&&(o=a.aal);let s=o;return(null!==(n=null===(t=r.user.factors)||void 0===t?void 0:t.filter(e=>"verified"===e.status))&&void 0!==n?n:[]).length>0&&(s="aal2"),{data:{currentLevel:o,nextLevel:s,currentAuthenticationMethods:a.amr||[]},error:null}}))}async fetchJwk(e,t={keys:[]}){let n=t.keys.find(t=>t.kid===e);if(n)return n;if(n=this.jwks.keys.find(t=>t.kid===e),n&&this.jwks_cached_at+6e5>Date.now())return n;const{data:r,error:i}=await ft(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(i)throw i;if(!r.keys||0===r.keys.length)throw new Be("JWKS is empty");if(this.jwks=r,this.jwks_cached_at=Date.now(),n=r.keys.find(t=>t.kid===e),!n)throw new Be("No matching signing key found in JWKS");return n}async getClaims(e,t={keys:[]}){try{let n=e;if(!n){const{data:e,error:t}=await this.getSession();if(t||!e.session)return{data:null,error:t};n=e.session.access_token}const{header:r,payload:i,signature:a,raw:{header:o,payload:s}}=it(n);if(function(e){if(!e)throw new Error("Missing exp claim");if(e<=Math.floor(Date.now()/1e3))throw new Error("JWT has expired")}(i.exp),!r.kid||"HS256"===r.alg||!("crypto"in globalThis)||!("subtle"in globalThis.crypto)){const{error:e}=await this.getUser(n);if(e)throw e;return{data:{claims:i,header:r,signature:a},error:null}}const c=function(e){switch(e){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}(r.alg),u=await this.fetchJwk(r.kid,t),l=await crypto.subtle.importKey("jwk",u,c,!0,["verify"]);if(!await crypto.subtle.verify(c,l,a,function(e){const t=[];return function(e,t){for(let n=0;n<e.length;n+=1){let r=e.charCodeAt(n);if(r>55295&&r<=56319){const t=1024*(r-55296)&65535;r=65536+(e.charCodeAt(n+1)-56320&65535|t),n+=1}He(r,t)}}(e,e=>t.push(e)),new Uint8Array(t)}(`${o}.${s}`)))throw new Be("Invalid JWT signature");return{data:{claims:i,header:r,signature:a},error:null}}catch(e){if(Oe(e))return{data:null,error:e};throw e}}}Et.nextInstanceID=0;const Ct=Et;class xt extends Ct{constructor(e){super(e)}}class Dt{constructor(e,t,n){var r,i,a;if(this.supabaseUrl=e,this.supabaseKey=t,!e)throw new Error("supabaseUrl is required.");if(!t)throw new Error("supabaseKey is required.");const o=(s=e).endsWith("/")?s:s+"/";var s;const c=new URL(o);this.realtimeUrl=new URL("realtime/v1",c),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",c),this.storageUrl=new URL("storage/v1",c),this.functionsUrl=new URL("functions/v1",c);const u=`sb-${c.hostname.split(".")[0]}-auth-token`,h=function(e,t){var n,r;const{db:i,auth:a,realtime:o,global:s}=e,{db:c,auth:u,realtime:l,global:h}=t,d={db:Object.assign(Object.assign({},c),i),auth:Object.assign(Object.assign({},u),a),realtime:Object.assign(Object.assign({},l),o),global:Object.assign(Object.assign(Object.assign({},h),s),{headers:Object.assign(Object.assign({},null!==(n=null==h?void 0:h.headers)&&void 0!==n?n:{}),null!==(r=null==s?void 0:s.headers)&&void 0!==r?r:{})}),accessToken:()=>{return e=this,t=void 0,r=function*(){return""},new((n=void 0)||(n=Promise))(function(i,a){function o(e){try{c(r.next(e))}catch(e){a(e)}}function s(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,s)}c((r=r.apply(e,t||[])).next())});var e,t,n,r}};return e.accessToken?d.accessToken=e.accessToken:delete d.accessToken,d}(null!=n?n:{},{db:pe,realtime:me,auth:Object.assign(Object.assign({},ge),{storageKey:u}),global:fe});this.storageKey=null!==(r=h.auth.storageKey)&&void 0!==r?r:"",this.headers=null!==(i=h.global.headers)&&void 0!==i?i:{},h.accessToken?(this.accessToken=h.accessToken,this.auth=new Proxy({},{get:(e,t)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(t)} is not possible`)}})):this.auth=this._initSupabaseAuthClient(null!==(a=h.auth)&&void 0!==a?a:{},this.headers,h.global.fetch),this.fetch=be(t,this._getAccessToken.bind(this),h.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},h.realtime)),this.rest=new l(new URL("rest/v1",c).href,{headers:this.headers,schema:h.db.schema,fetch:this.fetch}),h.accessToken||this._listenForAuthEvents()}get functions(){return new c(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}get storage(){return new he(this.storageUrl.href,this.headers,this.fetch)}from(e){return this.rest.from(e)}schema(e){return this.rest.schema(e)}rpc(e,t={},n={}){return this.rest.rpc(e,t,n)}channel(e,t={config:{}}){return this.realtime.channel(e,t)}getChannels(){return this.realtime.getChannels()}removeChannel(e){return this.realtime.removeChannel(e)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var e,t,n,r,i,a;return n=this,r=void 0,a=function*(){if(this.accessToken)return yield this.accessToken();const{data:n}=yield this.auth.getSession();return null!==(t=null===(e=n.session)||void 0===e?void 0:e.access_token)&&void 0!==t?t:null},new((i=void 0)||(i=Promise))(function(e,t){function o(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i(function(e){e(n)})).then(o,s)}c((a=a.apply(n,r||[])).next())})}_initSupabaseAuthClient({autoRefreshToken:e,persistSession:t,detectSessionInUrl:n,storage:r,storageKey:i,flowType:a,lock:o,debug:s},c,u){const l={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new xt({url:this.authUrl.href,headers:Object.assign(Object.assign({},l),c),storageKey:i,autoRefreshToken:e,persistSession:t,detectSessionInUrl:n,storage:r,flowType:a,lock:o,debug:s,fetch:u,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(e){return new G(this.realtimeUrl.href,Object.assign(Object.assign({},e),{params:Object.assign({apikey:this.supabaseKey},null==e?void 0:e.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((e,t)=>{this._handleTokenChanged(e,"CLIENT",null==t?void 0:t.access_token)})}_handleTokenChanged(e,t,n){"TOKEN_REFRESHED"!==e&&"SIGNED_IN"!==e||this.changedAccessToken===n?"SIGNED_OUT"===e&&(this.realtime.setAuth(),"STORAGE"==t&&this.auth.signOut(),this.changedAccessToken=void 0):this.changedAccessToken=n}}function Rt(e){return Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rt(e)}function Lt(e,t,n){return(t=function(e){var t=function(e){if("object"!=Rt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Rt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Rt(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ut(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return Nt(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(Nt(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Nt(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,Nt(h,"constructor",u),Nt(u,"constructor",c),c.displayName="GeneratorFunction",Nt(u,i,"GeneratorFunction"),Nt(h),Nt(h,i,"Generator"),Nt(h,r,function(){return this}),Nt(h,"toString",function(){return"[object Generator]"}),(Ut=function(){return{w:a,m:d}})()}function Nt(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}Nt=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Nt(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},Nt(e,t,n,r)}function $t(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function Mt(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){$t(a,r,i,o,s,"next",e)}function s(e){$t(a,r,i,o,s,"throw",e)}o(void 0)})}}var Bt=new Dt("https://tpjnyiyvpyzzbzhajbjh.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRwam55aXl2cHl6emJ6aGFqYmpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NDA1NTQsImV4cCI6MjA2NzIxNjU1NH0.cflFdHytlTUA_H_AP7E3Kry9-S-xw45pIRoJQtfk4AE",{auth:{storage:{getItem:function(e){return Mt(Ut().m(function t(){var n;return Ut().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.get(e);case 1:return n=t.v,t.a(2,n[e]||null)}},t)}))()},setItem:function(e,t){return Mt(Ut().m(function n(){return Ut().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,chrome.storage.local.set(Lt({},e,t));case 1:return n.a(2)}},n)}))()},removeItem:function(e){return Mt(Ut().m(function t(){return Ut().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.remove(e);case 1:return t.a(2)}},t)}))()}},autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0}});function Ft(e){return Ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ft(e)}function zt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function qt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zt(Object(n),!0).forEach(function(t){Gt(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zt(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Gt(e,t,n){return(t=Zt(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Kt(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return Wt(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(Wt(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Wt(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,Wt(h,"constructor",u),Wt(u,"constructor",c),c.displayName="GeneratorFunction",Wt(u,i,"GeneratorFunction"),Wt(h),Wt(h,i,"Generator"),Wt(h,r,function(){return this}),Wt(h,"toString",function(){return"[object Generator]"}),(Kt=function(){return{w:a,m:d}})()}function Wt(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}Wt=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Wt(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},Wt(e,t,n,r)}function Ht(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(e,t)||Jt(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Jt(e,t){if(e){if("string"==typeof e)return Vt(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Vt(e,t):void 0}}function Vt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Yt(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function Qt(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){Yt(a,r,i,o,s,"next",e)}function s(e){Yt(a,r,i,o,s,"throw",e)}o(void 0)})}}function Xt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Zt(r.key),r)}}function Zt(e){var t=function(e){if("object"!=Ft(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Ft(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Ft(t)?t:t+""}var en=new(function(){return e=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)},t=[{key:"getData",value:($=Qt(Kt().m(function e(){var t,n,r,i,a,o,s,c,u,l,h,d,f,p,g=this;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(t=e.v,n=t.data,!t.error&&n.session){e.n=2;break}return e.a(2,this.getDefaultData());case 2:return r=n.session.user,console.log("Fetching data for user:",r.id),e.n=3,Promise.all([Bt.from("links").select("*").eq("user_id",r.id),Bt.from("collections").select("*").eq("user_id",r.id)]);case 3:return i=e.v,a=Ht(i,2),o=a[0],s=a[1],o.error&&console.error("Error fetching links:",o.error),s.error&&console.error("Error fetching collections:",s.error),c=(o.data||[]).map(function(e){return console.log("Storage: getData highlights for link",e.id,e.highlights),{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:g.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain,contentType:e.content_type||"webpage",mediaAttachments:g.parseMediaAttachments(e.media_attachments),extractedText:e.extracted_text,videoTimestamp:e.video_timestamp,author:e.author,publishDate:e.publish_date?new Date(e.publish_date):void 0,sourceMetadata:e.source_metadata?JSON.parse(e.source_metadata):void 0}}),u=(s.data||[]).map(function(e){return{id:e.id,name:e.name,description:e.description,color:e.color,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}}),h=c,d=u,e.n=4,this.getSmartCollections();case 4:return f=e.v,p=this.getDefaultCategories(),l={links:h,collections:d,smartCollections:f,categories:p,settings:{defaultCategory:"general",autoSummarize:!0,enableSmartCollections:!0}},console.log("Data fetched from Supabase:",l),e.a(2,l)}},e,this)})),function(){return $.apply(this,arguments)})},{key:"addLink",value:(N=Qt(Kt().m(function e(t){var n,r,i,a,o,s,c,u;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(r=e.v,i=r.data,a=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,{success:!1,error:"User not logged in."});case 2:return o={user_id:a.id,collection_id:t.collectionId||null,url:t.url,title:t.title,favicon:t.favicon,domain:t.domain,user_note:t.userNote,ai_summary:t.aiSummary,category:t.category,is_in_inbox:t.isInInbox||!1,highlights:t.highlights?JSON.stringify(t.highlights):null,content_type:t.contentType||"webpage",media_attachments:t.mediaAttachments?JSON.stringify(t.mediaAttachments):null,extracted_text:t.extractedText,video_timestamp:t.videoTimestamp,author:t.author,publish_date:t.publishDate,source_metadata:t.sourceMetadata?JSON.stringify(t.sourceMetadata):null},console.log("Storage: addLink dbLink.highlights:",o.highlights),e.n=3,Bt.from("links").insert(o).select("id").single();case 3:if(s=e.v,c=s.data,!(u=s.error)){e.n=4;break}return console.error("Supabase addLink error:",u),e.a(2,{success:!1,error:u.message||"Database error occurred."});case 4:return e.a(2,{success:!0,linkId:c.id})}},e)})),function(e){return N.apply(this,arguments)})},{key:"updateLink",value:(U=Qt(Kt().m(function e(t,n){var r,i,a;return Kt().w(function(e){for(;;)switch(e.n){case 0:return r=qt(qt({},n),{},{updated_at:new Date}),void 0!==n.highlights&&(r.highlights=n.highlights?JSON.stringify(n.highlights):null),delete r.collectionId,delete r.userNote,delete r.aiSummary,delete r.isInInbox,delete r.createdAt,delete r.updatedAt,void 0!==n.collectionId&&(r.collection_id=n.collectionId),void 0!==n.userNote&&(r.user_note=n.userNote),void 0!==n.aiSummary&&(r.ai_summary=n.aiSummary),void 0!==n.isInInbox&&(r.is_in_inbox=n.isInInbox),console.log("Storage: updateLink dbUpdates.highlights:",r.highlights),e.n=1,Bt.from("links").update(r).eq("id",t);case 1:if(i=e.v,!(a=i.error)){e.n=2;break}throw a;case 2:return e.a(2)}},e)})),function(e,t){return U.apply(this,arguments)})},{key:"deleteLink",value:(L=Qt(Kt().m(function e(t){var n,r;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("links").delete().eq("id",t);case 1:if(n=e.v,!(r=n.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return L.apply(this,arguments)})},{key:"addCollection",value:(R=Qt(Kt().m(function e(t){var n,r,i,a,o,s,c;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(r=e.v,i=r.data,a=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}throw new Error("User not logged in.");case 2:return o={user_id:a.id,name:t.name,description:t.description,color:t.color},e.n=3,Bt.from("collections").insert(o);case 3:if(s=e.v,!(c=s.error)){e.n=4;break}throw c;case 4:return e.a(2)}},e)})),function(e){return R.apply(this,arguments)})},{key:"updateCollection",value:(D=Qt(Kt().m(function e(t,n){var r,i;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("collections").update(qt(qt({},n),{},{updatedAt:new Date})).eq("id",t);case 1:if(r=e.v,!(i=r.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return D.apply(this,arguments)})},{key:"deleteCollection",value:(x=Qt(Kt().m(function e(t){var n,r;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("collections").delete().eq("id",t);case 1:if(n=e.v,!(r=n.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return x.apply(this,arguments)})},{key:"searchLinks",value:(C=Qt(Kt().m(function e(t){var n,r,i,a,o,s,c,u,l=this;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(r=e.v,i=r.data,a=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:if(t.trim()){e.n=3;break}return e.a(2,[]);case 3:return e.p=3,e.n=4,Bt.rpc("search_user_links",{search_query:t.trim(),user_uuid:a.id,result_limit:50});case 4:if(o=e.v,s=o.data,!(c=o.error)){e.n=5;break}return console.error("Search error:",c),e.a(2,[]);case 5:return e.a(2,(s||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:l.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain,searchRank:e.rank,searchHeadline:e.headline}}));case 6:return e.p=6,u=e.v,console.error("Search failed:",u),e.a(2,[])}},e,null,[[3,6]])})),function(e){return C.apply(this,arguments)})},{key:"getUserTags",value:(E=Qt(Kt().m(function e(){var t,n,r,i,a,o,s,c;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(n=e.v,r=n.data,i=null===(t=r.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,Bt.rpc("get_user_tags_with_counts",{user_uuid:i.id});case 3:if(a=e.v,o=a.data,!(s=a.error)){e.n=4;break}return console.error("Error fetching user tags:",s),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,name:e.name,usageCount:e.usage_count||0}}));case 5:return e.p=5,c=e.v,console.error("Failed to get user tags:",c),e.a(2,[])}},e,null,[[2,5]])})),function(){return E.apply(this,arguments)})},{key:"getLinkTags",value:(P=Qt(Kt().m(function e(t){var n,r,i,a;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Bt.rpc("get_link_tags",{link_uuid:t});case 1:if(n=e.v,r=n.data,!(i=n.error)){e.n=2;break}return console.error("Error fetching link tags:",i),e.a(2,[]);case 2:return e.a(2,r||[]);case 3:return e.p=3,a=e.v,console.error("Failed to get link tags:",a),e.a(2,[])}},e,null,[[0,3]])})),function(e){return P.apply(this,arguments)})},{key:"addTagsToLink",value:(O=Qt(Kt().m(function e(t,n){var r,i,a,o,s,c,u;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(i=e.v,a=i.data,o=null===(r=a.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,error:"User not logged in."});case 2:return e.p=2,e.n=3,Bt.rpc("add_tags_to_link",{link_uuid:t,tag_names:n,user_uuid:o.id});case 3:if(s=e.v,!(c=s.error)){e.n=4;break}return console.error("Error adding tags to link:",c),e.a(2,{success:!1,error:c.message||"Failed to add tags."});case 4:return e.a(2,{success:!0});case 5:return e.p=5,u=e.v,console.error("Failed to add tags to link:",u),e.a(2,{success:!1,error:u.message})}},e,null,[[2,5]])})),function(e,t){return O.apply(this,arguments)})},{key:"getLinksByTag",value:(j=Qt(Kt().m(function e(t){var n,r,i,a,o,s,c,u,l=this;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(r=e.v,i=r.data,a=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,Bt.rpc("get_links_by_tag",{user_uuid:a.id,tag_name:t});case 3:if(o=e.v,s=o.data,!(c=o.error)){e.n=4;break}return console.error("Error fetching links by tag:",c),e.a(2,[]);case 4:return e.a(2,(s||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:l.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}));case 5:return e.p=5,u=e.v,console.error("Failed to get links by tag:",u),e.a(2,[])}},e,null,[[2,5]])})),function(e){return j.apply(this,arguments)})},{key:"cleanupUnusedTags",value:(I=Qt(Kt().m(function e(){var t,n,r,i,a,o,s,c;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(n=e.v,r=n.data,i=null===(t=r.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,0);case 2:return e.p=2,e.n=3,Bt.rpc("cleanup_unused_tags",{user_uuid:i.id});case 3:if(a=e.v,o=a.data,!(s=a.error)){e.n=4;break}return console.error("Error cleaning up unused tags:",s),e.a(2,0);case 4:return e.a(2,o||0);case 5:return e.p=5,c=e.v,console.error("Failed to cleanup unused tags:",c),e.a(2,0)}},e,null,[[2,5]])})),function(){return I.apply(this,arguments)})},{key:"moveToInbox",value:(T=Qt(Kt().m(function e(t){var n,r;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("links").update({is_in_inbox:!0,collection_id:null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(n=e.v,!(r=n.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return T.apply(this,arguments)})},{key:"moveFromInbox",value:(A=Qt(Kt().m(function e(t,n){var r,i;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("links").update({is_in_inbox:!1,collection_id:n||null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(r=e.v,!(i=r.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return A.apply(this,arguments)})},{key:"getInboxLinks",value:(S=Qt(Kt().m(function e(){var t,n,r,i,a,o,s,c=this;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(n=e.v,r=n.data,i=null===(t=r.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,Bt.from("links").select("*").eq("user_id",i.id).eq("is_in_inbox",!0).order("created_at",{ascending:!1});case 3:if(a=e.v,o=a.data,!(s=a.error)){e.n=4;break}return console.error("Error fetching inbox links:",s),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:c.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}))}},e)})),function(){return S.apply(this,arguments)})},{key:"bulkMoveFromInbox",value:(_=Qt(Kt().m(function e(t,n){var r,i;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.from("links").update({is_in_inbox:!1,collection_id:n||null,updated_at:(new Date).toISOString()}).in("id",t);case 1:if(r=e.v,!(i=r.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return _.apply(this,arguments)})},{key:"toggleCollectionSharing",value:(k=Qt(Kt().m(function e(t,n){var r,i,a,o,s,c,u,l,h;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(i=e.v,a=i.data,o=null===(r=a.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,message:"User not logged in."});case 2:return e.p=2,e.n=3,Bt.rpc("toggle_collection_sharing",{collection_uuid:t,user_uuid:o.id,make_public:n});case 3:if(s=e.v,c=s.data,!(u=s.error)){e.n=4;break}return console.error("Error toggling collection sharing:",u),e.a(2,{success:!1,message:u.message||"Failed to update sharing settings."});case 4:return l=null==c?void 0:c[0],e.a(2,{success:(null==l?void 0:l.success)||!1,shareToken:null==l?void 0:l.share_token,message:(null==l?void 0:l.message)||"Sharing settings updated."});case 5:return e.p=5,h=e.v,console.error("Failed to toggle collection sharing:",h),e.a(2,{success:!1,message:h.message})}},e,null,[[2,5]])})),function(e,t){return k.apply(this,arguments)})},{key:"getCollectionSharingInfo",value:(w=Qt(Kt().m(function e(t){var n,r,i,a,o,s,c,u;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(r=e.v,i=r.data,a=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,null);case 2:return e.p=2,e.n=3,Bt.from("collections").select("is_public, share_token, view_count").eq("id",t).eq("user_id",a.id).single();case 3:if(o=e.v,s=o.data,!(c=o.error)){e.n=4;break}return console.error("Error fetching collection sharing info:",c),e.a(2,null);case 4:return e.a(2,{isPublic:s.is_public||!1,shareToken:s.share_token,viewCount:s.view_count||0});case 5:return e.p=5,u=e.v,console.error("Failed to get collection sharing info:",u),e.a(2,null)}},e,null,[[2,5]])})),function(e){return w.apply(this,arguments)})},{key:"getSmartCollections",value:(b=Qt(Kt().m(function e(){var t;return Kt().w(function(e){for(;;)if(0===e.n)return t=this.getDefaultSmartCollections(),e.a(2,t)},e,this)})),function(){return b.apply(this,arguments)})},{key:"generateAISmartCollections",value:(y=Qt(Kt().m(function e(t){var n,i,a;return Kt().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,!(t.length>5)){e.n=3;break}return e.n=1,Promise.resolve().then(r.bind(r,8508));case 1:return n=e.v,i=n.aiService,e.n=2,i.generateSmartCollectionSuggestions(t);case 2:return e.a(2,e.v);case 3:e.n=5;break;case 4:e.p=4,a=e.v,console.error("Failed to generate AI smart collection suggestions:",a);case 5:return e.a(2,[])}},e,null,[[0,4]])})),function(e){return y.apply(this,arguments)})},{key:"createSmartCollection",value:(v=Qt(Kt().m(function e(t){return Kt().w(function(e){for(;;)switch(e.n){case 0:console.log("Creating smart collection:",t);case 1:return e.a(2)}},e)})),function(e){return v.apply(this,arguments)})},{key:"updateSmartCollection",value:(m=Qt(Kt().m(function e(t,n){return Kt().w(function(e){for(;;)switch(e.n){case 0:console.log("Updating smart collection:",t,n);case 1:return e.a(2)}},e)})),function(e,t){return m.apply(this,arguments)})},{key:"deleteSmartCollection",value:(g=Qt(Kt().m(function e(t){return Kt().w(function(e){for(;;)switch(e.n){case 0:console.log("Deleting smart collection:",t);case 1:return e.a(2)}},e)})),function(e){return g.apply(this,arguments)})},{key:"getSmartCollectionLinks",value:(p=Qt(Kt().m(function e(t){var n,r,i;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,this.getSmartCollections();case 1:if(n=e.v,r=n.find(function(e){return e.id===t})){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,this.getData();case 3:return i=e.v.links,e.a(2,this.filterLinksForSmartCollection(i,r))}},e,this)})),function(e){return p.apply(this,arguments)})},{key:"filterLinksForSmartCollection",value:function(e,t){var n,r,i,a,o=this,s=function(e){return function(e){if(Array.isArray(e))return Vt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Jt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e);if(null!==(n=t.filters)&&void 0!==n&&n.dateRange){var c=t.filters.dateRange,u=c.start,l=c.end;s=s.filter(function(e){var t=e.createdAt;return!(u&&t<u||l&&t>l)})}switch(null!==(r=t.filters)&&void 0!==r&&null!==(r=r.categories)&&void 0!==r&&r.length&&(s=s.filter(function(e){return t.filters.categories.includes(e.category)})),null!==(i=t.filters)&&void 0!==i&&null!==(i=i.domains)&&void 0!==i&&i.length&&(s=s.filter(function(e){return t.filters.domains.some(function(t){return e.domain.includes(t)})})),null!==(a=t.filters)&&void 0!==a&&null!==(a=a.contentType)&&void 0!==a&&a.length&&(s=s.filter(function(e){var n=o.detectContentTypeFromDomain(e.domain);return t.filters.contentType.includes(n)})),t.id){case"recent-reads":return s.filter(function(e){return e.createdAt>=new Date(Date.now()-6048e5)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()}).slice(0,20);case"ai-related":return s.filter(function(e){return o.isAIRelated(e)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"unread":return s.filter(function(e){return!e.userNote||""===e.userNote.trim()}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"tutorials":return s.filter(function(e){return o.isTutorial(e)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"github-repos":return s.filter(function(e){return e.domain.includes("github.com")}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});default:return s}}},{key:"detectContentTypeFromDomain",value:function(e){return e.includes("youtube.com")||e.includes("vimeo.com")?"video":e.includes("github.com")?"tool":e.includes("docs.")||e.includes("documentation")?"documentation":e.includes("medium.com")||e.includes("blog")?"blog":e.includes("news")||e.includes("cnn.com")?"news":"article"}},{key:"isAIRelated",value:function(e){var t="".concat(e.title," ").concat(e.userNote," ").concat(e.aiSummary||"").toLowerCase();return["artificial intelligence","machine learning","deep learning","neural network","ai","ml","gpt","chatgpt","openai","tensorflow","pytorch","llm","natural language processing","nlp","computer vision","reinforcement learning"].some(function(e){return t.includes(e)})}},{key:"isTutorial",value:function(e){var t="".concat(e.title," ").concat(e.userNote).toLowerCase();return["tutorial","how to","guide","step by step","learn","course","introduction to","getting started","beginner","walkthrough"].some(function(e){return t.includes(e)})}},{key:"getDefaultSmartCollections",value:function(){var e=new Date;return[{id:"recent-reads",name:"📚 Recent Reads",description:"Links saved in the last 7 days",query:"created_at >= now() - interval '7 days'",isSystem:!0,autoUpdate:!0,icon:"📚",color:"#3b82f6",filters:{dateRange:{start:new Date(Date.now()-6048e5)}},createdAt:e,updatedAt:e},{id:"ai-related",name:"🤖 AI & Machine Learning",description:"Content related to artificial intelligence and machine learning",query:"title ILIKE '%ai%' OR title ILIKE '%machine learning%' OR title ILIKE '%neural%'",isSystem:!0,autoUpdate:!0,icon:"🤖",color:"#8b5cf6",createdAt:e,updatedAt:e},{id:"unread",name:"📖 To Read",description:"Links without notes (likely unread)",query:"user_note IS NULL OR user_note = ''",isSystem:!0,autoUpdate:!0,icon:"📖",color:"#f59e0b",createdAt:e,updatedAt:e},{id:"tutorials",name:"🎓 Tutorials & Guides",description:"Educational content and tutorials",query:"title ILIKE '%tutorial%' OR title ILIKE '%guide%' OR title ILIKE '%how to%'",isSystem:!0,autoUpdate:!0,icon:"🎓",color:"#10b981",createdAt:e,updatedAt:e},{id:"github-repos",name:"⭐ GitHub Repositories",description:"GitHub repositories and projects",query:"domain LIKE '%github.com%'",isSystem:!0,autoUpdate:!0,icon:"⭐",color:"#6b7280",filters:{domains:["github.com"]},createdAt:e,updatedAt:e}]}},{key:"getDefaultCategories",value:function(){return[{id:"general",name:"General",color:"#6b7280",isDefault:!0},{id:"work",name:"Work",color:"#3b82f6"},{id:"personal",name:"Personal",color:"#10b981"},{id:"learning",name:"Learning",color:"#f59e0b"}]}},{key:"getDefaultData",value:function(){return{links:[],collections:[],smartCollections:[],categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0,enableSmartCollections:!0}}}},{key:"getLinkByUrl",value:(f=Qt(Kt().m(function e(t){var n,r,i,a,o,s,c;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Bt.auth.getSession();case 1:if(r=e.v,i=r.data,a=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,null);case 2:return e.n=3,Bt.from("links").select("*").eq("user_id",a.id).eq("url",t).single();case 3:if(o=e.v,s=o.data,!(c=o.error)){e.n=5;break}if("PGRST116"!==c.code){e.n=4;break}return e.a(2,null);case 4:throw c;case 5:return e.a(2,{id:s.id,url:s.url,title:s.title,favicon:s.favicon,userNote:s.user_note||"",aiSummary:s.ai_summary,category:s.category,collectionId:s.collection_id,isInInbox:s.is_in_inbox||!1,highlights:this.parseHighlights(s.highlights),createdAt:new Date(s.created_at),updatedAt:new Date(s.updated_at),domain:s.domain,contentType:s.content_type||"webpage",mediaAttachments:this.parseMediaAttachments(s.media_attachments),extractedText:s.extracted_text,videoTimestamp:s.video_timestamp,author:s.author,publishDate:s.publish_date?new Date(s.publish_date):void 0,sourceMetadata:s.source_metadata?JSON.parse(s.source_metadata):void 0})}},e,this)})),function(e){return f.apply(this,arguments)})},{key:"parseHighlights",value:function(e){if(!e)return console.log("Storage: No highlights data found"),[];if("string"==typeof e)try{var t=JSON.parse(e),n=Array.isArray(t)?t:[];return console.log("Storage: Parsed highlights from JSON:",n.length,"highlights",n),n}catch(e){return console.warn("Failed to parse highlights JSON:",e),[]}return Array.isArray(e)?(console.log("Storage: Found highlights array:",e.length,"highlights",e),e):(console.log("Storage: Highlights data in unexpected format:",Ft(e),e),[])}},{key:"parseMediaAttachments",value:function(e){if(!e)return[];if("string"==typeof e)try{var t=JSON.parse(e);return Array.isArray(t)?t:[]}catch(e){return console.warn("Failed to parse media attachments JSON:",e),[]}return Array.isArray(e)?e:[]}},{key:"logActivity",value:(d=Qt(Kt().m(function e(t,n,r,i){var a,o,s,c;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivities();case 1:return a=e.v,o={id:Date.now().toString(),type:t,linkId:n,collectionId:r,metadata:i,createdAt:new Date},a.push(o),s=a.slice(-1e3),e.n=2,chrome.storage.local.set({nest_activities:s});case 2:return e.n=3,this.updateStreaks(t);case 3:console.log("Activity logged:",o),e.n=5;break;case 4:e.p=4,c=e.v,console.error("Failed to log activity:",c);case 5:return e.a(2)}},e,this,[[0,4]])})),function(e,t,n,r){return d.apply(this,arguments)})},{key:"getActivities",value:(h=Qt(Kt().m(function e(){var t,n,r,i,a=arguments;return Kt().w(function(e){for(;;)switch(e.n){case 0:return t=a.length>0&&void 0!==a[0]?a[0]:100,e.p=1,e.n=2,chrome.storage.local.get("nest_activities");case 2:return n=e.v,r=n.nest_activities||[],e.a(2,r.slice(-t).reverse());case 3:return e.p=3,i=e.v,console.error("Failed to get activities:",i),e.a(2,[])}},e,null,[[1,3]])})),function(){return h.apply(this,arguments)})},{key:"getActivityStats",value:(l=Qt(Kt().m(function e(){var t,n,r,i,a,o;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivities(1e3);case 1:return r=e.v,e.n=2,this.getStreaks();case 2:return i=e.v,a={totalSaves:r.filter(function(e){return"save"===e.type}).length,totalReads:r.filter(function(e){return"read"===e.type}).length,totalHighlights:r.filter(function(e){return"highlight"===e.type}).length,totalOrganizations:r.filter(function(e){return"organize"===e.type}).length,totalSearches:r.filter(function(e){return"search"===e.type}).length,activeDays:this.getUniqueDays(r).length,currentStreak:(null===(t=i.find(function(e){return"daily_save"===e.type}))||void 0===t?void 0:t.currentCount)||0,bestStreak:(null===(n=i.find(function(e){return"daily_save"===e.type}))||void 0===n?void 0:n.bestCount)||0,thisWeekActivity:this.getThisWeekActivity(r),lastActiveDate:r.length>0?new Date(r[0].createdAt):void 0},e.a(2,a);case 3:return e.p=3,o=e.v,console.error("Failed to get activity stats:",o),e.a(2,{totalSaves:0,totalReads:0,totalHighlights:0,totalOrganizations:0,totalSearches:0,activeDays:0,currentStreak:0,bestStreak:0,thisWeekActivity:0})}},e,this,[[0,3]])})),function(){return l.apply(this,arguments)})},{key:"getStreaks",value:(u=Qt(Kt().m(function e(){var t,n;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_streaks");case 1:return t=e.v,e.a(2,t.nest_streaks||[]);case 2:return e.p=2,n=e.v,console.error("Failed to get streaks:",n),e.a(2,[])}},e,null,[[0,2]])})),function(){return u.apply(this,arguments)})},{key:"updateStreaks",value:(c=Qt(Kt().m(function e(t){var n,r,i,a,o,s,c,u,l;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getStreaks();case 1:return n=e.v,r=(new Date).toDateString(),"save"===t&&((i=n.find(function(e){return"daily_save"===e.type}))||(i={id:"daily_save",type:"daily_save",currentCount:0,bestCount:0,lastActivityAt:new Date,createdAt:new Date},n.push(i)),a=new Date(i.lastActivityAt).toDateString(),o=new Date(Date.now()-864e5).toDateString(),a===r||(a===o?(i.currentCount++,i.lastActivityAt=new Date):(i.currentCount=1,i.lastActivityAt=new Date)),i.currentCount>i.bestCount&&(i.bestCount=i.currentCount)),"organize"===t&&((s=n.find(function(e){return"weekly_organize"===e.type}))||(s={id:"weekly_organize",type:"weekly_organize",currentCount:0,bestCount:0,lastActivityAt:new Date,createdAt:new Date},n.push(s)),c=this.getWeekNumber(new Date),u=this.getWeekNumber(new Date(s.lastActivityAt)),c===u||(c===u+1?(s.currentCount++,s.lastActivityAt=new Date):(s.currentCount=1,s.lastActivityAt=new Date)),s.currentCount>s.bestCount&&(s.bestCount=s.currentCount)),e.n=2,chrome.storage.local.set({nest_streaks:n});case 2:e.n=4;break;case 3:e.p=3,l=e.v,console.error("Failed to update streaks:",l);case 4:return e.a(2)}},e,this,[[0,3]])})),function(e){return c.apply(this,arguments)})},{key:"getUniqueDays",value:function(e){var t=new Set;return e.forEach(function(e){var n=new Date(e.createdAt).toDateString();t.add(n)}),Array.from(t)}},{key:"getThisWeekActivity",value:function(e){var t=new Date(Date.now()-6048e5);return e.filter(function(e){return new Date(e.createdAt)>=t}).length}},{key:"getWeekNumber",value:function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)}},{key:"shouldShowNudge",value:(s=Qt(Kt().m(function e(){var t,n,r,i,a,o;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivityStats();case 1:return t=e.v,e.n=2,this.getActivities(50);case 2:if(n=e.v,r=(new Date).toDateString(),0!==n.filter(function(e){return new Date(e.createdAt).toDateString()===r&&"save"===e.type}).length){e.n=5;break}if(!(t.currentStreak>0)){e.n=3;break}return e.a(2,{show:!0,type:"streak_reminder",message:"You have a ".concat(t.currentStreak,"-day saving streak! Don't break it - save something today.")});case 3:if(!t.lastActiveDate){e.n=4;break}if(!((i=Math.floor((Date.now()-t.lastActiveDate.getTime())/864e5))>=3)){e.n=4;break}return e.a(2,{show:!0,type:"inactive_reminder",message:"Welcome back! You haven't saved anything in ".concat(i," days. Found something interesting?")});case 4:if(!((a=(new Date).getHours())>=10&&a<=20)){e.n=5;break}return e.a(2,{show:!0,type:"daily_reminder",message:"Discover something new today? Save it to Nest!"});case 5:return e.a(2,{show:!1});case 6:return e.p=6,o=e.v,console.error("Failed to check nudge status:",o),e.a(2,{show:!1})}},e,this,[[0,6]])})),function(){return s.apply(this,arguments)})}],n=[{key:"getPublicCollection",value:(o=Qt(Kt().m(function e(t){var n,r,i,a,o;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Bt.rpc("get_public_collection",{token:t});case 1:if(n=e.v,r=n.data,!(i=n.error)){e.n=2;break}return console.error("Error fetching public collection:",i),e.a(2,null);case 2:if(a=null==r?void 0:r[0]){e.n=3;break}return e.a(2,null);case 3:return e.a(2,{id:a.id,name:a.name,description:a.description,viewCount:a.view_count||0,createdAt:new Date(a.created_at),ownerEmail:a.owner_email});case 4:return e.p=4,o=e.v,console.error("Failed to get public collection:",o),e.a(2,null)}},e,null,[[0,4]])})),function(e){return o.apply(this,arguments)})},{key:"getPublicCollectionLinks",value:(a=Qt(Kt().m(function e(t){var n,r,i,a;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Bt.rpc("get_public_collection_links",{token:t});case 1:if(n=e.v,r=n.data,!(i=n.error)){e.n=2;break}return console.error("Error fetching public collection links:",i),e.a(2,[]);case 2:return e.a(2,(r||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,domain:e.domain,userNote:e.user_note,aiSummary:e.ai_summary,category:e.category,createdAt:new Date(e.created_at),tags:e.tag_names||[]}}));case 3:return e.p=3,a=e.v,console.error("Failed to get public collection links:",a),e.a(2,[])}},e,null,[[0,3]])})),function(e){return a.apply(this,arguments)})},{key:"incrementViewCount",value:(i=Qt(Kt().m(function e(t){var n,r,i;return Kt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Bt.rpc("increment_collection_views",{token:t});case 1:n=e.v,(r=n.error)&&console.error("Error incrementing view count:",r),e.n=3;break;case 2:e.p=2,i=e.v,console.error("Failed to increment view count:",i);case 3:return e.a(2)}},e,null,[[0,2]])})),function(e){return i.apply(this,arguments)})}],t&&Xt(e.prototype,t),n&&Xt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,n,i,a,o,s,c,u,l,h,d,f,p,g,m,v,y,b,w,k,_,S,A,T,I,j,O,P,E,C,x,D,R,L,U,N,$}()),tn=r(8508);let nn,rn;const an=new WeakMap,on=new WeakMap,sn=new WeakMap,cn=new WeakMap,un=new WeakMap;let ln={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return on.get(e);if("objectStoreNames"===t)return e.objectStoreNames||sn.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return dn(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function hn(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(rn||(rn=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(fn(this),e),dn(an.get(this))}:function(...e){return dn(t.apply(fn(this),e))}:function(e,...n){const r=t.call(fn(this),e,...n);return sn.set(r,e.sort?e.sort():[e]),dn(r)}:(e instanceof IDBTransaction&&function(e){if(on.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",a),e.removeEventListener("abort",a)},i=()=>{t(),r()},a=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",i),e.addEventListener("error",a),e.addEventListener("abort",a)});on.set(e,t)}(e),n=e,(nn||(nn=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some(e=>n instanceof e)?new Proxy(e,ln):e);var t,n}function dn(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",i),e.removeEventListener("error",a)},i=()=>{t(dn(e.result)),r()},a=()=>{n(e.error),r()};e.addEventListener("success",i),e.addEventListener("error",a)});return t.then(t=>{t instanceof IDBCursor&&an.set(t,e)}).catch(()=>{}),un.set(t,e),t}(e);if(cn.has(e))return cn.get(e);const t=hn(e);return t!==e&&(cn.set(e,t),un.set(t,e)),t}const fn=e=>un.get(e);function pn(e,t,{blocked:n,upgrade:r,blocking:i,terminated:a}={}){const o=indexedDB.open(e,t),s=dn(o);return r&&o.addEventListener("upgradeneeded",e=>{r(dn(o.result),e.oldVersion,e.newVersion,dn(o.transaction),e)}),n&&o.addEventListener("blocked",e=>n(e.oldVersion,e.newVersion,e)),s.then(e=>{a&&e.addEventListener("close",()=>a()),i&&e.addEventListener("versionchange",e=>i(e.oldVersion,e.newVersion,e))}).catch(()=>{}),s}const gn=["get","getKey","getAll","getAllKeys","count"],mn=["put","add","delete","clear"],vn=new Map;function yn(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(vn.get(t))return vn.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,i=mn.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!i&&!gn.includes(n))return;const a=async function(e,...t){const a=this.transaction(e,i?"readwrite":"readonly");let o=a.store;return r&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),i&&a.done]))[0]};return vn.set(t,a),a}function bn(e){return bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bn(e)}function wn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(e,t)||Sn(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kn(e){return function(e){if(Array.isArray(e))return An(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Sn(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _n(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=Sn(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function Sn(e,t){if(e){if("string"==typeof e)return An(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?An(e,t):void 0}}function An(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Tn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function In(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Tn(Object(n),!0).forEach(function(t){xn(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Tn(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function jn(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return On(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(On(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,On(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,On(h,"constructor",u),On(u,"constructor",c),c.displayName="GeneratorFunction",On(u,i,"GeneratorFunction"),On(h),On(h,i,"Generator"),On(h,r,function(){return this}),On(h,"toString",function(){return"[object Generator]"}),(jn=function(){return{w:a,m:d}})()}function On(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}On=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){On(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},On(e,t,n,r)}function Pn(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function En(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){Pn(a,r,i,o,s,"next",e)}function s(e){Pn(a,r,i,o,s,"throw",e)}o(void 0)})}}function Cn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Dn(r.key),r)}}function xn(e,t,n){return(t=Dn(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Dn(e){var t=function(e){if("object"!=bn(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=bn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==bn(t)?t:t+""}var Rn;Rn=ln,ln={...Rn,get:(e,t,n)=>yn(e,t)||Rn.get(e,t,n),has:(e,t)=>!!yn(e,t)||Rn.has(e,t)};var Ln=new(function(){return e=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),xn(this,"db",null),xn(this,"apiKey",""),xn(this,"CHUNK_SIZE",1e3),xn(this,"CHUNK_OVERLAP",200),xn(this,"EMBEDDING_DIMENSION",1536),this.initializeDB(),this.loadApiKey()},t=[{key:"initializeDB",value:(f=En(jn().m(function e(){var t;return jn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,pn("nest-embeddings",1,{upgrade:function(e){if(!e.objectStoreNames.contains("chunks")){var t=e.createObjectStore("chunks",{keyPath:"id"});t.createIndex("linkId","linkId",{unique:!1}),t.createIndex("createdAt","createdAt",{unique:!1})}e.objectStoreNames.contains("metadata")||e.createObjectStore("metadata",{keyPath:"linkId"}).createIndex("lastUpdated","lastUpdated",{unique:!1})}});case 1:this.db=e.v,console.log("EmbeddingsService: IndexedDB initialized"),e.n=3;break;case 2:e.p=2,t=e.v,console.error("EmbeddingsService: Failed to initialize IndexedDB:",t);case 3:return e.a(2)}},e,this,[[0,2]])})),function(){return f.apply(this,arguments)})},{key:"loadApiKey",value:(d=En(jn().m(function e(){var t,n,r;return jn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_settings");case 1:n=e.v,this.apiKey=(null===(t=n.nest_settings)||void 0===t?void 0:t.openaiApiKey)||"",e.n=3;break;case 2:e.p=2,r=e.v,console.error("EmbeddingsService: Failed to load API key:",r);case 3:return e.a(2)}},e,this,[[0,2]])})),function(){return d.apply(this,arguments)})},{key:"updateApiKey",value:function(e){this.apiKey=e}},{key:"generateEmbeddings",value:(h=En(jn().m(function e(t){var n,r,i,a,o,s,c;return jn().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return console.warn("EmbeddingsService: No API key available for embeddings generation"),e.a(2);case 1:if(e.p=1,console.log("EmbeddingsService: Generating embeddings for link ".concat(t.id)),(n=this.combineTextContent(t)).trim()){e.n=2;break}return console.log("EmbeddingsService: No text content found for link ".concat(t.id)),e.a(2);case 2:r=this.splitIntoChunks(n,t.id),i=[],a=0;case 3:if(!(a<r.length)){e.n=9;break}return e.p=4,e.n=5,this.generateEmbedding(r[a].text);case 5:if((o=e.v).length!==this.EMBEDDING_DIMENSION){e.n=6;break}return i.push(In(In({},r[a]),{},{embedding:o,createdAt:new Date})),e.n=6,this.delay(100);case 6:e.n=8;break;case 7:e.p=7,s=e.v,console.error("EmbeddingsService: Failed to generate embedding for chunk ".concat(a,":"),s);case 8:a++,e.n=3;break;case 9:return e.n=10,this.storeEmbeddings(t.id,i);case 10:console.log("EmbeddingsService: Generated ".concat(i.length," embeddings for link ").concat(t.id)),e.n=12;break;case 11:e.p=11,c=e.v,console.error("EmbeddingsService: Failed to generate embeddings for link ".concat(t.id,":"),c);case 12:return e.a(2)}},e,this,[[4,7],[1,11]])})),function(e){return h.apply(this,arguments)})},{key:"searchSimilar",value:(l=En(jn().m(function e(t){var n,r,i,a,o,s,c,u,l,h,d,f,p,g,m,v=this,y=arguments;return jn().w(function(e){for(;;)switch(e.n){case 0:if(n=y.length>1&&void 0!==y[1]?y[1]:10,r=y.length>2?y[2]:void 0,this.apiKey&&this.db){e.n=1;break}return console.warn("EmbeddingsService: No API key or database available for search"),e.a(2,[]);case 1:return e.p=1,console.log('EmbeddingsService: Searching for: "'.concat(t,'"')),e.n=2,this.generateEmbedding(t);case 2:if((i=e.v).length===this.EMBEDDING_DIMENSION){e.n=3;break}throw new Error("Invalid query embedding dimension");case 3:if(a=this.db.transaction(["chunks"],"readonly"),o=a.objectStore("chunks"),!(r&&r.length>0)){e.n=12;break}s=[],c=_n(r),e.p=4,c.s();case 5:if((u=c.n()).done){e.n=8;break}return h=u.value,e.n=6,o.index("linkId").getAll(h);case 6:d=e.v,(l=s).push.apply(l,kn(d));case 7:e.n=5;break;case 8:e.n=10;break;case 9:e.p=9,g=e.v,c.e(g);case 10:return e.p=10,c.f(),e.f(10);case 11:e.n=14;break;case 12:return e.n=13,o.getAll();case 13:s=e.v;case 14:return f=s.map(function(e){return{chunk:e,similarity:v.calculateSimilarity(i,e.embedding)}}),p=f.sort(function(e,t){return t.similarity-e.similarity}).slice(0,n).filter(function(e){return e.similarity>.7}).map(function(e){return e.chunk}),console.log("EmbeddingsService: Found ".concat(p.length," similar chunks")),e.a(2,p);case 15:return e.p=15,m=e.v,console.error("EmbeddingsService: Search failed:",m),e.a(2,[])}},e,this,[[4,9,10,11],[1,15]])})),function(e){return l.apply(this,arguments)})},{key:"processQuery",value:(u=En(jn().m(function e(t,n){var r,i,a,o,s,c,u,l,h=this;return jn().w(function(e){for(;;)switch(e.n){case 0:return r=Date.now(),e.p=1,e.n=2,this.searchSimilar(t,5,n);case 2:if(0!==(i=e.v).length){e.n=3;break}return e.a(2,{answer:"I couldn't find any relevant content in your saved items for this query.",sources:[],confidence:0,processingTimeMs:Date.now()-r});case 3:return e.n=4,this.generateContextualResponse(t,i);case 4:return a=e.v,e.n=5,this.createSources(i);case 5:return o=e.v,e.n=6,this.generateEmbedding(t);case 6:return s=e.v,c=i.reduce(function(e,t){return e+h.calculateSimilarity(s,t.embedding)},0)/i.length,u=Math.min(.95,c*(i.length/5)),e.a(2,{answer:a,sources:o,confidence:u,processingTimeMs:Date.now()-r});case 7:return e.p=7,l=e.v,console.error("EmbeddingsService: Query processing failed:",l),e.a(2,{answer:"Sorry, I encountered an error while processing your query. Please try again.",sources:[],confidence:0,processingTimeMs:Date.now()-r})}},e,this,[[1,7]])})),function(e,t){return u.apply(this,arguments)})},{key:"removeEmbeddings",value:(c=En(jn().m(function e(t){var n,r,i,a,o,s,c,u,l;return jn().w(function(e){for(;;)switch(e.n){case 0:if(this.db){e.n=1;break}return e.a(2);case 1:return e.p=1,n=this.db.transaction(["chunks","metadata"],"readwrite"),r=n.objectStore("chunks"),e.n=2,r.index("linkId").getAllKeys(t);case 2:i=e.v,a=_n(i),e.p=3,a.s();case 4:if((o=a.n()).done){e.n=6;break}return s=o.value,e.n=5,r.delete(s);case 5:e.n=4;break;case 6:e.n=8;break;case 7:e.p=7,u=e.v,a.e(u);case 8:return e.p=8,a.f(),e.f(8);case 9:return c=n.objectStore("metadata"),e.n=10,c.delete(t);case 10:return e.n=11,n.done;case 11:console.log("EmbeddingsService: Removed embeddings for link ".concat(t)),e.n=13;break;case 12:e.p=12,l=e.v,console.error("EmbeddingsService: Failed to remove embeddings for link ".concat(t,":"),l);case 13:return e.a(2)}},e,this,[[3,7,8,9],[1,12]])})),function(e){return c.apply(this,arguments)})},{key:"getStats",value:(s=En(jn().m(function e(){var t,n,r,i,a,o;return jn().w(function(e){for(;;)switch(e.n){case 0:if(this.db){e.n=1;break}return e.a(2,{totalChunks:0,totalLinks:0});case 1:return e.p=1,t=this.db.transaction(["chunks","metadata"],"readonly"),e.n=2,t.objectStore("chunks").count();case 2:return n=e.v,e.n=3,t.objectStore("metadata").count();case 3:return r=e.v,e.n=4,t.objectStore("metadata").getAll();case 4:return i=e.v,a=i.length>0?new Date(Math.max.apply(Math,kn(i.map(function(e){return e.lastUpdated.getTime()})))):void 0,e.a(2,{totalChunks:n,totalLinks:r,lastUpdated:a});case 5:return e.p=5,o=e.v,console.error("EmbeddingsService: Failed to get stats:",o),e.a(2,{totalChunks:0,totalLinks:0})}},e,this,[[1,5]])})),function(){return s.apply(this,arguments)})},{key:"combineTextContent",value:function(e){var t="".concat(e.title,"\n\n");if(e.userNote&&(t+="".concat(e.userNote,"\n\n")),e.aiSummary&&(t+="".concat(e.aiSummary,"\n\n")),e.extractedText&&(t+="".concat(e.extractedText,"\n\n")),e.highlights){var n=e.highlights.map(function(e){return"".concat(e.selectedText," ").concat(e.userNote||"")}).join("\n");t+="".concat(n,"\n\n")}return e.mediaAttachments&&(t+=e.mediaAttachments.map(function(e){return e.extractedText||""}).filter(function(e){return e.trim()}).join("\n")),t.trim()}},{key:"splitIntoChunks",value:function(e,t){for(var n=[],r=0,i=0;r<e.length;){var a=Math.min(r+this.CHUNK_SIZE,e.length),o=e.slice(r,a);n.push({id:"".concat(t,"_chunk_").concat(i),linkId:t,chunkIndex:i,text:o,startIndex:r,endIndex:a}),r=a-this.CHUNK_OVERLAP,i++}return n}},{key:"generateEmbedding",value:(o=En(jn().m(function e(t){var n,r;return jn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("https://api.openai.com/v1/embeddings",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:"text-embedding-ada-002",input:t.slice(0,8e3)})});case 1:if((n=e.v).ok){e.n=2;break}throw new Error("OpenAI API error: ".concat(n.status," ").concat(n.statusText));case 2:return e.n=3,n.json();case 3:return r=e.v,e.a(2,r.data[0].embedding)}},e,this)})),function(e){return o.apply(this,arguments)})},{key:"storeEmbeddings",value:(a=En(jn().m(function e(t,n){var r,i,a,o,s,c,u,l;return jn().w(function(e){for(;;)switch(e.n){case 0:if(this.db){e.n=1;break}return e.a(2);case 1:e.p=1,r=this.db.transaction(["chunks","metadata"],"readwrite"),i=r.objectStore("chunks"),a=_n(n),e.p=2,a.s();case 3:if((o=a.n()).done){e.n=5;break}return s=o.value,e.n=4,i.put(s);case 4:e.n=3;break;case 5:e.n=7;break;case 6:e.p=6,u=e.v,a.e(u);case 7:return e.p=7,a.f(),e.f(7);case 8:return c=r.objectStore("metadata"),e.n=9,c.put({linkId:t,chunkCount:n.length,lastUpdated:new Date});case 9:return e.n=10,r.done;case 10:e.n=12;break;case 11:e.p=11,l=e.v,console.error("EmbeddingsService: Failed to store embeddings:",l);case 12:return e.a(2)}},e,this,[[2,6,7,8],[1,11]])})),function(e,t){return a.apply(this,arguments)})},{key:"calculateSimilarity",value:function(e,t){try{for(var n=0,r=0,i=0,a=0;a<e.length;a++)n+=e[a]*t[a],r+=Math.pow(e[a],2),i+=Math.pow(t[a],2);return n/(Math.sqrt(r)*Math.sqrt(i))}catch(e){return console.error("EmbeddingsService: Similarity calculation failed:",e),0}}},{key:"generateContextualResponse",value:(i=En(jn().m(function e(t,n){var r,i,a,o;return jn().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,"I found relevant content but need an OpenAI API key to generate a detailed response.");case 1:return e.p=1,r=n.map(function(e){return e.text}).join("\n\n"),e.n=2,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"system",content:"You are a helpful assistant that answers questions based on the user's saved content. Provide accurate, helpful responses using only the provided context. If the context doesn't contain enough information, say so clearly."},{role:"user",content:"Based on this content from my saved items:\n\n".concat(r,"\n\nQuestion: ").concat(t)}],max_tokens:500,temperature:.3})});case 2:if((i=e.v).ok){e.n=3;break}throw new Error("OpenAI API error: ".concat(i.status));case 3:return e.n=4,i.json();case 4:return a=e.v,e.a(2,a.choices[0].message.content);case 5:return e.p=5,o=e.v,console.error("EmbeddingsService: Response generation failed:",o),e.a(2,"I found relevant content but couldn't generate a detailed response. Please check your OpenAI API key.")}},e,this,[[1,5]])})),function(e,t){return i.apply(this,arguments)})},{key:"createSources",value:(r=En(jn().m(function e(t){var n,r,i,a,o,s,c,u,l,h,d;return jn().w(function(e){for(;;)if(0===e.n){n=new Map,r=_n(t);try{for(r.s();!(i=r.n()).done;)a=i.value,n.has(a.linkId)||n.set(a.linkId,[]),n.get(a.linkId).push(a)}catch(e){r.e(e)}finally{r.f()}o=[],s=_n(n.entries());try{for(s.s();!(c=s.n()).done;){u=wn(c.value,2),l=u[0],h=u[1];try{d=h[0].text.slice(0,200)+"...",o.push({linkId:l,title:"Saved Item ".concat(l),snippet:d,relevanceScore:.8,url:""})}catch(e){console.error("EmbeddingsService: Failed to create source:",e)}}}catch(e){s.e(e)}finally{s.f()}return e.a(2,o)}},e)})),function(e){return r.apply(this,arguments)})},{key:"delay",value:function(e){return new Promise(function(t){return setTimeout(t,e)})}},{key:"cleanup",value:(n=En(jn().m(function e(){return jn().w(function(e){for(;;)switch(e.n){case 0:this.db&&(this.db.close(),this.db=null);case 1:return e.a(2)}},e,this)})),function(){return n.apply(this,arguments)})}],t&&Cn(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,n,r,i,a,o,s,c,u,l,h,d,f}());function Un(e){return Un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Un(e)}function Nn(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return $n(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$n(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function $n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Mn(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return Bn(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(Bn(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Bn(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,Bn(h,"constructor",u),Bn(u,"constructor",c),c.displayName="GeneratorFunction",Bn(u,i,"GeneratorFunction"),Bn(h),Bn(h,i,"Generator"),Bn(h,r,function(){return this}),Bn(h,"toString",function(){return"[object Generator]"}),(Mn=function(){return{w:a,m:d}})()}function Bn(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}Bn=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Bn(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},Bn(e,t,n,r)}function Fn(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function zn(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){Fn(a,r,i,o,s,"next",e)}function s(e){Fn(a,r,i,o,s,"throw",e)}o(void 0)})}}function qn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Kn(r.key),r)}}function Gn(e,t,n){return(t=Kn(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Kn(e){var t=function(e){if("object"!=Un(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Un(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Un(t)?t:t+""}var Wn=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Gn(this,"checkQueue",[]),Gn(this,"isProcessing",!1),Gn(this,"CHECK_INTERVAL",864e5),Gn(this,"BATCH_SIZE",5),Gn(this,"RATE_LIMIT_DELAY",2e3)}return t=e,n=[{key:"checkLinkHealth",value:(y=zn(Mn().m(function e(t){var n,r,i,a,o,s,c;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Checking link health: ".concat(t)),n=Date.now(),r=new AbortController,i=setTimeout(function(){return r.abort()},1e4),e.p=1,e.n=2,fetch(t,{method:"HEAD",signal:r.signal,headers:{"User-Agent":"Nest Extension Link Checker"}});case 2:if(a=e.v,clearTimeout(i),o=Date.now()-n,!a.redirected||a.url===t){e.n=3;break}return e.a(2,{success:!0,status:"redirected",statusCode:a.status,redirectUrl:a.url,responseTime:o});case 3:if(!a.ok){e.n=4;break}return e.a(2,{success:!0,status:"healthy",statusCode:a.status,responseTime:o});case 4:if(!(a.status>=400&&a.status<500)){e.n=5;break}return e.a(2,{success:!1,status:"dead",statusCode:a.status,error:"HTTP ".concat(a.status),responseTime:o});case 5:return e.a(2,{success:!1,status:"unreachable",statusCode:a.status,error:"Server error: HTTP ".concat(a.status),responseTime:o});case 6:e.n=9;break;case 7:if(e.p=7,s=e.v,clearTimeout(i),"AbortError"!==s.name){e.n=8;break}return e.a(2,{success:!1,status:"unreachable",error:"Request timeout",responseTime:Date.now()-n});case 8:return e.a(2,{success:!1,status:"unreachable",error:s.message||"Network error",responseTime:Date.now()-n});case 9:e.n=11;break;case 10:return e.p=10,c=e.v,console.error("Error checking link health:",c),e.a(2,{success:!1,status:"unreachable",error:c.message||"Unknown error"});case 11:return e.a(2)}},e,null,[[1,7],[0,10]])})),function(e){return y.apply(this,arguments)})},{key:"schedulePeriodicChecks",value:(v=zn(Mn().m(function e(){var t,n,r,i,a,o,s;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,en.getData();case 1:return t=e.v,n=t.links,e.n=2,this.getLinksNeedingCheck(n);case 2:if(0!==(r=e.v).length){e.n=3;break}return console.log("No links need health checking at this time"),e.a(2);case 3:console.log("Scheduling health checks for ".concat(r.length," links")),i=Nn(r);try{for(i.s();!(a=i.n()).done;)o=a.value,this.checkQueue.includes(o.id)||this.checkQueue.push(o.id)}catch(e){i.e(e)}finally{i.f()}this.isProcessing||this.processCheckQueue(),e.n=5;break;case 4:e.p=4,s=e.v,console.error("Failed to schedule periodic checks:",s);case 5:return e.a(2)}},e,this,[[0,4]])})),function(){return v.apply(this,arguments)})},{key:"rescueDeadLink",value:(m=zn(Mn().m(function e(t){var n,r,i,a,o,s,c,u=this;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getLinkById(t);case 1:if(n=e.v){e.n=2;break}return e.a(2,{success:!1,error:"Link not found"});case 2:console.log("Attempting to rescue dead link: ".concat(n.url)),r=0,i=[function(){return u.tryWaybackMachine(n.url)},function(){return u.tryGoogleCache(n.url)},function(){return u.tryArchiveToday(n.url)}];case 3:if(!(r<i.length)){e.n=10;break}return a=i[r],e.p=4,e.n=5,a();case 5:if(!(o=e.v).success){e.n=7;break}return e.n=6,this.updateLinkWithRecovery(t,o);case 6:return e.a(2,o);case 7:e.n=9;break;case 8:return e.p=8,s=e.v,console.log("Recovery method failed:",s.message),e.a(3,9);case 9:r++,e.n=3;break;case 10:return e.a(2,{success:!1,error:"No working archive found"});case 11:return e.p=11,c=e.v,console.error("Failed to rescue dead link:",c),e.a(2,{success:!1,error:c.message||"Recovery failed"})}},e,this,[[4,8],[0,11]])})),function(e){return m.apply(this,arguments)})},{key:"getHealthReport",value:(g=zn(Mn().m(function e(){var t,n,r,i,a,o,s,c,u;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getAllLinkHealth();case 1:return t=e.v,n={totalLinks:0,healthyLinks:0,deadLinks:0,unreachableLinks:0,redirectedLinks:0,uncheckedLinks:0,recentlyRecovered:0},e.n=2,en.getData();case 2:r=e.v,n.totalLinks=r.links.length,i=Nn(t),e.p=3,i.s();case 4:if((a=i.n()).done){e.n=11;break}o=a.value,s=o.status,e.n="healthy"===s?5:"dead"===s?6:"unreachable"===s?7:"redirected"===s?8:9;break;case 5:return n.healthyLinks++,e.a(3,9);case 6:return n.deadLinks++,e.a(3,9);case 7:return n.unreachableLinks++,e.a(3,9);case 8:return n.redirectedLinks++,e.a(3,9);case 9:o.recoverySuccess&&n.recentlyRecovered++;case 10:e.n=4;break;case 11:e.n=13;break;case 12:e.p=12,c=e.v,i.e(c);case 13:return e.p=13,i.f(),e.f(13);case 14:return n.uncheckedLinks=n.totalLinks-t.length,e.a(2,n);case 15:return e.p=15,u=e.v,console.error("Failed to generate health report:",u),e.a(2,{totalLinks:0,healthyLinks:0,deadLinks:0,unreachableLinks:0,redirectedLinks:0,uncheckedLinks:0,recentlyRecovered:0})}},e,this,[[3,12,13,14],[0,15]])})),function(){return g.apply(this,arguments)})},{key:"getLinksNeedingCheck",value:(p=zn(Mn().m(function e(t){var n,r,i,a,o,s,c,u,l,h,d;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,this.getAllLinkHealth();case 1:n=e.v,r=new Map(n.map(function(e){return[e.linkId,e]})),i=new Date,a=[],o=Nn(t);try{for(o.s();!(s=o.n()).done;)c=s.value,(u=r.get(c.id))?(l=i.getTime()-u.lastChecked.getTime(),h=l>this.CHECK_INTERVAL,d="dead"===u.status&&l>6048e5,(h||d)&&a.push(c)):a.push(c)}catch(e){o.e(e)}finally{o.f()}return e.a(2,a)}},e,this)})),function(e){return p.apply(this,arguments)})},{key:"processCheckQueue",value:(f=zn(Mn().m(function e(){var t,n,r,i=this;return Mn().w(function(e){for(;;)switch(e.n){case 0:if(!this.isProcessing&&0!==this.checkQueue.length){e.n=1;break}return e.a(2);case 1:this.isProcessing=!0,console.log("Processing link health check queue: ".concat(this.checkQueue.length," items")),e.p=2;case 3:if(!(this.checkQueue.length>0)){e.n=6;break}return t=this.checkQueue.splice(0,this.BATCH_SIZE),n=t.map(function(){var e=zn(Mn().m(function e(t,n){return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,i.delay(500*n);case 1:return e.a(2,i.checkAndUpdateLinkHealth(t))}},e)}));return function(t,n){return e.apply(this,arguments)}}()),e.n=4,Promise.all(n);case 4:if(!(this.checkQueue.length>0)){e.n=5;break}return e.n=5,this.delay(this.RATE_LIMIT_DELAY);case 5:e.n=3;break;case 6:e.n=8;break;case 7:e.p=7,r=e.v,console.error("Error processing check queue:",r);case 8:return e.p=8,this.isProcessing=!1,e.f(8);case 9:return e.a(2)}},e,this,[[2,7,8,9]])})),function(){return f.apply(this,arguments)})},{key:"checkAndUpdateLinkHealth",value:(d=zn(Mn().m(function e(t){var n,r,i,a,o=this;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getLinkById(t);case 1:if(n=e.v){e.n=2;break}return e.a(2);case 2:return e.n=3,this.checkLinkHealth(n.url);case 3:return r=e.v,i={linkId:t,url:n.url,status:r.status,lastChecked:new Date,statusCode:r.statusCode,redirectUrl:r.redirectUrl,error:r.error},e.n=4,this.saveLinkHealth(i);case 4:"dead"!==r.status||i.recoveryAttempted||setTimeout(zn(Mn().m(function e(){var n,r;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,o.rescueDeadLink(t);case 1:return n=e.v,e.n=2,o.updateHealthWithRecovery(t,n);case 2:e.n=4;break;case 3:e.p=3,r=e.v,console.error("Auto-recovery failed:",r);case 4:return e.a(2)}},e,null,[[0,3]])})),5e3),console.log("Link health updated: ".concat(n.url," -> ").concat(r.status)),e.n=6;break;case 5:e.p=5,a=e.v,console.error("Failed to check link ".concat(t,":"),a);case 6:return e.a(2)}},e,this,[[0,5]])})),function(e){return d.apply(this,arguments)})},{key:"tryWaybackMachine",value:(h=zn(Mn().m(function e(t){var n,r,i,a,o,s,c,u;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,n="https://web.archive.org/cdx/search/cdx?url=".concat(encodeURIComponent(t),"&limit=1&sort=timestamp&order=desc"),e.n=1,fetch(n);case 1:if((r=e.v).ok){e.n=2;break}throw new Error("Wayback API request failed");case 2:return e.n=3,r.text();case 3:if(i=e.v,0!==(a=i.trim().split("\n")).length&&a[0]){e.n=4;break}return e.a(2,{success:!1,error:"No archived version found"});case 4:if(!((o=a[0].split(" ")).length<3)){e.n=5;break}return e.a(2,{success:!1,error:"Invalid response format"});case 5:return s=o[1],c="https://web.archive.org/web/".concat(s,"/").concat(t),e.a(2,{success:!0,recoveredUrl:c,method:"wayback",timestamp:s});case 6:return e.p=6,u=e.v,e.a(2,{success:!1,error:u.message})}},e,null,[[0,6]])})),function(e){return h.apply(this,arguments)})},{key:"tryGoogleCache",value:(l=zn(Mn().m(function e(t){var n,r;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,n="http://webcache.googleusercontent.com/search?q=cache:".concat(encodeURIComponent(t)),e.n=1,fetch(n,{method:"HEAD"});case 1:if(!e.v.ok){e.n=2;break}return e.a(2,{success:!0,recoveredUrl:n,method:"google_cache"});case 2:return e.a(2,{success:!1,error:"No cached version found"});case 3:e.n=5;break;case 4:return e.p=4,r=e.v,e.a(2,{success:!1,error:r.message});case 5:return e.a(2)}},e,null,[[0,4]])})),function(e){return l.apply(this,arguments)})},{key:"tryArchiveToday",value:(u=zn(Mn().m(function e(t){var n,r,i,a,o,s;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,n="http://archive.today/timemap/json/".concat(encodeURIComponent(t)),e.n=1,fetch(n);case 1:if((r=e.v).ok){e.n=2;break}throw new Error("Archive.today API request failed");case 2:return e.n=3,r.json();case 3:if(i=e.v,Array.isArray(i)&&!(i.length<2)){e.n=4;break}return e.a(2,{success:!1,error:"No archived version found"});case 4:return a=i[i.length-1],o=a[1],e.a(2,{success:!0,recoveredUrl:o,method:"archive_today"});case 5:return e.p=5,s=e.v,e.a(2,{success:!1,error:s.message})}},e,null,[[0,5]])})),function(e){return u.apply(this,arguments)})},{key:"getLinkById",value:(c=zn(Mn().m(function e(t){var n,r;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,en.getData();case 1:return n=e.v,e.a(2,n.links.find(function(e){return e.id===t})||null);case 2:return e.p=2,r=e.v,console.error("Failed to get link by ID:",r),e.a(2,null)}},e,null,[[0,2]])})),function(e){return c.apply(this,arguments)})},{key:"getAllLinkHealth",value:(s=zn(Mn().m(function e(){var t,n;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_link_health");case 1:return t=e.v,e.a(2,t.nest_link_health||[]);case 2:return e.p=2,n=e.v,console.error("Failed to get link health data:",n),e.a(2,[])}},e,null,[[0,2]])})),function(){return s.apply(this,arguments)})},{key:"saveLinkHealth",value:(o=zn(Mn().m(function e(t){var n,r,i;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getAllLinkHealth();case 1:return n=e.v,(r=n.findIndex(function(e){return e.linkId===t.linkId}))>=0?n[r]=t:n.push(t),e.n=2,chrome.storage.local.set({nest_link_health:n});case 2:e.n=4;break;case 3:e.p=3,i=e.v,console.error("Failed to save link health:",i);case 4:return e.a(2)}},e,this,[[0,3]])})),function(e){return o.apply(this,arguments)})},{key:"updateLinkWithRecovery",value:(a=zn(Mn().m(function e(t,n){var r,i,a,o;return Mn().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,!n.success||!n.recoveredUrl){e.n=2;break}return e.n=1,this.getLinkById(t);case 1:if(!(r=e.v)){e.n=2;break}return i="\n\n[Auto-recovered via ".concat(n.method,"]\nRecovered URL: ").concat(n.recoveredUrl),a=(r.userNote||"")+i,e.n=2,en.updateLink(t,{userNote:a});case 2:e.n=4;break;case 3:e.p=3,o=e.v,console.error("Failed to update link with recovery info:",o);case 4:return e.a(2)}},e,this,[[0,3]])})),function(e,t){return a.apply(this,arguments)})},{key:"updateHealthWithRecovery",value:(i=zn(Mn().m(function e(t,n){var r,i,a;return Mn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getAllLinkHealth();case 1:if(r=e.v,!(i=r.find(function(e){return e.linkId===t}))){e.n=2;break}return i.recoveryAttempted=!0,i.recoverySuccess=n.success,n.success&&n.recoveredUrl&&(i.alternativeUrls=[n.recoveredUrl]),e.n=2,this.saveLinkHealth(i);case 2:e.n=4;break;case 3:e.p=3,a=e.v,console.error("Failed to update health with recovery:",a);case 4:return e.a(2)}},e,this,[[0,3]])})),function(e,t){return i.apply(this,arguments)})},{key:"delay",value:function(e){return new Promise(function(t){return setTimeout(t,e)})}}],r=[{key:"getInstance",value:function(){return e.instance||(e.instance=new e),e.instance}}],n&&qn(t.prototype,n),r&&qn(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n,r,i,a,o,s,c,u,l,h,d,f,p,g,m,v,y}().getInstance();function Hn(e){return Hn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Hn(e)}function Jn(e){return function(e){if(Array.isArray(e))return tr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||er(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vn(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Hn(e)+" is not iterable")}function Yn(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=er(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function Qn(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return Xn(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(Xn(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Xn(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,Xn(h,"constructor",u),Xn(u,"constructor",c),c.displayName="GeneratorFunction",Xn(u,i,"GeneratorFunction"),Xn(h),Xn(h,i,"Generator"),Xn(h,r,function(){return this}),Xn(h,"toString",function(){return"[object Generator]"}),(Qn=function(){return{w:a,m:d}})()}function Xn(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}Xn=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Xn(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},Xn(e,t,n,r)}function Zn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(e,t)||er(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function er(e,t){if(e){if("string"==typeof e)return tr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?tr(e,t):void 0}}function tr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function nr(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function rr(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){nr(a,r,i,o,s,"next",e)}function s(e){nr(a,r,i,o,s,"throw",e)}o(void 0)})}}function ir(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,ar(r.key),r)}}function ar(e){var t=function(e){if("object"!=Hn(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Hn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Hn(t)?t:t+""}var or=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return t=e,n=[{key:"analyzeUserPatterns",value:(u=rr(Qn().m(function e(){var t,n,r,i,a,o,s,c,u,l,h,d,f,p;return Qn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Promise.all([en.getData().then(function(e){return e.links}),en.getActivities(200),en.getData().then(function(e){return e.collections})]);case 1:return t=e.v,n=Zn(t,3),r=n[0],i=n[1],a=n[2],o=this.analyzeReadingTimes(i),s=this.calculateAverageSessionLength(i),c=this.analyzeContentPreferences(r,i),u=this.calculateStalenessThresholds(r,i),l=this.calculateReadingVelocity(i),h=this.calculateOrganizationFrequency(i),e.n=2,this.analyzeTagUsagePatterns(r);case 2:return d=e.v,f=this.analyzeCollectionUsagePatterns(r,a),e.a(2,{userId:"current_user",preferredReadingTimes:o,averageSessionLength:s,contentPreferences:c,stalenessThresholds:u,readingVelocity:l,organizationFrequency:h,tagUsagePatterns:d,collectionUsagePatterns:f});case 3:return e.p=3,p=e.v,console.error("Failed to analyze user patterns:",p),e.a(2,this.getDefaultActivityPattern())}},e,this,[[0,3]])})),function(){return u.apply(this,arguments)})},{key:"identifyStaleContent",value:(c=rr(Qn().m(function e(){var t,n,r,i,a,o,s,c,u,l,h=this;return Qn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.analyzeUserPatterns();case 1:return t=e.v,e.n=2,en.getData();case 2:return n=e.v,e.n=3,en.getActivities(100);case 3:r=e.v,i=[],a=new Date,o=Yn(n.links),e.p=4,c=Qn().m(function e(){var n,o,c,u,l,d,f;return Qn().w(function(e){for(;;)switch(e.n){case 0:if((n=s.value).isInInbox){e.n=1;break}return e.a(2,1);case 1:o=h.getDaysDifference(n.createdAt,a),c=r.find(function(e){return"read"===e.type&&e.linkId===n.id}),u=c?h.getDaysDifference(c.createdAt,a):void 0,(l=h.calculateStaleness(n,t,o,u))>.3&&(d=h.determineStalenessReason(n,t,o,u),f=h.suggestActionForStaleItem(n,l,d),i.push({link:n,staleness:l,reason:d,daysSinceCreated:o,daysSinceLastAccess:u,suggestedAction:f}));case 2:return e.a(2)}},e)}),o.s();case 5:if((s=o.n()).done){e.n=8;break}return e.d(Vn(c()),6);case 6:if(!e.v){e.n=7;break}return e.a(3,7);case 7:e.n=5;break;case 8:e.n=10;break;case 9:e.p=9,u=e.v,o.e(u);case 10:return e.p=10,o.f(),e.f(10);case 11:return e.a(2,i.sort(function(e,t){return t.staleness-e.staleness}));case 12:return e.p=12,l=e.v,console.error("Failed to identify stale content:",l),e.a(2,[])}},e,this,[[4,9,10,11],[0,12]])})),function(){return c.apply(this,arguments)})},{key:"detectContentClusters",value:(s=rr(Qn().m(function e(){var t,n,r,i,a,o,s,c;return Qn().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,en.getData();case 1:if(t=e.v,!((n=t.links.filter(function(e){return e.isInInbox})).length<3)){e.n=2;break}return e.a(2,[]);case 2:return r=[],i=this.clusterByDomain(n),r.push.apply(r,Jn(i)),e.n=3,this.clusterByTopics(n);case 3:return a=e.v,r.push.apply(r,Jn(a)),o=this.clusterByTimeAndSimilarity(n),r.push.apply(r,Jn(o)),s=this.deduplicateClusters(r),e.a(2,s.filter(function(e){return e.links.length>=2}).sort(function(e,t){return t.confidence-e.confidence}).slice(0,5));case 4:return e.p=4,c=e.v,console.error("Failed to detect content clusters:",c),e.a(2,[])}},e,this,[[0,4]])})),function(){return s.apply(this,arguments)})},{key:"getReadingRecommendations",value:(o=rr(Qn().m(function e(){var t,n,r,i,a,o,s,c=this,u=arguments;return Qn().w(function(e){for(;;)switch(e.n){case 0:return t=u.length>0&&void 0!==u[0]?u[0]:5,e.p=1,e.n=2,this.analyzeUserPatterns();case 2:return n=e.v,e.n=3,en.getData();case 3:return r=e.v,e.n=4,en.getActivities(50);case 4:return i=e.v,a=r.links.filter(function(e){var t=i.find(function(t){return"read"===t.type&&t.linkId===e.id});return!t||c.getDaysDifference(t.createdAt,new Date)>7}),o=a.map(function(e){return{link:e,score:c.calculateReadingScore(e,n)}}),e.a(2,o.sort(function(e,t){return t.score-e.score}).slice(0,t).map(function(e){return e.link}));case 5:return e.p=5,s=e.v,console.error("Failed to get reading recommendations:",s),e.a(2,[])}},e,this,[[1,5]])})),function(){return o.apply(this,arguments)})},{key:"analyzeReadingTimes",value:function(e){var t=e.filter(function(e){return"read"===e.type}),n=new Array(24).fill(0);t.forEach(function(e){var t=new Date(e.createdAt).getHours();n[t]++});var r=t.length/24;return n.map(function(e,t){return{hour:t,count:e}}).filter(function(e){return e.count>r}).map(function(e){return e.hour})}},{key:"calculateAverageSessionLength",value:function(e){var t=[],n=[];return e.forEach(function(r,i){if(0!==i)if(new Date(r.createdAt).getTime()-new Date(e[i-1].createdAt).getTime()<=18e5)n.push(r);else{if(n.length>1){var a=new Date(n[n.length-1].createdAt).getTime()-new Date(n[0].createdAt).getTime();t.push(a/6e4)}n=[r]}else n=[r]}),t.length>0?t.reduce(function(e,t){return e+t},0)/t.length:15}},{key:"analyzeContentPreferences",value:function(e,t){var n={};t.filter(function(e){return"read"===e.type}).forEach(function(t){var r=e.find(function(e){return e.id===t.linkId});r&&(n[r.domain]=(n[r.domain]||0)+1)});var r=Math.max.apply(Math,Jn(Object.values(n)));if(r>0)for(var i in n)n[i]=n[i]/r;return n}},{key:"calculateStalenessThresholds",value:function(e,t){var n={general:30,work:14,learning:21,personal:45,news:7,reference:90},r=t.filter(function(e){return"read"===e.type});if(r.length>10){var i=this.calculateAverageTimeToRead(e,r);for(var a in n)n[a]=Math.max(n[a]*(i/7),3)}return n}},{key:"calculateReadingVelocity",value:function(e){var t=e.filter(function(e){return"read"===e.type});if(0===t.length)return 1;var n=t[t.length-1],r=t[0],i=this.getDaysDifference(new Date(n.createdAt),new Date(r.createdAt));return i>0?t.length/i:t.length}},{key:"calculateOrganizationFrequency",value:function(e){var t=e.filter(function(e){return"organize"===e.type});if(t.length<2)return 7;for(var n=[],r=1;r<t.length;r++){var i=this.getDaysDifference(new Date(t[r].createdAt),new Date(t[r-1].createdAt));n.push(i)}return n.length>0?n.reduce(function(e,t){return e+t},0)/n.length:7}},{key:"analyzeTagUsagePatterns",value:(a=rr(Qn().m(function e(t){var n,r,i,a,o,s,c;return Qn().w(function(e){for(;;)switch(e.n){case 0:n={},r=Yn(t),e.p=1,r.s();case 2:if((i=r.n()).done){e.n=7;break}return a=i.value,e.p=3,e.n=4,en.getLinkTags(a.id);case 4:e.v.forEach(function(e){n[e.name]=(n[e.name]||0)+1}),e.n=6;break;case 5:e.p=5,e.v;case 6:e.n=2;break;case 7:e.n=9;break;case 8:e.p=8,c=e.v,r.e(c);case 9:return e.p=9,r.f(),e.f(9);case 10:if((o=Math.max.apply(Math,Jn(Object.values(n))))>0)for(s in n)n[s]=n[s]/o;return e.a(2,n)}},e,null,[[3,5],[1,8,9,10]])})),function(e){return a.apply(this,arguments)})},{key:"analyzeCollectionUsagePatterns",value:function(e,t){var n={};e.forEach(function(e){if(e.collectionId){var r=t.find(function(t){return t.id===e.collectionId});r&&(n[r.name]=(n[r.name]||0)+1)}});var r=Math.max.apply(Math,Jn(Object.values(n)));if(r>0)for(var i in n)n[i]=n[i]/r;return n}},{key:"calculateStaleness",value:function(e,t,n,r){var i=e.category||"general",a=t.stalenessThresholds[i]||30,o=0;return n>a&&(o+=.4*Math.min(n/a,2)),void 0!==r&&r>a/2&&(o+=.3*Math.min(r/(a/2),2)),void 0===r&&n>7&&(o+=.3),(t.contentPreferences[e.domain]||0)<.2&&(o+=.2),Math.min(o,1)}},{key:"determineStalenessReason",value:function(e,t,n,r){if(void 0===r)return"never_accessed";var i=e.category||"general";return n>1.5*(t.stalenessThresholds[i]||30)?"time_based":(t.contentPreferences[e.domain]||0)<.1?"topic_shift":"time_based"}},{key:"suggestActionForStaleItem",value:function(e,t,n){return t>.8?"duplicate_content"===n?"delete":"archive":t>.6?"archive":"never_accessed"===n?"review":"organize"}},{key:"clusterByDomain",value:function(e){var t=this,n={};return e.forEach(function(e){n[e.domain]||(n[e.domain]=[]),n[e.domain].push(e)}),Object.entries(n).filter(function(e){var t=Zn(e,2);return t[0],t[1].length>=2}).map(function(e){var n=Zn(e,2),r=n[0],i=n[1];return{theme:"".concat(r," content"),links:i,confidence:Math.min(.8,i.length/5),suggestedCollectionName:t.formatDomainName(r),suggestedTags:[r.split(".")[0]]}})}},{key:"clusterByTopics",value:(i=rr(Qn().m(function e(t){var n,r,i,a,o,s=this;return Qn().w(function(e){for(;;)switch(e.n){case 0:n={},r=Yn(t),e.p=1,a=Qn().m(function e(){var t;return Qn().w(function(e){for(;;)switch(e.n){case 0:return t=i.value,e.p=1,e.n=2,en.getLinkTags(t.id);case 2:e.v.forEach(function(e){n[e.name]||(n[e.name]=[]),n[e.name].push(t)}),e.n=4;break;case 3:e.p=3,e.v;case 4:return e.a(2)}},e,null,[[1,3]])}),r.s();case 2:if((i=r.n()).done){e.n=4;break}return e.d(Vn(a()),3);case 3:e.n=2;break;case 4:e.n=6;break;case 5:e.p=5,o=e.v,r.e(o);case 6:return e.p=6,r.f(),e.f(6);case 7:return e.a(2,Object.entries(n).filter(function(e){var t=Zn(e,2);return t[0],t[1].length>=2}).map(function(e){var t=Zn(e,2),n=t[0],r=t[1];return{theme:"".concat(n," resources"),links:r,confidence:Math.min(.9,r.length/4),suggestedCollectionName:s.formatTopicName(n),suggestedTags:[n]}}))}},e,null,[[1,5,6,7]])})),function(e){return i.apply(this,arguments)})},{key:"clusterByTimeAndSimilarity",value:function(e){for(var t=Jn(e).sort(function(e,t){return new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()}),n=[],r=new Set,i=0;i<t.length;i++)if(!r.has(t[i].id)){var a=t[i],o=[a];r.add(a.id);for(var s=i+1;s<t.length&&s<i+10;s++)r.has(t[s].id)||this.getDaysDifference(new Date(a.createdAt),new Date(t[s].createdAt))<=3&&(o.push(t[s]),r.add(t[s].id));o.length>=2&&n.push({theme:"Recent research session",links:o,confidence:.6,suggestedCollectionName:"Research ".concat(new Date(a.createdAt).toLocaleDateString()),suggestedTags:["research","recent"]})}return n}},{key:"deduplicateClusters",value:function(e){var t,n=[],r=new Set,i=Yn(e.sort(function(e,t){return t.confidence*t.links.length-e.confidence*e.links.length}));try{for(i.s();!(t=i.n()).done;){var a=t.value,o=a.links.map(function(e){return e.id});o.filter(function(e){return r.has(e)}).length<.5*a.links.length&&(n.push(a),o.forEach(function(e){return r.add(e)}))}}catch(e){i.e(e)}finally{i.f()}return n}},{key:"calculateReadingScore",value:function(e,t){var n=0;n+=.4*(t.contentPreferences[e.domain]||0),n+=.3*({work:.8,learning:.9,personal:.7,general:.6}[e.category||"general"]||.6);var r=this.getDaysDifference(e.createdAt,new Date);return n+.3*Math.max(0,1-r/30)}},{key:"calculateAverageTimeToRead",value:function(e,t){var n=this,r=[];return t.forEach(function(t){var i=e.find(function(e){return e.id===t.linkId});if(i){var a=n.getDaysDifference(i.createdAt,new Date(t.createdAt));r.push(a)}}),r.length>0?r.reduce(function(e,t){return e+t},0)/r.length:7}},{key:"getDaysDifference",value:function(e,t){var n=Math.abs(t.getTime()-e.getTime());return Math.ceil(n/864e5)}},{key:"formatDomainName",value:function(e){return{"github.com":"GitHub Projects","stackoverflow.com":"Stack Overflow Q&A","medium.com":"Medium Articles","youtube.com":"YouTube Videos","twitter.com":"Twitter Posts","linkedin.com":"LinkedIn Content","reddit.com":"Reddit Discussions","dev.to":"Dev Community","hashnode.com":"Hashnode Posts"}[e]||"".concat(e.replace("www.","").split(".")[0]," Collection")}},{key:"formatTopicName",value:function(e){return e.charAt(0).toUpperCase()+e.slice(1)+" Resources"}},{key:"getDefaultActivityPattern",value:function(){return{userId:"current_user",preferredReadingTimes:[9,10,14,15,20,21],averageSessionLength:15,contentPreferences:{},stalenessThresholds:{general:30,work:14,learning:21,personal:45,news:7,reference:90},readingVelocity:2,organizationFrequency:7,tagUsagePatterns:{},collectionUsagePatterns:{}}}}],r=[{key:"getInstance",value:function(){return e.instance||(e.instance=new e),e.instance}}],n&&ir(t.prototype,n),r&&ir(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n,r,i,a,o,s,c,u}().getInstance();function sr(e){return sr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sr(e)}function cr(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=fr(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function ur(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return lr(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(lr(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,lr(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,lr(h,"constructor",u),lr(u,"constructor",c),c.displayName="GeneratorFunction",lr(u,i,"GeneratorFunction"),lr(h),lr(h,i,"Generator"),lr(h,r,function(){return this}),lr(h,"toString",function(){return"[object Generator]"}),(ur=function(){return{w:a,m:d}})()}function lr(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}lr=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){lr(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},lr(e,t,n,r)}function hr(e){return function(e){if(Array.isArray(e))return pr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||fr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(e,t)||fr(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fr(e,t){if(e){if("string"==typeof e)return pr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pr(e,t):void 0}}function pr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function gr(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function mr(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){gr(a,r,i,o,s,"next",e)}function s(e){gr(a,r,i,o,s,"throw",e)}o(void 0)})}}function vr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,yr(r.key),r)}}function yr(e){var t=function(e){if("object"!=sr(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=sr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==sr(t)?t:t+""}var br=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return t=e,n=[{key:"generateSuggestions",value:(p=mr(ur().m(function e(){var t,n,r,i,a,o,s,c,u,l,h,d,f,p,g,m,v,y,b,w,k,_,S,A,T,I,j,O,P,E,C,x,D,R,L=this;return ur().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Promise.all([or.analyzeUserPatterns(),or.identifyStaleContent(),or.detectContentClusters(),en.getData()]);case 1:return t=e.v,n=dr(t,4),r=n[0],i=n[1],a=n[2],o=n[3],s=[],c=o.links.filter(function(e){return e.isInInbox}),u=s.push,l=s,h=hr,e.n=2,this.generateReadingSuggestions(r,o.links);case 2:return d=e.v,f=h(d),u.apply.call(u,l,f),p=s.push,g=s,m=hr,e.n=3,this.generateOrganizationSuggestions(a,c);case 3:return v=e.v,y=m(v),p.apply.call(p,g,y),b=s.push,w=s,k=hr,e.n=4,this.generateMaintenanceSuggestions(i,r);case 4:return _=e.v,S=k(_),b.apply.call(b,w,S),A=s.push,T=s,I=hr,e.n=5,this.generateProductivitySuggestions(r,c);case 5:return j=e.v,O=I(j),A.apply.call(A,T,O),P=s.push,E=s,C=hr,e.n=6,this.generateLearningEnhancementSuggestions(o);case 6:return x=e.v,D=C(x),P.apply.call(P,E,D),e.a(2,s.sort(function(e,t){return L.priorityScore(t)-L.priorityScore(e)}).slice(0,8));case 7:return e.p=7,R=e.v,console.error("Failed to generate suggestions:",R),e.a(2,this.getFallbackSuggestions())}},e,this,[[0,7]])})),function(){return p.apply(this,arguments)})},{key:"getSummarizeAndClearSuggestion",value:(f=mr(ur().m(function e(){var t,n,r,i,a,o,s,c,u,l;return ur().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Promise.all([or.identifyStaleContent(),or.detectContentClusters(),en.getData()]);case 1:return t=e.v,n=dr(t,3),r=n[0],i=n[1],a=n[2],o=a.links.filter(function(e){return e.isInInbox}),s=this.generateInboxSummary(o),c=this.planBatchActions(o,r,i),u=this.estimateProcessingTime(c),e.a(2,{summary:s,batchActions:c,estimatedTime:u});case 2:throw e.p=2,l=e.v,console.error("Failed to generate inbox summary:",l),l;case 3:return e.a(2)}},e,this,[[0,2]])})),function(){return f.apply(this,arguments)})},{key:"executeBatchActions",value:(d=mr(ur().m(function e(t){var n,r,i,a,o,s,c,u,l,h,d,f;return ur().w(function(e){for(;;)switch(e.n){case 0:n={success:!0,itemsProcessed:0,itemsArchived:0,collectionsCreated:0,errors:[],summary:""},e.p=1,r=cr(t),e.p=2,r.s();case 3:if((i=r.n()).done){e.n=22;break}a=i.value,o=cr(a.items),e.p=4,o.s();case 5:if((s=o.n()).done){e.n=18;break}c=s.value,e.p=6,u=a.action,e.n="archive"===u?7:"organize"===u?9:"delete"===u?12:14;break;case 7:return e.n=8,en.updateLink(c.id,{isInInbox:!1,collectionId:a.collectionId});case 8:return n.itemsArchived++,e.a(3,14);case 9:if(!a.collectionId){e.n=11;break}return e.n=10,en.updateLink(c.id,{isInInbox:!1,collectionId:a.collectionId});case 10:n.itemsArchived++;case 11:return e.a(3,14);case 12:return e.n=13,en.updateLink(c.id,{isInInbox:!1});case 13:return n.itemsArchived++,e.a(3,14);case 14:return n.itemsProcessed++,e.n=15,en.logActivity("organize",c.id,void 0,{action:a.action,reason:a.reason,batchOperation:!0});case 15:e.n=17;break;case 16:e.p=16,l=e.v,n.errors.push("Failed to ".concat(a.action,' "').concat(c.title,'": ').concat(l)),n.success=!1;case 17:e.n=5;break;case 18:e.n=20;break;case 19:e.p=19,h=e.v,o.e(h);case 20:return e.p=20,o.f(),e.f(20);case 21:e.n=3;break;case 22:e.n=24;break;case 23:e.p=23,d=e.v,r.e(d);case 24:return e.p=24,r.f(),e.f(24);case 25:return n.summary=this.generateBatchActionSummary(n),e.a(2,n);case 26:return e.p=26,f=e.v,console.error("Batch action execution failed:",f),n.success=!1,n.errors.push(f instanceof Error?f.message:"Unknown error"),e.a(2,n)}},e,this,[[6,16],[4,19,20,21],[2,23,24,25],[1,26]])})),function(e){return d.apply(this,arguments)})},{key:"getTimeAwareSuggestions",value:(h=mr(ur().m(function e(){var t,n;return ur().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,or.analyzeUserPatterns();case 1:if(t=e.v,n=(new Date).getHours(),!t.preferredReadingTimes.includes(n)){e.n=2;break}return e.a(2,this.generateReadingFocusedSuggestions());case 2:return e.a(2,this.generateOrganizationFocusedSuggestions());case 3:return e.a(2)}},e,this)})),function(){return h.apply(this,arguments)})},{key:"generateReadingSuggestions",value:(l=mr(ur().m(function e(t,n){var r,i,a;return ur().w(function(e){for(;;)switch(e.n){case 0:return r=[],e.n=1,or.getReadingRecommendations(3);case 1:return(i=e.v).length>0&&(a=i[0],r.push({id:"read_".concat(a.id),type:"read_next",priority:"high",title:"Continue Your Learning Journey",description:'Based on your reading habits, "'.concat(a.title,'" looks like a great next read.'),actionData:{linkId:a.id,link:a},reasoning:"This matches your preference for ".concat(a.domain," content and fits your typical reading patterns."),dismissible:!0,estimatedTime:this.estimateReadingTime(a),confidence:.8,category:"learning"})),t.averageSessionLength>20&&t.readingVelocity>1&&r.push({id:"focus_session_suggestion",type:"focus_session",priority:"medium",title:"Start a Focus Session",description:"You typically read for ".concat(Math.round(t.averageSessionLength)," minutes. Want to start a focused reading session?"),actionData:{suggestedDuration:Math.round(t.averageSessionLength),recommendations:i.slice(0,3)},reasoning:"Based on your typical reading session length and current focus patterns.",dismissible:!0,estimatedTime:"".concat(Math.round(t.averageSessionLength)," min"),confidence:.7,category:"productivity"}),e.a(2,r)}},e,this)})),function(e,t){return l.apply(this,arguments)})},{key:"generateOrganizationSuggestions",value:(u=mr(ur().m(function e(t,n){var r,i,a,o;return ur().w(function(e){for(;;)if(0===e.n){r=[],n.length>10&&r.push({id:"inbox_overwhelm",type:"clear_inbox",priority:"high",title:"Your Inbox Needs Attention",description:"You have ".concat(n.length," items in your inbox. Let's organize them efficiently."),actionData:{itemCount:n.length},reasoning:"Large inbox can reduce productivity and make finding content harder.",dismissible:!1,estimatedTime:"10-15 min",confidence:.9,category:"organization"}),i=cr(t.slice(0,2));try{for(i.s();!(a=i.n()).done;)(o=a.value).confidence>.7&&r.push({id:"create_collection_".concat(o.theme.replace(/\s+/g,"_")),type:"create_collection",priority:"medium",title:"Organize ".concat(o.theme),description:'Create a "'.concat(o.suggestedCollectionName,'" collection for your ').concat(o.links.length," related items."),actionData:{cluster:o,suggestedName:o.suggestedCollectionName,linkIds:o.links.map(function(e){return e.id})},reasoning:"These ".concat(o.links.length," items share a common theme and would benefit from organization."),dismissible:!0,estimatedTime:"2-3 min",confidence:o.confidence,category:"organization"})}catch(e){i.e(e)}finally{i.f()}return e.a(2,r)}},e)})),function(e,t){return u.apply(this,arguments)})},{key:"generateMaintenanceSuggestions",value:(c=mr(ur().m(function e(t,n){var r,i,a;return ur().w(function(e){for(;;)if(0===e.n)return r=[],t.length>0&&((i=t.filter(function(e){return e.staleness>.8})).length>0&&r.push({id:"archive_stale_content",type:"archive",priority:"medium",title:"Archive Old Content",description:"".concat(i.length," items haven't been accessed in a while and could be archived."),actionData:{staleItems:i},reasoning:"Archiving stale content helps keep your active workspace clean and focused.",dismissible:!0,estimatedTime:"5 min",confidence:.8,category:"maintenance"}),(a=t.filter(function(e){return"never_accessed"===e.reason})).length>=3&&r.push({id:"review_never_accessed",type:"review_highlights",priority:"low",title:"Review Unread Items",description:"You have ".concat(a.length," items you've saved but never opened. Worth a quick review?"),actionData:{items:a.slice(0,5)},reasoning:"These might contain valuable insights or could be safely archived.",dismissible:!0,estimatedTime:"10 min",confidence:.6,category:"maintenance"})),e.a(2,r)},e)})),function(e,t){return c.apply(this,arguments)})},{key:"generateProductivitySuggestions",value:(s=mr(ur().m(function e(t,n){var r,i,a,o;return ur().w(function(e){for(;;)switch(e.n){case 0:return r=[],e.n=1,en.getActivities(10);case 1:return i=e.v,(a=i[0])&&(o=Math.floor((Date.now()-new Date(a.createdAt).getTime())/864e5))>=1.5*t.organizationFrequency&&r.push({id:"digest_old_content",type:"digest_old",priority:"low",title:"Catch Up on Your Content",description:"It's been ".concat(o," days since your last organization session. Want a digest of what you've saved?"),actionData:{daysSince:o},reasoning:"Regular content review helps maintain knowledge retention and organization.",dismissible:!0,estimatedTime:"5-10 min",confidence:.7,category:"productivity"}),e.a(2,r)}},e)})),function(e,t){return s.apply(this,arguments)})},{key:"generateLearningEnhancementSuggestions",value:(o=mr(ur().m(function e(t){var n,r;return ur().w(function(e){for(;;)if(0===e.n)return n=[],(r=t.links.reduce(function(e,t){var n;return e+((null===(n=t.highlights)||void 0===n?void 0:n.length)||0)},0))>5&&n.push({id:"review_highlights_learning",type:"review_highlights",priority:"medium",title:"Review Your Highlights",description:"You have ".concat(r," highlights across your saved content. Perfect for a quick review session!"),actionData:{highlightCount:r},reasoning:"Regular highlight review reinforces learning and helps identify knowledge patterns.",dismissible:!0,estimatedTime:"8-12 min",confidence:.8,category:"learning"}),e.a(2,n)},e)})),function(e){return o.apply(this,arguments)})},{key:"generateReadingFocusedSuggestions",value:(a=mr(ur().m(function e(){var t,n=this;return ur().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,or.getReadingRecommendations(5);case 1:return t=e.v,e.a(2,t.slice(0,3).map(function(e,t){return{id:"focused_read_".concat(e.id),type:"read_next",priority:0===t?"high":"medium",title:"Perfect Time to Read",description:'"'.concat(e.title,'" - matches your current reading preferences.'),actionData:{linkId:e.id,link:e},reasoning:"This is one of your preferred reading times.",dismissible:!0,estimatedTime:n.estimateReadingTime(e),confidence:.8,category:"learning"}}))}},e)})),function(){return a.apply(this,arguments)})},{key:"generateOrganizationFocusedSuggestions",value:(i=mr(ur().m(function e(){var t;return ur().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,or.detectContentClusters();case 1:return t=e.v,e.a(2,t.slice(0,2).map(function(e){return{id:"organize_".concat(e.theme.replace(/\s+/g,"_")),type:"organize",priority:"medium",title:"Quick Organization",description:"Organize your ".concat(e.links.length," ").concat(e.theme," items."),actionData:{cluster:e},reasoning:"Good time for organization tasks during non-reading hours.",dismissible:!0,estimatedTime:"3-5 min",confidence:e.confidence,category:"organization"}}))}},e)})),function(){return i.apply(this,arguments)})},{key:"generateInboxSummary",value:function(e){var t=e.reduce(function(e,t){var n=t.category||"general";return e[n]=(e[n]||0)+1,e},{}),n=new Date,r=hr(e).sort(function(e,t){return new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime()}),i=e.reduce(function(e,t){return e+Math.floor((n.getTime()-new Date(t.createdAt).getTime())/864e5)},0);return{totalItems:e.length,itemsByCategory:t,stalestItem:r[0]||null,newestItem:r[r.length-1]||null,avgDaysInInbox:e.length>0?Math.round(i/e.length):0,recommendedActions:this.generateRecommendedActions(e)}}},{key:"planBatchActions",value:function(e,t,n){var r=[],i=t.filter(function(e){return e.staleness>.8});i.length>0&&r.push({action:"archive",items:i.map(function(e){return e.link}),reason:"Content is stale and hasn't been accessed recently"});var a,o=cr(n);try{for(o.s();!(a=o.n()).done;){var s=a.value;s.confidence>.7&&s.links.length>=3&&r.push({action:"organize",items:s.links,reason:"Group related ".concat(s.theme," content into a collection")})}}catch(e){o.e(e)}finally{o.f()}return r}},{key:"estimateProcessingTime",value:function(e){var t=e.reduce(function(e,t){return e+t.items.length},0),n=Math.max(2,Math.ceil(t/5));return n<5?"".concat(n," min"):n<15?"".concat(n,"-").concat(n+3," min"):"15+ min"}},{key:"generateBatchActionSummary",value:function(e){return e.success?"Successfully processed ".concat(e.itemsProcessed," items. ").concat(e.itemsArchived," items were organized or archived."):"Processed ".concat(e.itemsProcessed," items with ").concat(e.errors.length," errors. Some items may need manual attention.")}},{key:"generateRecommendedActions",value:function(e){var t=[];return e.length>15&&t.push("Use batch actions to quickly organize multiple items"),e.length>5&&(t.push("Create collections for related content"),t.push("Archive items you're no longer interested in")),t.push("Review and tag important items"),t.push("Add notes to items you want to remember"),t}},{key:"estimateReadingTime",value:function(e){var t=e.domain.toLowerCase();return t.includes("youtube.com")?"10-20 min":t.includes("twitter.com")?"2 min":t.includes("github.com")?"5-15 min":t.includes("medium.com")?"8-12 min":t.includes("stackoverflow.com")?"3-5 min":"5-10 min"}},{key:"priorityScore",value:function(e){return{urgent:4,high:3,medium:2,low:1}[e.priority]*e.confidence}},{key:"getFallbackSuggestions",value:function(){return[{id:"fallback_organize",type:"organize",priority:"medium",title:"Organize Your Content",description:"Take a few minutes to organize your saved items.",actionData:{},reasoning:"Regular organization improves content discoverability.",dismissible:!0,estimatedTime:"5 min",confidence:.5,category:"organization"}]}}],r=[{key:"getInstance",value:function(){return e.instance||(e.instance=new e),e.instance}}],n&&vr(t.prototype,n),r&&vr(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n,r,i,a,o,s,c,u,l,h,d,f,p}().getInstance();function wr(e){return wr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wr(e)}function kr(e){return function(e){if(Array.isArray(e))return Tr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Ar(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(e,t)||Ar(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sr(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=Ar(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function Ar(e,t){if(e){if("string"==typeof e)return Tr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Tr(e,t):void 0}}function Tr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Ir(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return jr(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(jr(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,jr(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,jr(h,"constructor",u),jr(u,"constructor",c),c.displayName="GeneratorFunction",jr(u,i,"GeneratorFunction"),jr(h),jr(h,i,"Generator"),jr(h,r,function(){return this}),jr(h,"toString",function(){return"[object Generator]"}),(Ir=function(){return{w:a,m:d}})()}function jr(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}jr=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){jr(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},jr(e,t,n,r)}function Or(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function Pr(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){Or(a,r,i,o,s,"next",e)}function s(e){Or(a,r,i,o,s,"throw",e)}o(void 0)})}}function Er(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Cr(r.key),r)}}function Cr(e){var t=function(e){if("object"!=wr(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=wr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==wr(t)?t:t+""}var xr=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return t=e,n=[{key:"findDuplicates",value:(f=Pr(Ir().m(function e(){var t,n,r,i,a,o,s,c,u,l,h,d;return Ir().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,en.getData();case 1:if(t=e.v,!((n=t.links).length<2)){e.n=2;break}return e.a(2,[]);case 2:r=[],i=new Set,a=0;case 3:if(!(a<n.length)){e.n=9;break}o=a+1;case 4:if(!(o<n.length)){e.n=8;break}if(s=n[a],c=n[o],u="".concat(s.id,"_").concat(c.id),!i.has(u)){e.n=5;break}return e.a(3,7);case 5:return i.add(u),e.n=6,this.calculateSimilarity(s,c);case 6:(l=e.v).score>.3&&(h={originalId:s.id,duplicateId:c.id,similarity:l.score,similarityReasons:l.reasons,mergeRecommendation:this.determineMergeRecommendation(l.score,l.reasons),confidence:l.confidence},r.push(h));case 7:o++,e.n=4;break;case 8:a++,e.n=3;break;case 9:return e.a(2,r.sort(function(e,t){return t.similarity-e.similarity}));case 10:return e.p=10,d=e.v,console.error("Failed to find duplicates:",d),e.a(2,[])}},e,this,[[0,10]])})),function(){return f.apply(this,arguments)})},{key:"calculateSimilarity",value:(d=Pr(Ir().m(function e(t,n){var r,i,a,o,s,c,u,l,h,d;return Ir().w(function(e){for(;;)switch(e.n){case 0:return r=[],i=0,a=0,o=this.compareUrls(t.url,n.url),i+=.4*o,a+=.4,o>.1&&r.push("URLs are ".concat(Math.round(100*o),"% similar")),s=this.compareTexts(t.title,n.title),i+=.3*s,a+=.3,s>.3&&r.push("Titles are ".concat(Math.round(100*s),"% similar")),c=t.domain===n.domain?1:0,i+=.15*c,a+=.15,c&&r.push("Same domain"),u=this.compareTexts(t.aiSummary||"",n.aiSummary||""),i+=.1*u,a+=.1,u>.5&&r.push("Content summaries are ".concat(Math.round(100*u),"% similar")),e.n=1,this.compareTagSimilarity(t.id,n.id);case 1:return l=e.v,i+=.05*l,a+=.05,l>.3&&r.push("Share ".concat(Math.round(100*l),"% of tags")),h=a>0?i/a:0,d=.5,t.aiSummary&&n.aiSummary&&(d+=.2),r.length>2&&(d+=.2),o>.8&&(d+=.1),e.a(2,{score:Math.min(h,1),reasons:r,confidence:Math.min(d,1)})}},e,this)})),function(e,t){return d.apply(this,arguments)})},{key:"suggestMergeStrategy",value:(h=Pr(Ir().m(function e(t){var n,r,i,a,o,s,c,u,l,h,d,f,p,g,m,v;return Ir().w(function(e){for(;;)switch(e.n){case 0:n=[],r=Sr(t),e.p=1,r.s();case 2:if((i=r.n()).done){e.n=9;break}return a=i.value,e.p=3,e.n=4,Promise.all([this.getLinkById(a.originalId),this.getLinkById(a.duplicateId)]);case 4:if(o=e.v,s=_r(o,2),c=s[0],u=s[1],c&&u){e.n=5;break}return e.a(3,8);case 5:return h="auto"===a.mergeRecommendation?"merge":"keep_both",d=this.choosePrimaryLink(c,u),f=this.choosePrimaryLink(c,u)===c.id?u.id:c.id,e.n=6,this.determineMergeStrategy(c,u);case 6:p=e.v,g=this.generateMergeReasoning(a,c,u),l={type:h,primaryLinkId:d,duplicateLinkId:f,mergeStrategy:p,reasoning:g},n.push(l),e.n=8;break;case 7:e.p=7,m=e.v,console.error("Failed to suggest merge strategy for candidate:",m);case 8:e.n=2;break;case 9:e.n=11;break;case 10:e.p=10,v=e.v,r.e(v);case 11:return e.p=11,r.f(),e.f(11);case 12:return e.a(2,n)}},e,this,[[3,7],[1,10,11,12]])})),function(e){return h.apply(this,arguments)})},{key:"executeMerge",value:(l=Pr(Ir().m(function e(t){var n,r,i,a,o,s;return Ir().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Promise.all([this.getLinkById(t.primaryLinkId),this.getLinkById(t.duplicateLinkId)]);case 1:if(n=e.v,r=_r(n,2),i=r[0],a=r[1],i&&a){e.n=2;break}return e.a(2,{success:!1,error:"One or both links not found",summary:"Merge failed: links not found"});case 2:return e.n=3,this.createMergedLink(i,a,t.mergeStrategy);case 3:return o=e.v,e.n=4,en.updateLink(t.primaryLinkId,o);case 4:return e.n=5,this.updateCollectionReferences(t.duplicateLinkId,t.primaryLinkId);case 5:return e.n=6,en.deleteLink(t.duplicateLinkId);case 6:return e.n=7,en.logActivity("organize",t.primaryLinkId,void 0,{action:"merge_duplicate",mergedFromId:t.duplicateLinkId,strategy:t.mergeStrategy,automated:!0});case 7:return e.a(2,{success:!0,mergedLinkId:t.primaryLinkId,deletedLinkId:t.duplicateLinkId,summary:'Successfully merged "'.concat(a.title,'" into "').concat(i.title,'"')});case 8:return e.p=8,s=e.v,console.error("Failed to execute merge:",s),e.a(2,{success:!1,error:s.message||"Merge execution failed",summary:"Merge operation failed"})}},e,this,[[0,8]])})),function(e){return l.apply(this,arguments)})},{key:"getDuplicateStats",value:(u=Pr(Ir().m(function e(){var t,n,r;return Ir().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.findDuplicates();case 1:return t=e.v,n={totalDuplicates:t.length,highConfidenceDuplicates:t.filter(function(e){return e.confidence>.8}).length,autoMergeable:t.filter(function(e){return"auto"===e.mergeRecommendation}).length,manualReviewNeeded:t.filter(function(e){return"manual"===e.mergeRecommendation}).length,spaceRecoverable:"".concat(t.length," links")},e.a(2,n);case 2:return e.p=2,r=e.v,console.error("Failed to get duplicate stats:",r),e.a(2,{totalDuplicates:0,highConfidenceDuplicates:0,autoMergeable:0,manualReviewNeeded:0,spaceRecoverable:"0 links"})}},e,this,[[0,2]])})),function(){return u.apply(this,arguments)})},{key:"compareUrls",value:function(e,t){try{var n=new URL(e),r=new URL(t);return e===t?1:n.hostname===r.hostname&&n.pathname===r.pathname?.9:n.hostname===r.hostname?.3+.4*this.compareTexts(n.pathname,r.pathname):this.isLikelyRedirect(e,t)?.8:0}catch(n){return this.compareTexts(e,t)}}},{key:"compareTexts",value:function(e,t){if(!e||!t)return 0;var n=e.toLowerCase().trim(),r=t.toLowerCase().trim();if(n===r)return 1;var i=Math.max(n.length,r.length),a=this.levenshteinDistance(n,r);return Math.max(0,1-a/i)}},{key:"levenshteinDistance",value:function(e,t){for(var n=Array(t.length+1).fill(null).map(function(){return Array(e.length+1).fill(null)}),r=0;r<=e.length;r++)n[0][r]=r;for(var i=0;i<=t.length;i++)n[i][0]=i;for(var a=1;a<=t.length;a++)for(var o=1;o<=e.length;o++){var s=e[o-1]===t[a-1]?0:1;n[a][o]=Math.min(n[a][o-1]+1,n[a-1][o]+1,n[a-1][o-1]+s)}return n[t.length][e.length]}},{key:"compareTagSimilarity",value:(c=Pr(Ir().m(function e(t,n){var r,i,a,o,s,c,u,l;return Ir().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Promise.all([en.getLinkTags(t),en.getLinkTags(n)]);case 1:if(r=e.v,i=_r(r,2),a=i[0],o=i[1],0!==a.length||0!==o.length){e.n=2;break}return e.a(2,0);case 2:if(0!==a.length&&0!==o.length){e.n=3;break}return e.a(2,0);case 3:return s=new Set(a.map(function(e){return e.name.toLowerCase()})),c=new Set(o.map(function(e){return e.name.toLowerCase()})),u=new Set(kr(s).filter(function(e){return c.has(e)})),l=new Set([].concat(kr(s),kr(c))),e.a(2,u.size/l.size);case 4:return e.p=4,e.v,e.a(2,0)}},e,null,[[0,4]])})),function(e,t){return c.apply(this,arguments)})},{key:"isLikelyRedirect",value:function(e,t){var n=["bit.ly","tinyurl.com","t.co","goo.gl","ow.ly","short.link"];try{var r=new URL(e).hostname,i=new URL(t).hostname;return n.includes(r)||n.includes(i)}catch(e){return!1}}},{key:"determineMergeRecommendation",value:function(e,t){return e>.8&&t.some(function(e){return e.includes("URLs are")&&e.includes("90%")})?"auto":e>.5?"manual":"skip"}},{key:"choosePrimaryLink",value:function(e,t){var n=this.calculateLinkRichness(e),r=this.calculateLinkRichness(t);return n!==r?n>r?e.id:t.id:e.createdAt<=t.createdAt?e.id:t.id}},{key:"calculateLinkRichness",value:function(e){var t=0;return e.userNote&&e.userNote.trim()&&(t+=3),e.aiSummary&&(t+=2),e.highlights&&e.highlights.length>0&&(t+=e.highlights.length),t}},{key:"determineMergeStrategy",value:(s=Pr(Ir().m(function e(t,n){var r,i;return Ir().w(function(e){for(;;)if(0===e.n)return r=this.calculateLinkRichness(t)>=this.calculateLinkRichness(n)?t:n,i=r.id===t.id,e.a(2,{title:i?"primary":"duplicate",notes:t.userNote&&n.userNote?"combined":i?"primary":"duplicate",tags:"union",highlights:"union",collections:"primary"})},e,this)})),function(e,t){return s.apply(this,arguments)})},{key:"generateMergeReasoning",value:function(e,t,n){var r=Math.round(100*e.similarity),i=e.similarityReasons.join(", "),a=this.choosePrimaryLink(t,n)===t.id?t:n;return"".concat(r,"% similarity detected (").concat(i,'). Merging into "').concat(a.title,'" as it has more content.')}},{key:"createMergedLink",value:(o=Pr(Ir().m(function e(t,n,r){var i,a,o,s,c,u,l,h,d;return Ir().w(function(e){for(;;)switch(e.n){case 0:if(i={},"combined"===r.title?i.title="".concat(t.title," | ").concat(n.title):"duplicate"===r.title&&(i.title=n.title),"combined"===r.notes?(a=[t.userNote,n.userNote].filter(Boolean),i.userNote=a.join("\n\n---\n\n")):"duplicate"===r.notes&&(i.userNote=n.userNote),"union"===r.highlights?(o=[].concat(kr(t.highlights||[]),kr(n.highlights||[])),i.highlights=o):"duplicate"===r.highlights&&(i.highlights=n.highlights),"union"!==r.tags){e.n=5;break}return e.p=1,e.n=2,Promise.all([en.getLinkTags(t.id),en.getLinkTags(n.id)]);case 2:return s=e.v,c=_r(s,2),u=c[0],l=c[1],h=new Set([].concat(kr(u.map(function(e){return e.name})),kr(l.map(function(e){return e.name})))),e.n=3,en.addTagsToLink(t.id,Array.from(h));case 3:e.n=5;break;case 4:e.p=4,d=e.v,console.error("Failed to merge tags:",d);case 5:return e.a(2,i)}},e,null,[[1,4]])})),function(e,t,n){return o.apply(this,arguments)})},{key:"updateCollectionReferences",value:(a=Pr(Ir().m(function e(t,n){return Ir().w(function(e){for(;;)switch(e.n){case 0:case 1:return e.a(2)}},e)})),function(e,t){return a.apply(this,arguments)})},{key:"getLinkById",value:(i=Pr(Ir().m(function e(t){var n,r;return Ir().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,en.getData();case 1:return n=e.v,e.a(2,n.links.find(function(e){return e.id===t})||null);case 2:return e.p=2,r=e.v,console.error("Failed to get link by ID:",r),e.a(2,null)}},e,null,[[0,2]])})),function(e){return i.apply(this,arguments)})}],r=[{key:"getInstance",value:function(){return e.instance||(e.instance=new e),e.instance}}],n&&Er(t.prototype,n),r&&Er(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n,r,i,a,o,s,c,u,l,h,d,f}().getInstance();function Dr(e){return Dr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dr(e)}function Rr(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(Dr(e)+" is not iterable")}function Lr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Ur(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Lr(Object(n),!0).forEach(function(t){Hr(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Lr(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Nr(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=zr(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function $r(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return Mr(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(Mr(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Mr(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,Mr(h,"constructor",u),Mr(u,"constructor",c),c.displayName="GeneratorFunction",Mr(u,i,"GeneratorFunction"),Mr(h),Mr(h,i,"Generator"),Mr(h,r,function(){return this}),Mr(h,"toString",function(){return"[object Generator]"}),($r=function(){return{w:a,m:d}})()}function Mr(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}Mr=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){Mr(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},Mr(e,t,n,r)}function Br(e){return function(e){if(Array.isArray(e))return qr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||zr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Fr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(e,t)||zr(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zr(e,t){if(e){if("string"==typeof e)return qr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qr(e,t):void 0}}function qr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Gr(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function Kr(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){Gr(a,r,i,o,s,"next",e)}function s(e){Gr(a,r,i,o,s,"throw",e)}o(void 0)})}}function Wr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Jr(r.key),r)}}function Hr(e,t,n){return(t=Jr(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Jr(e){var t=function(e){if("object"!=Dr(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Dr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Dr(t)?t:t+""}var Vr=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Hr(this,"WAYBACK_CDX_API","https://web.archive.org/cdx/search/cdx"),Hr(this,"WAYBACK_BASE_URL","https://web.archive.org/web/"),Hr(this,"GOOGLE_CACHE_BASE","https://webcache.googleusercontent.com/search?q=cache:"),Hr(this,"ARCHIVE_TODAY_API","https://archive.today/")}return t=e,n=[{key:"findArchivedVersions",value:(g=Kr($r().m(function e(t,n){var r,i,a,o,s,c,u,l;return $r().w(function(e){for(;;)switch(e.n){case 0:return r={originalUrl:t,linkId:n||"",versions:[],lastChecked:(new Date).toISOString(),status:"checking"},e.p=1,e.n=2,Promise.allSettled([this.checkWaybackMachine(t),this.checkGoogleCache(t),this.checkArchiveToday(t)]);case 2:if(i=e.v,a=Fr(i,3),o=a[0],s=a[1],c=a[2],"fulfilled"===o.status&&(u=r.versions).push.apply(u,Br(o.value)),"fulfilled"===s.status&&s.value&&r.versions.push(s.value),"fulfilled"===c.status&&c.value&&r.versions.push(c.value),r.versions.sort(function(e,t){return new Date(t.timestamp).getTime()-new Date(e.timestamp).getTime()}),r.bestVersion=r.versions.find(function(e){return"available"===e.status}),r.status=r.versions.length>0?"found":"not_found",!n){e.n=3;break}return e.n=3,this.cacheArchiveResult(n,r);case 3:return e.a(2,r);case 4:return e.p=4,l=e.v,console.error("Failed to find archived versions:",l),r.status="error",e.a(2,r)}},e,this,[[1,4]])})),function(e,t){return g.apply(this,arguments)})},{key:"batchFindArchives",value:(p=Kr($r().m(function e(t){var n,r,i,a,o,s,c,u=this;return $r().w(function(e){for(;;)switch(e.n){case 0:return n=[],r=3,e.p=1,e.n=2,en.getData();case 2:i=e.v,a=0;case 3:if(!(a<t.length)){e.n=6;break}return o=t.slice(a,a+r),s=o.map(function(){var e=Kr($r().m(function e(t){var n,r;return $r().w(function(e){for(;;)switch(e.n){case 0:if(n=i.links.find(function(e){return e.id===t})){e.n=1;break}return e.a(2,null);case 1:return e.n=2,u.getCachedArchiveResult(t);case 2:if(!(r=e.v)||!u.isCacheValid(r.lastChecked)){e.n=3;break}return e.a(2,r);case 3:return e.n=4,u.findArchivedVersions(n.url,t);case 4:return e.a(2,e.v)}},e)}));return function(t){return e.apply(this,arguments)}}()),e.n=4,Promise.allSettled(s);case 4:if(e.v.forEach(function(e){"fulfilled"===e.status&&e.value&&n.push(e.value)}),!(a+r<t.length)){e.n=5;break}return e.n=5,this.delay(2e3);case 5:a+=r,e.n=3;break;case 6:return e.a(2,n);case 7:return e.p=7,c=e.v,console.error("Failed to batch find archives:",c),e.a(2,n)}},e,this,[[1,7]])})),function(e){return p.apply(this,arguments)})},{key:"getArchiveStats",value:(f=Kr($r().m(function e(){var t,n,r,i,a,o,s,c,u,l;return $r().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,en.getData();case 1:t=e.v,n=t.links.filter(function(e){return!1}),r=0,i=Nr(n.slice(0,10)),e.p=2,i.s();case 3:if((a=i.n()).done){e.n=6;break}return o=a.value,e.n=4,this.getCachedArchiveResult(o.id);case 4:(s=e.v)&&"found"===s.status&&r++;case 5:e.n=3;break;case 6:e.n=8;break;case 7:e.p=7,u=e.v,i.e(u);case 8:return e.p=8,i.f(),e.f(8);case 9:return c=n.length>0?r/Math.min(n.length,10)*100:0,e.a(2,{totalDeadLinks:n.length,archivedVersionsFound:r,recoveryRate:c,lastScanDate:(new Date).toISOString()});case 10:return e.p=10,l=e.v,console.error("Failed to get archive stats:",l),e.a(2,{totalDeadLinks:0,archivedVersionsFound:0,recoveryRate:0,lastScanDate:(new Date).toISOString()})}},e,this,[[2,7,8,9],[0,10]])})),function(){return f.apply(this,arguments)})},{key:"replaceWithArchivedVersion",value:(d=Kr($r().m(function e(t,n){var r,i,a,o,s,c;return $r().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,n){e.n=2;break}return e.n=1,this.findArchivedVersions("",t);case 1:r=e.v,n=r.bestVersion;case 2:if(n){e.n=3;break}return e.a(2,!1);case 3:return a=n.archivedUrl,o=new URL(n.archivedUrl).hostname,e.n=4,this.addArchiveNote(t,n);case 4:return s=e.v,i={url:a,domain:o,userNote:s},e.n=5,en.updateLink(t,i);case 5:return e.n=6,en.logActivity("organize",t,void 0,{action:"archive_recovery",archiveService:n.service,originalUrl:n.url,archivedUrl:n.archivedUrl,automated:!0});case 6:return e.a(2,!0);case 7:return e.p=7,c=e.v,console.error("Failed to replace with archived version:",c),e.a(2,!1)}},e,this,[[0,7]])})),function(e,t){return d.apply(this,arguments)})},{key:"checkWaybackMachine",value:(h=Kr($r().m(function e(t){var n,r,i,a,o,s,c,u,l,h,d,f,p;return $r().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,n=encodeURIComponent(t),r="".concat(this.WAYBACK_CDX_API,"?url=").concat(n,"&output=json&limit=5&sort=timestamp:desc"),e.n=1,fetch(r,{method:"GET",headers:{Accept:"application/json"}});case 1:if((i=e.v).ok){e.n=2;break}throw new Error("Wayback Machine API error");case 2:return e.n=3,i.json();case 3:if(a=e.v,o=[],a.length>1)for(s=1;s<a.length;s++)(c=Fr(a[s],7))[0],u=c[1],l=c[2],c[3],h=c[4],c[5],c[6],"200"===h&&(d="".concat(this.WAYBACK_BASE_URL).concat(u,"/").concat(l),f=this.parseWaybackTimestamp(u),o.push({url:l,archivedUrl:d,service:"wayback",timestamp:f.toISOString(),status:"available"}));return e.a(2,o);case 4:return e.p=4,p=e.v,console.error("Wayback Machine check failed:",p),e.a(2,[])}},e,this,[[0,4]])})),function(e){return h.apply(this,arguments)})},{key:"checkGoogleCache",value:(l=Kr($r().m(function e(t){var n,r;return $r().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,n="".concat(this.GOOGLE_CACHE_BASE).concat(encodeURIComponent(t)),e.a(2,{url:t,archivedUrl:n,service:"google_cache",timestamp:(new Date).toISOString(),status:"checking"});case 1:return e.p=1,r=e.v,console.error("Google Cache check failed:",r),e.a(2,null)}},e,this,[[0,1]])})),function(e){return l.apply(this,arguments)})},{key:"checkArchiveToday",value:(u=Kr($r().m(function e(t){var n,r;return $r().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,n="".concat(this.ARCHIVE_TODAY_API).concat(encodeURIComponent(t)),e.a(2,{url:t,archivedUrl:n,service:"archive_today",timestamp:(new Date).toISOString(),status:"checking"});case 1:return e.p=1,r=e.v,console.error("Archive.today check failed:",r),e.a(2,null)}},e,this,[[0,1]])})),function(e){return u.apply(this,arguments)})},{key:"parseWaybackTimestamp",value:function(e){var t=parseInt(e.substr(0,4)),n=parseInt(e.substr(4,2))-1,r=parseInt(e.substr(6,2)),i=parseInt(e.substr(8,2))||0,a=parseInt(e.substr(10,2))||0,o=parseInt(e.substr(12,2))||0;return new Date(t,n,r,i,a,o)}},{key:"addArchiveNote",value:(c=Kr($r().m(function e(t,n){var r,i,a,o;return $r().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,en.getData();case 1:if(r=e.v,i=r.links.find(function(e){return e.id===t})){e.n=2;break}return e.a(2,"");case 2:return a="\n\n[RECOVERED] This link was recovered from ".concat(n.service," on ").concat((new Date).toLocaleDateString(),". Original URL: ").concat(n.url),e.a(2,(i.userNote||"")+a);case 3:return e.p=3,o=e.v,console.error("Failed to add archive note:",o),e.a(2,"")}},e,null,[[0,3]])})),function(e,t){return c.apply(this,arguments)})},{key:"cacheArchiveResult",value:(s=Kr($r().m(function e(t,n){var r,i;return $r().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,r="archive_".concat(t),e.n=1,chrome.storage.local.set(Hr({},r,Ur(Ur({},n),{},{cachedAt:(new Date).toISOString()})));case 1:e.n=3;break;case 2:e.p=2,i=e.v,console.error("Failed to cache archive result:",i);case 3:return e.a(2)}},e,null,[[0,2]])})),function(e,t){return s.apply(this,arguments)})},{key:"getCachedArchiveResult",value:(o=Kr($r().m(function e(t){var n,r,i;return $r().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,n="archive_".concat(t),e.n=1,chrome.storage.local.get(n);case 1:return r=e.v,e.a(2,r[n]||null);case 2:return e.p=2,i=e.v,console.error("Failed to get cached archive result:",i),e.a(2,null)}},e,null,[[0,2]])})),function(e){return o.apply(this,arguments)})},{key:"isCacheValid",value:function(e){return Date.now()-new Date(e).getTime()<6048e5}},{key:"delay",value:function(e){return new Promise(function(t){return setTimeout(t,e)})}},{key:"clearArchiveCache",value:(a=Kr($r().m(function e(t){var n,r,i,a;return $r().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,!t){e.n=2;break}return n="archive_".concat(t),e.n=1,chrome.storage.local.remove(n);case 1:e.n=4;break;case 2:return e.n=3,chrome.storage.local.get(null);case 3:return r=e.v,i=Object.keys(r).filter(function(e){return e.startsWith("archive_")}),e.n=4,chrome.storage.local.remove(i);case 4:e.n=6;break;case 5:e.p=5,a=e.v,console.error("Failed to clear archive cache:",a);case 6:return e.a(2)}},e,null,[[0,5]])})),function(e){return a.apply(this,arguments)})},{key:"getRecoverySuggestions",value:(i=Kr($r().m(function e(t){var n,r,i,a,o,s,c,u,l=this;return $r().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,en.getData();case 1:n=e.v,r=[],i=Nr(t.slice(0,5)),e.p=2,o=$r().m(function e(){var t,i,o,s;return $r().w(function(e){for(;;)switch(e.n){case 0:if(t=a.value,i=n.links.find(function(e){return e.id===t})){e.n=1;break}return e.a(2,1);case 1:return e.n=2,l.findArchivedVersions(i.url,t);case 2:(o=e.v).versions.length>0&&(s="low",i.highlights&&i.highlights.length>0?s="high":i.userNote&&(s="medium"),r.push({linkId:t,title:i.title,originalUrl:i.url,suggestions:o.versions.slice(0,3),priority:s}));case 3:return e.a(2)}},e)}),i.s();case 3:if((a=i.n()).done){e.n=6;break}return e.d(Rr(o()),4);case 4:if(!e.v){e.n=5;break}return e.a(3,5);case 5:e.n=3;break;case 6:e.n=8;break;case 7:e.p=7,c=e.v,i.e(c);case 8:return e.p=8,i.f(),e.f(8);case 9:return s={high:3,medium:2,low:1},r.sort(function(e,t){return s[t.priority]-s[e.priority]}),e.a(2,r);case 10:return e.p=10,u=e.v,console.error("Failed to get recovery suggestions:",u),e.a(2,[])}},e,null,[[2,7,8,9],[0,10]])})),function(e){return i.apply(this,arguments)})}],r=[{key:"getInstance",value:function(){return e.instance||(e.instance=new e),e.instance}}],n&&Wr(t.prototype,n),r&&Wr(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n,r,i,a,o,s,c,u,l,h,d,f,p,g}().getInstance();function Yr(e){return Yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yr(e)}function Qr(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=ei(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,a=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}function Xr(e){return function(e){if(Array.isArray(e))return ti(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ei(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,o,s=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return s}}(e,t)||ei(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ei(e,t){if(e){if("string"==typeof e)return ti(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ti(e,t):void 0}}function ti(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function ni(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function ri(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ni(Object(n),!0).forEach(function(t){ii(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ni(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function ii(e,t,n){return(t=function(e){var t=function(e){if("object"!=Yr(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Yr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Yr(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ai(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function a(n,r,i,a){var c=r&&r.prototype instanceof s?r:s,u=Object.create(c.prototype);return oi(u,"_invoke",function(n,r,i){var a,s,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return a=t,s=0,c=e,d.n=n,o}};function f(n,r){for(s=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,a=l[t],f=d.p,p=a[2];n>3?(i=p===r)&&(c=a[(s=a[4])?5:(s=3,3)],a[4]=a[5]=e):a[0]<=f&&((i=n<2&&f<a[1])?(s=0,d.v=r,d.n=a[1]):f<p&&(i=n<3||a[0]>r||r>p)&&(a[4]=n,a[5]=r,d.n=p,s=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),s=l,c=p;(t=s<2?e:c)||!h;){a||(s?s<3?(s>1&&(d.n=-1),f(s,c)):d.n=c:d.v=c);try{if(u=2,a){if(s||(i="next"),t=a[i]){if(!(t=t.call(a,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,s<2&&(s=0)}else 1===s&&(t=a.return)&&t.call(a),s<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),s=1);a=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){a=e,s=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,a),!0),u}var o={};function s(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(oi(t={},r,function(){return this}),t),h=u.prototype=s.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,oi(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,oi(h,"constructor",u),oi(u,"constructor",c),c.displayName="GeneratorFunction",oi(u,i,"GeneratorFunction"),oi(h),oi(h,i,"Generator"),oi(h,r,function(){return this}),oi(h,"toString",function(){return"[object Generator]"}),(ai=function(){return{w:a,m:d}})()}function oi(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}oi=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){oi(e,t,function(e){return this._invoke(t,n,e)})};a("next",0),a("throw",1),a("return",2)}},oi(e,t,n,r)}function si(e,t,n,r,i,a,o){try{var s=e[a](o),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function ci(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var a=e.apply(t,n);function o(e){si(a,r,i,o,s,"next",e)}function s(e){si(a,r,i,o,s,"throw",e)}o(void 0)})}}function ui(e,t){return li.apply(this,arguments)}function li(){return(li=ci(ai().m(function e(t,n){var r,i,a,o,s,c,u,l,h,d,f,p,g,m,v,y,b,w,k,_,S,A,T,I,j,O,P;return ai().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,l=n||t.url,h=t.title||"Untitled",l&&!l.startsWith("chrome://")&&!l.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot save this type of page."});case 1:if(d="",f=null,!t.id){e.n=8;break}return e.p=2,e.n=3,chrome.tabs.sendMessage(t.id,{action:"getEnhancedPageContent"});case 3:if(null==(p=e.v)||!p.enhancedContent){e.n=4;break}f=p.enhancedContent,d=f.content,console.log("Background: Enhanced content extracted:",f.contentType),e.n=6;break;case 4:return e.n=5,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 5:g=e.v,d=(null==g?void 0:g.content)||"",console.log("Background: Basic content extracted");case 6:e.n=8;break;case 7:e.p=7,I=e.v,console.log("Could not extract page content:",I);case 8:return m=new URL(l).hostname,e.n=9,Promise.all([chrome.storage.local.get("nest_settings")]);case 9:return v=e.v,y=Zr(v,1),b=y[0],(w=b.nest_settings||{}).openaiApiKey?(tn.aiService.updateApiKey(w.openaiApiKey),console.log("Background: AI service configured with user API key")):console.log("Background: No OpenAI API key found, using rule-based analysis"),console.log("Background: Starting AI analysis..."),e.n=10,tn.aiService.analyzeContent(d,h,l);case 10:return k=e.v,console.log("Background: AI analysis complete:",k),_="general",w.autoCategorization&&k.categorySuggestions.length>0&&(_=k.categorySuggestions[0].category,console.log("Background: Auto-categorization enabled, using AI category:",_)),S={url:l,title:h,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(m,"&sz=32"),userNote:"",aiSummary:!1!==w.autoSummarize?k.summary:void 0,category:_,domain:m,isInInbox:!0,contentType:(null===(r=f)||void 0===r?void 0:r.contentType)||"webpage",mediaAttachments:null!==(i=f)&&void 0!==i&&i.mediaContent?[f.mediaContent]:void 0,extractedText:null===(a=f)||void 0===a||null===(a=a.mediaContent)||void 0===a?void 0:a.extractedText,videoTimestamp:null===(o=f)||void 0===o||null===(o=o.mediaContent)||void 0===o||null===(o=o.metadata)||void 0===o?void 0:o.timestamp,author:null===(s=f)||void 0===s||null===(s=s.metadata)||void 0===s?void 0:s.author,publishDate:null===(c=f)||void 0===c||null===(c=c.metadata)||void 0===c?void 0:c.publishDate,sourceMetadata:null===(u=f)||void 0===u?void 0:u.metadata},console.log("Background: saveCurrentPage newLink:",JSON.stringify(S)),e.n=11,en.addLink(S);case 11:if(A=e.v,console.log("Background: saveCurrentPage result:",A),A.success){e.n=12;break}throw new Error(A.error||"Failed to save link to database.");case 12:if(!(w.autoTagging&&A.linkId&&k.tagSuggestions.length>0)){e.n=16;break}if(e.p=13,!((T=k.tagSuggestions.filter(function(e){return e.confidence>.6}).map(function(e){return e.tag}).slice(0,5)).length>0)){e.n=14;break}return console.log("Background: Auto-tagging enabled, applying tags:",T),e.n=14,en.addTagsToLink(A.linkId,T);case 14:e.n=16;break;case 15:e.p=15,j=e.v,console.error("Failed to apply auto-tags:",j);case 16:if(!A.linkId){e.n=18;break}return e.n=17,en.logActivity("save",A.linkId,void 0,{domain:m,category:S.category,hasAISummary:!!k.summary,autoTagged:w.autoTagging,autoCategorized:w.autoCategorization});case 17:ji(A.linkId,S,d).catch(function(e){console.error("Background embedding processing failed:",e)});case 18:return chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Saved to Nest",message:'"'.concat(h,'" has been saved with AI suggestions.')}),e.p=19,e.n=20,chrome.runtime.sendMessage({action:"refreshSidebar"});case 20:e.n=22;break;case 21:e.p=21,O=e.v,console.log("Could not send refresh message to sidebar:",O);case 22:return e.a(2,{success:!0,linkId:A.linkId,aiAnalysis:k});case 23:return e.p=23,P=e.v,console.error("Failed to save current page:",P),e.a(2,{success:!1,error:P.message})}},e,null,[[19,21],[13,15],[2,7],[0,23]])}))).apply(this,arguments)}function hi(e){return di.apply(this,arguments)}function di(){return(di=ci(ai().m(function e(t){var n,r,i,a,o,s,c,u,l,h,d;return ai().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,n=t.url,r=t.title||"Untitled",n&&!n.startsWith("chrome://")&&!n.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot analyze this type of page."});case 1:return e.n=2,Promise.all([chrome.storage.local.get("nest_settings")]);case 2:if(i=e.v,a=Zr(i,1),o=a[0],(s=o.nest_settings||{}).openaiApiKey&&(tn.aiService.updateApiKey(s.openaiApiKey),console.log("Background: AI service configured with user API key for analysis")),c="",!t.id){e.n=6;break}return e.p=3,e.n=4,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 4:u=e.v,c=(null==u?void 0:u.content)||"",e.n=6;break;case 5:e.p=5,h=e.v,console.log("Could not extract page content:",h);case 6:return e.n=7,tn.aiService.analyzeContent(c,r,n);case 7:return l=e.v,e.a(2,{success:!0,analysis:l});case 8:return e.p=8,d=e.v,console.error("Failed to analyze page with AI:",d),e.a(2,{success:!1,error:d.message})}},e,null,[[3,5],[0,8]])}))).apply(this,arguments)}function fi(e,t,n){return pi.apply(this,arguments)}function pi(){return(pi=ci(ai().m(function e(t,n,r){var i,a,o,s,c,u;return ai().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,n&&!n.startsWith("chrome://")&&!n.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot analyze this type of URL."});case 1:return e.n=2,Promise.all([chrome.storage.local.get("nest_settings")]);case 2:return i=e.v,a=Zr(i,1),o=a[0],(s=o.nest_settings||{}).openaiApiKey&&(tn.aiService.updateApiKey(s.openaiApiKey),console.log("Background: AI service configured with user API key for link analysis")),e.n=3,tn.aiService.analyzeContent(r,t,n);case 3:return c=e.v,e.a(2,{success:!0,analysis:c});case 4:return e.p=4,u=e.v,console.error("Failed to analyze link content with AI:",u),e.a(2,{success:!1,error:u.message})}},e,null,[[0,4]])}))).apply(this,arguments)}function gi(e,t,n,r){return mi.apply(this,arguments)}function mi(){return(mi=ci(ai().m(function e(t,n,r,i){var a,o,s,c,u,l,h,d,f,p,g,m,v,y,b,w,k,_,S,A,T;return ai().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,a=t.url,o=t.title||"Untitled",a&&!a.startsWith("chrome://")&&!a.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot save highlights from this type of page."});case 1:return e.n=2,en.getLinkByUrl(a);case 2:if(!(s=e.v)){e.n=4;break}return c={id:Date.now().toString(),selectedText:n,context:r,position:i,createdAt:new Date,updatedAt:new Date},u=[].concat(Xr(s.highlights||[]),[c]),e.n=3,en.updateLink(s.id,{highlights:u});case 3:return console.log("Background: Added highlight to existing link"),e.a(2,{success:!0,highlightId:c.id});case 4:return l=new URL(a).hostname,e.n=5,Promise.all([chrome.storage.local.get("nest_settings")]);case 5:if(h=e.v,d=Zr(h,1),f=d[0],(p=f.nest_settings||{}).openaiApiKey&&(tn.aiService.updateApiKey(p.openaiApiKey),console.log("Background: AI service configured with user API key")),g="",!t.id){e.n=9;break}return e.p=6,e.n=7,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 7:m=e.v,g=(null==m?void 0:m.content)||"",e.n=9;break;case 8:e.p=8,S=e.v,console.log("Could not extract page content:",S);case 9:return e.n=10,tn.aiService.analyzeContent(g,o,a);case 10:return v=e.v,y="general",p.autoCategorization&&v.categorySuggestions.length>0&&(y=v.categorySuggestions[0].category,console.log("Background: Auto-categorization enabled, using AI category:",y)),b={id:Date.now().toString(),selectedText:n,context:r,position:i,createdAt:new Date,updatedAt:new Date},w={url:a,title:o,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(l,"&sz=32"),userNote:"",aiSummary:!1!==p.autoSummarize?v.summary:void 0,category:y,domain:l,isInInbox:!0,highlights:[b]},e.n=11,en.addLink(w);case 11:if((k=e.v).success){e.n=12;break}throw new Error(k.error||"Failed to save highlight to database.");case 12:if(!(p.autoTagging&&k.linkId&&v.tagSuggestions.length>0)){e.n=16;break}if(e.p=13,!((_=v.tagSuggestions.filter(function(e){return e.confidence>.6}).map(function(e){return e.tag}).slice(0,5)).length>0)){e.n=14;break}return console.log("Background: Auto-tagging enabled, applying tags:",_),e.n=14,en.addTagsToLink(k.linkId,_);case 14:e.n=16;break;case 15:e.p=15,A=e.v,console.error("Failed to apply auto-tags:",A);case 16:return console.log("Background: Created new link with highlight"),e.a(2,{success:!0,highlightId:b.id});case 17:e.n=19;break;case 18:return e.p=18,T=e.v,console.error("Failed to save highlight:",T),e.a(2,{success:!1,error:T.message});case 19:return e.a(2)}},e,null,[[13,15],[6,8],[0,18]])}))).apply(this,arguments)}function vi(e){return yi.apply(this,arguments)}function yi(){return(yi=ci(ai().m(function e(t){var n,r;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.tabs.sendMessage(t,{action:"getPageContent"});case 1:return n=e.v,e.a(2,{content:(null==n?void 0:n.content)||""});case 2:return e.p=2,r=e.v,console.log("Could not get page content:",r),e.a(2,{content:""})}},e,null,[[0,2]])}))).apply(this,arguments)}function bi(e){return wi.apply(this,arguments)}function wi(){return(wi=ci(ai().m(function e(t){var n,r,i;return ai().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,n=t.url,r=t.title||"Untitled",n&&!n.startsWith("chrome://")&&!n.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot get info for this type of page."});case 1:return e.a(2,{success:!0,pageInfo:{title:r,url:n,domain:new URL(n).hostname,favicon:t.favIconUrl}});case 2:return e.p=2,i=e.v,console.error("Failed to get page info:",i),e.a(2,{success:!1,error:i.message})}},e,null,[[0,2]])}))).apply(this,arguments)}function ki(e,t){return _i.apply(this,arguments)}function _i(){return _i=ci(ai().m(function e(t,n){var r,i,a,o,s,c,u,l,h,d,f,p,g,m,v,y,b,w,k,_=arguments;return ai().w(function(e){for(;;)switch(e.n){case 0:if(r=_.length>2&&void 0!==_[2]?_[2]:[],e.p=1,i=t.url,a=t.title||"Untitled",i&&!i.startsWith("chrome://")&&!i.startsWith("chrome-extension://")){e.n=2;break}return e.a(2,{success:!1,error:"Cannot save this type of page."});case 2:if(o="",!t.id){e.n=6;break}return e.p=3,e.n=4,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 4:s=e.v,o=(null==s?void 0:s.content)||"",e.n=6;break;case 5:e.p=5,y=e.v,console.log("Could not extract page content:",y);case 6:return c=new URL(i).hostname,e.n=7,Promise.all([chrome.storage.local.get("nest_settings")]);case 7:return u=e.v,l=Zr(u,1),h=l[0],(d=h.nest_settings||{}).openaiApiKey&&(tn.aiService.updateApiKey(d.openaiApiKey),console.log("Background: AI service configured with user API key")),e.n=8,tn.aiService.analyzeContent(o,a,i);case 8:return f=e.v,p="general",d.autoCategorization&&f.categorySuggestions.length>0&&(p=f.categorySuggestions[0].category,console.log("Background: Auto-categorization enabled, using AI category:",p)),g={url:i,title:a,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(c,"&sz=32"),userNote:n,aiSummary:!1!==d.autoSummarize?f.summary:void 0,category:p,domain:c,isInInbox:!0},e.n=9,en.addLink(g);case 9:if((m=e.v).success){e.n=10;break}throw new Error(m.error||"Failed to save link to database.");case 10:if(v=Xr(r),d.autoTagging&&f.tagSuggestions.length>0&&(f.tagSuggestions.filter(function(e){return e.confidence>.6}).map(function(e){return e.tag}).slice(0,3).forEach(function(e){v.some(function(t){return t.toLowerCase()===e.toLowerCase()})||v.push(e)}),console.log("Background: Auto-tagging enabled, combined tags:",v)),!(v.length>0&&m.linkId)){e.n=14;break}return e.p=11,e.n=12,en.addTagsToLink(m.linkId,v);case 12:e.n=14;break;case 13:e.p=13,b=e.v,console.error("Failed to add tags:",b);case 14:if(!m.linkId){e.n=15;break}return e.n=15,en.logActivity("save",m.linkId,void 0,{domain:c,category:g.category,reason:n.substring(0,100),tags:r,withContext:!0});case 15:return chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Saved to Nest",message:'"'.concat(a,'" saved with context: ').concat(n.substring(0,50),"...")}),e.p=16,e.n=17,chrome.runtime.sendMessage({action:"refreshSidebar"});case 17:e.n=19;break;case 18:e.p=18,w=e.v,console.log("Could not send refresh message to sidebar:",w);case 19:return e.a(2,{success:!0,linkId:m.linkId});case 20:return e.p=20,k=e.v,console.error("Failed to save with context:",k),e.a(2,{success:!1,error:k.message})}},e,null,[[16,18],[11,13],[3,5],[1,20]])})),_i.apply(this,arguments)}function Si(e){return Ai.apply(this,arguments)}function Ai(){return(Ai=ci(ai().m(function e(t){var n,r;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Getting highlights for page:",t),e.n=1,en.getLinkByUrl(t);case 1:if(!((n=e.v)&&n.highlights&&n.highlights.length>0)){e.n=2;break}return console.log("Background: Found",n.highlights.length,"highlights for page"),e.a(2,{success:!0,highlights:n.highlights});case 2:return console.log("Background: No highlights found for page"),e.a(2,{success:!0,highlights:[]});case 3:e.n=5;break;case 4:return e.p=4,r=e.v,console.error("Background: Failed to get highlights for page:",r),e.a(2,{success:!1,error:r.message});case 5:return e.a(2)}},e,null,[[0,4]])}))).apply(this,arguments)}function Ti(e,t){return Ii.apply(this,arguments)}function Ii(){return(Ii=ci(ai().m(function e(t,n){var r,i,a,o;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Removing highlight from storage:",t,"for URL:",n),e.n=1,en.getLinkByUrl(n);case 1:if(!(r=e.v)||!r.highlights){e.n=7;break}return i=r.highlights.filter(function(e){return e.id!==t}),e.n=2,en.updateLink(r.id,{highlights:i});case 2:return console.log("Background: Highlight removed from storage successfully"),e.p=3,e.n=4,chrome.runtime.sendMessage({action:"refreshSidebar"});case 4:e.n=6;break;case 5:e.p=5,a=e.v,console.log("Could not send refresh message to sidebar:",a);case 6:return e.a(2,{success:!0});case 7:return console.log("Background: Link not found for URL:",n),e.a(2,{success:!1,error:"Link not found"});case 8:e.n=10;break;case 9:return e.p=9,o=e.v,console.error("Background: Failed to remove highlight from storage:",o),e.a(2,{success:!1,error:o.message});case 10:return e.a(2)}},e,null,[[3,5],[0,9]])}))).apply(this,arguments)}function ji(e,t,n){return Oi.apply(this,arguments)}function Oi(){return(Oi=ci(ai().m(function e(t,n,r){var i,a,o,s;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Processing content for embeddings:",t),e.n=1,chrome.storage.local.get("nest_settings");case 1:if(i=e.v,(a=i.nest_settings||{}).enableEmbeddings&&a.openaiApiKey){e.n=2;break}return console.log("Background: Embeddings disabled or no API key"),e.a(2);case 2:return o={id:t,content:r,metadata:{title:n.title,url:n.url,domain:n.domain,contentType:n.contentType,author:n.author,publishDate:n.publishDate,createdAt:(new Date).toISOString()}},e.n=3,Ln.processContent(o);case 3:console.log("Background: Embeddings processed successfully for:",t),e.n=5;break;case 4:e.p=4,s=e.v,console.error("Background: Failed to process embeddings:",s);case 5:return e.a(2)}},e,null,[[0,4]])}))).apply(this,arguments)}function Pi(){return Ei.apply(this,arguments)}function Ei(){return(Ei=ci(ai().m(function e(){var t,n,r,i,a,o,s;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.windows.getAll({windowTypes:["popup"]});case 1:if(t=e.v,!(n=t.find(function(e){return"popup"===e.type&&420===e.width&&600===e.height}))){e.n=3;break}return e.n=2,chrome.windows.update(n.id,{focused:!0});case 2:return e.a(2);case 3:return e.n=4,chrome.windows.getCurrent();case 4:return r=e.v,i=Math.round((r.width-420)/2+(r.left||0)),a=Math.round((r.height-600)/3+(r.top||0)),e.n=5,chrome.windows.create({url:chrome.runtime.getURL("sidepanel.html")+"?floating=true",type:"popup",width:420,height:600,left:i,top:a,focused:!0});case 5:if(!(o=e.v).id){e.n=6;break}return e.n=6,chrome.storage.local.set({nest_floating_window_id:o.id});case 6:e.n=8;break;case 7:e.p=7,s=e.v,console.error("Failed to create floating window:",s);case 8:return e.a(2)}},e,null,[[0,7]])}))).apply(this,arguments)}function Ci(){return xi.apply(this,arguments)}function xi(){return(xi=ci(ai().m(function e(){var t;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Initializing Phase 3 background monitoring..."),e.n=1,Di();case 1:return chrome.alarms.onAlarm.addListener(Li),e.n=2,Wn.initialize();case 2:console.log("Phase 3 monitoring initialized successfully"),e.n=4;break;case 3:e.p=3,t=e.v,console.error("Failed to initialize Phase 3 monitoring:",t);case 4:return e.a(2)}},e,null,[[0,3]])}))).apply(this,arguments)}function Di(){return Ri.apply(this,arguments)}function Ri(){return(Ri=ci(ai().m(function e(){var t;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.alarms.clearAll();case 1:return e.n=2,chrome.alarms.create("link-health-check",{delayInMinutes:1,periodInMinutes:1440});case 2:return e.n=3,chrome.alarms.create("generate-suggestions",{delayInMinutes:5,periodInMinutes:240});case 3:return e.n=4,chrome.alarms.create("detect-duplicates",{delayInMinutes:10,periodInMinutes:10080});case 4:return e.n=5,chrome.alarms.create("archive-dead-links",{delayInMinutes:15,periodInMinutes:10080});case 5:return e.n=6,chrome.alarms.create("activity-analysis",{delayInMinutes:30,periodInMinutes:1440});case 6:console.log("Periodic alarms set up successfully"),e.n=8;break;case 7:e.p=7,t=e.v,console.error("Failed to set up periodic alarms:",t);case 8:return e.a(2)}},e,null,[[0,7]])}))).apply(this,arguments)}function Li(e){return Ui.apply(this,arguments)}function Ui(){return(Ui=ci(ai().m(function e(t){var n,r;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Handling alarm: ".concat(t.name)),e.n=1,chrome.storage.local.get("nest_settings");case 1:if((e.v.nest_settings||{}).enableBackgroundProcessing){e.n=2;break}return console.log("Background processing disabled by user"),e.a(2);case 2:n=t.name,e.n="link-health-check"===n?3:"generate-suggestions"===n?5:"detect-duplicates"===n?7:"archive-dead-links"===n?9:"activity-analysis"===n?11:13;break;case 3:return e.n=4,Ni();case 4:return e.a(3,14);case 5:return e.n=6,Mi();case 6:return e.a(3,14);case 7:return e.n=8,Fi();case 8:return e.a(3,14);case 9:return e.n=10,qi();case 10:return e.a(3,14);case 11:return e.n=12,Ki();case 12:return e.a(3,14);case 13:console.log("Unknown alarm: ".concat(t.name));case 14:e.n=16;break;case 15:e.p=15,r=e.v,console.error("Failed to handle alarm ".concat(t.name,":"),r);case 16:return e.a(2)}},e,null,[[0,15]])}))).apply(this,arguments)}function Ni(){return $i.apply(this,arguments)}function $i(){return($i=ci(ai().m(function e(){var t,n,r,i,a,o,s;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Starting link health check..."),e.n=1,en.getData();case 1:if(t=e.v,0!==(n=t.links.filter(function(e){return(Date.now()-new Date(e.createdAt).getTime())/864e5<=30}).slice(0,20)).length){e.n=2;break}return console.log("No recent links to check"),e.a(2);case 2:return e.n=3,Wn.checkLinksHealth(n.map(function(e){return e.id}));case 3:r=e.v,i=0,a=Qr(r);try{for(a.s();!(o=a.n()).done;)"dead"===o.value.status&&i++}catch(e){a.e(e)}finally{a.f()}if(!(i>0)){e.n=4;break}return e.n=4,Hi("Dead Links Detected","Found ".concat(i," dead link").concat(i>1?"s":""," in your library. Check Nest for recovery options."));case 4:console.log("Link health check completed: ".concat(i," dead links found")),e.n=6;break;case 5:e.p=5,s=e.v,console.error("Link health check failed:",s);case 6:return e.a(2)}},e,null,[[0,5]])}))).apply(this,arguments)}function Mi(){return Bi.apply(this,arguments)}function Bi(){return(Bi=ci(ai().m(function e(){var t,n,r;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Generating smart suggestions..."),e.n=1,br.generateSuggestions();case 1:return t=e.v,e.n=2,chrome.storage.local.set({nest_background_suggestions:{suggestions:t,generatedAt:(new Date).toISOString(),viewed:!1}});case 2:if(!((n=t.filter(function(e){return"urgent"===e.priority})).length>0)){e.n=3;break}return e.n=3,Hi("Smart Suggestions Available","".concat(n.length," urgent suggestion").concat(n.length>1?"s":""," for your library."));case 3:console.log("Generated ".concat(t.length," smart suggestions")),e.n=5;break;case 4:e.p=4,r=e.v,console.error("Smart suggestion generation failed:",r);case 5:return e.a(2)}},e,null,[[0,4]])}))).apply(this,arguments)}function Fi(){return zi.apply(this,arguments)}function zi(){return(zi=ci(ai().m(function e(){var t,n,r;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Performing duplicate detection..."),e.n=1,xr.findDuplicates();case 1:return t=e.v,n=t.filter(function(e){return"auto"===e.mergeRecommendation}),e.n=2,chrome.storage.local.set({nest_background_duplicates:{duplicates:t,autoMergeable:n.length,detectedAt:(new Date).toISOString(),reviewed:!1}});case 2:if(!(t.length>0)){e.n=3;break}return e.n=3,Hi("Duplicates Detected","Found ".concat(t.length," potential duplicate").concat(t.length>1?"s":"",". ").concat(n.length," can be auto-merged."));case 3:console.log("Duplicate detection completed: ".concat(t.length," found")),e.n=5;break;case 4:e.p=4,r=e.v,console.error("Duplicate detection failed:",r);case 5:return e.a(2)}},e,null,[[0,4]])}))).apply(this,arguments)}function qi(){return Gi.apply(this,arguments)}function Gi(){return(Gi=ci(ai().m(function e(){var t,n,r,i,a,o,s,c,u;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Performing dead link archiving..."),e.n=1,Wn.getHealthReport();case 1:if(t=e.v,0!==(n=t.deadLinks.slice(0,10)).length){e.n=2;break}return console.log("No dead links to archive"),e.a(2);case 2:return e.n=3,Vr.batchFindArchives(n);case 3:r=e.v,i=0,a=Qr(r),e.p=4,a.s();case 5:if((o=a.n()).done){e.n=8;break}if(!(s=o.value).bestVersion||"found"!==s.status){e.n=7;break}return e.n=6,Vr.replaceWithArchivedVersion(s.linkId,s.bestVersion);case 6:e.v&&i++;case 7:e.n=5;break;case 8:e.n=10;break;case 9:e.p=9,c=e.v,a.e(c);case 10:return e.p=10,a.f(),e.f(10);case 11:return e.n=12,chrome.storage.local.set({nest_background_archives:{results:r,recoveredCount:i,archivedAt:(new Date).toISOString(),reviewed:!1}});case 12:if(!(i>0)){e.n=13;break}return e.n=13,Hi("Links Recovered","Automatically recovered ".concat(i," dead link").concat(i>1?"s":""," from archives."));case 13:console.log("Dead link archiving completed: ".concat(i," recovered")),e.n=15;break;case 14:e.p=14,u=e.v,console.error("Dead link archiving failed:",u);case 15:return e.a(2)}},e,null,[[4,9,10,11],[0,14]])}))).apply(this,arguments)}function Ki(){return Wi.apply(this,arguments)}function Wi(){return(Wi=ci(ai().m(function e(){var t,n,r,i,a;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Performing activity analysis..."),e.n=1,en.getData();case 1:return t=e.v,n=t.links.filter(function(e){return(Date.now()-new Date(e.createdAt).getTime())/864e5>30&&!e.lastViewedAt}),r=t.links.filter(function(e){return!e.archived}).length,i=[],n.length>10&&i.push({type:"archive_old_unread",count:n.length,message:"Archive ".concat(n.length," old unread items")}),r>50&&i.push({type:"inbox_too_large",count:r,message:"Inbox has ".concat(r," items - consider organizing")}),e.n=2,chrome.storage.local.set({nest_background_analysis:{suggestions:i,oldUnreadCount:n.length,inboxSize:r,analyzedAt:(new Date).toISOString(),reviewed:!1}});case 2:if(!(i.length>0)){e.n=3;break}return e.n=3,Hi("Library Cleanup Suggested","".concat(i.length," cleanup suggestion").concat(i.length>1?"s":""," available."));case 3:console.log("Activity analysis completed: ".concat(i.length," suggestions")),e.n=5;break;case 4:e.p=4,a=e.v,console.error("Activity analysis failed:",a);case 5:return e.a(2)}},e,null,[[0,4]])}))).apply(this,arguments)}function Hi(e,t){return Ji.apply(this,arguments)}function Ji(){return(Ji=ci(ai().m(function e(t,n){var r;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_settings");case 1:if((e.v.nest_settings||{}).enableNotifications){e.n=2;break}return console.log("Notifications disabled by user"),e.a(2);case 2:return e.n=3,chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:t,message:n});case 3:e.n=5;break;case 4:e.p=4,r=e.v,console.error("Failed to send notification:",r);case 5:return e.a(2)}},e,null,[[0,4]])}))).apply(this,arguments)}chrome.runtime.onInstalled.addListener(ci(ai().m(function e(){return ai().w(function(e){for(;;)switch(e.n){case 0:return chrome.contextMenus.create({id:"saveToNest",title:"Save to Nest",contexts:["page","link"]}),chrome.contextMenus.create({id:"saveHighlight",title:"Save highlight to Nest",contexts:["selection"]}),console.log("Nest extension installed"),e.n=1,Ci();case 1:return e.a(2)}},e)}))),chrome.contextMenus.onClicked.addListener(function(){var e=ci(ai().m(function e(t,n){var r;return ai().w(function(e){for(;;)switch(e.n){case 0:if(console.log("Background: Context menu clicked:",t.menuItemId),"saveToNest"!==t.menuItemId||!n){e.n=2;break}return r=t.linkUrl||n.url,e.n=1,ui(n,r);case 1:e.n=3;break;case 2:if("saveHighlight"!==t.menuItemId||!n||!t.selectionText){e.n=3;break}return e.n=3,gi(n,t.selectionText,"",null);case 3:return e.a(2)}},e)}));return function(t,n){return e.apply(this,arguments)}}()),chrome.runtime.onMessage.addListener(function(){var e=ci(ai().m(function e(t,n,r){var i,a,o,s;return ai().w(function(e){for(;;)switch(e.n){case 0:if("saveScreenshot"!==t.action){e.n=5;break}return e.p=1,i={id:Date.now().toString(),dataURL:t.screenshot,url:t.url,title:t.title,domain:new URL(t.url).hostname,createdAt:new Date,updatedAt:new Date,type:"screenshot"},e.n=2,chrome.storage.local.get("nest_screenshots");case 2:return a=e.v,(o=a.nest_screenshots||[]).push(i),e.n=3,chrome.storage.local.set({nest_screenshots:o});case 3:chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Screenshot Saved",message:"Screenshot saved to Nest successfully!"}),r({success:!0}),e.n=5;break;case 4:e.p=4,s=e.v,console.error("Failed to save screenshot:",s),r({success:!1,error:s.message});case 5:return e.a(2,!0)}},e,null,[[1,4]])}));return function(t,n,r){return e.apply(this,arguments)}}()),chrome.action.onClicked.addListener(function(){var e=ci(ai().m(function e(t){var n;return ai().w(function(e){for(;;)switch(e.n){case 0:if(console.log("Extension icon clicked, opening sidebar..."),e.p=1,!t.windowId){e.n=3;break}return e.n=2,chrome.sidePanel.open({windowId:t.windowId});case 2:console.log("Sidebar opened successfully");case 3:e.n=5;break;case 4:e.p=4,n=e.v,console.error("Failed to open sidebar:",n);case 5:return e.a(2)}},e,null,[[1,4]])}));return function(t){return e.apply(this,arguments)}}()),chrome.runtime.onMessage.addListener(function(e,t,n){return console.log("Background: Message received:",e),ci(ai().m(function r(){var i,a,o,s,c,u,l,h,d,f,p,g,m,v,y,b,w,k,_,S,A;return ai().w(function(r){for(;;)switch(r.n){case 0:if(r.p=0,"saveCurrentPage"!==e.action){r.n=5;break}return r.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if(!(i=r.v)[0]){r.n=3;break}return r.n=2,ui(i[0]);case 2:a=r.v,n(a),r.n=4;break;case 3:n({success:!1,error:"No active tab found."});case 4:r.n=47;break;case 5:if("openSidePanel"!==e.action){r.n=13;break}return r.p=6,r.n=7,chrome.tabs.query({active:!0,currentWindow:!0});case 7:if(!(o=r.v)[0]||!o[0].windowId){r.n=9;break}return r.n=8,chrome.sidePanel.open({windowId:o[0].windowId});case 8:n({success:!0}),r.n=10;break;case 9:n({success:!1,error:"No active window found."});case 10:r.n=12;break;case 11:r.p=11,S=r.v,console.error("Failed to open side panel:",S),n({success:!1,error:S.message});case 12:r.n=47;break;case 13:if("saveHighlight"!==e.action){r.n=20;break}if(s=null,!t.tab){r.n=14;break}s=t.tab,r.n=16;break;case 14:return r.n=15,chrome.tabs.query({active:!0,currentWindow:!0});case 15:(c=r.v)[0]&&(s=c[0]);case 16:if(!s){r.n=18;break}return r.n=17,gi(s,e.selectedText,e.context,e.position);case 17:u=r.v,n(u),r.n=19;break;case 18:n({success:!1,error:"No active tab found."});case 19:r.n=47;break;case 20:if("getPageContent"!==e.action){r.n=24;break}if(!t.tab||!t.tab.id){r.n=22;break}return r.n=21,vi(t.tab.id);case 21:l=r.v,n(l),r.n=23;break;case 22:n({content:""});case 23:r.n=47;break;case 24:if("analyzePageWithAI"!==e.action){r.n=29;break}return r.n=25,chrome.tabs.query({active:!0,currentWindow:!0});case 25:if(!(h=r.v)[0]){r.n=27;break}return r.n=26,hi(h[0]);case 26:d=r.v,n(d),r.n=28;break;case 27:n({success:!1,error:"No active tab found."});case 28:r.n=47;break;case 29:if("saveWithContext"!==e.action){r.n=34;break}return r.n=30,chrome.tabs.query({active:!0,currentWindow:!0});case 30:if(!(f=r.v)[0]){r.n=32;break}return r.n=31,ki(f[0],e.reason,e.tags);case 31:p=r.v,n(p),r.n=33;break;case 32:n({success:!1,error:"No active tab found."});case 33:r.n=47;break;case 34:if("getPageInfo"!==e.action){r.n=39;break}return r.n=35,chrome.tabs.query({active:!0,currentWindow:!0});case 35:if(!(g=r.v)[0]){r.n=37;break}return r.n=36,bi(g[0]);case 36:m=r.v,n(m),r.n=38;break;case 37:n({success:!1,error:"No active tab found."});case 38:r.n=47;break;case 39:if("getHighlightsForPage"!==e.action){r.n=41;break}return r.n=40,Si(e.url);case 40:v=r.v,n(v),r.n=47;break;case 41:if("removeHighlightFromStorage"!==e.action){r.n=43;break}return r.n=42,Ti(e.highlightId,e.url);case 42:y=r.v,n(y),r.n=47;break;case 43:if("analyzeLinkContent"!==e.action){r.n=45;break}return b=e.title,w=e.url,k=e.content,r.n=44,fi(b,w,k);case 44:_=r.v,n(_),r.n=47;break;case 45:if("openFloatingWindow"!==e.action){r.n=46;break}return Pi(),n({success:!0}),r.a(2,!0);case 46:n({success:!1,error:"Unknown action"});case 47:r.n=49;break;case 48:r.p=48,A=r.v,console.error("Background script error:",A),n({success:!1,error:A.message});case 49:return r.a(2)}},r,null,[[6,11],[0,48]])}))(),!0}),chrome.commands.onCommand.addListener(function(){var e=ci(ai().m(function e(t){var n,r,i,a;return ai().w(function(e){for(;;)switch(e.n){case 0:return console.log("Keyboard command received:",t),e.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if((n=e.v)[0]){e.n=2;break}return e.a(2);case 2:r=n[0],i=t,e.n="save-page"===i||"save-to-inbox"===i?3:"open-command-palette"===i?5:12;break;case 3:return e.n=4,ui(r);case 4:return e.a(3,12);case 5:return e.p=5,e.n=6,chrome.tabs.sendMessage(r.id,{action:"openCommandPalette"});case 6:e.n=11;break;case 7:return e.p=7,e.v,console.log("Failed to open command palette from content script, trying sidepanel..."),e.p=8,e.n=9,chrome.sidePanel.open({windowId:r.windowId});case 9:e.n=11;break;case 10:e.p=10,a=e.v,console.error("Failed to open sidepanel:",a);case 11:return e.a(3,12);case 12:return e.a(2)}},e,null,[[8,10],[5,7]])}));return function(t){return e.apply(this,arguments)}}()),chrome.windows.onRemoved.addListener(function(){var e=ci(ai().m(function e(t){var n;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_floating_window_id");case 1:if(e.v.nest_floating_window_id!==t){e.n=2;break}return e.n=2,chrome.storage.local.remove("nest_floating_window_id");case 2:e.n=4;break;case 3:e.p=3,n=e.v,console.error("Failed to clean up floating window ID:",n);case 4:return e.a(2)}},e,null,[[0,3]])}));return function(t){return e.apply(this,arguments)}}()),chrome.runtime.onMessage.addListener(function(e,t,n){return"getBackgroundSuggestions"===e.action?(ci(ai().m(function e(){var t,r,i;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_background_suggestions");case 1:if(t=e.v,!((r=t.nest_background_suggestions||{suggestions:[]}).suggestions.length>0)){e.n=2;break}return e.n=2,chrome.storage.local.set({nest_background_suggestions:ri(ri({},r),{},{viewed:!0})});case 2:n({success:!0,suggestions:r.suggestions}),e.n=4;break;case 3:e.p=3,i=e.v,n({success:!1,error:i.message});case 4:return e.a(2)}},e,null,[[0,3]])}))(),!0):"getBackgroundDuplicates"===e.action?(ci(ai().m(function e(){var t,r,i;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_background_duplicates");case 1:t=e.v,r=t.nest_background_duplicates||{duplicates:[]},n({success:!0,data:r}),e.n=3;break;case 2:e.p=2,i=e.v,n({success:!1,error:i.message});case 3:return e.a(2)}},e,null,[[0,2]])}))(),!0):"getBackgroundArchives"===e.action?(ci(ai().m(function e(){var t,r,i;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_background_archives");case 1:t=e.v,r=t.nest_background_archives||{results:[]},n({success:!0,data:r}),e.n=3;break;case 2:e.p=2,i=e.v,n({success:!1,error:i.message});case 3:return e.a(2)}},e,null,[[0,2]])}))(),!0):"getBackgroundAnalysis"===e.action?(ci(ai().m(function e(){var t,r,i;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_background_analysis");case 1:t=e.v,r=t.nest_background_analysis||{suggestions:[]},n({success:!0,data:r}),e.n=3;break;case 2:e.p=2,i=e.v,n({success:!1,error:i.message});case 3:return e.a(2)}},e,null,[[0,2]])}))(),!0):"triggerHealthCheck"===e.action?(ci(ai().m(function e(){var t;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Ni();case 1:n({success:!0}),e.n=3;break;case 2:e.p=2,t=e.v,n({success:!1,error:t.message});case 3:return e.a(2)}},e,null,[[0,2]])}))(),!0):"triggerDuplicateDetection"===e.action&&(ci(ai().m(function e(){var t;return ai().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Fi();case 1:n({success:!0}),e.n=3;break;case 2:e.p=2,t=e.v,n({success:!1,error:t.message});case 3:return e.a(2)}},e,null,[[0,2]])}))(),!0)})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,