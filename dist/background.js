/*! For license information please see background.js.LICENSE.txt */
(()=>{"use strict";var e,t,n,r={45:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(825));t.default=class{constructor(e,{headers:t={},schema:n,fetch:r}){this.url=e,this.headers=t,this.schema=n,this.fetch=r}select(e,{head:t=!1,count:n}={}){const r=t?"HEAD":"GET";let s=!1;const o=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!s?"":('"'===e&&(s=!s),e)).join("");return this.url.searchParams.set("select",o),n&&(this.headers.Prefer=`count=${n}`),new i.default({method:r,url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}insert(e,{count:t,defaultToNull:n=!0}={}){const r=[];if(this.headers.Prefer&&r.push(this.headers.Prefer),t&&r.push(`count=${t}`),n||r.push("missing=default"),this.headers.Prefer=r.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new i.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}upsert(e,{onConflict:t,ignoreDuplicates:n=!1,count:r,defaultToNull:s=!0}={}){const o=[`resolution=${n?"ignore":"merge"}-duplicates`];if(void 0!==t&&this.url.searchParams.set("on_conflict",t),this.headers.Prefer&&o.push(this.headers.Prefer),r&&o.push(`count=${r}`),s||o.push("missing=default"),this.headers.Prefer=o.join(","),Array.isArray(e)){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]);if(t.length>0){const e=[...new Set(t)].map(e=>`"${e}"`);this.url.searchParams.set("columns",e.join(","))}}return new i.default({method:"POST",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}update(e,{count:t}={}){const n=[];return this.headers.Prefer&&n.push(this.headers.Prefer),t&&n.push(`count=${t}`),this.headers.Prefer=n.join(","),new i.default({method:"PATCH",url:this.url,headers:this.headers,schema:this.schema,body:e,fetch:this.fetch,allowEmpty:!1})}delete({count:e}={}){const t=[];return e&&t.push(`count=${e}`),this.headers.Prefer&&t.unshift(this.headers.Prefer),this.headers.Prefer=t.join(","),new i.default({method:"DELETE",url:this.url,headers:this.headers,schema:this.schema,fetch:this.fetch,allowEmpty:!1})}}},261:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(660));class s extends i.default{select(e){let t=!1;const n=(null!=e?e:"*").split("").map(e=>/\s/.test(e)&&!t?"":('"'===e&&(t=!t),e)).join("");return this.url.searchParams.set("select",n),this.headers.Prefer&&(this.headers.Prefer+=","),this.headers.Prefer+="return=representation",this}order(e,{ascending:t=!0,nullsFirst:n,foreignTable:r,referencedTable:i=r}={}){const s=i?`${i}.order`:"order",o=this.url.searchParams.get(s);return this.url.searchParams.set(s,`${o?`${o},`:""}${e}.${t?"asc":"desc"}${void 0===n?"":n?".nullsfirst":".nullslast"}`),this}limit(e,{foreignTable:t,referencedTable:n=t}={}){const r=void 0===n?"limit":`${n}.limit`;return this.url.searchParams.set(r,`${e}`),this}range(e,t,{foreignTable:n,referencedTable:r=n}={}){const i=void 0===r?"offset":`${r}.offset`,s=void 0===r?"limit":`${r}.limit`;return this.url.searchParams.set(i,`${e}`),this.url.searchParams.set(s,""+(t-e+1)),this}abortSignal(e){return this.signal=e,this}single(){return this.headers.Accept="application/vnd.pgrst.object+json",this}maybeSingle(){return"GET"===this.method?this.headers.Accept="application/json":this.headers.Accept="application/vnd.pgrst.object+json",this.isMaybeSingle=!0,this}csv(){return this.headers.Accept="text/csv",this}geojson(){return this.headers.Accept="application/geo+json",this}explain({analyze:e=!1,verbose:t=!1,settings:n=!1,buffers:r=!1,wal:i=!1,format:s="text"}={}){var o;const a=[e?"analyze":null,t?"verbose":null,n?"settings":null,r?"buffers":null,i?"wal":null].filter(Boolean).join("|"),c=null!==(o=this.headers.Accept)&&void 0!==o?o:"application/json";return this.headers.Accept=`application/vnd.pgrst.plan+${s}; for="${c}"; options=${a};`,this}rollback(){var e;return(null!==(e=this.headers.Prefer)&&void 0!==e?e:"").trim().length>0?this.headers.Prefer+=",tx=rollback":this.headers.Prefer="tx=rollback",this}returns(){return this}}t.default=s},279:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PostgrestError=t.PostgrestBuilder=t.PostgrestTransformBuilder=t.PostgrestFilterBuilder=t.PostgrestQueryBuilder=t.PostgrestClient=void 0;const i=r(n(342));t.PostgrestClient=i.default;const s=r(n(45));t.PostgrestQueryBuilder=s.default;const o=r(n(825));t.PostgrestFilterBuilder=o.default;const a=r(n(261));t.PostgrestTransformBuilder=a.default;const c=r(n(660));t.PostgrestBuilder=c.default;const u=r(n(818));t.PostgrestError=u.default,t.default={PostgrestClient:i.default,PostgrestQueryBuilder:s.default,PostgrestFilterBuilder:o.default,PostgrestTransformBuilder:a.default,PostgrestBuilder:c.default,PostgrestError:u.default}},342:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(45)),s=r(n(825)),o=n(530);class a{constructor(e,{headers:t={},schema:n,fetch:r}={}){this.url=e,this.headers=Object.assign(Object.assign({},o.DEFAULT_HEADERS),t),this.schemaName=n,this.fetch=r}from(e){const t=new URL(`${this.url}/${e}`);return new i.default(t,{headers:Object.assign({},this.headers),schema:this.schemaName,fetch:this.fetch})}schema(e){return new a(this.url,{headers:this.headers,schema:e,fetch:this.fetch})}rpc(e,t={},{head:n=!1,get:r=!1,count:i}={}){let o;const a=new URL(`${this.url}/rpc/${e}`);let c;n||r?(o=n?"HEAD":"GET",Object.entries(t).filter(([e,t])=>void 0!==t).map(([e,t])=>[e,Array.isArray(t)?`{${t.join(",")}}`:`${t}`]).forEach(([e,t])=>{a.searchParams.append(e,t)})):(o="POST",c=t);const u=Object.assign({},this.headers);return i&&(u.Prefer=`count=${i}`),new s.default({method:o,url:a,headers:u,schema:this.schemaName,body:c,fetch:this.fetch,allowEmpty:!1})}}t.default=a},508:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach(function(t){a(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function o(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=l(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,o=!0,a=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){a=!0,s=e},f:function(){try{o||null==n.return||n.return()}finally{if(a)throw s}}}}function a(e,t,n){return(t=b(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||l(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,s,o,a=[],c=!0,u=!1;try{if(s=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=s.call(n)).done)&&(a.push(r.value),a.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return a}}(e,t)||l(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){if(e){if("string"==typeof e)return h(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function d(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function s(n,r,i,s){var c=r&&r.prototype instanceof a?r:a,u=Object.create(c.prototype);return f(u,"_invoke",function(n,r,i){var s,a,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return s=t,a=0,c=e,d.n=n,o}};function f(n,r){for(a=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,s=l[t],f=d.p,p=s[2];n>3?(i=p===r)&&(c=s[(a=s[4])?5:(a=3,3)],s[4]=s[5]=e):s[0]<=f&&((i=n<2&&f<s[1])?(a=0,d.v=r,d.n=s[1]):f<p&&(i=n<3||s[0]>r||r>p)&&(s[4]=n,s[5]=r,d.n=p,a=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),a=l,c=p;(t=a<2?e:c)||!h;){s||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(u=2,s){if(a||(i="next"),t=s[i]){if(!(t=t.call(s,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=s.return)&&t.call(s),a<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),a=1);s=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){s=e,a=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,s),!0),u}var o={};function a(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(f(t={},r,function(){return this}),t),h=u.prototype=a.prototype=Object.create(l);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,f(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,f(h,"constructor",u),f(u,"constructor",c),c.displayName="GeneratorFunction",f(u,i,"GeneratorFunction"),f(h),f(h,i,"Generator"),f(h,r,function(){return this}),f(h,"toString",function(){return"[object Generator]"}),(d=function(){return{w:s,m:p}})()}function f(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}f=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var s=function(t,n){f(e,t,function(e){return this._invoke(t,n,e)})};s("next",0),s("throw",1),s("return",2)}},f(e,t,n,r)}function p(e,t,n,r,i,s,o){try{var a=e[s](o),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function g(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var s=e.apply(t,n);function o(e){p(s,r,i,o,a,"next",e)}function a(e){p(s,r,i,o,a,"throw",e)}o(void 0)})}}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,b(r.key),r)}}function y(e,t,n){return t&&v(e.prototype,t),n&&v(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function b(e){var t=function(e){if("object"!=r(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==r(t)?t:t+""}n.r(t),n.d(t,{AIService:()=>w,aiService:()=>S,createAIService:()=>k});var w=function(){return y(function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};m(this,e),this.apiKey=t.apiKey||"",this.model=t.model||"gpt-3.5-turbo"},[{key:"analyzeContent",value:(s=g(d().m(function e(t,n,r){var i,s;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generateRuleBasedAnalysis(t,n,r));case 1:return e.p=1,e.n=2,this.callOpenAIForAnalysis(t,n,r);case 2:return i=e.v,e.a(2,i);case 3:return e.p=3,s=e.v,console.error("AI analysis failed, falling back to rule-based:",s),e.a(2,this.generateRuleBasedAnalysis(t,n,r))}},e,this,[[1,3]])})),function(e,t,n){return s.apply(this,arguments)})},{key:"generateSummary",value:(i=g(d().m(function e(t,n,r){var i,s;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,this.generatePlaceholderSummary(t,n,r));case 1:return e.p=1,e.n=2,this.callOpenAI(t,n,r);case 2:return i=e.v,e.a(2,i);case 3:return e.p=3,s=e.v,console.error("AI summary generation failed:",s),e.a(2,this.generatePlaceholderSummary(t,n,r))}},e,this,[[1,3]])})),function(e,t,n){return i.apply(this,arguments)})},{key:"generateRuleBasedAnalysis",value:function(e,t,n){var r=new URL(n).hostname,i=e.toLowerCase(),s=t.toLowerCase(),o="".concat(s," ").concat(i),a=this.detectContentType(r,t,e),c=this.generateRuleBasedTags(o,r,a),u=this.generateRuleBasedCategories(o,r,a),l=this.extractTopics(o),h=this.estimateComplexity(e),d=this.estimateReadingTime(e);return{summary:this.generatePlaceholderSummary(e,t,n),tagSuggestions:c,categorySuggestions:u,contentType:a,topics:l,complexity:h,readingTime:d}}},{key:"detectContentType",value:function(e,t,n){var r=t.toLowerCase(),i=n.toLowerCase();return e.includes("youtube.com")||e.includes("vimeo.com")||e.includes("twitch.tv")?"video":e.includes("docs.")||r.includes("documentation")||i.includes("api reference")||i.includes("getting started")?"documentation":r.includes("tutorial")||r.includes("how to")||r.includes("guide")||i.includes("step by step")?"tutorial":e.includes("news")||e.includes("cnn.com")||e.includes("bbc.com")||e.includes("techcrunch.com")||e.includes("reuters.com")?"news":e.includes("medium.com")||e.includes("blog")||r.includes("thoughts on")||i.includes("published")?"blog":e.includes("arxiv.org")||e.includes("scholar.google")||r.includes("research")||i.includes("abstract")?"research":e.includes("github.com")||r.includes("tool")||r.includes("app")||i.includes("download")?"tool":r.includes("reference")||r.includes("cheat sheet")||i.includes("quick reference")?"reference":"article"}},{key:"generateRuleBasedTags",value:function(e,t,n){for(var r=[],i=0,s=Object.entries({"github.com":[{tag:"github",confidence:.9,reason:"GitHub repository"}],"stackoverflow.com":[{tag:"programming",confidence:.8,reason:"Stack Overflow content"}],"medium.com":[{tag:"blog",confidence:.7,reason:"Medium article"}],"youtube.com":[{tag:"video",confidence:.9,reason:"YouTube video"}],"linkedin.com":[{tag:"career",confidence:.7,reason:"LinkedIn content"}]});i<s.length;i++){var o=u(s[i],2),a=o[0],l=o[1];t.includes(a)&&r.push.apply(r,c(l))}for(var h=0,d=Object.entries({javascript:["javascript","js","node.js","react","vue","angular"],python:["python","django","flask","pandas","numpy"],"web-development":["html","css","frontend","backend","full-stack"],"machine-learning":["ml","ai","neural network","deep learning","tensorflow"],"data-science":["data science","analytics","visualization","statistics"],mobile:["android","ios","react native","flutter","mobile app"],devops:["docker","kubernetes","aws","cloud","deployment"],database:["sql","postgresql","mongodb","database design"],security:["cybersecurity","encryption","vulnerability","penetration testing"]});h<d.length;h++){var f=u(d[h],2),p=f[0],g=f[1].filter(function(t){return e.includes(t)}).length;if(g>0){var m=Math.min(.9,.4+.1*g);r.push({tag:p,confidence:m,reason:"Found ".concat(g," related keyword(s)")})}}r.push({tag:n||"general",confidence:.6,reason:"Detected as ".concat(n," content")}),(e.includes("beginner")||e.includes("getting started"))&&r.push({tag:"beginner",confidence:.7,reason:"Beginner-friendly content"}),(e.includes("advanced")||e.includes("expert"))&&r.push({tag:"advanced",confidence:.7,reason:"Advanced content"});for(var v=0,y=["productivity","business","startup","marketing","sales","finance"];v<y.length;v++){var b=y[v];e.includes(b)&&r.push({tag:b,confidence:.6,reason:"Content related to ".concat(b)})}return r.filter(function(e,t,n){return n.findIndex(function(t){return t.tag===e.tag})===t}).sort(function(e,t){return t.confidence-e.confidence}).slice(0,8)}},{key:"generateRuleBasedCategories",value:function(e,t,n){var r=[];return(e.includes("work")||e.includes("job")||e.includes("career")||e.includes("professional")||e.includes("business"))&&r.push({category:"work",confidence:.8,reason:"Contains work-related content"}),("tutorial"===n||"documentation"===n||e.includes("learn")||e.includes("education")||e.includes("course"))&&r.push({category:"learning",confidence:.9,reason:"Educational content detected"}),(e.includes("hobby")||e.includes("personal")||e.includes("lifestyle")||e.includes("entertainment"))&&r.push({category:"personal",confidence:.7,reason:"Personal interest content"}),(t.includes("github.com")||t.includes("stackoverflow.com")||e.includes("programming")||e.includes("development"))&&r.push({category:"work",confidence:.8,reason:"Technical/development content"}),("news"===n||e.includes("breaking")||e.includes("update"))&&r.push({category:"general",confidence:.7,reason:"News or current events"}),0===r.length&&r.push({category:"general",confidence:.5,reason:"General content"}),r.sort(function(e,t){return t.confidence-e.confidence})}},{key:"extractTopics",value:function(e){return["artificial intelligence","machine learning","web development","mobile development","data science","cybersecurity","cloud computing","blockchain","cryptocurrency","startup","productivity","leadership","design","marketing","sales","programming","software engineering","devops","database","frontend","backend","full-stack","api","microservices","architecture"].filter(function(t){return e.includes(t)}).slice(0,5)}},{key:"estimateComplexity",value:function(e){var t=e.toLowerCase(),n=["algorithm","architecture","optimization","scalability","performance"].filter(function(e){return t.includes(e)}).length,r=["introduction","basics","getting started","beginner","simple"].filter(function(e){return t.includes(e)}).length,i=["advanced","expert","complex","sophisticated","enterprise"].filter(function(e){return t.includes(e)}).length;return r>0||0===n?"beginner":i>1||n>3?"advanced":"intermediate"}},{key:"estimateReadingTime",value:function(e){var t=e.split(/\s+/).length;return Math.max(1,Math.round(t/200))}},{key:"callOpenAIForAnalysis",value:(r=g(d().m(function e(t,n,r){var i,s,o,a,c,u,l;return d().w(function(e){for(;;)switch(e.n){case 0:return s='Analyze this web content and provide a JSON response with the following structure:\n\n{\n  "summary": "1-2 sentence summary",\n  "tagSuggestions": [\n    {"tag": "tag-name", "confidence": 0.8, "reason": "why this tag fits"}\n  ],\n  "categorySuggestions": [\n    {"category": "work|learning|personal|general", "confidence": 0.9, "reason": "explanation"}\n  ],\n  "contentType": "article|tutorial|documentation|video|tool|reference|blog|news|research|other",\n  "topics": ["main", "topics", "covered"],\n  "complexity": "beginner|intermediate|advanced",\n  "readingTime": 5\n}\n\nContent to analyze:\nTitle: '.concat(n,"\nURL: ").concat(r,"\nContent: ").concat(t.substring(0,2e3),"...\n\nFocus on:\n- Relevant, specific tags (technology, skills, domains)\n- Appropriate category (work/learning/personal/general)\n- Content type and complexity\n- Main topics and themes"),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:s}],max_tokens:500,temperature:.3})});case 1:return o=e.v,e.n=2,o.json();case 2:if(a=e.v,!(c=null===(i=a.choices[0])||void 0===i||null===(i=i.message)||void 0===i?void 0:i.content)){e.n=5;break}return e.p=3,u=JSON.parse(c),e.a(2,{summary:u.summary,tagSuggestions:u.tagSuggestions||[],categorySuggestions:u.categorySuggestions||[],contentType:u.contentType,topics:u.topics||[],complexity:u.complexity,readingTime:u.readingTime});case 4:e.p=4,l=e.v,console.error("Failed to parse AI response:",l);case 5:return e.a(2,this.generateRuleBasedAnalysis(t,n,r))}},e,this,[[3,4]])})),function(e,t,n){return r.apply(this,arguments)})},{key:"callOpenAI",value:(n=g(d().m(function e(t,n,r){var i,s,o,a;return d().w(function(e){for(;;)switch(e.n){case 0:return s="Summarize this web page in 1-2 sentences:\nTitle: ".concat(n,"\nURL: ").concat(r,"\nContent: ").concat(t.substring(0,1e3),"..."),e.n=1,fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:s}],max_tokens:100,temperature:.3})});case 1:return o=e.v,e.n=2,o.json();case 2:return a=e.v,e.a(2,(null===(i=a.choices[0])||void 0===i||null===(i=i.message)||void 0===i?void 0:i.content)||this.generatePlaceholderSummary(t,n,r))}},e,this)})),function(e,t,r){return n.apply(this,arguments)})},{key:"generatePlaceholderSummary",value:function(e,t,n){var r=new URL(n).hostname,i=e.length;return r.includes("github.com")?"GitHub repository or project page: ".concat(t):r.includes("stackoverflow.com")?"Stack Overflow discussion about programming or technical topics":r.includes("medium.com")||r.includes("blog")?"Blog article: ".concat(t.substring(0,50),"..."):r.includes("youtube.com")?"Video content: ".concat(t):r.includes("news")||r.includes("article")?"News article from ".concat(r):"Web page from ".concat(r," (").concat(Math.round(i/100)," paragraphs)")}},{key:"updateApiKey",value:function(e){this.apiKey=e}},{key:"generateSmartCollectionSuggestions",value:(t=g(d().m(function e(t){var n,r,i,s,o,a,c,l,h,f,p,g,m,v,y;return d().w(function(e){for(;;)if(0===e.n){for(n=this.analyzeDomains(t),r=this.analyzeTopics(t),i=this.analyzeTimePatterns(t),s=[],o=new Date,a=0,c=Object.entries(n);a<c.length;a++)l=u(c[a],2),h=l[0],(f=l[1])>=3&&s.push({id:"domain-".concat(h.replace(/\./g,"-")),name:"📌 ".concat(this.getDomainDisplayName(h)),description:"Links from ".concat(h," (").concat(f," links)"),query:"domain LIKE '%".concat(h,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getDomainIcon(h),color:this.getDomainColor(h),filters:{domains:[h]},createdAt:o,updatedAt:o});for(p=0,g=Object.entries(r);p<g.length;p++)m=u(g[p],2),v=m[0],(y=m[1])>=2&&s.push({id:"topic-".concat(v.toLowerCase().replace(/\s+/g,"-")),name:"🎯 ".concat(v),description:"Content related to ".concat(v.toLowerCase()," (").concat(y," links)"),query:"title ILIKE '%".concat(v,"%' OR user_note ILIKE '%").concat(v,"%' OR ai_summary ILIKE '%").concat(v,"%'"),isSystem:!0,autoUpdate:!0,icon:this.getTopicIcon(v),color:this.getTopicColor(v),createdAt:o,updatedAt:o});return i.recentActivity>5&&s.push({id:"recent-activity",name:"🔥 Recent Activity",description:"Links saved in the last 3 days",query:"created_at >= now() - interval '3 days'",isSystem:!0,autoUpdate:!0,icon:"🔥",color:"#ef4444",filters:{dateRange:{start:new Date(Date.now()-2592e5)}},createdAt:o,updatedAt:o}),e.a(2,s.slice(0,8))}},e,this)})),function(e){return t.apply(this,arguments)})},{key:"analyzeDomains",value:function(e){var t={};return e.forEach(function(e){var n=e.domain;t[n]=(t[n]||0)+1}),Object.fromEntries(Object.entries(t).sort(function(e,t){var n=u(e,2)[1];return u(t,2)[1]-n}).slice(0,10))}},{key:"analyzeTopics",value:function(e){var t={},n=["React","JavaScript","TypeScript","Python","Node.js","API","Database","Machine Learning","AI","Design","UI/UX","CSS","HTML","Backend","Frontend","DevOps","Cloud","AWS","Docker","Kubernetes","Git","Testing","Security","Performance","Mobile","iOS","Android","Tutorial","Guide","Documentation","Tool","Framework","Library"];return e.forEach(function(e){var r="".concat(e.title," ").concat(e.userNote," ").concat(e.aiSummary||"").toLowerCase();n.forEach(function(e){r.includes(e.toLowerCase())&&(t[e]=(t[e]||0)+1)})}),Object.fromEntries(Object.entries(t).sort(function(e,t){var n=u(e,2)[1];return u(t,2)[1]-n}).slice(0,8))}},{key:"analyzeTimePatterns",value:function(e){var t=new Date,n=new Date(t.getTime()-2592e5),r=e.filter(function(e){return e.createdAt>=n}).length,i={};return e.forEach(function(e){var t=e.createdAt.toLocaleDateString("en-US",{weekday:"long"});i[t]=(i[t]||0)+1}),{recentActivity:r,weeklyPattern:i}}},{key:"getDomainDisplayName",value:function(e){return{"github.com":"GitHub","stackoverflow.com":"Stack Overflow","medium.com":"Medium","youtube.com":"YouTube","twitter.com":"Twitter","linkedin.com":"LinkedIn","reddit.com":"Reddit","dev.to":"Dev.to","hashnode.com":"Hashnode","docs.google.com":"Google Docs"}[e]||e.replace("www.","").split(".")[0]}},{key:"getDomainIcon",value:function(e){return{"github.com":"⭐","stackoverflow.com":"💬","medium.com":"✍️","youtube.com":"📺","twitter.com":"🐦","linkedin.com":"💼","reddit.com":"🤖","dev.to":"👨‍💻","hashnode.com":"📝","docs.google.com":"📄"}[e]||"🌐"}},{key:"getDomainColor",value:function(e){return{"github.com":"#24292e","stackoverflow.com":"#f48024","medium.com":"#00ab6c","youtube.com":"#ff0000","twitter.com":"#1da1f2","linkedin.com":"#0077b5","reddit.com":"#ff4500","dev.to":"#0a0a0a","hashnode.com":"#2962ff","docs.google.com":"#4285f4"}[e]||"#6b7280"}},{key:"getTopicIcon",value:function(e){return{React:"⚛️",JavaScript:"🟨",TypeScript:"🔷",Python:"🐍","Node.js":"🟢",API:"🔌",Database:"🗄️","Machine Learning":"🤖",AI:"🧠",Design:"🎨","UI/UX":"✨",CSS:"🎨",HTML:"📄",Backend:"⚙️",Frontend:"🖥️",DevOps:"🔧",Cloud:"☁️",AWS:"🟠",Docker:"🐳",Security:"🔒",Mobile:"📱",Tutorial:"📚",Tool:"🛠️"}[e]||"🏷️"}},{key:"getTopicColor",value:function(e){return{React:"#61dafb",JavaScript:"#f7df1e",TypeScript:"#3178c6",Python:"#3776ab","Node.js":"#339933",API:"#ff6b6b",Database:"#336791","Machine Learning":"#ff9500",AI:"#8b5cf6",Design:"#e91e63","UI/UX":"#9c27b0",CSS:"#1572b6",HTML:"#e34f26",Backend:"#4caf50",Frontend:"#2196f3",DevOps:"#ff5722",Cloud:"#607d8b",Security:"#795548",Mobile:"#00bcd4",Tutorial:"#ff9800",Tool:"#607d8b"}[e]||"#6b7280"}},{key:"analyzeForSmartCollections",value:(e=g(d().m(function e(t){var n,r,i,s,o,a,c,u;return d().w(function(e){for(;;)if(0===e.n)return n="".concat(t.title," ").concat(t.userNote," ").concat(t.aiSummary||"").toLowerCase(),r=t.domain,i=[],s=[],o={},(a=["ai","artificial intelligence","machine learning","ml","neural","deep learning"].filter(function(e){return n.includes(e)}).length)>0&&(i.push("ai-related"),s.push("AI"),o.ai=a),(c=["tutorial","how to","guide","walkthrough","step by step"].filter(function(e){return n.includes(e)}).length)>0&&(i.push("tutorials"),s.push("tutorial"),o.tutorial=c),r.includes("github.com")&&(i.push("github-repos"),s.push("github","repository"),o.github=1),(u=(Date.now()-t.createdAt.getTime())/864e5)<=7&&(i.push("recent-reads"),o.recent=Math.max(0,7-u)/7),t.userNote&&""!==t.userNote.trim()||(i.push("unread"),o.unread=1),e.a(2,{matchingCollections:i,suggestedTags:s,contentSignals:o})},e)})),function(t){return e.apply(this,arguments)})}]);var e,t,n,r,i,s}(),k=function(e){return e?new _(e):{generateInsights:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateQuestions:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateFlashcards:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},findCrossReferences:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},generateRecommendations:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},updateKnowledgeGraph:function(e){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,{nodes:[],edges:[],lastUpdated:Date.now()})},e)}))()},extractKeyTopics:function(){return g(d().m(function e(){return d().w(function(e){for(;;)if(0===e.n)return e.a(2,[])},e)}))()},calculateKnowledgeGrowth:function(){return 0}}},_=function(){return y(function e(t){m(this,e),a(this,"baseURL","https://api.openai.com/v1"),this.apiKey=t},[{key:"generateInsights",value:(h=g(d().m(function e(t){var n,r,i,s,o;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n="text"in t?t.text:"".concat(t.title," - ").concat(t.description||""),r=t.url,i='Analyze this content and generate 3 types of insights:\n1. A thought-provoking question\n2. A key summary point\n3. A potential connection to other topics\n\nContent: "'.concat(n,'"\nURL: ').concat(r,"\n\nReturn as JSON array with objects containing: type, content, metadata"),e.n=2,this.callOpenAI(i);case 2:return s=e.v,e.a(2,this.parseInsights(s));case 3:return e.p=3,o=e.v,console.error("Error generating insights:",o),e.a(2,[])}},e,this,[[1,3]])})),function(e){return h.apply(this,arguments)})},{key:"generateQuestions",value:(l=g(d().m(function e(t){var n,r,i,s,o=arguments;return d().w(function(e){for(;;)switch(e.n){case 0:if(n=o.length>1&&void 0!==o[1]?o[1]:"medium",this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,r="Generate 3 ".concat(n,' level questions based on this content that would help with retention and understanding:\n\nContent: "').concat(t,'"\n\nQuestions should be:\n- ').concat("easy"===n?"Recall-based, asking for basic facts":"","\n- ").concat("medium"===n?"Application-based, asking how concepts apply":"","\n- ").concat("hard"===n?"Analysis-based, asking for evaluation and synthesis":"",'\n\nReturn as JSON array with type: "question", content: "the question", metadata: {difficulty, topic}'),e.n=2,this.callOpenAI(r);case 2:return i=e.v,e.a(2,this.parseInsights(i));case 3:return e.p=3,s=e.v,console.error("Error generating questions:",s),e.a(2,[])}},e,this,[[1,3]])})),function(e){return l.apply(this,arguments)})},{key:"generateFlashcards",value:(c=g(d().m(function e(t){var n,r,i;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n='Create 3 flashcard pairs from this content. Each should have a question/prompt and answer:\n\nContent: "'.concat(t,'"\n\nReturn as JSON array with type: "flashcard", content: "Question: [question]\nAnswer: [answer]", metadata: {topic}'),e.n=2,this.callOpenAI(n);case 2:return r=e.v,e.a(2,this.parseInsights(r));case 3:return e.p=3,i=e.v,console.error("Error generating flashcards:",i),e.a(2,[])}},e,this,[[1,3]])})),function(e){return c.apply(this,arguments)})},{key:"findCrossReferences",value:(i=g(d().m(function e(t,n){var r,i,s,o,a;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey&&0!==n.length){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,r="text"in t?t.text:"".concat(t.title," - ").concat(t.description||""),i=n.filter(function(e){return e.id!==t.id}).slice(0,10),s='Analyze the main item and find potential relationships with other items:\n\nMain item: "'.concat(r,'"\n\nOther items:\n').concat(i.map(function(e,t){return"".concat(t+1,". ").concat(e.id,": ").concat("text"in e?e.text:"".concat(e.title," - ").concat(e.description||""))}).join("\n"),'\n\nFor each relationship found, return JSON with:\n- targetId: the item ID\n- relationshipType: "related" | "contradicts" | "supports" | "cites" | "builds-on"\n- strength: 0-1 confidence score\n- note: brief explanation\n\nOnly return relationships with strength > 0.3'),e.n=2,this.callOpenAI(s);case 2:return o=e.v,e.a(2,this.parseCrossReferences(o,t.id));case 3:return e.p=3,a=e.v,console.error("Error finding cross references:",a),e.a(2,[])}},e,this,[[1,3]])})),function(e,t){return i.apply(this,arguments)})},{key:"generateRecommendations",value:(r=g(d().m(function e(t){var n,r,i,s,o;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return e.a(2,[]);case 1:return e.p=1,n=t.slice(-10),e.n=2,this.extractKeyTopics(n.map(function(e){return"text"in e?e.text:"".concat(e.title," - ").concat(e.description||"")}).join(" "));case 2:return r=e.v,i="Based on the user's reading history and interests, suggest 5 content recommendations:\n\nRecent reading topics: ".concat(r.join(", "),"\n\nRecent items:\n").concat(n.map(function(e){return"text"in e?'Highlight: "'.concat(e.text,'"'):'Link: "'.concat(e.title,'"')}).join("\n"),'\n\nSuggest:\n1. Specific topics to explore next\n2. Types of content that would complement their reading\n3. Areas for deeper study\n\nReturn as JSON array with type: "recommendation", content: suggestion, metadata: {topic, confidence}'),e.n=3,this.callOpenAI(i);case 3:return s=e.v,e.a(2,this.parseInsights(s));case 4:return e.p=4,o=e.v,console.error("Error generating recommendations:",o),e.a(2,[])}},e,this,[[1,4]])})),function(e){return r.apply(this,arguments)})},{key:"updateKnowledgeGraph",value:(n=g(d().m(function e(t){var n,r,i,s,a,c,u,l,h;return d().w(function(e){for(;;)switch(e.n){case 0:n=[],r=[],i=new Map,s=o(t),e.p=1,s.s();case 2:if((a=s.n()).done){e.n=5;break}return c=a.value,u="text"in c?c.text:"".concat(c.title," - ").concat(c.description||""),e.n=3,this.extractKeyTopics(u);case 3:l=e.v,n.push({id:c.id,type:"text"in c?"highlight":"link",label:"text"in c?c.text.slice(0,50)+"...":c.title,weight:1,metadata:{topics:l}}),l.forEach(function(e){i.set(e,(i.get(e)||0)+1)});case 4:e.n=2;break;case 5:e.n=7;break;case 6:e.p=6,h=e.v,s.e(h);case 7:return e.p=7,s.f(),e.f(7);case 8:return i.forEach(function(e,t){e>1&&n.push({id:"topic-".concat(t),type:"topic",label:t,weight:e,metadata:{frequency:e}})}),e.a(2,{nodes:n,edges:r,lastUpdated:Date.now()})}},e,this,[[1,6,7,8]])})),function(e){return n.apply(this,arguments)})},{key:"extractKeyTopics",value:(t=g(d().m(function e(t){var n,r,i,s,o;return d().w(function(e){for(;;)switch(e.n){case 0:if(this.apiKey){e.n=1;break}return n=t.toLowerCase().match(/\b\w+\b/g)||[],r=new Map,n.forEach(function(e){e.length>4&&r.set(e,(r.get(e)||0)+1)}),e.a(2,Array.from(r.entries()).sort(function(e,t){return t[1]-e[1]}).slice(0,5).map(function(e){return u(e,1)[0]}));case 1:return e.p=1,i='Extract 3-5 key topics/themes from this content. Return as comma-separated list:\n\nContent: "'.concat(t.slice(0,1e3),'"'),e.n=2,this.callOpenAI(i);case 2:return s=e.v,e.a(2,s.split(",").map(function(e){return e.trim()}).filter(function(e){return e.length>0}));case 3:return e.p=3,o=e.v,console.error("Error extracting topics:",o),e.a(2,[])}},e,this,[[1,3]])})),function(e){return t.apply(this,arguments)})},{key:"calculateKnowledgeGrowth",value:function(e){if(0===e.length)return 0;var t=e.slice(-7),n=e.slice(-14,-7),r=t.reduce(function(e,t){return e+(t.linksRead||0)+(t.highlightsMade||0)},0),i=n.reduce(function(e,t){return e+(t.linksRead||0)+(t.highlightsMade||0)},0);return 0===i?r>0?1:0:Math.max(0,Math.min(2,r/i))}},{key:"callOpenAI",value:(e=g(d().m(function e(t){var n,r,i;return d().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,fetch("".concat(this.baseURL,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"user",content:t}],temperature:.7,max_tokens:500})});case 1:if((r=e.v).ok){e.n=2;break}throw new Error("OpenAI API error: ".concat(r.statusText));case 2:return e.n=3,r.json();case 3:return i=e.v,e.a(2,(null===(n=i.choices[0])||void 0===n||null===(n=n.message)||void 0===n?void 0:n.content)||"")}},e,this)})),function(t){return e.apply(this,arguments)})},{key:"parseInsights",value:function(e){try{var t=JSON.parse(e);return Array.isArray(t)?t.map(function(e){return s(s({id:"insight-".concat(Date.now(),"-").concat(Math.random())},e),{},{createdAt:Date.now()})}):[]}catch(t){return[{id:"insight-".concat(Date.now()),type:"summary",content:e.slice(0,200),createdAt:Date.now()}]}}},{key:"parseCrossReferences",value:function(e,t){try{var n=JSON.parse(e);return Array.isArray(n)?n.map(function(e){return s(s({id:"ref-".concat(Date.now(),"-").concat(Math.random())},e),{},{createdAt:Date.now()})}):[]}catch(e){return[]}}}]);var e,t,n,r,i,c,l,h}(),S=new w({apiKey:""})},519:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="0.0.0-automated"},530:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_HEADERS=void 0;const r=n(519);t.DEFAULT_HEADERS={"X-Client-Info":`postgrest-js/${r.version}`}},660:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(907)),s=r(n(818));t.default=class{constructor(e){this.shouldThrowOnError=!1,this.method=e.method,this.url=e.url,this.headers=e.headers,this.schema=e.schema,this.body=e.body,this.shouldThrowOnError=e.shouldThrowOnError,this.signal=e.signal,this.isMaybeSingle=e.isMaybeSingle,e.fetch?this.fetch=e.fetch:"undefined"==typeof fetch?this.fetch=i.default:this.fetch=fetch}throwOnError(){return this.shouldThrowOnError=!0,this}setHeader(e,t){return this.headers=Object.assign({},this.headers),this.headers[e]=t,this}then(e,t){void 0===this.schema||(["GET","HEAD"].includes(this.method)?this.headers["Accept-Profile"]=this.schema:this.headers["Content-Profile"]=this.schema),"GET"!==this.method&&"HEAD"!==this.method&&(this.headers["Content-Type"]="application/json");let n=(0,this.fetch)(this.url.toString(),{method:this.method,headers:this.headers,body:JSON.stringify(this.body),signal:this.signal}).then(async e=>{var t,n,r;let i=null,o=null,a=null,c=e.status,u=e.statusText;if(e.ok){if("HEAD"!==this.method){const t=await e.text();""===t||(o="text/csv"===this.headers.Accept||this.headers.Accept&&this.headers.Accept.includes("application/vnd.pgrst.plan+text")?t:JSON.parse(t))}const r=null===(t=this.headers.Prefer)||void 0===t?void 0:t.match(/count=(exact|planned|estimated)/),s=null===(n=e.headers.get("content-range"))||void 0===n?void 0:n.split("/");r&&s&&s.length>1&&(a=parseInt(s[1])),this.isMaybeSingle&&"GET"===this.method&&Array.isArray(o)&&(o.length>1?(i={code:"PGRST116",details:`Results contain ${o.length} rows, application/vnd.pgrst.object+json requires 1 row`,hint:null,message:"JSON object requested, multiple (or no) rows returned"},o=null,a=null,c=406,u="Not Acceptable"):o=1===o.length?o[0]:null)}else{const t=await e.text();try{i=JSON.parse(t),Array.isArray(i)&&404===e.status&&(o=[],i=null,c=200,u="OK")}catch(n){404===e.status&&""===t?(c=204,u="No Content"):i={message:t}}if(i&&this.isMaybeSingle&&(null===(r=null==i?void 0:i.details)||void 0===r?void 0:r.includes("0 rows"))&&(i=null,c=200,u="OK"),i&&this.shouldThrowOnError)throw new s.default(i)}return{error:i,data:o,count:a,status:c,statusText:u}});return this.shouldThrowOnError||(n=n.catch(e=>{var t,n,r;return{error:{message:`${null!==(t=null==e?void 0:e.name)&&void 0!==t?t:"FetchError"}: ${null==e?void 0:e.message}`,details:`${null!==(n=null==e?void 0:e.stack)&&void 0!==n?n:""}`,hint:"",code:`${null!==(r=null==e?void 0:e.code)&&void 0!==r?r:""}`},data:null,count:null,status:0,statusText:""}})),n.then(e,t)}returns(){return this}overrideTypes(){return this}}},818:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends Error{constructor(e){super(e.message),this.name="PostgrestError",this.details=e.details,this.hint=e.hint,this.code=e.code}}t.default=n},825:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(261));class s extends i.default{eq(e,t){return this.url.searchParams.append(e,`eq.${t}`),this}neq(e,t){return this.url.searchParams.append(e,`neq.${t}`),this}gt(e,t){return this.url.searchParams.append(e,`gt.${t}`),this}gte(e,t){return this.url.searchParams.append(e,`gte.${t}`),this}lt(e,t){return this.url.searchParams.append(e,`lt.${t}`),this}lte(e,t){return this.url.searchParams.append(e,`lte.${t}`),this}like(e,t){return this.url.searchParams.append(e,`like.${t}`),this}likeAllOf(e,t){return this.url.searchParams.append(e,`like(all).{${t.join(",")}}`),this}likeAnyOf(e,t){return this.url.searchParams.append(e,`like(any).{${t.join(",")}}`),this}ilike(e,t){return this.url.searchParams.append(e,`ilike.${t}`),this}ilikeAllOf(e,t){return this.url.searchParams.append(e,`ilike(all).{${t.join(",")}}`),this}ilikeAnyOf(e,t){return this.url.searchParams.append(e,`ilike(any).{${t.join(",")}}`),this}is(e,t){return this.url.searchParams.append(e,`is.${t}`),this}in(e,t){const n=Array.from(new Set(t)).map(e=>"string"==typeof e&&new RegExp("[,()]").test(e)?`"${e}"`:`${e}`).join(",");return this.url.searchParams.append(e,`in.(${n})`),this}contains(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cs.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cs.{${t.join(",")}}`):this.url.searchParams.append(e,`cs.${JSON.stringify(t)}`),this}containedBy(e,t){return"string"==typeof t?this.url.searchParams.append(e,`cd.${t}`):Array.isArray(t)?this.url.searchParams.append(e,`cd.{${t.join(",")}}`):this.url.searchParams.append(e,`cd.${JSON.stringify(t)}`),this}rangeGt(e,t){return this.url.searchParams.append(e,`sr.${t}`),this}rangeGte(e,t){return this.url.searchParams.append(e,`nxl.${t}`),this}rangeLt(e,t){return this.url.searchParams.append(e,`sl.${t}`),this}rangeLte(e,t){return this.url.searchParams.append(e,`nxr.${t}`),this}rangeAdjacent(e,t){return this.url.searchParams.append(e,`adj.${t}`),this}overlaps(e,t){return"string"==typeof t?this.url.searchParams.append(e,`ov.${t}`):this.url.searchParams.append(e,`ov.{${t.join(",")}}`),this}textSearch(e,t,{config:n,type:r}={}){let i="";"plain"===r?i="pl":"phrase"===r?i="ph":"websearch"===r&&(i="w");const s=void 0===n?"":`(${n})`;return this.url.searchParams.append(e,`${i}fts${s}.${t}`),this}match(e){return Object.entries(e).forEach(([e,t])=>{this.url.searchParams.append(e,`eq.${t}`)}),this}not(e,t,n){return this.url.searchParams.append(e,`not.${t}.${n}`),this}or(e,{foreignTable:t,referencedTable:n=t}={}){const r=n?`${n}.or`:"or";return this.url.searchParams.append(r,`(${e})`),this}filter(e,t,n){return this.url.searchParams.append(e,`${t}.${n}`),this}}t.default=s},907:(e,t,n)=>{n.r(t),n.d(t,{Headers:()=>o,Request:()=>a,Response:()=>c,default:()=>s,fetch:()=>i});var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("unable to locate global object")}();const i=r.fetch,s=r.fetch.bind(r),o=r.Headers,a=r.Request,c=r.Response}},i={};function s(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,s),n.exports}s.m=r,s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce((t,n)=>(s.f[n](e,t),t),[])),s.u=e=>e+".js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="nest-chrome-extension:",s.l=(n,r,i,o)=>{if(e[n])e[n].push(r);else{var a,c;if(void 0!==i)for(var u=document.getElementsByTagName("script"),l=0;l<u.length;l++){var h=u[l];if(h.getAttribute("src")==n||h.getAttribute("data-webpack")==t+i){a=h;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",t+i),a.src=n),e[n]=[r];var d=(t,r)=>{a.onerror=a.onload=null,clearTimeout(f);var i=e[n];if(delete e[n],a.parentNode&&a.parentNode.removeChild(a),i&&i.forEach(e=>e(r)),t)return t(r)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),c&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{var e={471:0,508:0};s.f.j=(t,n)=>{var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise((n,i)=>r=e[t]=[n,i]);n.push(r[2]=i);var o=s.p+s.u(t),a=new Error;s.l(o,n=>{if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+o+")",a.name="ChunkLoadError",a.type=i,a.request=o,r[1](a)}},"chunk-"+t,t)}};var t=(t,n)=>{var r,i,[o,a,c]=n,u=0;if(o.some(t=>0!==e[t])){for(r in a)s.o(a,r)&&(s.m[r]=a[r]);c&&c(s)}for(t&&t(n);u<o.length;u++)i=o[u],s.o(e,i)&&e[i]&&e[i][0](),e[i]=0},n=self.webpackChunknest_chrome_extension=self.webpackChunknest_chrome_extension||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();class o extends Error{constructor(e,t="FunctionsError",n){super(e),this.name=t,this.context=n}}class a extends o{constructor(e){super("Failed to send a request to the Edge Function","FunctionsFetchError",e)}}class c extends o{constructor(e){super("Relay Error invoking the Edge Function","FunctionsRelayError",e)}}class u extends o{constructor(e){super("Edge Function returned a non-2xx status code","FunctionsHttpError",e)}}!function(e){e.Any="any",e.ApNortheast1="ap-northeast-1",e.ApNortheast2="ap-northeast-2",e.ApSouth1="ap-south-1",e.ApSoutheast1="ap-southeast-1",e.ApSoutheast2="ap-southeast-2",e.CaCentral1="ca-central-1",e.EuCentral1="eu-central-1",e.EuWest1="eu-west-1",e.EuWest2="eu-west-2",e.EuWest3="eu-west-3",e.SaEast1="sa-east-1",e.UsEast1="us-east-1",e.UsWest1="us-west-1",e.UsWest2="us-west-2"}(n||(n={}));class l{constructor(e,{headers:t={},customFetch:r,region:i=n.Any}={}){this.url=e,this.headers=t,this.region=i,this.fetch=(e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(s.bind(s,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)})(r)}setAuth(e){this.headers.Authorization=`Bearer ${e}`}invoke(e,t={}){var n,r,i,s,o;return r=this,i=void 0,o=function*(){try{const{headers:r,method:i,body:s}=t;let o={},{region:l}=t;l||(l=this.region);const h=new URL(`${this.url}/${e}`);let d;l&&"any"!==l&&(o["x-region"]=l,h.searchParams.set("forceFunctionRegion",l)),s&&(r&&!Object.prototype.hasOwnProperty.call(r,"Content-Type")||!r)&&("undefined"!=typeof Blob&&s instanceof Blob||s instanceof ArrayBuffer?(o["Content-Type"]="application/octet-stream",d=s):"string"==typeof s?(o["Content-Type"]="text/plain",d=s):"undefined"!=typeof FormData&&s instanceof FormData?d=s:(o["Content-Type"]="application/json",d=JSON.stringify(s)));const f=yield this.fetch(h.toString(),{method:i||"POST",headers:Object.assign(Object.assign(Object.assign({},o),this.headers),r),body:d}).catch(e=>{throw new a(e)}),p=f.headers.get("x-relay-error");if(p&&"true"===p)throw new c(f);if(!f.ok)throw new u(f);let g,m=(null!==(n=f.headers.get("Content-Type"))&&void 0!==n?n:"text/plain").split(";")[0].trim();return g="application/json"===m?yield f.json():"application/octet-stream"===m?yield f.blob():"text/event-stream"===m?f:"multipart/form-data"===m?yield f.formData():yield f.text(),{data:g,error:null,response:f}}catch(e){return{data:null,error:e,response:e instanceof u||e instanceof c?e.context:void 0}}},new((s=void 0)||(s=Promise))(function(e,t){function n(e){try{c(o.next(e))}catch(e){t(e)}}function a(e){try{c(o.throw(e))}catch(e){t(e)}}function c(t){var r;t.done?e(t.value):(r=t.value,r instanceof s?r:new s(function(e){e(r)})).then(n,a)}c((o=o.apply(r,i||[])).next())})}}var h=s(279);const{PostgrestClient:d,PostgrestQueryBuilder:f,PostgrestFilterBuilder:p,PostgrestTransformBuilder:g,PostgrestBuilder:m,PostgrestError:v}=h,y=function(){if("undefined"!=typeof WebSocket)return WebSocket;if(void 0!==global.WebSocket)return global.WebSocket;if(void 0!==window.WebSocket)return window.WebSocket;if(void 0!==self.WebSocket)return self.WebSocket;throw new Error("`WebSocket` is not supported in this environment")}();var b,w,k,_,S,T,A;!function(e){e[e.connecting=0]="connecting",e[e.open=1]="open",e[e.closing=2]="closing",e[e.closed=3]="closed"}(b||(b={})),(A=w||(w={})).closed="closed",A.errored="errored",A.joined="joined",A.joining="joining",A.leaving="leaving",function(e){e.close="phx_close",e.error="phx_error",e.join="phx_join",e.reply="phx_reply",e.leave="phx_leave",e.access_token="access_token"}(k||(k={})),function(e){e.websocket="websocket"}(_||(_={})),function(e){e.Connecting="connecting",e.Open="open",e.Closing="closing",e.Closed="closed"}(S||(S={}));class j{constructor(){this.HEADER_LENGTH=1}decode(e,t){return e.constructor===ArrayBuffer?t(this._binaryDecode(e)):t("string"==typeof e?JSON.parse(e):{})}_binaryDecode(e){const t=new DataView(e),n=new TextDecoder;return this._decodeBroadcast(e,t,n)}_decodeBroadcast(e,t,n){const r=t.getUint8(1),i=t.getUint8(2);let s=this.HEADER_LENGTH+2;const o=n.decode(e.slice(s,s+r));s+=r;const a=n.decode(e.slice(s,s+i));return s+=i,{ref:null,topic:o,event:a,payload:JSON.parse(n.decode(e.slice(s,e.byteLength)))}}}class O{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=void 0,this.tries=0,this.callback=e,this.timerCalc=t}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}}!function(e){e.abstime="abstime",e.bool="bool",e.date="date",e.daterange="daterange",e.float4="float4",e.float8="float8",e.int2="int2",e.int4="int4",e.int4range="int4range",e.int8="int8",e.int8range="int8range",e.json="json",e.jsonb="jsonb",e.money="money",e.numeric="numeric",e.oid="oid",e.reltime="reltime",e.text="text",e.time="time",e.timestamp="timestamp",e.timestamptz="timestamptz",e.timetz="timetz",e.tsrange="tsrange",e.tstzrange="tstzrange"}(T||(T={}));const I=(e,t,n={})=>{var r;const i=null!==(r=n.skipTypes)&&void 0!==r?r:[];return Object.keys(t).reduce((n,r)=>(n[r]=E(r,e,t,i),n),{})},E=(e,t,n,r)=>{const i=t.find(t=>t.name===e),s=null==i?void 0:i.type,o=n[e];return s&&!r.includes(s)?P(s,o):C(o)},P=(e,t)=>{if("_"===e.charAt(0)){const n=e.slice(1,e.length);return D(t,n)}switch(e){case T.bool:return x(t);case T.float4:case T.float8:case T.int2:case T.int4:case T.int8:case T.numeric:case T.oid:return R(t);case T.json:case T.jsonb:return $(t);case T.timestamp:return L(t);case T.abstime:case T.date:case T.daterange:case T.int4range:case T.int8range:case T.money:case T.reltime:case T.text:case T.time:case T.timestamptz:case T.timetz:case T.tsrange:case T.tstzrange:default:return C(t)}},C=e=>e,x=e=>{switch(e){case"t":return!0;case"f":return!1;default:return e}},R=e=>{if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return t}return e},$=e=>{if("string"==typeof e)try{return JSON.parse(e)}catch(t){return console.log(`JSON parse error: ${t}`),e}return e},D=(e,t)=>{if("string"!=typeof e)return e;const n=e.length-1,r=e[n];if("{"===e[0]&&"}"===r){let r;const i=e.slice(1,n);try{r=JSON.parse("["+i+"]")}catch(e){r=i?i.split(","):[]}return r.map(e=>P(t,e))}return e},L=e=>"string"==typeof e?e.replace(" ","T"):e,U=e=>{let t=e;return t=t.replace(/^ws/i,"http"),t=t.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i,""),t.replace(/\/+$/,"")};class N{constructor(e,t,n={},r=1e4){this.channel=e,this.event=t,this.payload=n,this.timeout=r,this.sent=!1,this.timeoutTimer=void 0,this.ref="",this.receivedResp=null,this.recHooks=[],this.refEvent=null}resend(e){this.timeout=e,this._cancelRefEvent(),this.ref="",this.refEvent=null,this.receivedResp=null,this.sent=!1,this.send()}send(){this._hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload,ref:this.ref,join_ref:this.channel._joinRef()}))}updatePayload(e){this.payload=Object.assign(Object.assign({},this.payload),e)}receive(e,t){var n;return this._hasReceived(e)&&t(null===(n=this.receivedResp)||void 0===n?void 0:n.response),this.recHooks.push({status:e,callback:t}),this}startTimeout(){this.timeoutTimer||(this.ref=this.channel.socket._makeRef(),this.refEvent=this.channel._replyEventName(this.ref),this.channel._on(this.refEvent,{},e=>{this._cancelRefEvent(),this._cancelTimeout(),this.receivedResp=e,this._matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout))}trigger(e,t){this.refEvent&&this.channel._trigger(this.refEvent,{status:e,response:t})}destroy(){this._cancelRefEvent(),this._cancelTimeout()}_cancelRefEvent(){this.refEvent&&this.channel._off(this.refEvent,{})}_cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=void 0}_matchReceive({status:e,response:t}){this.recHooks.filter(t=>t.status===e).forEach(e=>e.callback(t))}_hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}}var B,F,q,M;!function(e){e.SYNC="sync",e.JOIN="join",e.LEAVE="leave"}(B||(B={}));class z{constructor(e,t){this.channel=e,this.state={},this.pendingDiffs=[],this.joinRef=null,this.caller={onJoin:()=>{},onLeave:()=>{},onSync:()=>{}};const n=(null==t?void 0:t.events)||{state:"presence_state",diff:"presence_diff"};this.channel._on(n.state,{},e=>{const{onJoin:t,onLeave:n,onSync:r}=this.caller;this.joinRef=this.channel._joinRef(),this.state=z.syncState(this.state,e,t,n),this.pendingDiffs.forEach(e=>{this.state=z.syncDiff(this.state,e,t,n)}),this.pendingDiffs=[],r()}),this.channel._on(n.diff,{},e=>{const{onJoin:t,onLeave:n,onSync:r}=this.caller;this.inPendingSyncState()?this.pendingDiffs.push(e):(this.state=z.syncDiff(this.state,e,t,n),r())}),this.onJoin((e,t,n)=>{this.channel._trigger("presence",{event:"join",key:e,currentPresences:t,newPresences:n})}),this.onLeave((e,t,n)=>{this.channel._trigger("presence",{event:"leave",key:e,currentPresences:t,leftPresences:n})}),this.onSync(()=>{this.channel._trigger("presence",{event:"sync"})})}static syncState(e,t,n,r){const i=this.cloneDeep(e),s=this.transformState(t),o={},a={};return this.map(i,(e,t)=>{s[e]||(a[e]=t)}),this.map(s,(e,t)=>{const n=i[e];if(n){const r=t.map(e=>e.presence_ref),i=n.map(e=>e.presence_ref),s=t.filter(e=>i.indexOf(e.presence_ref)<0),c=n.filter(e=>r.indexOf(e.presence_ref)<0);s.length>0&&(o[e]=s),c.length>0&&(a[e]=c)}else o[e]=t}),this.syncDiff(i,{joins:o,leaves:a},n,r)}static syncDiff(e,t,n,r){const{joins:i,leaves:s}={joins:this.transformState(t.joins),leaves:this.transformState(t.leaves)};return n||(n=()=>{}),r||(r=()=>{}),this.map(i,(t,r)=>{var i;const s=null!==(i=e[t])&&void 0!==i?i:[];if(e[t]=this.cloneDeep(r),s.length>0){const n=e[t].map(e=>e.presence_ref),r=s.filter(e=>n.indexOf(e.presence_ref)<0);e[t].unshift(...r)}n(t,s,r)}),this.map(s,(t,n)=>{let i=e[t];if(!i)return;const s=n.map(e=>e.presence_ref);i=i.filter(e=>s.indexOf(e.presence_ref)<0),e[t]=i,r(t,i,n),0===i.length&&delete e[t]}),e}static map(e,t){return Object.getOwnPropertyNames(e).map(n=>t(n,e[n]))}static transformState(e){return e=this.cloneDeep(e),Object.getOwnPropertyNames(e).reduce((t,n)=>{const r=e[n];return t[n]="metas"in r?r.metas.map(e=>(e.presence_ref=e.phx_ref,delete e.phx_ref,delete e.phx_ref_prev,e)):r,t},{})}static cloneDeep(e){return JSON.parse(JSON.stringify(e))}onJoin(e){this.caller.onJoin=e}onLeave(e){this.caller.onLeave=e}onSync(e){this.caller.onSync=e}inPendingSyncState(){return!this.joinRef||this.joinRef!==this.channel._joinRef()}}!function(e){e.ALL="*",e.INSERT="INSERT",e.UPDATE="UPDATE",e.DELETE="DELETE"}(F||(F={})),function(e){e.BROADCAST="broadcast",e.PRESENCE="presence",e.POSTGRES_CHANGES="postgres_changes",e.SYSTEM="system"}(q||(q={})),function(e){e.SUBSCRIBED="SUBSCRIBED",e.TIMED_OUT="TIMED_OUT",e.CLOSED="CLOSED",e.CHANNEL_ERROR="CHANNEL_ERROR"}(M||(M={}));class K{constructor(e,t={config:{}},n){this.topic=e,this.params=t,this.socket=n,this.bindings={},this.state=w.closed,this.joinedOnce=!1,this.pushBuffer=[],this.subTopic=e.replace(/^realtime:/i,""),this.params.config=Object.assign({broadcast:{ack:!1,self:!1},presence:{key:""},private:!1},t.config),this.timeout=this.socket.timeout,this.joinPush=new N(this,k.join,this.params,this.timeout),this.rejoinTimer=new O(()=>this._rejoinUntilConnected(),this.socket.reconnectAfterMs),this.joinPush.receive("ok",()=>{this.state=w.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(e=>e.send()),this.pushBuffer=[]}),this._onClose(()=>{this.rejoinTimer.reset(),this.socket.log("channel",`close ${this.topic} ${this._joinRef()}`),this.state=w.closed,this.socket._remove(this)}),this._onError(e=>{this._isLeaving()||this._isClosed()||(this.socket.log("channel",`error ${this.topic}`,e),this.state=w.errored,this.rejoinTimer.scheduleTimeout())}),this.joinPush.receive("timeout",()=>{this._isJoining()&&(this.socket.log("channel",`timeout ${this.topic}`,this.joinPush.timeout),this.state=w.errored,this.rejoinTimer.scheduleTimeout())}),this._on(k.reply,{},(e,t)=>{this._trigger(this._replyEventName(t),e)}),this.presence=new z(this),this.broadcastEndpointURL=U(this.socket.endPoint)+"/api/broadcast",this.private=this.params.config.private||!1}subscribe(e,t=this.timeout){var n,r;if(this.socket.isConnected()||this.socket.connect(),this.state==w.closed){const{config:{broadcast:i,presence:s,private:o}}=this.params;this._onError(t=>null==e?void 0:e(M.CHANNEL_ERROR,t)),this._onClose(()=>null==e?void 0:e(M.CLOSED));const a={},c={broadcast:i,presence:s,postgres_changes:null!==(r=null===(n=this.bindings.postgres_changes)||void 0===n?void 0:n.map(e=>e.filter))&&void 0!==r?r:[],private:o};this.socket.accessTokenValue&&(a.access_token=this.socket.accessTokenValue),this.updateJoinPayload(Object.assign({config:c},a)),this.joinedOnce=!0,this._rejoin(t),this.joinPush.receive("ok",async({postgres_changes:t})=>{var n;if(this.socket.setAuth(),void 0!==t){const r=this.bindings.postgres_changes,i=null!==(n=null==r?void 0:r.length)&&void 0!==n?n:0,s=[];for(let n=0;n<i;n++){const i=r[n],{filter:{event:o,schema:a,table:c,filter:u}}=i,l=t&&t[n];if(!l||l.event!==o||l.schema!==a||l.table!==c||l.filter!==u)return this.unsubscribe(),this.state=w.errored,void(null==e||e(M.CHANNEL_ERROR,new Error("mismatch between server and client bindings for postgres changes")));s.push(Object.assign(Object.assign({},i),{id:l.id}))}return this.bindings.postgres_changes=s,void(e&&e(M.SUBSCRIBED))}null==e||e(M.SUBSCRIBED)}).receive("error",t=>{this.state=w.errored,null==e||e(M.CHANNEL_ERROR,new Error(JSON.stringify(Object.values(t).join(", ")||"error")))}).receive("timeout",()=>{null==e||e(M.TIMED_OUT)})}return this}presenceState(){return this.presence.state}async track(e,t={}){return await this.send({type:"presence",event:"track",payload:e},t.timeout||this.timeout)}async untrack(e={}){return await this.send({type:"presence",event:"untrack"},e)}on(e,t,n){return this._on(e,t,n)}async send(e,t={}){var n,r;if(this._canPush()||"broadcast"!==e.type)return new Promise(n=>{var r,i,s;const o=this._push(e.type,e,t.timeout||this.timeout);"broadcast"!==e.type||(null===(s=null===(i=null===(r=this.params)||void 0===r?void 0:r.config)||void 0===i?void 0:i.broadcast)||void 0===s?void 0:s.ack)||n("ok"),o.receive("ok",()=>n("ok")),o.receive("error",()=>n("error")),o.receive("timeout",()=>n("timed out"))});{const{event:i,payload:s}=e,o={method:"POST",headers:{Authorization:this.socket.accessTokenValue?`Bearer ${this.socket.accessTokenValue}`:"",apikey:this.socket.apiKey?this.socket.apiKey:"","Content-Type":"application/json"},body:JSON.stringify({messages:[{topic:this.subTopic,event:i,payload:s,private:this.private}]})};try{const e=await this._fetchWithTimeout(this.broadcastEndpointURL,o,null!==(n=t.timeout)&&void 0!==n?n:this.timeout);return await(null===(r=e.body)||void 0===r?void 0:r.cancel()),e.ok?"ok":"error"}catch(e){return"AbortError"===e.name?"timed out":"error"}}}updateJoinPayload(e){this.joinPush.updatePayload(e)}unsubscribe(e=this.timeout){this.state=w.leaving;const t=()=>{this.socket.log("channel",`leave ${this.topic}`),this._trigger(k.close,"leave",this._joinRef())};this.joinPush.destroy();let n=null;return new Promise(r=>{n=new N(this,k.leave,{},e),n.receive("ok",()=>{t(),r("ok")}).receive("timeout",()=>{t(),r("timed out")}).receive("error",()=>{r("error")}),n.send(),this._canPush()||n.trigger("ok",{})}).finally(()=>{null==n||n.destroy()})}teardown(){this.pushBuffer.forEach(e=>e.destroy()),this.rejoinTimer&&clearTimeout(this.rejoinTimer.timer),this.joinPush.destroy()}async _fetchWithTimeout(e,t,n){const r=new AbortController,i=setTimeout(()=>r.abort(),n),s=await this.socket.fetch(e,Object.assign(Object.assign({},t),{signal:r.signal}));return clearTimeout(i),s}_push(e,t,n=this.timeout){if(!this.joinedOnce)throw`tried to push '${e}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;let r=new N(this,e,t,n);return this._canPush()?r.send():(r.startTimeout(),this.pushBuffer.push(r)),r}_onMessage(e,t,n){return t}_isMember(e){return this.topic===e}_joinRef(){return this.joinPush.ref}_trigger(e,t,n){var r,i;const s=e.toLocaleLowerCase(),{close:o,error:a,leave:c,join:u}=k;if(n&&[o,a,c,u].indexOf(s)>=0&&n!==this._joinRef())return;let l=this._onMessage(s,t,n);if(t&&!l)throw"channel onMessage callbacks must return the payload, modified or unmodified";["insert","update","delete"].includes(s)?null===(r=this.bindings.postgres_changes)||void 0===r||r.filter(e=>{var t,n,r;return"*"===(null===(t=e.filter)||void 0===t?void 0:t.event)||(null===(r=null===(n=e.filter)||void 0===n?void 0:n.event)||void 0===r?void 0:r.toLocaleLowerCase())===s}).map(e=>e.callback(l,n)):null===(i=this.bindings[s])||void 0===i||i.filter(e=>{var n,r,i,o,a,c;if(["broadcast","presence","postgres_changes"].includes(s)){if("id"in e){const s=e.id,o=null===(n=e.filter)||void 0===n?void 0:n.event;return s&&(null===(r=t.ids)||void 0===r?void 0:r.includes(s))&&("*"===o||(null==o?void 0:o.toLocaleLowerCase())===(null===(i=t.data)||void 0===i?void 0:i.type.toLocaleLowerCase()))}{const n=null===(a=null===(o=null==e?void 0:e.filter)||void 0===o?void 0:o.event)||void 0===a?void 0:a.toLocaleLowerCase();return"*"===n||n===(null===(c=null==t?void 0:t.event)||void 0===c?void 0:c.toLocaleLowerCase())}}return e.type.toLocaleLowerCase()===s}).map(e=>{if("object"==typeof l&&"ids"in l){const e=l.data,{schema:t,table:n,commit_timestamp:r,type:i,errors:s}=e,o={schema:t,table:n,commit_timestamp:r,eventType:i,new:{},old:{},errors:s};l=Object.assign(Object.assign({},o),this._getPayloadRecords(e))}e.callback(l,n)})}_isClosed(){return this.state===w.closed}_isJoined(){return this.state===w.joined}_isJoining(){return this.state===w.joining}_isLeaving(){return this.state===w.leaving}_replyEventName(e){return`chan_reply_${e}`}_on(e,t,n){const r=e.toLocaleLowerCase(),i={type:r,filter:t,callback:n};return this.bindings[r]?this.bindings[r].push(i):this.bindings[r]=[i],this}_off(e,t){const n=e.toLocaleLowerCase();return this.bindings[n]=this.bindings[n].filter(e=>{var r;return!((null===(r=e.type)||void 0===r?void 0:r.toLocaleLowerCase())===n&&K.isEqual(e.filter,t))}),this}static isEqual(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(e[n]!==t[n])return!1;return!0}_rejoinUntilConnected(){this.rejoinTimer.scheduleTimeout(),this.socket.isConnected()&&this._rejoin()}_onClose(e){this._on(k.close,{},e)}_onError(e){this._on(k.error,{},t=>e(t))}_canPush(){return this.socket.isConnected()&&this._isJoined()}_rejoin(e=this.timeout){this._isLeaving()||(this.socket._leaveOpenTopic(this.topic),this.state=w.joining,this.joinPush.resend(e))}_getPayloadRecords(e){const t={new:{},old:{}};return"INSERT"!==e.type&&"UPDATE"!==e.type||(t.new=I(e.columns,e.record)),"UPDATE"!==e.type&&"DELETE"!==e.type||(t.old=I(e.columns,e.old_record)),t}}const W=()=>{};class J{constructor(e,t){var n;this.accessTokenValue=null,this.apiKey=null,this.channels=new Array,this.endPoint="",this.httpEndpoint="",this.headers={},this.params={},this.timeout=1e4,this.heartbeatIntervalMs=25e3,this.heartbeatTimer=void 0,this.pendingHeartbeatRef=null,this.heartbeatCallback=W,this.ref=0,this.logger=W,this.conn=null,this.sendBuffer=[],this.serializer=new j,this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.accessToken=null,this._resolveFetch=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(s.bind(s,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},this.endPoint=`${e}/${_.websocket}`,this.httpEndpoint=U(e),(null==t?void 0:t.transport)?this.transport=t.transport:this.transport=null,(null==t?void 0:t.params)&&(this.params=t.params),(null==t?void 0:t.timeout)&&(this.timeout=t.timeout),(null==t?void 0:t.logger)&&(this.logger=t.logger),((null==t?void 0:t.logLevel)||(null==t?void 0:t.log_level))&&(this.logLevel=t.logLevel||t.log_level,this.params=Object.assign(Object.assign({},this.params),{log_level:this.logLevel})),(null==t?void 0:t.heartbeatIntervalMs)&&(this.heartbeatIntervalMs=t.heartbeatIntervalMs);const r=null===(n=null==t?void 0:t.params)||void 0===n?void 0:n.apikey;if(r&&(this.accessTokenValue=r,this.apiKey=r),this.reconnectAfterMs=(null==t?void 0:t.reconnectAfterMs)?t.reconnectAfterMs:e=>[1e3,2e3,5e3,1e4][e-1]||1e4,this.encode=(null==t?void 0:t.encode)?t.encode:(e,t)=>t(JSON.stringify(e)),this.decode=(null==t?void 0:t.decode)?t.decode:this.serializer.decode.bind(this.serializer),this.reconnectTimer=new O(async()=>{this.disconnect(),this.connect()},this.reconnectAfterMs),this.fetch=this._resolveFetch(null==t?void 0:t.fetch),null==t?void 0:t.worker){if("undefined"!=typeof window&&!window.Worker)throw new Error("Web Worker is not supported");this.worker=(null==t?void 0:t.worker)||!1,this.workerUrl=null==t?void 0:t.workerUrl}this.accessToken=(null==t?void 0:t.accessToken)||null}connect(){if(!this.conn){if(this.transport||(this.transport=y),!this.transport)throw new Error("No transport provided");this.conn=new this.transport(this.endpointURL()),this.setupConnection()}}endpointURL(){return this._appendParams(this.endPoint,Object.assign({},this.params,{vsn:"1.0.0"}))}disconnect(e,t){this.conn&&(this.conn.onclose=function(){},e?this.conn.close(e,null!=t?t:""):this.conn.close(),this.conn=null,this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.reset(),this.channels.forEach(e=>e.teardown()))}getChannels(){return this.channels}async removeChannel(e){const t=await e.unsubscribe();return 0===this.channels.length&&this.disconnect(),t}async removeAllChannels(){const e=await Promise.all(this.channels.map(e=>e.unsubscribe()));return this.channels=[],this.disconnect(),e}log(e,t,n){this.logger(e,t,n)}connectionState(){switch(this.conn&&this.conn.readyState){case b.connecting:return S.Connecting;case b.open:return S.Open;case b.closing:return S.Closing;default:return S.Closed}}isConnected(){return this.connectionState()===S.Open}channel(e,t={config:{}}){const n=`realtime:${e}`,r=this.getChannels().find(e=>e.topic===n);if(r)return r;{const n=new K(`realtime:${e}`,t,this);return this.channels.push(n),n}}push(e){const{topic:t,event:n,payload:r,ref:i}=e,s=()=>{this.encode(e,e=>{var t;null===(t=this.conn)||void 0===t||t.send(e)})};this.log("push",`${t} ${n} (${i})`,r),this.isConnected()?s():this.sendBuffer.push(s)}async setAuth(e=null){let t=e||this.accessToken&&await this.accessToken()||this.accessTokenValue;this.accessTokenValue!=t&&(this.accessTokenValue=t,this.channels.forEach(e=>{const n={access_token:t,version:"realtime-js/2.11.15"};t&&e.updateJoinPayload(n),e.joinedOnce&&e._isJoined()&&e._push(k.access_token,{access_token:t})}))}async sendHeartbeat(){var e;if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.heartbeatCallback("timeout"),void(null===(e=this.conn)||void 0===e||e.close(1e3,"hearbeat timeout"));this.pendingHeartbeatRef=this._makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatCallback("sent"),await this.setAuth()}else this.heartbeatCallback("disconnected")}onHeartbeat(e){this.heartbeatCallback=e}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}_makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}_leaveOpenTopic(e){let t=this.channels.find(t=>t.topic===e&&(t._isJoined()||t._isJoining()));t&&(this.log("transport",`leaving duplicate topic "${e}"`),t.unsubscribe())}_remove(e){this.channels=this.channels.filter(t=>t.topic!==e.topic)}setupConnection(){this.conn&&(this.conn.binaryType="arraybuffer",this.conn.onopen=()=>this._onConnOpen(),this.conn.onerror=e=>this._onConnError(e),this.conn.onmessage=e=>this._onConnMessage(e),this.conn.onclose=e=>this._onConnClose(e))}_onConnMessage(e){this.decode(e.data,e=>{let{topic:t,event:n,payload:r,ref:i}=e;"phoenix"===t&&"phx_reply"===n&&this.heartbeatCallback("ok"==e.payload.status?"ok":"error"),i&&i===this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null),this.log("receive",`${r.status||""} ${t} ${n} ${i&&"("+i+")"||""}`,r),Array.from(this.channels).filter(e=>e._isMember(t)).forEach(e=>e._trigger(n,r,i)),this.stateChangeCallbacks.message.forEach(t=>t(e))})}_onConnOpen(){this.log("transport",`connected to ${this.endpointURL()}`),this.flushSendBuffer(),this.reconnectTimer.reset(),this.worker?this.workerRef||this._startWorkerHeartbeat():this._startHeartbeat(),this.stateChangeCallbacks.open.forEach(e=>e())}_startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)}_startWorkerHeartbeat(){this.workerUrl?this.log("worker",`starting worker for from ${this.workerUrl}`):this.log("worker","starting default worker");const e=this._workerObjectUrl(this.workerUrl);this.workerRef=new Worker(e),this.workerRef.onerror=e=>{this.log("worker","worker error",e.message),this.workerRef.terminate()},this.workerRef.onmessage=e=>{"keepAlive"===e.data.event&&this.sendHeartbeat()},this.workerRef.postMessage({event:"start",interval:this.heartbeatIntervalMs})}_onConnClose(e){this.log("transport","close",e),this._triggerChanError(),this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(t=>t(e))}_onConnError(e){this.log("transport",`${e}`),this._triggerChanError(),this.stateChangeCallbacks.error.forEach(t=>t(e))}_triggerChanError(){this.channels.forEach(e=>e._trigger(k.error))}_appendParams(e,t){if(0===Object.keys(t).length)return e;const n=e.match(/\?/)?"&":"?";return`${e}${n}${new URLSearchParams(t)}`}_workerObjectUrl(e){let t;if(e)t=e;else{const e=new Blob(['\n  addEventListener("message", (e) => {\n    if (e.data.event === "start") {\n      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);\n    }\n  });'],{type:"application/javascript"});t=URL.createObjectURL(e)}return t}}class G extends Error{constructor(e){super(e),this.__isStorageError=!0,this.name="StorageError"}}function H(e){return"object"==typeof e&&null!==e&&"__isStorageError"in e}class V extends G{constructor(e,t){super(e),this.name="StorageApiError",this.status=t}toJSON(){return{name:this.name,message:this.message,status:this.status}}}class Y extends G{constructor(e,t){super(e),this.name="StorageUnknownError",this.originalError=t}}const Q=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(s.bind(s,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},X=e=>{if(Array.isArray(e))return e.map(e=>X(e));if("function"==typeof e||e!==Object(e))return e;const t={};return Object.entries(e).forEach(([e,n])=>{const r=e.replace(/([-_][a-z])/gi,e=>e.toUpperCase().replace(/[-_]/g,""));t[r]=X(n)}),t};var Z=function(e,t,n,r){return new(n||(n=Promise))(function(i,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,a)}c((r=r.apply(e,t||[])).next())})};const ee=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),te=(e,t,n)=>Z(void 0,void 0,void 0,function*(){const r=yield(i=void 0,o=void 0,a=void 0,c=function*(){return"undefined"==typeof Response?(yield Promise.resolve().then(s.bind(s,907))).Response:Response},new(a||(a=Promise))(function(e,t){function n(e){try{s(c.next(e))}catch(e){t(e)}}function r(e){try{s(c.throw(e))}catch(e){t(e)}}function s(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a(function(e){e(i)})).then(n,r)}s((c=c.apply(i,o||[])).next())}));var i,o,a,c;e instanceof r&&!(null==n?void 0:n.noResolveJson)?e.json().then(n=>{t(new V(ee(n),e.status||500))}).catch(e=>{t(new Y(ee(e),e))}):t(new Y(ee(e),e))});function ne(e,t,n,r,i,s){return Z(this,void 0,void 0,function*(){return new Promise((o,a)=>{e(n,((e,t,n,r)=>{const i={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?i:(i.headers=Object.assign({"Content-Type":"application/json"},null==t?void 0:t.headers),r&&(i.body=JSON.stringify(r)),Object.assign(Object.assign({},i),n))})(t,r,i,s)).then(e=>{if(!e.ok)throw e;return(null==r?void 0:r.noResolveJson)?e:e.json()}).then(e=>o(e)).catch(e=>te(e,a,r))})})}function re(e,t,n,r){return Z(this,void 0,void 0,function*(){return ne(e,"GET",t,n,r)})}function ie(e,t,n,r,i){return Z(this,void 0,void 0,function*(){return ne(e,"POST",t,r,i,n)})}function se(e,t,n,r,i){return Z(this,void 0,void 0,function*(){return ne(e,"DELETE",t,r,i,n)})}var oe=function(e,t,n,r){return new(n||(n=Promise))(function(i,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,a)}c((r=r.apply(e,t||[])).next())})};const ae={limit:100,offset:0,sortBy:{column:"name",order:"asc"}},ce={cacheControl:"3600",contentType:"text/plain;charset=UTF-8",upsert:!1};class ue{constructor(e,t={},n,r){this.url=e,this.headers=t,this.bucketId=n,this.fetch=Q(r)}uploadOrUpdate(e,t,n,r){return oe(this,void 0,void 0,function*(){try{let i;const s=Object.assign(Object.assign({},ce),r);let o=Object.assign(Object.assign({},this.headers),"POST"===e&&{"x-upsert":String(s.upsert)});const a=s.metadata;"undefined"!=typeof Blob&&n instanceof Blob?(i=new FormData,i.append("cacheControl",s.cacheControl),a&&i.append("metadata",this.encodeMetadata(a)),i.append("",n)):"undefined"!=typeof FormData&&n instanceof FormData?(i=n,i.append("cacheControl",s.cacheControl),a&&i.append("metadata",this.encodeMetadata(a))):(i=n,o["cache-control"]=`max-age=${s.cacheControl}`,o["content-type"]=s.contentType,a&&(o["x-metadata"]=this.toBase64(this.encodeMetadata(a)))),(null==r?void 0:r.headers)&&(o=Object.assign(Object.assign({},o),r.headers));const c=this._removeEmptyFolders(t),u=this._getFinalPath(c),l=yield this.fetch(`${this.url}/object/${u}`,Object.assign({method:e,body:i,headers:o},(null==s?void 0:s.duplex)?{duplex:s.duplex}:{})),h=yield l.json();return l.ok?{data:{path:c,id:h.Id,fullPath:h.Key},error:null}:{data:null,error:h}}catch(e){if(H(e))return{data:null,error:e};throw e}})}upload(e,t,n){return oe(this,void 0,void 0,function*(){return this.uploadOrUpdate("POST",e,t,n)})}uploadToSignedUrl(e,t,n,r){return oe(this,void 0,void 0,function*(){const i=this._removeEmptyFolders(e),s=this._getFinalPath(i),o=new URL(this.url+`/object/upload/sign/${s}`);o.searchParams.set("token",t);try{let e;const t=Object.assign({upsert:ce.upsert},r),s=Object.assign(Object.assign({},this.headers),{"x-upsert":String(t.upsert)});"undefined"!=typeof Blob&&n instanceof Blob?(e=new FormData,e.append("cacheControl",t.cacheControl),e.append("",n)):"undefined"!=typeof FormData&&n instanceof FormData?(e=n,e.append("cacheControl",t.cacheControl)):(e=n,s["cache-control"]=`max-age=${t.cacheControl}`,s["content-type"]=t.contentType);const a=yield this.fetch(o.toString(),{method:"PUT",body:e,headers:s}),c=yield a.json();return a.ok?{data:{path:i,fullPath:c.Key},error:null}:{data:null,error:c}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createSignedUploadUrl(e,t){return oe(this,void 0,void 0,function*(){try{let n=this._getFinalPath(e);const r=Object.assign({},this.headers);(null==t?void 0:t.upsert)&&(r["x-upsert"]="true");const i=yield ie(this.fetch,`${this.url}/object/upload/sign/${n}`,{},{headers:r}),s=new URL(this.url+i.url),o=s.searchParams.get("token");if(!o)throw new G("No token returned by API");return{data:{signedUrl:s.toString(),path:e,token:o},error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}update(e,t,n){return oe(this,void 0,void 0,function*(){return this.uploadOrUpdate("PUT",e,t,n)})}move(e,t,n){return oe(this,void 0,void 0,function*(){try{return{data:yield ie(this.fetch,`${this.url}/object/move`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==n?void 0:n.destinationBucket},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}copy(e,t,n){return oe(this,void 0,void 0,function*(){try{return{data:{path:(yield ie(this.fetch,`${this.url}/object/copy`,{bucketId:this.bucketId,sourceKey:e,destinationKey:t,destinationBucket:null==n?void 0:n.destinationBucket},{headers:this.headers})).Key},error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createSignedUrl(e,t,n){return oe(this,void 0,void 0,function*(){try{let r=this._getFinalPath(e),i=yield ie(this.fetch,`${this.url}/object/sign/${r}`,Object.assign({expiresIn:t},(null==n?void 0:n.transform)?{transform:n.transform}:{}),{headers:this.headers});const s=(null==n?void 0:n.download)?`&download=${!0===n.download?"":n.download}`:"";return i={signedUrl:encodeURI(`${this.url}${i.signedURL}${s}`)},{data:i,error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createSignedUrls(e,t,n){return oe(this,void 0,void 0,function*(){try{const r=yield ie(this.fetch,`${this.url}/object/sign/${this.bucketId}`,{expiresIn:t,paths:e},{headers:this.headers}),i=(null==n?void 0:n.download)?`&download=${!0===n.download?"":n.download}`:"";return{data:r.map(e=>Object.assign(Object.assign({},e),{signedUrl:e.signedURL?encodeURI(`${this.url}${e.signedURL}${i}`):null})),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}download(e,t){return oe(this,void 0,void 0,function*(){const n=void 0!==(null==t?void 0:t.transform)?"render/image/authenticated":"object",r=this.transformOptsToQueryString((null==t?void 0:t.transform)||{}),i=r?`?${r}`:"";try{const t=this._getFinalPath(e),r=yield re(this.fetch,`${this.url}/${n}/${t}${i}`,{headers:this.headers,noResolveJson:!0});return{data:yield r.blob(),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}info(e){return oe(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{const e=yield re(this.fetch,`${this.url}/object/info/${t}`,{headers:this.headers});return{data:X(e),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}exists(e){return oe(this,void 0,void 0,function*(){const t=this._getFinalPath(e);try{return yield function(e,t,n){return Z(this,void 0,void 0,function*(){return ne(e,"HEAD",t,Object.assign(Object.assign({},n),{noResolveJson:!0}),undefined)})}(this.fetch,`${this.url}/object/${t}`,{headers:this.headers}),{data:!0,error:null}}catch(e){if(H(e)&&e instanceof Y){const t=e.originalError;if([400,404].includes(null==t?void 0:t.status))return{data:!1,error:e}}throw e}})}getPublicUrl(e,t){const n=this._getFinalPath(e),r=[],i=(null==t?void 0:t.download)?`download=${!0===t.download?"":t.download}`:"";""!==i&&r.push(i);const s=void 0!==(null==t?void 0:t.transform)?"render/image":"object",o=this.transformOptsToQueryString((null==t?void 0:t.transform)||{});""!==o&&r.push(o);let a=r.join("&");return""!==a&&(a=`?${a}`),{data:{publicUrl:encodeURI(`${this.url}/${s}/public/${n}${a}`)}}}remove(e){return oe(this,void 0,void 0,function*(){try{return{data:yield se(this.fetch,`${this.url}/object/${this.bucketId}`,{prefixes:e},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}list(e,t,n){return oe(this,void 0,void 0,function*(){try{const r=Object.assign(Object.assign(Object.assign({},ae),t),{prefix:e||""});return{data:yield ie(this.fetch,`${this.url}/object/list/${this.bucketId}`,r,{headers:this.headers},n),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}encodeMetadata(e){return JSON.stringify(e)}toBase64(e){return"undefined"!=typeof Buffer?Buffer.from(e).toString("base64"):btoa(e)}_getFinalPath(e){return`${this.bucketId}/${e}`}_removeEmptyFolders(e){return e.replace(/^\/|\/$/g,"").replace(/\/+/g,"/")}transformOptsToQueryString(e){const t=[];return e.width&&t.push(`width=${e.width}`),e.height&&t.push(`height=${e.height}`),e.resize&&t.push(`resize=${e.resize}`),e.format&&t.push(`format=${e.format}`),e.quality&&t.push(`quality=${e.quality}`),t.join("&")}}const le={"X-Client-Info":"storage-js/2.7.1"};var he=function(e,t,n,r){return new(n||(n=Promise))(function(i,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,a)}c((r=r.apply(e,t||[])).next())})};class de{constructor(e,t={},n){this.url=e,this.headers=Object.assign(Object.assign({},le),t),this.fetch=Q(n)}listBuckets(){return he(this,void 0,void 0,function*(){try{return{data:yield re(this.fetch,`${this.url}/bucket`,{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}getBucket(e){return he(this,void 0,void 0,function*(){try{return{data:yield re(this.fetch,`${this.url}/bucket/${e}`,{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}createBucket(e,t={public:!1}){return he(this,void 0,void 0,function*(){try{return{data:yield ie(this.fetch,`${this.url}/bucket`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}updateBucket(e,t){return he(this,void 0,void 0,function*(){try{const n=yield function(e,t,n,r){return Z(this,void 0,void 0,function*(){return ne(e,"PUT",t,r,undefined,n)})}(this.fetch,`${this.url}/bucket/${e}`,{id:e,name:e,public:t.public,file_size_limit:t.fileSizeLimit,allowed_mime_types:t.allowedMimeTypes},{headers:this.headers});return{data:n,error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}emptyBucket(e){return he(this,void 0,void 0,function*(){try{return{data:yield ie(this.fetch,`${this.url}/bucket/${e}/empty`,{},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}deleteBucket(e){return he(this,void 0,void 0,function*(){try{return{data:yield se(this.fetch,`${this.url}/bucket/${e}`,{},{headers:this.headers}),error:null}}catch(e){if(H(e))return{data:null,error:e};throw e}})}}class fe extends de{constructor(e,t={},n){super(e,t,n)}from(e){return new ue(this.url,this.headers,e,this.fetch)}}let pe="";pe="undefined"!=typeof Deno?"deno":"undefined"!=typeof document?"web":"undefined"!=typeof navigator&&"ReactNative"===navigator.product?"react-native":"node";const ge={headers:{"X-Client-Info":`supabase-js-${pe}/2.50.3`}},me={schema:"public"},ve={autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,flowType:"implicit"},ye={};var be=s(907);const we=e=>{let t;return t=e||("undefined"==typeof fetch?be.default:fetch),(...e)=>t(...e)},ke=(e,t,n)=>{const r=we(n),i="undefined"==typeof Headers?be.Headers:Headers;return(n,s)=>{return o=void 0,a=void 0,u=function*(){var o;const a=null!==(o=yield t())&&void 0!==o?o:e;let c=new i(null==s?void 0:s.headers);return c.has("apikey")||c.set("apikey",e),c.has("Authorization")||c.set("Authorization",`Bearer ${a}`),r(n,Object.assign(Object.assign({},s),{headers:c}))},new((c=void 0)||(c=Promise))(function(e,t){function n(e){try{i(u.next(e))}catch(e){t(e)}}function r(e){try{i(u.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof c?i:new c(function(e){e(i)})).then(n,r)}i((u=u.apply(o,a||[])).next())});var o,a,c,u}};const _e="2.70.0",Se=3e4,Te={"X-Client-Info":`gotrue-js/${_e}`},Ae="X-Supabase-Api-Version",je=Date.parse("2024-01-01T00:00:00.0Z"),Oe="2024-01-01",Ie=/^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;class Ee extends Error{constructor(e,t,n){super(e),this.__isAuthError=!0,this.name="AuthError",this.status=t,this.code=n}}function Pe(e){return"object"==typeof e&&null!==e&&"__isAuthError"in e}class Ce extends Ee{constructor(e,t,n){super(e,t,n),this.name="AuthApiError",this.status=t,this.code=n}}class xe extends Ee{constructor(e,t){super(e),this.name="AuthUnknownError",this.originalError=t}}class Re extends Ee{constructor(e,t,n,r){super(e,n,r),this.name=t,this.status=n}}class $e extends Re{constructor(){super("Auth session missing!","AuthSessionMissingError",400,void 0)}}class De extends Re{constructor(){super("Auth session or user missing","AuthInvalidTokenResponseError",500,void 0)}}class Le extends Re{constructor(e){super(e,"AuthInvalidCredentialsError",400,void 0)}}class Ue extends Re{constructor(e,t=null){super(e,"AuthImplicitGrantRedirectError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Ne extends Re{constructor(e,t=null){super(e,"AuthPKCEGrantCodeExchangeError",500,void 0),this.details=null,this.details=t}toJSON(){return{name:this.name,message:this.message,status:this.status,details:this.details}}}class Be extends Re{constructor(e,t){super(e,"AuthRetryableFetchError",t,void 0)}}function Fe(e){return Pe(e)&&"AuthRetryableFetchError"===e.name}class qe extends Re{constructor(e,t,n){super(e,"AuthWeakPasswordError",t,"weak_password"),this.reasons=n}}class Me extends Re{constructor(e){super(e,"AuthInvalidJwtError",400,"invalid_jwt")}}const ze="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split(""),Ke=" \t\n\r=".split(""),We=(()=>{const e=new Array(128);for(let t=0;t<e.length;t+=1)e[t]=-1;for(let t=0;t<Ke.length;t+=1)e[Ke[t].charCodeAt(0)]=-2;for(let t=0;t<ze.length;t+=1)e[ze[t].charCodeAt(0)]=t;return e})();function Je(e,t,n){if(null!==e)for(t.queue=t.queue<<8|e,t.queuedBits+=8;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;n(ze[e]),t.queuedBits-=6}else if(t.queuedBits>0)for(t.queue=t.queue<<6-t.queuedBits,t.queuedBits=6;t.queuedBits>=6;){const e=t.queue>>t.queuedBits-6&63;n(ze[e]),t.queuedBits-=6}}function Ge(e,t,n){const r=We[e];if(!(r>-1)){if(-2===r)return;throw new Error(`Invalid Base64-URL character "${String.fromCharCode(e)}"`)}for(t.queue=t.queue<<6|r,t.queuedBits+=6;t.queuedBits>=8;)n(t.queue>>t.queuedBits-8&255),t.queuedBits-=8}function He(e){const t=[],n=e=>{t.push(String.fromCodePoint(e))},r={utf8seq:0,codepoint:0},i={queue:0,queuedBits:0},s=e=>{!function(e,t,n){if(0===t.utf8seq){if(e<=127)return void n(e);for(let n=1;n<6;n+=1)if(!(e>>7-n&1)){t.utf8seq=n;break}if(2===t.utf8seq)t.codepoint=31&e;else if(3===t.utf8seq)t.codepoint=15&e;else{if(4!==t.utf8seq)throw new Error("Invalid UTF-8 sequence");t.codepoint=7&e}t.utf8seq-=1}else if(t.utf8seq>0){if(e<=127)throw new Error("Invalid UTF-8 sequence");t.codepoint=t.codepoint<<6|63&e,t.utf8seq-=1,0===t.utf8seq&&n(t.codepoint)}}(e,r,n)};for(let t=0;t<e.length;t+=1)Ge(e.charCodeAt(t),i,s);return t.join("")}function Ve(e,t){if(!(e<=127)){if(e<=2047)return t(192|e>>6),void t(128|63&e);if(e<=65535)return t(224|e>>12),t(128|e>>6&63),void t(128|63&e);if(e<=1114111)return t(240|e>>18),t(128|e>>12&63),t(128|e>>6&63),void t(128|63&e);throw new Error(`Unrecognized Unicode codepoint: ${e.toString(16)}`)}t(e)}function Ye(e){const t=[],n={queue:0,queuedBits:0},r=e=>{t.push(e)};for(let t=0;t<e.length;t+=1)Ge(e.charCodeAt(t),n,r);return new Uint8Array(t)}function Qe(e){const t=[],n={queue:0,queuedBits:0},r=e=>{t.push(e)};return e.forEach(e=>Je(e,n,r)),Je(null,n,r),t.join("")}const Xe=()=>"undefined"!=typeof window&&"undefined"!=typeof document,Ze={tested:!1,writable:!1},et=()=>{if(!Xe())return!1;try{if("object"!=typeof globalThis.localStorage)return!1}catch(e){return!1}if(Ze.tested)return Ze.writable;const e=`lswt-${Math.random()}${Math.random()}`;try{globalThis.localStorage.setItem(e,e),globalThis.localStorage.removeItem(e),Ze.tested=!0,Ze.writable=!0}catch(e){Ze.tested=!0,Ze.writable=!1}return Ze.writable},tt=e=>{let t;return t=e||("undefined"==typeof fetch?(...e)=>Promise.resolve().then(s.bind(s,907)).then(({default:t})=>t(...e)):fetch),(...e)=>t(...e)},nt=async(e,t,n)=>{await e.setItem(t,JSON.stringify(n))},rt=async(e,t)=>{const n=await e.getItem(t);if(!n)return null;try{return JSON.parse(n)}catch(e){return n}},it=async(e,t)=>{await e.removeItem(t)};class st{constructor(){this.promise=new st.promiseConstructor((e,t)=>{this.resolve=e,this.reject=t})}}function ot(e){const t=e.split(".");if(3!==t.length)throw new Me("Invalid JWT structure");for(let e=0;e<t.length;e++)if(!Ie.test(t[e]))throw new Me("JWT not in base64url format");return{header:JSON.parse(He(t[0])),payload:JSON.parse(He(t[1])),signature:Ye(t[2]),raw:{header:t[0],payload:t[1]}}}function at(e){return("0"+e.toString(16)).substr(-2)}async function ct(e,t,n=!1){const r=function(){const e=new Uint32Array(56);if("undefined"==typeof crypto){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~",t=e.length;let n="";for(let r=0;r<56;r++)n+=e.charAt(Math.floor(Math.random()*t));return n}return crypto.getRandomValues(e),Array.from(e,at).join("")}();let i=r;n&&(i+="/PASSWORD_RECOVERY"),await nt(e,`${t}-code-verifier`,i);const s=await async function(e){if("undefined"==typeof crypto||void 0===crypto.subtle||"undefined"==typeof TextEncoder)return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."),e;const t=await async function(e){const t=(new TextEncoder).encode(e),n=await crypto.subtle.digest("SHA-256",t),r=new Uint8Array(n);return Array.from(r).map(e=>String.fromCharCode(e)).join("")}(e);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}(r);return[s,r===s?"plain":"s256"]}st.promiseConstructor=Promise;const ut=/^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i,lt=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;function ht(e){if(!lt.test(e))throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not")}const dt=e=>e.msg||e.message||e.error_description||e.error||JSON.stringify(e),ft=[502,503,504];async function pt(e){var t,n;if(!("object"==typeof(n=e)&&null!==n&&"status"in n&&"ok"in n&&"json"in n&&"function"==typeof n.json))throw new Be(dt(e),0);if(ft.includes(e.status))throw new Be(dt(e),e.status);let r,i;try{r=await e.json()}catch(e){throw new xe(dt(e),e)}const s=function(e){const t=e.headers.get(Ae);if(!t)return null;if(!t.match(ut))return null;try{return new Date(`${t}T00:00:00.0Z`)}catch(e){return null}}(e);if(s&&s.getTime()>=je&&"object"==typeof r&&r&&"string"==typeof r.code?i=r.code:"object"==typeof r&&r&&"string"==typeof r.error_code&&(i=r.error_code),i){if("weak_password"===i)throw new qe(dt(r),e.status,(null===(t=r.weak_password)||void 0===t?void 0:t.reasons)||[]);if("session_not_found"===i)throw new $e}else if("object"==typeof r&&r&&"object"==typeof r.weak_password&&r.weak_password&&Array.isArray(r.weak_password.reasons)&&r.weak_password.reasons.length&&r.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0))throw new qe(dt(r),e.status,r.weak_password.reasons);throw new Ce(dt(r),e.status||500,i)}async function gt(e,t,n,r){var i;const s=Object.assign({},null==r?void 0:r.headers);s[Ae]||(s[Ae]=Oe),(null==r?void 0:r.jwt)&&(s.Authorization=`Bearer ${r.jwt}`);const o=null!==(i=null==r?void 0:r.query)&&void 0!==i?i:{};(null==r?void 0:r.redirectTo)&&(o.redirect_to=r.redirectTo);const a=Object.keys(o).length?"?"+new URLSearchParams(o).toString():"",c=await async function(e,t,n,r,i,s){const o=((e,t,n,r)=>{const i={method:e,headers:(null==t?void 0:t.headers)||{}};return"GET"===e?i:(i.headers=Object.assign({"Content-Type":"application/json;charset=UTF-8"},null==t?void 0:t.headers),i.body=JSON.stringify(r),Object.assign(Object.assign({},i),n))})(t,r,{},s);let a;try{a=await e(n,Object.assign({},o))}catch(e){throw console.error(e),new Be(dt(e),0)}if(a.ok||await pt(a),null==r?void 0:r.noResolveJson)return a;try{return await a.json()}catch(e){await pt(e)}}(e,t,n+a,{headers:s,noResolveJson:null==r?void 0:r.noResolveJson},0,null==r?void 0:r.body);return(null==r?void 0:r.xform)?null==r?void 0:r.xform(c):{data:Object.assign({},c),error:null}}function mt(e){var t;let n=null;var r;return function(e){return e.access_token&&e.refresh_token&&e.expires_in}(e)&&(n=Object.assign({},e),e.expires_at||(n.expires_at=(r=e.expires_in,Math.round(Date.now()/1e3)+r))),{data:{session:n,user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function vt(e){const t=mt(e);return!t.error&&e.weak_password&&"object"==typeof e.weak_password&&Array.isArray(e.weak_password.reasons)&&e.weak_password.reasons.length&&e.weak_password.message&&"string"==typeof e.weak_password.message&&e.weak_password.reasons.reduce((e,t)=>e&&"string"==typeof t,!0)&&(t.data.weak_password=e.weak_password),t}function yt(e){var t;return{data:{user:null!==(t=e.user)&&void 0!==t?t:e},error:null}}function bt(e){return{data:e,error:null}}function wt(e){const{action_link:t,email_otp:n,hashed_token:r,redirect_to:i,verification_type:s}=e,o=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}(e,["action_link","email_otp","hashed_token","redirect_to","verification_type"]);return{data:{properties:{action_link:t,email_otp:n,hashed_token:r,redirect_to:i,verification_type:s},user:Object.assign({},o)},error:null}}function kt(e){return e}const _t=["global","local","others"];class St{constructor({url:e="",headers:t={},fetch:n}){this.url=e,this.headers=t,this.fetch=tt(n),this.mfa={listFactors:this._listFactors.bind(this),deleteFactor:this._deleteFactor.bind(this)}}async signOut(e,t=_t[0]){if(_t.indexOf(t)<0)throw new Error(`@supabase/auth-js: Parameter scope must be one of ${_t.join(", ")}`);try{return await gt(this.fetch,"POST",`${this.url}/logout?scope=${t}`,{headers:this.headers,jwt:e,noResolveJson:!0}),{data:null,error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async inviteUserByEmail(e,t={}){try{return await gt(this.fetch,"POST",`${this.url}/invite`,{body:{email:e,data:t.data},headers:this.headers,redirectTo:t.redirectTo,xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async generateLink(e){try{const{options:t}=e,n=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}(e,["options"]),r=Object.assign(Object.assign({},n),t);return"newEmail"in n&&(r.new_email=null==n?void 0:n.newEmail,delete r.newEmail),await gt(this.fetch,"POST",`${this.url}/admin/generate_link`,{body:r,headers:this.headers,xform:wt,redirectTo:null==t?void 0:t.redirectTo})}catch(e){if(Pe(e))return{data:{properties:null,user:null},error:e};throw e}}async createUser(e){try{return await gt(this.fetch,"POST",`${this.url}/admin/users`,{body:e,headers:this.headers,xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async listUsers(e){var t,n,r,i,s,o,a;try{const c={nextPage:null,lastPage:0,total:0},u=await gt(this.fetch,"GET",`${this.url}/admin/users`,{headers:this.headers,noResolveJson:!0,query:{page:null!==(n=null===(t=null==e?void 0:e.page)||void 0===t?void 0:t.toString())&&void 0!==n?n:"",per_page:null!==(i=null===(r=null==e?void 0:e.perPage)||void 0===r?void 0:r.toString())&&void 0!==i?i:""},xform:kt});if(u.error)throw u.error;const l=await u.json(),h=null!==(s=u.headers.get("x-total-count"))&&void 0!==s?s:0,d=null!==(a=null===(o=u.headers.get("link"))||void 0===o?void 0:o.split(","))&&void 0!==a?a:[];return d.length>0&&(d.forEach(e=>{const t=parseInt(e.split(";")[0].split("=")[1].substring(0,1)),n=JSON.parse(e.split(";")[1].split("=")[1]);c[`${n}Page`]=t}),c.total=parseInt(h)),{data:Object.assign(Object.assign({},l),c),error:null}}catch(e){if(Pe(e))return{data:{users:[]},error:e};throw e}}async getUserById(e){ht(e);try{return await gt(this.fetch,"GET",`${this.url}/admin/users/${e}`,{headers:this.headers,xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async updateUserById(e,t){ht(e);try{return await gt(this.fetch,"PUT",`${this.url}/admin/users/${e}`,{body:t,headers:this.headers,xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async deleteUser(e,t=!1){ht(e);try{return await gt(this.fetch,"DELETE",`${this.url}/admin/users/${e}`,{headers:this.headers,body:{should_soft_delete:t},xform:yt})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async _listFactors(e){ht(e.userId);try{const{data:t,error:n}=await gt(this.fetch,"GET",`${this.url}/admin/users/${e.userId}/factors`,{headers:this.headers,xform:e=>({data:{factors:e},error:null})});return{data:t,error:n}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _deleteFactor(e){ht(e.userId),ht(e.id);try{return{data:await gt(this.fetch,"DELETE",`${this.url}/admin/users/${e.userId}/factors/${e.id}`,{headers:this.headers}),error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}}const Tt={getItem:e=>et()?globalThis.localStorage.getItem(e):null,setItem:(e,t)=>{et()&&globalThis.localStorage.setItem(e,t)},removeItem:e=>{et()&&globalThis.localStorage.removeItem(e)}};function At(e={}){return{getItem:t=>e[t]||null,setItem:(t,n)=>{e[t]=n},removeItem:t=>{delete e[t]}}}const jt=!!(globalThis&&et()&&globalThis.localStorage&&"true"===globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug"));class Ot extends Error{constructor(e){super(e),this.isAcquireTimeout=!0}}class It extends Ot{}async function Et(e,t,n){jt&&console.log("@supabase/gotrue-js: navigatorLock: acquire lock",e,t);const r=new globalThis.AbortController;return t>0&&setTimeout(()=>{r.abort(),jt&&console.log("@supabase/gotrue-js: navigatorLock acquire timed out",e)},t),await Promise.resolve().then(()=>globalThis.navigator.locks.request(e,0===t?{mode:"exclusive",ifAvailable:!0}:{mode:"exclusive",signal:r.signal},async r=>{if(!r){if(0===t)throw jt&&console.log("@supabase/gotrue-js: navigatorLock: not immediately available",e),new It(`Acquiring an exclusive Navigator LockManager lock "${e}" immediately failed`);if(jt)try{const e=await globalThis.navigator.locks.query();console.log("@supabase/gotrue-js: Navigator LockManager state",JSON.stringify(e,null,"  "))}catch(e){console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state",e)}return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"),await n()}jt&&console.log("@supabase/gotrue-js: navigatorLock: acquired",e,r.name);try{return await n()}finally{jt&&console.log("@supabase/gotrue-js: navigatorLock: released",e,r.name)}}))}!function(){if("object"!=typeof globalThis)try{Object.defineProperty(Object.prototype,"__magic__",{get:function(){return this},configurable:!0}),__magic__.globalThis=__magic__,delete Object.prototype.__magic__}catch(e){"undefined"!=typeof self&&(self.globalThis=self)}}();const Pt={url:"http://localhost:9999",storageKey:"supabase.auth.token",autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0,headers:Te,flowType:"implicit",debug:!1,hasCustomAuthorizationHeader:!1};async function Ct(e,t,n){return await n()}class xt{constructor(e){var t,n;this.memoryStorage=null,this.stateChangeEmitters=new Map,this.autoRefreshTicker=null,this.visibilityChangedCallback=null,this.refreshingDeferred=null,this.initializePromise=null,this.detectSessionInUrl=!0,this.hasCustomAuthorizationHeader=!1,this.suppressGetSessionWarning=!1,this.lockAcquired=!1,this.pendingInLock=[],this.broadcastChannel=null,this.logger=console.log,this.instanceID=xt.nextInstanceID,xt.nextInstanceID+=1,this.instanceID>0&&Xe()&&console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");const r=Object.assign(Object.assign({},Pt),e);if(this.logDebugMessages=!!r.debug,"function"==typeof r.debug&&(this.logger=r.debug),this.persistSession=r.persistSession,this.storageKey=r.storageKey,this.autoRefreshToken=r.autoRefreshToken,this.admin=new St({url:r.url,headers:r.headers,fetch:r.fetch}),this.url=r.url,this.headers=r.headers,this.fetch=tt(r.fetch),this.lock=r.lock||Ct,this.detectSessionInUrl=r.detectSessionInUrl,this.flowType=r.flowType,this.hasCustomAuthorizationHeader=r.hasCustomAuthorizationHeader,r.lock?this.lock=r.lock:Xe()&&(null===(t=null===globalThis||void 0===globalThis?void 0:globalThis.navigator)||void 0===t?void 0:t.locks)?this.lock=Et:this.lock=Ct,this.jwks={keys:[]},this.jwks_cached_at=Number.MIN_SAFE_INTEGER,this.mfa={verify:this._verify.bind(this),enroll:this._enroll.bind(this),unenroll:this._unenroll.bind(this),challenge:this._challenge.bind(this),listFactors:this._listFactors.bind(this),challengeAndVerify:this._challengeAndVerify.bind(this),getAuthenticatorAssuranceLevel:this._getAuthenticatorAssuranceLevel.bind(this)},this.persistSession?r.storage?this.storage=r.storage:et()?this.storage=Tt:(this.memoryStorage={},this.storage=At(this.memoryStorage)):(this.memoryStorage={},this.storage=At(this.memoryStorage)),Xe()&&globalThis.BroadcastChannel&&this.persistSession&&this.storageKey){try{this.broadcastChannel=new globalThis.BroadcastChannel(this.storageKey)}catch(e){console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available",e)}null===(n=this.broadcastChannel)||void 0===n||n.addEventListener("message",async e=>{this._debug("received broadcast notification from other tab or client",e),await this._notifyAllSubscribers(e.data.event,e.data.session,!1)})}this.initialize()}_debug(...e){return this.logDebugMessages&&this.logger(`GoTrueClient@${this.instanceID} (${_e}) ${(new Date).toISOString()}`,...e),this}async initialize(){return this.initializePromise||(this.initializePromise=(async()=>await this._acquireLock(-1,async()=>await this._initialize()))()),await this.initializePromise}async _initialize(){var e;try{const t=function(e){const t={},n=new URL(e);if(n.hash&&"#"===n.hash[0])try{new URLSearchParams(n.hash.substring(1)).forEach((e,n)=>{t[n]=e})}catch(e){}return n.searchParams.forEach((e,n)=>{t[n]=e}),t}(window.location.href);let n="none";if(this._isImplicitGrantCallback(t)?n="implicit":await this._isPKCECallback(t)&&(n="pkce"),Xe()&&this.detectSessionInUrl&&"none"!==n){const{data:r,error:i}=await this._getSessionFromURL(t,n);if(i){if(this._debug("#_initialize()","error detecting session from URL",i),function(e){return Pe(e)&&"AuthImplicitGrantRedirectError"===e.name}(i)){const t=null===(e=i.details)||void 0===e?void 0:e.code;if("identity_already_exists"===t||"identity_not_found"===t||"single_identity_not_deletable"===t)return{error:i}}return await this._removeSession(),{error:i}}const{session:s,redirectType:o}=r;return this._debug("#_initialize()","detected session in URL",s,"redirect type",o),await this._saveSession(s),setTimeout(async()=>{"recovery"===o?await this._notifyAllSubscribers("PASSWORD_RECOVERY",s):await this._notifyAllSubscribers("SIGNED_IN",s)},0),{error:null}}return await this._recoverAndRefresh(),{error:null}}catch(e){return Pe(e)?{error:e}:{error:new xe("Unexpected error during initialization",e)}}finally{await this._handleVisibilityChange(),this._debug("#_initialize()","end")}}async signInAnonymously(e){var t,n,r;try{const i=await gt(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{data:null!==(n=null===(t=null==e?void 0:e.options)||void 0===t?void 0:t.data)&&void 0!==n?n:{},gotrue_meta_security:{captcha_token:null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken}},xform:mt}),{data:s,error:o}=i;if(o||!s)return{data:{user:null,session:null},error:o};const a=s.session,c=s.user;return s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:c,session:a},error:null}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signUp(e){var t,n,r;try{let i;if("email"in e){const{email:n,password:r,options:s}=e;let o=null,a=null;"pkce"===this.flowType&&([o,a]=await ct(this.storage,this.storageKey)),i=await gt(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,redirectTo:null==s?void 0:s.emailRedirectTo,body:{email:n,password:r,data:null!==(t=null==s?void 0:s.data)&&void 0!==t?t:{},gotrue_meta_security:{captcha_token:null==s?void 0:s.captchaToken},code_challenge:o,code_challenge_method:a},xform:mt})}else{if(!("phone"in e))throw new Le("You must provide either an email or phone number and a password");{const{phone:t,password:s,options:o}=e;i=await gt(this.fetch,"POST",`${this.url}/signup`,{headers:this.headers,body:{phone:t,password:s,data:null!==(n=null==o?void 0:o.data)&&void 0!==n?n:{},channel:null!==(r=null==o?void 0:o.channel)&&void 0!==r?r:"sms",gotrue_meta_security:{captcha_token:null==o?void 0:o.captchaToken}},xform:mt})}}const{data:s,error:o}=i;if(o||!s)return{data:{user:null,session:null},error:o};const a=s.session,c=s.user;return s.session&&(await this._saveSession(s.session),await this._notifyAllSubscribers("SIGNED_IN",a)),{data:{user:c,session:a},error:null}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithPassword(e){try{let t;if("email"in e){const{email:n,password:r,options:i}=e;t=await gt(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{email:n,password:r,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},xform:vt})}else{if(!("phone"in e))throw new Le("You must provide either an email or phone number and a password");{const{phone:n,password:r,options:i}=e;t=await gt(this.fetch,"POST",`${this.url}/token?grant_type=password`,{headers:this.headers,body:{phone:n,password:r,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},xform:vt})}}const{data:n,error:r}=t;return r?{data:{user:null,session:null},error:r}:n&&n.session&&n.user?(n.session&&(await this._saveSession(n.session),await this._notifyAllSubscribers("SIGNED_IN",n.session)),{data:Object.assign({user:n.user,session:n.session},n.weak_password?{weakPassword:n.weak_password}:null),error:r}):{data:{user:null,session:null},error:new De}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOAuth(e){var t,n,r,i;return await this._handleProviderSignIn(e.provider,{redirectTo:null===(t=e.options)||void 0===t?void 0:t.redirectTo,scopes:null===(n=e.options)||void 0===n?void 0:n.scopes,queryParams:null===(r=e.options)||void 0===r?void 0:r.queryParams,skipBrowserRedirect:null===(i=e.options)||void 0===i?void 0:i.skipBrowserRedirect})}async exchangeCodeForSession(e){return await this.initializePromise,this._acquireLock(-1,async()=>this._exchangeCodeForSession(e))}async signInWithWeb3(e){const{chain:t}=e;if("solana"===t)return await this.signInWithSolana(e);throw new Error(`@supabase/auth-js: Unsupported chain "${t}"`)}async signInWithSolana(e){var t,n,r,i,s,o,a,c,u,l,h,d;let f,p;if("message"in e)f=e.message,p=e.signature;else{const{chain:h,wallet:d,statement:g,options:m}=e;let v;if(Xe())if("object"==typeof d)v=d;else{const e=window;if(!("solana"in e)||"object"!=typeof e.solana||!("signIn"in e.solana&&"function"==typeof e.solana.signIn||"signMessage"in e.solana&&"function"==typeof e.solana.signMessage))throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");v=e.solana}else{if("object"!=typeof d||!(null==m?void 0:m.url))throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");v=d}const y=new URL(null!==(t=null==m?void 0:m.url)&&void 0!==t?t:window.location.href);if("signIn"in v&&v.signIn){const e=await v.signIn(Object.assign(Object.assign(Object.assign({issuedAt:(new Date).toISOString()},null==m?void 0:m.signInWithSolana),{version:"1",domain:y.host,uri:y.href}),g?{statement:g}:null));let t;if(Array.isArray(e)&&e[0]&&"object"==typeof e[0])t=e[0];else{if(!(e&&"object"==typeof e&&"signedMessage"in e&&"signature"in e))throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");t=e}if(!("signedMessage"in t&&"signature"in t&&("string"==typeof t.signedMessage||t.signedMessage instanceof Uint8Array)&&t.signature instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");f="string"==typeof t.signedMessage?t.signedMessage:(new TextDecoder).decode(t.signedMessage),p=t.signature}else{if(!("signMessage"in v&&"function"==typeof v.signMessage&&"publicKey"in v&&"object"==typeof v&&v.publicKey&&"toBase58"in v.publicKey&&"function"==typeof v.publicKey.toBase58))throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");f=[`${y.host} wants you to sign in with your Solana account:`,v.publicKey.toBase58(),...g?["",g,""]:[""],"Version: 1",`URI: ${y.href}`,`Issued At: ${null!==(r=null===(n=null==m?void 0:m.signInWithSolana)||void 0===n?void 0:n.issuedAt)&&void 0!==r?r:(new Date).toISOString()}`,...(null===(i=null==m?void 0:m.signInWithSolana)||void 0===i?void 0:i.notBefore)?[`Not Before: ${m.signInWithSolana.notBefore}`]:[],...(null===(s=null==m?void 0:m.signInWithSolana)||void 0===s?void 0:s.expirationTime)?[`Expiration Time: ${m.signInWithSolana.expirationTime}`]:[],...(null===(o=null==m?void 0:m.signInWithSolana)||void 0===o?void 0:o.chainId)?[`Chain ID: ${m.signInWithSolana.chainId}`]:[],...(null===(a=null==m?void 0:m.signInWithSolana)||void 0===a?void 0:a.nonce)?[`Nonce: ${m.signInWithSolana.nonce}`]:[],...(null===(c=null==m?void 0:m.signInWithSolana)||void 0===c?void 0:c.requestId)?[`Request ID: ${m.signInWithSolana.requestId}`]:[],...(null===(l=null===(u=null==m?void 0:m.signInWithSolana)||void 0===u?void 0:u.resources)||void 0===l?void 0:l.length)?["Resources",...m.signInWithSolana.resources.map(e=>`- ${e}`)]:[]].join("\n");const e=await v.signMessage((new TextEncoder).encode(f),"utf8");if(!(e&&e instanceof Uint8Array))throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");p=e}}try{const{data:t,error:n}=await gt(this.fetch,"POST",`${this.url}/token?grant_type=web3`,{headers:this.headers,body:Object.assign({chain:"solana",message:f,signature:Qe(p)},(null===(h=e.options)||void 0===h?void 0:h.captchaToken)?{gotrue_meta_security:{captcha_token:null===(d=e.options)||void 0===d?void 0:d.captchaToken}}:null),xform:mt});if(n)throw n;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign({},t),error:n}):{data:{user:null,session:null},error:new De}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async _exchangeCodeForSession(e){const t=await rt(this.storage,`${this.storageKey}-code-verifier`),[n,r]=(null!=t?t:"").split("/");try{const{data:t,error:i}=await gt(this.fetch,"POST",`${this.url}/token?grant_type=pkce`,{headers:this.headers,body:{auth_code:e,code_verifier:n},xform:mt});if(await it(this.storage,`${this.storageKey}-code-verifier`),i)throw i;return t&&t.session&&t.user?(t.session&&(await this._saveSession(t.session),await this._notifyAllSubscribers("SIGNED_IN",t.session)),{data:Object.assign(Object.assign({},t),{redirectType:null!=r?r:null}),error:i}):{data:{user:null,session:null,redirectType:null},error:new De}}catch(e){if(Pe(e))return{data:{user:null,session:null,redirectType:null},error:e};throw e}}async signInWithIdToken(e){try{const{options:t,provider:n,token:r,access_token:i,nonce:s}=e,o=await gt(this.fetch,"POST",`${this.url}/token?grant_type=id_token`,{headers:this.headers,body:{provider:n,id_token:r,access_token:i,nonce:s,gotrue_meta_security:{captcha_token:null==t?void 0:t.captchaToken}},xform:mt}),{data:a,error:c}=o;return c?{data:{user:null,session:null},error:c}:a&&a.session&&a.user?(a.session&&(await this._saveSession(a.session),await this._notifyAllSubscribers("SIGNED_IN",a.session)),{data:a,error:c}):{data:{user:null,session:null},error:new De}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithOtp(e){var t,n,r,i,s;try{if("email"in e){const{email:r,options:i}=e;let s=null,o=null;"pkce"===this.flowType&&([s,o]=await ct(this.storage,this.storageKey));const{error:a}=await gt(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{email:r,data:null!==(t=null==i?void 0:i.data)&&void 0!==t?t:{},create_user:null===(n=null==i?void 0:i.shouldCreateUser)||void 0===n||n,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken},code_challenge:s,code_challenge_method:o},redirectTo:null==i?void 0:i.emailRedirectTo});return{data:{user:null,session:null},error:a}}if("phone"in e){const{phone:t,options:n}=e,{data:o,error:a}=await gt(this.fetch,"POST",`${this.url}/otp`,{headers:this.headers,body:{phone:t,data:null!==(r=null==n?void 0:n.data)&&void 0!==r?r:{},create_user:null===(i=null==n?void 0:n.shouldCreateUser)||void 0===i||i,gotrue_meta_security:{captcha_token:null==n?void 0:n.captchaToken},channel:null!==(s=null==n?void 0:n.channel)&&void 0!==s?s:"sms"}});return{data:{user:null,session:null,messageId:null==o?void 0:o.message_id},error:a}}throw new Le("You must provide either an email or phone number.")}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async verifyOtp(e){var t,n;try{let r,i;"options"in e&&(r=null===(t=e.options)||void 0===t?void 0:t.redirectTo,i=null===(n=e.options)||void 0===n?void 0:n.captchaToken);const{data:s,error:o}=await gt(this.fetch,"POST",`${this.url}/verify`,{headers:this.headers,body:Object.assign(Object.assign({},e),{gotrue_meta_security:{captcha_token:i}}),redirectTo:r,xform:mt});if(o)throw o;if(!s)throw new Error("An error occurred on token verification.");const a=s.session,c=s.user;return(null==a?void 0:a.access_token)&&(await this._saveSession(a),await this._notifyAllSubscribers("recovery"==e.type?"PASSWORD_RECOVERY":"SIGNED_IN",a)),{data:{user:c,session:a},error:null}}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async signInWithSSO(e){var t,n,r;try{let i=null,s=null;return"pkce"===this.flowType&&([i,s]=await ct(this.storage,this.storageKey)),await gt(this.fetch,"POST",`${this.url}/sso`,{body:Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},"providerId"in e?{provider_id:e.providerId}:null),"domain"in e?{domain:e.domain}:null),{redirect_to:null!==(n=null===(t=e.options)||void 0===t?void 0:t.redirectTo)&&void 0!==n?n:void 0}),(null===(r=null==e?void 0:e.options)||void 0===r?void 0:r.captchaToken)?{gotrue_meta_security:{captcha_token:e.options.captchaToken}}:null),{skip_http_redirect:!0,code_challenge:i,code_challenge_method:s}),headers:this.headers,xform:bt})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async reauthenticate(){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._reauthenticate())}async _reauthenticate(){try{return await this._useSession(async e=>{const{data:{session:t},error:n}=e;if(n)throw n;if(!t)throw new $e;const{error:r}=await gt(this.fetch,"GET",`${this.url}/reauthenticate`,{headers:this.headers,jwt:t.access_token});return{data:{user:null,session:null},error:r}})}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async resend(e){try{const t=`${this.url}/resend`;if("email"in e){const{email:n,type:r,options:i}=e,{error:s}=await gt(this.fetch,"POST",t,{headers:this.headers,body:{email:n,type:r,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}},redirectTo:null==i?void 0:i.emailRedirectTo});return{data:{user:null,session:null},error:s}}if("phone"in e){const{phone:n,type:r,options:i}=e,{data:s,error:o}=await gt(this.fetch,"POST",t,{headers:this.headers,body:{phone:n,type:r,gotrue_meta_security:{captcha_token:null==i?void 0:i.captchaToken}}});return{data:{user:null,session:null,messageId:null==s?void 0:s.message_id},error:o}}throw new Le("You must provide either an email or phone number and a type")}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async getSession(){return await this.initializePromise,await this._acquireLock(-1,async()=>this._useSession(async e=>e))}async _acquireLock(e,t){this._debug("#_acquireLock","begin",e);try{if(this.lockAcquired){const e=this.pendingInLock.length?this.pendingInLock[this.pendingInLock.length-1]:Promise.resolve(),n=(async()=>(await e,await t()))();return this.pendingInLock.push((async()=>{try{await n}catch(e){}})()),n}return await this.lock(`lock:${this.storageKey}`,e,async()=>{this._debug("#_acquireLock","lock acquired for storage key",this.storageKey);try{this.lockAcquired=!0;const e=t();for(this.pendingInLock.push((async()=>{try{await e}catch(e){}})()),await e;this.pendingInLock.length;){const e=[...this.pendingInLock];await Promise.all(e),this.pendingInLock.splice(0,e.length)}return await e}finally{this._debug("#_acquireLock","lock released for storage key",this.storageKey),this.lockAcquired=!1}})}finally{this._debug("#_acquireLock","end")}}async _useSession(e){this._debug("#_useSession","begin");try{const t=await this.__loadSession();return await e(t)}finally{this._debug("#_useSession","end")}}async __loadSession(){this._debug("#__loadSession()","begin"),this.lockAcquired||this._debug("#__loadSession()","used outside of an acquired lock!",(new Error).stack);try{let e=null;const t=await rt(this.storage,this.storageKey);if(this._debug("#getSession()","session from storage",t),null!==t&&(this._isValidSession(t)?e=t:(this._debug("#getSession()","session from storage is not valid"),await this._removeSession())),!e)return{data:{session:null},error:null};const n=!!e.expires_at&&1e3*e.expires_at-Date.now()<9e4;if(this._debug("#__loadSession()",`session has${n?"":" not"} expired`,"expires_at",e.expires_at),!n){if(this.storage.isServer){let t=this.suppressGetSessionWarning;e=new Proxy(e,{get:(e,n,r)=>(t||"user"!==n||(console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server."),t=!0,this.suppressGetSessionWarning=!0),Reflect.get(e,n,r))})}return{data:{session:e},error:null}}const{session:r,error:i}=await this._callRefreshToken(e.refresh_token);return i?{data:{session:null},error:i}:{data:{session:r},error:null}}finally{this._debug("#__loadSession()","end")}}async getUser(e){return e?await this._getUser(e):(await this.initializePromise,await this._acquireLock(-1,async()=>await this._getUser()))}async _getUser(e){try{return e?await gt(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:e,xform:yt}):await this._useSession(async e=>{var t,n,r;const{data:i,error:s}=e;if(s)throw s;return(null===(t=i.session)||void 0===t?void 0:t.access_token)||this.hasCustomAuthorizationHeader?await gt(this.fetch,"GET",`${this.url}/user`,{headers:this.headers,jwt:null!==(r=null===(n=i.session)||void 0===n?void 0:n.access_token)&&void 0!==r?r:void 0,xform:yt}):{data:{user:null},error:new $e}})}catch(e){if(Pe(e))return function(e){return Pe(e)&&"AuthSessionMissingError"===e.name}(e)&&(await this._removeSession(),await it(this.storage,`${this.storageKey}-code-verifier`)),{data:{user:null},error:e};throw e}}async updateUser(e,t={}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._updateUser(e,t))}async _updateUser(e,t={}){try{return await this._useSession(async n=>{const{data:r,error:i}=n;if(i)throw i;if(!r.session)throw new $e;const s=r.session;let o=null,a=null;"pkce"===this.flowType&&null!=e.email&&([o,a]=await ct(this.storage,this.storageKey));const{data:c,error:u}=await gt(this.fetch,"PUT",`${this.url}/user`,{headers:this.headers,redirectTo:null==t?void 0:t.emailRedirectTo,body:Object.assign(Object.assign({},e),{code_challenge:o,code_challenge_method:a}),jwt:s.access_token,xform:yt});if(u)throw u;return s.user=c.user,await this._saveSession(s),await this._notifyAllSubscribers("USER_UPDATED",s),{data:{user:s.user},error:null}})}catch(e){if(Pe(e))return{data:{user:null},error:e};throw e}}async setSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._setSession(e))}async _setSession(e){try{if(!e.access_token||!e.refresh_token)throw new $e;const t=Date.now()/1e3;let n=t,r=!0,i=null;const{payload:s}=ot(e.access_token);if(s.exp&&(n=s.exp,r=n<=t),r){const{session:t,error:n}=await this._callRefreshToken(e.refresh_token);if(n)return{data:{user:null,session:null},error:n};if(!t)return{data:{user:null,session:null},error:null};i=t}else{const{data:r,error:s}=await this._getUser(e.access_token);if(s)throw s;i={access_token:e.access_token,refresh_token:e.refresh_token,user:r.user,token_type:"bearer",expires_in:n-t,expires_at:n},await this._saveSession(i),await this._notifyAllSubscribers("SIGNED_IN",i)}return{data:{user:i.user,session:i},error:null}}catch(e){if(Pe(e))return{data:{session:null,user:null},error:e};throw e}}async refreshSession(e){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._refreshSession(e))}async _refreshSession(e){try{return await this._useSession(async t=>{var n;if(!e){const{data:r,error:i}=t;if(i)throw i;e=null!==(n=r.session)&&void 0!==n?n:void 0}if(!(null==e?void 0:e.refresh_token))throw new $e;const{session:r,error:i}=await this._callRefreshToken(e.refresh_token);return i?{data:{user:null,session:null},error:i}:r?{data:{user:r.user,session:r},error:null}:{data:{user:null,session:null},error:null}})}catch(e){if(Pe(e))return{data:{user:null,session:null},error:e};throw e}}async _getSessionFromURL(e,t){try{if(!Xe())throw new Ue("No browser detected.");if(e.error||e.error_description||e.error_code)throw new Ue(e.error_description||"Error in URL with unspecified error_description",{error:e.error||"unspecified_error",code:e.error_code||"unspecified_code"});switch(t){case"implicit":if("pkce"===this.flowType)throw new Ne("Not a valid PKCE flow url.");break;case"pkce":if("implicit"===this.flowType)throw new Ue("Not a valid implicit grant flow url.")}if("pkce"===t){if(this._debug("#_initialize()","begin","is PKCE flow",!0),!e.code)throw new Ne("No code detected.");const{data:t,error:n}=await this._exchangeCodeForSession(e.code);if(n)throw n;const r=new URL(window.location.href);return r.searchParams.delete("code"),window.history.replaceState(window.history.state,"",r.toString()),{data:{session:t.session,redirectType:null},error:null}}const{provider_token:n,provider_refresh_token:r,access_token:i,refresh_token:s,expires_in:o,expires_at:a,token_type:c}=e;if(!(i&&o&&s&&c))throw new Ue("No session defined in URL");const u=Math.round(Date.now()/1e3),l=parseInt(o);let h=u+l;a&&(h=parseInt(a));const d=h-u;1e3*d<=Se&&console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${d}s, should have been closer to ${l}s`);const f=h-l;u-f>=120?console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale",f,h,u):u-f<0&&console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew",f,h,u);const{data:p,error:g}=await this._getUser(i);if(g)throw g;const m={provider_token:n,provider_refresh_token:r,access_token:i,expires_in:l,expires_at:h,refresh_token:s,token_type:c,user:p.user};return window.location.hash="",this._debug("#_getSessionFromURL()","clearing window.location.hash"),{data:{session:m,redirectType:e.type},error:null}}catch(e){if(Pe(e))return{data:{session:null,redirectType:null},error:e};throw e}}_isImplicitGrantCallback(e){return Boolean(e.access_token||e.error_description)}async _isPKCECallback(e){const t=await rt(this.storage,`${this.storageKey}-code-verifier`);return!(!e.code||!t)}async signOut(e={scope:"global"}){return await this.initializePromise,await this._acquireLock(-1,async()=>await this._signOut(e))}async _signOut({scope:e}={scope:"global"}){return await this._useSession(async t=>{var n;const{data:r,error:i}=t;if(i)return{error:i};const s=null===(n=r.session)||void 0===n?void 0:n.access_token;if(s){const{error:t}=await this.admin.signOut(s,e);if(t&&(!function(e){return Pe(e)&&"AuthApiError"===e.name}(t)||404!==t.status&&401!==t.status&&403!==t.status))return{error:t}}return"others"!==e&&(await this._removeSession(),await it(this.storage,`${this.storageKey}-code-verifier`)),{error:null}})}onAuthStateChange(e){const t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}),n={id:t,callback:e,unsubscribe:()=>{this._debug("#unsubscribe()","state change callback with id removed",t),this.stateChangeEmitters.delete(t)}};return this._debug("#onAuthStateChange()","registered callback with id",t),this.stateChangeEmitters.set(t,n),(async()=>{await this.initializePromise,await this._acquireLock(-1,async()=>{this._emitInitialSession(t)})})(),{data:{subscription:n}}}async _emitInitialSession(e){return await this._useSession(async t=>{var n,r;try{const{data:{session:r},error:i}=t;if(i)throw i;await(null===(n=this.stateChangeEmitters.get(e))||void 0===n?void 0:n.callback("INITIAL_SESSION",r)),this._debug("INITIAL_SESSION","callback id",e,"session",r)}catch(t){await(null===(r=this.stateChangeEmitters.get(e))||void 0===r?void 0:r.callback("INITIAL_SESSION",null)),this._debug("INITIAL_SESSION","callback id",e,"error",t),console.error(t)}})}async resetPasswordForEmail(e,t={}){let n=null,r=null;"pkce"===this.flowType&&([n,r]=await ct(this.storage,this.storageKey,!0));try{return await gt(this.fetch,"POST",`${this.url}/recover`,{body:{email:e,code_challenge:n,code_challenge_method:r,gotrue_meta_security:{captcha_token:t.captchaToken}},headers:this.headers,redirectTo:t.redirectTo})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async getUserIdentities(){var e;try{const{data:t,error:n}=await this.getUser();if(n)throw n;return{data:{identities:null!==(e=t.user.identities)&&void 0!==e?e:[]},error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async linkIdentity(e){var t;try{const{data:n,error:r}=await this._useSession(async t=>{var n,r,i,s,o;const{data:a,error:c}=t;if(c)throw c;const u=await this._getUrlForProvider(`${this.url}/user/identities/authorize`,e.provider,{redirectTo:null===(n=e.options)||void 0===n?void 0:n.redirectTo,scopes:null===(r=e.options)||void 0===r?void 0:r.scopes,queryParams:null===(i=e.options)||void 0===i?void 0:i.queryParams,skipBrowserRedirect:!0});return await gt(this.fetch,"GET",u,{headers:this.headers,jwt:null!==(o=null===(s=a.session)||void 0===s?void 0:s.access_token)&&void 0!==o?o:void 0})});if(r)throw r;return Xe()&&!(null===(t=e.options)||void 0===t?void 0:t.skipBrowserRedirect)&&window.location.assign(null==n?void 0:n.url),{data:{provider:e.provider,url:null==n?void 0:n.url},error:null}}catch(t){if(Pe(t))return{data:{provider:e.provider,url:null},error:t};throw t}}async unlinkIdentity(e){try{return await this._useSession(async t=>{var n,r;const{data:i,error:s}=t;if(s)throw s;return await gt(this.fetch,"DELETE",`${this.url}/user/identities/${e.identity_id}`,{headers:this.headers,jwt:null!==(r=null===(n=i.session)||void 0===n?void 0:n.access_token)&&void 0!==r?r:void 0})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _refreshAccessToken(e){const t=`#_refreshAccessToken(${e.substring(0,5)}...)`;this._debug(t,"begin");try{const i=Date.now();return await(n=async n=>(n>0&&await async function(e){return await new Promise(t=>{setTimeout(()=>t(null),e)})}(200*Math.pow(2,n-1)),this._debug(t,"refreshing attempt",n),await gt(this.fetch,"POST",`${this.url}/token?grant_type=refresh_token`,{body:{refresh_token:e},headers:this.headers,xform:mt})),r=(e,t)=>{const n=200*Math.pow(2,e);return t&&Fe(t)&&Date.now()+n-i<Se},new Promise((e,t)=>{(async()=>{for(let i=0;i<1/0;i++)try{const t=await n(i);if(!r(i,null))return void e(t)}catch(e){if(!r(i,e))return void t(e)}})()}))}catch(e){if(this._debug(t,"error",e),Pe(e))return{data:{session:null,user:null},error:e};throw e}finally{this._debug(t,"end")}var n,r}_isValidSession(e){return"object"==typeof e&&null!==e&&"access_token"in e&&"refresh_token"in e&&"expires_at"in e}async _handleProviderSignIn(e,t){const n=await this._getUrlForProvider(`${this.url}/authorize`,e,{redirectTo:t.redirectTo,scopes:t.scopes,queryParams:t.queryParams});return this._debug("#_handleProviderSignIn()","provider",e,"options",t,"url",n),Xe()&&!t.skipBrowserRedirect&&window.location.assign(n),{data:{provider:e,url:n},error:null}}async _recoverAndRefresh(){var e;const t="#_recoverAndRefresh()";this._debug(t,"begin");try{const n=await rt(this.storage,this.storageKey);if(this._debug(t,"session from storage",n),!this._isValidSession(n))return this._debug(t,"session is not valid"),void(null!==n&&await this._removeSession());const r=1e3*(null!==(e=n.expires_at)&&void 0!==e?e:1/0)-Date.now()<9e4;if(this._debug(t,`session has${r?"":" not"} expired with margin of 90000s`),r){if(this.autoRefreshToken&&n.refresh_token){const{error:e}=await this._callRefreshToken(n.refresh_token);e&&(console.error(e),Fe(e)||(this._debug(t,"refresh failed with a non-retryable error, removing the session",e),await this._removeSession()))}}else await this._notifyAllSubscribers("SIGNED_IN",n)}catch(e){return this._debug(t,"error",e),void console.error(e)}finally{this._debug(t,"end")}}async _callRefreshToken(e){var t,n;if(!e)throw new $e;if(this.refreshingDeferred)return this.refreshingDeferred.promise;const r=`#_callRefreshToken(${e.substring(0,5)}...)`;this._debug(r,"begin");try{this.refreshingDeferred=new st;const{data:t,error:n}=await this._refreshAccessToken(e);if(n)throw n;if(!t.session)throw new $e;await this._saveSession(t.session),await this._notifyAllSubscribers("TOKEN_REFRESHED",t.session);const r={session:t.session,error:null};return this.refreshingDeferred.resolve(r),r}catch(e){if(this._debug(r,"error",e),Pe(e)){const n={session:null,error:e};return Fe(e)||await this._removeSession(),null===(t=this.refreshingDeferred)||void 0===t||t.resolve(n),n}throw null===(n=this.refreshingDeferred)||void 0===n||n.reject(e),e}finally{this.refreshingDeferred=null,this._debug(r,"end")}}async _notifyAllSubscribers(e,t,n=!0){const r=`#_notifyAllSubscribers(${e})`;this._debug(r,"begin",t,`broadcast = ${n}`);try{this.broadcastChannel&&n&&this.broadcastChannel.postMessage({event:e,session:t});const r=[],i=Array.from(this.stateChangeEmitters.values()).map(async n=>{try{await n.callback(e,t)}catch(e){r.push(e)}});if(await Promise.all(i),r.length>0){for(let e=0;e<r.length;e+=1)console.error(r[e]);throw r[0]}}finally{this._debug(r,"end")}}async _saveSession(e){this._debug("#_saveSession()",e),this.suppressGetSessionWarning=!0,await nt(this.storage,this.storageKey,e)}async _removeSession(){this._debug("#_removeSession()"),await it(this.storage,this.storageKey),await this._notifyAllSubscribers("SIGNED_OUT",null)}_removeVisibilityChangedCallback(){this._debug("#_removeVisibilityChangedCallback()");const e=this.visibilityChangedCallback;this.visibilityChangedCallback=null;try{e&&Xe()&&(null===window||void 0===window?void 0:window.removeEventListener)&&window.removeEventListener("visibilitychange",e)}catch(e){console.error("removing visibilitychange callback failed",e)}}async _startAutoRefresh(){await this._stopAutoRefresh(),this._debug("#_startAutoRefresh()");const e=setInterval(()=>this._autoRefreshTokenTick(),Se);this.autoRefreshTicker=e,e&&"object"==typeof e&&"function"==typeof e.unref?e.unref():"undefined"!=typeof Deno&&"function"==typeof Deno.unrefTimer&&Deno.unrefTimer(e),setTimeout(async()=>{await this.initializePromise,await this._autoRefreshTokenTick()},0)}async _stopAutoRefresh(){this._debug("#_stopAutoRefresh()");const e=this.autoRefreshTicker;this.autoRefreshTicker=null,e&&clearInterval(e)}async startAutoRefresh(){this._removeVisibilityChangedCallback(),await this._startAutoRefresh()}async stopAutoRefresh(){this._removeVisibilityChangedCallback(),await this._stopAutoRefresh()}async _autoRefreshTokenTick(){this._debug("#_autoRefreshTokenTick()","begin");try{await this._acquireLock(0,async()=>{try{const e=Date.now();try{return await this._useSession(async t=>{const{data:{session:n}}=t;if(!n||!n.refresh_token||!n.expires_at)return void this._debug("#_autoRefreshTokenTick()","no session");const r=Math.floor((1e3*n.expires_at-e)/Se);this._debug("#_autoRefreshTokenTick()",`access token expires in ${r} ticks, a tick lasts 30000ms, refresh threshold is 3 ticks`),r<=3&&await this._callRefreshToken(n.refresh_token)})}catch(e){console.error("Auto refresh tick failed with error. This is likely a transient error.",e)}}finally{this._debug("#_autoRefreshTokenTick()","end")}})}catch(e){if(!(e.isAcquireTimeout||e instanceof Ot))throw e;this._debug("auto refresh token tick lock not available")}}async _handleVisibilityChange(){if(this._debug("#_handleVisibilityChange()"),!Xe()||!(null===window||void 0===window?void 0:window.addEventListener))return this.autoRefreshToken&&this.startAutoRefresh(),!1;try{this.visibilityChangedCallback=async()=>await this._onVisibilityChanged(!1),null===window||void 0===window||window.addEventListener("visibilitychange",this.visibilityChangedCallback),await this._onVisibilityChanged(!0)}catch(e){console.error("_handleVisibilityChange",e)}}async _onVisibilityChanged(e){const t=`#_onVisibilityChanged(${e})`;this._debug(t,"visibilityState",document.visibilityState),"visible"===document.visibilityState?(this.autoRefreshToken&&this._startAutoRefresh(),e||(await this.initializePromise,await this._acquireLock(-1,async()=>{"visible"===document.visibilityState?await this._recoverAndRefresh():this._debug(t,"acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting")}))):"hidden"===document.visibilityState&&this.autoRefreshToken&&this._stopAutoRefresh()}async _getUrlForProvider(e,t,n){const r=[`provider=${encodeURIComponent(t)}`];if((null==n?void 0:n.redirectTo)&&r.push(`redirect_to=${encodeURIComponent(n.redirectTo)}`),(null==n?void 0:n.scopes)&&r.push(`scopes=${encodeURIComponent(n.scopes)}`),"pkce"===this.flowType){const[e,t]=await ct(this.storage,this.storageKey),n=new URLSearchParams({code_challenge:`${encodeURIComponent(e)}`,code_challenge_method:`${encodeURIComponent(t)}`});r.push(n.toString())}if(null==n?void 0:n.queryParams){const e=new URLSearchParams(n.queryParams);r.push(e.toString())}return(null==n?void 0:n.skipBrowserRedirect)&&r.push(`skip_http_redirect=${n.skipBrowserRedirect}`),`${e}?${r.join("&")}`}async _unenroll(e){try{return await this._useSession(async t=>{var n;const{data:r,error:i}=t;return i?{data:null,error:i}:await gt(this.fetch,"DELETE",`${this.url}/factors/${e.factorId}`,{headers:this.headers,jwt:null===(n=null==r?void 0:r.session)||void 0===n?void 0:n.access_token})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _enroll(e){try{return await this._useSession(async t=>{var n,r;const{data:i,error:s}=t;if(s)return{data:null,error:s};const o=Object.assign({friendly_name:e.friendlyName,factor_type:e.factorType},"phone"===e.factorType?{phone:e.phone}:{issuer:e.issuer}),{data:a,error:c}=await gt(this.fetch,"POST",`${this.url}/factors`,{body:o,headers:this.headers,jwt:null===(n=null==i?void 0:i.session)||void 0===n?void 0:n.access_token});return c?{data:null,error:c}:("totp"===e.factorType&&(null===(r=null==a?void 0:a.totp)||void 0===r?void 0:r.qr_code)&&(a.totp.qr_code=`data:image/svg+xml;utf-8,${a.totp.qr_code}`),{data:a,error:null})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}}async _verify(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var n;const{data:r,error:i}=t;if(i)return{data:null,error:i};const{data:s,error:o}=await gt(this.fetch,"POST",`${this.url}/factors/${e.factorId}/verify`,{body:{code:e.code,challenge_id:e.challengeId},headers:this.headers,jwt:null===(n=null==r?void 0:r.session)||void 0===n?void 0:n.access_token});return o?{data:null,error:o}:(await this._saveSession(Object.assign({expires_at:Math.round(Date.now()/1e3)+s.expires_in},s)),await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED",s),{data:s,error:o})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}})}async _challenge(e){return this._acquireLock(-1,async()=>{try{return await this._useSession(async t=>{var n;const{data:r,error:i}=t;return i?{data:null,error:i}:await gt(this.fetch,"POST",`${this.url}/factors/${e.factorId}/challenge`,{body:{channel:e.channel},headers:this.headers,jwt:null===(n=null==r?void 0:r.session)||void 0===n?void 0:n.access_token})})}catch(e){if(Pe(e))return{data:null,error:e};throw e}})}async _challengeAndVerify(e){const{data:t,error:n}=await this._challenge({factorId:e.factorId});return n?{data:null,error:n}:await this._verify({factorId:e.factorId,challengeId:t.id,code:e.code})}async _listFactors(){const{data:{user:e},error:t}=await this.getUser();if(t)return{data:null,error:t};const n=(null==e?void 0:e.factors)||[],r=n.filter(e=>"totp"===e.factor_type&&"verified"===e.status),i=n.filter(e=>"phone"===e.factor_type&&"verified"===e.status);return{data:{all:n,totp:r,phone:i},error:null}}async _getAuthenticatorAssuranceLevel(){return this._acquireLock(-1,async()=>await this._useSession(async e=>{var t,n;const{data:{session:r},error:i}=e;if(i)return{data:null,error:i};if(!r)return{data:{currentLevel:null,nextLevel:null,currentAuthenticationMethods:[]},error:null};const{payload:s}=ot(r.access_token);let o=null;s.aal&&(o=s.aal);let a=o;return(null!==(n=null===(t=r.user.factors)||void 0===t?void 0:t.filter(e=>"verified"===e.status))&&void 0!==n?n:[]).length>0&&(a="aal2"),{data:{currentLevel:o,nextLevel:a,currentAuthenticationMethods:s.amr||[]},error:null}}))}async fetchJwk(e,t={keys:[]}){let n=t.keys.find(t=>t.kid===e);if(n)return n;if(n=this.jwks.keys.find(t=>t.kid===e),n&&this.jwks_cached_at+6e5>Date.now())return n;const{data:r,error:i}=await gt(this.fetch,"GET",`${this.url}/.well-known/jwks.json`,{headers:this.headers});if(i)throw i;if(!r.keys||0===r.keys.length)throw new Me("JWKS is empty");if(this.jwks=r,this.jwks_cached_at=Date.now(),n=r.keys.find(t=>t.kid===e),!n)throw new Me("No matching signing key found in JWKS");return n}async getClaims(e,t={keys:[]}){try{let n=e;if(!n){const{data:e,error:t}=await this.getSession();if(t||!e.session)return{data:null,error:t};n=e.session.access_token}const{header:r,payload:i,signature:s,raw:{header:o,payload:a}}=ot(n);if(function(e){if(!e)throw new Error("Missing exp claim");if(e<=Math.floor(Date.now()/1e3))throw new Error("JWT has expired")}(i.exp),!r.kid||"HS256"===r.alg||!("crypto"in globalThis)||!("subtle"in globalThis.crypto)){const{error:e}=await this.getUser(n);if(e)throw e;return{data:{claims:i,header:r,signature:s},error:null}}const c=function(e){switch(e){case"RS256":return{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};case"ES256":return{name:"ECDSA",namedCurve:"P-256",hash:{name:"SHA-256"}};default:throw new Error("Invalid alg claim")}}(r.alg),u=await this.fetchJwk(r.kid,t),l=await crypto.subtle.importKey("jwk",u,c,!0,["verify"]);if(!await crypto.subtle.verify(c,l,s,function(e){const t=[];return function(e,t){for(let n=0;n<e.length;n+=1){let r=e.charCodeAt(n);if(r>55295&&r<=56319){const t=1024*(r-55296)&65535;r=65536+(e.charCodeAt(n+1)-56320&65535|t),n+=1}Ve(r,t)}}(e,e=>t.push(e)),new Uint8Array(t)}(`${o}.${a}`)))throw new Me("Invalid JWT signature");return{data:{claims:i,header:r,signature:s},error:null}}catch(e){if(Pe(e))return{data:null,error:e};throw e}}}xt.nextInstanceID=0;const Rt=xt;class $t extends Rt{constructor(e){super(e)}}class Dt{constructor(e,t,n){var r,i,s;if(this.supabaseUrl=e,this.supabaseKey=t,!e)throw new Error("supabaseUrl is required.");if(!t)throw new Error("supabaseKey is required.");const o=(a=e).endsWith("/")?a:a+"/";var a;const c=new URL(o);this.realtimeUrl=new URL("realtime/v1",c),this.realtimeUrl.protocol=this.realtimeUrl.protocol.replace("http","ws"),this.authUrl=new URL("auth/v1",c),this.storageUrl=new URL("storage/v1",c),this.functionsUrl=new URL("functions/v1",c);const u=`sb-${c.hostname.split(".")[0]}-auth-token`,l=function(e,t){var n,r;const{db:i,auth:s,realtime:o,global:a}=e,{db:c,auth:u,realtime:l,global:h}=t,d={db:Object.assign(Object.assign({},c),i),auth:Object.assign(Object.assign({},u),s),realtime:Object.assign(Object.assign({},l),o),global:Object.assign(Object.assign(Object.assign({},h),a),{headers:Object.assign(Object.assign({},null!==(n=null==h?void 0:h.headers)&&void 0!==n?n:{}),null!==(r=null==a?void 0:a.headers)&&void 0!==r?r:{})}),accessToken:()=>{return e=this,t=void 0,r=function*(){return""},new((n=void 0)||(n=Promise))(function(i,s){function o(e){try{c(r.next(e))}catch(e){s(e)}}function a(e){try{c(r.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,a)}c((r=r.apply(e,t||[])).next())});var e,t,n,r}};return e.accessToken?d.accessToken=e.accessToken:delete d.accessToken,d}(null!=n?n:{},{db:me,realtime:ye,auth:Object.assign(Object.assign({},ve),{storageKey:u}),global:ge});this.storageKey=null!==(r=l.auth.storageKey)&&void 0!==r?r:"",this.headers=null!==(i=l.global.headers)&&void 0!==i?i:{},l.accessToken?(this.accessToken=l.accessToken,this.auth=new Proxy({},{get:(e,t)=>{throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(t)} is not possible`)}})):this.auth=this._initSupabaseAuthClient(null!==(s=l.auth)&&void 0!==s?s:{},this.headers,l.global.fetch),this.fetch=ke(t,this._getAccessToken.bind(this),l.global.fetch),this.realtime=this._initRealtimeClient(Object.assign({headers:this.headers,accessToken:this._getAccessToken.bind(this)},l.realtime)),this.rest=new d(new URL("rest/v1",c).href,{headers:this.headers,schema:l.db.schema,fetch:this.fetch}),l.accessToken||this._listenForAuthEvents()}get functions(){return new l(this.functionsUrl.href,{headers:this.headers,customFetch:this.fetch})}get storage(){return new fe(this.storageUrl.href,this.headers,this.fetch)}from(e){return this.rest.from(e)}schema(e){return this.rest.schema(e)}rpc(e,t={},n={}){return this.rest.rpc(e,t,n)}channel(e,t={config:{}}){return this.realtime.channel(e,t)}getChannels(){return this.realtime.getChannels()}removeChannel(e){return this.realtime.removeChannel(e)}removeAllChannels(){return this.realtime.removeAllChannels()}_getAccessToken(){var e,t,n,r,i,s;return n=this,r=void 0,s=function*(){if(this.accessToken)return yield this.accessToken();const{data:n}=yield this.auth.getSession();return null!==(t=null===(e=n.session)||void 0===e?void 0:e.access_token)&&void 0!==t?t:null},new((i=void 0)||(i=Promise))(function(e,t){function o(e){try{c(s.next(e))}catch(e){t(e)}}function a(e){try{c(s.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i(function(e){e(n)})).then(o,a)}c((s=s.apply(n,r||[])).next())})}_initSupabaseAuthClient({autoRefreshToken:e,persistSession:t,detectSessionInUrl:n,storage:r,storageKey:i,flowType:s,lock:o,debug:a},c,u){const l={Authorization:`Bearer ${this.supabaseKey}`,apikey:`${this.supabaseKey}`};return new $t({url:this.authUrl.href,headers:Object.assign(Object.assign({},l),c),storageKey:i,autoRefreshToken:e,persistSession:t,detectSessionInUrl:n,storage:r,flowType:s,lock:o,debug:a,fetch:u,hasCustomAuthorizationHeader:"Authorization"in this.headers})}_initRealtimeClient(e){return new J(this.realtimeUrl.href,Object.assign(Object.assign({},e),{params:Object.assign({apikey:this.supabaseKey},null==e?void 0:e.params)}))}_listenForAuthEvents(){return this.auth.onAuthStateChange((e,t)=>{this._handleTokenChanged(e,"CLIENT",null==t?void 0:t.access_token)})}_handleTokenChanged(e,t,n){"TOKEN_REFRESHED"!==e&&"SIGNED_IN"!==e||this.changedAccessToken===n?"SIGNED_OUT"===e&&(this.realtime.setAuth(),"STORAGE"==t&&this.auth.signOut(),this.changedAccessToken=void 0):this.changedAccessToken=n}}function Lt(e){return Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lt(e)}function Ut(e,t,n){return(t=function(e){var t=function(e){if("object"!=Lt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Lt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Lt(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Nt(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function s(n,r,i,s){var c=r&&r.prototype instanceof a?r:a,u=Object.create(c.prototype);return Bt(u,"_invoke",function(n,r,i){var s,a,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return s=t,a=0,c=e,d.n=n,o}};function f(n,r){for(a=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,s=l[t],f=d.p,p=s[2];n>3?(i=p===r)&&(c=s[(a=s[4])?5:(a=3,3)],s[4]=s[5]=e):s[0]<=f&&((i=n<2&&f<s[1])?(a=0,d.v=r,d.n=s[1]):f<p&&(i=n<3||s[0]>r||r>p)&&(s[4]=n,s[5]=r,d.n=p,a=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),a=l,c=p;(t=a<2?e:c)||!h;){s||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(u=2,s){if(a||(i="next"),t=s[i]){if(!(t=t.call(s,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=s.return)&&t.call(s),a<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),a=1);s=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){s=e,a=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,s),!0),u}var o={};function a(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(Bt(t={},r,function(){return this}),t),h=u.prototype=a.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Bt(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,Bt(h,"constructor",u),Bt(u,"constructor",c),c.displayName="GeneratorFunction",Bt(u,i,"GeneratorFunction"),Bt(h),Bt(h,i,"Generator"),Bt(h,r,function(){return this}),Bt(h,"toString",function(){return"[object Generator]"}),(Nt=function(){return{w:s,m:d}})()}function Bt(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}Bt=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var s=function(t,n){Bt(e,t,function(e){return this._invoke(t,n,e)})};s("next",0),s("throw",1),s("return",2)}},Bt(e,t,n,r)}function Ft(e,t,n,r,i,s,o){try{var a=e[s](o),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function qt(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var s=e.apply(t,n);function o(e){Ft(s,r,i,o,a,"next",e)}function a(e){Ft(s,r,i,o,a,"throw",e)}o(void 0)})}}var Mt=new Dt("https://tpjnyiyvpyzzbzhajbjh.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRwam55aXl2cHl6emJ6aGFqYmpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2NDA1NTQsImV4cCI6MjA2NzIxNjU1NH0.cflFdHytlTUA_H_AP7E3Kry9-S-xw45pIRoJQtfk4AE",{auth:{storage:{getItem:function(e){return qt(Nt().m(function t(){var n;return Nt().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.get(e);case 1:return n=t.v,t.a(2,n[e]||null)}},t)}))()},setItem:function(e,t){return qt(Nt().m(function n(){return Nt().w(function(n){for(;;)switch(n.n){case 0:return n.n=1,chrome.storage.local.set(Ut({},e,t));case 1:return n.a(2)}},n)}))()},removeItem:function(e){return qt(Nt().m(function t(){return Nt().w(function(t){for(;;)switch(t.n){case 0:return t.n=1,chrome.storage.local.remove(e);case 1:return t.a(2)}},t)}))()}},autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0}});function zt(e){return zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zt(e)}function Kt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Wt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Kt(Object(n),!0).forEach(function(t){Jt(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Kt(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Jt(e,t,n){return(t=tn(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Gt(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function s(n,r,i,s){var c=r&&r.prototype instanceof a?r:a,u=Object.create(c.prototype);return Ht(u,"_invoke",function(n,r,i){var s,a,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return s=t,a=0,c=e,d.n=n,o}};function f(n,r){for(a=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,s=l[t],f=d.p,p=s[2];n>3?(i=p===r)&&(c=s[(a=s[4])?5:(a=3,3)],s[4]=s[5]=e):s[0]<=f&&((i=n<2&&f<s[1])?(a=0,d.v=r,d.n=s[1]):f<p&&(i=n<3||s[0]>r||r>p)&&(s[4]=n,s[5]=r,d.n=p,a=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),a=l,c=p;(t=a<2?e:c)||!h;){s||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(u=2,s){if(a||(i="next"),t=s[i]){if(!(t=t.call(s,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=s.return)&&t.call(s),a<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),a=1);s=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){s=e,a=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,s),!0),u}var o={};function a(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(Ht(t={},r,function(){return this}),t),h=u.prototype=a.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,Ht(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,Ht(h,"constructor",u),Ht(u,"constructor",c),c.displayName="GeneratorFunction",Ht(u,i,"GeneratorFunction"),Ht(h),Ht(h,i,"Generator"),Ht(h,r,function(){return this}),Ht(h,"toString",function(){return"[object Generator]"}),(Gt=function(){return{w:s,m:d}})()}function Ht(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}Ht=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var s=function(t,n){Ht(e,t,function(e){return this._invoke(t,n,e)})};s("next",0),s("throw",1),s("return",2)}},Ht(e,t,n,r)}function Vt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,s,o,a=[],c=!0,u=!1;try{if(s=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=s.call(n)).done)&&(a.push(r.value),a.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return a}}(e,t)||Yt(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yt(e,t){if(e){if("string"==typeof e)return Qt(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qt(e,t):void 0}}function Qt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Xt(e,t,n,r,i,s,o){try{var a=e[s](o),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function Zt(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var s=e.apply(t,n);function o(e){Xt(s,r,i,o,a,"next",e)}function a(e){Xt(s,r,i,o,a,"throw",e)}o(void 0)})}}function en(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,tn(r.key),r)}}function tn(e){var t=function(e){if("object"!=zt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=zt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==zt(t)?t:t+""}var nn=new(function(){return e=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)},t=[{key:"getData",value:(N=Zt(Gt().m(function e(){var t,n,r,i,s,o,a,c,u,l,h,d,f,p,g=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(t=e.v,n=t.data,!t.error&&n.session){e.n=2;break}return e.a(2,this.getDefaultData());case 2:return r=n.session.user,console.log("Fetching data for user:",r.id),e.n=3,Promise.all([Mt.from("links").select("*").eq("user_id",r.id),Mt.from("collections").select("*").eq("user_id",r.id)]);case 3:return i=e.v,s=Vt(i,2),o=s[0],a=s[1],o.error&&console.error("Error fetching links:",o.error),a.error&&console.error("Error fetching collections:",a.error),c=(o.data||[]).map(function(e){return console.log("Storage: getData highlights for link",e.id,e.highlights),{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:g.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}),u=(a.data||[]).map(function(e){return{id:e.id,name:e.name,description:e.description,color:e.color,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}}),h=c,d=u,e.n=4,this.getSmartCollections();case 4:return f=e.v,p=this.getDefaultCategories(),l={links:h,collections:d,smartCollections:f,categories:p,settings:{defaultCategory:"general",autoSummarize:!0,enableSmartCollections:!0}},console.log("Data fetched from Supabase:",l),e.a(2,l)}},e,this)})),function(){return N.apply(this,arguments)})},{key:"addLink",value:(U=Zt(Gt().m(function e(t){var n,r,i,s,o,a,c,u;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(r=e.v,i=r.data,s=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,{success:!1,error:"User not logged in."});case 2:return o={user_id:s.id,collection_id:t.collectionId||null,url:t.url,title:t.title,favicon:t.favicon,domain:t.domain,user_note:t.userNote,ai_summary:t.aiSummary,category:t.category,is_in_inbox:t.isInInbox||!1,highlights:t.highlights?JSON.stringify(t.highlights):null},console.log("Storage: addLink dbLink.highlights:",o.highlights),e.n=3,Mt.from("links").insert(o).select("id").single();case 3:if(a=e.v,c=a.data,!(u=a.error)){e.n=4;break}return console.error("Supabase addLink error:",u),e.a(2,{success:!1,error:u.message||"Database error occurred."});case 4:return e.a(2,{success:!0,linkId:c.id})}},e)})),function(e){return U.apply(this,arguments)})},{key:"updateLink",value:(L=Zt(Gt().m(function e(t,n){var r,i,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return r=Wt(Wt({},n),{},{updated_at:new Date}),void 0!==n.highlights&&(r.highlights=n.highlights?JSON.stringify(n.highlights):null),delete r.collectionId,delete r.userNote,delete r.aiSummary,delete r.isInInbox,delete r.createdAt,delete r.updatedAt,void 0!==n.collectionId&&(r.collection_id=n.collectionId),void 0!==n.userNote&&(r.user_note=n.userNote),void 0!==n.aiSummary&&(r.ai_summary=n.aiSummary),void 0!==n.isInInbox&&(r.is_in_inbox=n.isInInbox),console.log("Storage: updateLink dbUpdates.highlights:",r.highlights),e.n=1,Mt.from("links").update(r).eq("id",t);case 1:if(i=e.v,!(s=i.error)){e.n=2;break}throw s;case 2:return e.a(2)}},e)})),function(e,t){return L.apply(this,arguments)})},{key:"deleteLink",value:(D=Zt(Gt().m(function e(t){var n,r;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("links").delete().eq("id",t);case 1:if(n=e.v,!(r=n.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return D.apply(this,arguments)})},{key:"addCollection",value:($=Zt(Gt().m(function e(t){var n,r,i,s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(r=e.v,i=r.data,s=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}throw new Error("User not logged in.");case 2:return o={user_id:s.id,name:t.name,description:t.description,color:t.color},e.n=3,Mt.from("collections").insert(o);case 3:if(a=e.v,!(c=a.error)){e.n=4;break}throw c;case 4:return e.a(2)}},e)})),function(e){return $.apply(this,arguments)})},{key:"updateCollection",value:(R=Zt(Gt().m(function e(t,n){var r,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("collections").update(Wt(Wt({},n),{},{updatedAt:new Date})).eq("id",t);case 1:if(r=e.v,!(i=r.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return R.apply(this,arguments)})},{key:"deleteCollection",value:(x=Zt(Gt().m(function e(t){var n,r;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("collections").delete().eq("id",t);case 1:if(n=e.v,!(r=n.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return x.apply(this,arguments)})},{key:"searchLinks",value:(C=Zt(Gt().m(function e(t){var n,r,i,s,o,a,c,u,l=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(r=e.v,i=r.data,s=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:if(t.trim()){e.n=3;break}return e.a(2,[]);case 3:return e.p=3,e.n=4,Mt.rpc("search_user_links",{search_query:t.trim(),user_uuid:s.id,result_limit:50});case 4:if(o=e.v,a=o.data,!(c=o.error)){e.n=5;break}return console.error("Search error:",c),e.a(2,[]);case 5:return e.a(2,(a||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:l.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain,searchRank:e.rank,searchHeadline:e.headline}}));case 6:return e.p=6,u=e.v,console.error("Search failed:",u),e.a(2,[])}},e,null,[[3,6]])})),function(e){return C.apply(this,arguments)})},{key:"getUserTags",value:(P=Zt(Gt().m(function e(){var t,n,r,i,s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(n=e.v,r=n.data,i=null===(t=r.session)||void 0===t?void 0:t.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,Mt.rpc("get_user_tags_with_counts",{user_uuid:i.id});case 3:if(s=e.v,o=s.data,!(a=s.error)){e.n=4;break}return console.error("Error fetching user tags:",a),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,name:e.name,usageCount:e.usage_count||0}}));case 5:return e.p=5,c=e.v,console.error("Failed to get user tags:",c),e.a(2,[])}},e,null,[[2,5]])})),function(){return P.apply(this,arguments)})},{key:"getLinkTags",value:(E=Zt(Gt().m(function e(t){var n,r,i,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Mt.rpc("get_link_tags",{link_uuid:t});case 1:if(n=e.v,r=n.data,!(i=n.error)){e.n=2;break}return console.error("Error fetching link tags:",i),e.a(2,[]);case 2:return e.a(2,r||[]);case 3:return e.p=3,s=e.v,console.error("Failed to get link tags:",s),e.a(2,[])}},e,null,[[0,3]])})),function(e){return E.apply(this,arguments)})},{key:"addTagsToLink",value:(I=Zt(Gt().m(function e(t,n){var r,i,s,o,a,c,u;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(i=e.v,s=i.data,o=null===(r=s.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,error:"User not logged in."});case 2:return e.p=2,e.n=3,Mt.rpc("add_tags_to_link",{link_uuid:t,tag_names:n,user_uuid:o.id});case 3:if(a=e.v,!(c=a.error)){e.n=4;break}return console.error("Error adding tags to link:",c),e.a(2,{success:!1,error:c.message||"Failed to add tags."});case 4:return e.a(2,{success:!0});case 5:return e.p=5,u=e.v,console.error("Failed to add tags to link:",u),e.a(2,{success:!1,error:u.message})}},e,null,[[2,5]])})),function(e,t){return I.apply(this,arguments)})},{key:"getLinksByTag",value:(O=Zt(Gt().m(function e(t){var n,r,i,s,o,a,c,u,l=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(r=e.v,i=r.data,s=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return console.error("User not logged in"),e.a(2,[]);case 2:return e.p=2,e.n=3,Mt.rpc("get_links_by_tag",{user_uuid:s.id,tag_name:t});case 3:if(o=e.v,a=o.data,!(c=o.error)){e.n=4;break}return console.error("Error fetching links by tag:",c),e.a(2,[]);case 4:return e.a(2,(a||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:l.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}));case 5:return e.p=5,u=e.v,console.error("Failed to get links by tag:",u),e.a(2,[])}},e,null,[[2,5]])})),function(e){return O.apply(this,arguments)})},{key:"cleanupUnusedTags",value:(j=Zt(Gt().m(function e(){var t,n,r,i,s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(n=e.v,r=n.data,i=null===(t=r.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,0);case 2:return e.p=2,e.n=3,Mt.rpc("cleanup_unused_tags",{user_uuid:i.id});case 3:if(s=e.v,o=s.data,!(a=s.error)){e.n=4;break}return console.error("Error cleaning up unused tags:",a),e.a(2,0);case 4:return e.a(2,o||0);case 5:return e.p=5,c=e.v,console.error("Failed to cleanup unused tags:",c),e.a(2,0)}},e,null,[[2,5]])})),function(){return j.apply(this,arguments)})},{key:"moveToInbox",value:(A=Zt(Gt().m(function e(t){var n,r;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("links").update({is_in_inbox:!0,collection_id:null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(n=e.v,!(r=n.error)){e.n=2;break}throw r;case 2:return e.a(2)}},e)})),function(e){return A.apply(this,arguments)})},{key:"moveFromInbox",value:(T=Zt(Gt().m(function e(t,n){var r,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("links").update({is_in_inbox:!1,collection_id:n||null,updated_at:(new Date).toISOString()}).eq("id",t);case 1:if(r=e.v,!(i=r.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return T.apply(this,arguments)})},{key:"getInboxLinks",value:(S=Zt(Gt().m(function e(){var t,n,r,i,s,o,a,c=this;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(n=e.v,r=n.data,i=null===(t=r.session)||void 0===t?void 0:t.user){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,Mt.from("links").select("*").eq("user_id",i.id).eq("is_in_inbox",!0).order("created_at",{ascending:!1});case 3:if(s=e.v,o=s.data,!(a=s.error)){e.n=4;break}return console.error("Error fetching inbox links:",a),e.a(2,[]);case 4:return e.a(2,(o||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,userNote:e.user_note||"",aiSummary:e.ai_summary,category:e.category,collectionId:e.collection_id,isInInbox:e.is_in_inbox||!1,highlights:c.parseHighlights(e.highlights),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),domain:e.domain}}))}},e)})),function(){return S.apply(this,arguments)})},{key:"bulkMoveFromInbox",value:(_=Zt(Gt().m(function e(t,n){var r,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.from("links").update({is_in_inbox:!1,collection_id:n||null,updated_at:(new Date).toISOString()}).in("id",t);case 1:if(r=e.v,!(i=r.error)){e.n=2;break}throw i;case 2:return e.a(2)}},e)})),function(e,t){return _.apply(this,arguments)})},{key:"toggleCollectionSharing",value:(k=Zt(Gt().m(function e(t,n){var r,i,s,o,a,c,u,l,h;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(i=e.v,s=i.data,o=null===(r=s.session)||void 0===r?void 0:r.user){e.n=2;break}return e.a(2,{success:!1,message:"User not logged in."});case 2:return e.p=2,e.n=3,Mt.rpc("toggle_collection_sharing",{collection_uuid:t,user_uuid:o.id,make_public:n});case 3:if(a=e.v,c=a.data,!(u=a.error)){e.n=4;break}return console.error("Error toggling collection sharing:",u),e.a(2,{success:!1,message:u.message||"Failed to update sharing settings."});case 4:return l=null==c?void 0:c[0],e.a(2,{success:(null==l?void 0:l.success)||!1,shareToken:null==l?void 0:l.share_token,message:(null==l?void 0:l.message)||"Sharing settings updated."});case 5:return e.p=5,h=e.v,console.error("Failed to toggle collection sharing:",h),e.a(2,{success:!1,message:h.message})}},e,null,[[2,5]])})),function(e,t){return k.apply(this,arguments)})},{key:"getCollectionSharingInfo",value:(w=Zt(Gt().m(function e(t){var n,r,i,s,o,a,c,u;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(r=e.v,i=r.data,s=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,null);case 2:return e.p=2,e.n=3,Mt.from("collections").select("is_public, share_token, view_count").eq("id",t).eq("user_id",s.id).single();case 3:if(o=e.v,a=o.data,!(c=o.error)){e.n=4;break}return console.error("Error fetching collection sharing info:",c),e.a(2,null);case 4:return e.a(2,{isPublic:a.is_public||!1,shareToken:a.share_token,viewCount:a.view_count||0});case 5:return e.p=5,u=e.v,console.error("Failed to get collection sharing info:",u),e.a(2,null)}},e,null,[[2,5]])})),function(e){return w.apply(this,arguments)})},{key:"getSmartCollections",value:(b=Zt(Gt().m(function e(){var t;return Gt().w(function(e){for(;;)if(0===e.n)return t=this.getDefaultSmartCollections(),e.a(2,t)},e,this)})),function(){return b.apply(this,arguments)})},{key:"generateAISmartCollections",value:(y=Zt(Gt().m(function e(t){var n,r,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,!(t.length>5)){e.n=3;break}return e.n=1,s.e(508).then(s.bind(s,508));case 1:return n=e.v,r=n.aiService,e.n=2,r.generateSmartCollectionSuggestions(t);case 2:return e.a(2,e.v);case 3:e.n=5;break;case 4:e.p=4,i=e.v,console.error("Failed to generate AI smart collection suggestions:",i);case 5:return e.a(2,[])}},e,null,[[0,4]])})),function(e){return y.apply(this,arguments)})},{key:"createSmartCollection",value:(v=Zt(Gt().m(function e(t){return Gt().w(function(e){for(;;)switch(e.n){case 0:console.log("Creating smart collection:",t);case 1:return e.a(2)}},e)})),function(e){return v.apply(this,arguments)})},{key:"updateSmartCollection",value:(m=Zt(Gt().m(function e(t,n){return Gt().w(function(e){for(;;)switch(e.n){case 0:console.log("Updating smart collection:",t,n);case 1:return e.a(2)}},e)})),function(e,t){return m.apply(this,arguments)})},{key:"deleteSmartCollection",value:(g=Zt(Gt().m(function e(t){return Gt().w(function(e){for(;;)switch(e.n){case 0:console.log("Deleting smart collection:",t);case 1:return e.a(2)}},e)})),function(e){return g.apply(this,arguments)})},{key:"getSmartCollectionLinks",value:(p=Zt(Gt().m(function e(t){var n,r,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,this.getSmartCollections();case 1:if(n=e.v,r=n.find(function(e){return e.id===t})){e.n=2;break}return e.a(2,[]);case 2:return e.n=3,this.getData();case 3:return i=e.v.links,e.a(2,this.filterLinksForSmartCollection(i,r))}},e,this)})),function(e){return p.apply(this,arguments)})},{key:"filterLinksForSmartCollection",value:function(e,t){var n,r,i,s,o=this,a=function(e){return function(e){if(Array.isArray(e))return Qt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Yt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e);if(null!==(n=t.filters)&&void 0!==n&&n.dateRange){var c=t.filters.dateRange,u=c.start,l=c.end;a=a.filter(function(e){var t=e.createdAt;return!(u&&t<u||l&&t>l)})}switch(null!==(r=t.filters)&&void 0!==r&&null!==(r=r.categories)&&void 0!==r&&r.length&&(a=a.filter(function(e){return t.filters.categories.includes(e.category)})),null!==(i=t.filters)&&void 0!==i&&null!==(i=i.domains)&&void 0!==i&&i.length&&(a=a.filter(function(e){return t.filters.domains.some(function(t){return e.domain.includes(t)})})),null!==(s=t.filters)&&void 0!==s&&null!==(s=s.contentType)&&void 0!==s&&s.length&&(a=a.filter(function(e){var n=o.detectContentTypeFromDomain(e.domain);return t.filters.contentType.includes(n)})),t.id){case"recent-reads":return a.filter(function(e){return e.createdAt>=new Date(Date.now()-6048e5)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()}).slice(0,20);case"ai-related":return a.filter(function(e){return o.isAIRelated(e)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"unread":return a.filter(function(e){return!e.userNote||""===e.userNote.trim()}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"tutorials":return a.filter(function(e){return o.isTutorial(e)}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});case"github-repos":return a.filter(function(e){return e.domain.includes("github.com")}).sort(function(e,t){return t.createdAt.getTime()-e.createdAt.getTime()});default:return a}}},{key:"detectContentTypeFromDomain",value:function(e){return e.includes("youtube.com")||e.includes("vimeo.com")?"video":e.includes("github.com")?"tool":e.includes("docs.")||e.includes("documentation")?"documentation":e.includes("medium.com")||e.includes("blog")?"blog":e.includes("news")||e.includes("cnn.com")?"news":"article"}},{key:"isAIRelated",value:function(e){var t="".concat(e.title," ").concat(e.userNote," ").concat(e.aiSummary||"").toLowerCase();return["artificial intelligence","machine learning","deep learning","neural network","ai","ml","gpt","chatgpt","openai","tensorflow","pytorch","llm","natural language processing","nlp","computer vision","reinforcement learning"].some(function(e){return t.includes(e)})}},{key:"isTutorial",value:function(e){var t="".concat(e.title," ").concat(e.userNote).toLowerCase();return["tutorial","how to","guide","step by step","learn","course","introduction to","getting started","beginner","walkthrough"].some(function(e){return t.includes(e)})}},{key:"getDefaultSmartCollections",value:function(){var e=new Date;return[{id:"recent-reads",name:"📚 Recent Reads",description:"Links saved in the last 7 days",query:"created_at >= now() - interval '7 days'",isSystem:!0,autoUpdate:!0,icon:"📚",color:"#3b82f6",filters:{dateRange:{start:new Date(Date.now()-6048e5)}},createdAt:e,updatedAt:e},{id:"ai-related",name:"🤖 AI & Machine Learning",description:"Content related to artificial intelligence and machine learning",query:"title ILIKE '%ai%' OR title ILIKE '%machine learning%' OR title ILIKE '%neural%'",isSystem:!0,autoUpdate:!0,icon:"🤖",color:"#8b5cf6",createdAt:e,updatedAt:e},{id:"unread",name:"📖 To Read",description:"Links without notes (likely unread)",query:"user_note IS NULL OR user_note = ''",isSystem:!0,autoUpdate:!0,icon:"📖",color:"#f59e0b",createdAt:e,updatedAt:e},{id:"tutorials",name:"🎓 Tutorials & Guides",description:"Educational content and tutorials",query:"title ILIKE '%tutorial%' OR title ILIKE '%guide%' OR title ILIKE '%how to%'",isSystem:!0,autoUpdate:!0,icon:"🎓",color:"#10b981",createdAt:e,updatedAt:e},{id:"github-repos",name:"⭐ GitHub Repositories",description:"GitHub repositories and projects",query:"domain LIKE '%github.com%'",isSystem:!0,autoUpdate:!0,icon:"⭐",color:"#6b7280",filters:{domains:["github.com"]},createdAt:e,updatedAt:e}]}},{key:"getDefaultCategories",value:function(){return[{id:"general",name:"General",color:"#6b7280",isDefault:!0},{id:"work",name:"Work",color:"#3b82f6"},{id:"personal",name:"Personal",color:"#10b981"},{id:"learning",name:"Learning",color:"#f59e0b"}]}},{key:"getDefaultData",value:function(){return{links:[],collections:[],smartCollections:[],categories:this.getDefaultCategories(),settings:{defaultCategory:"general",autoSummarize:!0,enableSmartCollections:!0}}}},{key:"getLinkByUrl",value:(f=Zt(Gt().m(function e(t){var n,r,i,s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.n=1,Mt.auth.getSession();case 1:if(r=e.v,i=r.data,s=null===(n=i.session)||void 0===n?void 0:n.user){e.n=2;break}return e.a(2,null);case 2:return e.n=3,Mt.from("links").select("*").eq("user_id",s.id).eq("url",t).single();case 3:if(o=e.v,a=o.data,!(c=o.error)){e.n=5;break}if("PGRST116"!==c.code){e.n=4;break}return e.a(2,null);case 4:throw c;case 5:return e.a(2,{id:a.id,url:a.url,title:a.title,favicon:a.favicon,userNote:a.user_note||"",aiSummary:a.ai_summary,category:a.category,collectionId:a.collection_id,isInInbox:a.is_in_inbox||!1,highlights:this.parseHighlights(a.highlights),createdAt:new Date(a.created_at),updatedAt:new Date(a.updated_at),domain:a.domain})}},e,this)})),function(e){return f.apply(this,arguments)})},{key:"parseHighlights",value:function(e){if(!e)return console.log("Storage: No highlights data found"),[];if("string"==typeof e)try{var t=JSON.parse(e),n=Array.isArray(t)?t:[];return console.log("Storage: Parsed highlights from JSON:",n.length,"highlights",n),n}catch(e){return console.warn("Failed to parse highlights JSON:",e),[]}return Array.isArray(e)?(console.log("Storage: Found highlights array:",e.length,"highlights",e),e):(console.log("Storage: Highlights data in unexpected format:",zt(e),e),[])}},{key:"logActivity",value:(d=Zt(Gt().m(function e(t,n,r,i){var s,o,a,c;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivities();case 1:return s=e.v,o={id:Date.now().toString(),type:t,linkId:n,collectionId:r,metadata:i,createdAt:new Date},s.push(o),a=s.slice(-1e3),e.n=2,chrome.storage.local.set({nest_activities:a});case 2:return e.n=3,this.updateStreaks(t);case 3:console.log("Activity logged:",o),e.n=5;break;case 4:e.p=4,c=e.v,console.error("Failed to log activity:",c);case 5:return e.a(2)}},e,this,[[0,4]])})),function(e,t,n,r){return d.apply(this,arguments)})},{key:"getActivities",value:(h=Zt(Gt().m(function e(){var t,n,r,i,s=arguments;return Gt().w(function(e){for(;;)switch(e.n){case 0:return t=s.length>0&&void 0!==s[0]?s[0]:100,e.p=1,e.n=2,chrome.storage.local.get("nest_activities");case 2:return n=e.v,r=n.nest_activities||[],e.a(2,r.slice(-t).reverse());case 3:return e.p=3,i=e.v,console.error("Failed to get activities:",i),e.a(2,[])}},e,null,[[1,3]])})),function(){return h.apply(this,arguments)})},{key:"getActivityStats",value:(l=Zt(Gt().m(function e(){var t,n,r,i,s,o;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivities(1e3);case 1:return r=e.v,e.n=2,this.getStreaks();case 2:return i=e.v,s={totalSaves:r.filter(function(e){return"save"===e.type}).length,totalReads:r.filter(function(e){return"read"===e.type}).length,totalHighlights:r.filter(function(e){return"highlight"===e.type}).length,totalOrganizations:r.filter(function(e){return"organize"===e.type}).length,totalSearches:r.filter(function(e){return"search"===e.type}).length,activeDays:this.getUniqueDays(r).length,currentStreak:(null===(t=i.find(function(e){return"daily_save"===e.type}))||void 0===t?void 0:t.currentCount)||0,bestStreak:(null===(n=i.find(function(e){return"daily_save"===e.type}))||void 0===n?void 0:n.bestCount)||0,thisWeekActivity:this.getThisWeekActivity(r),lastActiveDate:r.length>0?new Date(r[0].createdAt):void 0},e.a(2,s);case 3:return e.p=3,o=e.v,console.error("Failed to get activity stats:",o),e.a(2,{totalSaves:0,totalReads:0,totalHighlights:0,totalOrganizations:0,totalSearches:0,activeDays:0,currentStreak:0,bestStreak:0,thisWeekActivity:0})}},e,this,[[0,3]])})),function(){return l.apply(this,arguments)})},{key:"getStreaks",value:(u=Zt(Gt().m(function e(){var t,n;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.storage.local.get("nest_streaks");case 1:return t=e.v,e.a(2,t.nest_streaks||[]);case 2:return e.p=2,n=e.v,console.error("Failed to get streaks:",n),e.a(2,[])}},e,null,[[0,2]])})),function(){return u.apply(this,arguments)})},{key:"updateStreaks",value:(c=Zt(Gt().m(function e(t){var n,r,i,s,o,a,c,u,l;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getStreaks();case 1:return n=e.v,r=(new Date).toDateString(),"save"===t&&((i=n.find(function(e){return"daily_save"===e.type}))||(i={id:"daily_save",type:"daily_save",currentCount:0,bestCount:0,lastActivityAt:new Date,createdAt:new Date},n.push(i)),s=new Date(i.lastActivityAt).toDateString(),o=new Date(Date.now()-864e5).toDateString(),s===r||(s===o?(i.currentCount++,i.lastActivityAt=new Date):(i.currentCount=1,i.lastActivityAt=new Date)),i.currentCount>i.bestCount&&(i.bestCount=i.currentCount)),"organize"===t&&((a=n.find(function(e){return"weekly_organize"===e.type}))||(a={id:"weekly_organize",type:"weekly_organize",currentCount:0,bestCount:0,lastActivityAt:new Date,createdAt:new Date},n.push(a)),c=this.getWeekNumber(new Date),u=this.getWeekNumber(new Date(a.lastActivityAt)),c===u||(c===u+1?(a.currentCount++,a.lastActivityAt=new Date):(a.currentCount=1,a.lastActivityAt=new Date)),a.currentCount>a.bestCount&&(a.bestCount=a.currentCount)),e.n=2,chrome.storage.local.set({nest_streaks:n});case 2:e.n=4;break;case 3:e.p=3,l=e.v,console.error("Failed to update streaks:",l);case 4:return e.a(2)}},e,this,[[0,3]])})),function(e){return c.apply(this,arguments)})},{key:"getUniqueDays",value:function(e){var t=new Set;return e.forEach(function(e){var n=new Date(e.createdAt).toDateString();t.add(n)}),Array.from(t)}},{key:"getThisWeekActivity",value:function(e){var t=new Date(Date.now()-6048e5);return e.filter(function(e){return new Date(e.createdAt)>=t}).length}},{key:"getWeekNumber",value:function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)}},{key:"shouldShowNudge",value:(a=Zt(Gt().m(function e(){var t,n,r,i,s,o;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,this.getActivityStats();case 1:return t=e.v,e.n=2,this.getActivities(50);case 2:if(n=e.v,r=(new Date).toDateString(),0!==n.filter(function(e){return new Date(e.createdAt).toDateString()===r&&"save"===e.type}).length){e.n=5;break}if(!(t.currentStreak>0)){e.n=3;break}return e.a(2,{show:!0,type:"streak_reminder",message:"You have a ".concat(t.currentStreak,"-day saving streak! Don't break it - save something today.")});case 3:if(!t.lastActiveDate){e.n=4;break}if(!((i=Math.floor((Date.now()-t.lastActiveDate.getTime())/864e5))>=3)){e.n=4;break}return e.a(2,{show:!0,type:"inactive_reminder",message:"Welcome back! You haven't saved anything in ".concat(i," days. Found something interesting?")});case 4:if(!((s=(new Date).getHours())>=10&&s<=20)){e.n=5;break}return e.a(2,{show:!0,type:"daily_reminder",message:"Discover something new today? Save it to Nest!"});case 5:return e.a(2,{show:!1});case 6:return e.p=6,o=e.v,console.error("Failed to check nudge status:",o),e.a(2,{show:!1})}},e,this,[[0,6]])})),function(){return a.apply(this,arguments)})}],n=[{key:"getPublicCollection",value:(o=Zt(Gt().m(function e(t){var n,r,i,s,o;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Mt.rpc("get_public_collection",{token:t});case 1:if(n=e.v,r=n.data,!(i=n.error)){e.n=2;break}return console.error("Error fetching public collection:",i),e.a(2,null);case 2:if(s=null==r?void 0:r[0]){e.n=3;break}return e.a(2,null);case 3:return e.a(2,{id:s.id,name:s.name,description:s.description,viewCount:s.view_count||0,createdAt:new Date(s.created_at),ownerEmail:s.owner_email});case 4:return e.p=4,o=e.v,console.error("Failed to get public collection:",o),e.a(2,null)}},e,null,[[0,4]])})),function(e){return o.apply(this,arguments)})},{key:"getPublicCollectionLinks",value:(i=Zt(Gt().m(function e(t){var n,r,i,s;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Mt.rpc("get_public_collection_links",{token:t});case 1:if(n=e.v,r=n.data,!(i=n.error)){e.n=2;break}return console.error("Error fetching public collection links:",i),e.a(2,[]);case 2:return e.a(2,(r||[]).map(function(e){return{id:e.id,url:e.url,title:e.title,favicon:e.favicon,domain:e.domain,userNote:e.user_note,aiSummary:e.ai_summary,category:e.category,createdAt:new Date(e.created_at),tags:e.tag_names||[]}}));case 3:return e.p=3,s=e.v,console.error("Failed to get public collection links:",s),e.a(2,[])}},e,null,[[0,3]])})),function(e){return i.apply(this,arguments)})},{key:"incrementViewCount",value:(r=Zt(Gt().m(function e(t){var n,r,i;return Gt().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Mt.rpc("increment_collection_views",{token:t});case 1:n=e.v,(r=n.error)&&console.error("Error incrementing view count:",r),e.n=3;break;case 2:e.p=2,i=e.v,console.error("Failed to increment view count:",i);case 3:return e.a(2)}},e,null,[[0,2]])})),function(e){return r.apply(this,arguments)})}],t&&en(e.prototype,t),n&&en(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,n,r,i,o,a,c,u,l,h,d,f,p,g,m,v,y,b,w,k,_,S,T,A,j,O,I,E,P,C,x,R,$,D,L,U,N}()),rn=s(508);function sn(e){return function(e){if(Array.isArray(e))return cn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||an(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function on(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,s,o,a=[],c=!0,u=!1;try{if(s=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=s.call(n)).done)&&(a.push(r.value),a.length!==t);c=!0);}catch(e){u=!0,i=e}finally{try{if(!c&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(u)throw i}}return a}}(e,t)||an(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function an(e,t){if(e){if("string"==typeof e)return cn(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cn(e,t):void 0}}function cn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function un(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",i=n.toStringTag||"@@toStringTag";function s(n,r,i,s){var c=r&&r.prototype instanceof a?r:a,u=Object.create(c.prototype);return ln(u,"_invoke",function(n,r,i){var s,a,c,u=0,l=i||[],h=!1,d={p:0,n:0,v:e,a:f,f:f.bind(e,4),d:function(t,n){return s=t,a=0,c=e,d.n=n,o}};function f(n,r){for(a=n,c=r,t=0;!h&&u&&!i&&t<l.length;t++){var i,s=l[t],f=d.p,p=s[2];n>3?(i=p===r)&&(c=s[(a=s[4])?5:(a=3,3)],s[4]=s[5]=e):s[0]<=f&&((i=n<2&&f<s[1])?(a=0,d.v=r,d.n=s[1]):f<p&&(i=n<3||s[0]>r||r>p)&&(s[4]=n,s[5]=r,d.n=p,a=0))}if(i||n>1)return o;throw h=!0,r}return function(i,l,p){if(u>1)throw TypeError("Generator is already running");for(h&&1===l&&f(l,p),a=l,c=p;(t=a<2?e:c)||!h;){s||(a?a<3?(a>1&&(d.n=-1),f(a,c)):d.n=c:d.v=c);try{if(u=2,s){if(a||(i="next"),t=s[i]){if(!(t=t.call(s,c)))throw TypeError("iterator result is not an object");if(!t.done)return t;c=t.value,a<2&&(a=0)}else 1===a&&(t=s.return)&&t.call(s),a<2&&(c=TypeError("The iterator does not provide a '"+i+"' method"),a=1);s=e}else if((t=(h=d.n<0)?c:n.call(r,d))!==o)break}catch(t){s=e,a=1,c=t}finally{u=1}}return{value:t,done:h}}}(n,i,s),!0),u}var o={};function a(){}function c(){}function u(){}t=Object.getPrototypeOf;var l=[][r]?t(t([][r]())):(ln(t={},r,function(){return this}),t),h=u.prototype=a.prototype=Object.create(l);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,ln(e,i,"GeneratorFunction")),e.prototype=Object.create(h),e}return c.prototype=u,ln(h,"constructor",u),ln(u,"constructor",c),c.displayName="GeneratorFunction",ln(u,i,"GeneratorFunction"),ln(h),ln(h,i,"Generator"),ln(h,r,function(){return this}),ln(h,"toString",function(){return"[object Generator]"}),(un=function(){return{w:s,m:d}})()}function ln(e,t,n,r){var i=Object.defineProperty;try{i({},"",{})}catch(e){i=0}ln=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var s=function(t,n){ln(e,t,function(e){return this._invoke(t,n,e)})};s("next",0),s("throw",1),s("return",2)}},ln(e,t,n,r)}function hn(e,t,n,r,i,s,o){try{var a=e[s](o),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function dn(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var s=e.apply(t,n);function o(e){hn(s,r,i,o,a,"next",e)}function a(e){hn(s,r,i,o,a,"throw",e)}o(void 0)})}}function fn(e,t){return pn.apply(this,arguments)}function pn(){return(pn=dn(un().m(function e(t,n){var r,i,s,o,a,c,u,l,h,d,f,p,g,m,v,y,b,w;return un().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,r=n||t.url,i=t.title||"Untitled",r&&!r.startsWith("chrome://")&&!r.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot save this type of page."});case 1:if(s="",!t.id){e.n=5;break}return e.p=2,e.n=3,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 3:o=e.v,s=(null==o?void 0:o.content)||"",e.n=5;break;case 4:e.p=4,v=e.v,console.log("Could not extract page content:",v);case 5:return a=new URL(r).hostname,e.n=6,Promise.all([chrome.storage.local.get("nest_settings")]);case 6:return c=e.v,u=on(c,1),l=u[0],(h=l.nest_settings||{}).openaiApiKey?(rn.aiService.updateApiKey(h.openaiApiKey),console.log("Background: AI service configured with user API key")):console.log("Background: No OpenAI API key found, using rule-based analysis"),console.log("Background: Starting AI analysis..."),e.n=7,rn.aiService.analyzeContent(s,i,r);case 7:return d=e.v,console.log("Background: AI analysis complete:",d),f="general",h.autoCategorization&&d.categorySuggestions.length>0&&(f=d.categorySuggestions[0].category,console.log("Background: Auto-categorization enabled, using AI category:",f)),p={url:r,title:i,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(a,"&sz=32"),userNote:"",aiSummary:!1!==h.autoSummarize?d.summary:void 0,category:f,domain:a,isInInbox:!0},console.log("Background: saveCurrentPage newLink:",JSON.stringify(p)),e.n=8,nn.addLink(p);case 8:if(g=e.v,console.log("Background: saveCurrentPage result:",g),g.success){e.n=9;break}throw new Error(g.error||"Failed to save link to database.");case 9:if(!(h.autoTagging&&g.linkId&&d.tagSuggestions.length>0)){e.n=13;break}if(e.p=10,!((m=d.tagSuggestions.filter(function(e){return e.confidence>.6}).map(function(e){return e.tag}).slice(0,5)).length>0)){e.n=11;break}return console.log("Background: Auto-tagging enabled, applying tags:",m),e.n=11,nn.addTagsToLink(g.linkId,m);case 11:e.n=13;break;case 12:e.p=12,y=e.v,console.error("Failed to apply auto-tags:",y);case 13:if(!g.linkId){e.n=14;break}return e.n=14,nn.logActivity("save",g.linkId,void 0,{domain:a,category:p.category,hasAISummary:!!d.summary,autoTagged:h.autoTagging,autoCategorized:h.autoCategorization});case 14:return chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Saved to Nest",message:'"'.concat(i,'" has been saved with AI suggestions.')}),e.p=15,e.n=16,chrome.runtime.sendMessage({action:"refreshSidebar"});case 16:e.n=18;break;case 17:e.p=17,b=e.v,console.log("Could not send refresh message to sidebar:",b);case 18:return e.a(2,{success:!0,linkId:g.linkId,aiAnalysis:d});case 19:return e.p=19,w=e.v,console.error("Failed to save current page:",w),e.a(2,{success:!1,error:w.message})}},e,null,[[15,17],[10,12],[2,4],[0,19]])}))).apply(this,arguments)}function gn(e){return mn.apply(this,arguments)}function mn(){return(mn=dn(un().m(function e(t){var n,r,i,s,o,a,c,u,l,h,d;return un().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,n=t.url,r=t.title||"Untitled",n&&!n.startsWith("chrome://")&&!n.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot analyze this type of page."});case 1:return e.n=2,Promise.all([chrome.storage.local.get("nest_settings")]);case 2:if(i=e.v,s=on(i,1),o=s[0],(a=o.nest_settings||{}).openaiApiKey&&(rn.aiService.updateApiKey(a.openaiApiKey),console.log("Background: AI service configured with user API key for analysis")),c="",!t.id){e.n=6;break}return e.p=3,e.n=4,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 4:u=e.v,c=(null==u?void 0:u.content)||"",e.n=6;break;case 5:e.p=5,h=e.v,console.log("Could not extract page content:",h);case 6:return e.n=7,rn.aiService.analyzeContent(c,r,n);case 7:return l=e.v,e.a(2,{success:!0,analysis:l});case 8:return e.p=8,d=e.v,console.error("Failed to analyze page with AI:",d),e.a(2,{success:!1,error:d.message})}},e,null,[[3,5],[0,8]])}))).apply(this,arguments)}function vn(e,t,n,r){return yn.apply(this,arguments)}function yn(){return(yn=dn(un().m(function e(t,n,r,i){var s,o,a,c,u,l,h,d,f,p,g,m,v,y,b,w,k,_,S,T,A;return un().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,s=t.url,o=t.title||"Untitled",s&&!s.startsWith("chrome://")&&!s.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot save highlights from this type of page."});case 1:return e.n=2,nn.getLinkByUrl(s);case 2:if(!(a=e.v)){e.n=4;break}return c={id:Date.now().toString(),selectedText:n,context:r,position:i,createdAt:new Date,updatedAt:new Date},u=[].concat(sn(a.highlights||[]),[c]),e.n=3,nn.updateLink(a.id,{highlights:u});case 3:return console.log("Background: Added highlight to existing link"),e.a(2,{success:!0,highlightId:c.id});case 4:return l=new URL(s).hostname,e.n=5,Promise.all([chrome.storage.local.get("nest_settings")]);case 5:if(h=e.v,d=on(h,1),f=d[0],(p=f.nest_settings||{}).openaiApiKey&&(rn.aiService.updateApiKey(p.openaiApiKey),console.log("Background: AI service configured with user API key")),g="",!t.id){e.n=9;break}return e.p=6,e.n=7,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 7:m=e.v,g=(null==m?void 0:m.content)||"",e.n=9;break;case 8:e.p=8,S=e.v,console.log("Could not extract page content:",S);case 9:return e.n=10,rn.aiService.analyzeContent(g,o,s);case 10:return v=e.v,y="general",p.autoCategorization&&v.categorySuggestions.length>0&&(y=v.categorySuggestions[0].category,console.log("Background: Auto-categorization enabled, using AI category:",y)),b={id:Date.now().toString(),selectedText:n,context:r,position:i,createdAt:new Date,updatedAt:new Date},w={url:s,title:o,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(l,"&sz=32"),userNote:"",aiSummary:!1!==p.autoSummarize?v.summary:void 0,category:y,domain:l,isInInbox:!0,highlights:[b]},e.n=11,nn.addLink(w);case 11:if((k=e.v).success){e.n=12;break}throw new Error(k.error||"Failed to save highlight to database.");case 12:if(!(p.autoTagging&&k.linkId&&v.tagSuggestions.length>0)){e.n=16;break}if(e.p=13,!((_=v.tagSuggestions.filter(function(e){return e.confidence>.6}).map(function(e){return e.tag}).slice(0,5)).length>0)){e.n=14;break}return console.log("Background: Auto-tagging enabled, applying tags:",_),e.n=14,nn.addTagsToLink(k.linkId,_);case 14:e.n=16;break;case 15:e.p=15,T=e.v,console.error("Failed to apply auto-tags:",T);case 16:return console.log("Background: Created new link with highlight"),e.a(2,{success:!0,highlightId:b.id});case 17:e.n=19;break;case 18:return e.p=18,A=e.v,console.error("Failed to save highlight:",A),e.a(2,{success:!1,error:A.message});case 19:return e.a(2)}},e,null,[[13,15],[6,8],[0,18]])}))).apply(this,arguments)}function bn(e){return wn.apply(this,arguments)}function wn(){return(wn=dn(un().m(function e(t){var n,r;return un().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,chrome.tabs.sendMessage(t,{action:"getPageContent"});case 1:return n=e.v,e.a(2,{content:(null==n?void 0:n.content)||""});case 2:return e.p=2,r=e.v,console.log("Could not get page content:",r),e.a(2,{content:""})}},e,null,[[0,2]])}))).apply(this,arguments)}function kn(e){return _n.apply(this,arguments)}function _n(){return(_n=dn(un().m(function e(t){var n,r,i;return un().w(function(e){for(;;)switch(e.n){case 0:if(e.p=0,n=t.url,r=t.title||"Untitled",n&&!n.startsWith("chrome://")&&!n.startsWith("chrome-extension://")){e.n=1;break}return e.a(2,{success:!1,error:"Cannot get info for this type of page."});case 1:return e.a(2,{success:!0,pageInfo:{title:r,url:n,domain:new URL(n).hostname,favicon:t.favIconUrl}});case 2:return e.p=2,i=e.v,console.error("Failed to get page info:",i),e.a(2,{success:!1,error:i.message})}},e,null,[[0,2]])}))).apply(this,arguments)}function Sn(e,t){return Tn.apply(this,arguments)}function Tn(){return Tn=dn(un().m(function e(t,n){var r,i,s,o,a,c,u,l,h,d,f,p,g,m,v,y,b,w,k,_=arguments;return un().w(function(e){for(;;)switch(e.n){case 0:if(r=_.length>2&&void 0!==_[2]?_[2]:[],e.p=1,i=t.url,s=t.title||"Untitled",i&&!i.startsWith("chrome://")&&!i.startsWith("chrome-extension://")){e.n=2;break}return e.a(2,{success:!1,error:"Cannot save this type of page."});case 2:if(o="",!t.id){e.n=6;break}return e.p=3,e.n=4,chrome.tabs.sendMessage(t.id,{action:"getPageContent"});case 4:a=e.v,o=(null==a?void 0:a.content)||"",e.n=6;break;case 5:e.p=5,y=e.v,console.log("Could not extract page content:",y);case 6:return c=new URL(i).hostname,e.n=7,Promise.all([chrome.storage.local.get("nest_settings")]);case 7:return u=e.v,l=on(u,1),h=l[0],(d=h.nest_settings||{}).openaiApiKey&&(rn.aiService.updateApiKey(d.openaiApiKey),console.log("Background: AI service configured with user API key")),e.n=8,rn.aiService.analyzeContent(o,s,i);case 8:return f=e.v,p="general",d.autoCategorization&&f.categorySuggestions.length>0&&(p=f.categorySuggestions[0].category,console.log("Background: Auto-categorization enabled, using AI category:",p)),g={url:i,title:s,favicon:t.favIconUrl||"https://www.google.com/s2/favicons?domain=".concat(c,"&sz=32"),userNote:n,aiSummary:!1!==d.autoSummarize?f.summary:void 0,category:p,domain:c,isInInbox:!0},e.n=9,nn.addLink(g);case 9:if((m=e.v).success){e.n=10;break}throw new Error(m.error||"Failed to save link to database.");case 10:if(v=sn(r),d.autoTagging&&f.tagSuggestions.length>0&&(f.tagSuggestions.filter(function(e){return e.confidence>.6}).map(function(e){return e.tag}).slice(0,3).forEach(function(e){v.some(function(t){return t.toLowerCase()===e.toLowerCase()})||v.push(e)}),console.log("Background: Auto-tagging enabled, combined tags:",v)),!(v.length>0&&m.linkId)){e.n=14;break}return e.p=11,e.n=12,nn.addTagsToLink(m.linkId,v);case 12:e.n=14;break;case 13:e.p=13,b=e.v,console.error("Failed to add tags:",b);case 14:if(!m.linkId){e.n=15;break}return e.n=15,nn.logActivity("save",m.linkId,void 0,{domain:c,category:g.category,reason:n.substring(0,100),tags:r,withContext:!0});case 15:return chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Saved to Nest",message:'"'.concat(s,'" saved with context: ').concat(n.substring(0,50),"...")}),e.p=16,e.n=17,chrome.runtime.sendMessage({action:"refreshSidebar"});case 17:e.n=19;break;case 18:e.p=18,w=e.v,console.log("Could not send refresh message to sidebar:",w);case 19:return e.a(2,{success:!0,linkId:m.linkId});case 20:return e.p=20,k=e.v,console.error("Failed to save with context:",k),e.a(2,{success:!1,error:k.message})}},e,null,[[16,18],[11,13],[3,5],[1,20]])})),Tn.apply(this,arguments)}function An(e){return jn.apply(this,arguments)}function jn(){return(jn=dn(un().m(function e(t){var n,r;return un().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Getting highlights for page:",t),e.n=1,nn.getLinkByUrl(t);case 1:if(!((n=e.v)&&n.highlights&&n.highlights.length>0)){e.n=2;break}return console.log("Background: Found",n.highlights.length,"highlights for page"),e.a(2,{success:!0,highlights:n.highlights});case 2:return console.log("Background: No highlights found for page"),e.a(2,{success:!0,highlights:[]});case 3:e.n=5;break;case 4:return e.p=4,r=e.v,console.error("Background: Failed to get highlights for page:",r),e.a(2,{success:!1,error:r.message});case 5:return e.a(2)}},e,null,[[0,4]])}))).apply(this,arguments)}function On(e,t){return In.apply(this,arguments)}function In(){return(In=dn(un().m(function e(t,n){var r,i,s,o;return un().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,console.log("Background: Removing highlight from storage:",t,"for URL:",n),e.n=1,nn.getLinkByUrl(n);case 1:if(!(r=e.v)||!r.highlights){e.n=7;break}return i=r.highlights.filter(function(e){return e.id!==t}),e.n=2,nn.updateLink(r.id,{highlights:i});case 2:return console.log("Background: Highlight removed from storage successfully"),e.p=3,e.n=4,chrome.runtime.sendMessage({action:"refreshSidebar"});case 4:e.n=6;break;case 5:e.p=5,s=e.v,console.log("Could not send refresh message to sidebar:",s);case 6:return e.a(2,{success:!0});case 7:return console.log("Background: Link not found for URL:",n),e.a(2,{success:!1,error:"Link not found"});case 8:e.n=10;break;case 9:return e.p=9,o=e.v,console.error("Background: Failed to remove highlight from storage:",o),e.a(2,{success:!1,error:o.message});case 10:return e.a(2)}},e,null,[[3,5],[0,9]])}))).apply(this,arguments)}chrome.runtime.onInstalled.addListener(function(){chrome.contextMenus.create({id:"saveToNest",title:"Save to Nest",contexts:["page","link"]}),chrome.contextMenus.create({id:"saveHighlight",title:"Save highlight to Nest",contexts:["selection"]}),console.log("Nest extension installed")}),chrome.contextMenus.onClicked.addListener(function(){var e=dn(un().m(function e(t,n){var r;return un().w(function(e){for(;;)switch(e.n){case 0:if(console.log("Background: Context menu clicked:",t.menuItemId),"saveToNest"!==t.menuItemId||!n){e.n=2;break}return r=t.linkUrl||n.url,e.n=1,fn(n,r);case 1:e.n=3;break;case 2:if("saveHighlight"!==t.menuItemId||!n||!t.selectionText){e.n=3;break}return e.n=3,vn(n,t.selectionText,"",null);case 3:return e.a(2)}},e)}));return function(t,n){return e.apply(this,arguments)}}()),chrome.runtime.onMessage.addListener(function(){var e=dn(un().m(function e(t,n,r){var i,s,o,a;return un().w(function(e){for(;;)switch(e.n){case 0:if("saveScreenshot"!==t.action){e.n=5;break}return e.p=1,i={id:Date.now().toString(),dataURL:t.screenshot,url:t.url,title:t.title,domain:new URL(t.url).hostname,createdAt:new Date,updatedAt:new Date,type:"screenshot"},e.n=2,chrome.storage.local.get("nest_screenshots");case 2:return s=e.v,(o=s.nest_screenshots||[]).push(i),e.n=3,chrome.storage.local.set({nest_screenshots:o});case 3:chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Screenshot Saved",message:"Screenshot saved to Nest successfully!"}),r({success:!0}),e.n=5;break;case 4:e.p=4,a=e.v,console.error("Failed to save screenshot:",a),r({success:!1,error:a.message});case 5:return e.a(2,!0)}},e,null,[[1,4]])}));return function(t,n,r){return e.apply(this,arguments)}}()),chrome.action.onClicked.addListener(function(){var e=dn(un().m(function e(t){var n;return un().w(function(e){for(;;)switch(e.n){case 0:if(console.log("Extension icon clicked, opening sidebar..."),e.p=1,!t.windowId){e.n=3;break}return e.n=2,chrome.sidePanel.open({windowId:t.windowId});case 2:console.log("Sidebar opened successfully");case 3:e.n=5;break;case 4:e.p=4,n=e.v,console.error("Failed to open sidebar:",n);case 5:return e.a(2)}},e,null,[[1,4]])}));return function(t){return e.apply(this,arguments)}}()),chrome.runtime.onMessage.addListener(function(e,t,n){return console.log("Background: Message received:",e),dn(un().m(function r(){var i,s,o,a,c,u,l,h,d,f,p,g,m,v,y,b,w;return un().w(function(r){for(;;)switch(r.n){case 0:if(r.p=0,"saveCurrentPage"!==e.action){r.n=5;break}return r.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if(!(i=r.v)[0]){r.n=3;break}return r.n=2,fn(i[0]);case 2:s=r.v,n(s),r.n=4;break;case 3:n({success:!1,error:"No active tab found."});case 4:r.n=44;break;case 5:if("openSidePanel"!==e.action){r.n=13;break}return r.p=6,r.n=7,chrome.tabs.query({active:!0,currentWindow:!0});case 7:if(!(o=r.v)[0]||!o[0].windowId){r.n=9;break}return r.n=8,chrome.sidePanel.open({windowId:o[0].windowId});case 8:n({success:!0}),r.n=10;break;case 9:n({success:!1,error:"No active window found."});case 10:r.n=12;break;case 11:r.p=11,b=r.v,console.error("Failed to open side panel:",b),n({success:!1,error:b.message});case 12:r.n=44;break;case 13:if("saveHighlight"!==e.action){r.n=20;break}if(a=null,!t.tab){r.n=14;break}a=t.tab,r.n=16;break;case 14:return r.n=15,chrome.tabs.query({active:!0,currentWindow:!0});case 15:(c=r.v)[0]&&(a=c[0]);case 16:if(!a){r.n=18;break}return r.n=17,vn(a,e.selectedText,e.context,e.position);case 17:u=r.v,n(u),r.n=19;break;case 18:n({success:!1,error:"No active tab found."});case 19:r.n=44;break;case 20:if("getPageContent"!==e.action){r.n=24;break}if(!t.tab||!t.tab.id){r.n=22;break}return r.n=21,bn(t.tab.id);case 21:l=r.v,n(l),r.n=23;break;case 22:n({content:""});case 23:r.n=44;break;case 24:if("analyzePageWithAI"!==e.action){r.n=29;break}return r.n=25,chrome.tabs.query({active:!0,currentWindow:!0});case 25:if(!(h=r.v)[0]){r.n=27;break}return r.n=26,gn(h[0]);case 26:d=r.v,n(d),r.n=28;break;case 27:n({success:!1,error:"No active tab found."});case 28:r.n=44;break;case 29:if("saveWithContext"!==e.action){r.n=34;break}return r.n=30,chrome.tabs.query({active:!0,currentWindow:!0});case 30:if(!(f=r.v)[0]){r.n=32;break}return r.n=31,Sn(f[0],e.reason,e.tags);case 31:p=r.v,n(p),r.n=33;break;case 32:n({success:!1,error:"No active tab found."});case 33:r.n=44;break;case 34:if("getPageInfo"!==e.action){r.n=39;break}return r.n=35,chrome.tabs.query({active:!0,currentWindow:!0});case 35:if(!(g=r.v)[0]){r.n=37;break}return r.n=36,kn(g[0]);case 36:m=r.v,n(m),r.n=38;break;case 37:n({success:!1,error:"No active tab found."});case 38:r.n=44;break;case 39:if("getHighlightsForPage"!==e.action){r.n=41;break}return r.n=40,An(e.url);case 40:v=r.v,n(v),r.n=44;break;case 41:if("removeHighlightFromStorage"!==e.action){r.n=43;break}return r.n=42,On(e.highlightId,e.url);case 42:y=r.v,n(y),r.n=44;break;case 43:n({success:!1,error:"Unknown action"});case 44:r.n=46;break;case 45:r.p=45,w=r.v,console.error("Background script error:",w),n({success:!1,error:w.message});case 46:return r.a(2)}},r,null,[[6,11],[0,45]])}))(),!0}),chrome.commands.onCommand.addListener(function(){var e=dn(un().m(function e(t){var n,r,i,s;return un().w(function(e){for(;;)switch(e.n){case 0:return console.log("Keyboard command received:",t),e.n=1,chrome.tabs.query({active:!0,currentWindow:!0});case 1:if((n=e.v)[0]){e.n=2;break}return e.a(2);case 2:r=n[0],i=t,e.n="save-page"===i||"save-to-inbox"===i?3:"open-command-palette"===i?5:12;break;case 3:return e.n=4,fn(r);case 4:return e.a(3,12);case 5:return e.p=5,e.n=6,chrome.tabs.sendMessage(r.id,{action:"openCommandPalette"});case 6:e.n=11;break;case 7:return e.p=7,e.v,console.log("Failed to open command palette from content script, trying sidepanel..."),e.p=8,e.n=9,chrome.sidePanel.open({windowId:r.windowId});case 9:e.n=11;break;case 10:e.p=10,s=e.v,console.error("Failed to open sidepanel:",s);case 11:return e.a(3,12);case 12:return e.a(2)}},e,null,[[8,10],[5,7]])}));return function(t){return e.apply(this,arguments)}}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,