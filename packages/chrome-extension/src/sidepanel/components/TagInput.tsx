import React, { useState, useEffect, useRef } from 'react';
import { X, Plus } from 'lucide-react';

interface Tag {
  id: string;
  name: string;
  usageCount?: number;
}

interface TagInputProps {
  selectedTags: Tag[];
  availableTags: Tag[];
  onTagsChange: (tags: Tag[]) => void;
  placeholder?: string;
  maxTags?: number;
}

const TagInput: React.FC<TagInputProps> = ({
  selectedTags,
  availableTags,
  onTagsChange,
  placeholder = "Add tags...",
  maxTags = 10
}) => {
  const [inputValue, setInputValue] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [focusedSuggestion, setFocusedSuggestion] = useState(-1);
  const inputRef = useRef<HTMLInputElement>(null);

  // Filter suggestions based on input and exclude already selected tags
  const suggestions = availableTags.filter(tag => 
    tag.name.toLowerCase().includes(inputValue.toLowerCase()) &&
    !selectedTags.find(selected => selected.name === tag.name)
  ).slice(0, 8); // Limit suggestions

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setInputValue(value);
    setShowSuggestions(value.length > 0);
    setFocusedSuggestion(-1);
  };

  const handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      if (focusedSuggestion >= 0 && suggestions[focusedSuggestion]) {
        addTag(suggestions[focusedSuggestion]);
      } else if (inputValue.trim()) {
        addNewTag(inputValue.trim());
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      setFocusedSuggestion(prev => 
        prev < suggestions.length - 1 ? prev + 1 : prev
      );
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      setFocusedSuggestion(prev => prev > 0 ? prev - 1 : -1);
    } else if (e.key === 'Escape') {
      setShowSuggestions(false);
      setFocusedSuggestion(-1);
    } else if (e.key === 'Backspace' && !inputValue && selectedTags.length > 0) {
      // Remove last tag when backspacing on empty input
      removeTag(selectedTags[selectedTags.length - 1]);
    }
  };

  const addTag = (tag: Tag) => {
    if (selectedTags.length >= maxTags) return;
    if (selectedTags.find(selected => selected.name === tag.name)) return;
    
    onTagsChange([...selectedTags, tag]);
    setInputValue('');
    setShowSuggestions(false);
    setFocusedSuggestion(-1);
    inputRef.current?.focus();
  };

  const addNewTag = (tagName: string) => {
    if (selectedTags.length >= maxTags) return;
    if (selectedTags.find(selected => selected.name.toLowerCase() === tagName.toLowerCase())) return;
    
    const newTag: Tag = {
      id: '', // Will be generated by the backend
      name: tagName.toLowerCase()
    };
    
    onTagsChange([...selectedTags, newTag]);
    setInputValue('');
    setShowSuggestions(false);
    setFocusedSuggestion(-1);
    inputRef.current?.focus();
  };

  const removeTag = (tagToRemove: Tag) => {
    onTagsChange(selectedTags.filter(tag => tag.name !== tagToRemove.name));
    inputRef.current?.focus();
  };

  const handleSuggestionClick = (tag: Tag) => {
    addTag(tag);
  };

  const getTagColor = (tagName: string): string => {
    const colors = [
      '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', 
      '#06b6d4', '#84cc16', '#f97316', '#ec4899', '#6366f1'
    ];
    let hash = 0;
    for (let i = 0; i < tagName.length; i++) {
      hash = tagName.charCodeAt(i) + ((hash << 5) - hash);
    }
    return colors[Math.abs(hash) % colors.length];
  };

  return (
    <div className="tag-input-container">
      <div className="tag-input-wrapper">
        {/* Selected tags */}
        {selectedTags.map((tag) => (
          <div 
            key={tag.name} 
            className="tag-chip"
            style={{ backgroundColor: getTagColor(tag.name) }}
          >
            <span className="tag-name">{tag.name}</span>
            <button
              onClick={() => removeTag(tag)}
              className="tag-remove"
              type="button"
              title={`Remove ${tag.name} tag`}
              aria-label={`Remove ${tag.name} tag`}
            >
              <X size={12} />
            </button>
          </div>
        ))}
        
        {/* Input */}
        <input
          ref={inputRef}
          type="text"
          value={inputValue}
          onChange={handleInputChange}
          onKeyDown={handleInputKeyDown}
          onFocus={() => setShowSuggestions(inputValue.length > 0)}
          onBlur={() => setTimeout(() => setShowSuggestions(false), 150)}
          placeholder={selectedTags.length === 0 ? placeholder : ''}
          className="tag-input"
          disabled={selectedTags.length >= maxTags}
        />
        
        {selectedTags.length < maxTags && (
          <div className="tag-input-icon">
            <Plus size={14} />
          </div>
        )}
      </div>

      {/* Suggestions dropdown */}
      {showSuggestions && suggestions.length > 0 && (
        <div className="tag-suggestions">
          {suggestions.map((tag, index) => (
            <button
              key={tag.id}
              onClick={() => handleSuggestionClick(tag)}
              className={`tag-suggestion ${index === focusedSuggestion ? 'focused' : ''}`}
              type="button"
            >
              <span 
                className="tag-suggestion-color"
                style={{ backgroundColor: getTagColor(tag.name) }}
              />
              <span className="tag-suggestion-name">{tag.name}</span>
              {tag.usageCount && tag.usageCount > 0 && (
                <span className="tag-suggestion-count">({tag.usageCount})</span>
              )}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default TagInput; 